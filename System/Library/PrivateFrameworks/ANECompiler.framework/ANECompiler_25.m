void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, unsigned int *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CheckTypesOp::parse;
  a1[3] = (BOOL (*)(uint64_t, unsigned int *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                       + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701869940 ? (v7 = *(_BYTE *)(a3 + 4) == 115) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701869940 && *(_BYTE *)(result + 4) == 115)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"types", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void **v7;

  v7 = (const void **)mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v7, (const void **)"types", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CheckTypesOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::CheckTypesOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CheckTypesOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CheckTypesOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::CheckTypesOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckTypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckTypesOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckTypesOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckTypesOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::CheckTypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::CheckTypesOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::CheckTypesOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::CheckTypesOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::CheckTypesOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (v7 = a1, mlir::pdl_interp::CheckTypesOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::CheckTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::ContinueOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::printAssembly(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ContinueOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ContinueOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v175;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v186 = 83;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[419];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v186 = 84;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[421];
  v14 = &unk_25451B000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_25451B000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl<Empty>]";
      v186 = 116;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_25451B000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[420];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[21];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v186 = 84;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[223] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v9;
  unint64_t AttrDictionary;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  mlir::OpState::printOpName((uint64_t)a2, a3, a4, a5);
  v11 = v13;
  v12 = 0x200000000;
  if (a2[47])
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(a2 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a3 + 192))(a3, Value, v9, v11, v12);
  if (v11 != v13)
    free(v11);
}

BOOL mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
      && mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl<mlir::pdl_interp::ContinueOp>::verifyTrait((uint64_t *)a1)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl<mlir::pdl_interp::ContinueOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ForEachOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "pdl_interp.foreach";
  v37[1] = 18;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = __p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = *--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            MEMORY[0x20BD002D4](v23, 0x1000C8077774924);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

uint64_t mlir::Op<mlir::pdl_interp::ContinueOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::HasParent<mlir::pdl_interp::ForEachOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.create_attribute", 27, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateAttributeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C035A78;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CreateAttributeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (v7 = *(_BYTE *)(a3 + 4) == 101) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 5 && *(_DWORD *)result == 1970037110 && *(_BYTE *)(result + 4) == 101)
    *v5 = a4;
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, v5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CreateAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateAttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties>(a2);
  return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateAttributeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v175;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<Empty>]";
      v186 = 118;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[338];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[419];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v186 = 84;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[421];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::CreateAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::CreateAttributeOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::CreateAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::pdl_interp::CreateOperationOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  _QWORD *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::pdl_interp::CreateOperationOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl_interp::CreateOperationOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  if (*v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"inferredResultTypes", 19, *v6);
  v7 = v6[1];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"inputAttributeNames", 19, v7);
  v8 = v6[2];
  if (v8)
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v8);
  v9 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)(v6 + 3), 3);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v9);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::pdl_interp::CreateOperationOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CreateOperationOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::CreateOperationOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3 != *(_QWORD *)a2)
    return 0;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  if (*(_QWORD *)(a3 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  return *(_QWORD *)(a3 + 24) == *(_QWORD *)(a2 + 24)
      && *(_DWORD *)(a3 + 32) == (unint64_t)*(unsigned int *)(a2 + 32);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateOperationOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::CreateOperationOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateOperationOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateOperationOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateOperationOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateOperationOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::pdl_interp::CreateOperationOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::CreateOperationOp::print((mlir::pdl_interp::CreateOperationOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
    return 0;
  v6 = a1;
  if (!mlir::pdl_interp::CreateOperationOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::pdl_interp::CreateOperationOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::CreateOperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CreateRangeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateRangeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateRangeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v153;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v163 = 81;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      v163 = 114;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = v8[344];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v163 = 88;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[73];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v163 = 95;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v163 = 99;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v26[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::RangeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!mlir::pdl::RangeOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::pdl::RangeOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::CreateRangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.create_type", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C034EC0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CreateTypeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (v7 = *(_BYTE *)(a3 + 4) == 101) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1970037110 && *(_BYTE *)(result + 4) == 101)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v7, (const void **)"value", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::CreateTypeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v175;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<Empty>]";
      v186 = 113;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[370];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[419];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v186 = 84;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[421];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::CreateTypeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::CreateTypeOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::CreateTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.create_types", 23, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0352A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::CreateTypesOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (v7 = *(_BYTE *)(a3 + 4) == 101) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1970037110 && *(_BYTE *)(result + 4) == 101)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void **v7;

  v7 = (const void **)mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v7, (const void **)"value", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::complex::ConstantOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::CreateTypesOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::CreateTypesOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v175;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      v186 = 114;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[344];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[419];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v186 = 84;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[421];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::CreateTypeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::CreateTypesOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::CreateTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::EraseOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::EraseOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v75 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v21 = v20;
    a1 = v75;
    if (v21)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v81 = 83;
      v22 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v22)
        v23 = v22;
      else
        v23 = v81;
      v24 = &v80[v23];
      v25 = v81 - v23;
      if (v81 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v81 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v75;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v71 = v3;
    v76 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v30 = v29;
    v3 = v71;
    a1 = v76;
    if (v30)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v81 = 83;
      v31 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v31)
        v32 = v31;
      else
        v32 = v81;
      v33 = &v80[v32];
      v34 = v81 - v32;
      if (v81 - v32 >= 0x12)
        v35 = 18;
      else
        v35 = v81 - v32;
      v36 = v34 - v35;
      if (v36 >= v36 - 1)
        v37 = v36 - 1;
      else
        v37 = v36;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v71;
      a1 = v76;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v72 = v3;
    v77 = a1;
    v68 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v68;
    v3 = v72;
    v39 = v38;
    a1 = v77;
    if (v39)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v81 = 86;
      v40 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v40)
        v41 = v40;
      else
        v41 = v81;
      v42 = &v80[v41];
      v43 = v81 - v41;
      if (v81 - v41 >= 0x12)
        v44 = 18;
      else
        v44 = v81 - v41;
      v45 = v43 - v44;
      if (v45 >= v45 - 1)
        v46 = v45 - 1;
      else
        v46 = v45;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v68;
      v3 = v72;
      a1 = v77;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v73 = v3;
    v78 = a1;
    v66 = v9;
    v69 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v66;
    v6 = v69;
    v48 = v47;
    v3 = v73;
    a1 = v78;
    if (v48)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v81 = 82;
      v49 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v49)
        v50 = v49;
      else
        v50 = v81;
      v51 = &v80[v50];
      v52 = v81 - v50;
      if (v81 - v50 >= 0x12)
        v53 = 18;
      else
        v53 = v81 - v50;
      v54 = v52 - v53;
      if (v54 >= v54 - 1)
        v55 = v54 - 1;
      else
        v55 = v54;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v51[v53], v55);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v66;
      v6 = v69;
      v3 = v73;
      a1 = v78;
    }
  }
  v12 = v11[19];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v74 = v3;
    v79 = a1;
    v67 = v9;
    v70 = v6;
    v65 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v65;
    v9 = v67;
    v6 = v70;
    v3 = v74;
    v57 = v56;
    a1 = v79;
    if (v57)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v81 = 84;
      v58 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v58)
        v59 = v58;
      else
        v59 = v81;
      v60 = &v80[v59];
      v61 = v81 - v59;
      if (v81 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v81 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v65;
      v9 = v67;
      v6 = v70;
      v3 = v74;
      a1 = v79;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v14[423] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::EraseOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.extract", 18, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::ExtractOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0364A0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::pdl_interp::ExtractOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (v7 = *(_BYTE *)(a3 + 4) == 120) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(_BYTE *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (const void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ExtractOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::ExtractOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::ExtractOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::ExtractOp::verifyInvariantsImpl((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::ExtractOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::FinalizeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::printAssembly(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FinalizeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FinalizeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v153;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v163 = 83;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = v8[419];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v163 = 84;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[421];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v163 = 95;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[312];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v163 = 99;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[314];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[21];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v163 = 84;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v26[223] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v9;
  unint64_t AttrDictionary;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  mlir::OpState::printOpName((uint64_t)a2, a3, a4, a5);
  v11 = v13;
  v12 = 0x200000000;
  if (a2[47])
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(a2 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a3 + 192))(a3, Value, v9, v11, v12);
  if (v11 != v13)
    free(v11);
}

BOOL mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::FinalizeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::foldHook()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::ForEachOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ForEachOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  unint64_t v100;

  v2 = &unk_254519000;
  if ((v1 & 1) == 0)
  {
    v93 = a1;
    v2 = (_QWORD *)&unk_254519000;
    v25 = v24;
    a1 = v93;
    if (v25)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v100 = 81;
      v26 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v26)
        v27 = v26;
      else
        v27 = v100;
      v28 = &v99[v27];
      v29 = v100 - v27;
      if (v100 - v27 >= 0x12)
        v30 = 18;
      else
        v30 = v100 - v27;
      v31 = v29 - v30;
      if (v31 >= v31 - 1)
        v32 = v31 - 1;
      else
        v32 = v31;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      v2 = (_QWORD *)&unk_254519000;
      a1 = v93;
    }
  }
  v3 = v2[415];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v88 = v3;
    v94 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v34 = v33;
    v3 = v88;
    a1 = v94;
    if (v34)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v100 = 83;
      v35 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v35)
        v36 = v35;
      else
        v36 = v100;
      v37 = &v99[v36];
      v38 = v100 - v36;
      if (v100 - v36 >= 0x12)
        v39 = 18;
      else
        v39 = v100 - v36;
      v40 = v38 - v39;
      if (v40 >= v40 - 1)
        v41 = v40 - 1;
      else
        v41 = v40;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v88;
      a1 = v94;
    }
  }
  v6 = v5[417];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v89 = v3;
    v95 = a1;
    v84 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v84;
    v3 = v89;
    v43 = v42;
    a1 = v95;
    if (v43)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneSuccessor<Empty>]";
      v100 = 84;
      v44 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v44)
        v45 = v44;
      else
        v45 = v100;
      v46 = &v99[v45];
      v47 = v100 - v45;
      if (v100 - v45 >= 0x12)
        v48 = 18;
      else
        v48 = v100 - v45;
      v49 = v47 - v48;
      if (v49 >= v49 - 1)
        v50 = v49 - 1;
      else
        v50 = v49;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneSuccessor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneSuccessor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v84;
      v3 = v89;
      a1 = v95;
    }
  }
  v9 = v8[33];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v90 = v3;
    v96 = a1;
    v81 = v9;
    v85 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v81;
    v6 = v85;
    v52 = v51;
    v3 = v90;
    a1 = v96;
    if (v52)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v100 = 82;
      v53 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v53)
        v54 = v53;
      else
        v54 = v100;
      v55 = &v99[v54];
      v56 = v100 - v54;
      if (v100 - v54 >= 0x12)
        v57 = 18;
      else
        v57 = v100 - v54;
      v58 = v56 - v57;
      if (v58 >= v58 - 1)
        v59 = v58 - 1;
      else
        v59 = v58;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v81;
      v6 = v85;
      v3 = v90;
      a1 = v96;
    }
  }
  v12 = v11[19];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v91 = v3;
    v97 = a1;
    v82 = v9;
    v86 = v6;
    v79 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v79;
    v9 = v82;
    v6 = v86;
    v3 = v91;
    v61 = v60;
    a1 = v97;
    if (v61)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v100 = 84;
      v62 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v62)
        v63 = v62;
      else
        v63 = v100;
      v64 = &v99[v63];
      v65 = v100 - v63;
      if (v100 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v100 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v79;
      v9 = v82;
      v6 = v86;
      v3 = v91;
      a1 = v97;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v92 = v3;
    v98 = a1;
    v83 = v9;
    v87 = v6;
    v78 = v15;
    v80 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v78;
    v12 = v80;
    v9 = v83;
    v6 = v87;
    v70 = v69;
    v3 = v92;
    a1 = v98;
    if (v70)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v100 = 84;
      v71 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v71)
        v72 = v71;
      else
        v72 = v100;
      v73 = &v99[v72];
      v74 = v100 - v72;
      if (v100 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v100 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v78;
      v12 = v80;
      v9 = v83;
      v6 = v87;
      v3 = v92;
      a1 = v98;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v17[223] == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v8;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v8 = a2;
  return mlir::pdl_interp::ForEachOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OneSuccessor<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::ForEachOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::pdl_interp::ForEachOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OneSuccessor<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::ForEachOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::ForEachOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;

  return mlir::OpTrait::impl::verifyOneRegion(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyOneSuccessor(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps10((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::ForEachOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.func", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C036248;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::FuncOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, size_t a4)
{
  int Context;
  _QWORD *v8;

  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::pdl_interp::FuncOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl_interp::FuncOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  if (*v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"arg_attrs", 9, *v5);
  v6 = v5[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"function_type", 13, v6);
  v7 = v5[2];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"res_attrs", 9, v7);
  v8 = v5[3];
  if (v8)
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, v8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::pdl_interp::FuncOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::getOpPropertyByteSize()
{
  return 32;
}

double mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::initProperties(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *a3 = *a4;
    a3[1] = v5;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return *(double *)&v4;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::FuncOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::FuncOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::copyProperties(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] == a2[2])
    return a3[3] == a2[3];
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::FuncOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::FuncOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, v4[2]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[3]);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isDeclaration;
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_254519000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
      v15 = 73;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[399], v2);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::isDeclaration()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  *v2 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getCallableRegion;
  v2[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getArgumentTypes;
  v2[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getResultTypes;
  v2[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getArgAttrsAttr;
  v2[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getResAttrsAttr;
  v2[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setArgAttrsAttr;
  v2[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setResAttrsAttr;
  v2[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::removeArgAttrsAttr;
  v2[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::removeResAttrsAttr;
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_254519000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallableOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::CallableOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[387], v2);
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getArgumentTypes(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t Value;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  Value = *(_QWORD *)(v2 + 8);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&Value);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getResultTypes(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t Value;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  Value = *(_QWORD *)(v2 + 8);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&Value);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getResAttrsAttr(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  return *(_QWORD *)(v2 + 16);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), a3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16), a3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v2 = 0;
  *v2 = 0;
  return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  *(_QWORD *)(v2 + 16) = 0;
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;

  v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::verifyBody;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::verifyType;
  v2[5] = mlir::detail::InterfaceMap::lookup<mlir::SymbolOpInterface>(a1);
  v2[6] = mlir::detail::InterfaceMap::lookup<mlir::CallableOpInterface>(a1);
  v4 = &unk_254519000;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)&unk_254519000;
    if (v5)
    {
      v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::FunctionOpInterface]";
      v14 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v6)
        v7 = v6;
      else
        v7 = v14;
      v8 = &v13[v7];
      v9 = v14 - v7;
      if (v14 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v14 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::FunctionOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_254519000;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[405], v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::getFunctionType(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v2 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v2 = 0;
  v4 = *(_QWORD *)(v2 + 8);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v4);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8), a3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::cloneTypeWith(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t Value;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v10 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v10 = 0;
  Value = *(_QWORD *)(v10 + 8);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value);
  return mlir::FunctionType::clone((mlir::Attribute *)&Value, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::verifyBody(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::FuncOp>::verifyType()
{
  return 1;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_254519000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_254519000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v186 = 81;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_254519000;
      a1 = v175;
    }
  }
  v3 = v2[415];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v186 = 83;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[419];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v186 = 84;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[421];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[310];
  v20 = &unk_254519000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_254519000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface::Trait<Empty>]";
      v186 = 87;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_254519000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[425];
  v23 = &unk_254519000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_254519000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CallableOpInterface::Trait<Empty>]";
      v186 = 89;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_254519000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[427];
  v26 = &unk_254519000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_254519000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::FunctionOpInterface::Trait<Empty>]";
      v186 = 89;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_254519000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[429];
  v29 = &unk_254519000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_254519000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      v186 = 91;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_254519000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[431] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t v9;
  uint64_t v10;

  mlir::OpState::printOpName(a2, a3, a4, a5);
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroOperands<mlir::pdl_interp::FuncOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::FuncOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::SymbolOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::CallableOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::FunctionOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::pdl_interp::FuncOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::FuncOp>,mlir::OpTrait::ZeroOperands<mlir::pdl_interp::FuncOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::FuncOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::SymbolOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::CallableOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::FunctionOpInterface::Trait<mlir::pdl_interp::FuncOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::pdl_interp::FuncOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
    && (v8 = a1, mlir::pdl_interp::FuncOp::verifyInvariantsImpl((uint64_t **)&v8))
    && mlir::detail::verifySymbol(a1, v6))
  {
    return mlir::function_interface_impl::verifyTrait<mlir::func::FuncOp>((uint64_t)a1) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::pdl_interp::FuncOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_attribute", 24, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C035690;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetAttributeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 4 && *a3 == 1701667182)
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

_DWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 4 && *result == 1701667182)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
        v8 = a4;
      else
        v8 = 0;
      *v5 = v8;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::func::__mlir_ods_local_attr_constraint_FuncOps1(v7, (const void **)"name", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v175;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<Empty>]";
      v186 = 118;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[338];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::GetAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::GetAttributeOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetAttributeTypeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetAttributeTypeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetAttributeTypeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v153;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v163 = 81;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<Empty>]";
      v163 = 113;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = v8[370];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v163 = 82;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v163 = 95;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v163 = 99;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v26[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::GetAttributeTypeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneResult<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::GetAttributeTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::GetAttributeTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::GetAttributeTypeOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneResult<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::GetAttributeTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::GetAttributeTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::GetAttributeTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::GetAttributeTypeOp>>(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;

  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
    || !mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps2((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 36))
    v6 = a1 - 16;
  else
    v6 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1((uint64_t *)a1, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::GetAttributeTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetDefiningOpOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetDefiningOpOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetDefiningOpOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v153;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v163 = 81;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<Empty>]";
      v163 = 118;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = v8[346];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v163 = 82;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v163 = 95;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v163 = 99;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v26[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::GetDefiningOpOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneResult<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::GetDefiningOpOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::GetDefiningOpOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::GetDefiningOpOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneResult<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::GetDefiningOpOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::GetDefiningOpOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::GetDefiningOpOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::GetDefiningOpOp>>(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;

  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
    || !mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps11((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 36))
    v6 = a1 - 16;
  else
    v6 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3((uint64_t *)a1, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::GetDefiningOpOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_operand", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C034F88;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetOperandOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (v7 = *(_BYTE *)(a3 + 4) == 120) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(_BYTE *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (const void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::ResultOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::GetOperandOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetOperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_operands", 23, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandsOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C035370;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::pdl_interp::GetOperandsOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (v7 = *(_BYTE *)(a3 + 4) == 120) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(_BYTE *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (const void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultsOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetOperandsOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetOperandsOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::GetOperandsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::GetOperandsOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetOperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_result", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C034C68;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetResultOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (v7 = *(_BYTE *)(a3 + 4) == 120) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(_BYTE *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (const void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::ResultOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::GetOperandOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.get_results", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C035050;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::pdl_interp::GetResultsOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (v7 = *(_BYTE *)(a3 + 4) == 120) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(_BYTE *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps3(v7, (const void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultsOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetResultsOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetResultsOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::GetOperandsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::GetOperandsOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetUsersOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetUsersOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetUsersOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v153;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v163 = 81;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      v163 = 114;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = v8[344];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v163 = 82;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v163 = 95;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v163 = 99;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v26[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::GetDefiningOpOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::GetUsersOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl_interp::GetUsersOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::GetValueTypeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::GetValueTypeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::GetValueTypeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v153;
    }
  }
  v3 = v2[13];
  v5 = &unk_25451A000;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = (_QWORD *)&unk_25451A000;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v163 = 81;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = (_QWORD *)&unk_25451A000;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[15];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl<Empty>]";
      v163 = 112;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = v8[362];
  v11 = &unk_254519000;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = (_QWORD *)&unk_254519000;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v163 = 86;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = (_QWORD *)&unk_254519000;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[419];
  v14 = &unk_25451A000;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = (_QWORD *)&unk_25451A000;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v163 = 82;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = (_QWORD *)&unk_25451A000;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[19];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v163 = 95;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v163 = 99;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v26[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::GetValueTypeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl_interp::GetValueTypeOp::verifyInvariantsImpl((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::GetValueTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, unsigned int *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::IsNotNullOp::parse;
  a1[3] = (BOOL (*)(uint64_t, unsigned int *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                       + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::IsNotNullOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::IsNotNullOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  const char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v153 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v37 = v36;
    a1 = v153;
    if (v37)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v163 = 83;
      v38 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v38)
        v39 = v38;
      else
        v39 = v163;
      v40 = &v162[v39];
      v41 = v163 - v39;
      if (v163 - v39 >= 0x12)
        v42 = 18;
      else
        v42 = v163 - v39;
      v43 = v41 - v42;
      if (v43 >= v43 - 1)
        v44 = v43 - 1;
      else
        v44 = v43;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v153;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v145 = v3;
    v154 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v46 = v45;
    v3 = v145;
    a1 = v154;
    if (v46)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v163 = 83;
      v47 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v47)
        v48 = v47;
      else
        v48 = v163;
      v49 = &v162[v48];
      v50 = v163 - v48;
      if (v163 - v48 >= 0x12)
        v51 = 18;
      else
        v51 = v163 - v48;
      v52 = v50 - v51;
      if (v52 >= v52 - 1)
        v53 = v52 - 1;
      else
        v53 = v52;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v145;
      a1 = v154;
    }
  }
  v6 = v5[417];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v146 = v3;
    v155 = a1;
    v138 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v138;
    v55 = v54;
    v3 = v146;
    a1 = v155;
    if (v55)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NSuccessors<2>::Impl<Empty>]";
      v163 = 92;
      v56 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v56)
        v57 = v56;
      else
        v57 = v163;
      v58 = &v162[v57];
      v59 = v163 - v57;
      if (v163 - v57 >= 0x12)
        v60 = 18;
      else
        v60 = v163 - v57;
      v61 = v59 - v60;
      if (v61 >= v61 - 1)
        v62 = v61 - 1;
      else
        v62 = v61;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NSuccessors<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NSuccessors<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v138;
      v3 = v146;
      a1 = v155;
    }
  }
  v9 = v8[35];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v147 = v3;
    v156 = a1;
    v132 = v9;
    v139 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v132;
    v6 = v139;
    v64 = v63;
    v3 = v147;
    a1 = v156;
    if (v64)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v163 = 82;
      v65 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v65)
        v66 = v65;
      else
        v66 = v163;
      v67 = &v162[v66];
      v68 = v163 - v66;
      if (v163 - v66 >= 0x12)
        v69 = 18;
      else
        v69 = v163 - v66;
      v70 = v68 - v69;
      if (v70 >= v70 - 1)
        v71 = v70 - 1;
      else
        v71 = v70;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v132;
      v6 = v139;
      v3 = v147;
      a1 = v156;
    }
  }
  v12 = v11[19];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v148 = v3;
    v157 = a1;
    v133 = v9;
    v140 = v6;
    v127 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v127;
    v9 = v133;
    v6 = v140;
    v73 = v72;
    v3 = v148;
    a1 = v157;
    if (v73)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v163 = 84;
      v74 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v74)
        v75 = v74;
      else
        v75 = v163;
      v76 = &v162[v75];
      v77 = v163 - v75;
      if (v163 - v75 >= 0x12)
        v78 = 18;
      else
        v78 = v163 - v75;
      v79 = v77 - v78;
      if (v79 >= v79 - 1)
        v80 = v79 - 1;
      else
        v80 = v79;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v127;
      v9 = v133;
      v6 = v140;
      v3 = v148;
      a1 = v157;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v149 = v3;
    v158 = a1;
    v134 = v9;
    v141 = v6;
    v123 = v15;
    v128 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v123;
    v12 = v128;
    v9 = v134;
    v6 = v141;
    v82 = v81;
    v3 = v149;
    a1 = v158;
    if (v82)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v163 = 84;
      v83 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v83)
        v84 = v83;
      else
        v84 = v163;
      v85 = &v162[v84];
      v86 = v163 - v84;
      if (v163 - v84 >= 0x12)
        v87 = 18;
      else
        v87 = v163 - v84;
      v88 = v86 - v87;
      if (v88 >= v88 - 1)
        v89 = v88 - 1;
      else
        v89 = v88;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v123;
      v12 = v128;
      v9 = v134;
      v6 = v141;
      v3 = v149;
      a1 = v158;
    }
  }
  v18 = v17[223];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v150 = v3;
    v159 = a1;
    v135 = v9;
    v142 = v6;
    v124 = v15;
    v129 = v12;
    v120 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v120;
    v15 = v124;
    v12 = v129;
    v9 = v135;
    v6 = v142;
    v91 = v90;
    v3 = v150;
    a1 = v159;
    if (v91)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v163 = 95;
      v92 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v92)
        v93 = v92;
      else
        v93 = v163;
      v94 = &v162[v93];
      v95 = v163 - v93;
      if (v163 - v93 >= 0x12)
        v96 = 18;
      else
        v96 = v163 - v93;
      v97 = v95 - v96;
      if (v97 >= v97 - 1)
        v98 = v97 - 1;
      else
        v98 = v97;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v120;
      v15 = v124;
      v12 = v129;
      v9 = v135;
      v6 = v142;
      v3 = v150;
      a1 = v159;
    }
  }
  v21 = v20[312];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v151 = v3;
    v160 = a1;
    v136 = v9;
    v143 = v6;
    v125 = v15;
    v130 = v12;
    v118 = v21;
    v121 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v118;
    v18 = v121;
    v15 = v125;
    v12 = v130;
    v9 = v136;
    v6 = v143;
    v100 = v99;
    v3 = v151;
    a1 = v160;
    if (v100)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v163 = 99;
      v101 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v101)
        v102 = v101;
      else
        v102 = v163;
      v103 = &v162[v102];
      v104 = v163 - v102;
      if (v163 - v102 >= 0x12)
        v105 = 18;
      else
        v105 = v163 - v102;
      v106 = v104 - v105;
      if (v106 >= v106 - 1)
        v107 = v106 - 1;
      else
        v107 = v106;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v118;
      v18 = v121;
      v15 = v125;
      v12 = v130;
      v9 = v136;
      v6 = v143;
      v3 = v151;
      a1 = v160;
    }
  }
  v24 = v23[314];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v152 = v3;
    v161 = a1;
    v137 = v9;
    v144 = v6;
    v126 = v15;
    v131 = v12;
    v119 = v21;
    v122 = v18;
    v117 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v117;
    v21 = v119;
    v18 = v122;
    v15 = v126;
    v12 = v131;
    v9 = v137;
    v6 = v144;
    v109 = v108;
    v3 = v152;
    a1 = v161;
    if (v109)
    {
      v162 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v163 = 93;
      v110 = llvm::StringRef::find((uint64_t *)&v162, "DesiredTypeName = ", 0x12uLL, 0);
      if (v163 >= v110)
        v111 = v110;
      else
        v111 = v163;
      v112 = &v162[v111];
      v113 = v163 - v111;
      if (v163 - v111 >= 0x12)
        v114 = 18;
      else
        v114 = v163 - v111;
      v115 = v113 - v114;
      if (v115 >= v115 - 1)
        v116 = v115 - 1;
      else
        v116 = v115;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v117;
      v21 = v119;
      v18 = v122;
      v15 = v126;
      v12 = v131;
      v9 = v137;
      v6 = v144;
      v3 = v152;
      a1 = v161;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v26[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::IsNotNullOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::IsNotNullOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::IsNotNullOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::IsNotNullOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::NSuccessors<2u>::Impl<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::IsNotNullOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::IsNotNullOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::IsNotNullOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::IsNotNullOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyNSuccessors(a1, (mlir::Operation *)2)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
      && mlir::pdl_interp::__mlir_ods_local_type_constraint_PDLInterpOps1((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::IsNotNullOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::NSuccessors<2u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::RecordMatchOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  _QWORD *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::pdl_interp::RecordMatchOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _DWORD *AttrData;
  size_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl_interp::RecordMatchOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  mlir::pdl_interp::RecordMatchOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::pdl_interp::RecordMatchOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::getOpPropertyByteSize()
{
  return 40;
}

double mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v4;
    *(_OWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)&v4 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::RecordMatchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::RecordMatchOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a3 != *a2)
    return 0;
  if (a3[1] != a2[1])
    return 0;
  if (a3[2] != a2[2])
    return 0;
  if (a3[3] == a2[3])
    return a3[4] == a2[4];
  return 0;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::RecordMatchOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::pdl_interp::RecordMatchOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::RecordMatchOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::RecordMatchOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::RecordMatchOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::RecordMatchOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::pdl_interp::RecordMatchOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  unint64_t v141;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v132 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v33 = v32;
    a1 = v132;
    if (v33)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v141 = 83;
      v34 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v34)
        v35 = v34;
      else
        v35 = v141;
      v36 = &v140[v35];
      v37 = v141 - v35;
      if (v141 - v35 >= 0x12)
        v38 = 18;
      else
        v38 = v141 - v35;
      v39 = v37 - v38;
      if (v39 >= v39 - 1)
        v40 = v39 - 1;
      else
        v40 = v39;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v132;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v133 = a1;
    v125 = v3;
    v5 = (_QWORD *)&unk_254519000;
    v3 = v125;
    v42 = v41;
    a1 = v133;
    if (v42)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v141 = 83;
      v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v43)
        v44 = v43;
      else
        v44 = v141;
      v45 = &v140[v44];
      v46 = v141 - v44;
      if (v141 - v44 >= 0x12)
        v47 = 18;
      else
        v47 = v141 - v44;
      v48 = v46 - v47;
      if (v48 >= v48 - 1)
        v49 = v48 - 1;
      else
        v49 = v48;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v45[v47], v49);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v125;
      a1 = v133;
    }
  }
  v6 = v5[417];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v134 = a1;
    v119 = v6;
    v126 = v3;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v119;
    v3 = v126;
    v51 = v50;
    a1 = v134;
    if (v51)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneSuccessor<Empty>]";
      v141 = 84;
      v52 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v52)
        v53 = v52;
      else
        v53 = v141;
      v54 = &v140[v53];
      v55 = v141 - v53;
      if (v141 - v53 >= 0x12)
        v56 = 18;
      else
        v56 = v141 - v53;
      v57 = v55 - v56;
      if (v57 >= v57 - 1)
        v58 = v57 - 1;
      else
        v58 = v57;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneSuccessor<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneSuccessor>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v54[v56], v58);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v119;
      v3 = v126;
      a1 = v134;
    }
  }
  v9 = v8[33];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v135 = a1;
    v120 = v6;
    v127 = v3;
    v114 = v9;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v114;
    v6 = v120;
    v3 = v127;
    v60 = v59;
    a1 = v135;
    if (v60)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v141 = 88;
      v61 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v61)
        v62 = v61;
      else
        v62 = v141;
      v63 = &v140[v62];
      v64 = v141 - v62;
      if (v141 - v62 >= 0x12)
        v65 = 18;
      else
        v65 = v141 - v62;
      v66 = v64 - v65;
      if (v66 >= v66 - 1)
        v67 = v66 - 1;
      else
        v67 = v66;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v63[v65], v67);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v114;
      v6 = v120;
      v3 = v127;
      a1 = v135;
    }
  }
  v12 = v11[73];
  v14 = &unk_25451B000;
  if ((v13 & 1) == 0)
  {
    v136 = a1;
    v121 = v6;
    v128 = v3;
    v110 = v12;
    v115 = v9;
    v14 = (_QWORD *)&unk_25451B000;
    v12 = v110;
    v9 = v115;
    v6 = v121;
    v3 = v128;
    v69 = v68;
    a1 = v136;
    if (v69)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v141 = 96;
      v70 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v70)
        v71 = v70;
      else
        v71 = v141;
      v72 = &v140[v71];
      v73 = v141 - v71;
      if (v141 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v141 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v14 = (_QWORD *)&unk_25451B000;
      v12 = v110;
      v9 = v115;
      v6 = v121;
      v3 = v128;
      a1 = v136;
    }
  }
  v15 = v14[37];
  v17 = &unk_254519000;
  if ((v16 & 1) == 0)
  {
    v137 = a1;
    v122 = v6;
    v129 = v3;
    v111 = v12;
    v116 = v9;
    v107 = v15;
    v17 = (_QWORD *)&unk_254519000;
    v15 = v107;
    v12 = v111;
    v9 = v116;
    v6 = v122;
    v3 = v129;
    v78 = v77;
    a1 = v137;
    if (v78)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v141 = 84;
      v79 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v79)
        v80 = v79;
      else
        v80 = v141;
      v81 = &v140[v80];
      v82 = v141 - v80;
      if (v141 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v141 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      v17 = (_QWORD *)&unk_254519000;
      v15 = v107;
      v12 = v111;
      v9 = v116;
      v6 = v122;
      v3 = v129;
      a1 = v137;
    }
  }
  v18 = v17[423];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v138 = a1;
    v123 = v6;
    v130 = v3;
    v112 = v12;
    v117 = v9;
    v105 = v18;
    v108 = v15;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v105;
    v15 = v108;
    v12 = v112;
    v9 = v117;
    v6 = v123;
    v3 = v130;
    v87 = v86;
    a1 = v138;
    if (v87)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v141 = 89;
      v88 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v88)
        v89 = v88;
      else
        v89 = v141;
      v90 = &v140[v89];
      v91 = v141 - v89;
      if (v141 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v141 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v105;
      v15 = v108;
      v12 = v112;
      v9 = v117;
      v6 = v123;
      v3 = v130;
      a1 = v138;
    }
  }
  v21 = v20[310];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v139 = a1;
    v124 = v6;
    v131 = v3;
    v113 = v12;
    v118 = v9;
    v106 = v18;
    v109 = v15;
    v104 = v21;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v104;
    v18 = v106;
    v15 = v109;
    v12 = v113;
    v9 = v118;
    v6 = v124;
    v3 = v131;
    v96 = v95;
    a1 = v139;
    if (v96)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v141 = 84;
      v97 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v97)
        v98 = v97;
      else
        v98 = v141;
      v99 = &v140[v98];
      v100 = v141 - v98;
      if (v141 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v141 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v104;
      v18 = v106;
      v15 = v109;
      v12 = v113;
      v9 = v118;
      v6 = v124;
      v3 = v131;
      a1 = v139;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v18 == a1 || v21 == a1 || v23[223] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::RecordMatchOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::OneSuccessor<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::VariadicOperands<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::RecordMatchOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::RecordMatchOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::OneSuccessor<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::VariadicOperands<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::RecordMatchOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::RecordMatchOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::RecordMatchOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyOneSuccessor(a1, v4)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (v7 = a1, mlir::pdl_interp::RecordMatchOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::RecordMatchOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::OneSuccessor,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::foldHook()
{
  mlir::Operation *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl_interp::ReplaceOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD *v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::ReplaceOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t v81;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v75 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v21 = v20;
    a1 = v75;
    if (v21)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v81 = 83;
      v22 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v22)
        v23 = v22;
      else
        v23 = v81;
      v24 = &v80[v23];
      v25 = v81 - v23;
      if (v81 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v81 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v75;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v71 = v3;
    v76 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v30 = v29;
    v3 = v71;
    a1 = v76;
    if (v30)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v81 = 83;
      v31 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v31)
        v32 = v31;
      else
        v32 = v81;
      v33 = &v80[v32];
      v34 = v81 - v32;
      if (v81 - v32 >= 0x12)
        v35 = 18;
      else
        v35 = v81 - v32;
      v36 = v34 - v35;
      if (v36 >= v36 - 1)
        v37 = v36 - 1;
      else
        v37 = v36;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v33[v35], v37);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v71;
      a1 = v76;
    }
  }
  v6 = v5[417];
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v72 = v3;
    v77 = a1;
    v68 = v6;
    v8 = (_QWORD *)&unk_254519000;
    v6 = v68;
    v3 = v72;
    v39 = v38;
    a1 = v77;
    if (v39)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v81 = 86;
      v40 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v40)
        v41 = v40;
      else
        v41 = v81;
      v42 = &v80[v41];
      v43 = v81 - v41;
      if (v81 - v41 >= 0x12)
        v44 = 18;
      else
        v44 = v81 - v41;
      v45 = v43 - v44;
      if (v45 >= v45 - 1)
        v46 = v45 - 1;
      else
        v46 = v45;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
      v8 = (_QWORD *)&unk_254519000;
      v6 = v68;
      v3 = v72;
      a1 = v77;
    }
  }
  v9 = v8[419];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v73 = v3;
    v78 = a1;
    v66 = v9;
    v69 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v66;
    v6 = v69;
    v48 = v47;
    v3 = v73;
    a1 = v78;
    if (v48)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v81 = 97;
      v49 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v49)
        v50 = v49;
      else
        v50 = v81;
      v51 = &v80[v50];
      v52 = v81 - v50;
      if (v81 - v50 >= 0x12)
        v53 = 18;
      else
        v53 = v81 - v50;
      v54 = v52 - v53;
      if (v54 >= v54 - 1)
        v55 = v54 - 1;
      else
        v55 = v54;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v51[v53], v55);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v66;
      v6 = v69;
      v3 = v73;
      a1 = v78;
    }
  }
  v12 = v11[423];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v74 = v3;
    v79 = a1;
    v67 = v9;
    v70 = v6;
    v65 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v65;
    v9 = v67;
    v6 = v70;
    v3 = v74;
    v57 = v56;
    a1 = v79;
    if (v57)
    {
      v80 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v81 = 84;
      v58 = llvm::StringRef::find((uint64_t *)&v80, "DesiredTypeName = ", 0x12uLL, 0);
      if (v81 >= v58)
        v59 = v58;
      else
        v59 = v81;
      v60 = &v80[v59];
      v61 = v81 - v59;
      if (v81 - v59 >= 0x12)
        v62 = 18;
      else
        v62 = v81 - v59;
      v63 = v61 - v62;
      if (v63 >= v63 - 1)
        v64 = v63 - 1;
      else
        v64 = v63;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v60[v62], v64);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v65;
      v9 = v67;
      v6 = v70;
      v3 = v74;
      a1 = v79;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v14[423] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::ReplaceOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(uint64_t a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::ReplaceOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::pdl_interp::ReplaceOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::ReplaceOp>>(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL8 result;

  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands((mlir::OpTrait::impl *)a1, (mlir::Operation *)1)
    || !mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 46) & 0x80) != 0)
  {
    v5 = *(unsigned int *)(a1 + 68);
    v6 = v5 - 1;
    if (v5 == 1)
      return 1;
    v7 = *(_QWORD *)(a1 + 72) + 32;
  }
  else
  {
    v6 = -1;
    v7 = 32;
  }
  v8 = 0;
  v9 = v7 + 24;
  do
  {
    v10 = mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, (int)v8 + 1);
    result = v10 != 0;
    if (!v10)
      break;
    ++v8;
    v9 += 32;
    result = 1;
  }
  while (v6 != v8);
  return result;
}

uint64_t mlir::Op<mlir::pdl_interp::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_attribute", 27, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchAttributeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C035C08;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchAttributeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(_QWORD *)a3 == 0x756C615665736163 ? (v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (v7 = 0), v7))
  {
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(_QWORD *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::complex::__mlir_ods_local_attr_constraint_ComplexOps1(v7, (const void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchAttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchAttributeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 v28;
  _QWORD *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  unint64_t v186;

  v2 = &unk_25451A000;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = (_QWORD *)&unk_25451A000;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = (_QWORD *)&unk_25451A000;
      a1 = v175;
    }
  }
  v3 = v2[13];
  v5 = &unk_254519000;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = (_QWORD *)&unk_254519000;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v186 = 83;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = (_QWORD *)&unk_254519000;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[417];
  v8 = &unk_25451B000;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = (_QWORD *)&unk_25451B000;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNSuccessors<1>::Impl<Empty>]";
      v186 = 99;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNSuccessors<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = (_QWORD *)&unk_25451B000;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[39];
  v11 = &unk_25451A000;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = (_QWORD *)&unk_25451A000;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = (_QWORD *)&unk_25451A000;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[19];
  v14 = &unk_254519000;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = (_QWORD *)&unk_254519000;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = (_QWORD *)&unk_254519000;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[423];
  v17 = &unk_25451A000;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = (_QWORD *)&unk_25451A000;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = (_QWORD *)&unk_25451A000;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[310];
  v20 = &unk_25451A000;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = (_QWORD *)&unk_25451A000;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v186 = 84;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = (_QWORD *)&unk_25451A000;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[223];
  v23 = &unk_25451A000;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (_QWORD *)&unk_25451A000;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (_QWORD *)&unk_25451A000;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[312];
  v26 = &unk_25451A000;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (_QWORD *)&unk_25451A000;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (_QWORD *)&unk_25451A000;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[314];
  v29 = &unk_25451A000;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = (_QWORD *)&unk_25451A000;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = (_QWORD *)&unk_25451A000;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return v3 == a1
      || v6 == a1
      || v9 == a1
      || v12 == a1
      || v15 == a1
      || v18 == a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[21] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::SwitchAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  Operation *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchAttributeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchAttributeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchAttributeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchAttributeOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::pdl_interp::SwitchAttributeOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchAttributeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchAttributeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchAttributeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchAttributeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchAttributeOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (v7 = a1, mlir::pdl_interp::SwitchAttributeOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchAttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_operand_count", 31, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperandCountOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C0360B8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchOperandCountOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(_QWORD *)a3 == 0x756C615665736163 ? (v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (v7 = 0), v7))
  {
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(_QWORD *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      result = mlir::DenseIntElementsAttr::classof(a4);
      if ((_DWORD)result)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v7, (const void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchOperandCountOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperandCountOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperandCountOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::SwitchOperandCountOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  Operation *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperandCountOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperandCountOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::pdl_interp::SwitchOperandCountOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperandCountOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperandCountOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (v7 = a1, mlir::pdl_interp::SwitchOperandCountOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchOperandCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_operation_name", 32, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperationNameOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C036180;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchOperationNameOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(_QWORD *)a3 == 0x756C615665736163 ? (v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (v7 = 0), v7))
  {
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(_QWORD *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v7, (const void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchOperationNameOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchOperationNameOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::SwitchOperationNameOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  Operation *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperationNameOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperationNameOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperationNameOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::pdl_interp::SwitchAttributeOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperationNameOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperationNameOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperationNameOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperationNameOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (v7 = a1, mlir::pdl_interp::SwitchOperationNameOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchOperationNameOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_result_count", 30, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchResultCountOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C035F28;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchResultCountOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(_QWORD *)a3 == 0x756C615665736163 ? (v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (v7 = 0), v7))
  {
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(_QWORD *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      result = mlir::DenseIntElementsAttr::classof(a4);
      if ((_DWORD)result)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps13(v7, (const void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchOperandCountOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchResultCountOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchResultCountOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::SwitchOperandCountOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  Operation *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchOperandCountOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchOperandCountOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchOperandCountOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchOperandCountOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::pdl_interp::SwitchOperandCountOp::verify(&v4) != 0;
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchResultCountOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_type", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypeOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C035118;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchTypeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(_QWORD *)a3 == 0x756C615665736163 ? (v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (v7 = 0), v7))
  {
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(_QWORD *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void **v7;

  v7 = (const void **)mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v7, (const void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypeOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::SwitchAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  Operation *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchTypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchTypeOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::pdl_interp::SwitchAttributeOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchTypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchTypeOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchTypeOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchTypeOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchTypeOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (v7 = a1, mlir::pdl_interp::SwitchTypeOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchTypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl_interp.switch_types", 23, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypesOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_24C035500;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::pdl_interp::SwitchTypesOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::printAssembly(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                        + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 10
    && (*(_QWORD *)a3 == 0x756C615665736163 ? (v7 = *(unsigned __int16 *)(a3 + 8) == 29541) : (v7 = 0), v7))
  {
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 10 && *(_QWORD *)result == 0x756C615665736163 && *(_WORD *)(result + 8) == 29541)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"caseValues", 10, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl_interp::__mlir_ods_local_attr_constraint_PDLInterpOps14(v7, (const void **)"caseValues", (const char *)0xA, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl_interp::SwitchAttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl_interp::SwitchAttributeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl_interp::SwitchTypesOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::writeProperties;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[302], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::getSpeculatability;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[304], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl_interp::SwitchTypesOp>::getEffects;
  v4 = &unk_25451A000;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = (_QWORD *)&unk_25451A000;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = (_QWORD *)&unk_25451A000;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[1], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl_interp::SwitchAttributeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  Operation *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchTypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchTypesOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchTypesOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchTypesOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::pdl_interp::SwitchAttributeOp::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::ZeroResults<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::OneOperand<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::OpInvariants<mlir::pdl_interp::SwitchTypesOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::IsTerminator<mlir::pdl_interp::SwitchTypesOp>,mlir::ConditionallySpeculatable::Trait<mlir::pdl_interp::SwitchTypesOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::pdl_interp::SwitchTypesOp>,mlir::MemoryEffectOpInterface::Trait<mlir::pdl_interp::SwitchTypesOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyAtLeastNSuccessors(a1, (mlir::Operation *)1)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v4)
    && (v7 = a1, mlir::pdl_interp::SwitchTypesOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl_interp::SwitchTypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::AtLeastNSuccessors<1u>::Impl,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::pdl_interp::FuncOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::ApplyConstraintOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

uint64_t llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v3;
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(_QWORD *)a1 + 8 * v5 - 8;
}

uint64_t llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},void llvm::interleave<mlir::SuccessorRange,void llvm::interleaveComma<mlir::SuccessorRange,mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &)::{lambda(mlir::Block * const&)#1},mlir::OpAsmPrinter,mlir::Block *>(mlir::SuccessorRange const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  const char *v18;
  unint64_t v19;
  void *v20;
  uint64_t *i;
  uint64_t v22;
  llvm::raw_ostream *v23;
  const char *v24;
  unint64_t v25;
  void *v26;

  v12 = result;
  v13 = result == a3;
  if (result != a3 || a2 != a4)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a5 + 176))(a5, *(_QWORD *)(result + 32 * a2 + 24));
    if (!v13 || a2 + 1 != a4)
    {
      if (!v13)
      {
        for (i = (uint64_t *)(v12 + 32 * a2 + 56); ; i += 4)
        {
          v23 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
          v24 = *(const char **)a7;
          v25 = *(_QWORD *)(a7 + 8);
          v26 = (void *)*((_QWORD *)v23 + 4);
          if (v25 > *((_QWORD *)v23 + 3) - (_QWORD)v26)
          {
            llvm::raw_ostream::write(v23, v24, *(_QWORD *)(a7 + 8));
          }
          else if (v25)
          {
            memcpy(v26, v24, *(_QWORD *)(a7 + 8));
            *((_QWORD *)v23 + 4) += v25;
          }
          v22 = *i;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 176))(a5, v22);
        }
      }
      v14 = ~a2 + a4;
      v15 = (uint64_t *)(v12 + 32 * a2 + 56);
      do
      {
        v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
        v18 = *(const char **)a7;
        v19 = *(_QWORD *)(a7 + 8);
        v20 = (void *)*((_QWORD *)v17 + 4);
        if (v19 > *((_QWORD *)v17 + 3) - (_QWORD)v20)
        {
          llvm::raw_ostream::write(v17, v18, *(_QWORD *)(a7 + 8));
        }
        else if (v19)
        {
          memcpy(v20, v18, *(_QWORD *)(a7 + 8));
          *((_QWORD *)v17 + 4) += v19;
        }
        v16 = *v15;
        v15 += 4;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 176))(a5, v16);
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ApplyRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::ApplyRewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

uint64_t mlir::AsmParser::parseType<mlir::pdl::PDLType>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  _QWORD v20[3];
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *__p;
  _QWORD *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v19 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v19))
    return 0;
  v5 = v19;
  if (mlir::pdl::PDLType::classof(v19))
    v6 = v5;
  else
    v6 = 0;
  *a2 = v6;
  if (v6)
    return 1;
  v17 = "invalid kind of type specified";
  v18 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v20, a1, v4, &v17);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  if (v27)
  {
    v9 = __p;
    if (__p)
    {
      v10 = v26;
      v11 = __p;
      if (v26 != __p)
      {
        do
          v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        v11 = __p;
      }
      v26 = v9;
      operator delete(v11);
    }
    v12 = v23;
    if (v23)
    {
      v13 = v24;
      v14 = v23;
      if (v24 != v23)
      {
        do
        {
          v16 = *--v13;
          v15 = v16;
          *v13 = 0;
          if (v16)
            MEMORY[0x20BD002D4](v15, 0x1000C8077774924);
        }
        while (v13 != v12);
        v14 = v23;
      }
      v24 = v12;
      operator delete(v14);
    }
    if (v21 != &v22)
      free(v21);
  }
  return v7;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperandCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckOperandCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckOperationNameOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckOperationNameOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckResultCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckResultCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckTypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CheckTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CheckTypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateOperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CreateOperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CreateTypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::CreateTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::CreateTypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::ExtractOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::ExtractOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetAttributeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetOperandOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetOperandsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetOperandsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetResultOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::GetResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::GetResultsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::RecordMatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::SymbolRefAttr>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  _QWORD v21[3];
  void *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *__p;
  _QWORD *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v20 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v20, a3))
    return 0;
  v7 = v20;
  if (*(_UNKNOWN **)(*(_QWORD *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
    v7 = 0;
  *a2 = v7;
  if (v7)
    return 1;
  v18 = "invalid kind of attribute specified";
  v19 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v21, a1, v6, &v18);
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  if (v28)
  {
    v10 = __p;
    if (__p)
    {
      v11 = v27;
      v12 = __p;
      if (v27 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v27 = v10;
      operator delete(v12);
    }
    v13 = v24;
    if (v24)
    {
      v14 = v25;
      v15 = v24;
      if (v25 != v24)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            MEMORY[0x20BD002D4](v16, 0x1000C8077774924);
        }
        while (v14 != v13);
        v15 = v24;
      }
      v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23)
      free(v22);
  }
  return v8;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::RecordMatchOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchAttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchAttributeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperandCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t mlir::AsmParser::parseAttribute<mlir::DenseIntElementsAttr>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v21 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 408))(a1, &v21, a3))
    return 0;
  v7 = v21;
  if (mlir::DenseIntElementsAttr::classof(v21))
    v8 = v7;
  else
    v8 = 0;
  *a2 = v8;
  if (v8)
    return 1;
  v19 = "invalid kind of attribute specified";
  v20 = 259;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v22, a1, v6, &v19);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
  if (v22[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
  if (v29)
  {
    v11 = __p;
    if (__p)
    {
      v12 = v28;
      v13 = __p;
      if (v28 != __p)
      {
        do
          v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        v13 = __p;
      }
      v28 = v11;
      operator delete(v13);
    }
    v14 = v25;
    if (v25)
    {
      v15 = v26;
      v16 = v25;
      if (v26 != v25)
      {
        do
        {
          v18 = *--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            MEMORY[0x20BD002D4](v17, 0x1000C8077774924);
        }
        while (v15 != v14);
        v16 = v25;
      }
      v26 = v14;
      operator delete(v16);
    }
    if (v23 != &v24)
      free(v23);
  }
  return v9;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchOperandCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchOperationNameOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchOperationNameOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchResultCountOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchResultCountOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchTypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x20BD002F8);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl_interp::detail::SwitchTypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl_interp::SwitchTypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = __p[0];
    if (__p[0])
    {
      v24 = __p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = *--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            MEMORY[0x20BD002D4](v29, 0x1000C8077774924);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

double mlir::createPDLToPDLInterpPass@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = operator new();
  *(_QWORD *)(v4 + 16) = "builtin.module";
  *(_QWORD *)(v4 + 24) = 14;
  *(_BYTE *)(v4 + 32) = 1;
  *(_BYTE *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = v4 + 200;
  *(_QWORD *)(v4 + 192) = 0x400000000;
  *(_QWORD *)(v4 + 232) = v4 + 248;
  *(_QWORD *)(v4 + 240) = 0x400000000;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_QWORD *)(v4 + 296) = 0x1000000000;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_QWORD *)v4 = &off_24C029628;
  *(_QWORD *)(v4 + 336) = 0;
  *(_QWORD *)(v4 + 344) = a1;
  *a2 = v4;
  return result;
}

void `anonymous namespace'::PDLToPDLInterpPass::~PDLToPDLInterpPass(_anonymous_namespace_::PDLToPDLInterpPass *this)
{
  mlir::Pass::~Pass(this);
  JUMPOUT(0x20BD002F8);
}

const char *mlir::impl::ConvertPDLToPDLInterpBase<`anonymous namespace'::PDLToPDLInterpPass>::getName()
{
  return "ConvertPDLToPDLInterp";
}

_QWORD *mlir::impl::ConvertPDLToPDLInterpBase<`anonymous namespace'::PDLToPDLInterpPass>::getDependentDialects(int a1, uint64_t **a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4[0] = &off_24C059A28;
  v5 = v4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::pdl_interp::PDLInterpDialect,void>::id, "pdl_interp", 0xAuLL, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

const char *mlir::impl::ConvertPDLToPDLInterpBase<`anonymous namespace'::PDLToPDLInterpPass>::getArgument()
{
  return "convert-pdl-to-pdl-interp";
}

const char *mlir::impl::ConvertPDLToPDLInterpBase<`anonymous namespace'::PDLToPDLInterpPass>::getDescription()
{
  return "Convert PDL ops to PDL interpreter ops";
}

void `anonymous namespace'::PDLToPDLInterpPass::runOnOperation(_anonymous_namespace_::PDLToPDLInterpPass *this)
{
  unsigned int *v2;
  uint64_t v3;
  mlir::Block *v4;
  mlir::MLIRContext *v5;
  mlir::Region *Parent;
  mlir::MLIRContext *Context;
  uint64_t v8;
  uint64_t *TypeUniquer;
  ZinIrHalH13g *v10;
  uint64_t v11;
  ZinIrHalH13g *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *buffer;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41[5];
  mlir::MLIRContext *v42[4];
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD v46[2];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  ZinIrHalH13g *v50;
  ZinIrHalH13g *v51;
  uint64_t v52;
  llvm *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  llvm *v60;
  uint64_t v61;
  int v62;
  llvm *v63;
  uint64_t v64;
  int v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69[2];
  unint64_t v70[4];

  v70[2] = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v3 = *(_QWORD *)((char *)&v2[8 * v2[10] + 18 + 4 * (((unint64_t)v2[11] >> 23) & 1)]
                 + (((unint64_t)v2[11] >> 21) & 0x7F8));
  if (v3)
    v4 = (mlir::Block *)(v3 - 8);
  else
    v4 = 0;
  v5 = (mlir::MLIRContext *)*((_QWORD *)v4 + 5);
  Parent = (mlir::Region *)mlir::Block::getParent(v4);
  Context = (mlir::MLIRContext *)mlir::Region::getContext(Parent);
  v42[2] = v4;
  v42[3] = v5;
  v8 = *((_QWORD *)v2 + 3);
  v42[0] = Context;
  v42[1] = 0;
  *(_QWORD *)&v47 = "matcher";
  *((_QWORD *)&v47 + 1) = 7;
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(Context);
  v46[0] = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  mlir::ValueRange::ValueRange(v70, (uint64_t)v46, 1uLL);
  mlir::ValueRange::ValueRange(v69, 0, 0);
  v41[0] = mlir::Builder::getFunctionType(v42, v70[0], v70[1], v69[0], v69[1]);
  v10 = mlir::OpBuilder::create<mlir::pdl_interp::FuncOp,llvm::StringRef,mlir::FunctionType,std::nullopt_t const&>(v42, v8, (uint64_t *)&v47, v41);
  v11 = *((_QWORD *)v2 + 3);
  *(_QWORD *)&v47 = "rewriters";
  *((_QWORD *)&v47 + 1) = 9;
  v12 = mlir::OpBuilder::create<mlir::ModuleOp,llvm::StringRef>(v42, v11, &v47);
  v13 = *((_QWORD *)this + 43);
  v47 = (unint64_t)mlir::Attribute::getContext((ZinIrHalH13g *)((char *)v10 + 24));
  v48 = 0;
  v49 = 0;
  v50 = v10;
  v51 = v12;
  mlir::SymbolTable::SymbolTable((mlir::SymbolTable *)&v52, v12);
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = &v59;
  v58 = 0x800000000;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v64 = 0;
  v63 = 0;
  v65 = 0;
  v66 = &v68;
  v67 = 0;
  v68 = v13;
  mlir::pdl_to_pdl_interp::PredicateUniquer::PredicateUniquer((mlir::pdl_to_pdl_interp::PredicateUniquer *)&v43);
  v14 = mlir::Attribute::getContext((mlir::Attribute *)(v2 + 6));
  v46[0] = &v43;
  v46[1] = v14;
  v41[0] = (uint64_t)&v53;
  v41[1] = (uint64_t)v56;
  v56 = v41;
  v16 = *((unsigned int *)v50 + 10);
  v15 = *((unsigned int *)v50 + 11);
  v41[2] = 0;
  v17 = *(_QWORD *)((((unint64_t)v50 + 16 * ((v15 >> 23) & 1) + ((v15 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * v16
                  + 8);
  if (v17)
    v18 = v17 - 8;
  else
    v18 = 0;
  v45 = 0;
  v44 = 0;
  v19 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(&v43, 0, 0, (uint64_t)&v45, &v44);
  v20 = v19;
  v21 = **(_QWORD **)(v18 + 48);
  v22 = v56;
  v23 = v55;
  if (!v55)
    goto LABEL_27;
  v24 = (v55 - 1) & ((v19 >> 4) ^ (v19 >> 9));
  v25 = (char *)v53 + 16 * v24;
  v26 = *(_QWORD *)v25;
  if (v19 == *(_QWORD *)v25)
    goto LABEL_23;
  v27 = 0;
  v28 = 1;
  while (v26 != -4096)
  {
    if (v27)
      v29 = 0;
    else
      v29 = v26 == -8192;
    if (v29)
      v27 = v25;
    v30 = v24 + v28++;
    v24 = v30 & (v55 - 1);
    v25 = (char *)v53 + 16 * v24;
    v26 = *(_QWORD *)v25;
    if (v19 == *(_QWORD *)v25)
      goto LABEL_23;
  }
  if (v27)
    v25 = v27;
  if (4 * (int)v54 + 4 < 3 * v55)
  {
    if (v55 + ~(_DWORD)v54 - HIDWORD(v54) > v55 >> 3)
      goto LABEL_20;
  }
  else
  {
LABEL_27:
    v23 = 2 * v55;
  }
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v53, v23);
  v35 = (v55 - 1) & ((v20 >> 4) ^ (v20 >> 9));
  v25 = (char *)v53 + 16 * v35;
  v36 = *(_QWORD *)v25;
  if (v20 == *(_QWORD *)v25)
  {
LABEL_29:
    LODWORD(v54) = v54 + 1;
    if (v20 == -4096)
      goto LABEL_22;
    goto LABEL_21;
  }
  v37 = 0;
  v38 = 1;
  while (v36 != -4096)
  {
    if (v37)
      v39 = 0;
    else
      v39 = v36 == -8192;
    if (v39)
      v37 = v25;
    v40 = v35 + v38++;
    v35 = v40 & (v55 - 1);
    v25 = (char *)v53 + 16 * v35;
    v36 = *(_QWORD *)v25;
    if (v20 == *(_QWORD *)v25)
      goto LABEL_29;
  }
  if (v37)
    v25 = v37;
LABEL_20:
  v31 = *(_QWORD *)v25;
  LODWORD(v54) = v54 + 1;
  if (v31 == -4096)
  {
LABEL_22:
    *(_QWORD *)v25 = v20;
    *((_QWORD *)v25 + 1) = 0;
LABEL_23:
    v32 = v22[2];
    v33 = *((_QWORD *)v25 + 1);
    buffer = llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
    buffer[2] = v20;
    buffer[3] = v21;
    *buffer = v32;
    buffer[1] = v33;
    *((_QWORD *)v25 + 1) = buffer;
    v22[2] = (uint64_t)buffer;
    mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree((uint64_t)v2, &v45);
  }
LABEL_21:
  --HIDWORD(v54);
  goto LABEL_22;
}

double mlir::impl::ConvertPDLToPDLInterpBase<`anonymous namespace'::PDLToPDLInterpPass>::clonePass@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = v4 + 200;
  *(_QWORD *)(v4 + 192) = 0x400000000;
  *(_QWORD *)(v4 + 232) = v4 + 248;
  *(_QWORD *)(v4 + 240) = 0x400000000;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_DWORD *)(v4 + 296) = 0;
  *(_DWORD *)(v4 + 300) = 16;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_QWORD *)v4 = &off_24C029628;
  *(_QWORD *)(v4 + 8) = v5;
  v7 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(v4 + 336) = 0;
  *(_QWORD *)(v4 + 344) = v7;
  *a2 = v4;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C059A28;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C059A28;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"pdl_interp", 10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl_interp::PDLInterpDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::pdl_interp::PDLInterpDialect * mlir::MLIRContext::getOrLoadDialect<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

uint64_t std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir15DialectRegistry6insertINS_10pdl_interp16PDLInterpDialectEEEvvEUlPNS_11MLIRContextEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir15DialectRegistry6insertINS_10pdl_interp16PDLInterpDialectEEEvvEUlPNS_11MLIRContextEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir15DialectRegistry6insertINS_10pdl_interp16PDLInterpDialectEEEvvEUlPNS_11MLIRContextEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir15DialectRegistry6insertINS_10pdl_interp16PDLInterpDialectEEEvvEUlPNS_11MLIRContextEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::target_type()
{
}

mlir::pdl_interp::PDLInterpDialect *llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::pdl_interp::PDLInterpDialect * mlir::MLIRContext::getOrLoadDialect<mlir::pdl_interp::PDLInterpDialect>(void)::{lambda(void)#1}>@<X0>(mlir::MLIRContext **a1@<X0>, mlir::pdl_interp::PDLInterpDialect **a2@<X8>)
{
  mlir::MLIRContext *v3;
  mlir::pdl_interp::PDLInterpDialect *v4;
  mlir::pdl_interp::PDLInterpDialect *result;

  v3 = *a1;
  v4 = (mlir::pdl_interp::PDLInterpDialect *)operator new();
  result = mlir::pdl_interp::PDLInterpDialect::PDLInterpDialect(v4, v3);
  *a2 = result;
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::FuncOp,llvm::StringRef,mlir::FunctionType,std::nullopt_t const&>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.func", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"pdl_interp.func";
    v17[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::FuncOp::build(a1, (uint64_t)v19, *a3, a3[1], *a4, 0, 0);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::ModuleOp,llvm::StringRef>(mlir::StringAttr **a1, uint64_t a2, __int128 *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  __int128 v12;
  char v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.module", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"builtin.module";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  v12 = *a3;
  v13 = 1;
  mlir::ModuleOp::build(a1, (mlir::OperationState *)v19, (uint64_t)&v12);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v10;
}

uint64_t `anonymous namespace'::PatternLowering::generateMatcher(_anonymous_namespace_::PatternLowering *this, mlir::pdl_to_pdl_interp::MatcherNode *a2, mlir::Region *a3)
{
  uint64_t v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  mlir::pdl_to_pdl_interp::MatcherNode *v10;
  uint64_t Matcher;
  uint64_t v12;
  mlir::pdl_to_pdl_interp::Position *v13;
  uint64_t ValueAt;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  mlir::pdl_to_pdl_interp::MatcherNode *v21;
  uint64_t v22;
  unsigned __int8 v23;
  mlir::Block *v24;
  int *v25;
  mlir::Region *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  mlir::Region *Parent;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  mlir::pdl_to_pdl_interp::Position **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int32x4_t *v43;
  uint64_t v44;
  int32x4_t *v45;
  uint64_t v46;
  mlir::pdl_to_pdl_interp::MatcherNode **v47;
  uint64_t v48;
  uint64_t v49;
  int32x4_t *v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t Loc;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  mlir::pdl_to_pdl_interp::MatcherNode **v73;
  mlir::Block *v74;
  uint64_t Block;
  mlir::Block *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  mlir::Block *v104;
  int v105;
  mlir::pdl_to_pdl_interp::MatcherNode *v106;
  char v107;
  uint64_t v108;
  mlir::Block *v109;
  int32x2_t *v110[3];
  unsigned __int8 v111;
  unsigned int v112;
  mlir::Block *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *__src;
  unint64_t v118;
  int v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  unint64_t v124;
  _QWORD v125[8];

  v125[6] = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v6 + 32) = v6 + 32;
  *(_QWORD *)(v6 + 40) = v6 + 32;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)a3, v6);
  v7 = *(_QWORD *)a3;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v7 + 8) = v6 + 8;
  *(_QWORD *)a3 = v6 + 8;
  v8 = (int32x2_t *)*((_QWORD *)this + 14);
  v110[0] = (int32x2_t *)((char *)this + 88);
  v110[1] = v8;
  *((_QWORD *)this + 14) = v110;
  v110[2] = 0;
  v9 = *((_QWORD *)a2 + 5);
  if ((v7 & 1) == 0
  {
    __src = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ExitNode]";
    v118 = 83;
    v83 = llvm::StringRef::find((uint64_t *)&__src, "DesiredTypeName = ", 0x12uLL, 0);
    if (v118 >= v83)
      v84 = v83;
    else
      v84 = v118;
    v85 = (char *)__src + v84;
    v86 = v118 - v84;
    if (v118 - v84 >= 0x12)
      v87 = 18;
    else
      v87 = v118 - v84;
    v88 = v86 - v87;
    if (v88 >= v88 - 1)
      v89 = v88 - 1;
    else
      v89 = v88;
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ExitNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
  }
  if (v9 == mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ExitNode,void>::resolveTypeID(void)::id)
  {
    *((_QWORD *)this + 2) = v6;
    *((_QWORD *)this + 3) = v6 + 32;
    mlir::OpBuilder::create<mlir::pdl_interp::FinalizeOp>(this, *(_QWORD *)(*((_QWORD *)this + 4) + 24));
    goto LABEL_71;
  }
  v10 = (mlir::pdl_to_pdl_interp::MatcherNode *)*((_QWORD *)a2 + 3);
  if (v10)
  {
    v12 = *((unsigned int *)this + 32);
    if (v12 >= *((_DWORD *)this + 33))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 120, (char *)this + 136, v12 + 1, 8);
      LODWORD(v12) = *((_DWORD *)this + 32);
    }
    *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v12) = Matcher;
    ++*((_DWORD *)this + 32);
    v109 = (mlir::Block *)v6;
    v13 = (mlir::pdl_to_pdl_interp::Position *)*((_QWORD *)a2 + 1);
    if (v13)
      goto LABEL_7;
  }
  else
  {
    Matcher = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * *((unsigned int *)this + 32) - 8);
    v109 = (mlir::Block *)v6;
    v13 = (mlir::pdl_to_pdl_interp::Position *)*((_QWORD *)a2 + 1);
    if (v13)
    {
LABEL_7:
      v108 = ValueAt;
      if (ValueAt
        && *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(ValueAt + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
      {
        __src = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)this + 28, (unint64_t *)&v108, &__src) & 1) == 0)
        {
          v16 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this + 224, (uint64_t)&v108, (unint64_t *)&v108, __src);
          *v16 = v108;
          v17 = v108;
          v18 = *((unsigned int *)this + 64);
          if (v18 >= *((_DWORD *)this + 65))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 248, (char *)this + 264, v18 + 1, 8);
            LODWORD(v18) = *((_DWORD *)this + 64);
          }
          *(_QWORD *)(*((_QWORD *)this + 31) + 8 * v18) = v17;
          ++*((_DWORD *)this + 64);
        }
        v15 = 1;
      }
      else
      {
        v15 = 0;
      }
      goto LABEL_18;
    }
  }
  v15 = 0;
  v108 = 0;
LABEL_18:
  v106 = a2;
  v107 = 0;
  v19 = *((_QWORD *)a2 + 5);
  if ((v20 & 1) == 0
  {
    __src = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::BoolNode]";
    v118 = 83;
    v90 = llvm::StringRef::find((uint64_t *)&__src, "DesiredTypeName = ", 0x12uLL, 0);
    if (v118 >= v90)
      v91 = v90;
    else
      v91 = v118;
    v92 = (char *)__src + v91;
    v93 = v118 - v91;
    if (v118 - v91 >= 0x12)
      v94 = 18;
    else
      v94 = v118 - v91;
    v95 = v93 - v94;
    if (v95 >= v95 - 1)
      v96 = v95 - 1;
    else
      v96 = v95;
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
  }
  if (v19 == mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id)
    v21 = a2;
  else
    v21 = 0;
  if (v19 == mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id)
  {
    v116 = v108;
    mlir::Value::getLoc((mlir::Value *)&v116);
    v33 = *((_QWORD *)a2 + 2);
    Parent = (mlir::Region *)mlir::Block::getParent(v109);
    __src = &v119;
    v118 = 0x600000000;
    if (*(_DWORD *)v33 == 20)
    {
      v37 = *(_QWORD *)(v33 + 32);
      if (v37)
      {
        v38 = *(mlir::pdl_to_pdl_interp::Position ***)(v33 + 24);
        v39 = 8 * v37;
        do
        {
          v41 = v118;
          if (v118 >= (unint64_t)HIDWORD(v118))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v119, v118 + 1, 8);
            v41 = v118;
          }
          *((_QWORD *)__src + v41) = v40;
          LODWORD(v118) = v118 + 1;
          ++v38;
          v39 -= 8;
        }
        while (v39);
      }
    }
    else if (*(_DWORD *)v33 == 19)
    {
      v36 = 0;
      LODWORD(v118) = 0;
      if (!HIDWORD(v118))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v119, 1uLL, 8);
        v36 = v118;
      }
      *((_QWORD *)__src + v36) = v35;
      LODWORD(v118) = v118 + 1;
    }
    v114 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * *((unsigned int *)this + 32) - 8);
    v42 = (char *)v109 + 32;
    *((_QWORD *)this + 2) = v109;
    *((_QWORD *)this + 3) = v42;
    __asm { BR              X11 }
  }
  v22 = *((_QWORD *)v106 + 5);
  if ((v23 & 1) == 0
  {
    __src = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SwitchNode]";
    v118 = 85;
    v97 = llvm::StringRef::find((uint64_t *)&__src, "DesiredTypeName = ", 0x12uLL, 0);
    if (v118 >= v97)
      v98 = v97;
    else
      v98 = v118;
    v99 = (char *)__src + v98;
    v100 = v118 - v98;
    if (v118 - v98 >= 0x12)
      v101 = 18;
    else
      v101 = v118 - v98;
    v102 = v100 - v101;
    if (v102 >= v102 - 1)
      v103 = v102 - 1;
    else
      v103 = v102;
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SwitchNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
  }
  if (v22 == mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SwitchNode,void>::resolveTypeID(void)::id)
  {
    v24 = v109;
    v115 = (uint64_t)v106;
    v116 = v108;
    v25 = (int *)*((_QWORD *)v106 + 2);
    v26 = (mlir::Region *)mlir::Block::getParent(v109);
    v27 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * *((unsigned int *)this + 32) - 8);
    v114 = v27;
    v28 = *v25;
    if (*v25 != 17 && v28 != 15)
    {
      __src = 0;
      v118 = 0;
      v119 = 0;
      v120 = &v122;
      v121 = 0;
      v46 = *(unsigned int *)(v115 + 80);
      if ((_DWORD)v46)
      {
        v47 = (mlir::pdl_to_pdl_interp::MatcherNode **)(*(_QWORD *)(v115 + 72) + 8);
        v48 = 16 * v46;
        do
        {
          v123 = (int *)*(v47 - 1);
          v124 = v49;
          llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,mlir::Block *,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,mlir::Block *>,0u>>::try_emplace<mlir::Block *>((uint64_t)&__src, (uint64_t *)&v123, (uint64_t *)&v124);
          v47 += 2;
          v48 -= 16;
        }
        while (v48);
      }
      *((_QWORD *)this + 2) = v24;
      *((_QWORD *)this + 3) = (char *)v24 + 32;
      __asm { BR              X10 }
    }
    v29 = *(unsigned int *)(v115 + 80);
    __src = &v119;
    v118 = 0x1000000000;
    v105 = v28;
    v30 = v27;
    if (v29 < 0x11)
    {
      if (!(_DWORD)v29)
      {
        v55 = 0;
        v32 = &v119;
LABEL_53:
        v123 = (int *)v125;
        v124 = 0xC00000000;
        v56 = (v55 + v29);
        LODWORD(v118) = v56;
        if ((_DWORD)v56)
        {
          if (v32 == &v119)
          {
            v64 = v56;
            v32 = &v119;
            if (v56 < 0xD
              || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v123, v125, v56, 4),
                  v64 = v118,
                  v32 = (int *)__src,
                  (_DWORD)v118))
            {
              memcpy(v123, v32, 4 * v64);
              v32 = (int *)__src;
            }
            LODWORD(v124) = v56;
          }
          else
          {
            v123 = v32;
            v124 = __PAIR64__(HIDWORD(v118), v56);
            __src = &v119;
            HIDWORD(v118) = 0;
            v32 = &v119;
          }
          LODWORD(v118) = 0;
        }
        if (v32 != &v119)
        {
          free(v32);
          LODWORD(v56) = v124;
        }
        __src = &v115;
        v65 = 126 - 2 * __clz(v56);
        if ((_DWORD)v56)
          v66 = v65;
        else
          v66 = 0;
        v67 = *((unsigned int *)this + 32);
        if (v67 >= *((_DWORD *)this + 33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 120, (char *)this + 136, v67 + 1, 8);
          LODWORD(v67) = *((_DWORD *)this + 32);
        }
        v104 = v24;
        *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v67) = v30;
        ++*((_DWORD *)this + 32);
        Loc = mlir::Value::getLoc((mlir::Value *)&v116);
        if ((_DWORD)v124)
        {
          v69 = Loc;
          v70 = (unsigned int *)v123;
          v71 = 4 * v124;
          do
          {
            v73 = (mlir::pdl_to_pdl_interp::MatcherNode **)(*(_QWORD *)(v115 + 72) + 16 * *v70);
            v113 = 0;
            v113 = v74;
            mlir::ValueRange::ValueRange((unint64_t *)&__src, 0, 0);
            Block = mlir::OpBuilder::createBlock(this, v74, (uint64_t)__src, v118, 0, 0);
            *((_QWORD *)this + 2) = Block;
            *((_QWORD *)this + 3) = Block + 32;
            v112 = *((_DWORD *)*v73 + 2);
            v111 = 1;
            if (v105 == 15)
              mlir::OpBuilder::create<mlir::pdl_interp::CheckOperandCountOp,mlir::Value &,unsigned int const&,BOOL,mlir::Block *&,mlir::Block *&>(this, v69, &v116, &v112, &v111, (uint64_t *)&v113, &v114);
            else
              mlir::OpBuilder::create<mlir::pdl_interp::CheckResultCountOp,mlir::Value &,unsigned int const&,BOOL,mlir::Block *&,mlir::Block *&>(this, v69, &v116, &v112, &v111, (uint64_t *)&v113, &v114);
            v72 = *((unsigned int *)this + 32);
            *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v72 - 8) = Block;
            ++v70;
            v71 -= 4;
          }
          while (v71);
        }
        else
        {
          v72 = *((unsigned int *)this + 32);
        }
        v76 = *(mlir::Block **)(*((_QWORD *)this + 15) + 8 * v72 - 8);
        *((_DWORD *)this + 32) = v72 - 1;
        v77 = (uint64_t *)((char *)v76 + 32);
        if (*((mlir::Block **)v76 + 4) != (mlir::Block *)((char *)v76 + 32) && v104 != v76)
        {
          v78 = (uint64_t *)((char *)v104 + 32);
          v79 = (uint64_t *)*((_QWORD *)v76 + 5);
          llvm::ilist_traits<mlir::Operation>::transferNodesFromList((uint64_t)v104 + 32, (uint64_t)v76 + 32, (uint64_t)v79, (uint64_t)v76 + 32);
          if (v79 != v77)
          {
            v80 = *v77;
            v81 = *v79;
            *(_QWORD *)(v81 + 8) = v77;
            *v77 = v81;
            v82 = *v78;
            *(_QWORD *)(v80 + 8) = v78;
            *v79 = v82;
            *(_QWORD *)(v82 + 8) = v79;
            *v78 = v80;
          }
        }
        mlir::Block::erase(v76);
      }
      v31 = 0;
      v32 = &v119;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v119, v29, 4);
      v31 = v118;
      v32 = (int *)__src;
    }
    v43 = (int32x4_t *)&v32[v31];
    if (v29 >= 8)
    {
      v44 = v29 & 0xFFFFFFF8;
      v45 = (int32x4_t *)((char *)v43 + 4 * v44);
      v50 = v43 + 1;
      v51 = (int32x4_t)xmmword_207A8E9A0;
      v52.i64[0] = 0x400000004;
      v52.i64[1] = 0x400000004;
      v53.i64[0] = 0x800000008;
      v53.i64[1] = 0x800000008;
      v54 = v44;
      do
      {
        v50[-1] = v51;
        *v50 = vaddq_s32(v51, v52);
        v51 = vaddq_s32(v51, v53);
        v50 += 2;
        v54 -= 8;
      }
      while (v54);
      if (v44 == v29)
        goto LABEL_52;
    }
    else
    {
      v44 = 0;
      v45 = v43;
    }
    do
    {
      v45->i32[0] = v44;
      v45 = (int32x4_t *)((char *)v45 + 4);
      ++v44;
    }
    while (v29 != v44);
LABEL_52:
    v55 = v118;
    goto LABEL_53;
  }
  __src = this;
  v118 = (unint64_t)&v109;
  v57 = *((_QWORD *)this + 15) - 8;
  v58 = *((unsigned int *)this + 32);
  if (*(_QWORD *)(v57 + 8 * v58) != Matcher)
  {
    do
      LODWORD(v58) = v58 - 1;
    while (*(_QWORD *)(v57 + 8 * v58) != Matcher);
    *((_DWORD *)this + 32) = v58;
  }
  if (*((_QWORD *)a2 + 3))
    *((_DWORD *)this + 32) = v58 - 1;
  if (v15)
  {
    __src = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)this + 28, (unint64_t *)&v108, &__src))
    {
      *(_QWORD *)__src = -8192;
      *((int32x2_t *)this + 29) = vadd_s32(*(int32x2_t *)((char *)this + 232), (int32x2_t)0x1FFFFFFFFLL);
      v59 = (_QWORD *)*((_QWORD *)this + 31);
      v60 = *((unsigned int *)this + 64);
      v61 = &v59[v60];
      if ((_DWORD)v60)
      {
        v62 = 8 * v60;
        while (*v59 != v108)
        {
          ++v59;
          v62 -= 8;
          if (!v62)
          {
            v59 = v61;
            break;
          }
        }
      }
      if (v61 != v59 + 1)
      {
        memmove(v59, v59 + 1, (char *)v61 - (char *)(v59 + 1));
        LODWORD(v60) = *((_DWORD *)this + 64);
      }
      *((_DWORD *)this + 64) = v60 - 1;
    }
  }
LABEL_71:
  llvm::ScopedHashTableScope<mlir::pdl_to_pdl_interp::Position *,mlir::Value,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Position *,void>,llvm::MallocAllocator>::~ScopedHashTableScope(v110);
  return v6;
}

mlir::pdl_to_pdl_interp::PredicateUniquer *mlir::pdl_to_pdl_interp::PredicateUniquer::PredicateUniquer(mlir::pdl_to_pdl_interp::PredicateUniquer *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = (uint64_t *)mlir::StorageUniquer::StorageUniquer(this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributePosition>(v2);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributeLiteralPosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ForEachPosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandPosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandGroupPosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperationPosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultPosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultGroupPosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypePosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypeLiteralPosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::UsersPosition>((uint64_t *)this);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributeAnswer>((uint64_t *)this, v3, v4, v5);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperationNameAnswer>((uint64_t *)this, v6, v7, v8);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypeAnswer>((uint64_t *)this, v9, v10, v11);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::UnsignedAnswer>((uint64_t *)this, v12, v13, v14);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::FalseAnswer>((uint64_t *)this, 0, 0);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)this, 0, 0);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ConstraintQuestion>((uint64_t *)this, v15, v16, v17);
  mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::EqualToQuestion>((uint64_t *)this, v18, v19, v20);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::AttributeQuestion>((uint64_t *)this, 0, 0);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::IsNotNullQuestion>((uint64_t *)this, 0, 0);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountQuestion>((uint64_t *)this, 0, 0);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>((uint64_t *)this, 0, 0);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperationNameQuestion>((uint64_t *)this, 0, 0);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountQuestion>((uint64_t *)this, 0, 0);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>((uint64_t *)this, 0, 0);
  mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TypeQuestion>((uint64_t *)this, 0, 0);
  return this;
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributePosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributePosition]";
      v15 = 92;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[18], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributePosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributeLiteralPosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeLiteralPosition]";
      v15 = 99;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[20], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributeLiteralPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ForEachPosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ForEachPosition]";
      v15 = 90;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ForEachPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[22], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ForEachPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandPosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandPosition]";
      v15 = 90;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[24], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandGroupPosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandGroupPosition]";
      v15 = 95;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[26], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandGroupPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperationPosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationPosition]";
      v15 = 92;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[28], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperationPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultPosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultPosition]";
      v15 = 89;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[30], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultGroupPosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultGroupPosition]";
      v15 = 94;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[32], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultGroupPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypePosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypePosition]";
      v15 = 87;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[34], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypePosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypeLiteralPosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeLiteralPosition]";
      v15 = 94;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[36], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypeLiteralPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::UsersPosition>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v13 = a1;
    v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v5 = v4;
    a1 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::UsersPosition]";
      v15 = 88;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::UsersPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v13;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v2[38], (uint64_t)llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::UsersPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>, (uint64_t)&v14);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributeAnswer>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeAnswer]";
      v18 = 90;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[40], 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperationNameAnswer>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameAnswer]";
      v18 = 94;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[42], 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypeAnswer>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeAnswer]";
      v18 = 85;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[44], 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::UnsignedAnswer>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::UnsignedAnswer]";
      v18 = 89;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::UnsignedAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[46], 0, a4);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::FalseAnswer>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::FalseAnswer]";
      v21 = 86;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::FalseAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[48];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::FalseAnswer>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::FalseAnswer *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TrueAnswer>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TrueAnswer]";
      v21 = 85;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TrueAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[50];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TrueAnswer>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TrueAnswer *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ConstraintQuestion>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ConstraintQuestion]";
      v18 = 93;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[52], 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::EqualToQuestion>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  unint64_t v18;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v16 = a1;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    v8 = v7;
    a1 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::EqualToQuestion]";
      v18 = 90;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::EqualToQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a1 = v16;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, v5[54], 0, a4);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::AttributeQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeQuestion]";
      v21 = 92;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[56];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::AttributeQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::IsNotNullQuestion]";
      v21 = 92;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::IsNotNullQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[58];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::IsNotNullQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountQuestion]";
      v21 = 95;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[60];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandCountQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion]";
      v21 = 102;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[62];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperationNameQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameQuestion]";
      v21 = 96;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[64];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperationNameQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountQuestion]";
      v21 = 94;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[66];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultCountQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion]";
      v21 = 101;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[68];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

_QWORD *mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TypeQuestion>(uint64_t *a1, const char *a2, unint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t *v18;
  const char **v19;
  const char *v20;
  unint64_t v21;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v17 = a3;
    v18 = a1;
    v16 = a2;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v16;
    a3 = v17;
    v8 = v7;
    a1 = v18;
    if (v8)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeQuestion]";
      v21 = 87;
      v9 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v9)
        v10 = v9;
      else
        v10 = v21;
      v11 = &v20[v10];
      v12 = v21 - v10;
      if (v21 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v21 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v16;
      a3 = v17;
      a1 = v18;
    }
  }
  v5 = v4[70];
  v20 = a2;
  v21 = a3;
  v19 = &v20;
  return mlir::StorageUniquer::registerSingletonImpl(a1, v5, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TypeQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v19);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributePosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::AttributeLiteralPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ForEachPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperandGroupPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::OperationPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::ResultGroupPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypePosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::TypeLiteralPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

uint64_t llvm::function_ref<void ()(mlir::StorageUniquer::BaseStorage *)>::callback_fn<void mlir::StorageUniquer::registerParametricStorageType<mlir::pdl_to_pdl_interp::UsersPosition>(mlir::TypeID)::{lambda(mlir::StorageUniquer::BaseStorage *)#1}>(uint64_t a1, uint64_t (***a2)(_QWORD))
{
  return (**a2)(a2);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::FalseAnswer>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::FalseAnswer *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 22;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TrueAnswer>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TrueAnswer *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 24;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::AttributeQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 14;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::IsNotNullQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 11;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandCountQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 16;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 15;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::OperationNameQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 12;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultCountQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 18;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 17;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::pdl_to_pdl_interp::TypeQuestion>(mlir::TypeID,llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeQuestion *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(_QWORD, _QWORD *), uint64_t a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD, _QWORD *);

  *(_QWORD *)(a2 + 80) += 8;
  if (*(_QWORD *)a2)
    v4 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 8 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a2 + 24);
    if (v8 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v6];
    v9 = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v9 = (_QWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v9 + 1;
  *v9 = 13;
  v10 = **a1;
  if (v10)
    v10((*a1)[1], v9);
  return v9;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6;
  uint64_t *v7;
  unsigned __int8 v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v22;
  unsigned __int8 **v23;
  const char *v24;
  unint64_t v25;

  v6 = a4;
  v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v8 & 1) != 0)
    return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(a1, a2, a3, v7[28], v6, a5);
  v22 = a5;
  v23 = a1;
  v20 = a3;
  v19 = a2;
  v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  a2 = v19;
  a3 = v20;
  v6 = a4;
  a5 = v22;
  v11 = v10;
  a1 = v23;
  if (!v11)
    return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(a1, a2, a3, v7[28], v6, a5);
  v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationPosition]";
  v25 = 92;
  v12 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
  if (v25 >= v12)
    v13 = v12;
  else
    v13 = v25;
  v14 = &v24[v13];
  v15 = v25 - v13;
  if (v25 - v13 >= 0x12)
    v16 = 18;
  else
    v16 = v25 - v13;
  v17 = v15 - v16;
  if (v17 >= v17 - 1)
    v18 = v17 - 1;
  else
    v18 = v17;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
  return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(v23, v19, v20, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id, a4, v22);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unsigned __int8 **v16;
  __int128 *v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = a4;
  v22 = *MEMORY[0x24BDAC8D0];
  v19[0] = a2;
  v19[1] = a3;
  v7 = *a6;
  *(_QWORD *)&v18 = 0;
  *((_QWORD *)&v18 + 1) = v7;
  LODWORD(v21) = 0;
  v20 = 0;
  v8 = &unk_254519000;
  if ((v7 & 1) == 0)
  {
    v16 = a1;
    v8 = &unk_254519000;
    v13 = v12;
    v6 = a4;
    a1 = v16;
    if (v13)
    {
      v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v14 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      v8 = (_QWORD *)&unk_254519000;
      v6 = a4;
      a1 = v16;
    }
  }
  v9 = __ROR8__(*(_QWORD *)((char *)&v18 + 4) + 12, 12);
  v10 = 0x9DDFEA08EB382D69
      * (v9 ^ ((0x9DDFEA08EB382D69 * (v8[373] ^ (unint64_t)v18 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                       * (v8[373] ^ v18 ^ v9)));
  v17 = &v18;
  v20 = &v18;
  v21 = v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, (-348639895 * ((v10 >> 47) ^ v10)) ^ DWORD1(v18), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,decltype(nullptr),int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,decltype(nullptr),int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v20);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,decltype(nullptr),int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,decltype(nullptr),int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,decltype(nullptr),int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;

  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = &unk_24C0344A0;
  *(_QWORD *)(v9 + 8) = 0;
  result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  v11 = a2->n128_u64[0];
  *(_QWORD *)v9 = &unk_24C0345A0;
  *(_QWORD *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::OperationPosition::~OperationPosition(mlir::pdl_to_pdl_interp::OperationPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  JUMPOUT(0x20BD002F8);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::FinalizeOp>(ZinIrHalH13g *a1, uint64_t a2)
{
  uint64_t *Context;
  uint64_t v5;
  char v6;
  ZinIrHalH13g *v7;
  ZinIrHalH13g *v8;
  uint64_t v10;
  const char *v11;
  __int16 v12;
  uint64_t v13[4];
  __int16 v14;
  _QWORD v15[39];

  v15[38] = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.finalize", (const unsigned __int8 *)0x13, Context);
  if (!v6)
  {
    v14 = 1283;
    v13[2] = (uint64_t)"pdl_interp.finalize";
    v13[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v12 = 259;
    llvm::operator+(v13, (uint64_t *)&v11, (uint64_t)v15);
    llvm::report_fatal_error((llvm::Twine *)v15, 1);
  }
  mlir::OperationState::OperationState(v15, a2, v5);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  v7 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v15);
  if (*(_UNKNOWN **)(*((_QWORD *)v7 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FinalizeOp,void>::id)
    v8 = v7;
  else
    v8 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v15);
  return v8;
}

uint64_t `anonymous namespace'::PatternLowering::getValueAt(_anonymous_namespace_::PatternLowering *this, mlir::Block **a2, mlir::pdl_to_pdl_interp::Position *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  mlir::pdl_to_pdl_interp::Position *v10;
  int v11;
  int v12;
  uint64_t result;
  mlir::pdl_to_pdl_interp::Position *v14;
  char *v15;
  uint64_t ValueAt;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 11);
  v7 = *((unsigned int *)this + 26);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v9 = v6 + 16 * v8;
    v10 = *(mlir::pdl_to_pdl_interp::Position **)v9;
    if (*(mlir::pdl_to_pdl_interp::Position **)v9 == a3)
      goto LABEL_8;
    v11 = 1;
    while (v10 != (mlir::pdl_to_pdl_interp::Position *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(mlir::pdl_to_pdl_interp::Position **)(v6 + 16 * v8);
      if (v10 == a3)
      {
        v9 = v6 + 16 * v8;
        goto LABEL_8;
      }
    }
  }
  v9 = v6 + 16 * v7;
LABEL_8:
  if (v9 == v6 + 16 * v7)
  {
    ValueAt = 0;
    v17 = 0;
    v14 = (mlir::pdl_to_pdl_interp::Position *)*((_QWORD *)a3 + 1);
    if (!v14)
      goto LABEL_15;
    goto LABEL_13;
  }
  result = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 24);
  v17 = result;
  if (!result)
  {
    ValueAt = 0;
    v14 = (mlir::pdl_to_pdl_interp::Position *)*((_QWORD *)a3 + 1);
    if (!v14)
      goto LABEL_15;
LABEL_13:
    if (ValueAt)
    {
      mlir::Value::getLoc((mlir::Value *)&ValueAt);
      goto LABEL_16;
    }
LABEL_15:
    mlir::Builder::getUnknownLoc((mlir::UnknownLoc **)this, (mlir::MLIRContext *)a2);
LABEL_16:
    v15 = (char *)*a2 + 32;
    *((_QWORD *)this + 2) = *a2;
    *((_QWORD *)this + 3) = v15;
    __asm { BR              X10 }
  }
  return result;
}

_BYTE *llvm::detail::TypeSwitchBase<llvm::TypeSwitch<mlir::pdl_to_pdl_interp::MatcherNode *,void>,mlir::pdl_to_pdl_interp::MatcherNode *>::Case<`anonymous namespace'::PatternLowering::generateMatcher(mlir::pdl_to_pdl_interp::MatcherNode&,mlir::Region &)::$_1>(_BYTE *a1, uint64_t *a2)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlir::OpBuilder *v18;
  unint64_t Root;
  _QWORD *v20;
  unsigned int v21;
  unint64_t *ExternalArgs;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  ZinIrHalH13g *v34;
  ZinIrHalH13g *v35;
  int *v36;
  _QWORD *v37;
  int *v38;
  uint64_t Inputs;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  ZinIrHalH13g *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t Results;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *NextResultAtOffset;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  ZinIrHalH13g *v64;
  char v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  unint64_t Input;
  uint64_t OperandValues;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t AttributeValues;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t TypeValues;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void **v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  ZinIrHalH13g *v99;
  char v100;
  _QWORD *v101;
  void *v102;
  uint64_t DefiningOp;
  void *v104;
  BOOL v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  ZinIrHalH13g *v113;
  uint64_t v114;
  uint64_t v115;
  mlir::Operation *v116;
  char v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  int *v123;
  uint64_t *v124;
  int v125;
  char *v126;
  unint64_t *v127;
  ZinIrHalH13g *v128;
  unint64_t v129;
  char v130;
  _QWORD *v131;
  void *v132;
  uint64_t *p_SingletonImpl;
  uint64_t v134;
  uint64_t *TypeUniquer;
  unint64_t v136;
  char v137;
  char v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t ReplValues;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  _QWORD *v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t Loc;
  ZinIrHalH13g *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  mlir::Block *v158;
  uint64_t ArgumentTypes;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  int v166;
  unint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  mlir::SymbolRefAttr *v170;
  uint64_t InterfaceFor;
  void *v172;
  mlir::StringAttr *v173;
  mlir::Operation *v174;
  int v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  ZinIrHalH13g *v185;
  mlir::MLIRContext **v186;
  uint64_t FastmathAttr;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  llvm *v191[2];
  unsigned int v192;
  mlir::SymbolRefAttr *v193;
  uint64_t v194;
  void *v195;
  char v196;
  mlir::Operation *v197;
  void *__p;
  uint64_t v199;
  uint64_t SingletonImpl;
  mlir::Operation *v201;
  void *v202[2];
  ZinIrHalH13g *v203[2];
  void *v204;
  uint64_t v205;
  _OWORD v206[2];
  char v207;
  void *v208[2];
  uint64_t v209;
  unint64_t v210[2];
  unint64_t v211[2];
  void *v212[2];
  _BYTE v213[24];
  void *FunctionType;
  unint64_t v215;
  _QWORD v216[25];

  v2 = a1;
  v216[22] = *MEMORY[0x24BDAC8D0];
  if (!a1[8])
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    if ((v6 & 1) == 0)
    {
      v2 = a1;
      if (v177)
      {
        FunctionType = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SuccessNode]";
        v215 = 86;
        v178 = llvm::StringRef::find((uint64_t *)&FunctionType, "DesiredTypeName = ", 0x12uLL, 0);
        if (v215 >= v178)
          v179 = v178;
        else
          v179 = v215;
        v180 = (char *)FunctionType + v179;
        v181 = v215 - v179;
        if (v215 - v179 >= 0x12)
          v182 = 18;
        else
          v182 = v215 - v179;
        v183 = v181 - v182;
        if (v183 >= v183 - 1)
          v184 = v183 - 1;
        else
          v184 = v183;
        mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SuccessNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v180[v182], v184);
        v2 = a1;
      }
    }
    if (v5 == mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SuccessNode,void>::resolveTypeID(void)::id)
    {
      v7 = *a2;
      v8 = *(_QWORD *)(v4 + 48);
      v9 = *(_QWORD *)(*a2 + 40);
      v11 = *(unsigned int *)(v9 + 40);
      v10 = *(unsigned int *)(v9 + 44);
      v208[0] = &v209;
      v208[1] = (void *)0x800000000;
      v194 = v8;
      v12 = *(_QWORD *)(((v9 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * v11
                      + 8);
      if (v12)
        v13 = v12 - 8;
      else
        v13 = 0;
      *(_QWORD *)(v7 + 16) = v13;
      *(_QWORD *)(v7 + 24) = v13 + 32;
      v14 = *(_QWORD *)(v8 + 24);
      mlir::ValueRange::ValueRange(v211, 0, 0);
      mlir::ValueRange::ValueRange(v210, 0, 0);
      FunctionType = (void *)mlir::Builder::getFunctionType((mlir::MLIRContext **)v7, v211[0], v211[1], v210[0], v210[1]);
      v193 = mlir::OpBuilder::create<mlir::pdl_interp::FuncOp,char const(&)[23],mlir::FunctionType>((mlir::StringAttr **)v7, v14, "pdl_generated_rewriter", (uint64_t *)&FunctionType);
      mlir::SymbolTable::insert(v7 + 48, (uint64_t)v193, 0);
      v15 = *(_QWORD *)((((unint64_t)v193
                        + 16 * (((unint64_t)*((unsigned int *)v193 + 11) >> 23) & 1)
                        + (((unint64_t)*((unsigned int *)v193 + 11) >> 21) & 0x7F8)
                        + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)v193 + 10)
                      + 8);
      if (v15)
        v16 = v15 - 8;
      else
        v16 = 0;
      *(_QWORD *)(v7 + 16) = v16;
      *(_QWORD *)(v7 + 24) = v16 + 32;
      v191[0] = 0;
      v191[1] = 0;
      v192 = 0;
      *(_QWORD *)&v189 = v191;
      *((_QWORD *)&v189 + 1) = v7;
      v186 = (mlir::MLIRContext **)v7;
      *(_QWORD *)&v190 = v208;
      *((_QWORD *)&v190 + 1) = &v193;
      mlir::pdl::PatternOp::getRewriter((mlir::pdl::PatternOp *)&v194);
      v188 = v17;
      FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v188);
      if (FastmathAttr)
      {
        FunctionType = v216;
        v215 = 0x600000000;
        v18 = (mlir::OpBuilder *)v7;
        if (mlir::pdl::RewriteOp::getRoot((mlir::pdl::RewriteOp *)&v188))
        {
          Root = mlir::pdl::RewriteOp::getRoot((mlir::pdl::RewriteOp *)&v188);
          v21 = v215;
          if (v215 >= HIDWORD(v215))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&FunctionType, v216, v215 + 1, 8);
            v21 = v215;
          }
          *((_QWORD *)FunctionType + v21) = v20;
          LODWORD(v215) = v215 + 1;
        }
        ExternalArgs = (unint64_t *)mlir::pdl::RewriteOp::getExternalArgs((mlir::pdl::RewriteOp *)&v188);
        v24 = v23;
        v25 = v215;
        v26 = v23 + v215;
        if (v26 > HIDWORD(v215))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&FunctionType, v216, v26, 8);
          v25 = v215;
        }
        v204 = ExternalArgs;
        v205 = 0;
        v206[0] = v189;
        v206[1] = v190;
        v207 = 1;
        if (v24)
        {
          v27 = 0;
          v28 = (char *)FunctionType + 8 * v25;
          v29 = ExternalArgs + 3;
          do
          {
            v30 = *v29;
            v29 += 4;
            v205 = v27;
          }
          while (v24 != v27);
          v25 = v215;
          v18 = (mlir::OpBuilder *)v186;
        }
        LODWORD(v215) = v25 + v24;
        v31 = *(_QWORD *)(v188 + 24);
        mlir::ValueRange::ValueRange((unint64_t *)&v204, 0, 0);
        mlir::OpBuilder::create<mlir::pdl_interp::ApplyRewriteOp,mlir::TypeRange,mlir::StringAttr &,llvm::SmallVector<mlir::Value,6u> &>(v18, v31, (uint64_t *)&v204, &FastmathAttr, (uint64_t)&FunctionType);
        if (FunctionType != v216)
          free(FunctionType);
LABEL_176:
        v157 = *(_QWORD *)((((unint64_t)v193
                           + 16 * (((unint64_t)*((unsigned int *)v193 + 11) >> 23) & 1)
                           + (((unint64_t)*((unsigned int *)v193 + 11) >> 21) & 0x7F8)
                           + 71) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *((unsigned int *)v193 + 10)
                         + 8);
        if (v157)
          v158 = (mlir::Block *)(v157 - 8);
        else
          v158 = 0;
        ArgumentTypes = mlir::Block::getArgumentTypes(v158);
        v160 = (uint64_t *)ArgumentTypes;
        v162 = v161;
        FunctionType = v216;
        v215 = 0x800000000;
        v163 = (uint64_t)v161 - ArgumentTypes;
        if ((unint64_t)v161 - ArgumentTypes < 0x41)
        {
          v164 = 0;
          v166 = 0;
          v165 = v216;
          if ((uint64_t *)ArgumentTypes == v162)
            goto LABEL_186;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&FunctionType, v216, v163 >> 3, 8);
          v164 = v215;
          v165 = FunctionType;
          v166 = v215;
          if (v160 == v162)
            goto LABEL_186;
        }
        v167 = &v165[v164];
        do
        {
          v168 = *v160++;
          *v167++ = *(_QWORD *)(v168 + 8) & 0xFFFFFFFFFFFFFFF8;
        }
        while (v160 != v162);
        v166 = v215;
        v165 = FunctionType;
LABEL_186:
        LODWORD(v215) = v166 + ((unint64_t)v163 >> 3);
        mlir::ValueRange::ValueRange((unint64_t *)&v204, (uint64_t)v165, v215);
        mlir::ValueRange::ValueRange((unint64_t *)v202, 0, 0);
        v169 = mlir::Builder::getFunctionType((mlir::MLIRContext **)v18, (uint64_t)v204, v205, (uint64_t)v202[0], (uint64_t)v202[1]);
        v170 = v193;
        if (v193)
        {
          InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v193);
          mlir::function_interface_impl::setFunctionType((uint64_t)v170, InterfaceFor, v169);
          v172 = FunctionType;
          if (FunctionType == v216)
            goto LABEL_189;
        }
        else
        {
          mlir::function_interface_impl::setFunctionType(0, 0, v169);
          v172 = FunctionType;
          if (FunctionType == v216)
          {
LABEL_189:
            mlir::OpBuilder::create<mlir::pdl_interp::FinalizeOp>(v18, *(_QWORD *)(v188 + 24));
            v173 = *(mlir::StringAttr **)v18;
            FunctionType = (void *)mlir::SymbolRefAttr::get(v193, v174);
            mlir::SymbolRefAttr::get(v173, (uint64_t)"rewriters", 9, (uint64_t)&FunctionType, 1);
            llvm::deallocate_buffer(v191[0], (void *)(16 * v192));
          }
        }
        free(v172);
        goto LABEL_189;
      }
      v32 = *(_QWORD *)(((v188
                        + 16 * (((unint64_t)*(unsigned int *)(v188 + 44) >> 23) & 1)
                        + (((unint64_t)*(unsigned int *)(v188 + 44) >> 21) & 0x7F8)
                        + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *(unsigned int *)(v188 + 40)
                      + 8);
      if (v32)
        v33 = v32 - 8;
      else
        v33 = 0;
      v34 = (ZinIrHalH13g *)(v33 + 32);
      v35 = *(ZinIrHalH13g **)(v33 + 40);
      v18 = (mlir::OpBuilder *)v186;
      if (v35 == (ZinIrHalH13g *)(v33 + 32))
        goto LABEL_176;
      v36 = (int *)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeOp,void>::id;
      v185 = (ZinIrHalH13g *)(v33 + 32);
      while (1)
      {
        ZinIrHalH13g::~ZinIrHalH13g(v35);
        v38 = *(int **)(v37[6] + 16);
        if (v37 && v38 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ApplyNativeRewriteOp,void>::id)
        {
          __p = v37;
          FunctionType = v216;
          v215 = 0x200000000;
          Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&__p);
          if (v40)
          {
            v41 = v40;
            v42 = (unint64_t *)(Inputs + 24);
            do
            {
              v44 = v215;
              if (v215 >= (unint64_t)HIDWORD(v215))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&FunctionType, v216, v215 + 1, 8);
                v44 = v215;
              }
              *((_QWORD *)FunctionType + v44) = v43;
              LODWORD(v215) = v215 + 1;
              v42 += 4;
              --v41;
            }
            while (v41);
          }
          v47 = *((_QWORD *)__p + 3);
          v48 = (void *)*((unsigned int *)__p + 9);
          v49 = (char *)__p - 16;
          if (!(_DWORD)v48)
            v49 = 0;
          v202[0] = v49;
          v202[1] = v48;
          mlir::OperandRange::getTypes((uint64_t *)v202, (uint64_t *)&v204);
          v202[0] = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&__p);
          v212[0] = mlir::OpBuilder::create<mlir::pdl_interp::ApplyRewriteOp,mlir::ValueTypeRange<mlir::ResultRange>,mlir::StringAttr,llvm::SmallVector<mlir::Value,2u> &>(v18, v47, (uint64_t *)&v204, (uint64_t *)v202, (uint64_t)&FunctionType);
          Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&__p);
          v52 = v51;
          v53 = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)v212);
          if (v52 && v54)
          {
            v55 = v53;
            v56 = 0;
            v57 = v54 - 1;
            v58 = v52 - 1;
            do
            {
              NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(Results, v56);
              v60 = mlir::detail::OpResultImpl::getNextResultAtOffset(v55, v56);
              v204 = NextResultAtOffset;
              v205 = v60;
              v202[0] = 0;
              v61 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, (unint64_t *)&v204, v202);
              v62 = v202[0];
              if ((v61 & 1) == 0)
              {
                v62 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v191, (uint64_t)&v204, (unint64_t *)&v204, (_QWORD *)v202[0]);
                *v62 = v204;
                v62[1] = 0;
              }
              v62[1] = v205;
              if (v58 == v56)
                break;
              v105 = v57 == v56++;
            }
            while (!v105);
          }
          if (FunctionType != v216)
            free(FunctionType);
          v18 = (mlir::OpBuilder *)v186;
          goto LABEL_29;
        }
        if (v38 != v36)
          break;
        v204 = v37;
        v63 = v37[3];
        FunctionType = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v204);
        v64 = mlir::OpBuilder::create<mlir::pdl_interp::CreateAttributeOp,mlir::Attribute const&>((mlir::MLIRContext **)v18, v63, (uint64_t *)&FunctionType);
        v202[0] = (char *)v204 - 16;
        FunctionType = 0;
        v65 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, (unint64_t *)v202, &FunctionType);
        v66 = FunctionType;
        if ((v65 & 1) == 0)
        {
          v67 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v191, (uint64_t)v202, (unint64_t *)v202, FunctionType);
          v66 = v67;
          v68 = v202[0];
LABEL_63:
          *v67 = v68;
          v67[1] = 0;
        }
LABEL_64:
        v66[1] = (char *)v64 - 16;
LABEL_29:
        v35 = (ZinIrHalH13g *)*((_QWORD *)v35 + 1);
        if (v35 == v34)
          goto LABEL_176;
      }
      if (v38 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::EraseOp,void>::id)
      {
        FunctionType = v37;
        v69 = v37[3];
        Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&FunctionType);
        mlir::OpBuilder::create<mlir::pdl_interp::EraseOp,mlir::Value>(v18, v69, (uint64_t *)&v204);
        goto LABEL_29;
      }
      if (v38 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
      {
        if (v38 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::RangeOp,void>::id)
        {
          v202[0] = v37;
          FunctionType = v216;
          v215 = 0x400000000;
          v92 = mlir::anec::Concat::getInputs((mlir::anec::Concat *)v202);
          if (v93)
          {
            v94 = v93;
            v95 = (unint64_t *)(v92 + 24);
            do
            {
              v97 = v215;
              if (v215 >= (unint64_t)HIDWORD(v215))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&FunctionType, v216, v215 + 1, 8);
                v97 = v215;
              }
              *((_QWORD *)FunctionType + v97) = v96;
              LODWORD(v215) = v215 + 1;
              v95 += 4;
              --v94;
            }
            while (v94);
          }
          v98 = *((_QWORD *)v202[0] + 3);
          __p = (void *)(*((_QWORD *)v202[0] - 1) & 0xFFFFFFFFFFFFFFF8);
          v99 = mlir::OpBuilder::create<mlir::pdl_interp::CreateRangeOp,mlir::pdl::RangeType,llvm::SmallVector<mlir::Value,4u> &>(v18, v98, (uint64_t *)&__p, (uint64_t)&FunctionType);
          v212[0] = (char *)v202[0] - 16;
          v204 = 0;
          v100 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, (unint64_t *)v212, &v204);
          v101 = v204;
          if ((v100 & 1) == 0)
          {
            v101 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v191, (uint64_t)v212, (unint64_t *)v212, v204);
            *v101 = v212[0];
            v101[1] = 0;
          }
          v101[1] = (char *)v99 - 16;
          v102 = FunctionType;
          if (FunctionType == v216)
            goto LABEL_29;
          goto LABEL_175;
        }
        if (v38 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ReplaceOp,void>::id)
        {
          v204 = v37;
          FunctionType = v216;
          v215 = 0x400000000;
          v202[0] = (void *)mlir::pdl::ReplaceOp::getReplOperation((mlir::pdl::ReplaceOp *)&v204);
          if (v202[0])
          {
            v212[0] = (void *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v204);
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v212);
            if (DefiningOp)
            {
              v104 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
              v105 = v104 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id;
              if (v104 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
                v106 = (void *)DefiningOp;
              else
                v106 = 0;
              __p = v106;
              if (v105)
              {
                mlir::pdl::OperationOp::getTypeValues((mlir::pdl::OperationOp *)&__p);
                if (!v107)
                  goto LABEL_170;
              }
            }
            else
            {
              __p = 0;
            }
            Loc = mlir::Value::getLoc((mlir::Value *)v202);
            v152 = mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Value &>((mlir::MLIRContext **)v18, Loc, (uint64_t *)v212);
            v153 = v215;
            if (v215 >= (unint64_t)HIDWORD(v215))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&FunctionType, v216, v215 + 1, 8);
              v153 = v215;
            }
            *((_QWORD *)FunctionType + v153) = (char *)v152 - 16;
            LODWORD(v215) = v215 + 1;
LABEL_170:
            v149 = v215;
          }
          else
          {
            ReplValues = mlir::pdl::ReplaceOp::getReplValues((mlir::pdl::ReplaceOp *)&v204);
            if (!v144)
              goto LABEL_170;
            v145 = v144;
            v146 = (unint64_t *)(ReplValues + 24);
            do
            {
              v148 = v215;
              if (v215 >= (unint64_t)HIDWORD(v215))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&FunctionType, v216, v215 + 1, 8);
                v148 = v215;
              }
              *((_QWORD *)FunctionType + v148) = v147;
              v149 = v215 + 1;
              LODWORD(v215) = v215 + 1;
              v146 += 4;
              --v145;
            }
            while (v145);
          }
          v154 = *((_QWORD *)v204 + 3);
          if (v149)
          {
            v155 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v204);
            mlir::OpBuilder::create<mlir::pdl_interp::ReplaceOp,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>(v18, v154, (uint64_t *)v202, (uint64_t)&FunctionType);
          }
          else
          {
            v156 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v204);
            mlir::OpBuilder::create<mlir::pdl_interp::EraseOp,mlir::Value>(v18, v154, (uint64_t *)v202);
          }
          v102 = FunctionType;
          if (FunctionType == v216)
            goto LABEL_29;
LABEL_175:
          free(v102);
          goto LABEL_29;
        }
        if (v38 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id)
        {
          v204 = v37;
          v134 = v37[3];
          TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)v18);
          v202[0] = (void *)mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
          v136 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v204);
          LODWORD(v201) = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v204);
          v46 = mlir::OpBuilder::create<mlir::pdl_interp::GetResultOp,mlir::pdl::ValueType,mlir::Value &,unsigned int>(v18, v134, (uint64_t *)v202, (uint64_t *)&__p, (unsigned int *)&v201);
        }
        else
        {
          if (v38 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
          {
            v204 = v37;
            v140 = v37[3];
            v202[0] = (void *)(*(v37 - 1) & 0xFFFFFFFFFFFFFFF8);
            v141 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v204);
            v212[0] = (void *)mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&v204);
            v64 = mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Type,mlir::Value &,std::optional<unsigned int>>(v18, v140, (uint64_t *)v202, (uint64_t *)&__p, (uint64_t *)v212);
            v201 = (mlir::Operation *)((char *)v204 - 16);
            FunctionType = 0;
            v142 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, (unint64_t *)&v201, &FunctionType);
            v66 = FunctionType;
            if ((v142 & 1) != 0)
              goto LABEL_64;
            v67 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v191, (uint64_t)&v201, (unint64_t *)&v201, FunctionType);
            v66 = v67;
            v68 = v201;
            goto LABEL_63;
          }
          if (v38 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
          {
            v204 = v37;
            v202[0] = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v204);
            if (!v202[0])
              goto LABEL_29;
            v64 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypeOp,mlir::TypeAttr &>((mlir::MLIRContext **)v18, *((_QWORD *)v204 + 3), (uint64_t *)v202);
            __p = (char *)v204 - 16;
            FunctionType = 0;
            v150 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, (unint64_t *)&__p, &FunctionType);
            v66 = FunctionType;
            if ((v150 & 1) != 0)
              goto LABEL_64;
            v67 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v191, (uint64_t)&__p, (unint64_t *)&__p, FunctionType);
            v66 = v67;
            v68 = __p;
            goto LABEL_63;
          }
          if (v38 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id)
            goto LABEL_29;
          v204 = v37;
          v202[0] = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v204);
          if (!v202[0])
            goto LABEL_29;
          v45 = *((_QWORD *)v204 + 3);
          __p = (void *)(*((_QWORD *)v204 - 1) & 0xFFFFFFFFFFFFFFF8);
          v46 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::pdl::RangeType,mlir::ArrayAttr &>(v18, v45, (uint64_t *)&__p, (uint64_t *)v202);
        }
        v64 = v46;
        v212[0] = (char *)v204 - 16;
        FunctionType = 0;
        v137 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, (unint64_t *)v212, &FunctionType);
        v66 = FunctionType;
        if ((v137 & 1) != 0)
          goto LABEL_64;
        v67 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v191, (uint64_t)v212, (unint64_t *)v212, FunctionType);
        v66 = v67;
        v68 = v212[0];
        goto LABEL_63;
      }
      v197 = (mlir::Operation *)v37;
      v204 = v206;
      v205 = 0x400000000;
      OperandValues = mlir::pdl::OperationOp::getOperandValues((mlir::pdl::OperationOp *)&v197);
      if (v72)
      {
        v73 = v72;
        v74 = (unint64_t *)(OperandValues + 24);
        do
        {
          v76 = v205;
          if (v205 >= (unint64_t)HIDWORD(v205))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, v206, v205 + 1, 8);
            v76 = v205;
          }
          *((_QWORD *)v204 + v76) = v75;
          LODWORD(v205) = v205 + 1;
          v74 += 4;
          --v73;
        }
        while (v73);
      }
      v202[0] = v203;
      v202[1] = (void *)0x400000000;
      AttributeValues = mlir::pdl::OperationOp::getAttributeValues((mlir::pdl::OperationOp *)&v197);
      if (v78)
      {
        v79 = v78;
        v80 = (unint64_t *)(AttributeValues + 24);
        do
        {
          v82 = LODWORD(v202[1]);
          if (LODWORD(v202[1]) >= (unint64_t)HIDWORD(v202[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v202, v203, LODWORD(v202[1]) + 1, 8);
            v82 = LODWORD(v202[1]);
          }
          *((_QWORD *)v202[0] + v82) = v81;
          ++LODWORD(v202[1]);
          v80 += 4;
          --v79;
        }
        while (v79);
      }
      v196 = 0;
      v212[0] = v213;
      v212[1] = (void *)0x200000000;
      v201 = v197;
      v83 = *((_QWORD *)v197 + 2);
      TypeValues = mlir::pdl::OperationOp::getTypeValues((mlir::pdl::OperationOp *)&v201);
      v86 = v85;
      if (v85)
      {
        v87 = TypeValues;
        if (v85 > HIDWORD(v212[1]))
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v212, v213, v85, 8);
        v88 = (void **)(v87 + 24);
        v89 = v86;
        while (1)
        {
          __p = *v88;
          FunctionType = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, (unint64_t *)&__p, &FunctionType) & 1) == 0|| (v90 = (_QWORD *)*((_QWORD *)FunctionType + 1)) == 0)
          {
            if (*(_QWORD *)(mlir::Value::getDefiningOp((mlir::Value *)&__p) + 16) == v83)
            {
              LODWORD(v212[1]) = 0;
              v18 = (mlir::OpBuilder *)v186;
              break;
            }
          }
          v91 = LODWORD(v212[1]);
          if (LODWORD(v212[1]) >= (unint64_t)HIDWORD(v212[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v212, v213, LODWORD(v212[1]) + 1, 8);
            v91 = LODWORD(v212[1]);
          }
          *((_QWORD *)v212[0] + v91) = v90;
          ++LODWORD(v212[1]);
          v88 += 4;
          if (!--v89)
            goto LABEL_122;
        }
      }
      if (mlir::pdl::OperationOp::hasTypeInference((mlir::pdl::OperationOp *)&v201))
      {
        v196 = 1;
      }
      else
      {
        v108 = *(_QWORD **)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v201);
        if (v108)
        {
          while (1)
          {
            v109 = (_QWORD *)v108[2];
            if (*(_UNKNOWN **)(v109[6] + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::ReplaceOp,void>::id)
              v109 = 0;
            FunctionType = v109;
            if (v109)
            {
              if (mlir::OpOperand::getOperandNumber((unint64_t)v108))
              {
                __p = (void *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&FunctionType);
                v110 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
                v111 = v110;
                if (*(_QWORD *)(v110 + 16) != v83 || mlir::Operation::isBeforeInBlock((mlir::Block **)v110, v201))
                  break;
              }
            }
            v108 = (_QWORD *)*v108;
            if (!v108)
              goto LABEL_110;
          }
          v112 = *(_QWORD *)(v111 + 24);
          SingletonImpl = (uint64_t)mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Value &>((mlir::MLIRContext **)v18, v112, &v199)- 16;
          v113 = mlir::OpBuilder::create<mlir::pdl_interp::GetValueTypeOp,mlir::Value &>((mlir::MLIRContext **)v18, *(_QWORD *)(v111 + 24), &SingletonImpl);
          v114 = LODWORD(v212[1]);
          if (LODWORD(v212[1]) >= (unint64_t)HIDWORD(v212[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v212, v213, LODWORD(v212[1]) + 1, 8);
            v114 = LODWORD(v212[1]);
          }
          *((_QWORD *)v212[0] + v114) = (char *)v113 - 16;
          ++LODWORD(v212[1]);
        }
        else
        {
LABEL_110:
          if (v86)
        }
      }
LABEL_122:
      v115 = *((_QWORD *)v197 + 3);
      mlir::pdl::OperationOp::getOpName((uint64_t)&v197, (uint64_t)&FunctionType);
      __p = (void *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v197);
      v18 = (mlir::OpBuilder *)v186;
      v116 = (ZinIrHalH13g *)((char *)mlir::OpBuilder::create<mlir::pdl_interp::CreateOperationOp,llvm::StringRef,llvm::SmallVector<mlir::Value,2u> &,BOOL &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::Value,4u> &,mlir::ArrayAttr>(v186, v115, (uint64_t *)&FunctionType, (uint64_t)v212, &v196, (uint64_t)&v204, (uint64_t)v202, (uint64_t *)&__p)- 16);
      v201 = v116;
      __p = (void *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v197);
      FunctionType = 0;
      v117 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, (unint64_t *)&__p, &FunctionType);
      v118 = FunctionType;
      if ((v117 & 1) == 0)
      {
        v118 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v191, (uint64_t)&__p, (unint64_t *)&__p, FunctionType);
        *v118 = __p;
        v118[1] = 0;
      }
      v118[1] = v116;
      v119 = mlir::pdl::OperationOp::getTypeValues((mlir::pdl::OperationOp *)&v197);
      v120 = v119;
      v122 = v121;
      if (v121 == (char *)1
        && *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v119 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      {
        __p = *(void **)(v119 + 24);
        FunctionType = 0;
        v138 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, (unint64_t *)&__p, &FunctionType);
        v139 = FunctionType;
        if ((v138 & 1) != 0)
        {
          v34 = v185;
          if (*((_QWORD *)FunctionType + 1))
            goto LABEL_141;
        }
        else
        {
          v139 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v191, (uint64_t)&__p, (unint64_t *)&__p, FunctionType);
          *v139 = __p;
          v139[1] = 0;
          v34 = v185;
        }
        FunctionType = mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Value &>(v186, v115, (uint64_t *)&v201);
        v139[1] = (char *)mlir::OpBuilder::create<mlir::pdl_interp::GetValueTypeOp,mlir::pdl_interp::GetResultsOp &>(v186, v115, &FunctionType)- 16;
      }
      else
      {
        v123 = v36;
        v124 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v186);
        SingletonImpl = mlir::StorageUniquer::getSingletonImpl(v124, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
        v199 = mlir::pdl::RangeType::get(SingletonImpl);
        if (v122)
        {
          v125 = 0;
          v126 = 0;
          v127 = (unint64_t *)(v120 + 24);
          while (1)
          {
            v129 = *v127;
            FunctionType = v126;
            v215 = v129;
            __p = 0;
            v130 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v191, &v215, &__p);
            v131 = __p;
            if ((v130 & 1) == 0)
              break;
            if (!*((_QWORD *)__p + 1))
              goto LABEL_135;
LABEL_130:
            ++v126;
            v127 += 4;
            if (v122 == v126)
              goto LABEL_140;
          }
          v131 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v191, (uint64_t)&v215, &v215, __p);
          *v131 = v215;
          v131[1] = 0;
LABEL_135:
          v132 = *(void **)(*(_QWORD *)(*(_QWORD *)(v215 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
          v125 |= v132 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
          __p = 0;
          if ((v125 & 1) != 0)
          {
            if (v132 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
              p_SingletonImpl = &v199;
            else
              p_SingletonImpl = &SingletonImpl;
            v195 = FunctionType;
            v128 = mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Type &,mlir::Value &,unsigned long>((mlir::Builder *)v186, v115, p_SingletonImpl, (uint64_t *)&v201, (unsigned int *)&v195);
          }
          else
          {
            v195 = FunctionType;
            v128 = mlir::OpBuilder::create<mlir::pdl_interp::GetResultOp,mlir::pdl::ValueType,mlir::Value &,unsigned int>((mlir::Builder *)v186, v115, &SingletonImpl, (uint64_t *)&v201, (unsigned int *)&v195);
          }
          __p = (char *)v128 - 16;
          v131[1] = (char *)mlir::OpBuilder::create<mlir::pdl_interp::GetValueTypeOp,mlir::Value &>(v186, v115, (uint64_t *)&__p)- 16;
          goto LABEL_130;
        }
LABEL_140:
        v36 = v123;
        v34 = v185;
      }
LABEL_141:
      if (v212[0] != v213)
        free(v212[0]);
      if (v202[0] != v203)
        free(v202[0]);
      v102 = v204;
      if (v204 == v206)
        goto LABEL_29;
      goto LABEL_175;
    }
  }
  return v2;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetDefiningOpOp,mlir::pdl::OperationType,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_defining_op", (const unsigned __int8 *)0x1A, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"pdl_interp.get_defining_op";
    v17[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetDefiningOpOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ExtractOp,mlir::Value &,int>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.extract", (const unsigned __int8 *)0x12, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"pdl_interp.extract";
    v17[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::ExtractOp::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ExtractOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetUsersOp,mlir::Value &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_users", (const unsigned __int8 *)0x14, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_users";
    v15[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetUsersOp::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetUsersOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ForEachOp,mlir::Value &,mlir::Block *&,BOOL>(mlir::OpBuilder *a1, uint64_t a2, unint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.foreach", (const unsigned __int8 *)0x12, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"pdl_interp.foreach";
    v19[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::ForEachOp::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ForEachOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ContinueOp>(ZinIrHalH13g *a1, uint64_t a2)
{
  uint64_t *Context;
  uint64_t v5;
  char v6;
  ZinIrHalH13g *v7;
  ZinIrHalH13g *v8;
  uint64_t v10;
  const char *v11;
  __int16 v12;
  uint64_t v13[4];
  __int16 v14;
  _QWORD v15[39];

  v15[38] = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.continue", (const unsigned __int8 *)0x13, Context);
  if (!v6)
  {
    v14 = 1283;
    v13[2] = (uint64_t)"pdl_interp.continue";
    v13[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v12 = 259;
    llvm::operator+(v13, (uint64_t *)&v11, (uint64_t)v15);
    llvm::report_fatal_error((llvm::Twine *)v15, 1);
  }
  mlir::OperationState::OperationState(v15, a2, v5);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  v7 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v15);
  if (*(_UNKNOWN **)(*((_QWORD *)v7 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ContinueOp,void>::id)
    v8 = v7;
  else
    v8 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v15);
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetOperandOp,mlir::pdl::ValueType,mlir::Value &,unsigned int>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_operand", (const unsigned __int8 *)0x16, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"pdl_interp.get_operand";
    v19[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetOperandOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetOperandsOp,mlir::Type,mlir::Value &,std::optional<unsigned int>>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_operands", (const unsigned __int8 *)0x17, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"pdl_interp.get_operands";
    v19[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetOperandsOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandsOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetAttributeOp,mlir::pdl::AttributeType,mlir::Value &,llvm::StringRef>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_attribute", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"pdl_interp.get_attribute";
    v19[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetAttributeOp::build(a1, (uint64_t)v21, *a3, *a4, *a5, a5[1]);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetAttributeTypeOp,mlir::Value &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_attribute_type", (const unsigned __int8 *)0x1D, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_attribute_type";
    v15[3] = 29;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetAttributeTypeOp::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeTypeOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetValueTypeOp,mlir::Value &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_value_type", (const unsigned __int8 *)0x19, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_value_type";
    v15[3] = 25;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetValueTypeOp::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetValueTypeOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetResultOp,mlir::pdl::ValueType,mlir::Value &,unsigned int>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_result", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"pdl_interp.get_result";
    v19[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetResultOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Type,mlir::Value &,std::optional<unsigned int>>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_results", (const unsigned __int8 *)0x16, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"pdl_interp.get_results";
    v19[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetResultsOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateAttributeOp,mlir::Attribute const&>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_attribute", (const unsigned __int8 *)0x1B, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.create_attribute";
    v15[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::CreateAttributeOp::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateAttributeOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateTypeOp,mlir::TypeAttr &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_type", (const unsigned __int8 *)0x16, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.create_type";
    v15[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::CreateTypeOp::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypeOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::ArrayAttr>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_types", (const unsigned __int8 *)0x17, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.create_types";
    v15[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::CreateTypesOp::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::IsNotNullOp,mlir::Value &,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.is_not_null", (const unsigned __int8 *)0x16, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"pdl_interp.is_not_null";
    v19[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::IsNotNullOp::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::IsNotNullOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckOperationNameOp,mlir::Value &,llvm::StringRef,mlir::Block *&,mlir::Block *&>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_operation_name", (const unsigned __int8 *)0x1F, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.check_operation_name";
    v21[3] = 31;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::CheckOperationNameOp::build(a1, (uint64_t)v23, *a3, *a4, a4[1], *a5, *a6);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperationNameOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckTypesOp,mlir::Value &,mlir::ArrayAttr,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_types", (const unsigned __int8 *)0x16, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.check_types";
    v21[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::CheckTypesOp::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypesOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckTypeOp,mlir::Value &,mlir::TypeAttr,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_type", (const unsigned __int8 *)0x15, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.check_type";
    v21[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::CheckTypeOp::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypeOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckAttributeOp,mlir::Value &,mlir::Attribute const&,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_attribute", (const unsigned __int8 *)0x1A, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.check_attribute";
    v21[3] = 26;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::CheckAttributeOp::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckAttributeOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckOperandCountOp,mlir::Value &,unsigned int const&,BOOL,mlir::Block *&,mlir::Block *&>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, unsigned __int8 *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  ZinIrHalH13g *v17;
  ZinIrHalH13g *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_operand_count", (const unsigned __int8 *)0x1E, Context);
  if (!v16)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"pdl_interp.check_operand_count";
    v23[3] = 30;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::pdl_interp::CheckOperandCountOp::build(a1, (uint64_t)v25, *a3, *a4, *a5, *a6, *a7);
  v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperandCountOp,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CheckResultCountOp,mlir::Value &,unsigned int const&,BOOL,mlir::Block *&,mlir::Block *&>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, unsigned __int8 *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  ZinIrHalH13g *v17;
  ZinIrHalH13g *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.check_result_count", (const unsigned __int8 *)0x1D, Context);
  if (!v16)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"pdl_interp.check_result_count";
    v23[3] = 29;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::pdl_interp::CheckResultCountOp::build(a1, (uint64_t)v25, *a3, *a4, *a5, *a6, *a7);
  v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckResultCountOp,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::AreEqualOp,mlir::Value &,mlir::Value &,mlir::Block *&,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  ZinIrHalH13g *v15;
  ZinIrHalH13g *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.are_equal", (const unsigned __int8 *)0x14, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"pdl_interp.are_equal";
    v21[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::pdl_interp::AreEqualOp::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::AreEqualOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ApplyConstraintOp,llvm::StringRef,llvm::SmallVector<mlir::Value,6u> &,BOOL,mlir::Block *&,mlir::Block *&>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned __int8 *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  ZinIrHalH13g *v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  unint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.apply_constraint", (const unsigned __int8 *)0x1B, Context);
  if (!v16)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.apply_constraint";
    v25[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v15);
  v18 = *a3;
  v17 = a3[1];
  mlir::ValueRange::ValueRange(v27, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::pdl_interp::ApplyConstraintOp::build(a1, (uint64_t)v28, v18, v17, v27[0], v27[1], (mlir::MLIRContext *)*a5, *a6, *a7);
  v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyConstraintOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

void createSwitchOp<mlir::pdl_interp::SwitchOperandCountOp,mlir::pdl_to_pdl_interp::UnsignedAnswer,int>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t Loc;
  void *__p;
  void *v51;
  char *v52;
  void *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  __p = 0;
  v56 = a2;
  v57 = a1;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v51 = 0;
  v52 = 0;
  v4 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v4)
  {
    v53 = operator new(4 * v4);
    v54 = (char *)v53;
    v55 = (char *)v53 + 4 * v4;
    v6 = (char *)operator new(8 * v4);
    v7 = *(_QWORD **)(a4 + 24);
    v8 = &v7[2 * v4];
    __p = v6;
    v51 = v6;
    v52 = &v6[8 * v4];
    while (1)
    {
      if (v6 < v52)
      {
        *(_QWORD *)v6 = v7[1];
        v6 += 8;
        v51 = v6;
        v10 = *(_DWORD *)(*v7 + 8);
        v12 = v54;
        v11 = v55;
        if (v54 >= v55)
          goto LABEL_27;
        goto LABEL_3;
      }
      v13 = (char *)__p;
      v14 = v6 - (_BYTE *)__p;
      v15 = (v6 - (_BYTE *)__p) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_61;
      v17 = v52 - (_BYTE *)__p;
      if ((v52 - (_BYTE *)__p) >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          goto LABEL_62;
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * v15];
      *(_QWORD *)v20 = v7[1];
      v21 = v20 + 8;
      if (v6 == v13)
      {
        __p = &v19[8 * v15];
        v52 = &v19[8 * v18];
LABEL_25:
        operator delete(v6);
        goto LABEL_26;
      }
      v22 = v6 - 8 - v13;
      if (v22 < 0x168)
      {
        v23 = v6;
        goto LABEL_21;
      }
      if (&v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8])
        break;
      if (&v6[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        v23 = v6;
        do
        {
LABEL_21:
          v24 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v23 != v13);
        goto LABEL_22;
      }
      if ((unint64_t)(v6 - &v19[v14]) < 0x20)
      {
        v23 = v6;
        goto LABEL_21;
      }
      v42 = (v22 >> 3) + 1;
      v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v6[-v43];
      v20 -= v43;
      v44 = &v19[8 * v15 - 16];
      v45 = (__int128 *)(v6 - 16);
      v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v47 = *v45;
        *(v44 - 1) = *(v45 - 1);
        *v44 = v47;
        v44 -= 2;
        v45 -= 2;
        v46 -= 4;
      }
      while (v46);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_21;
LABEL_22:
      v6 = (char *)__p;
      __p = v20;
      v52 = &v19[8 * v18];
      if (v6)
        goto LABEL_25;
LABEL_26:
      v6 = v21;
      v51 = v21;
      v10 = *(_DWORD *)(*v7 + 8);
      v12 = v54;
      v11 = v55;
      if (v54 >= v55)
      {
LABEL_27:
        v25 = (char *)v53;
        v26 = v12 - (_BYTE *)v53;
        v27 = (v12 - (_BYTE *)v53) >> 2;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
LABEL_61:
          abort();
        v29 = v11 - (_BYTE *)v53;
        if (v29 >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 >> 62)
LABEL_62:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v31 = operator new(4 * v30);
          v32 = &v31[4 * v27];
          *v32 = v10;
          v9 = (uint64_t)(v32 + 1);
          if (v12 == v25)
            goto LABEL_44;
LABEL_38:
          v33 = v12 - 4 - v25;
          if (v33 < 0x2C)
            goto LABEL_65;
          if ((unint64_t)(v12 - &v31[v26]) < 0x20)
            goto LABEL_65;
          v34 = (v33 >> 2) + 1;
          v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          v36 = &v12[-v35];
          v32 = (_DWORD *)((char *)v32 - v35);
          v37 = &v31[4 * v27 - 16];
          v38 = v12 - 16;
          v39 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *v37 = v40;
            v37 -= 2;
            v38 -= 32;
            v39 -= 8;
          }
          while (v39);
          v12 = v36;
          if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_65:
            do
            {
              v41 = *((_DWORD *)v12 - 1);
              v12 -= 4;
              *--v32 = v41;
            }
            while (v12 != v25);
          }
        }
        else
        {
          v31 = 0;
          v32 = (_DWORD *)(4 * v27);
          *(_DWORD *)(4 * v27) = v10;
          v9 = 4 * v27 + 4;
          if (v12 != v25)
            goto LABEL_38;
        }
LABEL_44:
        v53 = v32;
        v55 = &v31[4 * v30];
        if (v25)
          operator delete(v25);
        goto LABEL_4;
      }
LABEL_3:
      *(_DWORD *)v12 = v10;
      v9 = (uint64_t)(v12 + 4);
LABEL_4:
      v54 = (char *)v9;
      v7 += 2;
      if (v7 == v8)
        goto LABEL_56;
    }
    v23 = v6;
    goto LABEL_21;
  }
LABEL_56:
  Loc = mlir::Value::getLoc((mlir::Value *)&v57);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperandCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v57, (uint64_t *)&v53, &v56, (uint64_t *)&__p);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    v54 = (char *)v53;
    operator delete(v53);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchResultCountOp,mlir::pdl_to_pdl_interp::UnsignedAnswer,int>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t Loc;
  void *__p;
  void *v51;
  char *v52;
  void *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  __p = 0;
  v56 = a2;
  v57 = a1;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v51 = 0;
  v52 = 0;
  v4 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v4)
  {
    v53 = operator new(4 * v4);
    v54 = (char *)v53;
    v55 = (char *)v53 + 4 * v4;
    v6 = (char *)operator new(8 * v4);
    v7 = *(_QWORD **)(a4 + 24);
    v8 = &v7[2 * v4];
    __p = v6;
    v51 = v6;
    v52 = &v6[8 * v4];
    while (1)
    {
      if (v6 < v52)
      {
        *(_QWORD *)v6 = v7[1];
        v6 += 8;
        v51 = v6;
        v10 = *(_DWORD *)(*v7 + 8);
        v12 = v54;
        v11 = v55;
        if (v54 >= v55)
          goto LABEL_27;
        goto LABEL_3;
      }
      v13 = (char *)__p;
      v14 = v6 - (_BYTE *)__p;
      v15 = (v6 - (_BYTE *)__p) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        goto LABEL_61;
      v17 = v52 - (_BYTE *)__p;
      if ((v52 - (_BYTE *)__p) >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          goto LABEL_62;
        v19 = operator new(8 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * v15];
      *(_QWORD *)v20 = v7[1];
      v21 = v20 + 8;
      if (v6 == v13)
      {
        __p = &v19[8 * v15];
        v52 = &v19[8 * v18];
LABEL_25:
        operator delete(v6);
        goto LABEL_26;
      }
      v22 = v6 - 8 - v13;
      if (v22 < 0x168)
      {
        v23 = v6;
        goto LABEL_21;
      }
      if (&v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8])
        break;
      if (&v6[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
      {
        v23 = v6;
        do
        {
LABEL_21:
          v24 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v23 != v13);
        goto LABEL_22;
      }
      if ((unint64_t)(v6 - &v19[v14]) < 0x20)
      {
        v23 = v6;
        goto LABEL_21;
      }
      v42 = (v22 >> 3) + 1;
      v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v6[-v43];
      v20 -= v43;
      v44 = &v19[8 * v15 - 16];
      v45 = (__int128 *)(v6 - 16);
      v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v47 = *v45;
        *(v44 - 1) = *(v45 - 1);
        *v44 = v47;
        v44 -= 2;
        v45 -= 2;
        v46 -= 4;
      }
      while (v46);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_21;
LABEL_22:
      v6 = (char *)__p;
      __p = v20;
      v52 = &v19[8 * v18];
      if (v6)
        goto LABEL_25;
LABEL_26:
      v6 = v21;
      v51 = v21;
      v10 = *(_DWORD *)(*v7 + 8);
      v12 = v54;
      v11 = v55;
      if (v54 >= v55)
      {
LABEL_27:
        v25 = (char *)v53;
        v26 = v12 - (_BYTE *)v53;
        v27 = (v12 - (_BYTE *)v53) >> 2;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
LABEL_61:
          abort();
        v29 = v11 - (_BYTE *)v53;
        if (v29 >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 >> 62)
LABEL_62:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v31 = operator new(4 * v30);
          v32 = &v31[4 * v27];
          *v32 = v10;
          v9 = (uint64_t)(v32 + 1);
          if (v12 == v25)
            goto LABEL_44;
LABEL_38:
          v33 = v12 - 4 - v25;
          if (v33 < 0x2C)
            goto LABEL_65;
          if ((unint64_t)(v12 - &v31[v26]) < 0x20)
            goto LABEL_65;
          v34 = (v33 >> 2) + 1;
          v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          v36 = &v12[-v35];
          v32 = (_DWORD *)((char *)v32 - v35);
          v37 = &v31[4 * v27 - 16];
          v38 = v12 - 16;
          v39 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *v37 = v40;
            v37 -= 2;
            v38 -= 32;
            v39 -= 8;
          }
          while (v39);
          v12 = v36;
          if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_65:
            do
            {
              v41 = *((_DWORD *)v12 - 1);
              v12 -= 4;
              *--v32 = v41;
            }
            while (v12 != v25);
          }
        }
        else
        {
          v31 = 0;
          v32 = (_DWORD *)(4 * v27);
          *(_DWORD *)(4 * v27) = v10;
          v9 = 4 * v27 + 4;
          if (v12 != v25)
            goto LABEL_38;
        }
LABEL_44:
        v53 = v32;
        v55 = &v31[4 * v30];
        if (v25)
          operator delete(v25);
        goto LABEL_4;
      }
LABEL_3:
      *(_DWORD *)v12 = v10;
      v9 = (uint64_t)(v12 + 4);
LABEL_4:
      v54 = (char *)v9;
      v7 += 2;
      if (v7 == v8)
        goto LABEL_56;
    }
    v23 = v6;
    goto LABEL_21;
  }
LABEL_56:
  Loc = mlir::Value::getLoc((mlir::Value *)&v57);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchResultCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v57, (uint64_t *)&v53, &v56, (uint64_t *)&__p);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    v54 = (char *)v53;
    operator delete(v53);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchOperationNameOp,mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t Loc;
  void *__p;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  __p = 0;
  v55 = a2;
  v56 = a1;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v51 = 0;
  v4 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v4)
  {
    v52 = operator new(8 * v4);
    v53 = (char *)v52;
    v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    v50 = (char *)__p;
    v51 = (char *)__p + 8 * v4;
    v6 = *(uint64_t **)(a4 + 24);
    v7 = &v6[2 * v4];
    while (1)
    {
      v9 = v50;
      if (v50 < v51)
      {
        *(_QWORD *)v50 = v6[1];
        v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      v11 = (char *)__p;
      v12 = v50 - (_BYTE *)__p;
      v13 = (v50 - (_BYTE *)__p) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        goto LABEL_53;
      v15 = v51 - (_BYTE *)__p;
      if ((v51 - (_BYTE *)__p) >> 2 > v14)
        v14 = v15 >> 2;
      v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16)
        break;
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      *(_QWORD *)(8 * v13) = v6[1];
      v10 = 8 * v13 + 8;
      if (v9 != v11)
        goto LABEL_18;
LABEL_25:
      __p = v18;
      v51 = &v17[8 * v16];
      if (v9)
        operator delete(v9);
LABEL_27:
      v50 = (char *)v10;
      v28 = *v6;
      v29 = v53;
      if (v53 >= v54)
      {
        v30 = v52;
        v31 = v53 - (_BYTE *)v52;
        v32 = (v53 - (_BYTE *)v52) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
LABEL_53:
          abort();
        v34 = v54 - (_BYTE *)v52;
        if ((v54 - (_BYTE *)v52) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 61)
LABEL_54:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * v35);
          v37 = &v36[8 * v32];
          *v37 = *(_QWORD *)(v28 + 8);
          v8 = (uint64_t)(v37 + 1);
          if (v29 == v30)
            goto LABEL_46;
LABEL_39:
          v38 = v29 - 8 - v30;
          if (v38 < 0x58)
            goto LABEL_57;
          if ((unint64_t)(v29 - &v36[v31]) < 0x20)
            goto LABEL_57;
          v39 = (v38 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v29[-v40];
          v37 = (_QWORD *)((char *)v37 - v40);
          v42 = &v36[8 * v32 - 16];
          v43 = (__int128 *)(v29 - 16);
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              v46 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *--v37 = v46;
            }
            while (v29 != v30);
          }
          v29 = v52;
        }
        else
        {
          v36 = 0;
          v37 = (_QWORD *)(8 * v32);
          *(_QWORD *)(8 * v32) = *(_QWORD *)(v28 + 8);
          v8 = 8 * v32 + 8;
          if (v29 != v30)
            goto LABEL_39;
        }
LABEL_46:
        v52 = v37;
        v54 = &v36[8 * v35];
        if (v29)
          operator delete(v29);
        goto LABEL_4;
      }
      *(_QWORD *)v53 = *(_QWORD *)(v28 + 8);
      v8 = (uint64_t)(v29 + 8);
LABEL_4:
      v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7)
        goto LABEL_48;
    }
    if (v16 >> 61)
      goto LABEL_54;
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v13];
    *v18 = v6[1];
    v10 = (uint64_t)(v18 + 1);
    if (v9 == v11)
      goto LABEL_25;
LABEL_18:
    v19 = v9 - 8 - v11;
    if (v19 < 0x58)
      goto LABEL_58;
    if ((unint64_t)(v9 - &v17[v12]) < 0x20)
      goto LABEL_58;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v9[-v21];
    v18 = (_QWORD *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v9 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v18 = v27;
      }
      while (v9 != v11);
    }
    v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperationNameOp,mlir::Value &,std::vector<mlir::OperationName> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchTypesOp,mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t Loc;
  void *__p;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  __p = 0;
  v55 = a2;
  v56 = a1;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v51 = 0;
  v4 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v4)
  {
    v52 = operator new(8 * v4);
    v53 = (char *)v52;
    v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    v50 = (char *)__p;
    v51 = (char *)__p + 8 * v4;
    v6 = *(uint64_t **)(a4 + 24);
    v7 = &v6[2 * v4];
    while (1)
    {
      v9 = v50;
      if (v50 < v51)
      {
        *(_QWORD *)v50 = v6[1];
        v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      v11 = (char *)__p;
      v12 = v50 - (_BYTE *)__p;
      v13 = (v50 - (_BYTE *)__p) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        goto LABEL_53;
      v15 = v51 - (_BYTE *)__p;
      if ((v51 - (_BYTE *)__p) >> 2 > v14)
        v14 = v15 >> 2;
      v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16)
        break;
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      *(_QWORD *)(8 * v13) = v6[1];
      v10 = 8 * v13 + 8;
      if (v9 != v11)
        goto LABEL_18;
LABEL_25:
      __p = v18;
      v51 = &v17[8 * v16];
      if (v9)
        operator delete(v9);
LABEL_27:
      v50 = (char *)v10;
      v28 = *v6;
      v29 = v53;
      if (v53 >= v54)
      {
        v30 = v52;
        v31 = v53 - (_BYTE *)v52;
        v32 = (v53 - (_BYTE *)v52) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
LABEL_53:
          abort();
        v34 = v54 - (_BYTE *)v52;
        if ((v54 - (_BYTE *)v52) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 61)
LABEL_54:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * v35);
          v37 = &v36[8 * v32];
          *v37 = *(_QWORD *)(v28 + 8);
          v8 = (uint64_t)(v37 + 1);
          if (v29 == v30)
            goto LABEL_46;
LABEL_39:
          v38 = v29 - 8 - v30;
          if (v38 < 0x58)
            goto LABEL_57;
          if ((unint64_t)(v29 - &v36[v31]) < 0x20)
            goto LABEL_57;
          v39 = (v38 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v29[-v40];
          v37 = (_QWORD *)((char *)v37 - v40);
          v42 = &v36[8 * v32 - 16];
          v43 = (__int128 *)(v29 - 16);
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              v46 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *--v37 = v46;
            }
            while (v29 != v30);
          }
          v29 = v52;
        }
        else
        {
          v36 = 0;
          v37 = (_QWORD *)(8 * v32);
          *(_QWORD *)(8 * v32) = *(_QWORD *)(v28 + 8);
          v8 = 8 * v32 + 8;
          if (v29 != v30)
            goto LABEL_39;
        }
LABEL_46:
        v52 = v37;
        v54 = &v36[8 * v35];
        if (v29)
          operator delete(v29);
        goto LABEL_4;
      }
      *(_QWORD *)v53 = *(_QWORD *)(v28 + 8);
      v8 = (uint64_t)(v29 + 8);
LABEL_4:
      v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7)
        goto LABEL_48;
    }
    if (v16 >> 61)
      goto LABEL_54;
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v13];
    *v18 = v6[1];
    v10 = (uint64_t)(v18 + 1);
    if (v9 == v11)
      goto LABEL_25;
LABEL_18:
    v19 = v9 - 8 - v11;
    if (v19 < 0x58)
      goto LABEL_58;
    if ((unint64_t)(v9 - &v17[v12]) < 0x20)
      goto LABEL_58;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v9[-v21];
    v18 = (_QWORD *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v9 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v18 = v27;
      }
      while (v9 != v11);
    }
    v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypesOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t *)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchTypeOp,mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t Loc;
  void *__p;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  __p = 0;
  v55 = a2;
  v56 = a1;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v51 = 0;
  v4 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v4)
  {
    v52 = operator new(8 * v4);
    v53 = (char *)v52;
    v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    v50 = (char *)__p;
    v51 = (char *)__p + 8 * v4;
    v6 = *(uint64_t **)(a4 + 24);
    v7 = &v6[2 * v4];
    while (1)
    {
      v9 = v50;
      if (v50 < v51)
      {
        *(_QWORD *)v50 = v6[1];
        v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      v11 = (char *)__p;
      v12 = v50 - (_BYTE *)__p;
      v13 = (v50 - (_BYTE *)__p) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        goto LABEL_53;
      v15 = v51 - (_BYTE *)__p;
      if ((v51 - (_BYTE *)__p) >> 2 > v14)
        v14 = v15 >> 2;
      v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16)
        break;
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      *(_QWORD *)(8 * v13) = v6[1];
      v10 = 8 * v13 + 8;
      if (v9 != v11)
        goto LABEL_18;
LABEL_25:
      __p = v18;
      v51 = &v17[8 * v16];
      if (v9)
        operator delete(v9);
LABEL_27:
      v50 = (char *)v10;
      v28 = *v6;
      v29 = v53;
      if (v53 >= v54)
      {
        v30 = v52;
        v31 = v53 - (_BYTE *)v52;
        v32 = (v53 - (_BYTE *)v52) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
LABEL_53:
          abort();
        v34 = v54 - (_BYTE *)v52;
        if ((v54 - (_BYTE *)v52) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 61)
LABEL_54:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * v35);
          v37 = &v36[8 * v32];
          *v37 = *(_QWORD *)(v28 + 8);
          v8 = (uint64_t)(v37 + 1);
          if (v29 == v30)
            goto LABEL_46;
LABEL_39:
          v38 = v29 - 8 - v30;
          if (v38 < 0x58)
            goto LABEL_57;
          if ((unint64_t)(v29 - &v36[v31]) < 0x20)
            goto LABEL_57;
          v39 = (v38 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v29[-v40];
          v37 = (_QWORD *)((char *)v37 - v40);
          v42 = &v36[8 * v32 - 16];
          v43 = (__int128 *)(v29 - 16);
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              v46 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *--v37 = v46;
            }
            while (v29 != v30);
          }
          v29 = v52;
        }
        else
        {
          v36 = 0;
          v37 = (_QWORD *)(8 * v32);
          *(_QWORD *)(8 * v32) = *(_QWORD *)(v28 + 8);
          v8 = 8 * v32 + 8;
          if (v29 != v30)
            goto LABEL_39;
        }
LABEL_46:
        v52 = v37;
        v54 = &v36[8 * v35];
        if (v29)
          operator delete(v29);
        goto LABEL_4;
      }
      *(_QWORD *)v53 = *(_QWORD *)(v28 + 8);
      v8 = (uint64_t)(v29 + 8);
LABEL_4:
      v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7)
        goto LABEL_48;
    }
    if (v16 >> 61)
      goto LABEL_54;
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v13];
    *v18 = v6[1];
    v10 = (uint64_t)(v18 + 1);
    if (v9 == v11)
      goto LABEL_25;
LABEL_18:
    v19 = v9 - 8 - v11;
    if (v19 < 0x58)
      goto LABEL_58;
    if ((unint64_t)(v9 - &v17[v12]) < 0x20)
      goto LABEL_58;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v9[-v21];
    v18 = (_QWORD *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v9 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v18 = v27;
      }
      while (v9 != v11);
    }
    v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t *)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
}

void createSwitchOp<mlir::pdl_interp::SwitchAttributeOp,mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute>(uint64_t a1, uint64_t a2, mlir::MLIRContext **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t Loc;
  void *__p;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  __p = 0;
  v55 = a2;
  v56 = a1;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v50 = 0;
  v51 = 0;
  v4 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v4)
  {
    v52 = operator new(8 * v4);
    v53 = (char *)v52;
    v54 = (char *)v52 + 8 * v4;
    __p = operator new(8 * v4);
    v50 = (char *)__p;
    v51 = (char *)__p + 8 * v4;
    v6 = *(uint64_t **)(a4 + 24);
    v7 = &v6[2 * v4];
    while (1)
    {
      v9 = v50;
      if (v50 < v51)
      {
        *(_QWORD *)v50 = v6[1];
        v10 = (uint64_t)(v9 + 8);
        goto LABEL_27;
      }
      v11 = (char *)__p;
      v12 = v50 - (_BYTE *)__p;
      v13 = (v50 - (_BYTE *)__p) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        goto LABEL_53;
      v15 = v51 - (_BYTE *)__p;
      if ((v51 - (_BYTE *)__p) >> 2 > v14)
        v14 = v15 >> 2;
      v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v14;
      if (v16)
        break;
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      *(_QWORD *)(8 * v13) = v6[1];
      v10 = 8 * v13 + 8;
      if (v9 != v11)
        goto LABEL_18;
LABEL_25:
      __p = v18;
      v51 = &v17[8 * v16];
      if (v9)
        operator delete(v9);
LABEL_27:
      v50 = (char *)v10;
      v28 = *v6;
      v29 = v53;
      if (v53 >= v54)
      {
        v30 = v52;
        v31 = v53 - (_BYTE *)v52;
        v32 = (v53 - (_BYTE *)v52) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
LABEL_53:
          abort();
        v34 = v54 - (_BYTE *)v52;
        if ((v54 - (_BYTE *)v52) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 61)
LABEL_54:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * v35);
          v37 = &v36[8 * v32];
          *v37 = *(_QWORD *)(v28 + 8);
          v8 = (uint64_t)(v37 + 1);
          if (v29 == v30)
            goto LABEL_46;
LABEL_39:
          v38 = v29 - 8 - v30;
          if (v38 < 0x58)
            goto LABEL_57;
          if ((unint64_t)(v29 - &v36[v31]) < 0x20)
            goto LABEL_57;
          v39 = (v38 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v29[-v40];
          v37 = (_QWORD *)((char *)v37 - v40);
          v42 = &v36[8 * v32 - 16];
          v43 = (__int128 *)(v29 - 16);
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v29 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_57:
            do
            {
              v46 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *--v37 = v46;
            }
            while (v29 != v30);
          }
          v29 = v52;
        }
        else
        {
          v36 = 0;
          v37 = (_QWORD *)(8 * v32);
          *(_QWORD *)(8 * v32) = *(_QWORD *)(v28 + 8);
          v8 = 8 * v32 + 8;
          if (v29 != v30)
            goto LABEL_39;
        }
LABEL_46:
        v52 = v37;
        v54 = &v36[8 * v35];
        if (v29)
          operator delete(v29);
        goto LABEL_4;
      }
      *(_QWORD *)v53 = *(_QWORD *)(v28 + 8);
      v8 = (uint64_t)(v29 + 8);
LABEL_4:
      v53 = (char *)v8;
      v6 += 2;
      if (v6 == v7)
        goto LABEL_48;
    }
    if (v16 >> 61)
      goto LABEL_54;
    v17 = operator new(8 * v16);
    v18 = &v17[8 * v13];
    *v18 = v6[1];
    v10 = (uint64_t)(v18 + 1);
    if (v9 == v11)
      goto LABEL_25;
LABEL_18:
    v19 = v9 - 8 - v11;
    if (v19 < 0x58)
      goto LABEL_58;
    if ((unint64_t)(v9 - &v17[v12]) < 0x20)
      goto LABEL_58;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v9[-v21];
    v18 = (_QWORD *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v9 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_58:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v18 = v27;
      }
      while (v9 != v11);
    }
    v9 = (char *)__p;
    goto LABEL_25;
  }
LABEL_48:
  Loc = mlir::Value::getLoc((mlir::Value *)&v56);
  mlir::OpBuilder::create<mlir::pdl_interp::SwitchAttributeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(a3, Loc, &v56, (uint64_t *)&v52, &v55, (uint64_t *)&__p);
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,`anonymous namespace'::PatternLowering::generate(mlir::pdl_to_pdl_interp::SwitchNode *,mlir::Block *,mlir::Value)::$_0 &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  BOOL v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  int64_t v126;
  int64_t v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  int64_t v142;
  unsigned int *v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  uint64_t v165;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v96 = *(a2 - 1);
        v97 = *v10;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)a3 + 72) + 16 * v96) + 8) > *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)a3 + 72) + 16 * v97) + 8))
        {
          *v10 = v96;
          goto LABEL_171;
        }
        return result;
      case 3:
        v98 = *(_QWORD *)(**(_QWORD **)a3 + 72);
        v97 = *v10;
        v99 = v10[1];
        v100 = *(_DWORD *)(*(_QWORD *)(v98 + 16 * v99) + 8);
        v101 = *(_QWORD *)(v98 + 16 * v97);
        v102 = *(a2 - 1);
        v103 = *(_DWORD *)(*(_QWORD *)(v98 + 16 * v102) + 8);
        if (v100 <= *(_DWORD *)(v101 + 8))
        {
          if (v103 > v100)
          {
            v10[1] = v102;
            *(a2 - 1) = v99;
            v158 = *v10;
            v157 = v10[1];
            if (*(_DWORD *)(*(_QWORD *)(v98 + 16 * v157) + 8) > *(_DWORD *)(*(_QWORD *)(v98 + 16 * v158) + 8))
            {
              *v10 = v157;
              v10[1] = v158;
            }
          }
        }
        else
        {
          if (v103 <= v100)
          {
            *v10 = v99;
            v10[1] = v97;
            v165 = *(a2 - 1);
            if (*(_DWORD *)(*(_QWORD *)(v98 + 16 * v165) + 8) <= *(_DWORD *)(v101 + 8))
              return result;
            v10[1] = v165;
          }
          else
          {
            *v10 = v102;
          }
LABEL_171:
          *(a2 - 1) = v97;
        }
        return result;
      case 4:
      case 5:
        v104 = v10 + 2;
        v105 = v10 + 3;
        v106 = *(a2 - 1);
        v107 = v9[3];
        v108 = *(_QWORD *)(**(_QWORD **)a3 + 72);
        if (*(_DWORD *)(*(_QWORD *)(v108 + 16 * v106) + 8) > *(_DWORD *)(*(_QWORD *)(v108 + 16 * v107) + 8))
        {
          *v105 = v106;
          *(a2 - 1) = v107;
          v109 = *v105;
          v110 = *v104;
          v111 = *(_QWORD *)(v108 + 16 * v109);
          if (*(_DWORD *)(v111 + 8) > *(_DWORD *)(*(_QWORD *)(v108 + 16 * v110) + 8))
          {
            *v104 = v109;
            *v105 = v110;
            v112 = v9[1];
            if (*(_DWORD *)(v111 + 8) > *(_DWORD *)(*(_QWORD *)(v108 + 16 * v112) + 8))
            {
              v9[1] = v109;
              v9[2] = v112;
              v113 = *v9;
              if (*(_DWORD *)(v111 + 8) > *(_DWORD *)(*(_QWORD *)(v108 + 16 * v113) + 8))
              {
                *v9 = v109;
                v9[1] = v113;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v124 = (unint64_t)(v12 - 2) >> 1;
              v125 = *(_QWORD *)a3;
              v126 = v124;
              do
              {
                v127 = v126;
                if (v124 >= v126)
                {
                  v128 = (2 * v126) | 1;
                  v129 = &v10[v128];
                  v130 = *v129;
                  if (2 * v127 + 2 >= v12)
                  {
                    v131 = *(_QWORD *)(*(_QWORD *)v125 + 72);
                  }
                  else
                  {
                    v131 = *(_QWORD *)(*(_QWORD *)v125 + 72);
                    if (*(unsigned int *)(*(_QWORD *)(v131 + 16 * v130) + 8) > (unint64_t)*(unsigned int *)(*(_QWORD *)(v131 + 16 * v129[1]) + 8))
                    {
                      v130 = v129[1];
                      ++v129;
                      v128 = 2 * v127 + 2;
                    }
                  }
                  v132 = &v10[v127];
                  v133 = *v132;
                  result = *(_QWORD *)(v131 + 16 * v133);
                  if (*(_DWORD *)(*(_QWORD *)(v131 + 16 * v130) + 8) <= *(_DWORD *)(result + 8))
                  {
                    do
                    {
                      v134 = v129;
                      *v132 = v130;
                      if (v124 < v128)
                        break;
                      v135 = (2 * v128) | 1;
                      v129 = &v10[v135];
                      v136 = 2 * v128 + 2;
                      v130 = *v129;
                      if (v136 < v12
                        && *(unsigned int *)(*(_QWORD *)(v131 + 16 * v130) + 8) > (unint64_t)*(unsigned int *)(*(_QWORD *)(v131 + 16 * v129[1]) + 8))
                      {
                        v130 = v129[1];
                        ++v129;
                        v135 = v136;
                      }
                      v132 = v134;
                      v128 = v135;
                    }
                    while (*(_DWORD *)(*(_QWORD *)(v131 + 16 * v130) + 8) <= *(_DWORD *)(result + 8));
                    *v134 = v133;
                    v125 = *(_QWORD *)a3;
                  }
                }
                v126 = v127 - 1;
              }
              while (v127);
              v137 = (unint64_t)v11 >> 2;
              do
              {
                v139 = 0;
                v140 = *v10;
                v141 = *(_QWORD *)a3;
                v142 = (unint64_t)(v137 - 2) >> 1;
                v143 = v10;
                do
                {
                  while (1)
                  {
                    v146 = &v143[v139];
                    v147 = v146[1];
                    v145 = v146 + 1;
                    v144 = v147;
                    v148 = (2 * v139) | 1;
                    v139 = 2 * v139 + 2;
                    if (v139 < v137)
                      break;
                    v139 = v148;
                    *v143 = v144;
                    v143 = v145;
                    if (v148 > v142)
                      goto LABEL_152;
                  }
                  result = v145[1];
                  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v141 + 72) + 16 * v144) + 8) <= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v141 + 72) + 16 * result) + 8))
                  {
                    v139 = v148;
                  }
                  else
                  {
                    LODWORD(v144) = v145[1];
                    ++v145;
                  }
                  *v143 = v144;
                  v143 = v145;
                }
                while (v139 <= v142);
LABEL_152:
                if (v145 == --a2)
                {
                  *v145 = v140;
                }
                else
                {
                  *v145 = *a2;
                  *a2 = v140;
                  v149 = (char *)v145 - (char *)v10 + 4;
                  if (v149 >= 5)
                  {
                    v150 = (((unint64_t)v149 >> 2) - 2) >> 1;
                    v151 = &v10[v150];
                    v152 = *v151;
                    v153 = *v145;
                    v154 = *(_QWORD *)(**(_QWORD **)a3 + 72);
                    v155 = *(_QWORD *)(v154 + 16 * v153);
                    if (*(_DWORD *)(*(_QWORD *)(v154 + 16 * v152) + 8) > *(_DWORD *)(v155 + 8))
                    {
                      do
                      {
                        v156 = v151;
                        *v145 = v152;
                        if (!v150)
                          break;
                        v150 = (v150 - 1) >> 1;
                        v151 = &v10[v150];
                        v152 = *v151;
                        result = *(unsigned int *)(v155 + 8);
                        v145 = v156;
                      }
                      while (*(_DWORD *)(*(_QWORD *)(v154 + 16 * v152) + 8) > result);
                      *v156 = v153;
                    }
                  }
                }
              }
              while (v137-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = *(_QWORD *)(**(_QWORD **)a3 + 72);
          v16 = *(a2 - 1);
          v17 = *(_DWORD *)(*(_QWORD *)(v15 + 16 * v16) + 8);
          if ((unint64_t)v11 < 0x201)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(_DWORD *)(*(_QWORD *)(v15 + 16 * v22) + 8);
            v25 = *(_QWORD *)(v15 + 16 * v23);
            if (v24 <= *(_DWORD *)(v25 + 8))
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v28 = *v10;
                v29 = *v14;
                if (*(_DWORD *)(*(_QWORD *)(v15 + 16 * v28) + 8) > *(_DWORD *)(*(_QWORD *)(v15 + 16 * v29) + 8))
                {
                  *v14 = v28;
                  *v10 = v29;
                  --a4;
                  v30 = v29;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v43 = *(a2 - 1);
              if (*(_DWORD *)(*(_QWORD *)(v15 + 16 * v43) + 8) <= *(_DWORD *)(v25 + 8))
                goto LABEL_32;
              *v10 = v43;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v30 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(_DWORD *)(*(_QWORD *)(v15 + 16 * v18) + 8);
          v21 = *(_QWORD *)(v15 + 16 * v19);
          if (v20 <= *(_DWORD *)(v21 + 8))
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v14;
              v27 = *v10;
              if (*(_DWORD *)(*(_QWORD *)(v15 + 16 * v26) + 8) > *(_DWORD *)(*(_QWORD *)(v15 + 16 * v27) + 8))
              {
                *v10 = v26;
                *v14 = v27;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v31 = *(a2 - 1);
              if (*(_DWORD *)(*(_QWORD *)(v15 + 16 * v31) + 8) <= *(_DWORD *)(v21 + 8))
                goto LABEL_23;
              *v14 = v31;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v32 = &v10[v13];
          v35 = *(v32 - 1);
          v33 = v32 - 1;
          v34 = v35;
          v36 = v10[1];
          v37 = *(_DWORD *)(*(_QWORD *)(v15 + 16 * v35) + 8);
          v38 = *(_QWORD *)(v15 + 16 * v36);
          v39 = *(a2 - 2);
          v40 = *(_DWORD *)(*(_QWORD *)(v15 + 16 * v39) + 8);
          if (v37 <= *(_DWORD *)(v38 + 8))
          {
            if (v40 > v37)
            {
              *v33 = v39;
              *(a2 - 2) = v34;
              v41 = *v33;
              v42 = v10[1];
              if (*(_DWORD *)(*(_QWORD *)(v15 + 16 * v41) + 8) > *(_DWORD *)(*(_QWORD *)(v15 + 16 * v42) + 8))
              {
                v10[1] = v41;
                *v33 = v42;
              }
            }
          }
          else
          {
            if (v40 <= v37)
            {
              v10[1] = v34;
              *v33 = v36;
              v44 = *(a2 - 2);
              if (*(_DWORD *)(*(_QWORD *)(v15 + 16 * v44) + 8) <= *(_DWORD *)(v38 + 8))
                goto LABEL_37;
              *v33 = v44;
            }
            else
            {
              v10[1] = v39;
            }
            *(a2 - 2) = v36;
          }
LABEL_37:
          v45 = &v10[v13];
          v48 = v45[1];
          v46 = v45 + 1;
          v47 = v48;
          v49 = v10[2];
          v50 = *(_DWORD *)(*(_QWORD *)(v15 + 16 * v48) + 8);
          v51 = *(_QWORD *)(v15 + 16 * v49);
          v52 = *(a2 - 3);
          v53 = *(_DWORD *)(*(_QWORD *)(v15 + 16 * v52) + 8);
          if (v50 <= *(_DWORD *)(v51 + 8))
          {
            if (v53 > v50)
            {
              *v46 = v52;
              *(a2 - 3) = v47;
              v54 = *v46;
              v55 = v10[2];
              if (*(_DWORD *)(*(_QWORD *)(v15 + 16 * v54) + 8) > *(_DWORD *)(*(_QWORD *)(v15 + 16 * v55) + 8))
              {
                v10[2] = v54;
                *v46 = v55;
              }
            }
          }
          else
          {
            if (v53 <= v50)
            {
              v10[2] = v47;
              *v46 = v49;
              v56 = *(a2 - 3);
              if (*(_DWORD *)(*(_QWORD *)(v15 + 16 * v56) + 8) <= *(_DWORD *)(v51 + 8))
                goto LABEL_46;
              *v46 = v56;
            }
            else
            {
              v10[2] = v52;
            }
            *(a2 - 3) = v49;
          }
LABEL_46:
          v57 = *v14;
          v58 = *v33;
          v59 = *(_DWORD *)(*(_QWORD *)(v15 + 16 * v57) + 8);
          v60 = *(_QWORD *)(v15 + 16 * v58);
          v61 = *v46;
          v62 = *(_QWORD *)(v15 + 16 * v61);
          result = *(unsigned int *)(v62 + 8);
          if (v59 > *(_DWORD *)(v60 + 8))
          {
            if (result <= v59)
            {
              *v33 = v57;
              *v14 = v58;
              v33 = v14;
              LODWORD(v57) = v61;
              if (*(_DWORD *)(v62 + 8) <= *(_DWORD *)(v60 + 8))
              {
                v63 = *v10;
                *v10 = v58;
                *v14 = v63;
                --a4;
                v30 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (result <= v59)
            goto LABEL_54;
          *v14 = v61;
          *v46 = v57;
          v46 = v14;
          LODWORD(v57) = v58;
          if (*(_DWORD *)(v62 + 8) > *(_DWORD *)(v60 + 8))
          {
LABEL_53:
            *v33 = v61;
            *v46 = v58;
LABEL_54:
            v64 = *v10;
            *v10 = v57;
            *v14 = v64;
            --a4;
            v30 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v65 = *(_QWORD *)(v15 + 16 * v30);
            v66 = *(_DWORD *)(v65 + 8);
            if (*(_DWORD *)(*(_QWORD *)(v15 + 16 * *(v10 - 1)) + 8) > v66)
              goto LABEL_56;
            if (v66 <= *(_DWORD *)(*(_QWORD *)(v15 + 16 * *(a2 - 1)) + 8))
            {
              v87 = v10 + 1;
              do
              {
                v10 = v87;
                if (v87 >= a2)
                  break;
                ++v87;
              }
              while (v66 <= *(_DWORD *)(*(_QWORD *)(v15 + 16 * *v10) + 8));
            }
            else
            {
              do
              {
                v86 = v10[1];
                ++v10;
              }
              while (v66 <= *(_DWORD *)(*(_QWORD *)(v15 + 16 * v86) + 8));
            }
            v88 = a2;
            if (v10 < a2)
            {
              v88 = a2;
              do
                v89 = *--v88;
              while (v66 > *(_DWORD *)(*(_QWORD *)(v15 + 16 * v89) + 8));
            }
            if (v10 < v88)
            {
              v90 = *v10;
              v91 = *v88;
              do
              {
                *v10 = v91;
                *v88 = v90;
                v92 = *(_DWORD *)(v65 + 8);
                do
                {
                  v93 = v10[1];
                  ++v10;
                  v90 = v93;
                }
                while (v92 <= *(_DWORD *)(*(_QWORD *)(v15 + 16 * v93) + 8));
                do
                {
                  v94 = *--v88;
                  v91 = v94;
                }
                while (v92 > *(_DWORD *)(*(_QWORD *)(v15 + 16 * v94) + 8));
              }
              while (v10 < v88);
            }
            v95 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v95;
            a5 = 0;
            *v95 = v30;
            continue;
          }
          v85 = *v10;
          *v10 = v61;
          *v14 = v85;
          --a4;
          v30 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v67 = 0;
          v68 = *(_QWORD *)(**(_QWORD **)a3 + 72);
          v69 = *(_QWORD *)(v68 + 16 * v30);
          v70 = *(_DWORD *)(v69 + 8);
          do
            v71 = v10[++v67];
          while (*(_DWORD *)(*(_QWORD *)(v68 + 16 * v71) + 8) > v70);
          v72 = &v10[v67];
          v73 = a2;
          if (v67 == 1)
          {
            v73 = a2;
            do
            {
              if (v72 >= v73)
                break;
              v75 = *--v73;
            }
            while (*(_DWORD *)(*(_QWORD *)(v68 + 16 * v75) + 8) <= v70);
          }
          else
          {
            do
              v74 = *--v73;
            while (*(_DWORD *)(*(_QWORD *)(v68 + 16 * v74) + 8) <= v70);
          }
          if (v72 >= v73)
          {
            v83 = v72 - 1;
            if (v72 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v76 = *v73;
            v77 = v71;
            v78 = v72;
            v79 = v73;
            do
            {
              *v78 = v76;
              *v79 = v77;
              v80 = *(_DWORD *)(v69 + 8);
              do
              {
                v81 = v78[1];
                ++v78;
                v77 = v81;
              }
              while (*(_DWORD *)(*(_QWORD *)(v68 + 16 * v81) + 8) > v80);
              do
              {
                v82 = *--v79;
                v76 = v82;
              }
              while (*(_DWORD *)(*(_QWORD *)(v68 + 16 * v82) + 8) <= v80);
            }
            while (v78 < v79);
            v83 = v78 - 1;
            if (v78 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v83;
          }
LABEL_74:
          *v83 = v30;
          if (v72 < v73)
            goto LABEL_77;
          v10 = v83 + 1;
          if (!(_DWORD)result)
          {
            if (v84)
              continue;
LABEL_77:
            a5 = 0;
            v10 = v83 + 1;
            continue;
          }
          a2 = v83;
          if (v84)
            return result;
          goto LABEL_2;
        }
        v114 = *(_QWORD *)a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v115 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v116 = 0;
              v117 = *(_QWORD *)(*(_QWORD *)v114 + 72);
              v118 = v10;
              do
              {
                v121 = *v118;
                v120 = v118[1];
                v118 = v115;
                v122 = *(_QWORD *)(v117 + 16 * v120);
                if (*(_DWORD *)(v122 + 8) > *(_DWORD *)(*(_QWORD *)(v117 + 16 * v121) + 8))
                {
                  v123 = v116;
                  do
                  {
                    *(unsigned int *)((char *)v10 + v123 + 4) = v121;
                    if (!v123)
                    {
                      v119 = v10;
                      goto LABEL_117;
                    }
                    v121 = *(unsigned int *)((char *)v10 + v123 - 4);
                    v123 -= 4;
                  }
                  while (*(_DWORD *)(v122 + 8) > *(_DWORD *)(*(_QWORD *)(v117 + 16 * v121) + 8));
                  v119 = (unsigned int *)((char *)v10 + v123 + 4);
LABEL_117:
                  *v119 = v120;
                }
                v115 = v118 + 1;
                v116 += 4;
              }
              while (v118 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v159 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v160 = *(_QWORD *)(*(_QWORD *)v114 + 72);
            do
            {
              v162 = *v9;
              v161 = v9[1];
              v9 = v159;
              v163 = *(_QWORD *)(v160 + 16 * v161);
              if (*(_DWORD *)(v163 + 8) > *(_DWORD *)(*(_QWORD *)(v160 + 16 * v162) + 8))
              {
                v164 = v9;
                do
                {
                  *v164 = v162;
                  v162 = *(v164 - 2);
                  --v164;
                }
                while (*(_DWORD *)(v163 + 8) > *(_DWORD *)(*(_QWORD *)(v160 + 16 * v162) + 8));
                *v164 = v161;
              }
              v159 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::PatternLowering::generate(mlir::pdl_to_pdl_interp::SwitchNode *,mlir::Block *,mlir::Value)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _DWORD *v26;
  _DWORD *v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)a3 + 72) + 16 * v8) + 8) > *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)a3 + 72) + 16 * v9) + 8))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *(_QWORD *)(**(_QWORD **)a3 + 72);
      v11 = *a1;
      v12 = a1[1];
      v13 = *(_DWORD *)(*(_QWORD *)(v10 + 16 * v12) + 8);
      v14 = *(_QWORD *)(v10 + 16 * v11);
      v15 = *(a2 - 1);
      v16 = *(_DWORD *)(*(_QWORD *)(v10 + 16 * v15) + 8);
      if (v13 <= *(_DWORD *)(v14 + 8))
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          v41 = *a1;
          v40 = a1[1];
          if (*(_DWORD *)(*(_QWORD *)(v10 + 16 * v40) + 8) > *(_DWORD *)(*(_QWORD *)(v10 + 16 * v41) + 8))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v50 = *(a2 - 1);
        if (*(_DWORD *)(*(_QWORD *)(v10 + 16 * v50) + 8) > *(_DWORD *)(v14 + 8))
        {
          a1[1] = v50;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      return 1;
    case 5:
      v30 = a1 + 2;
      v31 = a1 + 3;
      v32 = *(a2 - 1);
      v33 = a1[3];
      v34 = *(_QWORD *)(**(_QWORD **)a3 + 72);
      if (*(_DWORD *)(*(_QWORD *)(v34 + 16 * v32) + 8) <= *(_DWORD *)(*(_QWORD *)(v34 + 16 * v33) + 8))
        return 1;
      *v31 = v32;
      *(a2 - 1) = v33;
      v35 = *v31;
      v36 = *v30;
      v37 = *(_QWORD *)(v34 + 16 * v35);
      if (*(_DWORD *)(v37 + 8) <= *(_DWORD *)(*(_QWORD *)(v34 + 16 * v36) + 8))
        return 1;
      *v30 = v35;
      *v31 = v36;
      v38 = a1[1];
      if (*(_DWORD *)(v37 + 8) <= *(_DWORD *)(*(_QWORD *)(v34 + 16 * v38) + 8))
        return 1;
      a1[1] = v35;
      a1[2] = v38;
      v39 = *a1;
      if (*(_DWORD *)(v37 + 8) <= *(_DWORD *)(*(_QWORD *)(v34 + 16 * v39) + 8))
        return 1;
      *a1 = v35;
      a1[1] = v39;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *(_QWORD *)(**(_QWORD **)a3 + 72);
      v21 = *a1;
      v22 = *(_DWORD *)(*(_QWORD *)(v20 + 16 * v19) + 8);
      v23 = *(_QWORD *)(v20 + 16 * v21);
      v24 = *(_QWORD *)(v20 + 16 * v17);
      v25 = *(_DWORD *)(v24 + 8);
      if (v22 <= *(_DWORD *)(v23 + 8))
      {
        if (v25 <= v22)
          goto LABEL_25;
        a1[1] = v17;
        *v18 = v19;
        v28 = *(_DWORD *)(v24 + 8);
        v29 = *(_DWORD *)(v23 + 8);
        v26 = a1;
        v27 = a1 + 1;
      }
      else
      {
        v26 = a1;
        v27 = a1 + 2;
        if (v25 > v22)
          goto LABEL_24;
        *a1 = v19;
        a1[1] = v21;
        v28 = *(_DWORD *)(v24 + 8);
        v29 = *(_DWORD *)(v23 + 8);
        v26 = a1 + 1;
        v27 = a1 + 2;
      }
      if (v28 <= v29)
        goto LABEL_25;
LABEL_24:
      *v26 = v17;
      *v27 = v21;
LABEL_25:
      v42 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v43 = 0;
      v44 = 12;
      break;
  }
  while (1)
  {
    v45 = *v42;
    v46 = *v18;
    v47 = *(_QWORD *)(v20 + 16 * v45);
    if (*(_DWORD *)(v47 + 8) > *(_DWORD *)(*(_QWORD *)(v20 + 16 * v46) + 8))
      break;
LABEL_34:
    v18 = v42;
    v44 += 4;
    if (++v42 == a2)
      return 1;
  }
  v48 = v44;
  do
  {
    *(unsigned int *)((char *)a1 + v48) = v46;
    v49 = v48 - 4;
    if (v48 == 4)
    {
      *a1 = v45;
      if (++v43 != 8)
        goto LABEL_34;
      return v42 + 1 == a2;
    }
    v46 = *(unsigned int *)((char *)a1 + v48 - 8);
    v48 -= 4;
  }
  while (*(_DWORD *)(v47 + 8) > *(_DWORD *)(*(_QWORD *)(v20 + 16 * v46) + 8));
  *(unsigned int *)((char *)a1 + v49) = v45;
  if (++v43 != 8)
    goto LABEL_34;
  return v42 + 1 == a2;
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::PatternLowering::generate(mlir::pdl_to_pdl_interp::SwitchNode *,mlir::Block *,mlir::Value)::$_0 &,unsigned int *>(_DWORD *result, _DWORD *a2, unsigned int *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a2;
  v6 = *result;
  v7 = *(_DWORD *)(*(_QWORD *)(a5 + 16 * v5) + 8);
  v8 = *(_QWORD *)(a5 + 16 * v6);
  v9 = *a3;
  v10 = *(_DWORD *)(*(_QWORD *)(a5 + 16 * *a3) + 8);
  if (v7 <= *(_DWORD *)(v8 + 8))
  {
    if (v10 <= v7)
    {
      v6 = *a3;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    v11 = *a2;
    v12 = *result;
    if (*(_DWORD *)(*(_QWORD *)(a5 + 16 * v11) + 8) <= *(_DWORD *)(*(_QWORD *)(a5 + 16 * v12) + 8))
    {
      v6 = v5;
      v9 = v5;
      goto LABEL_14;
    }
    *result = v11;
    *a2 = v12;
    v6 = *a3;
  }
  else
  {
    if (v10 <= v7)
    {
      *result = v5;
      *a2 = v6;
      v9 = *a3;
      if (*(_DWORD *)(*(_QWORD *)(a5 + 16 * *a3) + 8) <= *(_DWORD *)(v8 + 8))
      {
        v6 = *a3;
        goto LABEL_14;
      }
      *a2 = v9;
    }
    else
    {
      *result = v9;
    }
    *a3 = v6;
  }
  v9 = v6;
LABEL_14:
  v13 = *a4;
  if (*(_DWORD *)(*(_QWORD *)(a5 + 16 * v13) + 8) > *(_DWORD *)(*(_QWORD *)(a5 + 16 * v6) + 8))
  {
    *a3 = v13;
    *a4 = v9;
    v14 = *a3;
    v15 = *a2;
    if (*(_DWORD *)(*(_QWORD *)(a5 + 16 * v14) + 8) > *(_DWORD *)(*(_QWORD *)(a5 + 16 * v15) + 8))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *result;
      if (*(_DWORD *)(*(_QWORD *)(a5 + 16 * v16) + 8) > *(_DWORD *)(*(_QWORD *)(a5 + 16 * v17) + 8))
      {
        *result = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,mlir::Block *,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,mlir::Block *>,0u>>::try_emplace<mlir::Block *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned int v35;

  v6 = *a2;
  v7 = *(_DWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_24;
  v8 = *(_QWORD *)a1;
  v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  v10 = (_QWORD *)(*(_QWORD *)a1 + 16 * v9);
  v11 = *v10;
  if (v6 == *v10)
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  v20 = 0;
  v21 = 1;
  while (v11 != -4096)
  {
    if (v20)
      v22 = 0;
    else
      v22 = v11 == -8192;
    if (v22)
      v20 = v10;
    v23 = v9 + v21++;
    v9 = v23 & (v7 - 1);
    v10 = (_QWORD *)(v8 + 16 * v9);
    v11 = *v10;
    if (v6 == *v10)
      return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  }
  v24 = (uint64_t)(v20 ? v20 : v10);
  v25 = *(_DWORD *)(a1 + 8);
  if (4 * v25 + 4 < 3 * v7)
  {
    if (v7 + ~v25 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_24:
    v7 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1, v7);
  v26 = *(_DWORD *)(a1 + 16) - 1;
  v27 = v26 & ((v6 >> 4) ^ (v6 >> 9));
  v24 = *(_QWORD *)a1 + 16 * v27;
  v28 = *(_QWORD *)v24;
  if (v6 == *(_QWORD *)v24)
  {
LABEL_26:
    ++*(_DWORD *)(a1 + 8);
    if (v6 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
  v32 = 0;
  v33 = 1;
  while (v28 != -4096)
  {
    if (v32)
      v34 = 0;
    else
      v34 = v28 == -8192;
    if (v34)
      v32 = v24;
    v35 = v27 + v33++;
    v27 = v35 & v26;
    v24 = *(_QWORD *)a1 + 16 * (v35 & v26);
    v28 = *(_QWORD *)v24;
    if (v6 == *(_QWORD *)v24)
      goto LABEL_26;
  }
  if (v32)
    v24 = v32;
LABEL_6:
  v13 = *(_QWORD *)v24;
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(_QWORD *)v24 = v6;
  *(_DWORD *)(v24 + 8) = 0;
  v14 = (uint64_t *)(a1 + 24);
  v15 = *(unsigned int *)(a1 + 32);
  v16 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v24 + 8) = v15;
  if (v15 >= v16)
  {
    v29 = *a2;
    v30 = *a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v14, (void *)(a1 + 40), v15 + 1, 16);
    v31 = (_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 32));
    *v31 = v29;
    v31[1] = v30;
    LODWORD(v15) = *(_DWORD *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v17 = *v14;
    v18 = (uint64_t *)(*v14 + 16 * v15);
    *v18 = *a2;
    v18[1] = *a3;
  }
  v19 = v15 + 1;
  *(_DWORD *)(a1 + 32) = v19;
  return v17 + 16 * v19 - 16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperandCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ZinIrHalH13g *v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_operand_count", (const unsigned __int8 *)0x1F, Context);
  if (!v14)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_operand_count";
    v25[3] = 31;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = (a4[1] - *a4) >> 2;
  v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchOperandCountOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperandCountOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchResultCountOp,mlir::Value &,std::vector<int> &,mlir::Block *&,std::vector<mlir::Block *> &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ZinIrHalH13g *v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_result_count", (const unsigned __int8 *)0x1E, Context);
  if (!v14)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_result_count";
    v25[3] = 30;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = (a4[1] - *a4) >> 2;
  v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchResultCountOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchResultCountOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchOperationNameOp,mlir::Value &,std::vector<mlir::OperationName> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  ZinIrHalH13g *v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_operation_name", (const unsigned __int8 *)0x20, Context);
  if (!v14)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_operation_name";
    v25[3] = 32;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  v15 = *a3;
  v16 = *(uint64_t **)a4;
  v17 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3;
  v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchOperationNameOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperationNameOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypesOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ZinIrHalH13g *v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_types", (const unsigned __int8 *)0x17, Context);
  if (!v14)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_types";
    v25[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = (a4[1] - *a4) >> 3;
  v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchTypesOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypesOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchTypeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ZinIrHalH13g *v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_type", (const unsigned __int8 *)0x16, Context);
  if (!v14)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_type";
    v25[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = (a4[1] - *a4) >> 3;
  v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchTypeOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypeOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::SwitchAttributeOp,mlir::Value &,std::vector<mlir::Attribute> &,mlir::Block *&,std::vector<mlir::Block *> &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ZinIrHalH13g *v19;
  ZinIrHalH13g *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27[2];
  _QWORD v28[39];

  v28[38] = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.switch_attribute", (const unsigned __int8 *)0x1B, Context);
  if (!v14)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"pdl_interp.switch_attribute";
    v25[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v13);
  v15 = *a3;
  v16 = *a4;
  v17 = (a4[1] - *a4) >> 3;
  v18 = *a5;
  mlir::BlockRange::BlockRange(v27, *a6, (a6[1] - *a6) >> 3);
  mlir::pdl_interp::SwitchAttributeOp::build(a1, (uint64_t)v28, v15, v16, v17, v18, v27[0], v27[1]);
  v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchAttributeOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v20;
}

double mlir::Region::getOps<mlir::pdl::OperationOp>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  ZinIrHalH13g *v4;
  uint64_t (*v5)(void);
  __int128 v6;
  double result;
  _BYTE v8[32];
  __int128 v9;
  ZinIrHalH13g *v10;
  __int128 v11;
  _BYTE v12[32];
  BOOL (*i)(uint64_t);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  BOOL (*v17)(uint64_t);
  __int128 v18;
  uint64_t v19;

  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&v12[8] = v18;
  v4 = v10;
  *(_QWORD *)v12 = v10;
  v11 = v9;
  *(_QWORD *)&v12[24] = v19;
  for (i = mlir::detail::op_filter_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::filter;
        *(_QWORD *)v12 != *(_QWORD *)&v12[24];
        v4 = *(ZinIrHalH13g **)v12)
  {
    v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if ((v5() & 1) != 0)
      break;
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  v14 = v11;
  v15 = *(_OWORD *)v12;
  v16 = *(_OWORD *)&v12[16];
  v17 = i;
  *(_QWORD *)v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(_QWORD *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = mlir::detail::op_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::unwrap;
  *(_QWORD *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::filter;
  *(_QWORD *)(a2 + 120) = mlir::detail::op_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::unwrap;
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::RecordMatchOp,std::vector<mlir::Value> &,llvm::ArrayRef<mlir::Value>,mlir::SymbolRefAttr &,mlir::StringAttr &,mlir::ArrayAttr &,mlir::IntegerAttr,mlir::Block *&>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t *Context;
  uint64_t v18;
  char v19;
  ZinIrHalH13g *v20;
  ZinIrHalH13g *v21;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  uint64_t v26[4];
  __int16 v27;
  unint64_t v28[2];
  unint64_t v29[2];
  _QWORD v30[39];

  v30[38] = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  v18 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.record_match", (const unsigned __int8 *)0x17, Context);
  if (!v19)
  {
    v27 = 1283;
    v26[2] = (uint64_t)"pdl_interp.record_match";
    v26[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v25 = 259;
    llvm::operator+(v26, (uint64_t *)&v24, (uint64_t)v30);
    llvm::report_fatal_error((llvm::Twine *)v30, 1);
  }
  mlir::OperationState::OperationState(v30, a2, v18);
  mlir::ValueRange::ValueRange(v29, *a3, (a3[1] - *a3) >> 3);
  mlir::ValueRange::ValueRange(v28, *(_QWORD *)a4, *(_QWORD *)(a4 + 8));
  mlir::pdl_interp::RecordMatchOp::build((uint64_t)a1, (uint64_t)v30, v29[0], v29[1], v28[0], v28[1], *a5, *a6, *a7, *a8, *a9);
  v20 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v30);
  if (*(_UNKNOWN **)(*((_QWORD *)v20 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::RecordMatchOp,void>::id)
    v21 = v20;
  else
    v21 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v30);
  return v21;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::FuncOp,char const(&)[23],mlir::FunctionType>(mlir::StringAttr **a1, uint64_t a2, const char *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  size_t v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _QWORD v20[39];

  v20[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.func", (const unsigned __int8 *)0xF, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"pdl_interp.func";
    v18[3] = 15;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  v11 = strlen(a3);
  mlir::pdl_interp::FuncOp::build(a1, (uint64_t)v20, (uint64_t)a3, v11, *a4, 0, 0);
  v12 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

_QWORD *`anonymous namespace'::PatternLowering::generateRewriter(mlir::pdl::PatternOp,llvm::SmallVectorImpl<mlir::pdl_to_pdl_interp::Position *> &)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t DefiningOp;
  void *v9;
  _QWORD *v10;
  ZinIrHalH13g *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t Loc;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t FastmathAttr;
  unint64_t v27;
  _QWORD *v28;

  v27 = a2;
  v28 = 0;
  v4 = *(uint64_t **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(*(uint64_t **)a1, &v27, &v28);
  v6 = v28;
  if ((v5 & 1) != 0)
  {
    result = (_QWORD *)v28[1];
    if (result)
      return result;
  }
  else
  {
    v6 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v4, (uint64_t)&v27, &v27, v28);
    *v6 = v27;
    v6[1] = 0;
  }
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v27);
  v9 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeOp,void>::id)
    v10 = (_QWORD *)DefiningOp;
  else
    v10 = 0;
  v28 = v10;
  if (v10)
  {
    FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v28);
    if (FastmathAttr)
    {
      v11 = mlir::OpBuilder::create<mlir::pdl_interp::CreateAttributeOp,mlir::Attribute const&>((mlir::MLIRContext **)v3, v28[3], &FastmathAttr);
LABEL_23:
      result = (_QWORD *)((char *)v11 - 16);
      v6[1] = result;
      return result;
    }
  }
  else
  {
    if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
      v12 = DefiningOp;
    else
      v12 = 0;
    FastmathAttr = v12;
    if (v12)
    {
      v25 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&FastmathAttr);
      if (v25)
      {
        v11 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypeOp,mlir::TypeAttr &>((mlir::MLIRContext **)v3, *(_QWORD *)(FastmathAttr + 24), &v25);
        goto LABEL_23;
      }
    }
    else
    {
      if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id)
        v13 = DefiningOp;
      else
        v13 = 0;
      v25 = v13;
      if (v13)
      {
        v24 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v25);
        if (v24)
        {
          v14 = *(_QWORD *)(v25 + 24);
          v23 = *(_QWORD *)(v25 - 8) & 0xFFFFFFFFFFFFFFF8;
          v11 = mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::pdl::RangeType,mlir::ArrayAttr &>((mlir::OpBuilder *)v3, v14, (uint64_t *)&v23, &v24);
          goto LABEL_23;
        }
      }
    }
  }
  v28 = 0;
  v15 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(v3 + 200), &v27, &v28))v15 = v28[1];
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(unsigned int *)(v16 + 8);
  if (v17 >= *(_DWORD *)(v16 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(a1 + 16), (void *)(v16 + 16), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(v16 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = v15;
  ++*(_DWORD *)(v16 + 8);
  v18 = **(_QWORD **)(a1 + 24);
  v19 = *(_QWORD *)(((v18
                    + 16 * (((unint64_t)*(unsigned int *)(v18 + 44) >> 23) & 1)
                    + (((unint64_t)*(unsigned int *)(v18 + 44) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v18 + 40)
                  + 8);
  if (v19)
    v20 = (_QWORD *)(v19 - 8);
  else
    v20 = 0;
  v21 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
  Loc = mlir::Value::getLoc((mlir::Value *)&v27);
  result = mlir::Block::addArgument(v20, v21, Loc);
  v6[1] = result;
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ApplyRewriteOp,mlir::TypeRange,mlir::StringAttr &,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  ZinIrHalH13g *v16;
  ZinIrHalH13g *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  unint64_t v24[2];
  _QWORD v25[39];

  v25[38] = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.apply_rewrite", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    v23 = 1283;
    v22[2] = (uint64_t)"pdl_interp.apply_rewrite";
    v22[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v11);
  v14 = *a3;
  v13 = a3[1];
  v15 = *a4;
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)a5, *(unsigned int *)(a5 + 8));
  mlir::pdl_interp::ApplyRewriteOp::build((uint64_t)a1, (uint64_t)v25, v14, v13, v15, v24[0], v24[1]);
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateTypesOp,mlir::pdl::RangeType,mlir::ArrayAttr &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_types", (const unsigned __int8 *)0x17, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"pdl_interp.create_types";
    v17[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::CreateTypesOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ApplyRewriteOp,mlir::ValueTypeRange<mlir::ResultRange>,mlir::StringAttr,llvm::SmallVector<mlir::Value,2u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t NextResultAtOffset;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ZinIrHalH13g *v17;
  ZinIrHalH13g *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  unint64_t v23[2];
  unint64_t v24[2];
  _QWORD v25[38];
  uint64_t v26[4];
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.apply_rewrite", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    v27 = 1283;
    v26[2] = (uint64_t)"pdl_interp.apply_rewrite";
    v26[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v26, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v11);
  NextResultAtOffset = *a3;
  v14 = a3[1];
  v15 = a3[3];
  if (v14)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  mlir::ValueRange::ValueRange((unint64_t *)v26, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v24, v26[0], v26[1]);
  v16 = *a4;
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)a5, *(unsigned int *)(a5 + 8));
  mlir::pdl_interp::ApplyRewriteOp::build((uint64_t)a1, (uint64_t)v25, v24[0], v24[1], v16, v23[0], v23[1]);
  v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::EraseOp,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.erase", (const unsigned __int8 *)0x10, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.erase";
    v15[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::EraseOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::EraseOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateOperationOp,llvm::StringRef,llvm::SmallVector<mlir::Value,2u> &,BOOL &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::Value,4u> &,mlir::ArrayAttr>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t *Context;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  ZinIrHalH13g *v23;
  ZinIrHalH13g *v24;
  uint64_t v26;
  const char *v27;
  __int16 v28;
  uint64_t v29[4];
  __int16 v30;
  unint64_t v31[2];
  unint64_t v32[2];
  unint64_t v33[2];
  _QWORD v34[39];

  v34[38] = *MEMORY[0x24BDAC8D0];
  v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_operation", (const unsigned __int8 *)0x1B, Context);
  if (!v18)
  {
    v30 = 1283;
    v29[2] = (uint64_t)"pdl_interp.create_operation";
    v29[3] = 27;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v34);
    llvm::report_fatal_error((llvm::Twine *)v34, 1);
  }
  mlir::OperationState::OperationState(v34, a2, v17);
  v20 = *a3;
  v19 = a3[1];
  mlir::ValueRange::ValueRange(v33, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  v21 = *a5;
  mlir::ValueRange::ValueRange(v32, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
  mlir::ValueRange::ValueRange(v31, *(_QWORD *)a7, *(unsigned int *)(a7 + 8));
  mlir::pdl_interp::CreateOperationOp::build(a1, (uint64_t)v34, v20, v19, v33[0], v33[1], v21, v22, v32[0], v32[1], v31[0], v31[1], *a8);
  v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v34);
  if (*(_UNKNOWN **)(*((_QWORD *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateOperationOp,void>::id)
    v24 = v23;
  else
    v24 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v34);
  return v24;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Value &>(mlir::MLIRContext **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_results", (const unsigned __int8 *)0x16, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_results";
    v15[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetResultsOp::build(a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetValueTypeOp,mlir::pdl_interp::GetResultsOp &>(mlir::MLIRContext **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_value_type", (const unsigned __int8 *)0x19, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"pdl_interp.get_value_type";
    v15[3] = 25;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::GetValueTypeOp::build(a1, (uint64_t)v17, *a3 - 16);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetValueTypeOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::GetResultsOp,mlir::Type &,mlir::Value &,unsigned long>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  ZinIrHalH13g *v13;
  ZinIrHalH13g *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.get_results", (const unsigned __int8 *)0x16, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"pdl_interp.get_results";
    v19[3] = 22;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::pdl_interp::GetResultsOp::build(a1, (uint64_t)v21, *a3, *a4, *a5 | 0x100000000);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::CreateRangeOp,mlir::pdl::RangeType,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.create_range", (const unsigned __int8 *)0x17, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"pdl_interp.create_range";
    v18[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::pdl_interp::CreateRangeOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateRangeOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::pdl_interp::ReplaceOp,mlir::Value,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  uint64_t v11;
  ZinIrHalH13g *v12;
  ZinIrHalH13g *v13;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  unint64_t v20[2];
  _QWORD v21[39];

  v21[38] = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"pdl_interp.replace", (const unsigned __int8 *)0x12, Context);
  if (!v10)
  {
    v19 = 1283;
    v18[2] = (uint64_t)"pdl_interp.replace";
    v18[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  v11 = *a3;
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::pdl_interp::ReplaceOp::build((uint64_t)a1, (uint64_t)v21, v11, v20[0], v20[1]);
  v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ReplaceOp,void>::id)
    v13 = v12;
  else
    v13 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

BOOL mlir::detail::op_filter_iterator<mlir::pdl::OperationOp,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id;
}

int32x2_t **llvm::ScopedHashTableScope<mlir::pdl_to_pdl_interp::Position *,mlir::Value,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Position *,void>,llvm::MallocAllocator>::~ScopedHashTableScope(int32x2_t **result)
{
  int32x2_t **v1;
  uint64_t *v2;
  __int32 v3;
  unsigned int v4;
  uint64_t *inserted;
  uint64_t v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t *v9;
  __int32 v10;
  uint64_t *v11;
  __int32 v12;
  int32x2_t v13;
  uint64_t v14;
  __int32 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  int v24;

  v1 = result;
  (*result)[3] = (int32x2_t)result[1];
  v2 = (uint64_t *)result[2];
  if (v2)
  {
    v7 = v2[1];
    v8 = *result;
    if (!v7)
    {
      v12 = v8[2].i32[0];
      if (v12)
      {
        v13 = *v8;
        v14 = v2[2];
        v15 = v12 - 1;
        LODWORD(v16) = ((v14 >> 4) ^ (v14 >> 9)) & (v12 - 1);
        v17 = (uint64_t *)(*(_QWORD *)v8 + 16 * v16);
        v18 = *v17;
        if (v14 != *v17)
        {
          v23 = 1;
          do
          {
            if (v18 == -4096)
              goto LABEL_5;
            v24 = v16 + v23++;
            v16 = v24 & v15;
            v18 = *(_QWORD *)(*(_QWORD *)&v13 + 16 * v16);
          }
          while (v14 != v18);
          v17 = (uint64_t *)(*(_QWORD *)&v13 + 16 * v16);
        }
        *v17 = -8192;
        v8[1] = vadd_s32(v8[1], (int32x2_t)0x1FFFFFFFFLL);
      }
LABEL_5:
      v1[2] = (int32x2_t *)*v2;
      llvm::deallocate_buffer((llvm *)v2, (void *)0x20);
    }
    v9 = v2 + 2;
    v10 = v8[2].i32[0];
    if (v10)
    {
      v3 = v10 - 1;
      v4 = ((*v9 >> 4) ^ (*v9 >> 9)) & (v10 - 1);
      inserted = (uint64_t *)(*(_QWORD *)v8 + 16 * v4);
      v6 = *inserted;
      if (*v9 == *inserted)
      {
LABEL_4:
        inserted[1] = v7;
        goto LABEL_5;
      }
      v19 = 0;
      v20 = 1;
      while (v6 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v6 == -8192;
        if (v21)
          v19 = inserted;
        v22 = v4 + v20++;
        v4 = v22 & v3;
        inserted = (uint64_t *)(*(_QWORD *)v8 + 16 * (v22 & v3));
        v6 = *inserted;
        if (*v9 == *inserted)
          goto LABEL_4;
      }
      if (v19)
        v11 = v19;
      else
        v11 = inserted;
    }
    else
    {
      v11 = 0;
    }
    inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>,void const*,void const*,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,void const*>>::InsertIntoBucket<void const* const&>((uint64_t)v8, v11, v9);
    v7 = v2[1];
    goto LABEL_4;
  }
  return result;
}

double mlir::Region::getOps<mlir::pdl::PatternOp>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  ZinIrHalH13g *v4;
  uint64_t (*v5)(void);
  __int128 v6;
  double result;
  _BYTE v8[32];
  __int128 v9;
  ZinIrHalH13g *v10;
  __int128 v11;
  _BYTE v12[32];
  BOOL (*i)(uint64_t);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  BOOL (*v17)(uint64_t);
  __int128 v18;
  uint64_t v19;

  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&v12[8] = v18;
  v4 = v10;
  *(_QWORD *)v12 = v10;
  v11 = v9;
  *(_QWORD *)&v12[24] = v19;
  for (i = mlir::detail::op_filter_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::filter;
        *(_QWORD *)v12 != *(_QWORD *)&v12[24];
        v4 = *(ZinIrHalH13g **)v12)
  {
    v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if ((v5() & 1) != 0)
      break;
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  v14 = v11;
  v15 = *(_OWORD *)v12;
  v16 = *(_OWORD *)&v12[16];
  v17 = i;
  *(_QWORD *)v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(_QWORD *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = mlir::detail::op_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::unwrap;
  *(_QWORD *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::filter;
  *(_QWORD *)(a2 + 120) = mlir::detail::op_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::pdl::PatternOp,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id;
}

uint64_t mlir::pdl_to_pdl_interp::Position::getOperationDepth(uint64_t this)
{
  while (!this || *(_DWORD *)(this + 16))
  {
    this = *(_QWORD *)(this + 8);
    if (!this)
      return this;
  }
  return *(unsigned int *)(this + 32);
}

__n128 mlir::pdl_to_pdl_interp::AttributePosition::AttributePosition(uint64_t a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;

  *(_DWORD *)(a1 + 16) = 3;
  *(_QWORD *)a1 = &unk_24C034480;
  *(_QWORD *)(a1 + 8) = 0;
  result = *a2;
  *(__n128 *)(a1 + 24) = *a2;
  v3 = a2->n128_u64[0];
  *(_QWORD *)a1 = &unk_24C034580;
  *(_QWORD *)(a1 + 8) = v3;
  return result;
}

__n128 mlir::pdl_to_pdl_interp::OperandPosition::OperandPosition(uint64_t a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = &unk_24C034460;
  *(_QWORD *)(a1 + 8) = 0;
  result = *a2;
  *(__n128 *)(a1 + 24) = *a2;
  v3 = a2->n128_u64[0];
  *(_QWORD *)a1 = &unk_24C034560;
  *(_QWORD *)(a1 + 8) = v3;
  return result;
}

__n128 mlir::pdl_to_pdl_interp::OperandGroupPosition::OperandGroupPosition(uint64_t a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;

  *(_DWORD *)(a1 + 16) = 2;
  *(_QWORD *)a1 = &unk_24C0344E0;
  *(_QWORD *)(a1 + 8) = 0;
  result = *a2;
  *(_QWORD *)(a1 + 40) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  v3 = a2->n128_u64[0];
  *(_QWORD *)a1 = &unk_24C034600;
  *(_QWORD *)(a1 + 8) = v3;
  return result;
}

BOOL mlir::pdl_to_pdl_interp::OperationPosition::isOperandDefiningOp(mlir::pdl_to_pdl_interp::OperationPosition *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return v1 && (*(_DWORD *)(v1 + 16) - 1) < 2;
}

void mlir::pdl_to_pdl_interp::AttributePosition::~AttributePosition(mlir::pdl_to_pdl_interp::AttributePosition *this)
{
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::OperandPosition::~OperandPosition(mlir::pdl_to_pdl_interp::OperandPosition *this)
{
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::OperandGroupPosition::~OperandGroupPosition(mlir::pdl_to_pdl_interp::OperandGroupPosition *this)
{
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>,(mlir::pdl_to_pdl_interp::Predicates::Kind)3>::~PredicateBase()
{
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)1>::~PredicateBase()
{
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)2>::~PredicateBase()
{
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  llvm *v5;
  _QWORD *v6;
  __int128 *v7;
  _QWORD *buffer;
  int64_t v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  llvm **v31;
  uint64_t (*v32)(void);
  __int128 v33;
  ZinIrHalH13g *v34;
  int v35;
  llvm *v36[2];
  int v37;
  uint64_t (*v38)(void);
  ZinIrHalH13g *v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[82];

  v42[80] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a1 + 40);
  v3 = *(unsigned int *)(a1 + 44);
  v40 = v42;
  v41 = 0x1000000000;
  mlir::Region::getOps<mlir::pdl::PatternOp>((mlir::Region *)(((a1 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8) + 32 * v4), (uint64_t)&v33);
  v32 = v38;
  if (v34 != v39)
  {
    ZinIrHalH13g::~ZinIrHalH13g(v34);
    v5 = (llvm *)v32();
    buildPredicateList(v5);
  }
  if ((_DWORD)v41)
  {
    v6 = v40;
    while (1)
    {
      v7 = (__int128 *)v6[2];
      if (v7 != (__int128 *)v6[3])
        break;
      v6 += 5;
      if (v6 == (_QWORD *)((char *)v40 + 40 * v41))
      {
        v9 = 40 * v41;
        v10 = (char *)operator new(v9);
        v31 = (llvm **)v10;
        v30 = v10;
        v28 = *(_QWORD *)v40;
        v29 = *((_QWORD *)v40 + 1);
        if (*((_QWORD *)v40 + 2) != *((_QWORD *)v40 + 3))
          llvm::deallocate_buffer(0, 0);
        if (v10 < &v10[v9])
        {
          *(_QWORD *)v10 = v28;
          *((_QWORD *)v10 + 1) = v29;
          *((_QWORD *)v10 + 2) = 0;
          *((_DWORD *)v10 + 6) = 0;
          *(_QWORD *)(v10 + 28) = 0;
        }
        else
        {
          v11 = 1;
          if (0x999999999999999ALL * (v9 >> 3) > 1)
            v11 = 0x999999999999999ALL * (v9 >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * (v9 >> 3) >= 0x333333333333333)
            v11 = 0x666666666666666;
          if (v11 > 0x666666666666666)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v12 = operator new(40 * v11);
          *v12 = v28;
          v12[1] = v29;
          v12[2] = 0;
          v12[3] = 0;
          *((_DWORD *)v12 + 6) = 0;
          *((_DWORD *)v12 + 7) = 0;
          *((_DWORD *)v12 + 8) = 0;
          v13 = (char *)v31;
          v14 = v12;
          if (v31 != (llvm **)v30)
          {
            do
            {
              *(_OWORD *)(v14 - 5) = *(_OWORD *)(v13 - 40);
              *(v14 - 3) = *((_QWORD *)v13 - 3);
              *((_DWORD *)v14 - 4) = *((_DWORD *)v13 - 4);
              *((_DWORD *)v13 - 4) = 0;
              *((_DWORD *)v14 - 3) = *((_DWORD *)v13 - 3);
              *((_DWORD *)v13 - 3) = 0;
              *((_DWORD *)v14 - 2) = *((_DWORD *)v13 - 2);
              v14 -= 5;
              *((_QWORD *)v13 - 3) = 0;
              *((_DWORD *)v13 - 2) = 0;
              v13 -= 40;
            }
            while (v13 != v30);
            llvm::deallocate_buffer(*(v31 - 3), (void *)(8 * *((unsigned int *)v31 - 2)));
          }
          if (v30)
            operator delete(v30);
        }
        llvm::deallocate_buffer(0, 0);
      }
    }
    v33 = *v7;
    v34 = 0;
    v35 = 0;
    v36[0] = 0;
    v36[1] = 0;
    v37 = 0;
    buffer = llvm::allocate_buffer(0xE00uLL, (std::align_val_t)8uLL);
    *buffer = -4096;
    buffer[1] = -4096;
    buffer[2] = 0;
    *((_DWORD *)buffer + 6) = 0;
    buffer[4] = 0;
    buffer[5] = 0;
    *((_DWORD *)buffer + 12) = 0;
    llvm::deallocate_buffer(0, 0);
  }
  *a2 = 0;
  foldSwitchToBool(a2);
  do
  {
    v15 = a2;
    v16 = *a2;
    a2 = (uint64_t *)(*a2 + 24);
  }
  while (v16);
  v17 = operator new();
  if ((v18 & 1) == 0
  {
    *(_QWORD *)&v33 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ExitNode]";
    *((_QWORD *)&v33 + 1) = 83;
    v21 = llvm::StringRef::find((uint64_t *)&v33, "DesiredTypeName = ", 0x12uLL, 0);
    if (*((_QWORD *)&v33 + 1) >= v21)
      v22 = v21;
    else
      v22 = *((_QWORD *)&v33 + 1);
    v23 = v33 + v22;
    v24 = *((_QWORD *)&v33 + 1) - v22;
    if (*((_QWORD *)&v33 + 1) - v22 >= 0x12)
      v25 = 18;
    else
      v25 = *((_QWORD *)&v33 + 1) - v22;
    v26 = v24 - v25;
    if (v26 >= v26 - 1)
      v27 = v26 - 1;
    else
      v27 = v26;
    mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ExitNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v23 + v25, v27);
  }
  v19 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ExitNode,void>::resolveTypeID(void)::id;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_QWORD *)(v17 + 40) = v19;
  *(_QWORD *)v17 = &unk_24C034660;
  v20 = *v15;
  *v15 = v17;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  llvm::deallocate_buffer(0, 0);
}

void buildPredicateList(llvm *a1)
{
  mlir::Region *Body;
  ZinIrHalH13g *v2;
  uint64_t OperandValues;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *DefiningOp;
  int *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  llvm *v13;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t Input;
  int v25;
  unint64_t v26;
  llvm *v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  int v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int (*v44)(void);
  uint64_t v45;
  mlir::Region *v46;
  ZinIrHalH13g *v47;
  ZinIrHalH13g *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(void);
  llvm *v52;
  llvm *v53;
  llvm *v54[4];
  __int128 v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[48];
  void *v60[2];
  ZinIrHalH13g *v61[2];
  __int128 v62;
  __int128 v63;
  llvm *v64[2];
  ZinIrHalH13g *v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v54[3] = a1;
  v54[0] = a1;
  v64[0] = 0;
  v64[1] = 0;
  LODWORD(v65) = 0;
  Body = (mlir::Region *)mlir::func::FuncOp::getBody((mlir::func::FuncOp *)v54);
  mlir::Region::getOps<mlir::pdl::OperationOp>(Body, (uint64_t)&v67);
  *(_OWORD *)v60 = v67;
  *(_OWORD *)v61 = v68;
  v62 = v69;
  v63 = v70;
  v2 = (ZinIrHalH13g *)v68;
  v52 = (llvm *)v71;
  if ((_QWORD)v68 == (_QWORD)v71)
  {
LABEL_69:
    mlir::pdl::PatternOp::getRewriter((mlir::pdl::PatternOp *)v54);
    *(_QWORD *)&v67 = v45;
    v60[0] = (void *)mlir::pdl::RewriteOp::getRoot((mlir::pdl::RewriteOp *)&v67);
    if (v60[0])
    {
      *(_QWORD *)&v67 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v64, (unint64_t *)v60, &v67))
      {
        *(_QWORD *)v67 = -8192;
        v64[1] = (llvm *)vadd_s32((int32x2_t)v64[1], (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    v57 = v59;
    v58 = 0x600000000;
    v46 = (mlir::Region *)mlir::func::FuncOp::getBody((mlir::func::FuncOp *)v54);
    mlir::Region::getOps<mlir::pdl::OperationOp>(v46, (uint64_t)&v67);
    *(_OWORD *)v60 = v67;
    *(_OWORD *)v61 = v68;
    v62 = v69;
    v63 = v70;
    v47 = (ZinIrHalH13g *)v71;
LABEL_73:
    v48 = v61[0];
    while (1)
    {
      if (v48 == v47)
        llvm::deallocate_buffer(v64[0], (void *)(8 * v65));
      ZinIrHalH13g::~ZinIrHalH13g(v48);
      *(_QWORD *)&v55 = (*((uint64_t (**)(void))&v63 + 1))() - 16;
      v66 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v64, (unint64_t *)&v55, &v66)|| v66 == (char *)v64[0] + 8 * v65)
      {
        v49 = v55;
        v50 = v58;
        if (v58 >= (unint64_t)HIDWORD(v58))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v58 + 1, 8);
          v50 = v58;
        }
        *((_QWORD *)v57 + v50) = v49;
        LODWORD(v58) = v58 + 1;
      }
      while (1)
      {
        mlir::Region::OpIterator::operator++((uint64_t *)v60);
        v48 = v61[0];
        if (v61[0] == *((ZinIrHalH13g **)&v62 + 1))
          break;
        v51 = (unsigned int (*)(void))v63;
        ZinIrHalH13g::~ZinIrHalH13g(v61[0]);
        if (v51())
          goto LABEL_73;
      }
    }
  }
LABEL_4:
  ZinIrHalH13g::~ZinIrHalH13g(v2);
  v53 = (llvm *)(*((uint64_t (**)(void))&v63 + 1))();
  OperandValues = mlir::pdl::OperationOp::getOperandValues((mlir::pdl::OperationOp *)&v53);
  if (!v4)
    goto LABEL_66;
  v5 = OperandValues;
  v6 = v4;
  v7 = 0;
  while (1)
  {
    v56 = *(_QWORD *)(v5 + 32 * v7 + 24);
    DefiningOp = (_QWORD *)mlir::Value::getDefiningOp((mlir::Value *)&v56);
    v9 = *(int **)(DefiningOp[6] + 16);
    if (DefiningOp)
    {
      if (v9 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id)
        break;
    }
    if (v9 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
    {
      v66 = DefiningOp;
      Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v66);
      *(_QWORD *)&v55 = Input;
      v25 = (int)v65;
      if (!(_DWORD)v65)
      {
        v39 = 0;
        goto LABEL_55;
      }
      v26 = Input;
      v27 = v64[0];
      if ((v28 & 1) == 0
      {
        v43 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v43 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v43;
      }
      v29 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v26) ^ HIDWORD(v26));
      v30 = 0x9DDFEA08EB382D69 * (HIDWORD(v26) ^ (v29 >> 47) ^ v29);
      v31 = (-348639895 * ((v30 >> 47) ^ v30)) & (v25 - 1);
      v32 = (_QWORD *)((char *)v27 + 8 * v31);
      v33 = *v32;
      if ((_QWORD)v55 == *v32)
        goto LABEL_7;
      v34 = 0;
      v35 = 1;
      while (v33 != -4096)
      {
        if (v34)
          v36 = 0;
        else
          v36 = v33 == -8192;
        if (v36)
          v34 = v32;
        v37 = v31 + v35++;
        v31 = v37 & (v25 - 1);
        v32 = (_QWORD *)((char *)v27 + 8 * v31);
        v33 = *v32;
        if ((_QWORD)v55 == *v32)
          goto LABEL_7;
      }
      if (v34)
        v41 = v34;
      else
        v41 = v32;
      v39 = (int)v65;
      if (4 * LODWORD(v64[1]) + 4 < (3 * (_DWORD)v65))
      {
        if ((int)v65 + ~LODWORD(v64[1]) - HIDWORD(v64[1]) <= v65 >> 3)
          goto LABEL_56;
        ++LODWORD(v64[1]);
        if (*v41 == -4096)
        {
LABEL_43:
          *v41 = v55;
          goto LABEL_7;
        }
      }
      else
      {
LABEL_55:
        v39 *= 2;
LABEL_56:
        llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v64, v39);
        v57 = 0;
        llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v64, (unint64_t *)&v55, &v57);
        v41 = v57;
        ++LODWORD(v64[1]);
        if (*(_QWORD *)v57 == -4096)
          goto LABEL_43;
      }
      --HIDWORD(v64[1]);
      goto LABEL_43;
    }
LABEL_7:
    if (++v7 == v6)
    {
      do
      {
LABEL_66:
        mlir::Region::OpIterator::operator++((uint64_t *)v60);
        v2 = v61[0];
        if (v61[0] == *((ZinIrHalH13g **)&v62 + 1))
          goto LABEL_3;
        v44 = (unsigned int (*)(void))v63;
        ZinIrHalH13g::~ZinIrHalH13g(v61[0]);
      }
      while (!v44());
      v2 = v61[0];
LABEL_3:
      if (v2 == v52)
        goto LABEL_69;
      goto LABEL_4;
    }
  }
  v66 = DefiningOp;
  v10 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v66);
  *(_QWORD *)&v55 = v10;
  v11 = (int)v65;
  if ((_DWORD)v65)
  {
    v12 = v10;
    v13 = v64[0];
    if ((v14 & 1) == 0
    {
      v42 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v42 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v42;
    }
    v15 = 0x9DDFEA08EB382D69
        * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v12) ^ HIDWORD(v12));
    v16 = 0x9DDFEA08EB382D69 * (HIDWORD(v12) ^ (v15 >> 47) ^ v15);
    v17 = (-348639895 * ((v16 >> 47) ^ v16)) & (v11 - 1);
    v18 = (_QWORD *)((char *)v13 + 8 * v17);
    v19 = *v18;
    if ((_QWORD)v55 == *v18)
      goto LABEL_7;
    v20 = 0;
    v21 = 1;
    while (v19 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == -8192;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & (v11 - 1);
      v18 = (_QWORD *)((char *)v13 + 8 * v17);
      v19 = *v18;
      if ((_QWORD)v55 == *v18)
        goto LABEL_7;
    }
    if (v20)
      v40 = v20;
    else
      v40 = v18;
    v38 = (int)v65;
    if (4 * LODWORD(v64[1]) + 4 < (3 * (_DWORD)v65))
    {
      if ((int)v65 + ~LODWORD(v64[1]) - HIDWORD(v64[1]) > v65 >> 3)
      {
        ++LODWORD(v64[1]);
        if (*v40 == -4096)
        {
LABEL_6:
          *v40 = v55;
          goto LABEL_7;
        }
LABEL_38:
        --HIDWORD(v64[1]);
        goto LABEL_6;
      }
LABEL_49:
      llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)v64, v38);
      v57 = 0;
      llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v64, (unint64_t *)&v55, &v57);
      v40 = v57;
      ++LODWORD(v64[1]);
      if (*(_QWORD *)v57 == -4096)
        goto LABEL_6;
      goto LABEL_38;
    }
  }
  else
  {
    v38 = 0;
  }
  v38 *= 2;
  goto LABEL_49;
}

uint64_t propagatePattern(uint64_t *a1, __int128 *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  const char *v55;
  unint64_t v56;

  if (a3 == a4 || (v6 = *((unsigned int *)a2 + 8), !(_DWORD)v6))
  {
LABEL_16:
    v19 = operator new();
    v20 = *a2;
    v21 = *a1;
    *a1 = 0;
    if ((v22 & 1) == 0)
    {
      v54 = v20;
      v20 = v54;
      if (v46)
      {
        v55 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SuccessNode]";
        v56 = 86;
        v47 = llvm::StringRef::find((uint64_t *)&v55, "DesiredTypeName = ", 0x12uLL, 0);
        if (v56 >= v47)
          v48 = v47;
        else
          v48 = v56;
        v49 = &v55[v48];
        v50 = v56 - v48;
        if (v56 - v48 >= 0x12)
          v51 = 18;
        else
          v51 = v56 - v48;
        v52 = v50 - v51;
        if (v52 >= v52 - 1)
          v53 = v52 - 1;
        else
          v53 = v52;
        mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SuccessNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
        v20 = v54;
      }
    }
    v23 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SuccessNode,void>::resolveTypeID(void)::id;
    *(_QWORD *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = v21;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = v23;
    *(_QWORD *)v19 = &unk_24C0343C0;
    *(_QWORD *)(v19 + 8) = 0;
    *(_OWORD *)(v19 + 48) = v20;
    result = *a1;
    *a1 = v19;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return result;
  }
  v8 = a3;
  v9 = *((_QWORD *)a2 + 2);
  v10 = v6 - 1;
  v11 = (uint64_t *)(v9 + 8 * v6);
  while (1)
  {
    while (1)
    {
      v12 = *v8;
      LODWORD(v13) = ((*v8 >> 4) ^ (*v8 >> 9)) & v10;
      v14 = (uint64_t *)(v9 + 8 * v13);
      v15 = *v14;
      if (*v14 != *v8)
      {
        v16 = 1;
        while (v15 != -4096)
        {
          v17 = v13 + v16++;
          v13 = v17 & v10;
          v15 = *(_QWORD *)(v9 + 8 * v13);
          if (v15 == v12)
          {
            if ((uint64_t *)(v9 + 8 * v13) == v11)
              goto LABEL_6;
            goto LABEL_12;
          }
        }
        goto LABEL_6;
      }
      if (v14 != v11)
        break;
LABEL_6:
      if (++v8 == a4)
        goto LABEL_16;
    }
LABEL_12:
    v18 = (_QWORD *)*a1;
    if (!*a1)
    {
      v25 = operator new();
      v26 = mlir::pdl_to_pdl_interp::SwitchNode::SwitchNode(v25, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
      v27 = *a1;
      *a1 = v26;
      if (v27)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v26 = *a1;
      }
      v28 = *(_QWORD *)(*v8 + 32);
      v29 = *(unsigned int *)(*v8 + 48);
      if ((_DWORD)v29)
      {
        LODWORD(v30) = ((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) & (v29 - 1);
        v31 = (uint64_t *)(v28 + 16 * v30);
        v32 = *v31;
        if (*v31 == *(_QWORD *)a2)
        {
LABEL_29:
          v35 = v26 + 48;
          v36 = (const char *)v31[1];
          goto LABEL_38;
        }
        v33 = 1;
        while (v32 != -4096)
        {
          v34 = v30 + v33++;
          v30 = v34 & (v29 - 1);
          v32 = *(_QWORD *)(v28 + 16 * v30);
          if (v32 == *(_QWORD *)a2)
          {
            v31 = (uint64_t *)(v28 + 16 * v30);
            goto LABEL_29;
          }
        }
      }
      v31 = (uint64_t *)(v28 + 16 * v29);
      goto LABEL_29;
    }
    if (v18[1] == *(_QWORD *)v12 && v18[2] == *(_QWORD *)(v12 + 8))
      break;
    a1 = v18 + 3;
    if (v8 == a4)
      goto LABEL_16;
  }
  v37 = *(_QWORD *)(v12 + 32);
  v38 = *(unsigned int *)(v12 + 48);
  if (!(_DWORD)v38)
    goto LABEL_36;
  LODWORD(v39) = ((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) & (v38 - 1);
  v40 = (uint64_t *)(v37 + 16 * v39);
  v41 = *v40;
  if (*v40 != *(_QWORD *)a2)
  {
    v42 = 1;
    while (v41 != -4096)
    {
      v43 = v39 + v42++;
      v39 = v43 & (v38 - 1);
      v41 = *(_QWORD *)(v37 + 16 * v39);
      if (v41 == *(_QWORD *)a2)
      {
        v40 = (uint64_t *)(v37 + 16 * v39);
        goto LABEL_37;
      }
    }
LABEL_36:
    v40 = (uint64_t *)(v37 + 16 * v38);
  }
LABEL_37:
  v35 = (uint64_t)(v18 + 6);
  v36 = (const char *)v40[1];
LABEL_38:
  v55 = v36;
  v56 = 0;
  v44 = llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,0u>>::try_emplace<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>(v35, (uint64_t *)&v55, (uint64_t *)&v56);
  v45 = v56;
  v56 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  return propagatePattern(v44 + 8, a2, v8 + 1, a4);
}

uint64_t *foldSwitchToBool(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  const char *v49;
  unint64_t v50;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    v3 = *(_QWORD *)(v1 + 40);
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if ((v4 & 1) == 0)
    {
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      if (v21)
      {
        v49 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SwitchNode]";
        v50 = 85;
        v22 = llvm::StringRef::find((uint64_t *)&v49, "DesiredTypeName = ", 0x12uLL, 0);
        if (v50 >= v22)
          v23 = v22;
        else
          v23 = v50;
        v24 = &v49[v23];
        v25 = v50 - v23;
        if (v50 - v23 >= 0x12)
          v26 = 18;
        else
          v26 = v50 - v23;
        v27 = v25 - v26;
        if (v27 >= v27 - 1)
          v28 = v27 - 1;
        else
          v28 = v27;
        mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SwitchNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
        v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      }
    }
    if (v3 == v5[76])
    {
      v10 = *(unsigned int *)(v1 + 80);
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        v12 = *(_QWORD *)(v1 + 72) + 8;
        do
        {
          foldSwitchToBool(v12);
          v12 += 16;
          v11 -= 16;
        }
        while (v11);
        if (*(_DWORD *)(v1 + 80) == 1)
        {
          v13 = *(__int128 **)(v1 + 72);
          v14 = *v2;
          v48 = *(_OWORD *)(*v2 + 8);
          v15 = operator new();
          v16 = *v13;
          *((_QWORD *)v13 + 1) = 0;
          v17 = *(_QWORD *)(v14 + 24);
          *(_QWORD *)(v14 + 24) = 0;
          if ((v18 & 1) == 0)
          {
            v37 = v15;
            v47 = v16;
            v16 = v47;
            v39 = v38;
            v15 = v37;
            if (v39)
            {
              v49 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::BoolNode]";
              v50 = 83;
              v40 = llvm::StringRef::find((uint64_t *)&v49, "DesiredTypeName = ", 0x12uLL, 0);
              if (v50 >= v40)
                v41 = v40;
              else
                v41 = v50;
              v42 = &v49[v41];
              v43 = v50 - v41;
              if (v50 - v41 >= 0x12)
                v44 = 18;
              else
                v44 = v50 - v41;
              v45 = v43 - v44;
              if (v45 >= v45 - 1)
                v46 = v45 - 1;
              else
                v46 = v45;
              mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
              v16 = v47;
              v15 = v37;
            }
          }
          v19 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id;
          *(_OWORD *)(v15 + 8) = v48;
          *(_QWORD *)(v15 + 24) = v17;
          *(_QWORD *)(v15 + 32) = 0;
          *(_QWORD *)(v15 + 40) = v19;
          *(_QWORD *)v15 = &unk_24C034640;
          *(_OWORD *)(v15 + 48) = v16;
          v20 = *v2;
          *v2 = v15;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
      }
    }
    else
    {
      v6 = *v2;
      v7 = *(_QWORD *)(*v2 + 40);
      v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      if ((v8 & 1) == 0)
      {
        v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
        if (v29)
        {
          v49 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::BoolNode]";
          v50 = 83;
          v30 = llvm::StringRef::find((uint64_t *)&v49, "DesiredTypeName = ", 0x12uLL, 0);
          if (v50 >= v30)
            v31 = v30;
          else
            v31 = v50;
          v32 = &v49[v31];
          v33 = v50 - v31;
          if (v50 - v31 >= 0x12)
            v34 = 18;
          else
            v34 = v50 - v31;
          v35 = v33 - v34;
          if (v35 >= v35 - 1)
            v36 = v35 - 1;
          else
            v36 = v35;
          mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::BoolNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
          v9 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
        }
      }
      if (v7 == v9[74])
        foldSwitchToBool(v6 + 56);
    }
    return (uint64_t *)foldSwitchToBool(*v2 + 24);
  }
  return result;
}

uint64_t mlir::pdl_to_pdl_interp::SwitchNode::SwitchNode(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;

  v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v16 = a2;
    v17 = result;
    v15 = a3;
    v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a3 = v15;
    a2 = v16;
    v7 = v6;
    result = v17;
    if (v7)
    {
      v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::SwitchNode]";
      v19 = 85;
      v8 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v8)
        v9 = v8;
      else
        v9 = v19;
      v10 = &v18[v9];
      v11 = v19 - v9;
      if (v19 - v9 >= 0x12)
        v12 = 18;
      else
        v12 = v19 - v9;
      v13 = v11 - v12;
      if (v13 >= v13 - 1)
        v14 = v13 - 1;
      else
        v14 = v13;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::SwitchNode,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      v4 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a3 = v15;
      a2 = v16;
      result = v17;
    }
  }
  v5 = v4[76];
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v5;
  *(_QWORD *)result = &unk_24C034380;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = result + 88;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

void mlir::pdl_to_pdl_interp::MatcherNode::~MatcherNode(mlir::pdl_to_pdl_interp::MatcherNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_24C0343A0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_24C0343A0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::BoolNode::~BoolNode(mlir::pdl_to_pdl_interp::BoolNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &unk_24C034640;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &unk_24C0343A0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &unk_24C034640;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &unk_24C0343A0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::SuccessNode::~SuccessNode(mlir::pdl_to_pdl_interp::SuccessNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_24C0343A0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_24C0343A0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::SwitchNode::~SwitchNode(mlir::pdl_to_pdl_interp::SwitchNode *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &unk_24C034380;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = *((unsigned int *)this + 20);
  if ((_DWORD)v3)
  {
    v4 = v2 - 8;
    v5 = 16 * v3;
    do
    {
      v6 = *(_QWORD *)&v4[v5];
      *(_QWORD *)&v4[v5] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5 -= 16;
    }
    while (v5);
    v2 = (char *)*((_QWORD *)this + 9);
  }
  if (v2 != (char *)this + 88)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &unk_24C034380;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = *((unsigned int *)this + 20);
  if ((_DWORD)v3)
  {
    v4 = v2 - 8;
    v5 = 16 * v3;
    do
    {
      v6 = *(_QWORD *)&v4[v5];
      *(_QWORD *)&v4[v5] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5 -= 16;
    }
    while (v5);
    v2 = (char *)*((_QWORD *)this + 9);
  }
  if (v2 != (char *)this + 88)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
}

_QWORD *sub_20745D7E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  *v0 = &unk_24C0343A0;
  v1 = v0[4];
  v0[4] = 0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = v0[3];
  v0[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return v0;
}

void sub_20745D8C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  *v0 = &unk_24C0343A0;
  v1 = v0[4];
  v0[4] = 0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = v0[3];
  v0[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD002F8);
}

void getTreePredicates(uint64_t **a1, uint64_t *a2, unsigned __int8 ***a3, uint64_t *a4, uint64_t a5)
{
  int v9;
  _QWORD *v10;
  void *v11;
  unsigned int OperationDepth;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  int v25;
  uint64_t IsNotNull;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  uint64_t **v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  __int128 v56;
  uint64_t *v57;
  uint64_t ValueType;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  BOOL v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t **v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  char *v83;
  uint64_t *v84;
  __int128 v85;
  uint64_t *v86;
  _QWORD *FastmathAttr;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  __int128 v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  uint64_t **v106;
  uint64_t *v107;
  _QWORD *v108[5];
  uint64_t *v109[4];
  uint64_t DefiningOp;
  char v111;
  BOOL v112;
  uint64_t v113;
  uint64_t *v114;

  v107 = a2;
  v108[0] = 0;
  v9 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(a4, (unint64_t *)&v107, v108);
  v10 = v108[0];
  if (v9)
  {
    v11 = *(void **)(*(_QWORD *)(mlir::Value::getDefiningOp((mlir::Value *)&v107) + 48) + 16);
    if (v11 != &mlir::detail::TypeIDResolver<mlir::pdl::AttributeOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id
      && v11 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
    {
      return;
    }
    OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v10[1]);
    v17 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(a5);
    v18 = (_QWORD *)a5;
    if (OperationDepth < v17)
      v18 = (_QWORD *)v10[1];
    v108[0] = v18;
    v19 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*a3, 0, 0, v108);
    v20 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*a3);
    v21 = v20;
    v23 = a1[1];
    v22 = (unint64_t)a1[2];
    if ((unint64_t)v23 < v22)
    {
      if (OperationDepth >= v17)
        a5 = v10[1];
      *v23 = a5;
      v23[1] = v19;
      v23[2] = v20;
      a1[1] = v23 + 3;
      return;
    }
    v106 = a1;
    v32 = (unint64_t *)*a1;
    v33 = 0xAAAAAAAAAAAAAAABLL * (v23 - *a1);
    v34 = v33 + 1;
    if (v33 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v32) >> 3);
      if (2 * v35 > v34)
        v34 = 2 * v35;
      if (v35 >= 0x555555555555555)
        v36 = 0xAAAAAAAAAAAAAAALL;
      else
        v36 = v34;
      if (v36 <= 0xAAAAAAAAAAAAAAALL)
      {
        v37 = 24 * v36;
        v38 = (char *)operator new(24 * v36);
        v39 = (uint64_t *)&v38[24 * v33];
        if (OperationDepth >= v17)
          a5 = v10[1];
        *v39 = a5;
        v40 = v39 + 3;
        v41 = &v38[v37];
        v42 = &v38[24 * v33];
        *((_QWORD *)v42 + 1) = v19;
        *((_QWORD *)v42 + 2) = v21;
        if (v23 == (uint64_t *)v32)
        {
          v43 = v106;
          *v106 = v39;
          v106[1] = v40;
          v106[2] = (uint64_t *)v41;
          if (!v32)
            goto LABEL_43;
        }
        else
        {
          v43 = v106;
          do
          {
            v44 = *(_OWORD *)(v23 - 3);
            v45 = v39 - 3;
            *(v39 - 1) = *(v23 - 1);
            *(_OWORD *)(v39 - 3) = v44;
            v23 -= 3;
            v39 -= 3;
          }
          while (v23 != (uint64_t *)v32);
          *v106 = v45;
          v106[1] = v40;
          v106[2] = (uint64_t *)v41;
          if (!v32)
            goto LABEL_43;
        }
        operator delete(v32);
LABEL_43:
        v43[1] = v40;
        return;
      }
LABEL_125:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_124:
    abort();
  }
  v24 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a4, (uint64_t)&v107, (unint64_t *)&v107, v108[0]);
  *v24 = v107;
  v24[1] = a5;
  v25 = *(_DWORD *)(a5 + 16);
  if (a5 && v25 == 3)
  {
    v109[0] = v107;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v109);
    IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>((uint64_t *)*a3);
    v27 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*a3);
    v28 = v27;
    v30 = a1[1];
    v29 = (unint64_t)a1[2];
    if ((unint64_t)v30 < v29)
    {
      *v30 = a5;
      v30[1] = IsNotNull;
      v31 = v30 + 3;
      v30[2] = v27;
      goto LABEL_56;
    }
    v46 = a1;
    v47 = *a1;
    v48 = 0xAAAAAAAAAAAAAAABLL * (v30 - *a1);
    v49 = v48 + 1;
    if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_124;
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v47) >> 3);
    if (2 * v50 > v49)
      v49 = 2 * v50;
    if (v50 >= 0x555555555555555)
      v51 = 0xAAAAAAAAAAAAAAALL;
    else
      v51 = v49;
    if (v51 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_125;
    v52 = 24 * v51;
    v53 = (char *)operator new(24 * v51);
    v54 = (uint64_t *)&v53[24 * v48];
    v55 = &v53[v52];
    *v54 = a5;
    v54[1] = IsNotNull;
    v54[2] = v28;
    v31 = v54 + 3;
    if (v30 == v47)
    {
      a1 = v46;
      *v46 = v54;
      v46[1] = v31;
      v46[2] = (uint64_t *)v55;
      if (v47)
LABEL_55:
        operator delete(v47);
    }
    else
    {
      a1 = v46;
      do
      {
        v56 = *(_OWORD *)(v30 - 3);
        v57 = v54 - 3;
        *(v54 - 1) = *(v30 - 1);
        *(_OWORD *)(v54 - 3) = v56;
        v30 -= 3;
        v54 -= 3;
      }
      while (v30 != v47);
      *v46 = v57;
      v46[1] = v31;
      v46[2] = (uint64_t *)v55;
      if (v47)
        goto LABEL_55;
    }
LABEL_56:
    a1[1] = v31;
    ValueType = mlir::pdl::AttributeOp::getValueType((mlir::pdl::AttributeOp *)&DefiningOp);
    if (ValueType)
    {
      v59 = ValueType;
      v108[0] = (_QWORD *)a5;
      v60 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*a3, 0, 0, v108);
      getTreePredicates(a1, v59, a3, a4, v60);
      return;
    }
    FastmathAttr = (_QWORD *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&DefiningOp);
    if (FastmathAttr)
    {
      v108[0] = FastmathAttr;
      v70 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeQuestion>((uint64_t *)*a3);
      v71 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(*a3, 0, 0, v108);
      v73 = a1[1];
      v88 = (unint64_t)a1[2];
      if ((unint64_t)v73 < v88)
        goto LABEL_85;
      v74 = a1;
      v75 = (unint64_t *)*a1;
      v90 = 0xAAAAAAAAAAAAAAABLL * (v73 - *a1);
      v91 = v90 + 1;
      if (v90 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_124;
      v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - (_QWORD)v75) >> 3);
      if (2 * v92 > v91)
        v91 = 2 * v92;
      if (v92 >= 0x555555555555555)
        v93 = 0xAAAAAAAAAAAAAAALL;
      else
        v93 = v91;
      if (v93 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_125;
      v94 = 24 * v93;
      v95 = (char *)operator new(24 * v93);
      v82 = (uint64_t *)&v95[24 * v90];
      v83 = &v95[v94];
      *v82 = a5;
      v82[1] = v70;
      v82[2] = v71;
      v84 = v82 + 3;
      if (v73 != (uint64_t *)v75)
      {
        a1 = v74;
        do
        {
          v96 = *(_OWORD *)(v73 - 3);
          v86 = v82 - 3;
          *(v82 - 1) = *(v73 - 1);
          *(_OWORD *)(v82 - 3) = v96;
          v73 -= 3;
          v82 -= 3;
        }
        while (v73 != (uint64_t *)v75);
        goto LABEL_120;
      }
LABEL_119:
      v86 = v82;
      a1 = v74;
      goto LABEL_120;
    }
    return;
  }
  if (a5 && !v25)
  {
    getTreePredicates((unint64_t **)a1, (uint64_t)v107, (uint64_t **)a3, (uint64_t)a4, (mlir::pdl_to_pdl_interp::OperationPosition *)a5, 0);
    return;
  }
  if (v25 == 6)
  {
    v109[0] = v107;
    v61 = mlir::Value::getDefiningOp((mlir::Value *)v109);
    if (v61
      && ((v62 = *(void **)(*(_QWORD *)(v61 + 48) + 16),
           v63 = v62 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id,
           v62 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
        ? (v64 = 0)
        : (v64 = v61),
          DefiningOp = v64,
          v63))
    {
      v97 = (_QWORD *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&DefiningOp);
      if (!v97)
        return;
      v108[0] = v97;
      v70 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeQuestion>((uint64_t *)*a3);
      v71 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(*a3, 0, 0, v108);
      v73 = a1[1];
      v98 = (unint64_t)a1[2];
      if ((unint64_t)v73 < v98)
        goto LABEL_85;
      v74 = a1;
      v75 = (unint64_t *)*a1;
      v99 = 0xAAAAAAAAAAAAAAABLL * (v73 - *a1);
      v100 = v99 + 1;
      if (v99 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_124;
      v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (_QWORD)v75) >> 3);
      if (2 * v101 > v100)
        v100 = 2 * v101;
      if (v101 >= 0x555555555555555)
        v102 = 0xAAAAAAAAAAAAAAALL;
      else
        v102 = v100;
      if (v102 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_125;
      v103 = 24 * v102;
      v104 = (char *)operator new(24 * v102);
      v82 = (uint64_t *)&v104[24 * v99];
      v83 = &v104[v103];
      *v82 = a5;
      v82[1] = v70;
      v82[2] = v71;
      v84 = v82 + 3;
      if (v73 == (uint64_t *)v75)
        goto LABEL_119;
      a1 = v74;
      do
      {
        v105 = *(_OWORD *)(v73 - 3);
        v86 = v82 - 3;
        *(v82 - 1) = *(v73 - 1);
        *(_OWORD *)(v82 - 3) = v105;
        v73 -= 3;
        v82 -= 3;
      }
      while (v73 != (uint64_t *)v75);
    }
    else
    {
      v65 = mlir::Value::getDefiningOp((mlir::Value *)v109);
      if (!v65)
        return;
      v66 = *(void **)(*(_QWORD *)(v65 + 48) + 16);
      v67 = v66 == &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id;
      v68 = v66 == &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id ? (uint64_t *)v65 : 0;
      v114 = v68;
      if (!v67)
        return;
      v69 = (_QWORD *)mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v114);
      if (!v69)
        return;
      v108[0] = v69;
      v70 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeQuestion>((uint64_t *)*a3);
      v71 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(*a3, 0, 0, v108);
      v73 = a1[1];
      v72 = (unint64_t)a1[2];
      if ((unint64_t)v73 < v72)
      {
LABEL_85:
        *v73 = a5;
        v73[1] = v70;
        v84 = v73 + 3;
        v73[2] = v71;
LABEL_122:
        a1[1] = v84;
        return;
      }
      v74 = a1;
      v75 = (unint64_t *)*a1;
      v76 = 0xAAAAAAAAAAAAAAABLL * (v73 - *a1);
      v77 = v76 + 1;
      if (v76 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_124;
      v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (_QWORD)v75) >> 3);
      if (2 * v78 > v77)
        v77 = 2 * v78;
      if (v78 >= 0x555555555555555)
        v79 = 0xAAAAAAAAAAAAAAALL;
      else
        v79 = v77;
      if (v79 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_125;
      v80 = 24 * v79;
      v81 = (char *)operator new(24 * v79);
      v82 = (uint64_t *)&v81[24 * v76];
      v83 = &v81[v80];
      *v82 = a5;
      v82[1] = v70;
      v82[2] = v71;
      v84 = v82 + 3;
      if (v73 == (uint64_t *)v75)
        goto LABEL_119;
      a1 = v74;
      do
      {
        v85 = *(_OWORD *)(v73 - 3);
        v86 = v82 - 3;
        *(v82 - 1) = *(v73 - 1);
        *(_OWORD *)(v82 - 3) = v85;
        v73 -= 3;
        v82 -= 3;
      }
      while (v73 != (uint64_t *)v75);
    }
LABEL_120:
    *a1 = v86;
    a1[1] = v84;
    a1[2] = (uint64_t *)v83;
    if (v75)
      operator delete(v75);
    goto LABEL_122;
  }
  if (a5 && v25 == 1 || a5 && v25 == 2)
  {
    v113 = a5;
    v114 = v107;
    v112 = *(_QWORD *)(*(_QWORD *)(v107[1] & 0xFFFFFFFFFFFFFFF8) + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
    v89 = mlir::Value::getDefiningOp((mlir::Value *)&v114);
    v109[3] = a4;
    DefiningOp = v89;
    v111 = 0;
    v109[0] = &v113;
    v109[1] = (uint64_t *)a1;
    v109[2] = (uint64_t *)a3;
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(&DefiningOp, v109);
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(&DefiningOp, v109);
    v108[0] = a1;
    v108[1] = &v113;
    v108[2] = a3;
    v108[3] = &v112;
    v108[4] = a4;
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(&DefiningOp, (uint64_t *)v108);
    llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(&DefiningOp, (uint64_t *)v108);
  }
}

void std::deque<buildCostGraph(llvm::ArrayRef<mlir::Value>,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>> &,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>>> &)::Entry,std::allocator<buildCostGraph(llvm::ArrayRef<mlir::Value>,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>> &,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>>> &)::Entry>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  BOOL v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  size_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  __int128 *v82;
  _OWORD *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  int64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  _OWORD *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  __int128 *v116;
  _OWORD *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v37 = (v5 - v9) >> 2;
    if (v5 == v9)
      v37 = 1;
    if (v37 >> 61)
      goto LABEL_108;
    v38 = v37 >> 2;
    v39 = 8 * v37;
    v40 = (char *)operator new(8 * v37);
    v41 = &v40[8 * v38];
    v43 = v5 - v7;
    v42 = v5 == v7;
    v5 = v41;
    if (!v42)
    {
      v5 = &v41[v43 & 0xFFFFFFFFFFFFFFF8];
      v44 = v43 - 8;
      if ((unint64_t)(v43 - 8) >= 0x38)
      {
        v95 = &v40[8 * v38];
        v45 = v95;
        if ((unint64_t)(v95 - v7) >= 0x20)
        {
          v96 = (v44 >> 3) + 1;
          v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
          v45 = &v41[v97];
          v7 += v97;
          v98 = (__int128 *)(v6 + 3);
          v99 = v95 + 16;
          v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v101 = *v98;
            *(v99 - 1) = *(v98 - 1);
            *v99 = v101;
            v98 += 2;
            v99 += 2;
            v100 -= 4;
          }
          while (v100);
          if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v45 = &v40[8 * v38];
      }
      do
      {
        v102 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v45 = v102;
        v45 += 8;
      }
      while (v45 != v5);
    }
LABEL_89:
    *a1 = v40;
    a1[1] = v41;
    a1[2] = v5;
    a1[3] = &v40[v39];
    if (!v9)
      goto LABEL_92;
    v103 = v9;
LABEL_91:
    operator delete(v103);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = v20 - v17;
  v22 = (v20 - v17) >> 3;
  v23 = (uint64_t)&v19[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v17 == v18)
    {
      v72 = (v19 - v17) >> 2;
      if (v20 == v17)
        v72 = 1;
      if (v72 >> 61)
        goto LABEL_108;
      v73 = (v72 + 3) >> 2;
      v74 = 8 * v72;
      v75 = (char *)operator new(8 * v72);
      v46 = &v75[8 * v73];
      v76 = v46;
      if (v20 != v17)
      {
        v76 = &v46[8 * v22];
        v77 = &v75[8 * v73];
        v78 = v17;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_111;
        v79 = &v75[8 * v73];
        v77 = v79;
        v78 = v17;
        if ((unint64_t)(v79 - v17) < 0x20)
          goto LABEL_111;
        v80 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
        v77 = &v46[v81];
        v78 = &v17[v81];
        v82 = (__int128 *)(v17 + 16);
        v83 = v79 + 16;
        v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v85 = *v82;
          *(v83 - 1) = *(v82 - 1);
          *v83 = v85;
          v82 += 2;
          v83 += 2;
          v84 -= 4;
        }
        while (v84);
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          do
          {
            v86 = *(_QWORD *)v78;
            v78 += 8;
            *(_QWORD *)v77 = v86;
            v77 += 8;
          }
          while (v77 != v76);
        }
      }
      *a1 = v75;
      a1[1] = v46;
      a1[2] = v76;
      a1[3] = &v75[v74];
      if (v17)
      {
        operator delete(v17);
        v46 = (char *)a1[1];
      }
    }
    else
    {
      v46 = v17;
    }
    *((_QWORD *)v46 - 1) = v25;
    v87 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v87 - 8;
    v8 = *((_QWORD *)v87 - 1);
    a1[1] = v87;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v88 = (char *)*a1;
    if ((unint64_t)v87 > *a1)
    {
      v89 = (uint64_t)&v87[-*a1] >> 3;
      if (v89 >= -1)
        v90 = v89 + 1;
      else
        v90 = v89 + 2;
      v91 = v90 >> 1;
      v92 = -v91;
      v93 = &v87[-8 * v91];
      v94 = v5 - v87;
      if (v5 != v87)
      {
        memmove(&v87[-8 * v91], v87, v5 - v87);
        v87 = (char *)a1[1];
      }
      v5 = &v93[v94];
      v16 = &v87[8 * v92];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v104 = (v5 - v88) >> 2;
    if (v5 == v88)
      v104 = 1;
    if (!(v104 >> 61))
    {
      v105 = v104 >> 2;
      v106 = 8 * v104;
      v107 = (char *)operator new(8 * v104);
      v108 = &v107[8 * v105];
      v109 = v5 - v87;
      v42 = v5 == v87;
      v5 = v108;
      if (!v42)
      {
        v5 = &v108[v109 & 0xFFFFFFFFFFFFFFF8];
        v110 = v109 - 8;
        if ((unint64_t)(v109 - 8) >= 0x38)
        {
          v112 = &v107[8 * v105];
          v111 = v112;
          if ((unint64_t)(v112 - v87) >= 0x20)
          {
            v113 = (v110 >> 3) + 1;
            v114 = 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
            v111 = &v108[v114];
            v115 = &v87[v114];
            v116 = (__int128 *)(v87 + 16);
            v117 = v112 + 16;
            v118 = v113 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v119 = *v116;
              *(v117 - 1) = *(v116 - 1);
              *v117 = v119;
              v116 += 2;
              v117 += 2;
              v118 -= 4;
            }
            while (v118);
            v87 = v115;
            if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v111 = &v107[8 * v105];
        }
        do
        {
          v120 = *(_QWORD *)v87;
          v87 += 8;
          *(_QWORD *)v111 = v120;
          v111 += 8;
        }
        while (v111 != v5);
      }
LABEL_106:
      *a1 = v107;
      a1[1] = v108;
      a1[2] = v5;
      a1[3] = &v107[v106];
      if (!v88)
        goto LABEL_92;
      v103 = v88;
      goto LABEL_91;
    }
LABEL_108:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  v26 = v23 >> 2;
  if (v19 == v18)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_108;
  v28 = (char *)operator new(8 * v27);
  v29 = &v28[8 * v22];
  v30 = &v28[8 * v27];
  v31 = operator new(0x1000uLL);
  v32 = v31;
  if (v22 != v27)
    goto LABEL_24;
  if (v21 >= 1)
  {
    v33 = v22 + 2;
    if (v22 >= -1)
      v33 = v22 + 1;
    v29 -= 8 * (v33 >> 1);
LABEL_24:
    *(_QWORD *)v29 = v31;
    v34 = v29 + 8;
    if (v20 != v17)
      goto LABEL_44;
    goto LABEL_25;
  }
  if (v20 == v17)
    v47 = 1;
  else
    v47 = v21 >> 2;
  if (v47 >> 61)
    goto LABEL_108;
  v48 = 8 * v47;
  v49 = (char *)operator new(8 * v47);
  v29 = &v49[8 * (v47 >> 2)];
  v30 = &v49[v48];
  operator delete(v28);
  v50 = (char *)a1[1];
  v20 = (char *)a1[2];
  v28 = v49;
  *(_QWORD *)v29 = v32;
  v34 = v29 + 8;
  if (v20 != v50)
  {
    while (1)
    {
LABEL_44:
      if (v29 == v28)
      {
        if (v34 >= v30)
        {
          v57 = (v30 - v29) >> 2;
          if (v30 == v29)
            v57 = 1;
          if (v57 >> 61)
            goto LABEL_108;
          v58 = (v57 + 3) >> 2;
          v59 = 8 * v57;
          v60 = (char *)operator new(8 * v57);
          v28 = v60;
          v51 = &v60[8 * v58];
          v61 = v34 - v29;
          v42 = v34 == v29;
          v34 = v51;
          if (!v42)
          {
            v34 = &v51[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v60[8 * v58];
            v64 = v29;
            if (v62 < 0x38)
              goto LABEL_112;
            v63 = &v60[8 * v58];
            v64 = v29;
            if ((unint64_t)(v63 - v29) < 0x20)
              goto LABEL_112;
            v65 = (v62 >> 3) + 1;
            v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v51[v66];
            v64 = &v29[v66];
            v67 = (__int128 *)(v29 + 16);
            v68 = &v60[8 * v58 + 16];
            v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v70 = *v67;
              *((_OWORD *)v68 - 1) = *(v67 - 1);
              *(_OWORD *)v68 = v70;
              v67 += 2;
              v68 += 32;
              v69 -= 4;
            }
            while (v69);
            if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_112:
              do
              {
                v71 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v71;
                v63 += 8;
              }
              while (v63 != v34);
            }
          }
          v30 = &v60[v59];
          operator delete(v29);
        }
        else
        {
          v53 = (v30 - v34) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = &v34[8 * (v54 >> 1)];
          v51 = &v55[-(v34 - v29)];
          v56 = v34 - v29;
          v42 = v34 == v29;
          v34 = v55;
          if (!v42)
            memmove(v51, v29, v56);
          v28 = v29;
        }
      }
      else
      {
        v51 = v29;
      }
      v52 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *((_QWORD *)v51 - 1) = v52;
      v35 = v51 - 8;
      v29 = v35;
      if (v20 == (char *)a1[1])
        goto LABEL_26;
    }
  }
LABEL_25:
  v35 = v29;
LABEL_26:
  v36 = (char *)*a1;
  *a1 = v28;
  a1[1] = v35;
  a1[2] = v34;
  a1[3] = v30;
  if (v36)
    operator delete(v36);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>>>,mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>>>::LookupBucketFor<mlir::Value>(uint64_t result, int a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;

  if (a2)
  {
    v4 = *a3;
    v6 = &unk_254519000;
    if ((v5 & 1) == 0)
    {
      v23 = result;
      v20 = a3;
      v21 = a4;
      v22 = a2;
      v19 = *a3;
      v6 = &unk_254519000;
      v4 = v19;
      a3 = v20;
      a2 = v22;
      a4 = v21;
      v17 = v16;
      result = v23;
      if (v17)
      {
        v18 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v18 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v18;
        v6 = (_QWORD *)&unk_254519000;
        v4 = v19;
        a3 = v20;
        a2 = v22;
        result = v23;
        a4 = v21;
      }
    }
    v7 = (v6[373] + 8 * v4) ^ HIDWORD(v4);
    v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    v9 = (-348639895 * ((v8 >> 47) ^ v8)) & (a2 - 1);
    v10 = (_QWORD *)(result + 32 * v9);
    v11 = *v10;
    if (*a3 == *v10)
    {
LABEL_4:
      *a4 = v10;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & (a2 - 1);
        v10 = (_QWORD *)(result + 32 * v9);
        v11 = *v10;
        if (*a3 == *v10)
          goto LABEL_4;
      }
      if (v12)
        v10 = v12;
      *a4 = v10;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>>>,mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  llvm *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(32 * v3);
    if ((_DWORD)v3)
    {
      v17 = 32 * v3;
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = *(_QWORD *)a1;
          v20 = *(_DWORD *)(a1 + 16);
          v29 = 0;
          v21 = v29;
          v22 = *(_QWORD *)v18;
          *(_DWORD *)(v29 + 24) = 0;
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)v21 = v22;
          *(_QWORD *)(v21 + 8) = *((_QWORD *)v18 + 1);
          *((_QWORD *)v18 + 1) = 0;
          *(_DWORD *)(v21 + 16) = *((_DWORD *)v18 + 4);
          *((_DWORD *)v18 + 4) = 0;
          LODWORD(v22) = *(_DWORD *)(v21 + 20);
          *(_DWORD *)(v21 + 20) = *((_DWORD *)v18 + 5);
          *((_DWORD *)v18 + 5) = v22;
          v23 = *(unsigned int *)(v21 + 24);
          *(_DWORD *)(v21 + 24) = *((_DWORD *)v18 + 6);
          *((_DWORD *)v18 + 6) = v23;
          ++*(_DWORD *)(a1 + 8);
          llvm::deallocate_buffer(0, (void *)(24 * v23));
        }
        v18 = (llvm *)((char *)v18 + 32);
        v17 -= 32;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v24)
  {
    if (((v24 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_23;
    v25 = ((v24 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v25 & 0xFFFFFFFFFFFFFFELL)];
    v26 = result + 4;
    v27 = v25 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v26 - 4) = -4096;
      *v26 = -4096;
      v26 += 8;
      v27 -= 2;
    }
    while (v27);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v28 = &result[4 * v24];
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v28);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>,mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>::LookupBucketFor<mlir::Value>(uint64_t result, int a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;

  if (a2)
  {
    v4 = *a3;
    v6 = &unk_254519000;
    if ((v5 & 1) == 0)
    {
      v24 = result;
      v21 = a3;
      v22 = a4;
      v23 = a2;
      v20 = *a3;
      v6 = &unk_254519000;
      v4 = v20;
      a3 = v21;
      a2 = v23;
      a4 = v22;
      v18 = v17;
      result = v24;
      if (v18)
      {
        v19 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v19 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v19;
        v6 = (_QWORD *)&unk_254519000;
        v4 = v20;
        a3 = v21;
        a2 = v23;
        result = v24;
        a4 = v22;
      }
    }
    v7 = (v6[373] + 8 * v4) ^ HIDWORD(v4);
    v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    v9 = a2 - 1;
    v10 = (-348639895 * ((v8 >> 47) ^ v8)) & (a2 - 1);
    v11 = (_QWORD *)(result + 24 * v10);
    v12 = *v11;
    if (*a3 == *v11)
    {
LABEL_4:
      *a4 = v11;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = v11;
        v16 = v10 + v14++;
        v10 = v16 & v9;
        v11 = (_QWORD *)(result + 24 * (v16 & v9));
        v12 = *v11;
        if (*a3 == *v11)
          goto LABEL_4;
      }
      if (v13)
        v11 = v13;
      *a4 = v11;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>,mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  llvm *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = -4096;
        v18[3] = -4096;
        v18 += 6;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = v4;
          do
          {
            if ((*(_QWORD *)v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v22 = *(_QWORD *)a1;
              v23 = *(_DWORD *)(a1 + 16);
              v29 = 0;
              v24 = v29;
              *v29 = *(_QWORD *)v21;
              *(_OWORD *)(v24 + 1) = *(_OWORD *)((char *)v21 + 8);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = &result[3 * v10];
    do
    {
      *v12 = -4096;
      v12 += 3;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_25:
      v28 = &result[3 * v13];
      do
      {
        *v15 = -4096;
        v15 += 3;
      }
      while (v15 != v28);
      return result;
    }
    v25 = v14 / 0x18 + 1;
    v15 = &result[3 * (v25 & 0x1FFFFFFFFFFFFFFELL)];
    v26 = v25 & 0x1FFFFFFFFFFFFFFELL;
    v27 = result;
    do
    {
      *v27 = -4096;
      v27[3] = -4096;
      v27 += 6;
      v26 -= 2;
    }
    while (v26);
    if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_25;
  }
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<mlir::Value,llvm::SmallVector<buildCostGraph(llvm::ArrayRef<mlir::Value>,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>> &,llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,`anonymous namespace'::OpIndex,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::OpIndex>>>> &)::RootDepth,1u>>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unsigned int v14;
  const void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  unint64_t v24;

  v24 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 40, &v24);
  v5 = *(char **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v6)
    goto LABEL_21;
  v7 = 0;
  v8 = 40 * v6;
  do
  {
    v10 = &v4[v7];
    v11 = &v5[v7];
    *(_QWORD *)v10 = *(_QWORD *)&v5[v7];
    v12 = &v4[v7 + 24];
    *(_QWORD *)&v4[v7 + 8] = v12;
    v13 = &v4[v7 + 8];
    *((_QWORD *)v10 + 2) = 0x100000000;
    if (v5 != v4)
    {
      v14 = *((_DWORD *)v11 + 4);
      if (v14)
      {
        v15 = (const void *)*((_QWORD *)v11 + 1);
        v16 = &v5[v7];
        v17 = (uint64_t)&v5[v7 + 24];
        if ((const void *)v17 != v15)
        {
          *(_QWORD *)v13 = v15;
          v9 = *((_DWORD *)v16 + 5);
          *((_DWORD *)v10 + 4) = v14;
          *((_DWORD *)v10 + 5) = v9;
          *((_QWORD *)v11 + 1) = v17;
          *((_DWORD *)v16 + 5) = 0;
LABEL_4:
          *((_DWORD *)v11 + 4) = 0;
          goto LABEL_5;
        }
        if (v14 < 2)
        {
          v19 = 16;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v4[v7 + 8], &v4[v7 + 24], *((unsigned int *)v11 + 4), 16);
          v18 = *((unsigned int *)v11 + 4);
          if (!(_DWORD)v18)
          {
LABEL_14:
            *((_DWORD *)v10 + 4) = v14;
            goto LABEL_4;
          }
          v15 = (const void *)*((_QWORD *)v11 + 1);
          v12 = *(char **)v13;
          v19 = 16 * v18;
        }
        memcpy(v12, v15, v19);
        goto LABEL_14;
      }
    }
LABEL_5:
    v7 += 40;
  }
  while (v8 != v7);
  v5 = *(char **)a1;
  v20 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v20)
  {
    v21 = 40 * v20;
    do
    {
      v22 = *(char **)&v5[v21 - 32];
      if (&v5[v21 - 16] != v22)
        free(v22);
      v21 -= 40;
    }
    while (v21);
    v5 = *(char **)a1;
  }
LABEL_21:
  v23 = v24;
  if (v5 != v3)
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

void llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::copyFrom(uint64_t a1)
{
  uint64_t v1;
  llvm *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(llvm **)a1;
  if ((_DWORD)v1)
  {
    v3 = 32 * v1;
    while ((*(_QWORD *)v2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v2 = (llvm *)((char *)v2 + 32);
      v3 -= 32;
      if (!v3)
        llvm::deallocate_buffer(*(llvm **)a1, (void *)(32 * *(unsigned int *)(a1 + 16)));
    }
    llvm::deallocate_buffer(*((llvm **)v2 + 1), (void *)(24 * *((unsigned int *)v2 + 6)));
  }
  llvm::deallocate_buffer(*(llvm **)a1, 0);
}

void sub_20745F194()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(v0 + 16) = v2;
  if (!v2)
    JUMPOUT(0x20745F1A0);
  JUMPOUT(0x20745F15CLL);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::copyFrom<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;

  *(_QWORD *)(result + 8) = a2[1];
  if (*(_DWORD *)(result + 16))
  {
    v2 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)result + 32 * v2) = *(_QWORD *)(*a2 + 32 * v2);
      v3 = *(_QWORD *)result + 32 * v2;
      if ((*(_QWORD *)v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        llvm::deallocate_buffer(0, 0);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(result + 16));
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v22 = a1;
    v19 = a4;
    v20 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a4 = v19;
    a2 = v20;
    v11 = v10;
    a3 = v21;
    a1 = v22;
    if (v11)
    {
      v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::EqualToQuestion]";
      v27 = 90;
      v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12)
        v13 = v12;
      else
        v13 = v27;
      v14 = &v26[v13];
      v15 = v27 - v13;
      if (v27 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v27 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::EqualToQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a4 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  v6 = v5[54];
  v7 = *a4;
  v8 = *a4 >> 4;
  v26 = a2;
  v27 = a3;
  v25 = v7;
  v23[0] = &v25;
  v23[1] = &v26;
  v24 = &v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8 ^ (v7 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::EqualToQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::EqualToQuestion *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)a1;
  *(_QWORD *)(a2 + 80) += 16;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 16 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 16;
  *(_DWORD *)v10 = 19;
  *(_QWORD *)(v10 + 8) = *v4;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) != 0)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[50]);
  v13 = a1;
  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  v5 = v4;
  a1 = v13;
  if (!v5)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[50]);
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TrueAnswer]";
  v15 = 85;
  v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  if (v15 >= v6)
    v7 = v6;
  else
    v7 = v15;
  v8 = &v14[v7];
  v9 = v15 - v7;
  if (v15 - v7 >= 0x12)
    v10 = 18;
  else
    v10 = v15 - v7;
  v11 = v9 - v10;
  if (v11 >= v11 - 1)
    v12 = v11 - 1;
  else
    v12 = v11;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TrueAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  return mlir::StorageUniquer::getSingletonImpl(v13, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TrueAnswer,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) != 0)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[58]);
  v13 = a1;
  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  v5 = v4;
  a1 = v13;
  if (!v5)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[58]);
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::IsNotNullQuestion]";
  v15 = 92;
  v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  if (v15 >= v6)
    v7 = v6;
  else
    v7 = v15;
  v8 = &v14[v7];
  v9 = v15 - v7;
  if (v15 - v7 >= 0x12)
    v10 = 18;
  else
    v10 = v15 - v7;
  v11 = v9 - v10;
  if (v11 >= v11 - 1)
    v12 = v11 - 1;
  else
    v12 = v11;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::IsNotNullQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  return mlir::StorageUniquer::getSingletonImpl(v13, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::IsNotNullQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v22 = a1;
    v19 = a4;
    v20 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a4 = v19;
    a2 = v20;
    v11 = v10;
    a3 = v21;
    a1 = v22;
    if (v11)
    {
      v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypePosition]";
      v27 = 87;
      v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12)
        v13 = v12;
      else
        v13 = v27;
      v14 = &v26[v13];
      v15 = v27 - v13;
      if (v27 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v27 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a4 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  v6 = v5[34];
  v7 = *a4;
  v8 = *a4 >> 4;
  v26 = a2;
  v27 = a3;
  v25 = v7;
  v23[0] = &v25;
  v23[1] = &v26;
  v24 = &v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8 ^ (v7 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position,mlir::pdl_to_pdl_interp::Position*,(mlir::pdl_to_pdl_interp::Predicates::Kind)6>::construct<mlir::pdl_to_pdl_interp::Position*>(a2, *(_QWORD **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position,mlir::pdl_to_pdl_interp::Position*,(mlir::pdl_to_pdl_interp::Predicates::Kind)6>::construct<mlir::pdl_to_pdl_interp::Position*>(uint64_t a1, _QWORD *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t result;

  *(_QWORD *)(a1 + 80) += 32;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 32 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = result + 32;
  *(_DWORD *)(result + 16) = 6;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 24) = *a2;
  *(_QWORD *)result = &unk_24C0343E0;
  *(_QWORD *)(result + 8) = *a2;
  return result;
}

void mlir::pdl_to_pdl_interp::TypePosition::~TypePosition(mlir::pdl_to_pdl_interp::TypePosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeQuestion>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) != 0)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[56]);
  v13 = a1;
  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  v5 = v4;
  a1 = v13;
  if (!v5)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[56]);
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeQuestion]";
  v15 = 92;
  v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  if (v15 >= v6)
    v7 = v6;
  else
    v7 = v15;
  v8 = &v14[v7];
  v9 = v15 - v7;
  if (v15 - v7 >= 0x12)
    v10 = 18;
  else
    v10 = v15 - v7;
  v11 = v9 - v10;
  if (v11 >= v11 - 1)
    v12 = v11 - 1;
  else
    v12 = v11;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  return mlir::StorageUniquer::getSingletonImpl(v13, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v22 = a1;
    v19 = a4;
    v20 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a4 = v19;
    a2 = v20;
    v11 = v10;
    a3 = v21;
    a1 = v22;
    if (v11)
    {
      v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeAnswer]";
      v27 = 90;
      v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12)
        v13 = v12;
      else
        v13 = v27;
      v14 = &v26[v13];
      v15 = v27 - v13;
      if (v27 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v27 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a4 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  v6 = v5[40];
  v7 = *a4;
  v8 = *a4 >> 4;
  v26 = a2;
  v27 = a3;
  v25 = v7;
  v23[0] = &v25;
  v23[1] = &v26;
  v24 = &v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8 ^ (v7 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)a1;
  *(_QWORD *)(a2 + 80) += 16;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 16 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 16;
  *(_DWORD *)v10 = 21;
  *(_QWORD *)(v10 + 8) = *v4;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

uint64_t getTreePredicates(unint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t a4, mlir::pdl_to_pdl_interp::OperationPosition *a5, uint64_t a6)
{
  uint64_t IsNotNull;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  unint64_t *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int8 **v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  unsigned __int32 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  __int128 v82;
  uint64_t TypeValues;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  __int128 v87;
  unsigned __int32 v88;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t *v101;
  char *v102;
  unint64_t *v103;
  __int128 v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 v113;
  uint64_t FastmathAttr;
  uint64_t AttributeValues;
  uint64_t v116;
  mlir::pdl_to_pdl_interp::OperationPosition *v117;
  uint64_t *Value;
  unint64_t v119;
  uint64_t result;
  uint64_t v121;
  uint64_t *v122;
  unsigned __int8 ***v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  mlir::StringAttr *v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t AttrData;
  mlir::StringAttr *v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  unsigned __int8 ***v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  unint64_t **v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  unint64_t *v176;
  char *v177;
  __int128 v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t OperandValues;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t **v190;
  unint64_t **v191;
  uint64_t v192;
  uint64_t DefiningOp;
  uint64_t v194;
  uint64_t v195;
  __n128 v196;
  uint64_t v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  __n128 v201;
  __int128 v202;
  __int16 v203;
  uint64_t v204;

  v204 = *MEMORY[0x24BDAC8D0];
  v194 = a2;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v194);
  v190 = a3;
  v191 = a1;
  if (*((_DWORD *)a5 + 8))
  {
    IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*a3);
    v12 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*a3);
    v13 = v12;
    v15 = a1[1];
    v14 = (unint64_t)a1[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = *a1;
      v18 = 0xAAAAAAAAAAAAAAABLL * (v15 - *a1);
      v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_171;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v17) >> 3);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x555555555555555)
        v21 = 0xAAAAAAAAAAAAAAALL;
      else
        v21 = v19;
      if (v21 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_172;
      v22 = 24 * v21;
      v23 = (char *)operator new(24 * v21);
      v24 = &v23[24 * v18];
      v25 = &v23[v22];
      *(_QWORD *)v24 = a5;
      *((_QWORD *)v24 + 1) = IsNotNull;
      *((_QWORD *)v24 + 2) = v13;
      v16 = (unint64_t *)(v24 + 24);
      if (v15 == v17)
      {
        a1 = v191;
        *v191 = (unint64_t *)v24;
        v191[1] = v16;
        v191[2] = (unint64_t *)v25;
        if (!v17)
          goto LABEL_16;
      }
      else
      {
        a1 = v191;
        do
        {
          v26 = *(_OWORD *)(v15 - 3);
          v27 = (unint64_t *)(v24 - 24);
          *((_QWORD *)v24 - 1) = *(v15 - 1);
          *(_OWORD *)(v24 - 24) = v26;
          v15 -= 3;
          v24 -= 24;
        }
        while (v15 != v17);
        *v191 = v27;
        v191[1] = v16;
        v191[2] = (unint64_t *)v25;
        if (!v17)
          goto LABEL_16;
      }
      operator delete(v17);
    }
    else
    {
      *v15 = (unint64_t)a5;
      v15[1] = IsNotNull;
      v16 = v15 + 3;
      v15[2] = v12;
    }
LABEL_16:
    a1[1] = v16;
  }
  mlir::pdl::OperationOp::getOpName((uint64_t)&DefiningOp, (uint64_t)&v201);
  if (!(_BYTE)v202)
    goto LABEL_33;
  v28 = v201;
  v29 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameQuestion>(*v190);
  v30 = *v190;
  mlir::OperationName::OperationName(&v196, v28.n128_u64[0], v28.n128_u64[1], v190[1]);
  v31 = (unsigned __int8 **)v30;
  a1 = v191;
  v32 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(v31, 0, 0, &v196);
  v33 = v32;
  v35 = v191[1];
  v34 = (unint64_t)v191[2];
  if ((unint64_t)v35 >= v34)
  {
    v37 = *v191;
    v38 = 0xAAAAAAAAAAAAAAABLL * (v35 - *v191);
    v39 = v38 + 1;
    if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_171;
    v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)v37) >> 3);
    if (2 * v40 > v39)
      v39 = 2 * v40;
    if (v40 >= 0x555555555555555)
      v41 = 0xAAAAAAAAAAAAAAALL;
    else
      v41 = v39;
    if (v41 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_172;
    v42 = 24 * v41;
    v43 = (char *)operator new(24 * v41);
    v44 = &v43[24 * v38];
    v45 = &v43[v42];
    *(_QWORD *)v44 = a5;
    *((_QWORD *)v44 + 1) = v29;
    *((_QWORD *)v44 + 2) = v33;
    v36 = (unint64_t *)(v44 + 24);
    if (v35 == (unint64_t *)v28.n128_u64[1])
    {
      a1 = v191;
      *v191 = (unint64_t *)v44;
      v191[1] = v36;
      v191[2] = (unint64_t *)v45;
      if (!v37)
        goto LABEL_32;
    }
    else
    {
      a1 = v191;
      do
      {
        v46 = *(_OWORD *)(v35 - 3);
        v47 = (unint64_t *)(v44 - 24);
        *((_QWORD *)v44 - 1) = *(v35 - 1);
        *(_OWORD *)(v44 - 24) = v46;
        v35 -= 3;
        v44 -= 24;
      }
      while (v35 != v37);
      *v191 = v47;
      v191[1] = v36;
      v191[2] = (unint64_t *)v45;
      if (!v37)
        goto LABEL_32;
    }
    operator delete(v37);
  }
  else
  {
    *v35 = (unint64_t)a5;
    v35[1] = v29;
    v36 = v35 + 3;
    v35[2] = v32;
  }
LABEL_32:
  a1[1] = v36;
LABEL_33:
  v183 = a6;
  OperandValues = mlir::pdl::OperationOp::getOperandValues((mlir::pdl::OperationOp *)&DefiningOp);
  v189 = v48;
  mlir::ValueRange::ValueRange(v199.n128_u64, OperandValues, v48);
  v200 = v199;
  mlir::ValueRange::getTypes(&v200, &v201);
  v49 = v201.n128_i64[1];
  v50 = v202;
  v196 = v201;
  if (*(_OWORD *)&v201 == v202)
  {
    if (v189)
      goto LABEL_80;
    v51 = 0;
  }
  else
  {
    v51 = 0;
    do
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v196, v49) + 8) & 0xFFFFFFFFFFFFFFF8)
                        + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
        ++v51;
      v49 = ++v196.n128_u64[1];
    }
    while (v196.n128_u64[0] != (_QWORD)v50 || v49 != *((_QWORD *)&v50 + 1));
    if (v189 != v51)
    {
      if (!v51)
        goto LABEL_80;
      v201.n128_u32[0] = v51;
      v59 = a1;
      v60 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(*v190);
      v61 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
      v62 = v61;
      v64 = v59[1];
      v63 = (unint64_t)v59[2];
      if ((unint64_t)v64 < v63)
      {
        *v64 = (unint64_t)a5;
        v64[1] = v60;
        v58 = v64 + 3;
        v64[2] = v61;
        a1 = v59;
        goto LABEL_79;
      }
      v65 = *v59;
      v76 = 0xAAAAAAAAAAAAAAABLL * (v64 - *v59);
      v77 = v76 + 1;
      if (v76 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_171;
      v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (_QWORD)v65) >> 3);
      if (2 * v78 > v77)
        v77 = 2 * v78;
      if (v78 >= 0x555555555555555)
        v79 = 0xAAAAAAAAAAAAAAALL;
      else
        v79 = v77;
      if (v79 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_172;
      v80 = 24 * v79;
      v81 = (char *)operator new(24 * v79);
      v72 = &v81[24 * v76];
      v73 = &v81[v80];
      *(_QWORD *)v72 = a5;
      *((_QWORD *)v72 + 1) = v60;
      *((_QWORD *)v72 + 2) = v62;
      v58 = (unint64_t *)(v72 + 24);
      if (v64 != v65)
      {
        a1 = v191;
        do
        {
          v82 = *(_OWORD *)(v64 - 3);
          v75 = v72 - 24;
          *((_QWORD *)v72 - 1) = *(v64 - 1);
          *(_OWORD *)(v72 - 24) = v82;
          v64 -= 3;
          v72 -= 24;
        }
        while (v64 != v65);
LABEL_77:
        *a1 = (unint64_t *)v75;
        a1[1] = v58;
        a1[2] = (unint64_t *)v73;
        if (v65)
          operator delete(v65);
        goto LABEL_79;
      }
LABEL_76:
      v75 = v72;
      a1 = v191;
      goto LABEL_77;
    }
  }
  v201.n128_u32[0] = v51;
  v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountQuestion>(*v190);
  v54 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
  v55 = v54;
  v57 = v191[1];
  v56 = (unint64_t)v191[2];
  if ((unint64_t)v57 >= v56)
  {
    v65 = *v191;
    v66 = 0xAAAAAAAAAAAAAAABLL * (v57 - *v191);
    v67 = v66 + 1;
    if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_171;
    v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)v65) >> 3);
    if (2 * v68 > v67)
      v67 = 2 * v68;
    if (v68 >= 0x555555555555555)
      v69 = 0xAAAAAAAAAAAAAAALL;
    else
      v69 = v67;
    if (v69 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_172;
    v70 = 24 * v69;
    v71 = (char *)operator new(24 * v69);
    v72 = &v71[24 * v66];
    v73 = &v71[v70];
    *(_QWORD *)v72 = a5;
    *((_QWORD *)v72 + 1) = v53;
    *((_QWORD *)v72 + 2) = v55;
    v58 = (unint64_t *)(v72 + 24);
    if (v57 != v65)
    {
      a1 = v191;
      do
      {
        v74 = *(_OWORD *)(v57 - 3);
        v75 = v72 - 24;
        *((_QWORD *)v72 - 1) = *(v57 - 1);
        *(_OWORD *)(v72 - 24) = v74;
        v57 -= 3;
        v72 -= 24;
      }
      while (v57 != v65);
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  *v57 = (unint64_t)a5;
  v57[1] = v53;
  v58 = v57 + 3;
  v57[2] = v54;
  a1 = v191;
LABEL_79:
  a1[1] = v58;
LABEL_80:
  TypeValues = mlir::pdl::OperationOp::getTypeValues((mlir::pdl::OperationOp *)&DefiningOp);
  v85 = v84;
  v186 = TypeValues;
  mlir::ValueRange::ValueRange(v198.n128_u64, TypeValues, v84);
  v200 = v198;
  mlir::ValueRange::getTypes(&v200, &v201);
  v86 = v201.n128_i64[1];
  v87 = v202;
  v196 = v201;
  v188 = (unint64_t)a5;
  v185 = v85;
  if (*(_OWORD *)&v201 == v202)
  {
    if (v85)
      goto LABEL_119;
LABEL_92:
    v201.n128_u32[0] = v85;
    v90 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountQuestion>(*v190);
    v91 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
    v93 = a1[1];
    v92 = (unint64_t)a1[2];
    if ((unint64_t)v93 >= v92)
    {
      v94 = *a1;
      v95 = 0xAAAAAAAAAAAAAAABLL * (v93 - *a1);
      v96 = v95 + 1;
      if (v95 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92 - (_QWORD)v94) >> 3);
        if (2 * v97 > v96)
          v96 = 2 * v97;
        if (v97 >= 0x555555555555555)
          v98 = 0xAAAAAAAAAAAAAAALL;
        else
          v98 = v96;
        if (v98 <= 0xAAAAAAAAAAAAAAALL)
        {
          v99 = 24 * v98;
          v100 = (char *)operator new(24 * v98);
          v101 = (unint64_t *)&v100[24 * v95];
          v102 = &v100[v99];
          *v101 = v188;
          v101[1] = v90;
          v101[2] = v91;
          v103 = v101 + 3;
          if (v93 != v94)
          {
            do
            {
              v104 = *(_OWORD *)(v93 - 3);
              v105 = v101 - 3;
              *(v101 - 1) = *(v93 - 1);
              *(_OWORD *)(v101 - 3) = v104;
              v93 -= 3;
              v101 -= 3;
            }
            while (v93 != v94);
            goto LABEL_115;
          }
          goto LABEL_169;
        }
        goto LABEL_172;
      }
      goto LABEL_171;
    }
    goto LABEL_105;
  }
  v88 = 0;
  do
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v196, v86) + 8) & 0xFFFFFFFFFFFFFFF8)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      ++v88;
    v86 = ++v196.n128_u64[1];
  }
  while (v196.n128_u64[0] != (_QWORD)v87 || v86 != *((_QWORD *)&v87 + 1));
  if (v85 == v88)
    goto LABEL_92;
  if (!v88)
    goto LABEL_119;
  v201.n128_u32[0] = v88;
  v90 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(*v190);
  v91 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>((unsigned __int8 **)*v190, 0, 0, &v201);
  v93 = a1[1];
  v106 = (unint64_t)a1[2];
  if ((unint64_t)v93 >= v106)
  {
    v94 = *a1;
    v107 = 0xAAAAAAAAAAAAAAABLL * (v93 - *a1);
    v108 = v107 + 1;
    if (v107 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - (_QWORD)v94) >> 3);
      if (2 * v109 > v108)
        v108 = 2 * v109;
      if (v109 >= 0x555555555555555)
        v110 = 0xAAAAAAAAAAAAAAALL;
      else
        v110 = v108;
      if (v110 <= 0xAAAAAAAAAAAAAAALL)
      {
        v111 = 24 * v110;
        v112 = (char *)operator new(24 * v110);
        v101 = (unint64_t *)&v112[24 * v107];
        v102 = &v112[v111];
        *v101 = v188;
        v101[1] = v90;
        v101[2] = v91;
        v103 = v101 + 3;
        if (v93 != v94)
        {
          do
          {
            v113 = *(_OWORD *)(v93 - 3);
            v105 = v101 - 3;
            *(v101 - 1) = *(v93 - 1);
            *(_OWORD *)(v101 - 3) = v113;
            v93 -= 3;
            v101 -= 3;
          }
          while (v93 != v94);
LABEL_115:
          *a1 = v105;
          a1[1] = v103;
          a1[2] = (unint64_t *)v102;
          if (!v94)
          {
LABEL_117:
            a5 = (mlir::pdl_to_pdl_interp::OperationPosition *)v188;
            goto LABEL_118;
          }
LABEL_116:
          operator delete(v94);
          goto LABEL_117;
        }
LABEL_169:
        *a1 = v101;
        a1[1] = v103;
        a1[2] = (unint64_t *)v102;
        if (!v94)
          goto LABEL_117;
        goto LABEL_116;
      }
LABEL_172:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_171:
    abort();
  }
LABEL_105:
  *v93 = (unint64_t)a5;
  v93[1] = v90;
  v103 = v93 + 3;
  v93[2] = v91;
LABEL_118:
  a1[1] = v103;
LABEL_119:
  FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&DefiningOp);
  AttributeValues = mlir::pdl::OperationOp::getAttributeValues((mlir::pdl::OperationOp *)&DefiningOp);
  v196.n128_u64[0] = FastmathAttr;
  v196.n128_u64[1] = AttributeValues;
  v197 = v116;
  v117 = a5;
  Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v196);
  v119 = v196.n128_u64[1];
  result = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v196);
  v122 = (uint64_t *)(result + 8 * v121);
  v187 = a4;
  v123 = (unsigned __int8 ***)v190;
  if (v122 != Value)
  {
    if (v119 == v196.n128_u64[1])
    {
      v133 = v197;
      v134 = (uint64_t *)(v119 + 24);
      v117 = (mlir::pdl_to_pdl_interp::OperationPosition *)v188;
      v123 = (unsigned __int8 ***)v190;
      do
      {
        if (!v133)
          break;
        v136 = *v134;
        v134 += 4;
        v135 = v136;
        v137 = *Value++;
        v192 = v137;
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v192);
        v200.n128_u64[0] = v188;
        v140 = *v190;
        v139 = (mlir::StringAttr *)v190[1];
        v203 = 261;
        v201.n128_u64[0] = AttrData;
        v201.n128_u64[1] = v141;
        v195 = mlir::StringAttr::get(v139, (mlir::MLIRContext *)&v201);
        v142 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>((unsigned __int8 **)v140, 0, 0, &v200, &v195);
        result = getTreePredicates(v191, v135, v190, a4, v142);
        --v133;
      }
      while (Value != v122);
    }
    else
    {
      v124 = (uint64_t *)(v119 + 24);
      v117 = (mlir::pdl_to_pdl_interp::OperationPosition *)v188;
      v123 = (unsigned __int8 ***)v190;
      do
      {
        v126 = *v124;
        v124 += 4;
        v125 = v126;
        v127 = *Value++;
        v192 = v127;
        v128 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v192);
        v200.n128_u64[0] = v188;
        v130 = *v190;
        v129 = (mlir::StringAttr *)v190[1];
        v203 = 261;
        v201.n128_u64[0] = v128;
        v201.n128_u64[1] = v131;
        v195 = mlir::StringAttr::get(v129, (mlir::MLIRContext *)&v201);
        v132 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>((unsigned __int8 **)v130, 0, 0, &v200, &v195);
        result = getTreePredicates(v191, v125, v190, a4, v132);
      }
      while (Value != v122);
    }
  }
  v143 = v123;
  v144 = (unint64_t)v117;
  if (v189)
  {
    if (v189 == 1
      && (v145 = *(_QWORD *)(OperandValues + 24),
          *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(v145 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id))
    {
      if (*((_DWORD *)v117 + 8))
      {
        result = mlir::pdl_to_pdl_interp::OperationPosition::isOperandDefiningOp(v117);
        if (!(_DWORD)result)
          goto LABEL_142;
        v145 = *(_QWORD *)(OperandValues + 24);
      }
      v201.n128_u64[0] = 0;
      v196.n128_u64[0] = (unint64_t)v117;
      v200.n128_u8[0] = 1;
      v152 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v123, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
      result = getTreePredicates(v191, v145, v123, a4, v152);
    }
    else
    {
      v146 = 0;
      v147 = 0;
      v148 = OperandValues + 24;
      do
      {
        v150 = *(_QWORD *)v148;
        v151 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v148 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        v146 |= v151 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
        if ((v183 & 0xFF00000000) == 0 || v183 != v147)
        {
          if ((v146 & 1) != 0)
          {
            v201.n128_u64[0] = v147 | 0x100000000;
            v196.n128_u64[0] = v144;
            v200.n128_u8[0] = v151 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
            v149 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v123, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
          }
          else
          {
            v201.n128_u64[0] = v144;
            v196.n128_u32[0] = v147;
            v149 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(*v123, 0, 0, &v201, (unsigned int *)&v196);
          }
          result = getTreePredicates(v191, v150, v123, a4, v149);
        }
        ++v147;
        v148 += 32;
      }
      while (v189 != v147);
    }
  }
LABEL_142:
  v153 = v191;
  v154 = v185;
  if (v185)
  {
    if (v185 != 1
      || (v155 = *(_QWORD *)(v186 + 24),
          *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(v155 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id))
    {
      v156 = 0;
      v157 = 0;
      while (1)
      {
        v160 = *(_QWORD *)(v186 + 32 * v157 + 24);
        v161 = *(void **)(*(_QWORD *)(*(_QWORD *)(v160 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        v156 |= v161 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
        if ((v156 & 1) != 0)
        {
          v201.n128_u64[0] = v157 | 0x100000000;
          v196.n128_u64[0] = v144;
          v200.n128_u8[0] = v161 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id;
          v162 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v143, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
        }
        else
        {
          v201.n128_u64[0] = v144;
          v196.n128_u32[0] = v157;
          v162 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(*v143, 0, 0, &v201, (unsigned int *)&v196);
        }
        v163 = v162;
        v164 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>((uint64_t *)*v143);
        v165 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v143);
        v166 = v165;
        v168 = v153[1];
        v167 = (unint64_t)v153[2];
        if ((unint64_t)v168 >= v167)
          break;
        *v168 = v163;
        v168[1] = v164;
        v158 = v168 + 3;
        v168[2] = v165;
        v143 = (unsigned __int8 ***)v190;
        v144 = v188;
LABEL_147:
        v153[1] = v158;
        v201.n128_u64[0] = v163;
        v159 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v143, 0, 0, &v201);
        result = getTreePredicates(v153, v160, v143, v187, v159);
        if (++v157 == v154)
          return result;
      }
      v169 = *v153;
      v170 = 0xAAAAAAAAAAAAAAABLL * (v168 - *v153);
      v171 = v170 + 1;
      if (v170 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_171;
      v172 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v167 - (_QWORD)v169) >> 3);
      if (2 * v172 > v171)
        v171 = 2 * v172;
      if (v172 >= 0x555555555555555)
        v173 = 0xAAAAAAAAAAAAAAALL;
      else
        v173 = v171;
      if (v173 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_172;
      v174 = 24 * v173;
      v175 = (char *)operator new(24 * v173);
      v176 = (unint64_t *)&v175[24 * v170];
      *v176 = v163;
      v176[1] = v164;
      v176[2] = v166;
      if (v168 == v169)
      {
        v144 = v188;
        v181 = &v175[v174];
        v158 = v176 + 3;
        v153 = v191;
        *v191 = v176;
        v191[1] = v176 + 3;
        v191[2] = (unint64_t *)v181;
        if (!v169)
          goto LABEL_164;
      }
      else
      {
        v177 = &v175[24 * v170];
        v144 = v188;
        do
        {
          v178 = *(_OWORD *)(v168 - 3);
          v179 = v177 - 24;
          *((_QWORD *)v177 - 1) = *(v168 - 1);
          *(_OWORD *)(v177 - 24) = v178;
          v168 -= 3;
          v177 -= 24;
        }
        while (v168 != v169);
        v180 = &v175[v174];
        v158 = v176 + 3;
        v153 = v191;
        *v191 = (unint64_t *)v179;
        v191[1] = v176 + 3;
        v191[2] = (unint64_t *)v180;
        if (!v169)
          goto LABEL_164;
      }
      operator delete(v169);
LABEL_164:
      v143 = (unsigned __int8 ***)v190;
      v154 = v185;
      goto LABEL_147;
    }
    v201.n128_u64[0] = 0;
    v196.n128_u64[0] = v144;
    v200.n128_u8[0] = 1;
    v201.n128_u64[0] = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v123, 0, 0, (const char **)&v196, v201.n128_u64, (char *)&v200);
    v182 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v123, 0, 0, &v201);
    return getTreePredicates(v191, v155, v123, a4, v182);
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameQuestion>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) != 0)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[64]);
  v13 = a1;
  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  v5 = v4;
  a1 = v13;
  if (!v5)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[64]);
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameQuestion]";
  v15 = 96;
  v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  if (v15 >= v6)
    v7 = v6;
  else
    v7 = v15;
  v8 = &v14[v7];
  v9 = v15 - v7;
  if (v15 - v7 >= 0x12)
    v10 = 18;
  else
    v10 = v15 - v7;
  v11 = v9 - v10;
  if (v11 >= v11 - 1)
    v12 = v11 - 1;
  else
    v12 = v11;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  return mlir::StorageUniquer::getSingletonImpl(v13, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v22 = a1;
    v19 = a4;
    v20 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a4 = v19;
    a2 = v20;
    v11 = v10;
    a3 = v21;
    a1 = v22;
    if (v11)
    {
      v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationNameAnswer]";
      v27 = 94;
      v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12)
        v13 = v12;
      else
        v13 = v27;
      v14 = &v26[v13];
      v15 = v27 - v13;
      if (v27 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v27 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationNameAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a4 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  v6 = v5[42];
  v7 = *a4;
  v8 = *a4 >> 4;
  v26 = a2;
  v27 = a3;
  v25 = v7;
  v23[0] = &v25;
  v23[1] = &v26;
  v24 = &v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8 ^ (v7 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationNameAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationNameAnswer,mlir::OperationName>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationNameAnswer *)>,mlir::TypeID,mlir::OperationName &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)a1;
  *(_QWORD *)(a2 + 80) += 16;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 16 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 16;
  *(_DWORD *)v10 = 23;
  *(_QWORD *)(v10 + 8) = *v4;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) != 0)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[62]);
  v13 = a1;
  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  v5 = v4;
  a1 = v13;
  if (!v5)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[62]);
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion]";
  v15 = 102;
  v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  if (v15 >= v6)
    v7 = v6;
  else
    v7 = v15;
  v8 = &v14[v7];
  v9 = v15 - v7;
  if (v15 - v7 >= 0x12)
    v10 = 18;
  else
    v10 = v15 - v7;
  v11 = v9 - v10;
  if (v11 >= v11 - 1)
    v12 = v11 - 1;
  else
    v12 = v11;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  return mlir::StorageUniquer::getSingletonImpl(v13, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountAtLeastQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _DWORD *a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  _DWORD *v19;
  unsigned __int8 **v20;
  _QWORD v21[2];
  int *v22;
  int v23;
  const char *v24;
  unint64_t v25;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v19 = a4;
    v20 = a1;
    v17 = a2;
    v18 = a3;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v17;
    a3 = v18;
    v9 = v8;
    a4 = v19;
    a1 = v20;
    if (v9)
    {
      v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::UnsignedAnswer]";
      v25 = 89;
      v10 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
      if (v25 >= v10)
        v11 = v10;
      else
        v11 = v25;
      v12 = &v24[v11];
      v13 = v25 - v11;
      if (v25 - v11 >= 0x12)
        v14 = 18;
      else
        v14 = v25 - v11;
      v15 = v13 - v14;
      if (v15 >= v15 - 1)
        v16 = v15 - 1;
      else
        v16 = v15;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::UnsignedAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v17;
      a3 = v18;
      a4 = v19;
      a1 = v20;
    }
  }
  v6 = v5[46];
  v24 = a2;
  v25 = a3;
  v23 = *a4;
  v21[0] = &v23;
  v21[1] = &v24;
  v22 = &v23;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, 37 * v23, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v22, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v21);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_DWORD **a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **a1;
}

_DWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UnsignedAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UnsignedAnswer,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UnsignedAnswer *)>,mlir::TypeID,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v4 = *(_DWORD **)a1;
  *(_QWORD *)(a2 + 80) += 16;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 16 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (_DWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v10 = (_DWORD *)((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a2 = v10 + 4;
  *v10 = 26;
  v10[2] = *v4;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, _DWORD *))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandCountQuestion>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) != 0)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[60]);
  v13 = a1;
  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  v5 = v4;
  a1 = v13;
  if (!v5)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[60]);
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandCountQuestion]";
  v15 = 95;
  v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  if (v15 >= v6)
    v7 = v6;
  else
    v7 = v15;
  v8 = &v14[v7];
  v9 = v15 - v7;
  if (v15 - v7 >= 0x12)
    v10 = 18;
  else
    v10 = v15 - v7;
  v11 = v9 - v10;
  if (v11 >= v11 - 1)
    v12 = v11 - 1;
  else
    v12 = v11;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  return mlir::StorageUniquer::getSingletonImpl(v13, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandCountQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountQuestion>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) != 0)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[66]);
  v13 = a1;
  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  v5 = v4;
  a1 = v13;
  if (!v5)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[66]);
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountQuestion]";
  v15 = 94;
  v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  if (v15 >= v6)
    v7 = v6;
  else
    v7 = v15;
  v8 = &v14[v7];
  v9 = v15 - v7;
  if (v15 - v7 >= 0x12)
    v10 = 18;
  else
    v10 = v15 - v7;
  v11 = v9 - v10;
  if (v11 >= v11 - 1)
    v12 = v11 - 1;
  else
    v12 = v11;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  return mlir::StorageUniquer::getSingletonImpl(v13, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) != 0)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[68]);
  v13 = a1;
  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  v5 = v4;
  a1 = v13;
  if (!v5)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[68]);
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion]";
  v15 = 101;
  v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  if (v15 >= v6)
    v7 = v6;
  else
    v7 = v15;
  v8 = &v14[v7];
  v9 = v15 - v7;
  if (v15 - v7 >= 0x12)
    v10 = 18;
  else
    v10 = v15 - v7;
  v11 = v9 - v10;
  if (v11 >= v11 - 1)
    v12 = v11 - 1;
  else
    v12 = v11;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  return mlir::StorageUniquer::getSingletonImpl(v13, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultCountAtLeastQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned __int8 **v26;
  _QWORD v27[2];
  _QWORD *v28;
  _QWORD v29[2];
  const char *v30;
  unint64_t v31;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v25 = a5;
    v26 = a1;
    v23 = a3;
    v24 = a4;
    v22 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v22;
    a3 = v23;
    a4 = v24;
    a5 = v25;
    v14 = v13;
    a1 = v26;
    if (v14)
    {
      v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributePosition]";
      v31 = 92;
      v15 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
      if (v31 >= v15)
        v16 = v15;
      else
        v16 = v31;
      v17 = &v30[v16];
      v18 = v31 - v16;
      if (v31 - v16 >= 0x12)
        v19 = 18;
      else
        v19 = v31 - v16;
      v20 = v18 - v19;
      if (v20 >= v20 - 1)
        v21 = v20 - 1;
      else
        v21 = v20;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributePosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v22;
      a3 = v23;
      a4 = v24;
      a5 = v25;
      a1 = v26;
    }
  }
  v30 = a2;
  v31 = a3;
  v7 = *a5;
  v8 = (*a5 >> 4) ^ (*a5 >> 9);
  v9 = (v8 | ((unint64_t)((*a4 >> 4) ^ (*a4 >> 9)) << 32)) + ~(v8 << 32);
  v10 = v5[18];
  v11 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v29[0] = *a4;
  v29[1] = v7;
  v27[0] = v29;
  v27[1] = &v30;
  v28 = v29;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v10, (((v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27)) >> 31) ^ ((v11 ^ (v11 >> 15))+ ~((v11 ^ (v11 >> 15)) << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v28, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v27);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1 && *(_QWORD *)(a2 + 32) == *(_QWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributePosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributePosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,mlir::StringAttr &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>,(mlir::pdl_to_pdl_interp::Predicates::Kind)3>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>>(a2, *(__n128 **)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, double))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

double mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::AttributePosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>,(mlir::pdl_to_pdl_interp::Predicates::Kind)3>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,mlir::StringAttr>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  double result;

  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 40;
  *(_QWORD *)&result = mlir::pdl_to_pdl_interp::AttributePosition::AttributePosition(v9, a2).n128_u64[0];
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, const char **a4, unint64_t *a5, char *a6)
{
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char **v22;
  unint64_t *v23;
  char *v24;
  _QWORD v25[2];
  const char **v26;
  const char *v27;
  unint64_t v28;
  char v29[8];
  _QWORD v30[2];

  if ((v7 & 1) == 0)
  {
    v23 = a5;
    v24 = a6;
    v21 = a3;
    v22 = a4;
    v20 = a2;
    a2 = v20;
    a3 = v21;
    a4 = v22;
    a5 = v23;
    a6 = v24;
    if (v12)
    {
      v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandGroupPosition]";
      v28 = 95;
      v13 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
      if (v28 >= v13)
        v14 = v13;
      else
        v14 = v28;
      v15 = &v27[v14];
      v16 = v28 - v14;
      if (v28 - v14 >= 0x12)
        v17 = 18;
      else
        v17 = v28 - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      a2 = v20;
      a3 = v21;
      a4 = v22;
      a5 = v23;
      a6 = v24;
    }
  }
  v8 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandGroupPosition,void>::resolveTypeID(void)::id;
  v30[0] = a2;
  v30[1] = a3;
  v9 = *a5;
  v27 = *a4;
  v28 = v9;
  v29[0] = *a6;
  v10 = llvm::hash_combine<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>(&v27, (uint64_t)&v28, v29);
  v25[0] = &v27;
  v25[1] = v30;
  v26 = &v27;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v8, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v26, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v25);
}

unint64_t llvm::hash_combine<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>(_QWORD *a1, uint64_t a2, char *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v17[4];
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  if ((v4 & 1) == 0)
  {
    v14 = a1;
    v10 = a2;
    a2 = v10;
    v12 = v11;
    a1 = v14;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      a1 = v14;
      a2 = v10;
    }
  }
  v5 = *a1;
  v20 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v17[0] = v5;
  v15 = 0;
  v6 = llvm::hash_value<unsigned int>(a2);
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v15, (_QWORD *)v17 + 1, (unint64_t)v18, v6);
  v16 = v15;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v17, (uint64_t *)&v16, v7, (unint64_t)v18, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v17, v16, v8, (char *)v18);
}

unint64_t llvm::hash_value<unsigned int>(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  unsigned __int8 v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 4))
  {
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    memset(v11, 0, sizeof(v11));
    v1 = &unk_254519000;
    if ((v2 & 1) == 0)
    {
      v10 = a1;
      v1 = &unk_254519000;
      v7 = v6;
      a1 = v10;
      if (v7)
      {
        v8 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v8 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v8;
        v1 = (_QWORD *)&unk_254519000;
        a1 = v10;
      }
    }
    v14 = v1[373];
    LOBYTE(v11[0]) = 1;
    *(_DWORD *)((char *)v11 + 1) = *(_DWORD *)a1;
    return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v11, 0, (char *)v11 + 5, (char *)v12);
  }
  else
  {
    if ((v4 & 1) == 0
    {
      v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v9 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
    }
    v5 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * llvm::hashing::detail::get_execution_seed(void)::seed) ^ ((0x9DDFEA08EB382D69
                                                                                           * llvm::hashing::detail::get_execution_seed(void)::seed) >> 47));
    return 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
  }
}

char *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(_QWORD *a1, uint64_t *a2, _BYTE *__dst, unint64_t a4, char a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v20 = 0xB492B66FBE98F273 * __ROR8__(v14 + a1[10], 33);
      v21 = *a1 - 0x4B6D499041670D8DLL * v13;
      v22 = v21 + v14;
      v24 = a1[2];
      v23 = a1[3];
      v25 = a1[5];
      v26 = v19 + v25;
      v27 = a1[4] + v17 + v20;
      v28 = v21 + v12 + v24;
      v29 = v25 + v16 + v27;
      a1[12] = __ROR8__(v22 + v23 + v18, 21) + v21 + __ROR8__(v28, 44);
      a1[13] = v29 + v15;
      a1[14] = __ROR8__(v27 + v15 + v24 + v26, 21) + v27 + __ROR8__(v29, 44);
      a1[10] = v18;
      a1[11] = v28 + v23;
      a1[8] = v20;
      a1[9] = v26;
      *a2 = v9 + 64;
      v30 = 1 - v8;
      v31 = (char *)a1 + 1 - v8;
      if ((unint64_t)v31 > a4)
        return (char *)a1;
      goto LABEL_7;
    }
    v32 = a1[15];
    v33 = __ROR8__(v32 ^ 0xB492B66FBE98F273, 49);
    v34 = v32 ^ (v32 >> 47);
    v35 = a1[1];
    v36 = v35 + v32 + v33;
    v37 = a1[6];
    v38 = a1[7];
    v39 = a1[5];
    v40 = v39 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v37 + v32 - 0x4B6D499041670D8DLL * v32, 42);
    v41 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v42 = 0x9DDFEA08EB382D69
        * (v32 ^ (((0x9DDFEA08EB382D69 * (v34 ^ (0xB492B66FBE98F273 * v32))) ^ v32) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v34 ^ (0xB492B66FBE98F273 * v32))));
    v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    v44 = 0xB492B66FBE98F273 * __ROR8__(v34 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 33);
    v45 = *a1 - 0x6D8ED9027DD26057 * v32;
    v47 = a1[2];
    v46 = a1[3];
    v48 = v45 + v35 + v47;
    v49 = v43 ^ (0xB492B66FBE98F273 * __ROR8__(v36, 37));
    v50 = v44 + a1[4] + v43;
    a1[8] = v44;
    a1[9] = v40;
    a1[10] = v49;
    a1[11] = v48 + v46;
    a1[12] = __ROR8__(v48, 44) + v45 + __ROR8__(v45 + v34 + v46 + v49, 21);
    a1[13] = v39 + v37 + v50 + v38;
    a1[14] = __ROR8__(v39 + v37 + v50, 44) + v50 + __ROR8__(v40 + v47 + v38 + v50, 21);
    *a2 = 64;
    v30 = 1 - v8;
    v31 = (char *)a1 + 1 - v8;
    if ((unint64_t)v31 <= a4)
    {
LABEL_7:
      memcpy(a1, &__src + v8, v30);
      return v31;
    }
  }
  return (char *)a1;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  BOOL v5;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)*a1)
    return 0;
  v4 = *((unsigned __int8 *)v2 + 12);
  if (*(_BYTE *)(a2 + 36))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a2 + 36) != 0) == (v4 != 0))
      return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) != *((_DWORD *)v2 + 2))
    return 0;
  return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)2>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(a2, *(__n128 **)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, double))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

double mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)2>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  double result;

  *(_QWORD *)(a1 + 80) += 48;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 48 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 48;
  *(_QWORD *)&result = mlir::pdl_to_pdl_interp::OperandGroupPosition::OperandGroupPosition(v9, a2).n128_u64[0];
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned int *v24;
  unsigned __int8 **v25;
  _QWORD v26[2];
  _QWORD *v27;
  _QWORD v28[2];
  const char *v29;
  unint64_t v30;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v24 = a5;
    v25 = a1;
    v22 = a3;
    v23 = a4;
    v21 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v21;
    a3 = v22;
    a4 = v23;
    a5 = v24;
    v13 = v12;
    a1 = v25;
    if (v13)
    {
      v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperandPosition]";
      v30 = 90;
      v14 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v14)
        v15 = v14;
      else
        v15 = v30;
      v16 = &v29[v15];
      v17 = v30 - v15;
      if (v30 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v30 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperandPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v21;
      a3 = v22;
      a4 = v23;
      a5 = v24;
      a1 = v25;
    }
  }
  v29 = a2;
  v30 = a3;
  v7 = *a5;
  v8 = ~((unint64_t)(37 * v7) << 32)
     + (37 * v7)
     + ((unint64_t)((*a4 >> 4) ^ (*a4 >> 9)) << 32);
  v9 = v5[24];
  v10 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  v28[0] = *a4;
  v28[1] = v7;
  v26[0] = v28;
  v26[1] = &v29;
  v27 = v28;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v9, (((v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27)) >> 31) ^ ((v10 ^ (v10 >> 15))+ ~((v10 ^ (v10 >> 15)) << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v27, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperandPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperandPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)1>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(a2, *(__n128 **)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, double))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

double mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperandPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)1>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  double result;

  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 40;
  *(_QWORD *)&result = mlir::pdl_to_pdl_interp::OperandPosition::OperandPosition(v9, a2).n128_u64[0];
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, const char **a4, unint64_t *a5, char *a6)
{
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char **v22;
  unint64_t *v23;
  char *v24;
  _QWORD v25[2];
  const char **v26;
  const char *v27;
  unint64_t v28;
  char v29[8];
  _QWORD v30[2];

  if ((v7 & 1) == 0)
  {
    v23 = a5;
    v24 = a6;
    v21 = a3;
    v22 = a4;
    v20 = a2;
    a2 = v20;
    a3 = v21;
    a4 = v22;
    a5 = v23;
    a6 = v24;
    if (v12)
    {
      v27 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultGroupPosition]";
      v28 = 94;
      v13 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
      if (v28 >= v13)
        v14 = v13;
      else
        v14 = v28;
      v15 = &v27[v14];
      v16 = v28 - v14;
      if (v28 - v14 >= 0x12)
        v17 = 18;
      else
        v17 = v28 - v14;
      v18 = v16 - v17;
      if (v18 >= v18 - 1)
        v19 = v18 - 1;
      else
        v19 = v18;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultGroupPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      a2 = v20;
      a3 = v21;
      a4 = v22;
      a5 = v23;
      a6 = v24;
    }
  }
  v8 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultGroupPosition,void>::resolveTypeID(void)::id;
  v30[0] = a2;
  v30[1] = a3;
  v9 = *a5;
  v27 = *a4;
  v28 = v9;
  v29[0] = *a6;
  v10 = llvm::hash_combine<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>(&v27, (uint64_t)&v28, v29);
  v25[0] = &v27;
  v25[1] = v30;
  v26 = &v27;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v8, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v26, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v25);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  BOOL v5;

  v2 = (_QWORD *)*a1;
  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)*a1)
    return 0;
  v4 = *((unsigned __int8 *)v2 + 12);
  if (*(_BYTE *)(a2 + 36))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a2 + 36) != 0) == (v4 != 0))
      return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) != *((_DWORD *)v2 + 2))
    return 0;
  return *(unsigned __int8 *)(a2 + 40) == *((unsigned __int8 *)v2 + 16);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultGroupPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultGroupPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)5>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)5>::construct<std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;

  *(_QWORD *)(a1 + 80) += 48;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 48 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 48;
  *(_DWORD *)(v9 + 16) = 5;
  *(_QWORD *)v9 = &unk_24C0344C0;
  *(_QWORD *)(v9 + 8) = 0;
  result = *a2;
  *(_QWORD *)(v9 + 40) = a2[1].n128_u64[0];
  *(__n128 *)(v9 + 24) = result;
  v11 = a2->n128_u64[0];
  *(_QWORD *)v9 = &unk_24C0345C0;
  *(_QWORD *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ResultGroupPosition::~ResultGroupPosition(mlir::pdl_to_pdl_interp::ResultGroupPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::Position,std::tuple<mlir::pdl_to_pdl_interp::OperationPosition *,std::optional<unsigned int>,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)5>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned int *v24;
  unsigned __int8 **v25;
  _QWORD v26[2];
  _QWORD *v27;
  _QWORD v28[2];
  const char *v29;
  unint64_t v30;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v24 = a5;
    v25 = a1;
    v22 = a3;
    v23 = a4;
    v21 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a2 = v21;
    a3 = v22;
    a4 = v23;
    a5 = v24;
    v13 = v12;
    a1 = v25;
    if (v13)
    {
      v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ResultPosition]";
      v30 = 89;
      v14 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v14)
        v15 = v14;
      else
        v15 = v30;
      v16 = &v29[v15];
      v17 = v30 - v15;
      if (v30 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v30 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ResultPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a2 = v21;
      a3 = v22;
      a4 = v23;
      a5 = v24;
      a1 = v25;
    }
  }
  v29 = a2;
  v30 = a3;
  v7 = *a5;
  v8 = ~((unint64_t)(37 * v7) << 32)
     + (37 * v7)
     + ((unint64_t)((*a4 >> 4) ^ (*a4 >> 9)) << 32);
  v9 = v5[30];
  v10 = 9 * (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) ^ (((v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13)) >> 8));
  v28[0] = *a4;
  v28[1] = v7;
  v26[0] = v28;
  v26[1] = &v29;
  v27 = v28;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v9, (((v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27)) >> 31) ^ ((v10 ^ (v10 >> 15))+ ~((v10 ^ (v10 >> 15)) << 27)), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v27, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ResultPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ResultPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)4>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)4>::construct<std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;

  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 4;
  *(_QWORD *)v9 = &unk_24C034420;
  *(_QWORD *)(v9 + 8) = 0;
  result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  v11 = a2->n128_u64[0];
  *(_QWORD *)v9 = &unk_24C034520;
  *(_QWORD *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ResultPosition::~ResultPosition(mlir::pdl_to_pdl_interp::ResultPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::OperationPosition *,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)4>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeQuestion>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  unint64_t v15;

  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v1 & 1) != 0)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[70]);
  v13 = a1;
  v2 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  v5 = v4;
  a1 = v13;
  if (!v5)
    return mlir::StorageUniquer::getSingletonImpl(a1, v2[70]);
  v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeQuestion]";
  v15 = 87;
  v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
  if (v15 >= v6)
    v7 = v6;
  else
    v7 = v15;
  v8 = &v14[v7];
  v9 = v15 - v7;
  if (v15 - v7 >= 0x12)
    v10 = 18;
  else
    v10 = v15 - v7;
  v11 = v9 - v10;
  if (v11 >= v11 - 1)
    v12 = v11 - 1;
  else
    v12 = v11;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
  return mlir::StorageUniquer::getSingletonImpl(v13, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeQuestion,void>::resolveTypeID(void)::id);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v22 = a1;
    v19 = a4;
    v20 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a4 = v19;
    a2 = v20;
    v11 = v10;
    a3 = v21;
    a1 = v22;
    if (v11)
    {
      v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeAnswer]";
      v27 = 85;
      v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12)
        v13 = v12;
      else
        v13 = v27;
      v14 = &v26[v13];
      v15 = v27 - v13;
      if (v27 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v27 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeAnswer,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a4 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  v6 = v5[44];
  v7 = *a4;
  v8 = *a4 >> 4;
  v26 = a2;
  v27 = a3;
  v25 = v7;
  v23[0] = &v25;
  v23[1] = &v26;
  v24 = &v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8 ^ (v7 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeAnswer * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeAnswer,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeAnswer *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)a1;
  *(_QWORD *)(a2 + 80) += 16;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 16 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 16;
  *(_DWORD *)v10 = 25;
  *(_QWORD *)(v10 + 8) = *v4;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(_BYTE *a1, uint64_t **a2)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t IsNotNull;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  uint64_t ValueType;
  uint64_t v26;
  unsigned __int8 ***v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  if (a1[8])
    return a1;
  if (!*(_QWORD *)a1
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 16) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id)
  {
    return a1;
  }
  v32 = *(_QWORD *)a1;
  v6 = *a2;
  v5 = a2[1];
  v7 = (uint64_t **)a2[2];
  IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v7);
  v9 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v7);
  v10 = v9;
  v12 = (uint64_t *)v5[1];
  v11 = v5[2];
  if ((unint64_t)v12 < v11)
  {
    *v12 = *v6;
    v12[1] = IsNotNull;
    v12[2] = v9;
    v13 = v12 + 3;
    goto LABEL_20;
  }
  v14 = (uint64_t *)*v5;
  v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *v5) >> 3);
  v16 = v15 + 1;
  if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x555555555555555)
    v18 = 0xAAAAAAAAAAAAAAALL;
  else
    v18 = v16;
  if (v18 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v19 = 24 * v18;
  v20 = (char *)operator new(24 * v18);
  v21 = &v20[24 * v15];
  v22 = &v20[v19];
  *(_QWORD *)v21 = *v6;
  *((_QWORD *)v21 + 1) = IsNotNull;
  *((_QWORD *)v21 + 2) = v10;
  v13 = v21 + 24;
  if (v12 == v14)
  {
    *v5 = (uint64_t)v21;
    v5[1] = (uint64_t)v13;
    v5[2] = (uint64_t)v22;
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  do
  {
    v23 = *(_OWORD *)(v12 - 3);
    v24 = v21 - 24;
    *((_QWORD *)v21 - 1) = *(v12 - 1);
    *(_OWORD *)(v21 - 24) = v23;
    v12 -= 3;
    v21 -= 24;
  }
  while (v12 != v14);
  *v5 = (uint64_t)v24;
  v5[1] = (uint64_t)v13;
  v5[2] = (uint64_t)v22;
  if (v14)
LABEL_19:
    operator delete(v14);
LABEL_20:
  v5[1] = (uint64_t)v13;
  ValueType = mlir::pdl::AttributeOp::getValueType((mlir::pdl::AttributeOp *)&v32);
  if (ValueType)
  {
    v26 = ValueType;
    v27 = (unsigned __int8 ***)a2[2];
    v28 = a2[3];
    v29 = a2[1];
    v33 = **a2;
    v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v27, 0, 0, &v33);
    getTreePredicates(v29, v26, v27, v28, v30);
  }
  a1[8] = 1;
  return a1;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::OperandsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_0 &>(_BYTE *a1, uint64_t **a2)
{
  uint64_t *v5;
  uint64_t **v6;
  char **v7;
  uint64_t IsNotNull;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  uint64_t ValueType;
  uint64_t v26;
  unsigned __int8 ***v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  if (a1[8])
    return a1;
  if (!*(_QWORD *)a1
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 16) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id)
  {
    return a1;
  }
  v32 = *(_QWORD *)a1;
  v5 = *a2;
  if (*(_BYTE *)(**a2 + 36))
  {
    v7 = (char **)a2[1];
    v6 = (uint64_t **)a2[2];
    IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v6);
    v9 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v6);
    v10 = v9;
    v12 = v7[1];
    v11 = (unint64_t)v7[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = *v7;
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *v7) >> 3);
      v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v14) >> 3);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v16;
      if (v18 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = 24 * v18;
      v20 = (char *)operator new(24 * v18);
      v21 = &v20[24 * v15];
      v22 = &v20[v19];
      *(_QWORD *)v21 = *v5;
      *((_QWORD *)v21 + 1) = IsNotNull;
      *((_QWORD *)v21 + 2) = v10;
      v13 = v21 + 24;
      if (v12 == v14)
      {
        *v7 = v21;
        v7[1] = v13;
        v7[2] = v22;
        if (!v14)
          goto LABEL_21;
      }
      else
      {
        do
        {
          v23 = *(_OWORD *)(v12 - 24);
          v24 = v21 - 24;
          *((_QWORD *)v21 - 1) = *((_QWORD *)v12 - 1);
          *(_OWORD *)(v21 - 24) = v23;
          v12 -= 24;
          v21 -= 24;
        }
        while (v12 != v14);
        *v7 = v24;
        v7[1] = v13;
        v7[2] = v22;
        if (!v14)
          goto LABEL_21;
      }
      operator delete(v14);
    }
    else
    {
      *(_QWORD *)v12 = *v5;
      *((_QWORD *)v12 + 1) = IsNotNull;
      *((_QWORD *)v12 + 2) = v9;
      v13 = v12 + 24;
    }
LABEL_21:
    v7[1] = v13;
  }
  ValueType = mlir::pdl::AttributeOp::getValueType((mlir::pdl::AttributeOp *)&v32);
  if (ValueType)
  {
    v26 = ValueType;
    v27 = (unsigned __int8 ***)a2[2];
    v28 = a2[3];
    v29 = a2[1];
    v33 = **a2;
    v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypePosition,mlir::pdl_to_pdl_interp::Position *&>(*v27, 0, 0, &v33);
    getTreePredicates(v29, v26, v27, v28, v30);
  }
  a1[8] = 1;
  return a1;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(_BYTE *a1, uint64_t *a2)
{
  unsigned int Index;
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t IsNotNull;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  unsigned __int8 **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  __int128 v46;
  uint64_t *v47;
  unsigned __int8 ***v48;
  uint64_t v49;
  unsigned __int8 ***v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t *v65;
  char *v66;
  __int128 v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t Input;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;

  if (!a1[8]
    && *(_QWORD *)a1
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id)
  {
    v74 = *(_QWORD *)a1;
    Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v74);
    v7 = *a2;
    v6 = (_QWORD *)a2[1];
    v8 = (uint64_t **)a2[2];
    IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v8);
    v10 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v8);
    v11 = v10;
    v13 = *(_QWORD **)(v7 + 8);
    v12 = *(_QWORD *)(v7 + 16);
    v72 = Index;
    if ((unint64_t)v13 < v12)
    {
      *v13 = *v6;
      v13[1] = IsNotNull;
      v13[2] = v10;
      v14 = v13 + 3;
      goto LABEL_21;
    }
    v15 = *(_QWORD **)v7;
    v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(_QWORD *)v7) >> 3);
    v17 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v15) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v17;
    if (v19 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_58;
    v20 = 24 * v19;
    v21 = (char *)operator new(24 * v19);
    v22 = &v21[24 * v16];
    v23 = &v21[v20];
    *(_QWORD *)v22 = *v6;
    *((_QWORD *)v22 + 1) = IsNotNull;
    *((_QWORD *)v22 + 2) = v11;
    v14 = v22 + 24;
    if (v13 == v15)
    {
      Index = v72;
      *(_QWORD *)v7 = v22;
      *(_QWORD *)(v7 + 8) = v14;
      *(_QWORD *)(v7 + 16) = v23;
      if (v15)
LABEL_20:
        operator delete(v15);
    }
    else
    {
      Index = v72;
      do
      {
        v24 = *(_OWORD *)(v13 - 3);
        v25 = v22 - 24;
        *((_QWORD *)v22 - 1) = *(v13 - 1);
        *(_OWORD *)(v22 - 24) = v24;
        v13 -= 3;
        v22 -= 24;
      }
      while (v13 != v15);
      *(_QWORD *)v7 = v25;
      *(_QWORD *)(v7 + 8) = v14;
      *(_QWORD *)(v7 + 16) = v23;
      if (v15)
        goto LABEL_20;
    }
LABEL_21:
    *(_QWORD *)(v7 + 8) = v14;
    v26 = *(unsigned __int8 ***)a2[2];
    v76 = *(_QWORD *)a2[1];
    v75 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v76) + 1;
    v27 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v26, 0, 0, &v76, &v75);
    v28 = *a2;
    v29 = (uint64_t **)a2[2];
    v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v29);
    v31 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v29);
    v32 = v31;
    v34 = *(uint64_t **)(v28 + 8);
    v33 = *(_QWORD *)(v28 + 16);
    if ((unint64_t)v34 < v33)
    {
      *v34 = v27;
      v34[1] = v30;
      v35 = v34 + 3;
      v34[2] = v31;
      goto LABEL_35;
    }
    v36 = *(uint64_t **)v28;
    v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v34 - *(_QWORD *)v28) >> 3);
    v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_57;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v36) >> 3);
    if (2 * v39 > v38)
      v38 = 2 * v39;
    if (v39 >= 0x555555555555555)
      v40 = 0xAAAAAAAAAAAAAAALL;
    else
      v40 = v38;
    if (v40 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_58;
    v41 = v27;
    v42 = 24 * v40;
    v43 = (char *)operator new(24 * v40);
    v44 = (uint64_t *)&v43[24 * v37];
    v45 = &v43[v42];
    v27 = v41;
    *v44 = v41;
    v44[1] = v30;
    v44[2] = v32;
    v35 = v44 + 3;
    if (v34 == v36)
    {
      Index = v72;
      *(_QWORD *)v28 = v44;
      *(_QWORD *)(v28 + 8) = v35;
      *(_QWORD *)(v28 + 16) = v45;
      if (v36)
LABEL_34:
        operator delete(v36);
    }
    else
    {
      Index = v72;
      do
      {
        v46 = *(_OWORD *)(v34 - 3);
        v47 = v44 - 3;
        *(v44 - 1) = *(v34 - 1);
        *(_OWORD *)(v44 - 3) = v46;
        v34 -= 3;
        v44 -= 3;
      }
      while (v34 != v36);
      *(_QWORD *)v28 = v47;
      *(_QWORD *)(v28 + 8) = v35;
      *(_QWORD *)(v28 + 16) = v45;
      if (v36)
        goto LABEL_34;
    }
LABEL_35:
    *(_QWORD *)(v28 + 8) = v35;
    v48 = (unsigned __int8 ***)a2[2];
    v76 = v27;
    v75 = Index;
    v49 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,unsigned int &>(*v48, 0, 0, &v76, &v75);
    v50 = (unsigned __int8 ***)a2[2];
    v51 = *a2;
    v76 = *(_QWORD *)a2[1];
    v52 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*v50, 0, 0, &v76);
    v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v50);
    v54 = v53;
    v56 = *(uint64_t **)(v51 + 8);
    v55 = *(_QWORD *)(v51 + 16);
    if ((unint64_t)v56 < v55)
    {
      *v56 = v49;
      v56[1] = v52;
      v57 = v56 + 3;
      v56[2] = v53;
      goto LABEL_49;
    }
    v58 = *(uint64_t **)v51;
    v59 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v56 - *(_QWORD *)v51) >> 3);
    v60 = v59 + 1;
    if (v59 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v73 = v27;
      v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (_QWORD)v58) >> 3);
      if (2 * v61 > v60)
        v60 = 2 * v61;
      if (v61 >= 0x555555555555555)
        v62 = 0xAAAAAAAAAAAAAAALL;
      else
        v62 = v60;
      if (v62 <= 0xAAAAAAAAAAAAAAALL)
      {
        v63 = 24 * v62;
        v64 = (char *)operator new(24 * v62);
        v65 = (uint64_t *)&v64[24 * v59];
        v66 = &v64[v63];
        *v65 = v49;
        v65[1] = v52;
        v65[2] = v54;
        v57 = v65 + 3;
        if (v56 == v58)
        {
          v27 = v73;
          *(_QWORD *)v51 = v65;
          *(_QWORD *)(v51 + 8) = v57;
          *(_QWORD *)(v51 + 16) = v66;
          if (!v58)
            goto LABEL_49;
        }
        else
        {
          v27 = v73;
          do
          {
            v67 = *(_OWORD *)(v56 - 3);
            v68 = v65 - 3;
            *(v65 - 1) = *(v56 - 1);
            *(_OWORD *)(v65 - 3) = v67;
            v56 -= 3;
            v65 -= 3;
          }
          while (v56 != v58);
          *(_QWORD *)v51 = v68;
          *(_QWORD *)(v51 + 8) = v57;
          *(_QWORD *)(v51 + 16) = v66;
          if (!v58)
            goto LABEL_49;
        }
        operator delete(v58);
LABEL_49:
        *(_QWORD *)(v51 + 8) = v57;
        v69 = *a2;
        Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v74);
        getTreePredicates(v69, Input, a2[2], a2[4], v27);
        a1[8] = 1;
        return a1;
      }
LABEL_58:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_57:
    abort();
  }
  return a1;
}

_BYTE *llvm::TypeSwitch<mlir::Operation *,void>::Case<mlir::pdl::ResultsOp,getOperandTreePredicates(std::vector<mlir::pdl_to_pdl_interp::PositionalPredicate> &,mlir::Value,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &,mlir::pdl_to_pdl_interp::Position *)::$_1 &>(_BYTE *a1, uint64_t *a2)
{
  uint64_t Index;
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t IsNotNull;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  unsigned __int8 **v26;
  const char *v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const char **v34;
  _QWORD *v35;
  const char **v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  char *v43;
  const char **v44;
  char *v45;
  __int128 v46;
  const char **v47;
  unsigned __int8 ***v48;
  char v49;
  uint64_t v50;
  unsigned __int8 ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  __int128 v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t Input;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  char v77;
  const char *v78;
  uint64_t v79;

  if (!a1[8]
    && *(_QWORD *)a1
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
  {
    v76 = *(_QWORD *)a1;
    Index = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&v76);
    if ((Index & 0xFF00000000) == 0)
      goto LABEL_23;
    v6 = *a2;
    v7 = (_QWORD *)a2[1];
    v8 = (uint64_t **)a2[2];
    IsNotNull = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v8);
    v10 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v8);
    v11 = v10;
    v13 = *(_QWORD **)(v6 + 8);
    v12 = *(_QWORD *)(v6 + 16);
    if ((unint64_t)v13 >= v12)
    {
      v73 = Index;
      v15 = *(_QWORD **)v6;
      v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(_QWORD *)v6) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_59;
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v15) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v17;
      if (v19 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_60;
      v20 = 24 * v19;
      v21 = (char *)operator new(24 * v19);
      v22 = &v21[24 * v16];
      v23 = &v21[v20];
      *(_QWORD *)v22 = *v7;
      *((_QWORD *)v22 + 1) = IsNotNull;
      *((_QWORD *)v22 + 2) = v11;
      v14 = v22 + 24;
      if (v13 == v15)
      {
        Index = v73;
        *(_QWORD *)v6 = v22;
        *(_QWORD *)(v6 + 8) = v14;
        *(_QWORD *)(v6 + 16) = v23;
        if (!v15)
          goto LABEL_22;
      }
      else
      {
        Index = v73;
        do
        {
          v24 = *(_OWORD *)(v13 - 3);
          v25 = v22 - 24;
          *((_QWORD *)v22 - 1) = *(v13 - 1);
          *(_OWORD *)(v22 - 24) = v24;
          v13 -= 3;
          v22 -= 24;
        }
        while (v13 != v15);
        *(_QWORD *)v6 = v25;
        *(_QWORD *)(v6 + 8) = v14;
        *(_QWORD *)(v6 + 16) = v23;
        if (!v15)
          goto LABEL_22;
      }
      operator delete(v15);
    }
    else
    {
      *v13 = *v7;
      v13[1] = IsNotNull;
      v13[2] = v10;
      v14 = v13 + 3;
    }
LABEL_22:
    *(_QWORD *)(v6 + 8) = v14;
LABEL_23:
    v26 = *(unsigned __int8 ***)a2[2];
    v79 = *(_QWORD *)a2[1];
    LODWORD(v78) = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v79) + 1;
    v27 = (const char *)mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v26, 0, 0, &v79, (unsigned int *)&v78);
    v28 = *a2;
    v29 = (uint64_t **)a2[2];
    v30 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::IsNotNullQuestion>(*v29);
    v31 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>(*v29);
    v32 = v31;
    v34 = *(const char ***)(v28 + 8);
    v33 = *(_QWORD *)(v28 + 16);
    if ((unint64_t)v34 < v33)
    {
      *v34 = v27;
      v34[1] = (const char *)v30;
      v35 = v34 + 3;
      v34[2] = (const char *)v31;
      goto LABEL_37;
    }
    v74 = Index;
    v36 = *(const char ***)v28;
    v37 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v34 - *(_QWORD *)v28) >> 3);
    v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_59;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v36) >> 3);
    if (2 * v39 > v38)
      v38 = 2 * v39;
    if (v39 >= 0x555555555555555)
      v40 = 0xAAAAAAAAAAAAAAALL;
    else
      v40 = v38;
    if (v40 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_60;
    v41 = v27;
    v42 = 24 * v40;
    v43 = (char *)operator new(24 * v40);
    v44 = (const char **)&v43[24 * v37];
    v45 = &v43[v42];
    v27 = v41;
    *v44 = v41;
    v44[1] = (const char *)v30;
    v44[2] = (const char *)v32;
    v35 = v44 + 3;
    if (v34 == v36)
    {
      Index = v74;
      *(_QWORD *)v28 = v44;
      *(_QWORD *)(v28 + 8) = v35;
      *(_QWORD *)(v28 + 16) = v45;
      if (v36)
LABEL_36:
        operator delete(v36);
    }
    else
    {
      Index = v74;
      do
      {
        v46 = *(_OWORD *)(v34 - 3);
        v47 = v44 - 3;
        *(v44 - 1) = *(v34 - 1);
        *(_OWORD *)(v44 - 3) = v46;
        v34 -= 3;
        v44 -= 3;
      }
      while (v34 != v36);
      *(_QWORD *)v28 = v47;
      *(_QWORD *)(v28 + 8) = v35;
      *(_QWORD *)(v28 + 16) = v45;
      if (v36)
        goto LABEL_36;
    }
LABEL_37:
    *(_QWORD *)(v28 + 8) = v35;
    v48 = (unsigned __int8 ***)a2[2];
    v49 = *(_BYTE *)a2[3];
    v78 = v27;
    v79 = Index;
    v77 = v49;
    v50 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ResultGroupPosition,mlir::pdl_to_pdl_interp::OperationPosition *&,std::optional<unsigned int> &,BOOL &>(*v48, 0, 0, &v78, (unint64_t *)&v79, &v77);
    v51 = (unsigned __int8 ***)a2[2];
    v52 = *a2;
    v79 = *(_QWORD *)a2[1];
    v53 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::EqualToQuestion,mlir::pdl_to_pdl_interp::Position *&>(*v51, 0, 0, &v79);
    v54 = mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TrueAnswer>((uint64_t *)*v51);
    v55 = v54;
    v57 = *(uint64_t **)(v52 + 8);
    v56 = *(_QWORD *)(v52 + 16);
    if ((unint64_t)v57 < v56)
    {
      *v57 = v50;
      v57[1] = v53;
      v58 = v57 + 3;
      v57[2] = v54;
      goto LABEL_51;
    }
    v59 = *(uint64_t **)v52;
    v60 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v57 - *(_QWORD *)v52) >> 3);
    v61 = v60 + 1;
    if (v60 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      v75 = v27;
      v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (_QWORD)v59) >> 3);
      if (2 * v62 > v61)
        v61 = 2 * v62;
      if (v62 >= 0x555555555555555)
        v63 = 0xAAAAAAAAAAAAAAALL;
      else
        v63 = v61;
      if (v63 <= 0xAAAAAAAAAAAAAAALL)
      {
        v64 = 24 * v63;
        v65 = (char *)operator new(24 * v63);
        v66 = (uint64_t *)&v65[24 * v60];
        v67 = &v65[v64];
        *v66 = v50;
        v66[1] = v53;
        v66[2] = v55;
        v58 = v66 + 3;
        if (v57 == v59)
        {
          v27 = v75;
          *(_QWORD *)v52 = v66;
          *(_QWORD *)(v52 + 8) = v58;
          *(_QWORD *)(v52 + 16) = v67;
          if (!v59)
            goto LABEL_51;
        }
        else
        {
          v27 = v75;
          do
          {
            v68 = *(_OWORD *)(v57 - 3);
            v69 = v66 - 3;
            *(v66 - 1) = *(v57 - 1);
            *(_OWORD *)(v66 - 3) = v68;
            v57 -= 3;
            v66 -= 3;
          }
          while (v57 != v59);
          *(_QWORD *)v52 = v69;
          *(_QWORD *)(v52 + 8) = v58;
          *(_QWORD *)(v52 + 16) = v67;
          if (!v59)
            goto LABEL_51;
        }
        operator delete(v59);
LABEL_51:
        *(_QWORD *)(v52 + 8) = v58;
        v70 = *a2;
        Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v76);
        getTreePredicates(v70, Input, a2[2], a2[4], v27);
        a1[8] = 1;
        return a1;
      }
LABEL_60:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_59:
    abort();
  }
  return a1;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int *a5)
{
  _QWORD *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v22;
  unsigned __int8 **v23;
  const char *v24;
  unint64_t v25;

  v6 = a4;
  v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v8 & 1) != 0)
    return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(a1, a2, a3, v7[28], v6, a5);
  v22 = a5;
  v23 = a1;
  v20 = a3;
  v19 = a2;
  v7 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  a2 = v19;
  a3 = v20;
  v6 = a4;
  a5 = v22;
  v11 = v10;
  a1 = v23;
  if (!v11)
    return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(a1, a2, a3, v7[28], v6, a5);
  v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::OperationPosition]";
  v25 = 92;
  v12 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
  if (v25 >= v12)
    v13 = v12;
  else
    v13 = v25;
  v14 = &v24[v13];
  v15 = v25 - v13;
  if (v25 - v13 >= 0x12)
    v16 = 18;
  else
    v16 = v25 - v13;
  v17 = v15 - v16;
  if (v17 >= v17 - 1)
    v18 = v17 - 1;
  else
    v18 = v17;
  mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
  return mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(v23, v19, v20, mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::OperationPosition,void>::resolveTypeID(void)::id, a4, v22);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, unsigned int *a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int v13;
  int v14;
  unint64_t v15;
  unsigned __int8 **v17;
  __int128 *v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = a4;
  v23 = *MEMORY[0x24BDAC8D0];
  v20[0] = a2;
  v20[1] = a3;
  v7 = *a6;
  *(_QWORD *)&v19 = *a5;
  *((_QWORD *)&v19 + 1) = v7;
  LODWORD(v22) = 0;
  v21 = 0;
  v9 = &unk_254519000;
  if ((v8 & 1) == 0)
  {
    v17 = a1;
    v9 = &unk_254519000;
    v14 = v13;
    v6 = a4;
    a1 = v17;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      v9 = (_QWORD *)&unk_254519000;
      v6 = a4;
      a1 = v17;
    }
  }
  v10 = __ROR8__(*(_QWORD *)((char *)&v19 + 4) + 12, 12);
  v11 = 0x9DDFEA08EB382D69
      * (v10 ^ ((0x9DDFEA08EB382D69 * (v9[373] ^ (unint64_t)v19 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                         * (v9[373] ^ v19 ^ v10)));
  v18 = &v19;
  v21 = &v19;
  v22 = v20;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, (-348639895 * ((v11 >> 47) ^ v11)) ^ DWORD1(v19), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v21);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::OperationPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::OperationPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::OperationPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)0>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v7 = &unk_254519000;
    if ((v6 & 1) == 0)
    {
      v24 = a3;
      v22 = a2;
      v25 = *a1;
      v23 = *((_DWORD *)a1 + 4);
      v26 = *a2;
      v7 = &unk_254519000;
      v4 = v25;
      v5 = v26;
      v3 = v23;
      a2 = v22;
      a3 = v24;
      if (v20)
      {
        v21 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v21 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v21;
        v7 = (_QWORD *)&unk_254519000;
        v4 = v25;
        v5 = v26;
        v3 = v23;
        a2 = v22;
        a3 = v24;
      }
    }
    v8 = (v7[373] + 8 * v5) ^ HIDWORD(v5);
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    v10 = -348639895 * ((v9 >> 47) ^ v9);
    v11 = v3 - 1;
    v12 = v10 & (v3 - 1);
    v13 = (_QWORD *)(v4 + 32 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
LABEL_5:
      *a3 = v13;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v16 = v13;
        v19 = v12 + v17++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v4 + 32 * v12);
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_5;
      }
      result = 0;
      if (v16)
        v13 = v16;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    v10 = (void *)(32 * v3);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v10 + (_QWORD)v4);
    llvm::deallocate_buffer(v4, v10);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = (v11 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (v12)
    {
      v13 = v12 + 1;
      v14 = (v12 + 1) & 0xFFFFFFFFFFFFFFELL;
      v15 = &result[4 * v14];
      v16 = result + 4;
      v17 = v14;
      do
      {
        *(v16 - 4) = -4096;
        *v16 = -4096;
        v16 += 8;
        v17 -= 2;
      }
      while (v17);
      if (v13 == v14)
        return result;
    }
    else
    {
      v15 = result;
    }
    v18 = &result[4 * v11];
    do
    {
      *v15 = -4096;
      v15 += 4;
    }
    while (v15 != v18);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)result;
    v7 = (v5 - 1) & 0x7FFFFFFFFFFFFFFLL;
    if (!v7)
    {
      v10 = *(_QWORD **)result;
LABEL_8:
      v13 = (_QWORD *)(v6 + 32 * v5);
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v13);
      goto LABEL_12;
    }
    v8 = v7 + 1;
    v9 = (v7 + 1) & 0xFFFFFFFFFFFFFFELL;
    v10 = (_QWORD *)(v6 + 32 * v9);
    v11 = (_QWORD *)(v6 + 32);
    v12 = v9;
    do
    {
      *(v11 - 4) = -4096;
      *v11 = -4096;
      v11 += 8;
      v12 -= 2;
    }
    while (v12);
    if (v8 != v9)
      goto LABEL_8;
  }
LABEL_12:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v17 = 0;
      llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)result, (unint64_t *)a2, &v17);
      v14 = v17;
      v15 = *(_QWORD *)a2;
      *(_DWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)v14 = v15;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 0;
      LODWORD(v15) = *(_DWORD *)(v14 + 20);
      *(_DWORD *)(v14 + 20) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a2 + 20) = v15;
      v16 = *(unsigned int *)(v14 + 24);
      *(_DWORD *)(v14 + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v16;
      ++*(_DWORD *)(v4 + 8);
      llvm::deallocate_buffer(0, (void *)(24 * v16));
    }
    a2 += 32;
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::UsersPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position *&,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UsersPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,BOOL &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1
      && *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::UsersPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position *&,BOOL &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::UsersPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,BOOL &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;

  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 9;
  *(_QWORD *)v9 = &unk_24C034400;
  *(_QWORD *)(v9 + 8) = 0;
  result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  v11 = a2->n128_u64[0];
  *(_QWORD *)v9 = &unk_24C034500;
  *(_QWORD *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::UsersPosition::~UsersPosition(mlir::pdl_to_pdl_interp::UsersPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::UsersPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,BOOL>,(mlir::pdl_to_pdl_interp::Predicates::Kind)9>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  JUMPOUT(0x20BD002F8);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ForEachPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ForEachPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **(_QWORD **)a1 && *(_DWORD *)(a2 + 32) == *(_DWORD *)(*(_QWORD *)a1 + 8);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ForEachPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position *&,unsigned int &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ForEachPosition *)>,mlir::TypeID,mlir::pdl_to_pdl_interp::Position *&,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(a2, (__n128 *)*(_QWORD *)a1);
  v5 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, uint64_t, __n128))v6)(*(_QWORD *)(v6 + 8), v3, v4);
  return v5;
}

__n128 mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::construct<std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>>(uint64_t a1, __n128 *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;

  *(_QWORD *)(a1 + 80) += 40;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 40 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v9 = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = v9 + 40;
  *(_DWORD *)(v9 + 16) = 10;
  *(_QWORD *)v9 = &unk_24C034440;
  *(_QWORD *)(v9 + 8) = 0;
  result = *a2;
  *(__n128 *)(v9 + 24) = *a2;
  v11 = a2->n128_u64[0];
  *(_QWORD *)v9 = &unk_24C034540;
  *(_QWORD *)(v9 + 8) = v11;
  return result;
}

void mlir::pdl_to_pdl_interp::ForEachPosition::~ForEachPosition(mlir::pdl_to_pdl_interp::ForEachPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

void mlir::pdl_to_pdl_interp::PredicateBase<mlir::pdl_to_pdl_interp::ForEachPosition,mlir::pdl_to_pdl_interp::Position,std::pair<mlir::pdl_to_pdl_interp::Position*,unsigned int>,(mlir::pdl_to_pdl_interp::Predicates::Kind)10>::~PredicateBase(ZinIrHalH13g *a1)
{
  ZinIrHalH13g::~ZinIrHalH13g(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v22 = a1;
    v19 = a4;
    v20 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a4 = v19;
    a2 = v20;
    v11 = v10;
    a3 = v21;
    a1 = v22;
    if (v11)
    {
      v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::AttributeLiteralPosition]";
      v27 = 99;
      v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12)
        v13 = v12;
      else
        v13 = v27;
      v14 = &v26[v13];
      v15 = v27 - v13;
      if (v27 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v27 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a4 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  v6 = v5[20];
  v7 = *a4;
  v8 = *a4 >> 4;
  v26 = a2;
  v27 = a3;
  v25 = v7;
  v23[0] = &v25;
  v23[1] = &v26;
  v24 = &v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8 ^ (v7 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::AttributeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::AttributeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)a1;
  *(_QWORD *)(a2 + 80) += 32;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 32 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 32;
  *(_DWORD *)(v10 + 16) = 7;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 24) = *v4;
  *(_QWORD *)v10 = &unk_24C034620;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

void mlir::pdl_to_pdl_interp::AttributeLiteralPosition::~AttributeLiteralPosition(mlir::pdl_to_pdl_interp::AttributeLiteralPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unsigned __int8 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  _QWORD v21[2];
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[2];

  if ((v5 & 1) == 0)
  {
    v19 = a3;
    v20 = a4;
    v18 = a2;
    a2 = v18;
    a3 = v19;
    a4 = v20;
    if (v10)
    {
      *(_QWORD *)&v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::ConstraintQuestion]";
      *((_QWORD *)&v23 + 1) = 93;
      v11 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v23 + 1) >= v11)
        v12 = v11;
      else
        v12 = *((_QWORD *)&v23 + 1);
      v13 = v23 + v12;
      v14 = *((_QWORD *)&v23 + 1) - v12;
      if (*((_QWORD *)&v23 + 1) - v12 >= 0x12)
        v15 = 18;
      else
        v15 = *((_QWORD *)&v23 + 1) - v12;
      v16 = v14 - v15;
      if (v16 >= v16 - 1)
        v17 = v16 - 1;
      else
        v17 = v16;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v13 + v15, v17);
      a2 = v18;
      a3 = v19;
      a4 = v20;
    }
  }
  v6 = mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::ConstraintQuestion,void>::resolveTypeID(void)::id;
  v26[0] = a2;
  v26[1] = a3;
  v7 = a4[1];
  v23 = *a4;
  v24 = v7;
  v25 = *((_QWORD *)a4 + 4);
  v8 = llvm::hash_combine<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>((uint64_t)&v23, (uint64_t)&v24, (char *)&v25);
  v21[0] = &v23;
  v21[1] = v26;
  v22 = &v23;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v22, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v21);
}

unint64_t llvm::hash_combine<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  if ((v5 & 1) == 0)
  {
    v10 = a1;
    a1 = v10;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a1 = v10;
    }
  }
  v18 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(_QWORD *)&v15[0] = llvm::hash_value(*(_QWORD **)a1, *(_QWORD *)(a1 + 8));
  v13 = 0;
  v6 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8));
  v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v15, (uint64_t *)&v13, (_QWORD *)v15 + 1, (unint64_t)v16, v6);
  v14 = v13;
  v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v15, (uint64_t *)&v14, v7, (unint64_t)v16, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v15, v14, v8, (char *)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;
  uint64_t v5;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 == *(_QWORD *)(*a1 + 8)
    && (!v3 || !memcmp(*(const void **)(a2 + 8), *(const void **)v2, v3))
    && (v5 = *(_QWORD *)(a2 + 32), v5 == *(_QWORD *)(v2 + 24))
    && !memcmp(*(const void **)(a2 + 24), *(const void **)(v2 + 16), 8 * v5))
  {
    return *(unsigned __int8 *)(a2 + 40) == *(unsigned __int8 *)(v2 + 32);
  }
  else
  {
    return 0;
  }
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::ConstraintQuestion * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::ConstraintQuestion,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL>>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::ConstraintQuestion *)>,mlir::TypeID,std::tuple<llvm::StringRef,llvm::ArrayRef<mlir::pdl_to_pdl_interp::Position *>,BOOL> &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(__int128 **a1, size_t a2)
{
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  __int128 *v6;
  _OWORD v8[2];
  uint64_t v9;

  v3 = **a1;
  v4 = (*a1)[1];
  v9 = *((_QWORD *)*a1 + 4);
  v8[0] = v3;
  v8[1] = v4;
  v5 = mlir::pdl_to_pdl_interp::ConstraintQuestion::construct(a2, (uint64_t *)v8);
  v6 = a1[1];
  if (*(_QWORD *)v6)
    (*(void (**)(_QWORD, unint64_t))v6)(*((_QWORD *)v6 + 1), v5);
  return v5;
}

unint64_t mlir::pdl_to_pdl_interp::ConstraintQuestion::construct(size_t __sz, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  char *buffer;
  uint64_t v39;
  unint64_t result;

  v4 = a2[1];
  if (v4)
  {
    v5 = *a2;
    v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v4 + 1, 0);
    v7 = v6;
    if (v4 < 8)
    {
      v8 = (_BYTE *)v6;
      v9 = (char *)v5;
      goto LABEL_18;
    }
    v8 = (_BYTE *)v6;
    v9 = (char *)v5;
    if ((unint64_t)(v6 - v5) < 0x20)
      goto LABEL_18;
    if (v4 >= 0x20)
    {
      v10 = v4 & 0xFFFFFFFFFFFFFFE0;
      v13 = (__int128 *)(v5 + 16);
      v14 = (_OWORD *)(v6 + 16);
      v15 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v4 == v10)
      {
LABEL_19:
        *(_BYTE *)(v6 + v4) = 0;
        v11 = a2[3];
        if (v11)
          goto LABEL_20;
LABEL_7:
        v12 = 0;
        goto LABEL_28;
      }
      if ((v4 & 0x18) == 0)
      {
        v9 = (char *)(v5 + v10);
        v8 = (_BYTE *)(v6 + v10);
        goto LABEL_18;
      }
    }
    else
    {
      v10 = 0;
    }
    v8 = (_BYTE *)(v6 + (v4 & 0xFFFFFFFFFFFFFFF8));
    v9 = (char *)(v5 + (v4 & 0xFFFFFFFFFFFFFFF8));
    v17 = (uint64_t *)(v5 + v10);
    v18 = (_QWORD *)(v6 + v10);
    v19 = v10 - (v4 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v20 = *v17++;
      *v18++ = v20;
      v19 += 8;
    }
    while (v19);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_19;
    do
    {
LABEL_18:
      v21 = *v9++;
      *v8++ = v21;
    }
    while (v9 != (char *)(v5 + v4));
    goto LABEL_19;
  }
  v7 = 0;
  v11 = a2[3];
  if (!v11)
    goto LABEL_7;
LABEL_20:
  v22 = a2[2];
  v23 = 8 * v11;
  v24 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v11, 3);
  v12 = v24;
  if ((unint64_t)(8 * v11 - 8) < 0x18)
  {
    v25 = (_QWORD *)v24;
    v26 = (uint64_t *)v22;
  }
  else
  {
    v25 = (_QWORD *)v24;
    v26 = (uint64_t *)v22;
    if ((unint64_t)(v24 - v22) >= 0x20)
    {
      v27 = ((unint64_t)(v23 - 8) >> 3) + 1;
      v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = (_QWORD *)(v24 + v28);
      v26 = (uint64_t *)(v22 + v28);
      v29 = (__int128 *)(v22 + 16);
      v30 = (_OWORD *)(v24 + 16);
      v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = *v29;
        *(v30 - 1) = *(v29 - 1);
        *v30 = v32;
        v29 += 2;
        v30 += 2;
        v31 -= 4;
      }
      while (v31);
      if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_28;
    }
  }
  do
  {
    v33 = *v26++;
    *v25++ = v33;
  }
  while (v26 != (uint64_t *)(v22 + v23));
LABEL_28:
  v34 = *((_BYTE *)a2 + 32);
  *(_QWORD *)(__sz + 80) += 48;
  if (*(_QWORD *)__sz)
    v35 = ((*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)__sz + 48 > *(_QWORD *)(__sz + 8)
                                                                                  - *(_QWORD *)__sz;
  else
    v35 = 1;
  if (v35)
  {
    v36 = *(_DWORD *)(__sz + 24) >> 7;
    if (v36 >= 0x1E)
      LOBYTE(v36) = 30;
    v37 = 4096 << v36;
    buffer = (char *)llvm::allocate_buffer(4096 << v36, (std::align_val_t)8uLL);
    v39 = *(unsigned int *)(__sz + 24);
    if (v39 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v39 + 1, 8);
      LODWORD(v39) = *(_DWORD *)(__sz + 24);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 16) + 8 * v39) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(_QWORD *)(__sz + 8) = &buffer[v37];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (*(_QWORD *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)__sz = result + 48;
  *(_DWORD *)result = 20;
  *(_QWORD *)(result + 8) = v7;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v12;
  *(_QWORD *)(result + 32) = v11;
  *(_BYTE *)(result + 40) = v34;
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(unsigned __int8 **a1, const char *a2, unint64_t a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unint64_t v21;
  unsigned __int8 **v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;

  v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v21 = a3;
    v22 = a1;
    v19 = a4;
    v20 = a2;
    v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    a4 = v19;
    a2 = v20;
    v11 = v10;
    a3 = v21;
    a1 = v22;
    if (v11)
    {
      v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl_to_pdl_interp::TypeLiteralPosition]";
      v27 = 94;
      v12 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (v27 >= v12)
        v13 = v12;
      else
        v13 = v27;
      v14 = &v26[v13];
      v15 = v27 - v13;
      if (v27 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v27 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::pdl_to_pdl_interp::TypeLiteralPosition,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      v5 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      a4 = v19;
      a2 = v20;
      a3 = v21;
      a1 = v22;
    }
  }
  v6 = v5[36];
  v7 = *a4;
  v8 = *a4 >> 4;
  v26 = a2;
  v27 = a3;
  v25 = v7;
  v23[0] = &v25;
  v23[1] = &v26;
  v24 = &v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, v8 ^ (v7 >> 9), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::pdl_to_pdl_interp::TypeLiteralPosition * mlir::StorageUniquer::get<mlir::pdl_to_pdl_interp::TypeLiteralPosition,mlir::Attribute &>(llvm::function_ref<void ()(mlir::pdl_to_pdl_interp::TypeLiteralPosition *)>,mlir::TypeID,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *buffer;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)a1;
  *(_QWORD *)(a2 + 80) += 32;
  if (*(_QWORD *)a2)
    v5 = ((*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a2 + 32 > *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E)
      LOBYTE(v6) = 30;
    v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = &buffer[v7];
    v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v10 = (*(_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a2 = v10 + 32;
  *(_DWORD *)(v10 + 16) = 8;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 24) = *v4;
  *(_QWORD *)v10 = &unk_24C0345E0;
  v11 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v11)
    (*(void (**)(_QWORD, unint64_t))v11)(*(_QWORD *)(v11 + 8), v10);
  return v10;
}

void mlir::pdl_to_pdl_interp::TypeLiteralPosition::~TypeLiteralPosition(mlir::pdl_to_pdl_interp::TypeLiteralPosition *this)
{
  ZinIrHalH13g::~ZinIrHalH13g(this);
  JUMPOUT(0x20BD002F8);
}

uint64_t llvm::MapVector<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>,llvm::DenseMap<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int,llvm::DenseMapInfo<mlir::pdl_to_pdl_interp::Qualifier *,void>,llvm::detail::DenseMapPair<mlir::pdl_to_pdl_interp::Qualifier *,unsigned int>>,llvm::SmallVector<std::pair<mlir::pdl_to_pdl_interp::Qualifier *,std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>,0u>>::try_emplace<std::unique_ptr<mlir::pdl_to_pdl_interp::MatcherNode>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  char **v52;
  unint64_t v53;

  v6 = *a2;
  v7 = *(_DWORD *)(a1 + 16);
  if (!v7)
    goto LABEL_24;
  v8 = *(_QWORD *)a1;
  v9 = ((v6 >> 4) ^ (v6 >> 9)) & (v7 - 1);
  v10 = (_QWORD *)(*(_QWORD *)a1 + 16 * v9);
  v11 = *v10;
  if (v6 == *v10)
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  v20 = 0;
  v21 = 1;
  while (v11 != -4096)
  {
    if (v20)
      v22 = 0;
    else
      v22 = v11 == -8192;
    if (v22)
      v20 = v10;
    v23 = v9 + v21++;
    v9 = v23 & (v7 - 1);
    v10 = (_QWORD *)(v8 + 16 * v9);
    v11 = *v10;
    if (v6 == *v10)
      return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v9 + 8);
  }
  v24 = (uint64_t)(v20 ? v20 : v10);
  v25 = *(_DWORD *)(a1 + 8);
  if (4 * v25 + 4 < 3 * v7)
  {
    if (v7 + ~v25 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_6;
  }
  else
  {
LABEL_24:
    v7 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1, v7);
  v26 = *(_DWORD *)(a1 + 16) - 1;
  v27 = v26 & ((v6 >> 4) ^ (v6 >> 9));
  v24 = *(_QWORD *)a1 + 16 * v27;
  v28 = *(_QWORD *)v24;
  if (v6 != *(_QWORD *)v24)
  {
    v48 = 0;
    v49 = 1;
    while (v28 != -4096)
    {
      if (v48)
        v50 = 0;
      else
        v50 = v28 == -8192;
      if (v50)
        v48 = v24;
      v51 = v27 + v49++;
      v27 = v51 & v26;
      v24 = *(_QWORD *)a1 + 16 * (v51 & v26);
      v28 = *(_QWORD *)v24;
      if (v6 == *(_QWORD *)v24)
        goto LABEL_26;
    }
    if (v48)
      v24 = v48;
LABEL_6:
    v13 = *(_QWORD *)v24;
    ++*(_DWORD *)(a1 + 8);
    if (v13 == -4096)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_26:
  ++*(_DWORD *)(a1 + 8);
  if (v6 != -4096)
LABEL_7:
    --*(_DWORD *)(a1 + 12);
LABEL_8:
  *(_QWORD *)v24 = v6;
  *(_DWORD *)(v24 + 8) = 0;
  v14 = *(unsigned int *)(a1 + 32);
  v15 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v24 + 8) = v14;
  if (v14 >= v15)
  {
    v52 = (char **)(a1 + 24);
    v53 = 0;
    v19 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 24, (void *)(a1 + 40), 0, 16, &v53);
    v29 = *(unsigned int *)(a1 + 32);
    v30 = 16 * v29;
    v31 = &v19[16 * v29];
    *(_QWORD *)v31 = *a2;
    v32 = *a3;
    *a3 = 0;
    *((_QWORD *)v31 + 1) = v32;
    v33 = *(char **)(a1 + 24);
    if (!(_DWORD)v29)
    {
LABEL_39:
      v40 = v53;
      if (v33 != (char *)(a1 + 40))
        free(v33);
      *(_QWORD *)(a1 + 24) = v19;
      v18 = *(_DWORD *)(a1 + 32) + 1;
      *(_DWORD *)(a1 + 32) = v18;
      *(_DWORD *)(a1 + 36) = v40;
      return (uint64_t)&v19[16 * v18 - 16];
    }
    v34 = (v29 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v34 >= 7 && (v19 >= &v33[v30] || v33 >= &v19[v30]))
    {
      v41 = v34 + 1;
      v42 = (v34 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v35 = &v19[16 * v42];
      v36 = &v33[16 * v42];
      v43 = v42;
      v44 = v19;
      v45 = *(__int128 **)(a1 + 24);
      do
      {
        v46 = *v45;
        v47 = v45[1];
        *((_QWORD *)v45 + 1) = 0;
        *((_QWORD *)v45 + 3) = 0;
        *(_OWORD *)v44 = v46;
        *((_OWORD *)v44 + 1) = v47;
        v44 += 32;
        v45 += 2;
        v43 -= 2;
      }
      while (v43);
      if (v41 == v42)
      {
LABEL_34:
        v38 = (uint64_t)(*v52 - 8);
        do
        {
          v39 = *(_QWORD *)(v38 + v30);
          *(_QWORD *)(v38 + v30) = 0;
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v30 -= 16;
        }
        while (v30);
        v33 = *v52;
        goto LABEL_39;
      }
    }
    else
    {
      v35 = v19;
      v36 = *(char **)(a1 + 24);
    }
    do
    {
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v37 = *((_QWORD *)v36 + 1);
      *((_QWORD *)v36 + 1) = 0;
      *((_QWORD *)v35 + 1) = v37;
      v36 += 16;
      v35 += 16;
    }
    while (v36 != &v33[v30]);
    goto LABEL_34;
  }
  v16 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * v14);
  *v16 = *a2;
  v17 = *a3;
  *a3 = 0;
  v16[1] = v17;
  v18 = v14 + 1;
  *(_DWORD *)(a1 + 32) = v14 + 1;
  v19 = *(char **)(a1 + 24);
  return (uint64_t)&v19[16 * v18 - 16];
}

void mlir::pdl_to_pdl_interp::ExitNode::~ExitNode(mlir::pdl_to_pdl_interp::ExitNode *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_24C0343A0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_24C0343A0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD002F8);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<`anonymous namespace'::OrderedPredicate,llvm::detail::DenseSetEmpty,`anonymous namespace'::OrderedPredicateDenseInfo,llvm::detail::DenseSetPair<`anonymous namespace'::OrderedPredicate>>,`anonymous namespace'::OrderedPredicate,llvm::detail::DenseSetEmpty,`anonymous namespace'::OrderedPredicateDenseInfo,llvm::detail::DenseSetPair<`anonymous namespace'::OrderedPredicate>>::LookupBucketFor<`anonymous namespace'::OrderedPredicate>(uint64_t result, int a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v16;
  int v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;

  if (a2)
  {
    if ((v4 & 1) == 0)
    {
      v23 = result;
      v22 = a2;
      v21 = a3;
      a3 = v21;
      a2 = v22;
      v19 = v18;
      result = v23;
      if (v19)
      {
        v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v20 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        a3 = v21;
        a2 = v22;
        result = v23;
      }
    }
    v5 = a3[1];
    v6 = __ROR8__(v5 + 16, 16);
    v7 = (a2 - 1) & ((-348639895
                    * ((((0x9DDFEA08EB382D69
                                      * (v6 ^ ((0x9DDFEA08EB382D69
                                              * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v6)))) >> 32) >> 15) ^ (-348639895 * (v6 ^ (((0x9DDFEA08EB382D69 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *a3 ^ v6)) >> 32) >> 15) ^ (-348639895 * (llvm::hashing::detail::get_execution_seed(void)::seed ^ *(_DWORD *)a3 ^ v6)))))) ^ v5);
    v8 = (_QWORD *)(result + 56 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*a3 != *v8 || v5 != v10)
    {
      v12 = 0;
      v13 = 1;
      do
      {
        if (v9 == -4096 && v10 == -4096)
          break;
        if (v12)
          v14 = 0;
        else
          v14 = v10 == -8192;
        if (v14 && v9 == -8192)
          v12 = v8;
        v16 = v7 + v13++;
        v7 = v16 & (a2 - 1);
        v8 = (_QWORD *)(result + 56 * v7);
        v9 = *v8;
        v10 = v8[1];
      }
      while (*a3 != *v8 || v5 != v10);
    }
    llvm::deallocate_buffer(0, 0);
  }
  *a4 = 0;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **,false>(uint64_t result, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t **v5;
  uint64_t **i;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t **k;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t **v82;
  uint64_t **v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t *v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t **v139;
  uint64_t **j;
  uint64_t *v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  uint64_t **v183;
  uint64_t *v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  unsigned int OperationDepth;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t *v211;
  uint64_t **v212;
  BOOL v213;
  char v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t **v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  uint64_t *v229;
  uint64_t **v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v245;
  unsigned int v246;
  int64_t v248;
  int64_t v249;
  uint64_t **v250;
  int64_t v251;
  uint64_t v252;
  uint64_t **v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t *v256;
  uint64_t **v257;
  uint64_t v258;
  int64_t v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t **v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t **v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  uint64_t v289;
  int64_t v290;
  uint64_t **v291;
  uint64_t *v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  BOOL v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  BOOL v307;
  unsigned int v308;
  unsigned int v309;
  BOOL v310;
  unsigned int v311;
  unsigned int v312;
  BOOL v313;
  uint64_t v314;
  uint64_t v316;
  int64_t v317;
  uint64_t **v318;
  uint64_t **v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t **v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  BOOL v333;
  uint64_t **v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t **v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t **v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t *v348;
  uint64_t **v349;
  unint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  BOOL v365;
  uint64_t **v366;
  uint64_t **v367;
  uint64_t *v368;
  uint64_t *v369;
  uint64_t v370;
  unsigned int v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  uint64_t *v379;
  uint64_t **v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v395;
  unsigned int v396;
  BOOL v397;
  unsigned int v398;
  unsigned int v399;
  BOOL v400;
  unint64_t v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  uint64_t *v405;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int v411;
  uint64_t **v412;
  uint64_t **v413;
  int64_t v414;
  unsigned int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t **v421;
  uint64_t **v422;
  unsigned int v423;
  unsigned int v424;
  uint64_t *v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unint64_t v429;
  unsigned int v430;
  unsigned int v431;
  uint64_t **v432;
  uint64_t **v433;
  uint64_t **v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t **v437;

  v437 = (uint64_t **)result;
LABEL_2:
  v5 = a2;
  v421 = a2 - 1;
  i = v437;
  while (2)
  {
    v7 = i;
    v8 = (char *)v5 - (char *)i;
    v9 = v5 - i;
    v437 = v7;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v200 = (uint64_t)*(a2 - 1);
        v201 = *v7;
        v202 = **v7;
        OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v202);
        v204 = *(_DWORD *)(v202 + 16);
        v205 = *(_DWORD *)v201[1];
        v207 = *(_DWORD *)(v200 + 16);
        v206 = *(_DWORD *)(v200 + 20);
        v208 = *((_DWORD *)v201 + 6);
        result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v200);
        v209 = *((_DWORD *)v201 + 4);
        if (v209 < v207
          || v207 >= v209
          && ((v210 = *((_DWORD *)v201 + 5), v210 < v206)
           || v206 >= v210
           && (result < OperationDepth
            || OperationDepth >= result
            && ((v398 = *(_DWORD *)(*(_QWORD *)v200 + 16), v398 < v204)
             || v204 >= v398
             && ((v399 = **(_DWORD **)(v200 + 8), v399 < v205)
              || (v205 >= v399 ? (v400 = *(_DWORD *)(v200 + 24) >= v208) : (v400 = 1), !v400))))))
        {
          v211 = *v7;
          *v7 = *(a2 - 1);
          *(a2 - 1) = v211;
        }
        return result;
      case 3:
      case 4:
      case 5:
      default:
        if (v8 > 191)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v401 = v8;
              v248 = (unint64_t)(v9 - 2) >> 1;
              v249 = v248;
              v418 = v9;
              do
              {
                v251 = v249;
                if (v248 >= v249)
                {
                  v252 = (2 * v249) | 1;
                  v253 = &v437[v252];
                  v254 = 2 * v249 + 2;
                  if (v254 < v9)
                  {
                    v255 = *v253;
                    v257 = v253 + 1;
                    v256 = v253[1];
                    v258 = *v256;
                    v259 = v249;
                    v260 = (2 * v249) | 1;
                    v431 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v256);
                    v423 = *(_DWORD *)(v258 + 16);
                    v408 = *(_DWORD *)v256[1];
                    v262 = *((_DWORD *)v255 + 4);
                    v261 = *((_DWORD *)v255 + 5);
                    v403 = *((_DWORD *)v256 + 6);
                    v263 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v255);
                    v253 = &v437[v252];
                    v252 = v260;
                    v9 = v418;
                    v251 = v259;
                    v264 = *((_DWORD *)v256 + 4);
                    if (v264 < v262
                      || v262 >= v264
                      && ((v265 = *((_DWORD *)v256 + 5), v265 < v261)
                       || v261 >= v265
                       && (v263 < v431
                        || v431 >= v263
                        && ((v308 = *(_DWORD *)(*v255 + 16), v308 < v423)
                         || v423 >= v308
                         && ((v309 = *(_DWORD *)v255[1], v309 < v408)
                          || (v408 >= v309 ? (v310 = *((_DWORD *)v255 + 6) >= v403) : (v310 = 1), !v310))))))
                    {
                      v253 = v257;
                      v252 = v254;
                    }
                  }
                  v414 = v251;
                  v432 = v253;
                  v266 = *v253;
                  v267 = v437[v251];
                  v268 = *v267;
                  v269 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v267);
                  v270 = *(_DWORD *)(v268 + 16);
                  v424 = *(_DWORD *)v267[1];
                  v272 = *((_DWORD *)v266 + 4);
                  v271 = *((_DWORD *)v266 + 5);
                  v273 = *((_DWORD *)v267 + 6);
                  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v266);
                  v251 = v414;
                  v274 = *((_DWORD *)v267 + 4);
                  if (v274 >= v272)
                  {
                    if (v272 < v274
                      || (v275 = *((_DWORD *)v267 + 5), v275 >= v271)
                      && (v271 < v275
                       || result >= v269
                       && (v269 < result
                        || (v311 = *(_DWORD *)(*v266 + 16), v311 >= v270)
                        && (v270 < v311
                         || (v312 = *(_DWORD *)v266[1], v312 >= v424)
                         && (v424 >= v312 ? (v313 = *((_DWORD *)v266 + 6) >= v273) : (v313 = 1), v313)))))
                    {
                      v250 = v432;
                      v425 = v437[v414];
                      v437[v414] = *v432;
                      while (v248 >= v252)
                      {
                        v433 = v250;
                        v276 = 2 * v252;
                        v277 = (2 * v252) | 1;
                        v278 = &v437[v277];
                        v279 = v276 + 2;
                        if (v276 + 2 < v9)
                        {
                          v280 = *v278;
                          v282 = v278 + 1;
                          v281 = v278[1];
                          v283 = *v281;
                          v409 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v281);
                          v404 = *(_DWORD *)(v283 + 16);
                          v284 = *(_DWORD *)v281[1];
                          v286 = *((_DWORD *)v280 + 4);
                          v285 = *((_DWORD *)v280 + 5);
                          v402 = *((_DWORD *)v281 + 6);
                          v287 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v280);
                          v288 = *((_DWORD *)v281 + 4);
                          if (v288 < v286
                            || (v278 = &v437[v277], v286 >= v288)
                            && ((v304 = *((_DWORD *)v281 + 5), v304 < v285)
                             || v285 >= v304
                             && (v287 < v409
                              || v409 >= v287
                              && ((v305 = *(_DWORD *)(*v280 + 16), v305 < v404)
                               || v404 >= v305
                               && ((v306 = *(_DWORD *)v280[1], v306 < v284)
                                || (v284 >= v306 ? (v307 = *((_DWORD *)v280 + 6) >= v402) : (v307 = 1), !v307))))))
                          {
                            v278 = v282;
                            v277 = v279;
                          }
                        }
                        v289 = v277;
                        v290 = v248;
                        v291 = v278;
                        v292 = *v278;
                        v293 = *v425;
                        v294 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v425);
                        v295 = *(_DWORD *)(v293 + 16);
                        v296 = *(_DWORD *)v425[1];
                        v298 = *((_DWORD *)v292 + 4);
                        v297 = *((_DWORD *)v292 + 5);
                        v410 = *((_DWORD *)v425 + 6);
                        result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v292);
                        v299 = *((_DWORD *)v425 + 4);
                        if (v299 < v298)
                        {
                          v250 = v433;
                          v248 = v290;
                          v9 = v418;
                          break;
                        }
                        v48 = v298 >= v299;
                        v248 = v290;
                        v250 = v291;
                        v252 = v289;
                        v9 = v418;
                        if (v48)
                        {
                          v300 = *((_DWORD *)v425 + 5);
                          if (v300 < v297
                            || v297 >= v300
                            && (result < v294
                             || v294 >= result
                             && ((v301 = *(_DWORD *)(*v292 + 16), v301 < v295)
                              || v295 >= v301
                              && ((v302 = *(_DWORD *)v292[1], v302 < v296)
                               || (v296 >= v302 ? (v303 = *((_DWORD *)v292 + 6) >= v410) : (v303 = 1), !v303)))))
                          {
                            v250 = v433;
                            break;
                          }
                        }
                        *v433 = *v250;
                      }
                      *v250 = v425;
                      v251 = v414;
                    }
                  }
                }
                v249 = v251 - 1;
              }
              while (v251);
              v314 = v401 >> 3;
              do
              {
                v316 = 0;
                v405 = *v437;
                v317 = (unint64_t)(v314 - 2) >> 1;
                v318 = v437;
                do
                {
                  v319 = v318;
                  v318 += v316 + 1;
                  v320 = 2 * v316;
                  v316 = (2 * v316) | 1;
                  v321 = v320 + 2;
                  if (v320 + 2 < v314)
                  {
                    v322 = *v318;
                    v323 = v318[1];
                    v434 = v318 + 1;
                    v324 = *v323;
                    v325 = v314;
                    v326 = v318;
                    v426 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v323);
                    v419 = *(_DWORD *)(v324 + 16);
                    v328 = *((_DWORD *)v322 + 4);
                    v327 = *((_DWORD *)v322 + 5);
                    v411 = *((_DWORD *)v323 + 6);
                    v415 = *(_DWORD *)v323[1];
                    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v322);
                    v314 = v325;
                    v329 = *((_DWORD *)v323 + 4);
                    if (v329 < v328
                      || (v318 = v326, v328 >= v329)
                      && ((v330 = *((_DWORD *)v323 + 5), v330 < v327)
                       || v327 >= v330
                       && (result < v426
                        || v426 >= result
                        && ((v331 = *(_DWORD *)(*v322 + 16), v331 < v419)
                         || v419 >= v331
                         && ((v332 = *(_DWORD *)v322[1], v332 < v415)
                          || (v415 >= v332 ? (v333 = *((_DWORD *)v322 + 6) >= v411) : (v333 = 1), !v333))))))
                    {
                      v318 = v434;
                      v316 = v321;
                    }
                  }
                  *v319 = *v318;
                }
                while (v316 <= v317);
                v334 = a2 - 1;
                v213 = v318 == --a2;
                if (v213)
                {
                  *v318 = v405;
                }
                else
                {
                  *v318 = *v334;
                  *v334 = v405;
                  v335 = (char *)v318 - (char *)v437 + 8;
                  if (v335 >= 9)
                  {
                    v336 = ((unint64_t)v335 >> 3) - 2;
                    v337 = v336 >> 1;
                    v338 = &v437[v336 >> 1];
                    v339 = *v338;
                    v340 = *v318;
                    v341 = **v318;
                    v420 = v314;
                    v342 = v318;
                    v343 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v341);
                    v344 = *(_DWORD *)(v341 + 16);
                    v435 = *(_DWORD *)v340[1];
                    v346 = *((_DWORD *)v339 + 4);
                    v345 = *((_DWORD *)v339 + 5);
                    v427 = *((_DWORD *)v340 + 6);
                    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v339);
                    v314 = v420;
                    v347 = *((_DWORD *)v340 + 4);
                    if (v347 < v346
                      || v346 >= v347
                      && ((v362 = *((_DWORD *)v340 + 5), v362 < v345)
                       || v345 >= v362
                       && (result < v343
                        || v343 >= result
                        && ((v363 = *(_DWORD *)(*v339 + 16), v363 < v344)
                         || v344 >= v363
                         && ((v364 = *(_DWORD *)v339[1], v364 < v435)
                          || (v435 >= v364 ? (v365 = *((_DWORD *)v339 + 6) >= v427) : (v365 = 1), !v365))))))
                    {
                      v348 = *v342;
                      *v342 = *v338;
                      if (v336 >= 2)
                      {
                        while (1)
                        {
                          v350 = v337 - 1;
                          v337 = (v337 - 1) >> 1;
                          v349 = &v437[v337];
                          v351 = *v349;
                          v352 = *v348;
                          v353 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v348);
                          v354 = *(_DWORD *)(v352 + 16);
                          v436 = *(_DWORD *)v348[1];
                          v355 = *((_DWORD *)v351 + 4);
                          v356 = *((_DWORD *)v351 + 5);
                          v428 = *((_DWORD *)v348 + 6);
                          result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v351);
                          v357 = *((_DWORD *)v348 + 4);
                          if (v357 >= v355)
                          {
                            if (v355 < v357)
                              break;
                            v358 = *((_DWORD *)v348 + 5);
                            if (v358 >= v356)
                            {
                              if (v356 < v358)
                                break;
                              if (result >= v353)
                              {
                                if (v353 < result)
                                  break;
                                v359 = *(_DWORD *)(*v351 + 16);
                                if (v359 >= v354)
                                {
                                  if (v354 < v359)
                                    break;
                                  v360 = *(_DWORD *)v351[1];
                                  if (v360 >= v436 && (v436 < v360 || *((_DWORD *)v351 + 6) >= v428))
                                    break;
                                }
                              }
                            }
                          }
                          *v338 = *v349;
                          v338 = &v437[v337];
                          if (v350 <= 1)
                            goto LABEL_370;
                        }
                      }
                      v349 = v338;
LABEL_370:
                      *v349 = v348;
                      v314 = v420;
                    }
                  }
                }
              }
              while (v314-- > 2);
            }
            return result;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = &v7[(unint64_t)v9 >> 1];
          if ((unint64_t)v8 < 0x401)
          {
            v416 = a3 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_21;
          }
          else
          {
            v12 = v7 + 1;
            v13 = v10;
            v14 = &v7[v13];
            v15 = &v7[v13 - 1];
            v16 = &v12[v13];
            v17 = v15;
            v7 = v437;
            v18 = *v437;
            *v437 = *v14;
            *v14 = v18;
            v416 = a3 - 1;
            if ((a4 & 1) != 0)
              goto LABEL_21;
          }
          v19 = (uint64_t)*(v7 - 1);
          v20 = *v7;
          v21 = **v7;
          v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
          v23 = *(_DWORD *)(v21 + 16);
          v24 = *(_DWORD *)v20[1];
          v26 = *(_DWORD *)(v19 + 16);
          v25 = *(_DWORD *)(v19 + 20);
          v27 = *((_DWORD *)v20 + 6);
          v28 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v19);
          v29 = *((_DWORD *)v20 + 4);
          if (v29 >= v26)
          {
            if (v26 < v29
              || (v30 = *((_DWORD *)v20 + 5), v30 >= v25)
              && (v25 < v30
               || v28 >= v22
               && (v22 < v28
                || (v31 = *(_DWORD *)(*(_QWORD *)v19 + 16), v31 >= v23)
                && (v23 < v31
                 || (v32 = **(_DWORD **)(v19 + 8), v32 >= v24) && (v24 < v32 || *(_DWORD *)(v19 + 24) >= v27)))))
            {
              v116 = *v7;
              v117 = *v421;
              v118 = **v421;
              v119 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v118);
              v120 = *(_DWORD *)(v118 + 16);
              v121 = *(_DWORD *)v117[1];
              v123 = *((_DWORD *)v116 + 4);
              v122 = *((_DWORD *)v116 + 5);
              v124 = *((_DWORD *)v117 + 6);
              result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
              v125 = *((_DWORD *)v117 + 4);
              if (v125 < v123
                || v123 >= v125
                && ((v197 = *((_DWORD *)v117 + 5), v197 < v122)
                 || v122 >= v197
                 && (result < v119
                  || v119 >= result
                  && ((v198 = *(_DWORD *)(*v116 + 16), v198 < v120)
                   || v120 >= v198
                   && ((v199 = *(_DWORD *)v116[1], v199 < v121) || v121 >= v199 && *((_DWORD *)v116 + 6) < v124)))))
              {
                for (i = v437 + 1; ; ++i)
                {
                  v126 = *i;
                  v127 = **i;
                  v128 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v127);
                  v129 = *(_DWORD *)(v127 + 16);
                  v130 = *(_DWORD *)v126[1];
                  v132 = *((_DWORD *)v116 + 4);
                  v131 = *((_DWORD *)v116 + 5);
                  v133 = *((_DWORD *)v126 + 6);
                  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                  v134 = *((_DWORD *)v126 + 4);
                  if (v134 < v132)
                    break;
                  if (v132 >= v134)
                  {
                    v135 = *((_DWORD *)v126 + 5);
                    if (v135 < v131)
                      break;
                    if (v131 >= v135)
                    {
                      if (result < v128)
                        break;
                      if (v128 >= result)
                      {
                        v136 = *(_DWORD *)(*v116 + 16);
                        if (v136 < v129)
                          break;
                        if (v129 >= v136)
                        {
                          v137 = *(_DWORD *)v116[1];
                          if (v137 < v130)
                            break;
                          if (v130 >= v137 && *((_DWORD *)v116 + 6) < v133)
                            break;
                        }
                      }
                    }
                  }
                }
LABEL_133:
                v139 = a2;
              }
              else
              {
                for (i = v437 + 1; ; ++i)
                {
                  v139 = a2;
                  if (i >= a2)
                    break;
                  v184 = *i;
                  v185 = **i;
                  v186 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v185);
                  v187 = *(_DWORD *)(v185 + 16);
                  v188 = *(_DWORD *)v184[1];
                  v190 = *((_DWORD *)v116 + 4);
                  v189 = *((_DWORD *)v116 + 5);
                  v191 = *((_DWORD *)v184 + 6);
                  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                  v192 = *((_DWORD *)v184 + 4);
                  if (v192 < v190)
                    goto LABEL_133;
                  if (v190 >= v192)
                  {
                    v193 = *((_DWORD *)v184 + 5);
                    if (v193 < v189)
                      goto LABEL_133;
                    if (v189 >= v193)
                    {
                      if (result < v186)
                        goto LABEL_133;
                      if (v186 >= result)
                      {
                        v194 = *(_DWORD *)(*v116 + 16);
                        if (v194 < v187)
                          goto LABEL_133;
                        if (v187 >= v194)
                        {
                          v195 = *(_DWORD *)v116[1];
                          if (v195 < v188)
                            goto LABEL_133;
                          if (v188 >= v195 && *((_DWORD *)v116 + 6) < v191)
                            goto LABEL_133;
                        }
                      }
                    }
                  }
                }
              }
              j = v139;
              if (i < v139)
              {
                for (j = a2 - 1; ; --j)
                {
                  v141 = *j;
                  v142 = **j;
                  v143 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v142);
                  v144 = *(_DWORD *)(v142 + 16);
                  v145 = *(_DWORD *)v141[1];
                  v147 = *((_DWORD *)v116 + 4);
                  v146 = *((_DWORD *)v116 + 5);
                  v148 = *((_DWORD *)v141 + 6);
                  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                  v149 = *((_DWORD *)v141 + 4);
                  if (v149 >= v147)
                  {
                    if (v147 < v149)
                      break;
                    v150 = *((_DWORD *)v141 + 5);
                    if (v150 >= v146)
                    {
                      if (v146 < v150)
                        break;
                      if (result >= v143)
                      {
                        if (v143 < result)
                          break;
                        v151 = *(_DWORD *)(*v116 + 16);
                        if (v151 >= v144)
                        {
                          if (v144 < v151)
                            break;
                          v152 = *(_DWORD *)v116[1];
                          if (v152 >= v145 && (v145 < v152 || *((_DWORD *)v116 + 6) >= v148))
                            break;
                        }
                      }
                    }
                  }
                }
              }
              while (i < j)
              {
                v154 = *i;
                *i++ = *j;
                *j = v154;
                while (1)
                {
                  v155 = *i;
                  v156 = **i;
                  v157 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v156);
                  v158 = *(_DWORD *)(v156 + 16);
                  v159 = *(_DWORD *)v155[1];
                  v161 = *((_DWORD *)v116 + 4);
                  v160 = *((_DWORD *)v116 + 5);
                  v162 = *((_DWORD *)v155 + 6);
                  v163 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                  v164 = *((_DWORD *)v155 + 4);
                  if (v164 < v161)
                    break;
                  if (v161 >= v164)
                  {
                    v165 = *((_DWORD *)v155 + 5);
                    if (v165 < v160)
                      break;
                    if (v160 >= v165)
                    {
                      if (v163 < v157)
                        break;
                      if (v157 >= v163)
                      {
                        v166 = *(_DWORD *)(*v116 + 16);
                        if (v166 < v158)
                          break;
                        if (v158 >= v166)
                        {
                          v167 = *(_DWORD *)v116[1];
                          if (v167 < v159)
                            break;
                          if (v159 >= v167 && *((_DWORD *)v116 + 6) < v162)
                            break;
                        }
                      }
                    }
                  }
                  ++i;
                }
                while (1)
                {
                  do
                  {
                    v170 = (uint64_t)*--j;
                    v169 = v170;
                    v171 = *(_QWORD *)v170;
                    v172 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v170);
                    v173 = *(_DWORD *)(v171 + 16);
                    v174 = **(_DWORD **)(v170 + 8);
                    v176 = *((_DWORD *)v116 + 4);
                    v175 = *((_DWORD *)v116 + 5);
                    v177 = *(_DWORD *)(v170 + 24);
                    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v116);
                    v178 = *(_DWORD *)(v170 + 16);
                  }
                  while (v178 < v176);
                  if (v176 < v178)
                    break;
                  v179 = *(_DWORD *)(v169 + 20);
                  if (v179 >= v175)
                  {
                    if (v175 < v179)
                      break;
                    if (result >= v172)
                    {
                      if (v172 < result)
                        break;
                      v180 = *(_DWORD *)(*v116 + 16);
                      if (v180 >= v173)
                      {
                        if (v173 < v180)
                          break;
                        v181 = *(_DWORD *)v116[1];
                        if (v181 >= v174 && (v174 < v181 || *((_DWORD *)v116 + 6) >= v177))
                          break;
                      }
                    }
                  }
                }
              }
              v183 = i - 1;
              if (i - 1 != v437)
                *v437 = *v183;
              a4 = 0;
              *v183 = v116;
              v5 = a2;
              a3 = v416;
              continue;
            }
          }
LABEL_21:
          v33 = 0;
          v34 = *v7;
          while (1)
          {
            v35 = v7[v33 + 1];
            v36 = *v34;
            v37 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
            v38 = *(_DWORD *)(v36 + 16);
            v39 = *(_DWORD *)v34[1];
            v41 = *((_DWORD *)v35 + 4);
            v40 = *((_DWORD *)v35 + 5);
            v42 = *((_DWORD *)v34 + 6);
            v43 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v35);
            v44 = *((_DWORD *)v34 + 4);
            if (v44 >= v41)
            {
              if (v41 < v44)
                break;
              v45 = *((_DWORD *)v34 + 5);
              if (v45 >= v40)
              {
                if (v40 < v45)
                  break;
                if (v43 >= v37)
                {
                  if (v37 < v43)
                    break;
                  v46 = *(_DWORD *)(*v35 + 16);
                  if (v46 >= v38)
                  {
                    if (v38 < v46)
                      break;
                    v47 = *(_DWORD *)v35[1];
                    if (v47 >= v39)
                    {
                      v48 = v39 < v47 || *((_DWORD *)v35 + 6) >= v42;
                      if (v48)
                        break;
                    }
                  }
                }
              }
            }
            ++v33;
          }
          v412 = &v7[v33];
          v429 = (unint64_t)&v7[v33 + 1];
          v49 = a2 - 1;
          if (v33 * 8)
          {
            while (1)
            {
              v52 = v49;
              v68 = *v49;
              v69 = *v34;
              v70 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
              v71 = *(_DWORD *)(v69 + 16);
              v72 = *(_DWORD *)v34[1];
              v73 = *((_DWORD *)v68 + 4);
              v74 = *((_DWORD *)v68 + 5);
              v75 = *((_DWORD *)v34 + 6);
              v76 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v68);
              v77 = *((_DWORD *)v34 + 4);
              if (v77 < v73)
                break;
              v7 = v437;
              if (v73 >= v77)
              {
                v78 = *((_DWORD *)v34 + 5);
                if (v78 < v74)
                  goto LABEL_76;
                if (v74 >= v78)
                {
                  if (v76 < v70)
                    goto LABEL_76;
                  if (v70 >= v76)
                  {
                    v79 = *(_DWORD *)(*v68 + 16);
                    if (v79 < v71)
                      goto LABEL_76;
                    if (v71 >= v79)
                    {
                      v80 = *(_DWORD *)v68[1];
                      if (v80 < v72)
                        goto LABEL_76;
                      if (v72 >= v80 && *((_DWORD *)v68 + 6) < v75)
                        goto LABEL_76;
                    }
                  }
                }
              }
              v49 = v52 - 1;
            }
LABEL_75:
            v7 = v437;
LABEL_76:
            v50 = v52;
          }
          else
          {
            v50 = a2;
            if (v429 < (unint64_t)a2)
            {
              for (k = a2 - 1; ; k = v50 - 1)
              {
                v52 = k;
                v53 = *k;
                v54 = *v34;
                v55 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
                v56 = *(_DWORD *)(v54 + 16);
                v57 = *(_DWORD *)v34[1];
                v58 = *((_DWORD *)v53 + 4);
                v59 = *((_DWORD *)v53 + 5);
                v60 = *((_DWORD *)v34 + 6);
                v61 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v53);
                v62 = *((_DWORD *)v34 + 4);
                if (v62 < v58)
                  break;
                v7 = v437;
                if (v58 < v62)
                  goto LABEL_48;
                v63 = *((_DWORD *)v34 + 5);
                if (v63 < v59)
                  goto LABEL_76;
                if (v59 < v63)
                  goto LABEL_48;
                if (v61 < v55)
                  goto LABEL_76;
                if (v55 < v61)
                  goto LABEL_48;
                v64 = *(_DWORD *)(*v53 + 16);
                if (v64 < v56)
                  goto LABEL_76;
                if (v56 >= v64)
                {
                  v65 = *(_DWORD *)v53[1];
                  if (v65 < v57)
                    goto LABEL_76;
                  v67 = v57 < v65 || *((_DWORD *)v53 + 6) >= v60;
                  v50 = v52;
                  if (v429 >= (unint64_t)v52 || !v67)
                    goto LABEL_77;
                }
                else
                {
LABEL_48:
                  v50 = v52;
                  if (v429 >= (unint64_t)v52)
                    goto LABEL_77;
                }
              }
              goto LABEL_75;
            }
          }
LABEL_77:
          v82 = v412;
          if (v429 < (unint64_t)v50)
          {
            v83 = (uint64_t **)v429;
            v413 = v50;
            v84 = v50;
            do
            {
              v85 = *v83;
              *v83++ = *v84;
              *v84 = v85;
              while (1)
              {
                v86 = *v83;
                v87 = *v34;
                v88 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
                v89 = *(_DWORD *)(v87 + 16);
                v90 = *(_DWORD *)v34[1];
                v91 = *((_DWORD *)v86 + 4);
                v92 = *((_DWORD *)v86 + 5);
                v93 = *((_DWORD *)v34 + 6);
                v94 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v86);
                v95 = *((_DWORD *)v34 + 4);
                if (v95 >= v91)
                {
                  if (v91 < v95)
                    break;
                  v96 = *((_DWORD *)v34 + 5);
                  if (v96 >= v92)
                  {
                    if (v92 < v96)
                      break;
                    if (v94 >= v88)
                    {
                      if (v88 < v94)
                        break;
                      v97 = *(_DWORD *)(*v86 + 16);
                      if (v97 >= v89)
                      {
                        if (v89 < v97)
                          break;
                        v98 = *(_DWORD *)v86[1];
                        if (v98 >= v90 && (v90 < v98 || *((_DWORD *)v86 + 6) >= v93))
                          break;
                      }
                    }
                  }
                }
                ++v83;
              }
              while (1)
              {
                v101 = (uint64_t)*--v84;
                v100 = v101;
                v102 = *v34;
                v103 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v34);
                v104 = *(_DWORD *)(v102 + 16);
                v105 = *(_DWORD *)v34[1];
                v106 = *(_DWORD *)(v101 + 16);
                v107 = *(_DWORD *)(v101 + 20);
                v108 = *((_DWORD *)v34 + 6);
                v109 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v101);
                v110 = *((_DWORD *)v34 + 4);
                if (v110 < v106)
                  break;
                if (v106 >= v110)
                {
                  v111 = *((_DWORD *)v34 + 5);
                  if (v111 < v107)
                    break;
                  if (v107 >= v111)
                  {
                    if (v109 < v103)
                      break;
                    if (v103 >= v109)
                    {
                      v112 = *(_DWORD *)(*(_QWORD *)v100 + 16);
                      if (v112 < v104)
                        break;
                      if (v104 >= v112)
                      {
                        v113 = **(_DWORD **)(v100 + 8);
                        if (v113 < v105)
                          break;
                        if (v105 >= v113 && *(_DWORD *)(v100 + 24) < v108)
                          break;
                      }
                    }
                  }
                }
              }
            }
            while (v83 < v84);
            v82 = v83 - 1;
            v7 = v437;
            v50 = v413;
          }
          if (v82 != v7)
            *v7 = *v82;
          *v82 = v34;
          v5 = a2;
          a3 = v416;
          if (v429 < (unint64_t)v50)
          {
LABEL_116:
            a4 = 0;
            i = v82 + 1;
            continue;
          }
          i = v82 + 1;
          if (!(_DWORD)result)
          {
            if (v115)
              continue;
            goto LABEL_116;
          }
          a2 = v82;
          if (v115)
            return result;
          goto LABEL_2;
        }
        v212 = v7 + 1;
        v213 = v7 == a2 || v212 == a2;
        v214 = v213;
        if ((a4 & 1) == 0)
        {
          if ((v214 & 1) == 0)
          {
            do
            {
              v367 = v437;
              v366 = v212;
              v369 = *v437;
              v368 = v437[1];
              v370 = **v437;
              v371 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v370);
              v372 = *(_DWORD *)(v370 + 16);
              v373 = *(_DWORD *)v369[1];
              v375 = *((_DWORD *)v368 + 4);
              v374 = *((_DWORD *)v368 + 5);
              v376 = *((_DWORD *)v369 + 6);
              result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v368);
              v377 = *((_DWORD *)v369 + 4);
              v437 = v366;
              if (v377 < v375
                || v375 >= v377
                && ((v378 = *((_DWORD *)v369 + 5), v378 < v374)
                 || v374 >= v378
                 && (result < v371
                  || v371 >= result
                  && ((v395 = *(_DWORD *)(*v368 + 16), v395 < v372)
                   || v372 >= v395
                   && ((v396 = *(_DWORD *)v368[1], v396 < v373)
                    || (v373 >= v396 ? (v397 = *((_DWORD *)v368 + 6) >= v376) : (v397 = 1), !v397))))))
              {
                v379 = *v366;
                while (1)
                {
                  do
                  {
                    v380 = v367;
                    v367[1] = *v367;
                    v382 = (uint64_t)*--v367;
                    v381 = v382;
                    v383 = *(_QWORD *)v382;
                    v384 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v382);
                    v385 = *(_DWORD *)(v383 + 16);
                    v386 = **(_DWORD **)(v382 + 8);
                    v388 = *((_DWORD *)v379 + 4);
                    v387 = *((_DWORD *)v379 + 5);
                    v389 = *(_DWORD *)(v382 + 24);
                    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v379);
                    v390 = *(_DWORD *)(v382 + 16);
                  }
                  while (v390 < v388);
                  if (v388 < v390)
                    break;
                  v391 = *(_DWORD *)(v381 + 20);
                  if (v391 >= v387)
                  {
                    if (v387 < v391)
                      break;
                    if (result >= v384)
                    {
                      if (v384 < result)
                        break;
                      v392 = *(_DWORD *)(*v379 + 16);
                      if (v392 >= v385)
                      {
                        if (v385 < v392)
                          break;
                        v393 = *(_DWORD *)v379[1];
                        if (v393 >= v386 && (v386 < v393 || *((_DWORD *)v379 + 6) >= v389))
                          break;
                      }
                    }
                  }
                }
                *v380 = v379;
                v366 = v437;
              }
              v212 = v366 + 1;
            }
            while (v366 + 1 != a2);
          }
          return result;
        }
        if ((v214 & 1) != 0)
          return result;
        v215 = 0;
        v216 = v437;
        while (2)
        {
          v422 = v212;
          v219 = *v216;
          v218 = v216[1];
          v220 = **v216;
          v221 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v220);
          v222 = *(_DWORD *)(v220 + 16);
          v223 = *(_DWORD *)v219[1];
          v224 = *((_DWORD *)v218 + 4);
          v225 = *((_DWORD *)v218 + 5);
          v226 = *((_DWORD *)v219 + 6);
          result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v218);
          v227 = *((_DWORD *)v219 + 4);
          if (v227 >= v224)
          {
            if (v224 < v227)
              goto LABEL_235;
            v228 = *((_DWORD *)v219 + 5);
            if (v228 >= v225)
            {
              if (v225 < v228)
                goto LABEL_235;
              if (result >= v221)
              {
                if (v221 < result)
                  goto LABEL_235;
                v245 = *(_DWORD *)(*v218 + 16);
                if (v245 >= v222)
                {
                  if (v222 < v245)
                    goto LABEL_235;
                  v246 = *(_DWORD *)v218[1];
                  if (v246 >= v223 && (v223 < v246 || *((_DWORD *)v218 + 6) >= v226))
                    goto LABEL_235;
                }
              }
            }
          }
          v229 = v216[1];
          v216[1] = *v216;
          v230 = v437;
          v217 = v437;
          if (v216 == v437)
            goto LABEL_234;
          v417 = v215;
          v231 = v215;
          while (1)
          {
            v232 = (uint64_t **)((char *)v230 + v231);
            v233 = *(uint64_t *)((char *)v230 + v231 - 8);
            v234 = *(_QWORD *)v233;
            v235 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v233);
            v236 = *(_DWORD *)(v234 + 16);
            v237 = **(_DWORD **)(v233 + 8);
            v239 = *((_DWORD *)v229 + 4);
            v238 = *((_DWORD *)v229 + 5);
            v430 = *(_DWORD *)(v233 + 24);
            result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v229);
            v240 = *(_DWORD *)(v233 + 16);
            if (v240 >= v239)
            {
              if (v239 < v240)
                goto LABEL_256;
              v241 = *(_DWORD *)(v233 + 20);
              if (v241 >= v238)
              {
                if (v238 < v241)
                  goto LABEL_256;
                if (result >= v235)
                {
                  if (v235 < result)
                    goto LABEL_256;
                  v242 = *(_DWORD *)(*v229 + 16);
                  if (v242 >= v236)
                    break;
                }
              }
            }
LABEL_241:
            --v216;
            *v232 = *(v232 - 1);
            v231 -= 8;
            v230 = v437;
            if (!v231)
            {
              v217 = v437;
              goto LABEL_233;
            }
          }
          if (v236 >= v242)
          {
            v243 = *(_DWORD *)v229[1];
            if (v243 >= v237 && (v237 < v243 || *((_DWORD *)v229 + 6) >= v430))
            {
LABEL_256:
              v217 = v216;
              goto LABEL_233;
            }
            goto LABEL_241;
          }
          v217 = (uint64_t **)((char *)v437 + v231);
LABEL_233:
          v215 = v417;
LABEL_234:
          *v217 = v229;
LABEL_235:
          v216 = v422;
          v212 = v422 + 1;
          v215 += 8;
          if (v422 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **,0>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int OperationDepth;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;

  v8 = *a5;
  v9 = *a4;
  v10 = **a4;
  OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v10);
  v12 = *(_DWORD *)(v10 + 16);
  v65 = *(_DWORD *)v9[1];
  v14 = *((_DWORD *)v8 + 4);
  v13 = *((_DWORD *)v8 + 5);
  v15 = *((_DWORD *)v9 + 6);
  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v8);
  v17 = *((_DWORD *)v9 + 4);
  if (v17 < v14
    || v14 >= v17
    && ((v54 = *((_DWORD *)v9 + 5), v54 < v13)
     || v13 >= v54
     && (result < OperationDepth
      || OperationDepth >= result
      && ((v55 = *(_DWORD *)(*v8 + 16), v55 < v12)
       || v12 >= v55
       && ((v56 = *(_DWORD *)v8[1], v56 < v65) || (v65 >= v56 ? (v57 = *((_DWORD *)v8 + 6) >= v15) : (v57 = 1), !v57))))))
  {
    v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    v19 = *a4;
    v20 = *a3;
    v21 = **a3;
    v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_DWORD *)v20[1];
    v26 = *((_DWORD *)v19 + 4);
    v25 = *((_DWORD *)v19 + 5);
    v27 = *((_DWORD *)v20 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v19);
    v28 = *((_DWORD *)v20 + 4);
    if (v28 < v26
      || v26 >= v28
      && ((v29 = *((_DWORD *)v20 + 5), v29 < v25)
       || v25 >= v29
       && (result < v22
        || v22 >= result
        && ((v63 = *(_DWORD *)(*v19 + 16), v63 < v23)
         || v23 >= v63 && ((v64 = *(_DWORD *)v19[1], v64 < v24) || v24 >= v64 && *((_DWORD *)v19 + 6) < v27)))))
    {
      v30 = *a3;
      *a3 = *a4;
      *a4 = v30;
      v31 = *a3;
      v32 = *a2;
      v33 = **a2;
      v34 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v33);
      v35 = *(_DWORD *)(v33 + 16);
      v36 = *(_DWORD *)v32[1];
      v38 = *((_DWORD *)v31 + 4);
      v37 = *((_DWORD *)v31 + 5);
      v39 = *((_DWORD *)v32 + 6);
      result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      v40 = *((_DWORD *)v32 + 4);
      if (v40 < v38
        || v38 >= v40
        && ((v41 = *((_DWORD *)v32 + 5), v41 < v37)
         || v37 >= v41
         && (result < v34
          || v34 >= result
          && ((v61 = *(_DWORD *)(*v31 + 16), v61 < v35)
           || v35 >= v61 && ((v62 = *(_DWORD *)v31[1], v62 < v36) || v36 >= v62 && *((_DWORD *)v31 + 6) < v39)))))
      {
        v42 = *a2;
        *a2 = *a3;
        *a3 = v42;
        v43 = *a2;
        v44 = *a1;
        v45 = **a1;
        v46 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v45);
        v47 = *(_DWORD *)(v45 + 16);
        v48 = *(_DWORD *)v44[1];
        v50 = *((_DWORD *)v43 + 4);
        v49 = *((_DWORD *)v43 + 5);
        v51 = *((_DWORD *)v44 + 6);
        result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v43);
        v52 = *((_DWORD *)v44 + 4);
        if (v52 < v50
          || v50 >= v52
          && ((v58 = *((_DWORD *)v44 + 5), v58 < v49)
           || v49 >= v58
           && (result < v46
            || v46 >= result
            && ((v59 = *(_DWORD *)(*v43 + 16), v59 < v47)
             || v47 >= v59 && ((v60 = *(_DWORD *)v43[1], v60 < v48) || v48 >= v60 && *((_DWORD *)v43 + 6) < v51)))))
        {
          v53 = *a1;
          *a1 = *a2;
          *a2 = v53;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int OperationDepth;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t result;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;

  v3 = a2;
  v4 = a1;
  v5 = *a2;
  v6 = *a1;
  v7 = **a1;
  OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v7);
  v9 = *(_DWORD *)(v7 + 16);
  v10 = *(_DWORD *)v6[1];
  v11 = *((_DWORD *)v5 + 4);
  v12 = *((_DWORD *)v5 + 5);
  v13 = *((_DWORD *)v6 + 6);
  v14 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v5);
  v15 = *((_DWORD *)v6 + 4);
  if (v15 >= v11
    && (v11 < v15
     || (v43 = *((_DWORD *)v6 + 5), v43 >= v12)
     && (v12 < v43
      || v14 >= OperationDepth
      && (OperationDepth < v14
       || (v44 = *(_DWORD *)(*v5 + 16), v44 >= v9)
       && (v9 < v44
        || (v45 = *(_DWORD *)v5[1], v45 >= v10) && (v10 >= v45 ? (v46 = *((_DWORD *)v5 + 6) >= v13) : (v46 = 1), v46))))))
  {
    v16 = *a3;
    v17 = *v3;
    v18 = **v3;
    v19 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v18);
    v20 = *(_DWORD *)(v18 + 16);
    v21 = *(_DWORD *)v17[1];
    v22 = *((_DWORD *)v16 + 4);
    v23 = *((_DWORD *)v16 + 5);
    v24 = *((_DWORD *)v17 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v16);
    v26 = *((_DWORD *)v17 + 4);
    if (v26 < v22
      || v22 >= v26
      && ((v27 = *((_DWORD *)v17 + 5), v27 < v23)
       || v23 >= v27
       && (result < v19
        || v19 >= result
        && ((v70 = *(_DWORD *)(*v16 + 16), v70 < v20)
         || v20 >= v70 && ((v71 = *(_DWORD *)v16[1], v71 < v21) || v21 >= v71 && *((_DWORD *)v16 + 6) < v24)))))
    {
      v28 = *v3;
      *v3 = *a3;
      *a3 = v28;
      v29 = *v3;
      v30 = *v4;
      v31 = **v4;
      v32 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v31);
      v33 = *(_DWORD *)(v31 + 16);
      v34 = *(_DWORD *)v30[1];
      v36 = *((_DWORD *)v29 + 4);
      v35 = *((_DWORD *)v29 + 5);
      v37 = *((_DWORD *)v30 + 6);
      result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v29);
      v38 = *((_DWORD *)v30 + 4);
      if (v38 < v36)
        goto LABEL_47;
      if (v36 < v38)
        return result;
      v39 = *((_DWORD *)v30 + 5);
      if (v39 < v35)
        goto LABEL_47;
      if (v35 < v39)
        return result;
      if (result < v32)
        goto LABEL_47;
      if (v32 < result)
        return result;
      v40 = *(_DWORD *)(*v29 + 16);
      if (v40 < v33)
        goto LABEL_47;
      if (v33 < v40)
        return result;
      v41 = *(_DWORD *)v29[1];
      if (v41 < v34)
        goto LABEL_47;
      if (v34 < v41)
        return result;
      v42 = *((_DWORD *)v29 + 6);
      goto LABEL_66;
    }
  }
  else
  {
    v47 = *a3;
    v48 = *v3;
    v49 = **v3;
    v50 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v49);
    v51 = *(_DWORD *)(v49 + 16);
    v52 = *(_DWORD *)v48[1];
    v53 = *((_DWORD *)v47 + 4);
    v54 = *((_DWORD *)v47 + 5);
    v74 = *((_DWORD *)v48 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v47);
    v55 = *((_DWORD *)v48 + 4);
    if (v55 < v53)
    {
      v3 = a3;
LABEL_47:
      v69 = *v4;
      *v4 = *v3;
      *v3 = v69;
      return result;
    }
    if (v53 >= v55)
    {
      v65 = *((_DWORD *)v48 + 5);
      if (v65 < v54
        || v54 >= v65
        && (result < v50
         || v50 >= result
         && ((v66 = *(_DWORD *)(*v47 + 16), v66 < v51)
          || v51 >= v66 && ((v67 = *(_DWORD *)v47[1], v67 < v52) || v52 >= v67 && *((_DWORD *)v47 + 6) < v74))))
      {
LABEL_46:
        v3 = a3;
        goto LABEL_47;
      }
    }
    v56 = *v4;
    *v4 = *v3;
    *v3 = v56;
    v57 = *a3;
    v58 = *v56;
    v59 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v56);
    v60 = *(_DWORD *)(v58 + 16);
    v61 = *(_DWORD *)v56[1];
    v62 = *((_DWORD *)v57 + 4);
    v63 = *((_DWORD *)v57 + 5);
    v37 = *((_DWORD *)v56 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v57);
    v64 = *((_DWORD *)v56 + 4);
    if (v64 < v62)
    {
      v4 = v3;
      v3 = a3;
      goto LABEL_47;
    }
    if (v62 < v64)
      return result;
    v68 = *((_DWORD *)v56 + 5);
    if (v68 < v63)
    {
LABEL_45:
      v4 = v3;
      goto LABEL_46;
    }
    if (v63 >= v68)
    {
      if (result < v59)
        goto LABEL_45;
      if (v59 >= result)
      {
        v72 = *(_DWORD *)(*v57 + 16);
        if (v72 < v60)
          goto LABEL_45;
        if (v60 >= v72)
        {
          v73 = *(_DWORD *)v57[1];
          if (v73 < v61)
            goto LABEL_45;
          if (v61 >= v73)
          {
            v42 = *((_DWORD *)v57 + 6);
            v4 = v3;
            v3 = a3;
LABEL_66:
            if (v42 >= v37)
              return result;
            goto LABEL_47;
          }
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int OperationDepth;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  uint64_t **v55;
  int v56;
  uint64_t **v57;
  uint64_t v58;
  unsigned int v59;

  v2 = a2;
  v3 = a2 - a1;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v5 = (uint64_t)*(a2 - 1);
      v6 = *a1;
      v7 = **a1;
      OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v7);
      v9 = *(_DWORD *)(v7 + 16);
      v10 = *(_DWORD *)v6[1];
      v11 = *(_DWORD *)(v5 + 16);
      v12 = *(_DWORD *)(v5 + 20);
      v13 = *((_DWORD *)v6 + 6);
      v14 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v5);
      v15 = *((_DWORD *)v6 + 4);
      if (v15 < v11
        || v11 >= v15
        && ((v51 = *((_DWORD *)v6 + 5), v51 < v12)
         || v12 >= v51
         && (v14 < OperationDepth
          || OperationDepth >= v14
          && ((v52 = *(_DWORD *)(*(_QWORD *)v5 + 16), v52 < v9)
           || v9 >= v52
           && ((v53 = **(_DWORD **)(v5 + 8), v53 < v10)
            || (v10 >= v53 ? (v54 = *(_DWORD *)(v5 + 24) >= v13) : (v54 = 1), !v54))))))
      {
        v16 = *a1;
        *a1 = *(v2 - 1);
        *(v2 - 1) = v16;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v17 = a1 + 2;
      v18 = a1 + 3;
      if (a1 + 3 == v2)
        return 1;
      v58 = 0;
      v56 = 0;
      v55 = v2;
      break;
  }
  do
  {
    v57 = v18;
    v20 = *v18;
    v21 = *v17;
    v22 = **v17;
    v23 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v22);
    v24 = *(_DWORD *)(v22 + 16);
    v25 = *(_DWORD *)v21[1];
    v26 = *((_DWORD *)v20 + 4);
    v27 = *((_DWORD *)v20 + 5);
    v28 = *((_DWORD *)v21 + 6);
    v29 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v20);
    v30 = *((_DWORD *)v21 + 4);
    if (v30 >= v26)
    {
      if (v26 < v30
        || (v47 = *((_DWORD *)v21 + 5), v47 >= v27)
        && (v27 < v47
         || v29 >= v23
         && (v23 < v29
          || (v48 = *(_DWORD *)(*v20 + 16), v48 >= v24)
          && (v24 < v48
           || (v49 = *(_DWORD *)v20[1], v49 >= v25)
           && (v25 >= v49 ? (v50 = *((_DWORD *)v20 + 6) >= v28) : (v50 = 1), v50)))))
      {
        v19 = v57;
        goto LABEL_8;
      }
    }
    v19 = v57;
    v31 = *v57;
    *v57 = *v17;
    v32 = a1;
    if (v17 == a1)
      goto LABEL_44;
    v33 = v58;
    while (1)
    {
      v34 = *(uint64_t *)((char *)a1 + v33 + 8);
      v35 = *(_QWORD *)v34;
      v36 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*(_QWORD *)v34);
      v37 = *(_DWORD *)(v35 + 16);
      v38 = **(_DWORD **)(v34 + 8);
      v40 = *((_DWORD *)v31 + 4);
      v39 = *((_DWORD *)v31 + 5);
      v59 = *(_DWORD *)(v34 + 24);
      v41 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      v42 = *(_DWORD *)(v34 + 16);
      if (v42 >= v40)
      {
        if (v40 < v42)
          goto LABEL_42;
        v43 = *(_DWORD *)(v34 + 20);
        if (v43 >= v39)
        {
          if (v39 < v43)
            goto LABEL_42;
          if (v41 >= v36)
          {
            if (v36 < v41)
              goto LABEL_42;
            v44 = *(_DWORD *)(*v31 + 16);
            if (v44 >= v37)
              break;
          }
        }
      }
LABEL_12:
      --v17;
      *(uint64_t **)((char *)a1 + v33 + 16) = *(uint64_t **)((char *)a1 + v33 + 8);
      v33 -= 8;
      if (v33 == -16)
      {
        v32 = a1;
        goto LABEL_43;
      }
    }
    if (v37 >= v44)
    {
      v45 = *(_DWORD *)v31[1];
      if (v45 >= v38 && (v38 < v45 || *((_DWORD *)v31 + 6) >= v59))
      {
        v32 = (uint64_t **)((char *)a1 + v33 + 16);
        goto LABEL_43;
      }
      goto LABEL_12;
    }
LABEL_42:
    v32 = v17;
LABEL_43:
    v2 = v55;
    v19 = v57;
LABEL_44:
    *v32 = v31;
    if (++v56 == 8)
      return v19 + 1 == v2;
LABEL_8:
    v17 = v19;
    v58 += 8;
    v18 = v19 + 1;
  }
  while (v19 + 1 != v2);
  return 1;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::pdl_to_pdl_interp::MatcherNode::generateMatcherTree(mlir::ModuleOp,mlir::pdl_to_pdl_interp::PredicateBuilder &,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::Position *,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::Position *>> &)::$_0 &,`anonymous namespace'::OrderedPredicate **>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int OperationDepth;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;

  v7 = *a4;
  v8 = *a3;
  v9 = **a3;
  OperationDepth = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v9);
  v11 = *(_DWORD *)(v9 + 16);
  v50 = *(_DWORD *)v8[1];
  v13 = *((_DWORD *)v7 + 4);
  v12 = *((_DWORD *)v7 + 5);
  v14 = *((_DWORD *)v8 + 6);
  result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v7);
  v16 = *((_DWORD *)v8 + 4);
  if (v16 < v13
    || v13 >= v16
    && ((v17 = *((_DWORD *)v8 + 5), v17 < v12)
     || v12 >= v17
     && (result < OperationDepth
      || OperationDepth >= result
      && ((v47 = *(_DWORD *)(*v7 + 16), v47 < v11)
       || v11 >= v47
       && ((v48 = *(_DWORD *)v7[1], v48 < v50) || (v50 >= v48 ? (v49 = *((_DWORD *)v7 + 6) >= v14) : (v49 = 1), !v49))))))
  {
    v18 = *a3;
    *a3 = *a4;
    *a4 = v18;
    v19 = *a3;
    v20 = *a2;
    v21 = **a2;
    v22 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v21);
    v23 = *(_DWORD *)(v21 + 16);
    v24 = *(_DWORD *)v20[1];
    v26 = *((_DWORD *)v19 + 4);
    v25 = *((_DWORD *)v19 + 5);
    v27 = *((_DWORD *)v20 + 6);
    result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v19);
    v28 = *((_DWORD *)v20 + 4);
    if (v28 < v26
      || v26 >= v28
      && ((v29 = *((_DWORD *)v20 + 5), v29 < v25)
       || v25 >= v29
       && (result < v22
        || v22 >= result
        && ((v45 = *(_DWORD *)(*v19 + 16), v45 < v23)
         || v23 >= v45 && ((v46 = *(_DWORD *)v19[1], v46 < v24) || v24 >= v46 && *((_DWORD *)v19 + 6) < v27)))))
    {
      v30 = *a2;
      *a2 = *a3;
      *a3 = v30;
      v31 = *a2;
      v32 = *a1;
      v33 = **a1;
      v34 = mlir::pdl_to_pdl_interp::Position::getOperationDepth(v33);
      v35 = *(_DWORD *)(v33 + 16);
      v36 = *(_DWORD *)v32[1];
      v38 = *((_DWORD *)v31 + 4);
      v37 = *((_DWORD *)v31 + 5);
      v39 = *((_DWORD *)v32 + 6);
      result = mlir::pdl_to_pdl_interp::Position::getOperationDepth(*v31);
      v40 = *((_DWORD *)v32 + 4);
      if (v40 < v38
        || v38 >= v40
        && ((v42 = *((_DWORD *)v32 + 5), v42 < v37)
         || v37 >= v42
         && (result < v34
          || v34 >= result
          && ((v43 = *(_DWORD *)(*v31 + 16), v43 < v35)
           || v35 >= v43 && ((v44 = *(_DWORD *)v31[1], v44 < v36) || v36 >= v44 && *((_DWORD *)v31 + 6) < v39)))))
      {
        v41 = *a1;
        *a1 = *a2;
        *a2 = v41;
      }
    }
  }
  return result;
}

uint64_t mlir::pdl_to_pdl_interp::OptimalBranching::OptimalBranching(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v3 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v3;
  v4 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void mlir::pdl_to_pdl_interp::OptimalBranching::solve(mlir::pdl_to_pdl_interp::OptimalBranching *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm *v29;
  _QWORD *v30;
  uint64_t v31;
  llvm *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm *v36;
  _QWORD *v37;
  uint64_t v38;
  llvm *v39;
  llvm *v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unsigned __int8 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned __int8 v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  llvm *v80;
  unsigned __int8 v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t *v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unint64_t *v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unsigned __int8 v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int32x2_t *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  llvm *v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  llvm *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unint64_t v144;
  unint64_t v145;
  llvm *v146;
  unsigned __int8 v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  unsigned int v155;
  _QWORD *v156;
  unsigned int v157;
  int v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unint64_t v162;
  uint64_t v163;
  char v164;
  unint64_t *v165;
  unint64_t v166;
  char v167;
  unint64_t *v168;
  char *v169;
  unint64_t v170;
  llvm *v171;
  unsigned int v172;
  unsigned __int8 v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unint64_t *v180;
  unsigned __int8 v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unint64_t *v186;
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  llvm *v190;
  unsigned __int8 v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  int v199;
  BOOL v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned __int8 v206;
  unint64_t v207;
  unint64_t v208;
  unsigned int v209;
  unsigned int v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  int v214;
  BOOL v215;
  unsigned int v216;
  int v217;
  unint64_t v218;
  int v219;
  int v220;
  int v221;
  unsigned int v222;
  int v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  int v228;
  unint64_t *v229;
  llvm *v230;
  unint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  uint64_t *v235;
  unint64_t v236;
  int v237;
  int v238;
  int v239;
  uint64_t *v240;
  unsigned int v241;
  llvm *v242;
  uint64_t v243;
  unsigned int v244;
  llvm *v245[2];
  int v246;
  unint64_t v247;
  llvm *v248;
  uint64_t v249;
  unsigned int v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t *v253;
  uint64_t v254;
  unsigned int v255;
  llvm *v256[2];
  unsigned int v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t *v260;
  uint64_t v261;
  _QWORD v262[8];

  v262[6] = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t *)((char *)this + 32);
  if (!*((_QWORD *)this + 5))
    goto LABEL_15;
  v3 = *((unsigned int *)this + 12);
  if (v3 > 4 * *((_DWORD *)this + 10) && v3 >= 0x41)
  {
    llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)this + 32);
LABEL_15:
    v260 = 0;
    v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, (unint64_t *)this + 3, &v260);
    v13 = v260;
    if ((v12 & 1) == 0)
    {
      v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v2, (uint64_t)this + 24, (unint64_t *)this + 3, v260);
      *v13 = *((_QWORD *)this + 3);
      v13[1] = 0;
    }
    v13[1] = 0;
    v248 = 0;
    v249 = 0;
    v250 = 0;
    v14 = *((_DWORD *)this + 2);
    if (!v14)
      goto LABEL_160;
    v15 = (4 * v14 / 3u + 1) | ((unint64_t)(4 * v14 / 3u + 1) >> 1);
    v16 = v15 | (v15 >> 2) | ((v15 | (v15 >> 2)) >> 4);
    llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v248, (((v16 | (v16 >> 8)) >> 16) | v16 | (v16 >> 8)) + 1);
    if (!*((_DWORD *)this + 2))
      goto LABEL_160;
    v17 = *((unsigned int *)this + 4);
    if ((_DWORD)v17)
    {
      v18 = 32 * v17;
      v19 = *(unint64_t **)this;
      while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v19 += 4;
        v18 -= 32;
        if (!v18)
          goto LABEL_160;
      }
    }
    else
    {
      v19 = *(unint64_t **)this;
    }
    v20 = *(_QWORD *)this + 32 * v17;
    if (v19 == (unint64_t *)v20)
      goto LABEL_160;
    v21 = 0;
LABEL_27:
    v247 = *v19;
    v260 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, &v247, &v260) & 1) != 0)goto LABEL_157;
    if ((_DWORD)v249)
    {
      v22 = v250;
      if (v250 > 4 * (int)v249 && v250 >= 0x41)
      {
        v23 = 1 << (33 - __clz(v249 - 1));
        if (v23 <= 64)
          v24 = 64;
        else
          v24 = v23;
        if (v24 == v250)
        {
          v249 = 0;
          v25 = v248;
          v26 = (v250 - 1) & 0xFFFFFFFFFFFFFFFLL;
          if (!v26)
          {
            v29 = v248;
LABEL_54:
            v40 = (llvm *)((char *)v25 + 16 * v22);
            do
            {
              *(_QWORD *)v29 = -4096;
              v29 = (llvm *)((char *)v29 + 16);
            }
            while (v29 != v40);
            goto LABEL_56;
          }
          v27 = v26 + 1;
          v28 = (v26 + 1) & 0x1FFFFFFFFFFFFFFELL;
          v29 = (llvm *)((char *)v248 + 16 * v28);
          v30 = (_QWORD *)((char *)v248 + 16);
          v31 = v28;
          do
          {
            *(v30 - 2) = -4096;
            *v30 = -4096;
            v30 += 4;
            v31 -= 2;
          }
          while (v31);
          if (v27 != v28)
            goto LABEL_54;
LABEL_56:
          while (1)
          {
            v41 = *(_QWORD *)this;
            v42 = *((_DWORD *)this + 4);
            v239 = v21;
            if (!v42)
              break;
            v43 = v247;
            if ((v44 & 1) == 0
            {
              v106 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v106 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v106;
            }
            v45 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v43) ^ HIDWORD(v43));
            v46 = 0x9DDFEA08EB382D69 * (HIDWORD(v43) ^ (v45 >> 47) ^ v45);
            v47 = (-348639895 * ((v46 >> 47) ^ v46)) & (v42 - 1);
            v48 = (uint64_t *)(v41 + 32 * v47);
            v49 = *v48;
            if (v247 != *v48)
            {
              v50 = 1;
              while (v49 != -4096)
              {
                v51 = v47 + v50++;
                v47 = v51 & (v42 - 1);
                v49 = *(_QWORD *)(v41 + 32 * v47);
                if (v247 == v49)
                {
                  v48 = (uint64_t *)(v41 + 32 * v47);
                  goto LABEL_65;
                }
              }
              v41 = *(_QWORD *)this;
              v52 = *((unsigned int *)this + 4);
              goto LABEL_64;
            }
LABEL_65:
            v53 = *((_DWORD *)this + 12);
            if (!v53)
            {
              v68 = 0;
LABEL_130:
              v68 *= 2;
LABEL_131:
              llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow((uint64_t)v2, v68);
              v260 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v2, &v247, &v260);
              v62 = v260;
              ++*((_DWORD *)this + 10);
              if (*v62 == -4096)
                goto LABEL_81;
LABEL_80:
              --*((_DWORD *)this + 11);
              goto LABEL_81;
            }
            v54 = *((_QWORD *)this + 4);
            v55 = v247;
            if ((v56 & 1) == 0
            {
              v107 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v107 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v107;
            }
            v57 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v55) ^ HIDWORD(v55));
            v58 = 0x9DDFEA08EB382D69 * (HIDWORD(v55) ^ (v57 >> 47) ^ v57);
            v59 = -348639895 * ((v58 >> 47) ^ v58);
            v60 = v53 - 1;
            v61 = v59 & (v53 - 1);
            v62 = (unint64_t *)(v54 + 16 * v61);
            v63 = *v62;
            if (v247 == *v62)
              goto LABEL_82;
            v64 = 0;
            v65 = 1;
            while (v63 != -4096)
            {
              if (v64)
                v66 = 0;
              else
                v66 = v63 == -8192;
              if (v66)
                v64 = v62;
              v67 = v61 + v65++;
              v61 = v67 & v60;
              v62 = (unint64_t *)(v54 + 16 * v61);
              v63 = *v62;
              if (v247 == *v62)
                goto LABEL_82;
            }
            if (v64)
              v62 = v64;
            v68 = *((_DWORD *)this + 12);
            v105 = *((_DWORD *)this + 10);
            if (4 * v105 + 4 >= 3 * v68)
              goto LABEL_130;
            if (v68 + ~v105 - *((_DWORD *)this + 11) <= v68 >> 3)
              goto LABEL_131;
            ++*((_DWORD *)this + 10);
            if (*v62 != -4096)
              goto LABEL_80;
LABEL_81:
            *v62 = v247;
            v62[1] = 0;
LABEL_82:
            if (!*((_DWORD *)v48 + 4))
              goto LABEL_100;
            v69 = *((unsigned int *)v48 + 6);
            if ((_DWORD)v69)
            {
              v70 = 24 * v69;
              v71 = v48[1];
              while ((*(_QWORD *)v71 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v71 += 24;
                v70 -= 24;
                if (!v70)
                  goto LABEL_100;
              }
            }
            else
            {
              v71 = v48[1];
            }
            v72 = v48[1] + 24 * v69;
            if (v71 == v72)
            {
LABEL_100:
              v73 = 0;
            }
            else
            {
              v73 = 0;
              v74 = 0;
              v75 = v62[1];
              do
              {
                v76 = *(_DWORD *)(v71 + 8);
                if (!v75 || v76 < v73 || v73 >= v76 && *(_DWORD *)(v71 + 12) < v74)
                {
                  v75 = *(_QWORD *)v71;
                  v62[1] = *(_QWORD *)v71;
                  v74 = *(_DWORD *)(v71 + 12);
                  v73 = v76;
                }
                do
                {
                  v71 += 24;
                  if (v71 == v72)
                    goto LABEL_101;
                }
                while ((*(_QWORD *)v71 | 0x1000) == 0xFFFFFFFFFFFFF000);
              }
              while (v71 != v72);
            }
LABEL_101:
            v77 = v250;
            if (!v250)
            {
              v88 = 0;
              goto LABEL_137;
            }
            v78 = v2;
            v79 = v247;
            v80 = v248;
            if ((v81 & 1) == 0
            {
              v108 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v108 = 0xFF51AFD7ED558CCDLL;
              llvm::hashing::detail::get_execution_seed(void)::seed = v108;
            }
            v82 = 0x9DDFEA08EB382D69
                * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v79) ^ HIDWORD(v79));
            v83 = 0x9DDFEA08EB382D69 * (HIDWORD(v79) ^ (v82 >> 47) ^ v82);
            v84 = v77 - 1;
            v85 = (-348639895 * ((v83 >> 47) ^ v83)) & (v77 - 1);
            v86 = (unint64_t *)((char *)v80 + 16 * v85);
            v87 = *v86;
            if (v247 != *v86)
            {
              v101 = 0;
              v102 = 1;
              while (v87 != -4096)
              {
                if (v101)
                  v103 = 0;
                else
                  v103 = v87 == -8192;
                if (v103)
                  v101 = v86;
                v104 = v85 + v102++;
                v85 = v104 & v84;
                v86 = (unint64_t *)((char *)v80 + 16 * (v104 & v84));
                v87 = *v86;
                v2 = v78;
                if (v247 == *v86)
                  goto LABEL_110;
              }
              if (v101)
                v86 = v101;
              v88 = v250;
              v2 = v78;
              if (4 * (int)v249 + 4 < 3 * v250)
              {
                if (v250 + ~(_DWORD)v249 - HIDWORD(v249) <= v250 >> 3)
                  goto LABEL_138;
                LODWORD(v249) = v249 + 1;
                if (*v86 == -4096)
                {
LABEL_109:
                  *v86 = v247;
                  *((_DWORD *)v86 + 2) = 0;
                  goto LABEL_110;
                }
              }
              else
              {
LABEL_137:
                v88 *= 2;
LABEL_138:
                llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::grow((uint64_t)&v248, v88);
                v260 = 0;
                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v248, &v247, &v260);
                v86 = v260;
                LODWORD(v249) = v249 + 1;
                if (*v260 == -4096)
                  goto LABEL_109;
              }
              --HIDWORD(v249);
              goto LABEL_109;
            }
            v2 = v78;
LABEL_110:
            *((_DWORD *)v86 + 2) = v73;
            v89 = v62[1];
            v247 = v89;
            v21 = v73 + v239;
            v90 = *((_DWORD *)this + 12);
            if (v90)
            {
              v91 = *((_QWORD *)this + 4);
              if ((v92 & 1) == 0
              {
                v109 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v109 = 0xFF51AFD7ED558CCDLL;
                llvm::hashing::detail::get_execution_seed(void)::seed = v109;
              }
              v93 = 0x9DDFEA08EB382D69
                  * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v89) ^ HIDWORD(v89));
              v94 = 0x9DDFEA08EB382D69 * (HIDWORD(v89) ^ (v93 >> 47) ^ v93);
              v95 = -348639895 * ((v94 >> 47) ^ v94);
              v96 = v90 - 1;
              v97 = v95 & (v90 - 1);
              v98 = *(_QWORD *)(v91 + 16 * v97);
              if (v247 == v98)
              {
LABEL_156:
                v260 = 0;
                if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v248, &v247, &v260))
                {
                  do
                  {
LABEL_157:
                    v19 += 4;
                    if (v19 == (unint64_t *)v20)
                      goto LABEL_160;
                  }
                  while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000);
                  if (v19 == (unint64_t *)v20)
LABEL_160:
                    llvm::deallocate_buffer(v248, (void *)(16 * v250));
                  goto LABEL_27;
                }
                v110 = v247;
                v260 = v262;
                v261 = 0x600000000;
                v111 = v247;
                while (1)
                {
LABEL_163:
                  v112 = v261;
                  if (v261 >= (unint64_t)HIDWORD(v261))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v260, v262, v261 + 1, 8);
                    v112 = v261;
                  }
                  v260[v112] = v111;
                  LODWORD(v261) = v261 + 1;
                  v113 = *((_DWORD *)this + 12);
                  if (!v113)
                    goto LABEL_162;
                  v114 = *((_QWORD *)this + 4);
                  if ((v115 & 1) == 0
                  {
                    v122 = llvm::hashing::detail::fixed_seed_override;
                    if (!llvm::hashing::detail::fixed_seed_override)
                      v122 = 0xFF51AFD7ED558CCDLL;
                    llvm::hashing::detail::get_execution_seed(void)::seed = v122;
                  }
                  v116 = 0x9DDFEA08EB382D69
                       * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v111) ^ HIDWORD(v111));
                  v117 = 0x9DDFEA08EB382D69 * (HIDWORD(v111) ^ (v116 >> 47) ^ v116);
                  v118 = (-348639895 * ((v117 >> 47) ^ v117)) & (v113 - 1);
                  v119 = *(_QWORD *)(v114 + 16 * v118);
                  if (v111 != v119)
                    break;
LABEL_168:
                  v111 = *(_QWORD *)(v114 + 16 * v118 + 8);
                  if (v110 == v111)
                  {
LABEL_178:
                    v245[0] = 0;
                    v245[1] = 0;
                    v246 = 0;
                    v242 = 0;
                    v243 = 0;
                    v244 = 0;
                    v258 = *v260;
                    v253 = v260;
                    v259 = &v260[v261];
                    llvm::detail::DenseSetImpl<mlir::Value,llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,llvm::DenseMapInfo<mlir::Value,void>>::DenseSetImpl<mlir::Value const*>((uint64_t)v256, &v253, &v259);
                    v253 = 0;
                    v254 = 0;
                    v255 = 0;
                    if (!*((_DWORD *)this + 2))
                      goto LABEL_351;
                    v123 = *((unsigned int *)this + 4);
                    if ((_DWORD)v123)
                    {
                      v124 = 32 * v123;
                      v125 = *(int32x2_t **)this;
                      while ((*(_QWORD *)v125 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v125 += 4;
                        v124 -= 32;
                        if (!v124)
                          goto LABEL_351;
                      }
                    }
                    else
                    {
                      v125 = *(int32x2_t **)this;
                    }
                    v126 = *(_QWORD *)this + 32 * v123;
                    if (v125 == (int32x2_t *)v126)
                      goto LABEL_351;
                    v127 = (unint64_t)*v125;
                    while (2)
                    {
                      v252 = v127;
                      v259 = 0;
                      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)v256, &v252, &v259))
                      {
                        v128 = v259;
                        v129 = v256[0];
                        v130 = v257;
                      }
                      else
                      {
                        v129 = v256[0];
                        v130 = v257;
                        v128 = (unint64_t *)((char *)v256[0] + 8 * v257);
                      }
                      v131 = v130;
                      if (v128 != (unint64_t *)((char *)v129 + 8 * v130))
                      {
                        v259 = 0;
                        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v248, &v252, &v259))v132 = *((_DWORD *)v259 + 2);
                        else
                          v132 = 0;
                        v137 = (llvm *)v125[1];
                        v138 = v125[3].u32[0];
                        if (!v125[2].i32[0])
LABEL_347:
                          llvm::deallocate_buffer(v137, (void *)(24 * v138));
                        v139 = (char *)v125[1];
                        if ((_DWORD)v138)
                        {
                          v140 = 0;
                          while ((*(_QWORD *)((char *)v137 + v140) | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v140 += 24;
                            if (24 * v138 == v140)
                              goto LABEL_347;
                          }
                          v139 = (char *)v137 + v140;
                        }
                        v169 = (char *)v137 + 24 * v138;
                        if (v139 == v169)
                          goto LABEL_347;
                        v170 = *(_QWORD *)v139;
                        while (2)
                        {
                          v251 = v170;
                          v171 = v256[0];
                          v172 = v257;
                          if (v257)
                          {
                            if ((v173 & 1) == 0)
                            {
                              v238 = v132;
                              v132 = v238;
                              if (v223)
                              {
                                v224 = llvm::hashing::detail::fixed_seed_override;
                                if (!llvm::hashing::detail::fixed_seed_override)
                                  v224 = 0xFF51AFD7ED558CCDLL;
                                llvm::hashing::detail::get_execution_seed(void)::seed = v224;
                                v132 = v238;
                              }
                            }
                            v175 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v170) ^ HIDWORD(v170));
                            v174 = 0x9DDFEA08EB382D69 * (HIDWORD(v170) ^ (v175 >> 47) ^ v175);
                            v170 = v251;
                            LODWORD(v175) = (-348639895 * ((v174 >> 47) ^ v174)) & (v172 - 1);
                            v176 = (uint64_t *)((char *)v171 + 8 * v175);
                            v177 = *v176;
                            if (v251 == *v176)
                            {
LABEL_256:
                              v171 = v256[0];
                              v178 = v257;
                              goto LABEL_259;
                            }
                            v219 = 1;
                            while (v177 != -4096)
                            {
                              v220 = v175 + v219++;
                              v175 = v220 & (v172 - 1);
                              v177 = *((_QWORD *)v171 + v175);
                              if (v251 == v177)
                              {
                                v176 = (uint64_t *)((char *)v171 + 8 * v175);
                                goto LABEL_256;
                              }
                            }
                            v171 = v256[0];
                            v178 = v257;
                          }
                          else
                          {
                            v178 = 0;
                          }
                          v176 = (uint64_t *)((char *)v171 + 8 * v178);
LABEL_259:
                          if (v176 == (uint64_t *)((char *)v171 + 8 * v178))
                          {
                            v235 = v2;
                            v233 = *((_DWORD *)v139 + 3);
                            v237 = v132;
                            v241 = *((_DWORD *)v139 + 2) - v132;
                            v179 = v255;
                            if (v255)
                            {
                              v180 = v253;
                              if ((v181 & 1) == 0
                              {
                                v225 = llvm::hashing::detail::fixed_seed_override;
                                if (!llvm::hashing::detail::fixed_seed_override)
                                  v225 = 0xFF51AFD7ED558CCDLL;
                                llvm::hashing::detail::get_execution_seed(void)::seed = v225;
                              }
                              v182 = 0x9DDFEA08EB382D69
                                   * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v170) ^ HIDWORD(v170));
                              v183 = 0x9DDFEA08EB382D69 * (HIDWORD(v170) ^ (v182 >> 47) ^ v182);
                              LODWORD(v182) = -348639895 * ((v183 >> 47) ^ v183);
                              v184 = v179 - 1;
                              v170 = v251;
                              v185 = v182 & (v179 - 1);
                              v186 = &v180[3 * v185];
                              v187 = *v186;
                              if (v251 == *v186)
                              {
LABEL_263:
                                if (v186 != &v253[3 * v255])
                                {
                                  v188 = *((_DWORD *)v186 + 2);
                                  if (v241 >= v188)
                                  {
                                    v132 = v237;
                                    if (v188 < v241 || *((_DWORD *)v186 + 3) <= v233)
                                      goto LABEL_300;
                                  }
                                }
                              }
                              else
                              {
                                v221 = 1;
                                while (v187 != -4096)
                                {
                                  v222 = v185 + v221++;
                                  v185 = v222 & v184;
                                  v186 = &v180[3 * (v222 & v184)];
                                  v187 = *v186;
                                  if (v251 == *v186)
                                    goto LABEL_263;
                                }
                              }
                            }
                            v189 = v244;
                            if (!v244)
                            {
                              v202 = 0;
                              goto LABEL_321;
                            }
                            v190 = v242;
                            if ((v191 & 1) == 0
                            {
                              v226 = llvm::hashing::detail::fixed_seed_override;
                              if (!llvm::hashing::detail::fixed_seed_override)
                                v226 = 0xFF51AFD7ED558CCDLL;
                              llvm::hashing::detail::get_execution_seed(void)::seed = v226;
                            }
                            v192 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v170) ^ HIDWORD(v170));
                            v193 = 0x9DDFEA08EB382D69 * (HIDWORD(v170) ^ (v192 >> 47) ^ v192);
                            v194 = v189 - 1;
                            v195 = (-348639895 * ((v193 >> 47) ^ v193)) & (v189 - 1);
                            v196 = (unint64_t *)((char *)v190 + 16 * v195);
                            v197 = *v196;
                            if (v251 != *v196)
                            {
                              v198 = 0;
                              v199 = 1;
                              while (v197 != -4096)
                              {
                                if (v198)
                                  v200 = 0;
                                else
                                  v200 = v197 == -8192;
                                if (v200)
                                  v198 = v196;
                                v201 = v195 + v199++;
                                v195 = v201 & v194;
                                v196 = (unint64_t *)((char *)v190 + 16 * (v201 & v194));
                                v197 = *v196;
                                if (v251 == *v196)
                                  goto LABEL_282;
                              }
                              if (v198)
                                v196 = v198;
                              v202 = v244;
                              if (4 * (int)v243 + 4 >= 3 * v244)
                              {
LABEL_321:
                                v202 *= 2;
LABEL_322:
                                llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow((uint64_t)&v242, v202);
                                v259 = 0;
                                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)&v242, &v251, &v259);
                                v196 = v259;
                                LODWORD(v243) = v243 + 1;
                                if (*v259 == -4096)
                                  goto LABEL_281;
LABEL_280:
                                --HIDWORD(v243);
                                goto LABEL_281;
                              }
                              if (v244 + ~(_DWORD)v243 - HIDWORD(v243) <= v244 >> 3)
                                goto LABEL_322;
                              LODWORD(v243) = v243 + 1;
                              if (*v196 != -4096)
                                goto LABEL_280;
LABEL_281:
                              *v196 = v251;
                              v196[1] = 0;
                            }
LABEL_282:
                            v196[1] = v252;
                            v203 = v255;
                            if (!v255)
                            {
                              v217 = 0;
                              goto LABEL_327;
                            }
                            v204 = v253;
                            v205 = v251;
                            if ((v206 & 1) == 0
                            {
                              v227 = llvm::hashing::detail::fixed_seed_override;
                              if (!llvm::hashing::detail::fixed_seed_override)
                                v227 = 0xFF51AFD7ED558CCDLL;
                              llvm::hashing::detail::get_execution_seed(void)::seed = v227;
                            }
                            v207 = 0x9DDFEA08EB382D69
                                 * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v205) ^ HIDWORD(v205));
                            v208 = 0x9DDFEA08EB382D69 * (HIDWORD(v205) ^ (v207 >> 47) ^ v207);
                            v209 = v203 - 1;
                            v210 = (-348639895 * ((v208 >> 47) ^ v208)) & (v203 - 1);
                            v211 = &v204[3 * v210];
                            v212 = *v211;
                            if (v251 != *v211)
                            {
                              v213 = 0;
                              v214 = 1;
                              while (v212 != -4096)
                              {
                                if (v213)
                                  v215 = 0;
                                else
                                  v215 = v212 == -8192;
                                if (v215)
                                  v213 = v211;
                                v216 = v210 + v214++;
                                v210 = v216 & v209;
                                v211 = &v204[3 * (v216 & v209)];
                                v212 = *v211;
                                if (v251 == *v211)
                                  goto LABEL_299;
                              }
                              if (v213)
                                v211 = v213;
                              v217 = v255;
                              if (4 * (int)v254 + 4 >= 3 * v255)
                              {
LABEL_327:
                                v217 *= 2;
LABEL_328:
                                llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::grow((uint64_t)&v253, v217);
                                v259 = 0;
                                llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>((uint64_t *)&v253, &v251, &v259);
                                v211 = v259;
                                LODWORD(v254) = v254 + 1;
                                if (*v259 == -4096)
                                  goto LABEL_298;
LABEL_297:
                                --HIDWORD(v254);
                                goto LABEL_298;
                              }
                              if (v255 + ~(_DWORD)v254 - HIDWORD(v254) <= v255 >> 3)
                                goto LABEL_328;
                              LODWORD(v254) = v254 + 1;
                              if (*v211 != -4096)
                                goto LABEL_297;
LABEL_298:
                              v218 = v251;
                              v211[1] = 0;
                              v211[2] = 0;
                              *v211 = v218;
                            }
LABEL_299:
                            *((_DWORD *)v211 + 2) = v241;
                            *((_DWORD *)v211 + 3) = v233;
                            v2 = v235;
                            v132 = v237;
                          }
LABEL_300:
                          v139 += 24;
                          if (v139 == v169)
                            goto LABEL_346;
                          while (1)
                          {
                            v170 = *(_QWORD *)v139;
                            if ((*(_QWORD *)v139 | 0x1000) != 0xFFFFFFFFFFFFF000)
                              break;
                            v139 += 24;
                            if (v139 == v169)
                              goto LABEL_346;
                          }
                          if (v139 == v169)
                          {
LABEL_346:
                            v137 = (llvm *)v125[1];
                            v138 = v125[3].u32[0];
                            goto LABEL_347;
                          }
                          continue;
                        }
                      }
                      v133 = (uint64_t *)&v125[1];
                      if (!v125[2].i32[0])
                        goto LABEL_348;
                      v134 = v125[3].u32[0];
                      if ((_DWORD)v134)
                      {
                        v135 = 24 * v134;
                        v136 = (_QWORD *)v125[1];
                        while ((*v136 | 0x1000) == 0xFFFFFFFFFFFFF000)
                        {
                          v136 += 3;
                          v135 -= 24;
                          if (!v135)
                            goto LABEL_348;
                        }
                      }
                      else
                      {
                        v136 = (_QWORD *)v125[1];
                      }
                      v141 = *(_QWORD *)&v125[1] + 24 * v134;
                      if (v136 == (_QWORD *)v141)
                        goto LABEL_348;
                      v142 = 0;
                      v143 = 0;
                      v144 = 0;
LABEL_209:
                      v145 = *v136;
                      v146 = v256[0];
                      if (v131)
                      {
                        if ((v147 & 1) == 0)
                        {
                          v236 = v144;
                          v240 = v133;
                          v234 = v143;
                          v232 = v142;
                          v142 = v232;
                          v143 = v234;
                          v144 = v236;
                          v133 = v240;
                          if (v158)
                          {
                            v159 = llvm::hashing::detail::fixed_seed_override;
                            if (!llvm::hashing::detail::fixed_seed_override)
                              v159 = 0xFF51AFD7ED558CCDLL;
                            llvm::hashing::detail::get_execution_seed(void)::seed = v159;
                            v142 = v232;
                            v143 = v234;
                            v144 = v236;
                            v133 = v240;
                          }
                        }
                        v148 = 0x9DDFEA08EB382D69
                             * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v145) ^ HIDWORD(v145));
                        v149 = 0x9DDFEA08EB382D69 * (HIDWORD(v145) ^ (v148 >> 47) ^ v148);
                        LODWORD(v149) = (-348639895 * ((v149 >> 47) ^ v149)) & (v131 - 1);
                        v150 = (uint64_t *)((char *)v146 + 8 * v149);
                        v151 = *v150;
                        if (*v150 == v145)
                        {
LABEL_212:
                          v146 = v256[0];
                          v131 = v257;
                          v152 = v257;
                          goto LABEL_219;
                        }
                        v153 = 1;
                        while (v151 != -4096)
                        {
                          v154 = v149 + v153++;
                          v149 = v154 & (v131 - 1);
                          v151 = *((_QWORD *)v146 + v149);
                          if (v151 == v145)
                          {
                            v150 = (uint64_t *)((char *)v146 + 8 * v149);
                            goto LABEL_212;
                          }
                        }
                        v146 = v256[0];
                        v131 = v257;
                      }
                      v152 = v131;
                      v150 = (uint64_t *)((char *)v146 + 8 * v131);
LABEL_219:
                      if (v150 != (uint64_t *)((char *)v146 + 8 * v152))
                      {
                        v155 = *((_DWORD *)v136 + 2);
                        if (v144 && v155 >= v142)
                        {
                          if (v142 < v155 || (v157 = *((_DWORD *)v136 + 3), v157 >= v143))
                          {
LABEL_230:
                            v156 = (_QWORD *)v141;
                            if (v136 + 3 != (_QWORD *)v141)
                            {
                              v156 = v136 + 3;
                              do
                              {
                                if ((*v156 | 0x1000) != 0xFFFFFFFFFFFFF000)
                                  goto LABEL_235;
                                v156 += 3;
                              }
                              while (v156 != (_QWORD *)v141);
                              v156 = (_QWORD *)v141;
                            }
LABEL_235:
                            *v136 = -8192;
                            v125[2] = vadd_s32(v125[2], (int32x2_t)0x1FFFFFFFFLL);
                            goto LABEL_236;
                          }
                        }
                        else
                        {
                          v157 = *((_DWORD *)v136 + 3);
                        }
                        v144 = v145;
                        v143 = v157;
                        v142 = *((_DWORD *)v136 + 2);
                        goto LABEL_230;
                      }
                      v156 = v136 + 3;
                      if (v136 + 3 == (_QWORD *)v141)
                        goto LABEL_244;
                      while ((*v156 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v156 += 3;
                        if (v156 == (_QWORD *)v141)
                          goto LABEL_244;
                      }
LABEL_236:
                      v136 = v156;
                      if (v156 == (_QWORD *)v141)
                      {
LABEL_244:
                        if (v144)
                        {
                          v160 = v142;
                          v161 = v143;
                          v162 = v144;
                          v259 = 0;
                          v163 = (uint64_t)v133;
                          v164 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::LookupBucketFor<mlir::Value>(v133, &v258, &v259);
                          v165 = v259;
                          if ((v164 & 1) == 0)
                          {
                            v165 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>,mlir::Value,llvm::StringRef,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::StringRef>>::InsertIntoBucketImpl<mlir::Value>(v163, (uint64_t)&v258, &v258, v259);
                            v166 = v258;
                            v165[1] = 0;
                            v165[2] = 0;
                            *v165 = v166;
                          }
                          *((_DWORD *)v165 + 2) = v160;
                          *((_DWORD *)v165 + 3) = v161;
                          v259 = 0;
                          v167 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v245, &v252, &v259);
                          v168 = v259;
                          if ((v167 & 1) == 0)
                          {
                            v168 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v245, (uint64_t)&v252, &v252, v259);
                            *v168 = v252;
                            v168[1] = 0;
                          }
                          v168[1] = v162;
                        }
                        do
                        {
LABEL_348:
                          v125 += 4;
                          if (v125 == (int32x2_t *)v126)
                            goto LABEL_351;
                          v127 = (unint64_t)*v125;
                        }
                        while ((*(_QWORD *)v125 | 0x1000) == 0xFFFFFFFFFFFFF000);
                        if (v125 == (int32x2_t *)v126)
                        {
LABEL_351:
                          v259 = 0;
                          v228 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)this, &v258, &v259);
                          v229 = v259;
                          if (v228)
                          {
                            v230 = (llvm *)v259[1];
                          }
                          else
                          {
                            v229 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)this, (uint64_t)&v258, &v258, v259);
                            v230 = 0;
                            v231 = v258;
                            v229[1] = 0;
                            v229[2] = 0;
                            *v229 = v231;
                            *((_DWORD *)v229 + 6) = 0;
                          }
                          llvm::deallocate_buffer(v230, (void *)(24 * *((unsigned int *)v229 + 6)));
                        }
                        continue;
                      }
                      goto LABEL_209;
                    }
                  }
                }
                v120 = 1;
                while (v119 != -4096)
                {
                  v121 = v118 + v120++;
                  v118 = v121 & (v113 - 1);
                  v119 = *(_QWORD *)(v114 + 16 * v118);
                  if (v111 == v119)
                    goto LABEL_168;
                }
LABEL_162:
                v111 = 0;
                if (!v110)
                  goto LABEL_178;
                goto LABEL_163;
              }
              v99 = 1;
              while (v98 != -4096)
              {
                v100 = v97 + v99++;
                v97 = v100 & v96;
                v98 = *(_QWORD *)(v91 + 16 * (v100 & v96));
                if (v247 == v98)
                  goto LABEL_156;
              }
            }
          }
          v52 = 0;
LABEL_64:
          v48 = (uint64_t *)(v41 + 32 * v52);
          goto LABEL_65;
        }
LABEL_42:
        llvm::deallocate_buffer(v248, (void *)(16 * v22));
      }
    }
    else
    {
      if (!HIDWORD(v249))
        goto LABEL_56;
      v22 = v250;
      if (v250 > 0x40)
        goto LABEL_42;
    }
    if (v22)
    {
      v32 = v248;
      v33 = (v22 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v33)
      {
        v34 = v33 + 1;
        v35 = (v33 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v36 = (llvm *)((char *)v248 + 16 * v35);
        v37 = (_QWORD *)((char *)v248 + 16);
        v38 = v35;
        do
        {
          *(v37 - 2) = -4096;
          *v37 = -4096;
          v37 += 4;
          v38 -= 2;
        }
        while (v38);
        if (v34 == v35)
          goto LABEL_52;
      }
      else
      {
        v36 = v248;
      }
      v39 = (llvm *)((char *)v32 + 16 * v22);
      do
      {
        *(_QWORD *)v36 = -4096;
        v36 = (llvm *)((char *)v36 + 16);
      }
      while (v36 != v39);
    }
LABEL_52:
    v249 = 0;
    goto LABEL_56;
  }
  if ((_DWORD)v3)
  {
    v4 = *v2;
    v5 = (v3 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v5)
    {
      v6 = v5 + 1;
      v7 = (v5 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v8 = (_QWORD *)(v4 + 16 * v7);
      v9 = (_QWORD *)(v4 + 16);
      v10 = v7;
      do
      {
        *(v9 - 2) = -4096;
        *v9 = -4096;
        v9 += 4;
        v10 -= 2;
      }
      while (v10);
      if (v6 == v7)
        goto LABEL_14;
    }
    else
    {
      v8 = (_QWORD *)*v2;
    }
    v11 = (_QWORD *)(v4 + 16 * v3);
    do
    {
      *v8 = -4096;
      v8 += 2;
    }
    while (v8 != v11);
  }
LABEL_14:
  *((_QWORD *)this + 5) = 0;
  goto LABEL_15;
}

void mlir::pdl_to_pdl_interp::OptimalBranching::preOrderTraversal(uint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  unint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char **v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  llvm *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  unint64_t *v56;
  uint64_t *v57;
  char **v58;
  unint64_t v59;
  unint64_t v60;
  llvm *v61[2];
  unsigned int v62;
  _QWORD *v63;

  v61[0] = 0;
  v61[1] = 0;
  v62 = 0;
  if (!a3)
  {
    *a4 = 0;
    a4[2] = 0;
    a4[1] = 0;
    v33 = a4 + 1;
    v32 = (char *)operator new(0x10uLL);
    *(_QWORD *)v32 = *(_QWORD *)(a1 + 24);
    *((_QWORD *)v32 + 1) = 0;
    v34 = v32 + 16;
    *a4 = v32;
    *v33 = v32 + 16;
    v58 = a4 + 2;
    a4[2] = v32 + 16;
    goto LABEL_36;
  }
  v6 = a2;
  v7 = (uint64_t *)(a1 + 32);
  v8 = &a2[a3];
  v57 = (uint64_t *)(a1 + 32);
  v56 = v8;
  while (1)
  {
    v60 = *v6;
    if (*(_QWORD *)(a1 + 24) == v60)
      goto LABEL_5;
    v63 = 0;
    v10 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v7, &v60, &v63);
    v11 = 0;
    if (v10)
      v11 = v63[1];
    v59 = v11;
    v63 = 0;
    v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)v61, &v59, &v63);
    v13 = v63;
    if ((v12 & 1) == 0)
    {
      v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v61, (uint64_t)&v59, &v59, v63);
      *v13 = v59;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = 0;
    }
    v15 = (char *)v13[2];
    v14 = v13[3];
    if ((unint64_t)v15 >= v14)
      break;
    *(_QWORD *)v15 = v60;
    v9 = (uint64_t)(v15 + 8);
LABEL_4:
    v13[2] = v9;
LABEL_5:
    if (++v6 == v8)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      if (a3 >> 60)
LABEL_70:
        abort();
      v32 = (char *)operator new(16 * a3);
      a4[2] = &v32[16 * a3];
      v58 = a4 + 2;
      a4[1] = v32;
      v33 = a4 + 1;
      *a4 = v32;
      *(_QWORD *)v32 = *(_QWORD *)(a1 + 24);
      *((_QWORD *)v32 + 1) = 0;
      v34 = v32 + 16;
LABEL_36:
      v35 = 0;
      *v33 = v34;
      while (2)
      {
        v60 = *(_QWORD *)&v32[16 * v35];
        v63 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)v61, &v60, &v63))
        {
          v37 = (uint64_t *)v63[1];
          v36 = (uint64_t *)v63[2];
          if (v37 == v36)
            goto LABEL_38;
        }
        else
        {
          v38 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v61, (uint64_t)&v60, &v60, v63);
          v37 = 0;
          *v38 = v60;
          v38[1] = 0;
          v38[2] = 0;
          v38[3] = 0;
          v36 = (uint64_t *)v38[2];
          if (!v36)
            goto LABEL_38;
        }
        v39 = *v58;
LABEL_45:
        while (1)
        {
          v41 = *v37;
          if (v34 >= v39)
            break;
          v40 = v60;
          *(_QWORD *)v34 = v41;
          *((_QWORD *)v34 + 1) = v40;
          v34 += 16;
          *v33 = v34;
          if (++v37 == v36)
            goto LABEL_37;
        }
        v42 = (v34 - v32) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
          goto LABEL_70;
        if ((v39 - v32) >> 3 > v43)
          v43 = (v39 - v32) >> 3;
        if ((unint64_t)(v39 - v32) >= 0x7FFFFFFFFFFFFFF0)
          v43 = 0xFFFFFFFFFFFFFFFLL;
        if (v43 >> 60)
          goto LABEL_71;
        v44 = 16 * v43;
        v45 = (char *)operator new(16 * v43);
        v46 = v60;
        v47 = &v45[16 * v42];
        *(_QWORD *)v47 = v41;
        *((_QWORD *)v47 + 1) = v46;
        if (v34 == v32)
        {
          v49 = &v45[16 * v42];
          v39 = &v45[v44];
          v34 = v47 + 16;
          *a4 = v47;
          a4[1] = v47 + 16;
          a4[2] = v39;
          if (v32)
            goto LABEL_56;
        }
        else
        {
          v48 = &v45[16 * v42];
          do
          {
            v49 = v48 - 16;
            *((_OWORD *)v48 - 1) = *((_OWORD *)v34 - 1);
            v34 -= 16;
            v48 -= 16;
          }
          while (v34 != v32);
          v39 = &v45[v44];
          v34 = v47 + 16;
          *a4 = v49;
          a4[1] = v47 + 16;
          a4[2] = v39;
          if (v32)
LABEL_56:
            operator delete(v32);
        }
        v32 = v49;
        *v33 = v34;
        if (++v37 == v36)
        {
LABEL_37:
          v32 = *a4;
LABEL_38:
          if (++v35 >= (unint64_t)((v34 - v32) >> 4))
          {
            v50 = v61[0];
            if (v62)
            {
              v51 = (_QWORD *)((char *)v61[0] + 16);
              v52 = 32 * v62;
              do
              {
                if ((*(v51 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
                {
                  v53 = (void *)*(v51 - 1);
                  if (v53)
                  {
                    *v51 = v53;
                    operator delete(v53);
                  }
                }
                v51 += 4;
                v52 -= 32;
              }
              while (v52);
              v50 = v61[0];
              v54 = (void *)(32 * v62);
            }
            else
            {
              v54 = 0;
            }
            llvm::deallocate_buffer(v50, v54);
          }
          continue;
        }
        goto LABEL_45;
      }
    }
  }
  v16 = (char *)v13[1];
  v17 = (v15 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    goto LABEL_70;
  v19 = v14 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
LABEL_71:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    *(_QWORD *)v22 = v60;
    v9 = (uint64_t)(v22 + 8);
    if (v15 == v16)
      goto LABEL_30;
  }
  else
  {
    v21 = 0;
    v22 = (char *)(8 * v17);
    *(_QWORD *)(8 * v17) = v60;
    v9 = 8 * v17 + 8;
    if (v15 == v16)
    {
LABEL_30:
      v13[1] = v22;
      v13[2] = v9;
      v13[3] = &v21[8 * v20];
      v7 = v57;
      if (v15)
        operator delete(v15);
      v8 = v56;
      goto LABEL_4;
    }
  }
  v23 = v15 - 8 - v16;
  if (v23 < 0x58)
    goto LABEL_74;
  if ((unint64_t)(v16 - v21) < 0x20)
    goto LABEL_74;
  v24 = (v23 >> 3) + 1;
  v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
  v26 = &v15[-v25];
  v22 -= v25;
  v27 = &v21[8 * v17 - 16];
  v28 = (__int128 *)(v15 - 16);
  v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v30 = *v28;
    *((_OWORD *)v27 - 1) = *(v28 - 1);
    *(_OWORD *)v27 = v30;
    v27 -= 32;
    v28 -= 2;
    v29 -= 4;
  }
  while (v29);
  v15 = v26;
  if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_74:
    do
    {
      v31 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *((_QWORD *)v22 - 1) = v31;
      v22 -= 8;
    }
    while (v15 != v16);
  }
  v15 = (char *)v13[1];
  goto LABEL_30;
}

uint64_t llvm::detail::DenseSetImpl<mlir::Value,llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,llvm::DenseMapInfo<mlir::Value,void>>::DenseSetImpl<mlir::Value const*>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v14;
  unint64_t v15;
  int64x2_t *buffer;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  int64x2_t *v21;
  int64x2_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;

  if (*a3 == *a2
    || (v6 = (((uint64_t)(*a3 - *a2) >> 3) - 1) | ((unint64_t)(((uint64_t)(*a3 - *a2) >> 3) - 1) >> 1),
        v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        LODWORD(v8) = HIDWORD(v8) | v8,
        v9 = __CFADD__((_DWORD)v8, 1),
        v10 = v8 + 1,
        v9))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    v14 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    LODWORD(v15) = (((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v15;
    buffer = (int64x2_t *)llvm::allocate_buffer(8 * v15, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = buffer;
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v19 = (char *)buffer;
      if (v18 < 3)
        goto LABEL_16;
      v20 = v18 + 1;
      v19 = &buffer->i8[8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
      v21 = buffer + 1;
      v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21[-1] = v22;
        *v21 = v22;
        v21 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_16:
        v24 = &buffer->i8[8 * v17];
        do
        {
          *(_QWORD *)v19 = -4096;
          v19 += 8;
        }
        while (v19 != v24);
      }
    }
  }
  v11 = (_QWORD *)*a2;
  v12 = (_QWORD *)*a3;
  while (v11 != v12)
  {
    v25 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, v11, &v25) & 1) == 0)*llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)v11, v11, v25) = *v11;
    ++v11;
  }
  return a1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>,mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,std::vector<mlir::Value>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,std::vector<mlir::Value>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  llvm *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(32 * v3);
    if ((_DWORD)v3)
    {
      v17 = 32 * v3;
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>,mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::DenseMap<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::pdl_to_pdl_interp::RootOrderingEntry>>>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          v19 = v25;
          *v25 = *(_QWORD *)v18;
          v19[1] = 0;
          v19[2] = 0;
          v19[3] = 0;
          *(_OWORD *)(v19 + 1) = *(_OWORD *)((char *)v18 + 8);
          v19[3] = *((_QWORD *)v18 + 3);
          *((_QWORD *)v18 + 1) = 0;
          *((_QWORD *)v18 + 2) = 0;
          *((_QWORD *)v18 + 3) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 32);
        v17 -= 32;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    if (((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_23;
    v21 = ((v20 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v21 & 0xFFFFFFFFFFFFFFELL)];
    v22 = result + 4;
    v23 = v21 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 4) = -4096;
      *v22 = -4096;
      v22 += 8;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v24 = &result[4 * v20];
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v24);
    }
  }
  return result;
}

mlir::Block *mlir::collect_regions::detail::verifyShouldAddToQueue(mlir::Block **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::Block *result;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t AttrData;
  uint64_t v12;
  uint64_t InherentAttr;
  char v14;
  mlir::Block *ParentOp;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  if (!a3)
    return 0;
  result = *(mlir::Block **)(a3 + 16);
  if (result)
  {
    result = (mlir::Block *)mlir::Block::getParentOp(result);
    if (result)
    {
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, a4);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v22 = v10;
      if (*(_BYTE *)(a3 + 47))
      {
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v22);
        InherentAttr = mlir::Operation::getInherentAttr(a3, AttrData, v12);
        if (v14)
        {
LABEL_8:
          if (InherentAttr)
            v9 = 0;
          ParentOp = *(mlir::Block **)(a3 + 16);
          if (ParentOp)
            ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
          if (ParentOp != *a1)
            v9 = 0;
          v16 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
          v17 = v9 & (*(_QWORD *)(*(_QWORD *)(a3 + 48) + 16) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id) & ~(*(unsigned __int8 (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 48) + 32))(*(_QWORD *)(a3 + 48), v16);
          if (*a1 == (mlir::Block *)a3)
            v18 = 0;
          else
            v18 = v17;
          v19 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
          v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 48) + 32))(*(_QWORD *)(a3 + 48), v19);
          v21 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
          return (mlir::Block *)(v18 & ((v20 | (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 48)
                                                                                               + 32))(*(_QWORD *)(a3 + 48), v21)) ^ 1));
        }
        v10 = v22;
      }
      InherentAttr = mlir::DictionaryAttr::get(a3 + 56, v10);
      goto LABEL_8;
    }
  }
  return result;
}

void mlir::collect_regions::detail::buildLiveInsLiveOuts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t *a5, int a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t DefiningOp;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _BOOL4 v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t NextResultAtOffset;

  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  v6 = *((unsigned int *)a4 + 2);
  if ((_DWORD)v6)
  {
    v9 = a3;
    v12 = *a4;
    v56 = (void *)(a1 + 16);
    v57 = (uint64_t)&(*a4)[v6];
    v54 = (void *)(a3 + 16);
    v55 = (void *)(a2 + 16);
    while (1)
    {
      v13 = *v12;
      v14 = *(_QWORD *)(*v12 + 24);
      v15 = *(unsigned int *)(v9 + 8);
      if (v15 >= *(unsigned int *)(v9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v54, v15 + 1, 8);
        v15 = *(unsigned int *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v15) = v14;
      ++*(_DWORD *)(v9 + 8);
      if ((*(_BYTE *)(v13 + 46) & 0x80) != 0)
      {
        v16 = *(unsigned int *)(v13 + 68);
        if ((_DWORD)v16)
        {
          v17 = 0;
          v18 = *(_QWORD *)(v13 + 72);
          do
          {
            NextResultAtOffset = *(_QWORD *)(v18 + 32 * v17 + 24);
            if ((~*(_DWORD *)(NextResultAtOffset + 8) & 7) == 0)
            {
LABEL_20:
              v27 = *(_QWORD **)a1;
              v28 = *(unsigned int *)(a1 + 8);
              v29 = *(_QWORD **)a1;
              if ((_DWORD)v28)
              {
                v30 = 8 * v28;
                v29 = *(_QWORD **)a1;
                while (*v29 != NextResultAtOffset)
                {
                  ++v29;
                  v30 -= 8;
                  if (!v30)
                  {
                    v29 = &v27[v28];
                    break;
                  }
                }
              }
              if (v28 == v29 - v27)
              {
                v31 = NextResultAtOffset;
                if (v28 >= *(_DWORD *)(a1 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, v56, v28 + 1, 8);
                  v28 = *(unsigned int *)(a1 + 8);
                  v27 = *(_QWORD **)a1;
                }
                v27[v28] = v31;
                ++*(_DWORD *)(a1 + 8);
              }
              goto LABEL_10;
            }
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
            v20 = *a5;
            v21 = *((unsigned int *)a5 + 4);
            if ((_DWORD)v21)
            {
              LODWORD(v22) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v21 - 1);
              v23 = (uint64_t *)(v20 + 8 * v22);
              v24 = *v23;
              if (*v23 == DefiningOp)
                goto LABEL_19;
              v25 = 1;
              while (v24 != -4096)
              {
                v26 = v22 + v25++;
                v22 = v26 & (v21 - 1);
                v24 = *(_QWORD *)(v20 + 8 * v22);
                if (v24 == DefiningOp)
                {
                  v23 = (uint64_t *)(v20 + 8 * v22);
                  goto LABEL_19;
                }
              }
            }
            v23 = (uint64_t *)(v20 + 8 * v21);
LABEL_19:
            if (v23 == (uint64_t *)(v20 + 8 * v21))
              goto LABEL_20;
LABEL_10:
            ++v17;
          }
          while (v17 != v16);
        }
      }
      v32 = *(unsigned int *)(v13 + 36);
      v33 = (_DWORD)v32 ? v13 - 16 : 0;
      if ((_DWORD)v32)
        break;
LABEL_3:
      ++v12;
      v9 = a3;
      if (v12 == (uint64_t *)v57)
        return;
    }
    v34 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v33, v34);
      v35 = *(_QWORD **)NextResultAtOffset;
      if (*(_QWORD *)NextResultAtOffset)
      {
        v36 = *((unsigned int *)a5 + 4);
        if ((_DWORD)v36)
        {
          v37 = *a5;
          v38 = v36 - 1;
          v39 = *a5 + 8 * v36;
          do
          {
            v40 = v35[2];
            LODWORD(v41) = ((v40 >> 4) ^ (v40 >> 9)) & v38;
            v42 = (uint64_t *)(v37 + 8 * v41);
            v43 = *v42;
            if (*v42 != v40)
            {
              v45 = 1;
              while (v43 != -4096)
              {
                v46 = v41 + v45++;
                v41 = v46 & v38;
                v43 = *(_QWORD *)(v37 + 8 * v41);
                if (v43 == v40)
                {
                  v42 = (uint64_t *)(v37 + 8 * v41);
                  goto LABEL_39;
                }
              }
              goto LABEL_50;
            }
LABEL_39:
            v44 = v42 == (uint64_t *)v39;
            if (v42 == (uint64_t *)v39)
              break;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
          if ((a6 & 1) != 0)
            goto LABEL_51;
LABEL_52:
          if (v44)
          {
            v49 = *(_QWORD **)a2;
            v50 = *(unsigned int *)(a2 + 8);
            v51 = *(_QWORD **)a2;
            if ((_DWORD)v50)
            {
              v52 = 8 * v50;
              v51 = *(_QWORD **)a2;
              while (*v51 != NextResultAtOffset)
              {
                ++v51;
                v52 -= 8;
                if (!v52)
                {
                  v51 = &v49[v50];
                  break;
                }
              }
            }
            if (v50 == v51 - v49)
            {
              v53 = NextResultAtOffset;
              if (v50 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v55, v50 + 1, 8);
                v50 = *(unsigned int *)(a2 + 8);
                v49 = *(_QWORD **)a2;
              }
              v49[v50] = v53;
              ++*(_DWORD *)(a2 + 8);
            }
          }
          goto LABEL_34;
        }
LABEL_50:
        v44 = 1;
        if ((a6 & 1) == 0)
          goto LABEL_52;
      }
      else
      {
        if (!a6)
          goto LABEL_34;
        v44 = 0;
      }
LABEL_51:
      v47 = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
      v48 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v47 + 48) + 32))(*(_QWORD *)(v47 + 48), v48) & 1) == 0)
        goto LABEL_52;
LABEL_34:
      if (++v34 == v32)
        goto LABEL_3;
    }
  }
}

void mlir::collectRegions(ZinIrHalH13g *a1, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  mlir::Operation *v10;
  mlir::Operation *v11;
  uint64_t v12;
  llvm *v13[2];
  int v14;
  llvm *v15;
  uint64_t v16;
  int v17;
  llvm *v18;
  uint64_t v19;
  int v20;
  llvm *v21[2];
  void *v22[2];
  __int128 v23;
  __int128 v24;
  llvm *v25[2];
  int v26;
  llvm *v27;
  uint64_t v28;
  int v29;
  llvm *v30;
  uint64_t v31;
  unsigned int v32;
  mlir::Operation *v33;
  uint64_t v34;
  char v35;
  _QWORD v36[3];
  void (**v37)(mlir::_anonymous_namespace_::BuildContext *__hidden);
  int v38;
  llvm *v39;
  uint64_t v40;
  int v41;
  mlir::Operation *v42;
  ZinIrHalH13g *v43;
  unint64_t v44[2];
  unint64_t v45[2];
  void *v46[2];
  uint64_t v47;
  void *v48[2];
  uint64_t v49;
  void *__dst;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[20];
  void *v57[2];
  _BYTE v58[48];
  void *v59;
  int v60[2];
  uint64_t v61;
  void *v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t *v66[2];
  _QWORD v67[10];

  v67[8] = *MEMORY[0x24BDAC8D0];
  v43 = a1;
  v42 = a2;
  v3 = *((_QWORD *)a2 + 1);
  v38 = 0;
  v37 = off_24C02EF78;
  v40 = 0;
  v39 = 0;
  v41 = 0;
  *(_QWORD *)(v3 + 8) = &v37;
  v22[0] = (void *)mlir::SymbolRefAttr::get(a1, a2);
  v56[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v22);
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v56);
  v36[2] = (*(uint64_t (**)(mlir::Operation *))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(_QWORD *__return_ptr, mlir::Operation *))(*(_QWORD *)a2 + 56))(v36, a2);
  v62 = &v65;
  v64 = 6;
  v59 = &v61;
  *(_QWORD *)v60 = 0x600000000;
  v35 = 1;
  v12 = v3;
  v63 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)v25 = 0u;
  v26 = 0;
  v33 = v42;
  v34 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x600000000;
  v56[0] = (uint64_t)&v43;
  v56[1] = (uint64_t)&v42;
  v56[2] = (uint64_t)v22;
  v56[3] = (uint64_t)v57;
  mlir::detail::walk<mlir::ForwardIterator>(v43, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_2>, (uint64_t)v56, 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v4 = *((_QWORD *)v43 + 2);
    ZinIrHalH13g::~ZinIrHalH13g(v43);
    *(_QWORD *)(v12 + 16) = v4;
    *(_QWORD *)(v12 + 24) = v5;
    v6 = (uint64_t **)((char *)v22[1] + 8 * ((unint64_t)v24 >> 9));
    if ((void *)v23 == v22[1])
    {
      v7 = 0;
      v9 = 0;
      v8 = (uint64_t **)((char *)v22[1] + 8 * ((*((_QWORD *)&v24 + 1) + (_QWORD)v24) >> 9));
    }
    else
    {
      v7 = &(*v6)[v24 & 0x1FF];
      v8 = (uint64_t **)((char *)v22[1] + 8 * ((*((_QWORD *)&v24 + 1) + (_QWORD)v24) >> 9));
      v9 = &(*v8)[(*((_QWORD *)&v24 + 1) + v24) & 0x1FF];
    }
    v56[0] = (uint64_t)&v62;
    std::__for_each_segment[abi:nn180100]<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::back_insert_iterator<llvm::SmallVector<mlir::Operation *,6u>>>>(v6, v7, v8, v9, v56);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v42 + 80))(v56);
    v66[0] = v67;
    v67[0] = "placement";
    v67[1] = 9;
    v66[1] = (uint64_t *)0x200000001;
    mlir::ConversionTarget::setDialectAction(v56, (uint64_t)v67, 1, 2);
    if (v66[0] != v67)
      free(v66[0]);
    v53 = &v55;
    v54 = 0x600000000;
    __dst = &v52;
    v51 = 0x600000000;
    v66[0] = (uint64_t *)v62;
    v13[0] = (llvm *)((char *)v62 + 8 * v63);
    llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>((uint64_t)v21, v66, (uint64_t **)v13);
    mlir::collect_regions::detail::buildLiveInsLiveOuts((uint64_t)&v53, (uint64_t)&__dst, (uint64_t)&v59, (uint64_t **)&v62, (uint64_t *)v21, 0);
    v48[0] = &v49;
    v48[1] = (void *)0x600000000;
    v46[0] = &v47;
    v46[1] = (void *)0x600000000;
    v10 = v42;
    mlir::ValueRange::ValueRange(v45, (uint64_t)__dst, v51);
    (*(void (**)(mlir::Operation *, unint64_t, unint64_t, void **))(*(_QWORD *)v10 + 192))(v10, v45[0], v45[1], v48);
    v11 = v42;
    mlir::ValueRange::ValueRange(v44, (uint64_t)v53, v54);
    (*(void (**)(mlir::Operation *, unint64_t, unint64_t, void **))(*(_QWORD *)v11 + 192))(v11, v44[0], v44[1], v46);
    v13[1] = 0;
    v13[0] = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    mlir::FusedLoc::get((uint64_t **)v59, (mlir::MLIRContext *)v60[0], 0, *(mlir::UnknownLoc **)v12);
  }
  if (v57[0] != v58)
    free(v57[0]);
  llvm::deallocate_buffer(v30, (void *)(8 * v32));
}

uint64_t sub_20746CE30()
{
  return 1;
}

void mlir::`anonymous namespace'::eraseOpsWeCannotConvert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t DefiningOp;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  llvm *v76;
  uint64_t v77;
  int v78;
  int v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  int v86;
  BOOL v87;
  unsigned int v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  int v103;
  BOOL v104;
  unsigned int v105;
  uint64_t *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  uint64_t *v127;
  unsigned int v128;
  uint64_t **v129;
  uint64_t v130;
  int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _BOOL4 v160;
  uint64_t NextResultAtOffset;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t *v180;
  _BOOL4 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  unsigned int v212;
  int v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  int v219;
  int v220;
  char v223;
  uint64_t v224;
  int v227;
  uint64_t v228;
  llvm *v230[2];
  unsigned int v231;
  void *__p[2];
  __int128 v233;
  unsigned __int128 v234;
  uint64_t v235;
  llvm *v236[2];
  unsigned int v237;
  _QWORD v238[2];
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243[4];
  uint64_t v244;
  _OWORD v245[2];
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;

  v238[0] = 0;
  v238[1] = 0;
  v239 = 0;
  v236[0] = 0;
  v236[1] = 0;
  v237 = 0;
  v11 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v11)
  {
    v13 = *(uint64_t **)a1;
    v228 = *(_QWORD *)a1 + 8 * v11;
    while (1)
    {
      v14 = *v13;
      v235 = *v13;
      v15 = *(_QWORD *)a7;
      v16 = *(unsigned int *)(a7 + 16);
      if ((_DWORD)v16)
      {
        LODWORD(v17) = (v16 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        v18 = (uint64_t *)(v15 + 8 * v17);
        v19 = *v18;
        if (*v18 != v14)
        {
          v20 = 1;
          do
          {
            if (v19 == -4096)
              goto LABEL_10;
            v21 = v17 + v20++;
            v17 = v21 & (v16 - 1);
            v19 = *(_QWORD *)(v15 + 8 * v17);
          }
          while (v19 != v14);
          v18 = (uint64_t *)(v15 + 8 * v17);
        }
      }
      else
      {
LABEL_10:
        v18 = (uint64_t *)(v15 + 8 * v16);
      }
      if (v18 == (uint64_t *)(v15 + 8 * v16))
        goto LABEL_14;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 1) == 0)
        break;
      if (++v13 == (uint64_t *)v228)
        goto LABEL_159;
    }
    v14 = v235;
LABEL_14:
    if ((*(_BYTE *)(v14 + 46) & 0x80) != 0)
    {
      v22 = *(unsigned int *)(v14 + 68);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = *(_QWORD *)(v14 + 72);
        do
        {
          v30 = *(_QWORD **)(v24 + 32 * v23 + 24);
          __p[0] = v30;
          v31 = (_QWORD *)*v30;
          if (*v30)
          {
            while (v235 == v31[2])
            {
              v31 = (_QWORD *)*v31;
              if (!v31)
                goto LABEL_25;
            }
          }
          else
          {
LABEL_25:
            *(_QWORD *)&v240 = v30;
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v240);
            if (DefiningOp)
            {
              v33 = DefiningOp;
              v34 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v33 + 48) + 32))(*(_QWORD *)(v33 + 48), v34))
              {
                v35 = mlir::Value::getDefiningOp((mlir::Value *)__p);
                v36 = v35;
                v37 = *(_QWORD *)a7;
                v27 = *(unsigned int *)(a7 + 16);
                v38 = v35 >> 4;
                if ((_DWORD)v27)
                {
                  LODWORD(v39) = (v38 ^ (v35 >> 9)) & (v27 - 1);
                  v40 = (uint64_t *)(v37 + 8 * v39);
                  v41 = *v40;
                  if (*v40 != v35)
                  {
                    v42 = 1;
                    do
                    {
                      if (v41 == -4096)
                        goto LABEL_33;
                      v43 = v39 + v42++;
                      v39 = v43 & (v27 - 1);
                      v41 = *(_QWORD *)(v37 + 8 * v39);
                    }
                    while (v41 != v35);
                    v40 = (uint64_t *)(v37 + 8 * v39);
                  }
                }
                else
                {
LABEL_33:
                  v40 = (uint64_t *)(v37 + 8 * v27);
                }
                if (v40 != (uint64_t *)(v37 + 8 * v27))
                {
                  mlir::Operation::removeAttr(v35, *a6);
                  v37 = *(_QWORD *)a7;
                  LODWORD(v27) = *(_DWORD *)(a7 + 16);
                }
                if ((_DWORD)v27)
                {
                  v44 = v27 - 1;
                  LODWORD(v27) = (v27 - 1) & (v38 ^ (v36 >> 9));
                  v29 = (uint64_t *)(v37 + 8 * v27);
                  v28 = *v29;
                  if (v36 != *v29)
                  {
                    v26 = 1;
                    do
                    {
                      if (v28 == -4096)
                        goto LABEL_21;
                      v25 = v27 + v26++;
                      v27 = v25 & v44;
                      v28 = *(_QWORD *)(v37 + 8 * v27);
                    }
                    while (v36 != v28);
                    v29 = (uint64_t *)(v37 + 8 * v27);
                  }
                  *v29 = -8192;
                  *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
            }
          }
LABEL_21:
          ++v23;
        }
        while (v23 != v22);
      }
    }
    v233 = 0u;
    v234 = 0u;
    *(_OWORD *)__p = 0u;
    v230[0] = 0;
    v230[1] = 0;
    v231 = 0;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    v46 = *((_QWORD *)&v234 + 1);
    v45 = v234;
    *(_QWORD *)(*(_QWORD *)((char *)__p[1] + ((((_QWORD)v234 + *((_QWORD *)&v234 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((v234 + *((_QWORD *)&v234 + 1)) & 0x1FF)) = v235;
    *((_QWORD *)&v234 + 1) = v46 + 1;
    if (v46 == -1)
      goto LABEL_107;
    v47 = (char *)__p[1];
LABEL_44:
    v49 = *(_QWORD *)(*(_QWORD *)&v47[(v45 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v45 & 0x1FF));
    if ((*(_BYTE *)(v49 + 46) & 0x80) == 0 || (v50 = *(unsigned int *)(v49 + 68), !(_DWORD)v50))
    {
LABEL_95:
      v89 = 0;
      goto LABEL_96;
    }
    v51 = 0;
    v52 = *(_QWORD *)(v49 + 72);
    while (1)
    {
      *(_QWORD *)&v240 = *(_QWORD *)(v52 + 32 * v51 + 24);
      *(_QWORD *)&v245[0] = 0;
      v57 = mlir::Value::getDefiningOp((mlir::Value *)&v240);
      *(_QWORD *)&v245[0] = v57;
      if (v57)
      {
        v58 = v57;
        v59 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v58 + 48) + 32))(*(_QWORD *)(v58 + 48), v59) & 1) == 0)
        {
          v60 = *(_QWORD *)&v245[0];
          v61 = *(_QWORD *)a7;
          v62 = *(unsigned int *)(a7 + 16);
          v63 = LODWORD(v245[0]) >> 4;
          if ((_DWORD)v62)
          {
            LODWORD(v64) = (v63 ^ (LODWORD(v245[0]) >> 9)) & (v62 - 1);
            v65 = (uint64_t *)(v61 + 8 * v64);
            v66 = *v65;
            if (*v65 != *(_QWORD *)&v245[0])
            {
              v67 = 1;
              do
              {
                if (v66 == -4096)
                  goto LABEL_57;
                v68 = v64 + v67++;
                v64 = v68 & (v62 - 1);
                v66 = *(_QWORD *)(v61 + 8 * v64);
              }
              while (v66 != *(_QWORD *)&v245[0]);
              v65 = (uint64_t *)(v61 + 8 * v64);
            }
          }
          else
          {
LABEL_57:
            v65 = (uint64_t *)(v61 + 8 * v62);
          }
          if (v65 != (uint64_t *)(v61 + 8 * v62))
          {
            v89 = 1;
LABEL_96:
            v47 = (char *)__p[1];
            v90 = *((_QWORD *)&v234 + 1) - 1;
            v45 = v234 + 1;
            v234 = __PAIR128__(*((unint64_t *)&v234 + 1), (uint64_t)v234 + 1) + __PAIR128__(-1, 0);
            if (v45 >= 0x400)
            {
              operator delete(*(void **)__p[1]);
              v47 = (char *)__p[1] + 8;
              v45 = v234 - 512;
              __p[1] = (char *)__p[1] + 8;
              *(_QWORD *)&v234 = v234 - 512;
              v90 = *((_QWORD *)&v234 + 1);
            }
            v87 = v90 == 0;
            v48 = v89 ^ 1;
            if (v87)
              v48 = 0;
            if ((v48 & 1) != 0)
              goto LABEL_44;
            if ((v89 & 1) != 0)
            {
              v91 = v235;
              v92 = *(unsigned int *)(v235 + 36);
              v93 = v235 - 16;
              if ((_DWORD)v92)
                v94 = v235 - 16;
              else
                v94 = 0;
              v247 = v94;
              v248 = v92;
              mlir::ResultRange::use_begin(&v247, (uint64_t *)v245);
              v95 = *(unsigned int *)(v91 + 36);
              if ((_DWORD)v95)
                v96 = v93;
              else
                v96 = 0;
              v247 = v96;
              v248 = v95;
              mlir::ResultRange::use_end(&v247, v243);
              v97 = v246;
              v242 = v246;
              v240 = v245[0];
              v241 = v245[1];
              v98 = v244;
              while (2)
              {
                if (v97 == v98)
                  goto LABEL_120;
                v247 = *(_QWORD *)(v97 + 16);
                v112 = v247;
                v113 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
                if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v112 + 48) + 32))(*(_QWORD *)(v112 + 48), v113) & 1) == 0)
                {
                  v114 = *(_QWORD *)a7;
                  v109 = *(unsigned int *)(a7 + 16);
                  if ((_DWORD)v109)
                  {
                    LODWORD(v115) = ((v247 >> 4) ^ (v247 >> 9)) & (v109 - 1);
                    v116 = (uint64_t *)(v114 + 8 * v115);
                    v117 = *v116;
                    if (*v116 != v247)
                    {
                      v118 = 1;
                      do
                      {
                        if (v117 == -4096)
                          goto LABEL_134;
                        v119 = v115 + v118++;
                        v115 = v119 & (v109 - 1);
                        v117 = *(_QWORD *)(v114 + 8 * v115);
                      }
                      while (v117 != v247);
                      v116 = (uint64_t *)(v114 + 8 * v115);
                    }
                  }
                  else
                  {
LABEL_134:
                    v116 = (uint64_t *)(v114 + 8 * v109);
                  }
                  if (v116 != (uint64_t *)(v114 + 8 * v109))
                  {
                    mlir::Operation::removeAttr(v247, *a6);
                    if (!v237)
                    {
                      v127 = 0;
                      goto LABEL_148;
                    }
                    v120 = ((v247 >> 4) ^ (v247 >> 9)) & (v237 - 1);
                    v121 = (uint64_t *)((char *)v236[0] + 8 * v120);
                    v122 = *v121;
                    if (v247 != *v121)
                    {
                      v123 = 0;
                      v124 = 1;
                      while (v122 != -4096)
                      {
                        if (v123)
                          v125 = 0;
                        else
                          v125 = v122 == -8192;
                        if (v125)
                          v123 = v121;
                        v126 = v120 + v124++;
                        v120 = v126 & (v237 - 1);
                        v121 = (uint64_t *)((char *)v236[0] + 8 * v120);
                        v122 = *v121;
                        if (v247 == *v121)
                          goto LABEL_149;
                      }
                      if (v123)
                        v127 = v123;
                      else
                        v127 = v121;
LABEL_148:
                      llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v236, v127, &v247);
                    }
LABEL_149:
                    v114 = *(_QWORD *)a7;
                    LODWORD(v109) = *(_DWORD *)(a7 + 16);
                  }
                  if ((_DWORD)v109)
                  {
                    v128 = v109 - 1;
                    LODWORD(v109) = ((v247 >> 4) ^ (v247 >> 9)) & (v109 - 1);
                    v111 = (uint64_t *)(v114 + 8 * v109);
                    v110 = *v111;
                    if (v247 != *v111)
                    {
                      v108 = 1;
                      do
                      {
                        if (v110 == -4096)
                          goto LABEL_125;
                        v107 = v109 + v108++;
                        v109 = v107 & v128;
                        v110 = *(_QWORD *)(v114 + 8 * v109);
                      }
                      while (v247 != v110);
                      v111 = (uint64_t *)(v114 + 8 * v109);
                    }
                    *v111 = -8192;
                    *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                  }
                }
LABEL_125:
                mlir::ResultRange::UseIterator::operator++((uint64_t *)v245);
                v97 = v246;
                continue;
              }
            }
LABEL_107:
            if (v239)
            {
              v99 = ((v235 >> 4) ^ (v235 >> 9)) & (v239 - 1);
              v100 = (uint64_t *)(v238[0] + 8 * v99);
              v101 = *v100;
              if (v235 != *v100)
              {
                v102 = 0;
                v103 = 1;
                while (v101 != -4096)
                {
                  if (v102)
                    v104 = 0;
                  else
                    v104 = v101 == -8192;
                  if (v104)
                    v102 = v100;
                  v105 = v99 + v103++;
                  v99 = v105 & (v239 - 1);
                  v100 = (uint64_t *)(v238[0] + 8 * v99);
                  v101 = *v100;
                  if (v235 == *v100)
                    goto LABEL_120;
                }
                if (v102)
                  v106 = v102;
                else
                  v106 = v100;
LABEL_119:
                llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v238, v106, &v235);
              }
LABEL_120:
              llvm::deallocate_buffer(v230[0], (void *)(8 * v231));
            }
            v106 = 0;
            goto LABEL_119;
          }
          if (v239)
          {
            LODWORD(v69) = (v239 - 1) & (v63 ^ (LODWORD(v245[0]) >> 9));
            v70 = (uint64_t *)(v238[0] + 8 * v69);
            v71 = *v70;
            if (*v70 != *(_QWORD *)&v245[0])
            {
              v72 = 1;
              do
              {
                if (v71 == -4096)
                  goto LABEL_65;
                v73 = v69 + v72++;
                v69 = v73 & (v239 - 1);
                v71 = *(_QWORD *)(v238[0] + 8 * v69);
              }
              while (v71 != *(_QWORD *)&v245[0]);
              v70 = (uint64_t *)(v238[0] + 8 * v69);
            }
          }
          else
          {
LABEL_65:
            v70 = (uint64_t *)(v238[0] + 8 * v239);
          }
          if (v70 == (uint64_t *)(v238[0] + 8 * v239))
          {
            v74 = v231;
            if (v231)
            {
              LODWORD(v75) = (v231 - 1) & (v63 ^ (LODWORD(v245[0]) >> 9));
              v76 = (llvm *)((char *)v230[0] + 8 * v75);
              v77 = *(_QWORD *)v76;
              if (*(_QWORD *)v76 != *(_QWORD *)&v245[0])
              {
                v78 = 1;
                do
                {
                  if (v77 == -4096)
                    goto LABEL_73;
                  v79 = v75 + v78++;
                  v75 = v79 & (v231 - 1);
                  v77 = *((_QWORD *)v230[0] + v75);
                }
                while (v77 != *(_QWORD *)&v245[0]);
                v76 = (llvm *)((char *)v230[0] + 8 * v75);
              }
            }
            else
            {
LABEL_73:
              v76 = (llvm *)((char *)v230[0] + 8 * v231);
            }
            if (v76 == (llvm *)((char *)v230[0] + 8 * v231))
            {
              v80 = (char *)__p[1];
              if ((void *)v233 == __p[1])
                v81 = 0;
              else
                v81 = (((_QWORD)v233 - (unint64_t)__p[1]) << 6) - 1;
              v82 = *((_QWORD *)&v234 + 1);
              v83 = *((_QWORD *)&v234 + 1) + v234;
              if (v81 == *((_QWORD *)&v234 + 1) + (_QWORD)v234)
              {
                std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
                v82 = *((_QWORD *)&v234 + 1);
                v80 = (char *)__p[1];
                v83 = v234 + *((_QWORD *)&v234 + 1);
                v60 = *(_QWORD *)&v245[0];
                v74 = v231;
              }
              *(_QWORD *)(*(_QWORD *)&v80[(v83 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v83 & 0x1FF)) = v60;
              *((_QWORD *)&v234 + 1) = v82 + 1;
              if (!v74)
              {
                v84 = 0;
LABEL_82:
                llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v230, v84, (uint64_t *)v245);
                goto LABEL_48;
              }
              v53 = v74 - 1;
              v54 = ((LODWORD(v245[0]) >> 4) ^ (LODWORD(v245[0]) >> 9)) & v53;
              v55 = (uint64_t *)((char *)v230[0] + 8 * v54);
              v56 = *v55;
              if (*(_QWORD *)&v245[0] != *v55)
              {
                v85 = 0;
                v86 = 1;
                while (v56 != -4096)
                {
                  if (v85)
                    v87 = 0;
                  else
                    v87 = v56 == -8192;
                  if (v87)
                    v85 = v55;
                  v88 = v54 + v86++;
                  v54 = v88 & v53;
                  v55 = (uint64_t *)((char *)v230[0] + 8 * v54);
                  v56 = *v55;
                  if (*(_QWORD *)&v245[0] == *v55)
                    goto LABEL_48;
                }
                if (v85)
                  v84 = v85;
                else
                  v84 = v55;
                goto LABEL_82;
              }
            }
          }
        }
      }
LABEL_48:
      if (++v51 == v50)
        goto LABEL_95;
    }
  }
LABEL_159:
  v129 = (uint64_t **)a1;
  mlir::collect_regions::detail::buildLiveInsLiveOuts(a3, a4, a5, (uint64_t **)a1, (uint64_t *)a7, 0);
  v130 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v130)
    goto LABEL_267;
  v223 = 0;
  v131 = a9;
  v132 = *(uint64_t **)a1;
  v133 = *(_QWORD *)a1 + 8 * v130;
  v224 = v133;
  while (1)
  {
    v134 = *v132;
    v135 = *(_QWORD *)a7;
    v136 = *(unsigned int *)(a7 + 16);
    if ((_DWORD)v136)
    {
      LODWORD(v137) = ((v134 >> 4) ^ (v134 >> 9)) & (v136 - 1);
      v138 = (uint64_t *)(v135 + 8 * v137);
      v139 = *v138;
      if (*v138 != v134)
      {
        v140 = 1;
        do
        {
          if (v139 == -4096)
            goto LABEL_169;
          v141 = v137 + v140++;
          v137 = v141 & (v136 - 1);
          v139 = *(_QWORD *)(v135 + 8 * v137);
        }
        while (v139 != v134);
        v138 = (uint64_t *)(v135 + 8 * v137);
      }
    }
    else
    {
LABEL_169:
      v138 = (uint64_t *)(v135 + 8 * v136);
    }
    if (v138 == (uint64_t *)(v135 + 8 * v136) || v131 == 0)
      goto LABEL_162;
    v143 = mlir::TypeID::get<mlir::OpTrait::TypeChanger<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::TypeChanger>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v134 + 48) + 32))(*(_QWORD *)(v134 + 48), v143))goto LABEL_162;
    if ((*(_BYTE *)(v134 + 46) & 0x80) != 0 && (v144 = *(unsigned int *)(v134 + 68), (_DWORD)v144))
    {
      v145 = 0;
      v146 = *(_QWORD *)(v134 + 72);
      while (1)
      {
        v148 = *(_QWORD *)(v146 + 32 * v145 + 24);
        *(_QWORD *)&v240 = v148;
        v149 = mlir::Value::getDefiningOp((mlir::Value *)&v240);
        if (!v149
          || (v150 = v149,
              v151 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
              ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v150 + 48) + 32))(*(_QWORD *)(v150 + 48), v151) & 1) == 0))
        {
          v152 = *(_QWORD **)a3;
          v153 = *(unsigned int *)(a3 + 8);
          if ((_DWORD)v153)
          {
            v154 = 8 * v153;
            v147 = *(_QWORD **)a3;
            do
            {
              if (*v147 == v148)
                goto LABEL_179;
              ++v147;
              v154 -= 8;
            }
            while (v154);
            v147 = &v152[v153];
          }
          else
          {
            v147 = *(_QWORD **)a3;
          }
LABEL_179:
          if (v153 == v147 - v152)
            break;
        }
        if (++v145 == v144)
          goto LABEL_188;
      }
      v227 = 0;
    }
    else
    {
LABEL_188:
      v227 = 1;
    }
    v155 = *(unsigned int *)(v134 + 36);
    v156 = (_DWORD)v155 ? v134 - 16 : 0;
    if (!(_DWORD)v155)
      break;
    v157 = 0;
    do
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v156, v157);
      v163 = *(_QWORD **)a4;
      v164 = *(unsigned int *)(a4 + 8);
      if ((_DWORD)v164)
      {
        v165 = 8 * v164;
        v158 = *(_QWORD **)a4;
        do
        {
          if (*v158 == NextResultAtOffset)
            goto LABEL_196;
          ++v158;
          v165 -= 8;
        }
        while (v165);
        v158 = &v163[v164];
      }
      else
      {
        v158 = *(_QWORD **)a4;
      }
LABEL_196:
      v159 = v158 - v163;
      v160 = v159 == v164;
      ++v157;
    }
    while (v159 != v164 && v157 != v155);
    v166 = *(unsigned int *)(v134 + 36);
    if (!(_DWORD)v166)
      goto LABEL_208;
    v167 = v134 - 16;
LABEL_209:
    *(_QWORD *)&v245[0] = v167;
    *((_QWORD *)&v245[0] + 1) = v166;
    mlir::ResultRange::use_begin((uint64_t *)v245, (uint64_t *)__p);
    v168 = *(unsigned int *)(v134 + 36);
    if ((_DWORD)v168)
      v169 = v134 - 16;
    else
      v169 = 0;
    *(_QWORD *)&v245[0] = v169;
    *((_QWORD *)&v245[0] + 1) = v168;
    mlir::ResultRange::use_end((uint64_t *)v245, v243);
    v170 = v234;
    v242 = v234;
    v240 = *(_OWORD *)__p;
    v241 = v233;
    v171 = v244;
    if ((_QWORD)v234 == v244)
    {
      v181 = 0;
      v131 = a9;
      v133 = v224;
    }
    else
    {
      v131 = a9;
      v133 = v224;
      do
      {
        v172 = *(_QWORD *)a7;
        v173 = *(unsigned int *)(a7 + 16);
        if ((_DWORD)v173)
        {
          v174 = *(_QWORD *)(v170 + 16);
          LODWORD(v175) = ((v174 >> 4) ^ (v174 >> 9)) & (v173 - 1);
          v176 = (uint64_t *)(v172 + 8 * v175);
          v177 = *v176;
          if (*v176 != v174)
          {
            v178 = 1;
            do
            {
              if (v177 == -4096)
                goto LABEL_220;
              v179 = v175 + v178++;
              v175 = v179 & (v173 - 1);
              v177 = *(_QWORD *)(v172 + 8 * v175);
            }
            while (v177 != v174);
            v176 = (uint64_t *)(v172 + 8 * v175);
          }
        }
        else
        {
LABEL_220:
          v176 = (uint64_t *)(v172 + 8 * v173);
        }
        v180 = (uint64_t *)(v172 + 8 * v173);
        v181 = v176 != v180;
        if (v176 != v180)
          break;
        mlir::ResultRange::UseIterator::operator++((uint64_t *)__p);
        v170 = v234;
      }
      while ((_QWORD)v234 != v171);
    }
    v129 = (uint64_t **)a1;
    if ((v227 | (!v160 && !v181)) == 1)
    {
      if ((*(_BYTE *)(v134 + 46) & 0x80) != 0)
      {
        v182 = *(unsigned int *)(v134 + 68);
        if ((_DWORD)v182)
        {
          v183 = 0;
          v184 = *(_QWORD *)(v134 + 72);
          do
          {
            v230[0] = *(llvm **)(v184 + 32 * v183 + 24);
            *(llvm **)&v240 = v230[0];
            v190 = mlir::Value::getDefiningOp((mlir::Value *)&v240);
            if (v190)
            {
              v191 = v190;
              v192 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v191 + 48) + 32))(*(_QWORD *)(v191 + 48), v192))
              {
                v193 = mlir::Value::getDefiningOp((mlir::Value *)v230);
                v194 = v193;
                v195 = *(unsigned int *)(v193 + 36);
                v196 = v193 - 16;
                if ((_DWORD)v195)
                  v197 = v193 - 16;
                else
                  v197 = 0;
                *(_QWORD *)&v245[0] = v197;
                *((_QWORD *)&v245[0] + 1) = v195;
                mlir::ResultRange::use_begin((uint64_t *)v245, (uint64_t *)__p);
                v198 = *(unsigned int *)(v194 + 36);
                if ((_DWORD)v198)
                  v199 = v196;
                else
                  v199 = 0;
                *(_QWORD *)&v245[0] = v199;
                *((_QWORD *)&v245[0] + 1) = v198;
                mlir::ResultRange::use_end((uint64_t *)v245, v243);
                v200 = v234;
                v242 = v234;
                v240 = *(_OWORD *)__p;
                v241 = v233;
                v201 = v244;
                while (v200 != v201)
                {
                  v203 = *(_QWORD *)(v200 + 16);
                  if (v134 != v203)
                  {
                    v204 = *(_QWORD *)a7;
                    v205 = *(unsigned int *)(a7 + 16);
                    if ((_DWORD)v205)
                    {
                      LODWORD(v206) = (v205 - 1) & ((v203 >> 4) ^ (v203 >> 9));
                      v202 = (uint64_t *)(v204 + 8 * v206);
                      v207 = *v202;
                      if (*v202 != v203)
                      {
                        v208 = 1;
                        do
                        {
                          if (v207 == -4096)
                            goto LABEL_243;
                          v209 = v206 + v208++;
                          v206 = v209 & (v205 - 1);
                          v207 = *(_QWORD *)(v204 + 8 * v206);
                        }
                        while (v207 != v203);
                        v202 = (uint64_t *)(v204 + 8 * v206);
                      }
                    }
                    else
                    {
LABEL_243:
                      v202 = (uint64_t *)(v204 + 8 * v205);
                    }
                    if (v202 != (uint64_t *)(v204 + 8 * v205))
                      goto LABEL_233;
                  }
                  mlir::ResultRange::UseIterator::operator++((uint64_t *)__p);
                  v200 = v234;
                }
                v210 = *(_DWORD *)(a7 + 16);
                if (v210)
                {
                  v211 = *(_QWORD *)a7;
                  v212 = v210 - 1;
                  LODWORD(v187) = (v210 - 1) & ((v194 >> 4) ^ (v194 >> 9));
                  v189 = (uint64_t *)(*(_QWORD *)a7 + 8 * v187);
                  v188 = *v189;
                  if (v194 != *v189)
                  {
                    v186 = 1;
                    do
                    {
                      if (v188 == -4096)
                        goto LABEL_233;
                      v185 = v187 + v186++;
                      v187 = v185 & v212;
                      v188 = *(_QWORD *)(v211 + 8 * v187);
                    }
                    while (v194 != v188);
                    v189 = (uint64_t *)(v211 + 8 * v187);
                  }
                  *v189 = -8192;
                  *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
                }
              }
            }
LABEL_233:
            ++v183;
          }
          while (v183 != v182);
        }
      }
      v213 = *(_DWORD *)(a7 + 16);
      if (v213)
      {
        v214 = *(_QWORD *)a7;
        v215 = v213 - 1;
        LODWORD(v216) = (v213 - 1) & ((v134 >> 4) ^ (v134 >> 9));
        v217 = (uint64_t *)(*(_QWORD *)a7 + 8 * v216);
        v218 = *v217;
        v129 = (uint64_t **)a1;
        v131 = a9;
        v133 = v224;
        if (v134 != *v217)
        {
          v219 = 1;
          do
          {
            if (v218 == -4096)
              goto LABEL_260;
            v220 = v216 + v219++;
            v216 = v220 & v215;
            v218 = *(_QWORD *)(v214 + 8 * v216);
          }
          while (v134 != v218);
          v217 = (uint64_t *)(v214 + 8 * v216);
        }
        *v217 = -8192;
        *(int32x2_t *)(a7 + 8) = vadd_s32(*(int32x2_t *)(a7 + 8), (int32x2_t)0x1FFFFFFFFLL);
LABEL_260:
        v223 = 1;
      }
      else
      {
        v223 = 1;
        v129 = (uint64_t **)a1;
        v131 = a9;
        v133 = v224;
      }
    }
LABEL_162:
    if (++v132 == (uint64_t *)v133)
    {
      if ((v223 & 1) != 0)
      {
        mlir::collect_regions::detail::buildLiveInsLiveOuts(a3, a4, a5, v129, (uint64_t *)a7, 0);
      }
LABEL_267:
      llvm::deallocate_buffer(v236[0], (void *)(8 * v237));
    }
  }
  v160 = 0;
LABEL_208:
  v166 = 0;
  v167 = 0;
  goto LABEL_209;
}

void sub_20746DDDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,llvm *a32,uint64_t a33,unsigned int a34)
{
  llvm::deallocate_buffer(a32, (void *)(8 * a34));
}

uint64_t sub_20746DDF0()
{
  char v0;

  return v0 & 1;
}

void mlir::OpBuilder::create<mlir::placement::ReplacedOps,std::string &,mlir::Operation *&,llvm::SmallVector<mlir::Operation *,6u> &,llvm::SmallVector<mlir::Value,6u> &,llvm::SmallVector<mlir::Value,6u> &>(uint64_t a1, uint64_t a2, _QWORD *a3, mlir::SymbolRefAttr **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  mlir::SymbolRefAttr *v20;
  mlir::Operation **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  unint64_t v29[2];
  unint64_t v30[2];
  _QWORD v31[39];

  v31[38] = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.replaced_ops", (const unsigned __int8 *)0x16, Context);
  if (v16)
  {
    mlir::OperationState::OperationState(v31, a2, v15);
    v17 = *((char *)a3 + 23);
    v18 = a3[1];
    if (v17 >= 0)
    {
      v19 = v17;
    }
    else
    {
      a3 = (_QWORD *)*a3;
      v19 = v18;
    }
    v20 = *a4;
    v21 = *(mlir::Operation ***)a5;
    v22 = *(unsigned int *)(a5 + 8);
    mlir::ValueRange::ValueRange(v30, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
    mlir::ValueRange::ValueRange(v29, *(_QWORD *)a7, *(unsigned int *)(a7 + 8));
    mlir::placement::ReplacedOps::build(a1, (mlir::Attribute *)v31, a3, v19, v20, v21, v22, v23, v30[0], v30[1], v29[0], v29[1]);
  }
  v28 = 1283;
  v27[2] = (uint64_t)"placement.replaced_ops";
  v27[3] = 22;
        "he dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-dialects-management";
  v26 = 259;
  llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v31);
  llvm::report_fatal_error((llvm::Twine *)v31, 1);
}

void mlir::`anonymous namespace'::BuildContext::updateCreatedOpsList(int32x2_t *this, mlir::Operation *a2, mlir::Operation *a3, const mlir::ConversionTarget *a4)
{
  mlir::Block *ParentOp;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  mlir::Operation *v12;
  uint64_t v13;
  llvm *v14;
  mlir::Operation *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  __int32 v31;
  __int32 v32;
  int32x2_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39[2];
  llvm *v40[2];
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v39[0] = (uint64_t)v40;
  ParentOp = (mlir::Block *)*((_QWORD *)a3 + 2);
  if (ParentOp)
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  v39[0] = (uint64_t)v40;
  v39[1] = (uint64_t)&v42;
  if (!this[3].i32[0])
    goto LABEL_41;
  v8 = this[4].u32[0];
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = (_QWORD *)this[2];
    while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_41;
    }
  }
  else
  {
    v10 = (_QWORD *)this[2];
  }
  v11 = *(_QWORD *)&this[2] + 8 * v8;
  if (v10 == (_QWORD *)v11)
    goto LABEL_41;
LABEL_11:
  v39[0] = 0;
  v12 = (mlir::Operation *)*v10;
  v39[0] = *v10;
  if (v41)
  {
    LODWORD(v13) = (v41 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    v14 = (llvm *)((char *)v40[0] + 8 * v13);
    v15 = *(mlir::Operation **)v14;
    if (*(mlir::Operation **)v14 != v12)
    {
      v16 = 1;
      do
      {
        if (v15 == (mlir::Operation *)-4096)
          goto LABEL_17;
        v17 = v13 + v16++;
        v13 = v17 & (v41 - 1);
        v15 = (mlir::Operation *)*((_QWORD *)v40[0] + v13);
      }
      while (v15 != v12);
      v14 = (llvm *)((char *)v40[0] + 8 * v13);
    }
  }
  else
  {
LABEL_17:
    v14 = (llvm *)((char *)v40[0] + 8 * v41);
  }
  if (v14 != (llvm *)((char *)v40[0] + 8 * v41))
  {
    if ((unsigned __int16)mlir::ConversionTarget::isLegal(a4, v12) > 0xFFu)
      goto LABEL_34;
    v18 = v39[0];
    v19 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v18 + 48) + 32))(*(_QWORD *)(v18 + 48), v19))
      goto LABEL_34;
  }
  if (v44)
  {
    v20 = ((LODWORD(v39[0]) >> 4) ^ (LODWORD(v39[0]) >> 9)) & (v44 - 1);
    v21 = &v42[v20];
    v22 = *v21;
    if (v39[0] == *v21)
      goto LABEL_34;
    v23 = 0;
    v24 = 1;
    while (v22 != -4096)
    {
      if (v23)
        v25 = 0;
      else
        v25 = v22 == -8192;
      if (v25)
        v23 = v21;
      v26 = v20 + v24++;
      v20 = v26 & (v44 - 1);
      v21 = &v42[v20];
      v22 = *v21;
      if (v39[0] == *v21)
      {
        do
        {
LABEL_34:
          if (++v10 == (_QWORD *)v11)
            goto LABEL_41;
        }
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000);
        if (v10 == (_QWORD *)v11)
        {
LABEL_41:
          if ((_DWORD)v43)
          {
            if (v44)
            {
              v28 = 8 * v44;
              v29 = v42;
              while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                ++v29;
                v28 -= 8;
                if (!v28)
                  goto LABEL_61;
              }
            }
            else
            {
              v29 = v42;
            }
            v30 = &v42[v44];
            if (v29 != v30)
            {
              v31 = this[4].i32[0];
              v32 = v31 - 1;
              do
              {
                if (!v31)
                  goto LABEL_53;
                v33 = this[2];
                LODWORD(v34) = ((*v29 >> 4) ^ (*v29 >> 9)) & v32;
                v35 = (uint64_t *)(*(_QWORD *)&v33 + 8 * v34);
                v36 = *v35;
                if (*v29 == *v35)
                  goto LABEL_52;
                v37 = 1;
                while (v36 != -4096)
                {
                  v38 = v34 + v37++;
                  v34 = v38 & v32;
                  v36 = *(_QWORD *)(*(_QWORD *)&v33 + 8 * v34);
                  if (*v29 == v36)
                  {
                    v35 = (uint64_t *)(*(_QWORD *)&v33 + 8 * v34);
LABEL_52:
                    *v35 = -8192;
                    this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
                    goto LABEL_53;
                  }
                }
                do
                {
LABEL_53:
                  if (++v29 == v30)
                    goto LABEL_61;
                }
                while ((*v29 | 0x1000) == 0xFFFFFFFFFFFFF000);
              }
              while (v29 != v30);
            }
          }
LABEL_61:
          llvm::deallocate_buffer(v40[0], (void *)(8 * v41));
        }
        goto LABEL_11;
      }
    }
    if (v23)
      v27 = v23;
    else
      v27 = v21;
  }
  else
  {
    v27 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)&v42, v27, v39);
  goto LABEL_34;
}

void sub_20746E2F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, llvm *a15, uint64_t a16, unsigned int a17)
{
  llvm::deallocate_buffer(a15, (void *)(8 * a17));
}

void mlir::`anonymous namespace'::BuildContext::rollbackCreatedOps(mlir::_anonymous_namespace_::BuildContext *this)
{
  int64x2_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  mlir::Operation *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD **NextResultAtOffset;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  int64x2_t *v23;
  unint64_t v24;
  int64x2_t *v25;
  unint64_t v26;
  int64x2_t *v27;
  int64x2_t v28;
  uint64_t v29;
  int64x2_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[7];

  v34[6] = *MEMORY[0x24BDAC8D0];
  v32 = v34;
  v33 = 0x600000000;
  v2 = (int64x2_t **)((char *)this + 16);
  if (*((_DWORD *)this + 6))
  {
    v3 = *((unsigned int *)this + 8);
    if ((_DWORD)v3)
    {
      v4 = 8 * v3;
      v5 = (uint64_t *)*((_QWORD *)this + 2);
      while ((*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v5;
        v4 -= 8;
        if (!v4)
          goto LABEL_32;
      }
    }
    else
    {
      v5 = (uint64_t *)*((_QWORD *)this + 2);
    }
    v6 = *((_QWORD *)this + 2) + 8 * v3;
    if (v5 != (uint64_t *)v6)
    {
LABEL_9:
      v7 = *v5;
      v8 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 48) + 32))(*(_QWORD *)(v7 + 48), v8))
      {
        v31 = v7;
        llvm::SmallVectorImpl<mlir::Operation *>::insert_one_impl<mlir::Operation *>((uint64_t)&v32, (uint64_t)v32, &v31);
      }
      else
      {
        v9 = v33;
        if (v33 >= (unint64_t)HIDWORD(v33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v33 + 1, 8);
          v9 = v33;
        }
        *((_QWORD *)v32 + v9) = v7;
        LODWORD(v33) = v33 + 1;
      }
      while (++v5 != (uint64_t *)v6)
      {
        if ((*v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v5 != (uint64_t *)v6)
            goto LABEL_9;
          break;
        }
      }
      if ((_DWORD)v33)
      {
        v10 = (char *)v32;
        v11 = (char *)v32 + 8 * v33;
        do
        {
          v13 = (unsigned int *)*((_QWORD *)v11 - 1);
          v11 -= 8;
          v12 = (mlir::Operation *)v13;
          v14 = v13[9];
          v15 = (uint64_t)(v13 - 4);
          if ((_DWORD)v14)
            v16 = v15;
          else
            v16 = 0;
          if ((_DWORD)v14)
          {
            for (i = 0; i != v14; ++i)
            {
              NextResultAtOffset = (_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v16, i);
              while (1)
              {
                v19 = *NextResultAtOffset;
                if (!*NextResultAtOffset)
                  break;
                v20 = (_QWORD *)v19[1];
                if (v20)
                {
                  *v20 = *v19;
                  if (*v19)
                    *(_QWORD *)(*v19 + 8) = v19[1];
                }
                *v19 = 0;
                v19[1] = 0;
                v19[3] = 0;
              }
            }
          }
          mlir::Operation::erase(v12);
        }
        while (v11 != v10);
      }
    }
  }
LABEL_32:
  v21 = *((_DWORD *)this + 6);
  if (v21 || *((_DWORD *)this + 7))
  {
    v22 = *((unsigned int *)this + 8);
    if (v22 <= 4 * v21 || v22 < 0x41)
    {
      if ((_DWORD)v22)
      {
        v23 = *v2;
        v24 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v25 = *v2;
        if (v24 < 3)
          goto LABEL_42;
        v26 = v24 + 1;
        v25 = (int64x2_t *)((char *)v23 + 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL));
        v27 = v23 + 1;
        v28 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27[-1] = v28;
          *v27 = v28;
          v27 += 2;
          v29 -= 4;
        }
        while (v29);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_42:
          v30 = (int64x2_t *)((char *)v23 + 8 * v22);
          do
          {
            v25->i64[0] = -4096;
            v25 = (int64x2_t *)((char *)v25 + 8);
          }
          while (v25 != v30);
        }
      }
      *((_QWORD *)this + 3) = 0;
    }
    else
    {
      llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear((uint64_t)v2);
    }
  }
  if (v32 != v34)
    free(v32);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::StartTimer,mlir::placement::TimerHandleType,mlir::FlatSymbolRefAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.start_timer", (const unsigned __int8 *)0x15, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"placement.start_timer";
    v17[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::placement::StartTimer::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::StartTimer,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::HostTypeCast,mlir::Type const&,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  ZinIrHalH13g *v11;
  ZinIrHalH13g *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.host_type_cast", (const unsigned __int8 *)0x18, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"placement.host_type_cast";
    v17[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::anec::Broadcast::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *llvm::SmallVector<mlir::Value,4u>::SmallVector<llvm::mapped_iterator<mlir::Value*,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_0,mlir::Value>,void>(_QWORD *a1, uint64_t a2, unint64_t **a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v5 = *(unint64_t **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *a3;
  v7 = (uint64_t)*a3 - *(_QWORD *)a2;
  if ((unint64_t)v7 < 0x21)
  {
    v8 = 0;
    if (v5 == v6)
      goto LABEL_11;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v7 >> 3, 8);
    v8 = *((_DWORD *)a1 + 2);
    if (v5 == v6)
      goto LABEL_11;
  }
  v9 = (unint64_t *)(*a1 + 8 * v8);
  do
  {
    v10 = *v5;
    v12 = *v5;
    v13 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v4, &v12, &v13)&& v13 != *(_QWORD *)v4 + 16 * *(unsigned int *)(v4 + 16))
    {
      v10 = *(_QWORD *)(v13 + 8);
    }
    *v9++ = v10;
    ++v5;
  }
  while (v5 != v6);
  v8 = *((_DWORD *)a1 + 2);
LABEL_11:
  *((_DWORD *)a1 + 2) = v8 + ((unint64_t)v7 >> 3);
  return a1;
}

uint64_t mlir::Operation::getAttr(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  char v7;

  if (!*(_BYTE *)(a1 + 47))
    return mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  result = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3);
  if (!v7)
    return mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  return result;
}

void mlir::Operation::setAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::StringAttr *Context;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  v9 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v10);
  mlir::Operation::setAttr(a1, v9, a4);
}

_QWORD *llvm::SmallVector<mlir::Value,4u>::SmallVector<llvm::mapped_iterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_1,mlir::Value>,void>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  uint64_t v17;
  uint64_t v18;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v8 = *a3;
  v7 = a3[1];
  v9 = v7 - v5;
  if ((unint64_t)(v7 - v5) < 5)
  {
    v10 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v7 - v5, 8);
    v10 = *((_DWORD *)a1 + 2);
  }
  if (v4 != v8 || v7 != v5)
  {
    v12 = (uint64_t *)(*a1 + 8 * v10);
    v13 = v7 - 1;
    do
    {
      v14 = v5;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v5);
      v17 = NextResultAtOffset;
      v18 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v6, (unint64_t *)&v17, &v18)&& v18 != *(_QWORD *)v6 + 16 * *(unsigned int *)(v6 + 16))
      {
        NextResultAtOffset = *(_QWORD *)(v18 + 8);
      }
      *v12++ = NextResultAtOffset;
      v5 = v14 + 1;
    }
    while (v4 != v8 || v13 != v14);
    v10 = *((_DWORD *)a1 + 2);
  }
  *((_DWORD *)a1 + 2) = v10 + v9;
  return a1;
}

uint64_t mlir::Operation::replaceAllUsesWith<llvm::SmallVector<mlir::Value,4u> &>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  v2 = *(unsigned int *)(result + 36);
  if ((_DWORD)v2)
    v3 = result - 16;
  else
    v3 = 0;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
    v5 = (_DWORD)v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = 0;
    v7 = *(uint64_t ***)a2;
    v8 = *(_QWORD *)a2 + 8 * v4;
    do
    {
      result = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v6);
      v9 = *(uint64_t **)result;
      if (*(_QWORD *)result)
      {
        v10 = *v7;
        do
        {
          v11 = (uint64_t *)v9[1];
          if (v11)
          {
            *v11 = *v9;
            if (*v9)
              *(_QWORD *)(*v9 + 8) = v9[1];
          }
          v9[3] = (uint64_t)v10;
          v12 = *v10;
          *v9 = *v10;
          v9[1] = (uint64_t)v10;
          if (v12)
            *(_QWORD *)(v12 + 8) = v9;
          *v10 = (uint64_t)v9;
          v9 = *(uint64_t **)result;
        }
        while (*(_QWORD *)result);
      }
      if (++v6 == v2)
        break;
      ++v7;
    }
    while (v7 != (uint64_t **)v8);
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::StopTimer,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.stop_timer", (const unsigned __int8 *)0x14, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"placement.stop_timer";
    v15[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::EraseOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::StopTimer,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::`anonymous namespace'::moveErasedOpsAfter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  mlir::Block **v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  mlir::Operation **v56;
  uint64_t v57;
  mlir::Operation *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t DefiningOp;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  int v81;
  BOOL v82;
  unsigned int v83;
  void **v84;
  void **v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94[4];
  uint64_t v95;
  void *__p[2];
  __int128 v97;
  unsigned __int128 v98;
  llvm *v99[2];
  unsigned int v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v101 = a1;
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(_QWORD *)a2 + 8 * v5;
  v7 = *(_QWORD **)a2;
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = 8 * v5;
    while (*(_QWORD *)(*(_QWORD *)(v4 + v8) + 16) == v9)
    {
      v8 += 8;
      if (v10 == v8)
      {
        v7 = (_QWORD *)v6;
        goto LABEL_17;
      }
    }
    v7 = (_QWORD *)(v4 + v8);
  }
  v11 = v7 + 1;
  if (v7 != (_QWORD *)v6 && v11 != (_QWORD *)v6)
  {
    do
    {
      if (*(_QWORD *)(*v11 + 16) == *(_QWORD *)(v101 + 16))
        *v7++ = *v11;
      ++v11;
    }
    while (v11 != (_QWORD *)v6);
    v4 = *(_QWORD *)a2;
  }
LABEL_17:
  v13 = ((unint64_t)v7 - v4) >> 3;
  v14 = 126 - 2 * __clz(v13);
  *(_DWORD *)(a2 + 8) = v13;
  if ((_DWORD)v13)
    v15 = v14;
  else
    v15 = 0;
  v16 = (mlir::Block **)v101;
  v99[0] = 0;
  v99[1] = 0;
  v100 = 0;
  v97 = 0u;
  v98 = 0u;
  *(_OWORD *)__p = 0u;
  std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
  v17 = v100;
  v18 = *((_QWORD *)&v98 + 1);
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + ((((_QWORD)v98 + *((_QWORD *)&v98 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((v98 + *((_QWORD *)&v98 + 1)) & 0x1FF)) = v101;
  v19 = v18 + 1;
  *((_QWORD *)&v98 + 1) = v19;
  if (v17)
  {
    v20 = v17 - 1;
    v21 = ((v101 >> 4) ^ (v101 >> 9)) & v20;
    v22 = (uint64_t *)((char *)v99[0] + 8 * v21);
    v23 = *v22;
    if (v101 == *v22)
      goto LABEL_33;
    v24 = 0;
    v25 = 1;
    while (v23 != -4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v23 == -8192;
      if (v26)
        v24 = v22;
      v27 = v21 + v25++;
      v21 = v27 & v20;
      v22 = (uint64_t *)((char *)v99[0] + 8 * v21);
      v23 = *v22;
      if (v101 == *v22)
        goto LABEL_33;
    }
    if (v24)
      v28 = v24;
    else
      v28 = v22;
  }
  else
  {
    v28 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v28, &v101);
  v19 = *((_QWORD *)&v98 + 1);
LABEL_33:
  if (v19)
  {
    v29 = (char *)__p[1];
    v30 = v98;
    do
    {
      v31 = *(_QWORD *)(*(_QWORD *)&v29[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF));
      v32 = *(unsigned int *)(v31 + 36);
      if ((_DWORD)v32)
        v33 = v31 - 16;
      else
        v33 = 0;
      v105 = v33;
      v106 = v32;
      mlir::ResultRange::use_begin(&v105, (uint64_t *)&v102);
      v34 = *(unsigned int *)(v31 + 36);
      if ((_DWORD)v34)
        v35 = v31 - 16;
      else
        v35 = 0;
      v105 = v35;
      v106 = v34;
      mlir::ResultRange::use_end(&v105, v94);
      v36 = v104;
      v93 = v104;
      v91 = v102;
      v92 = v103;
      v37 = v95;
      while (v36 != v37)
      {
        v42 = *(_QWORD *)(v36 + 16);
        v105 = v42;
        if (*(_UNKNOWN **)(*(_QWORD *)(v42 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
        {
          v44 = (char *)__p[1];
          if ((void *)v97 == __p[1])
            v45 = 0;
          else
            v45 = (((_QWORD)v97 - (unint64_t)__p[1]) << 6) - 1;
          v46 = *((_QWORD *)&v98 + 1);
          v47 = *((_QWORD *)&v98 + 1) + v98;
          if (v45 == *((_QWORD *)&v98 + 1) + (_QWORD)v98)
          {
            std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
            v46 = *((_QWORD *)&v98 + 1);
            v44 = (char *)__p[1];
            v47 = v98 + *((_QWORD *)&v98 + 1);
            v42 = v105;
          }
          *(_QWORD *)(*(_QWORD *)&v44[(v47 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v47 & 0x1FF)) = v42;
          *((_QWORD *)&v98 + 1) = v46 + 1;
          v43 = v100;
          if (!v100)
          {
LABEL_55:
            v48 = 0;
            goto LABEL_56;
          }
        }
        else
        {
          v43 = v100;
          if (!v100)
            goto LABEL_55;
        }
        v38 = v43 - 1;
        v39 = ((v105 >> 4) ^ (v105 >> 9)) & v38;
        v40 = (uint64_t *)((char *)v99[0] + 8 * v39);
        v41 = *v40;
        if (v105 == *v40)
          goto LABEL_44;
        v49 = 0;
        v50 = 1;
        while (v41 != -4096)
        {
          if (v49)
            v51 = 0;
          else
            v51 = v41 == -8192;
          if (v51)
            v49 = v40;
          v52 = v39 + v50++;
          v39 = v52 & v38;
          v40 = (uint64_t *)((char *)v99[0] + 8 * v39);
          v41 = *v40;
          if (v105 == *v40)
            goto LABEL_44;
        }
        if (v49)
          v48 = v49;
        else
          v48 = v40;
LABEL_56:
        llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v48, &v105);
LABEL_44:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v102);
        v36 = v104;
      }
      v53 = mlir::Operation::isBeforeInBlock(v16, *(mlir::Operation **)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v98 & 0x1FF)));
      v29 = (char *)__p[1];
      if (v53)
        v16 = *(mlir::Block ***)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v98 >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * (v98 & 0x1FF));
      v54 = *((_QWORD *)&v98 + 1) - 1;
      v30 = v98 + 1;
      v98 = __PAIR128__(*((unint64_t *)&v98 + 1), (uint64_t)v98 + 1) + __PAIR128__(-1, 0);
      if (v30 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v54 = *((_QWORD *)&v98 + 1);
        v29 = (char *)__p[1] + 8;
        v30 = v98 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v98 = v98 - 512;
      }
    }
    while (v54);
  }
  v55 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v55)
  {
    v56 = *(mlir::Operation ***)a2;
    v57 = *(_QWORD *)a2 + 8 * v55;
    do
    {
      v58 = *v56;
      if (mlir::Operation::isBeforeInBlock(v16, *v56))
        break;
      if ((*((_BYTE *)v58 + 46) & 0x80) == 0 || (v59 = *((unsigned int *)v58 + 17), !(_DWORD)v59))
      {
LABEL_75:
        v58 = (mlir::Operation *)v16;
        goto LABEL_76;
      }
      v60 = 0;
      v61 = *((_QWORD *)v58 + 9);
      while (1)
      {
        v90 = *(_QWORD *)(v61 + 32 * v60 + 24);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v90);
        v63 = DefiningOp;
        if (v100)
        {
          LODWORD(v64) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v100 - 1);
          v65 = (llvm *)((char *)v99[0] + 8 * v64);
          v66 = *(_QWORD *)v65;
          if (*(_QWORD *)v65 != DefiningOp)
          {
            v67 = 1;
            do
            {
              if (v66 == -4096)
                goto LABEL_87;
              v68 = v64 + v67++;
              v64 = v68 & (v100 - 1);
              v66 = *((_QWORD *)v99[0] + v64);
            }
            while (v66 != DefiningOp);
            v65 = (llvm *)((char *)v99[0] + 8 * v64);
          }
        }
        else
        {
LABEL_87:
          v65 = (llvm *)((char *)v99[0] + 8 * v100);
        }
        if (v65 != (llvm *)((char *)v99[0] + 8 * v100))
          break;
        if (++v60 == v59)
          goto LABEL_75;
      }
      v69 = *(unsigned int *)(DefiningOp + 36);
      if ((_DWORD)v69)
        v70 = DefiningOp - 16;
      else
        v70 = 0;
      v105 = v70;
      v106 = v69;
      mlir::ResultRange::use_begin(&v105, (uint64_t *)&v102);
      v71 = *(unsigned int *)(v63 + 36);
      if ((_DWORD)v71)
        v72 = v63 - 16;
      else
        v72 = 0;
      v105 = v72;
      v106 = v71;
      mlir::ResultRange::use_end(&v105, v94);
      v73 = v104;
      v93 = v104;
      v91 = v102;
      v92 = v103;
      v74 = v95;
      while (v73 != v74)
      {
        v78 = *(_QWORD *)(v73 + 16);
        v105 = v78;
        if (v100)
        {
          v75 = (v100 - 1) & ((v78 >> 4) ^ (v78 >> 9));
          v76 = (uint64_t *)((char *)v99[0] + 8 * v75);
          v77 = *v76;
          if (v78 == *v76)
            goto LABEL_99;
          v80 = 0;
          v81 = 1;
          while (v77 != -4096)
          {
            if (v80)
              v82 = 0;
            else
              v82 = v77 == -8192;
            if (v82)
              v80 = v76;
            v83 = v75 + v81++;
            v75 = v83 & (v100 - 1);
            v76 = (uint64_t *)((char *)v99[0] + 8 * v75);
            v77 = *v76;
            if (v78 == *v76)
              goto LABEL_99;
          }
          if (v80)
            v79 = v80;
          else
            v79 = v76;
        }
        else
        {
          v79 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v99, v79, &v105);
LABEL_99:
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v102);
        v73 = v104;
      }
      mlir::Operation::moveAfter((uint64_t *)v58, (mlir::Operation *)v16);
LABEL_76:
      ++v56;
      v16 = (mlir::Block **)v58;
    }
    while (v56 != (mlir::Operation **)v57);
  }
  v84 = (void **)__p[1];
  v85 = (void **)v97;
  *((_QWORD *)&v98 + 1) = 0;
  v86 = v97 - (unint64_t)__p[1];
  if ((unint64_t)v97 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v84);
      v85 = (void **)v97;
      v84 = (void **)((char *)__p[1] + 8);
      __p[1] = v84;
      v86 = v97 - (_QWORD)v84;
    }
    while ((_QWORD)v97 - (_QWORD)v84 > 0x10uLL);
  }
  v87 = v86 >> 3;
  if (v87 == 1)
  {
    v88 = 256;
  }
  else
  {
    if (v87 != 2)
    {
LABEL_124:
      if (v84 != v85)
      {
        do
        {
          v89 = *v84++;
          operator delete(v89);
        }
        while (v84 != v85);
        if ((void *)v97 != __p[1])
          *(_QWORD *)&v97 = v97 + (((unint64_t)__p[1] - v97 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      if (__p[0])
        operator delete(__p[0]);
      llvm::deallocate_buffer(v99[0], (void *)(8 * v100));
    }
    v88 = 512;
  }
  *(_QWORD *)&v98 = v88;
  goto LABEL_124;
}

uint64_t mlir::`anonymous namespace'::BuildContext::commitChanges(uint64_t this)
{
  int64x2_t **v1;
  uint64_t v2;
  int64x2_t *v3;
  unint64_t v4;
  int64x2_t *v5;
  unint64_t v6;
  int64x2_t *v7;
  int64x2_t v8;
  uint64_t v9;
  int64x2_t *v10;

  if (*(_QWORD *)(this + 24))
  {
    v1 = (int64x2_t **)(this + 16);
    v2 = *(unsigned int *)(this + 32);
    if (v2 <= 4 * *(_DWORD *)(this + 24) || v2 < 0x41)
    {
      if ((_DWORD)v2)
      {
        v3 = *v1;
        v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v5 = *v1;
        if (v4 < 3)
          goto LABEL_10;
        v6 = v4 + 1;
        v5 = (int64x2_t *)((char *)v3 + 8 * (v6 & 0x3FFFFFFFFFFFFFFCLL));
        v7 = v3 + 1;
        v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        v9 = v6 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v7[-1] = v8;
          *v7 = v8;
          v7 += 2;
          v9 -= 4;
        }
        while (v9);
        if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_10:
          v10 = (int64x2_t *)((char *)v3 + 8 * v2);
          do
          {
            v5->i64[0] = -4096;
            v5 = (int64x2_t *)((char *)v5 + 8);
          }
          while (v5 != v10);
        }
      }
      *(_QWORD *)(this + 24) = 0;
    }
    else
    {
      return llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear(this + 16);
    }
  }
  return this;
}

void mlir::IRMapping::~IRMapping(llvm **this)
{
  llvm::deallocate_buffer(this[6], (void *)(16 * *((unsigned int *)this + 16)));
}

void sub_20746F4C8()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 24), (void *)(16 * *(unsigned int *)(v0 + 40)));
}

void sub_20746F4DC()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)v0, (void *)(16 * *(unsigned int *)(v0 + 16)));
}

uint64_t sub_20746F4F0()
{
  uint64_t v0;

  return v0;
}

void mlir::`anonymous namespace'::BuildContext::~BuildContext(llvm **this)
{
  *this = (llvm *)off_24C02EF78;
  llvm::deallocate_buffer(this[2], (void *)(8 * *((unsigned int *)this + 8)));
}

{
  *this = (llvm *)off_24C02EF78;
  llvm::deallocate_buffer(this[2], (void *)(8 * *((unsigned int *)this + 8)));
}

uint64_t sub_20746F534()
{
  uint64_t v0;

  return v0;
}

void mlir::legalizeRegions(mlir::ForwardIterator *a1, uint64_t a2)
{
  mlir::ForwardIterator **v3;
  uint64_t v4;
  mlir::ForwardIterator *v5;
  mlir::ForwardIterator *v6;
  mlir::Operation **v7;
  uint64_t v8;
  mlir::Operation *v9;
  mlir::Operation **v10;
  uint64_t v11;
  mlir::Operation *v12;
  mlir::ForwardIterator **v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  mlir::ForwardIterator **v18;
  mlir::Operation ***v19;
  mlir::Operation ***v20;
  _QWORD v21[2];
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  llvm *v26;
  uint64_t v27;
  unsigned int v28;
  mlir::Operation **v29;
  uint64_t v30;
  mlir::Operation **v31;
  uint64_t v32;
  uint64_t v33;
  mlir::ForwardIterator *v34;
  mlir::ForwardIterator ***v35;
  _QWORD v36[2];
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[3];

  v39[1] = *MEMORY[0x24BDAC8D0];
  v34 = a1;
  v33 = a2;
  v3 = *(mlir::ForwardIterator ***)(a2 + 8);
  v38[0] = v39;
  v38[1] = 0x100000000;
  v31 = (mlir::Operation **)&v33;
  v32 = 0;
  v29 = (mlir::Operation **)&v31;
  v30 = 0;
  v36[0] = &v37;
  v36[1] = 0x500000000;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v13 = v3;
  v14 = &v33;
  v15 = v21;
  v35 = &v13;
  mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__0NS1_9placement12HostTypeCastEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v35, 1);
  v13 = &v34;
  v14 = v38;
  v15 = v21;
  v16 = &v33;
  v17 = v36;
  v18 = v3;
  v19 = &v31;
  v20 = &v29;
  v35 = &v13;
  if (mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__1NS1_24TargetLegalizerInterfaceES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESO_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v35, 1))
  {
    v4 = *(_QWORD *)((((unint64_t)v34
                     + 16 * (((unint64_t)*((unsigned int *)v34 + 11) >> 23) & 1)
                     + (((unint64_t)*((unsigned int *)v34 + 11) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v34 + 10)
                   + 8);
    if (v4)
      v5 = (mlir::ForwardIterator *)(v4 - 8);
    else
      v5 = 0;
    v6 = (mlir::ForwardIterator *)*((_QWORD *)v5 + 5);
    v3[2] = v5;
    v3[3] = v6;
    if ((_DWORD)v32)
    {
      v7 = v31;
      v8 = 8 * v32;
      do
      {
        v9 = *v7++;
        mlir::OpBuilder::insert((mlir::OpBuilder *)v3, v9);
        v8 -= 8;
      }
      while (v8);
    }
    if ((_DWORD)v30)
    {
      v10 = v29;
      v11 = 8 * v30;
      do
      {
        v12 = *v10++;
        mlir::Operation::erase(v12);
        v11 -= 8;
      }
      while (v11);
    }
  }
  llvm::deallocate_buffer(v26, (void *)(16 * v28));
}

void sub_20746F700(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm *a24,uint64_t a25,unsigned int a26)
{
  llvm::deallocate_buffer(a24, (void *)(16 * a26));
}

void sub_20746F714(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,llvm *a21,uint64_t a22,unsigned int a23)
{
  llvm::deallocate_buffer(a21, (void *)(16 * a23));
}

uint64_t mlir::collectRegions(mlir::ForwardIterator *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  llvm *v5;
  float v6;
  float v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  void *v10;
  std::string *p_p;
  std::string::size_type size;
  llvm::raw_ostream *v13;
  _DWORD *v14;
  std::string __p;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;

  v16 = a3;
  v17 = a2;
  if (a3 && *(_BYTE *)(a3 + 1))
  {
    if (*(_BYTE *)(a3 + 2))
    {
      v5 = (llvm *)(*(uint64_t (**)(uint64_t, mlir::ForwardIterator *))(*(_QWORD *)v17 + 120))(v17, a1);
      v7 = v6;
      v8 = (llvm::raw_ostream *)llvm::dbgs(v5);
      v9 = v8;
      v10 = (void *)*((_QWORD *)v8 + 4);
      if (*((_QWORD *)v8 + 3) - (_QWORD)v10 > 0xDuLL)
      {
        qmemcpy(v10, "Module Cost0: ", 14);
        *((_QWORD *)v8 + 4) += 14;
      }
      else
      {
        v9 = llvm::raw_ostream::write(v8, "Module Cost0: ", 0xEuLL);
      }
      std::to_string(&__p, v7 * 1000.0);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v13 = llvm::raw_ostream::write(v9, (const char *)p_p, size);
      v14 = (_DWORD *)*((_QWORD *)v13 + 4);
      if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 3uLL)
      {
        *v14 = 175336736;
        *((_QWORD *)v13 + 4) += 4;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_19:
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        llvm::raw_ostream::write(v13, " ms\n", 4uLL);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_19;
      }
    }
    return 1;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v16;
  v18 = &__p;
  result = mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)_ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_14collectRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEPKNS1_15CostModelParamsEE3__0NS1_4func6FuncOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESS_E4typeES4_OT1_EUlS4_E_EES2_lS4_, (uint64_t)&v18, 1);
  if ((_DWORD)result)
    mlir::legalizeRegions(a1, v17);
  return result;
}

void sub_20746F97C()
{
  JUMPOUT(0x20BD002F8);
}

uint64_t *mlir::`anonymous namespace'::BuildContext::notifyOperationInserted(mlir::_anonymous_namespace_::BuildContext *this, mlir::Operation *a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  mlir::Operation **v8;
  mlir::Operation *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t *v14;
  mlir::Operation *v15;

  v15 = a2;
  v4 = *((_QWORD *)this + 2);
  result = (uint64_t *)((char *)this + 16);
  v3 = v4;
  v5 = *((_DWORD *)result + 4);
  if (v5)
  {
    v6 = v5 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (mlir::Operation **)(v3 + 8 * v7);
    v9 = *v8;
    if (*v8 == a2)
      return result;
    v10 = 0;
    v11 = 1;
    while (v9 != (mlir::Operation *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (mlir::Operation *)-8192;
      if (v12)
        v10 = (uint64_t *)v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (mlir::Operation **)(v3 + 8 * v7);
      v9 = *v8;
      if (*v8 == a2)
        return result;
    }
    if (v10)
      v14 = v10;
    else
      v14 = (uint64_t *)v8;
  }
  else
  {
    v14 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)result, v14, (uint64_t *)&v15);
}

uint64_t llvm::detail::DenseSetImpl<mlir::Operation *,llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,llvm::DenseMapInfo<mlir::Operation *,void>>::DenseSetImpl<mlir::Operation **>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  unint64_t v24;
  unint64_t v25;
  int64x2_t *buffer;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  uint64_t v33;
  char *v34;

  if (*a3 == *a2
    || (v6 = (*a3 - *a2 - 1) | ((unint64_t)(*a3 - *a2 - 1) >> 1),
        v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4),
        v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16),
        LODWORD(v8) = HIDWORD(v8) | v8,
        v9 = __CFADD__((_DWORD)v8, 1),
        v10 = v8 + 1,
        v9))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    v24 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
    LODWORD(v25) = (((v25 | (v25 >> 8)) >> 16) | v25 | (v25 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v25;
    buffer = (int64x2_t *)llvm::allocate_buffer(8 * v25, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = buffer;
    *(_QWORD *)(a1 + 8) = 0;
    v27 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v27)
    {
      v28 = (v27 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v29 = (char *)buffer;
      if (v28 < 3)
        goto LABEL_30;
      v30 = v28 + 1;
      v29 = &buffer->i8[8 * (v30 & 0x3FFFFFFFFFFFFFFCLL)];
      v31 = buffer + 1;
      v32 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31[-1] = v32;
        *v31 = v32;
        v31 += 2;
        v33 -= 4;
      }
      while (v33);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        v34 = &buffer->i8[8 * v27];
        do
        {
          *(_QWORD *)v29 = -4096;
          v29 += 8;
        }
        while (v29 != v34);
      }
    }
  }
  v11 = *a2;
  v12 = *a3;
  if (v11 != v12)
  {
    while (1)
    {
      v17 = *(_DWORD *)(a1 + 16);
      if (!v17)
        break;
      v13 = v17 - 1;
      v14 = ((*v11 >> 4) ^ (*v11 >> 9)) & v13;
      v15 = (uint64_t *)(*(_QWORD *)a1 + 8 * v14);
      v16 = *v15;
      if (*v11 != *v15)
      {
        v19 = 0;
        v20 = 1;
        while (v16 != -4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v16 == -8192;
          if (v21)
            v19 = v15;
          v22 = v14 + v20++;
          v14 = v22 & v13;
          v15 = (uint64_t *)(*(_QWORD *)a1 + 8 * v14);
          v16 = *v15;
          if (*v11 == *v15)
            goto LABEL_8;
        }
        if (v19)
          v18 = v19;
        else
          v18 = v15;
        goto LABEL_11;
      }
LABEL_8:
      if (++v11 == v12)
        return a1;
    }
    v18 = 0;
LABEL_11:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(a1, v18, v11);
    goto LABEL_8;
  }
  return a1;
}

void mlir::`anonymous namespace'::eraseOpsFromRegion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;

  v6 = *(_QWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = *(_QWORD *)a1 + 8 * v7;
  v9 = (_QWORD *)v8;
  if ((_DWORD)v7)
  {
    v10 = *a2;
    v11 = *((unsigned int *)a2 + 4);
    v12 = v11 - 1;
    v13 = *a2 + 8 * v11;
    v14 = *(_QWORD **)a1;
    while (1)
    {
      v15 = *v14;
      if (!(_DWORD)v11)
        break;
      LODWORD(v16) = ((v15 >> 4) ^ (v15 >> 9)) & v12;
      v17 = (uint64_t *)(v10 + 8 * v16);
      v18 = *v17;
      if (*v17 == v15)
      {
        if (v17 == (uint64_t *)v13)
          goto LABEL_12;
      }
      else
      {
        v19 = 1;
        do
        {
          if (v18 == -4096)
            goto LABEL_12;
          v20 = v16 + v19++;
          v16 = v20 & v12;
          v18 = *(_QWORD *)(v10 + 8 * v16);
        }
        while (v18 != v15);
        if (v10 + 8 * v16 == v13)
        {
LABEL_12:
          v6 = v14;
          break;
        }
      }
      if (++v14 == (_QWORD *)v8)
        goto LABEL_33;
    }
    v21 = *(unsigned int *)(a3 + 8);
    if (v21 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = v15;
    ++*(_DWORD *)(a3 + 8);
  }
  if (v6 != (_QWORD *)v8)
  {
    v22 = v6 + 1;
    if (v6 + 1 != (_QWORD *)v8)
    {
      v9 = v6;
      while (1)
      {
        v23 = *v22;
        v24 = *a2;
        v25 = *((unsigned int *)a2 + 4);
        if (!(_DWORD)v25)
          goto LABEL_27;
        LODWORD(v26) = ((v23 >> 4) ^ (v23 >> 9)) & (v25 - 1);
        v27 = (uint64_t *)(v24 + 8 * v26);
        v28 = *v27;
        if (*v27 != v23)
          break;
LABEL_28:
        if (v27 == (uint64_t *)(v24 + 8 * v25))
        {
          v31 = *(unsigned int *)(a3 + 8);
          if (v31 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v31 + 1, 8);
            v31 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v31) = v23;
          ++*(_DWORD *)(a3 + 8);
        }
        else
        {
          *v9++ = v23;
        }
        if (++v22 == (uint64_t *)v8)
          goto LABEL_33;
      }
      v29 = 1;
      while (v28 != -4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v25 - 1);
        v28 = *(_QWORD *)(v24 + 8 * v26);
        if (v28 == v23)
        {
          v27 = (uint64_t *)(v24 + 8 * v26);
          goto LABEL_28;
        }
      }
LABEL_27:
      v27 = (uint64_t *)(v24 + 8 * v25);
      goto LABEL_28;
    }
    v9 = v6;
  }
LABEL_33:
  *(_DWORD *)(a1 + 8) = ((unint64_t)v9 - *(_QWORD *)a1) >> 3;
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::BuildContext::updateCreatedOpsList(mlir::Operation *,mlir::Operation *,mlir::ConversionTarget const&)::{lambda(mlir::Operation *)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t *result;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;

  v13 = a2;
  result = *a1;
  v3 = *((_DWORD *)result + 4);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(*result + 8 * v5);
    v7 = *v6;
    if (*v6 == a2)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (uint64_t *)(*result + 8 * v5);
      v7 = *v6;
      if (*v6 == a2)
        return result;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
  }
  else
  {
    v12 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)result, v12, &v13);
}

uint64_t *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::`anonymous namespace'::BuildContext::updateCreatedOpsList(mlir::Operation *,mlir::Operation *,mlir::ConversionTarget const&)::{lambda(mlir::Operation *)#2}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *result;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a2;
  v3 = *a1;
  v4 = *(_DWORD *)(v3 + 16);
  if (v4)
  {
    v5 = a2;
    v6 = v4 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (uint64_t *)(*(_QWORD *)v3 + 8 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_14;
    v10 = 0;
    v11 = 1;
    while (v9 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (uint64_t *)(*(_QWORD *)v3 + 8 * v7);
      v9 = *v8;
      if (*v8 == a2)
        goto LABEL_14;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v8;
  }
  else
  {
    v14 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(v3, v14, &v27);
  v5 = v27;
LABEL_14:
  v15 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48), v15);
  if (!(_DWORD)result)
    return result;
  result = (uint64_t *)a1[1];
  v17 = *((_DWORD *)result + 4);
  if (v17)
  {
    v18 = v17 - 1;
    v19 = ((v27 >> 4) ^ (v27 >> 9)) & v18;
    v20 = (uint64_t *)(*result + 8 * v19);
    v21 = *v20;
    if (v27 == *v20)
      return result;
    v22 = 0;
    v23 = 1;
    while (v21 != -4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v21 == -8192;
      if (v24)
        v22 = v20;
      v25 = v19 + v23++;
      v19 = v25 & v18;
      v20 = (uint64_t *)(*result + 8 * v19);
      v21 = *v20;
      if (v27 == *v20)
        return result;
    }
    if (v22)
      v26 = v22;
    else
      v26 = v20;
  }
  else
  {
    v26 = 0;
  }
  return llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)result, v26, &v27);
}

uint64_t llvm::SmallVectorImpl<mlir::Operation *>::insert_one_impl<mlir::Operation *>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v6 == a2)
  {
    v10 = *a3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      v6 = *(unsigned int *)(a1 + 8);
      v5 = *(_QWORD *)a1;
    }
    *(_QWORD *)(v5 + 8 * v6) = v10;
    v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    return *(_QWORD *)a1 + 8 * v11 - 8;
  }
  else
  {
    v7 = (a2 - v5) >> 3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      v5 = *(_QWORD *)a1;
      v6 = *(unsigned int *)(a1 + 8);
    }
    v8 = (uint64_t *)(v5 + 8 * v7);
    *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)(v5 + 8 * v6 - 8);
    v9 = *(_QWORD *)a1 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      memmove(v8 + 1, v8, v9 - (_QWORD)v8);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *v8 = *a3;
  }
  return (uint64_t)v8;
}

uint64_t llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  unint64_t v6;
  llvm *v7;
  unint64_t v8;
  int64x2_t *v9;
  int64x2_t v10;
  uint64_t v11;
  llvm *v12;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = (v1 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v7 = *(llvm **)result;
    if (v6 < 3)
      goto LABEL_12;
    v8 = v6 + 1;
    v7 = (llvm *)((char *)v5 + 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL));
    v9 = (int64x2_t *)((char *)v5 + 16);
    v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v9[-1] = v10;
      *v9 = v10;
      v9 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      v12 = (llvm *)((char *)v5 + 8 * v1);
      do
      {
        *(_QWORD *)v7 = -4096;
        v7 = (llvm *)((char *)v7 + 8);
      }
      while (v7 != v12);
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::`anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **,false>(uint64_t result, mlir::Block ***a2, uint64_t a3, char a4)
{
  uint64_t v7;
  mlir::Block ***v8;
  mlir::Block ***v9;
  mlir::Operation **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  mlir::Operation **v14;
  uint64_t v15;
  mlir::Operation *v16;
  uint64_t v17;
  mlir::Operation *v18;
  BOOL v19;
  unint64_t v20;
  mlir::Block **v21;
  mlir::Block **v22;
  mlir::Block ***v23;
  mlir::Block ***v24;
  mlir::Block **v25;
  mlir::Block **v26;
  mlir::Block **v27;
  mlir::Block ***v28;
  BOOL v29;
  BOOL v30;
  mlir::Operation *v31;
  mlir::Operation *v32;
  unint64_t v33;
  mlir::Operation **v34;
  mlir::Operation *v35;
  mlir::Operation *v36;
  mlir::Operation *v37;
  mlir::Operation *v38;
  mlir::Operation **v39;
  mlir::Operation *v40;
  mlir::Block ***v41;
  mlir::Block **v42;
  mlir::Block **v43;
  uint64_t v44;
  mlir::Operation *v45;
  uint64_t v46;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  mlir::Block **v52;
  mlir::Operation *v53;
  mlir::Block **v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  mlir::Operation **v60;
  mlir::Operation *v61;
  mlir::Operation **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  mlir::Block ***v66;
  BOOL v67;
  mlir::Block ***v68;
  uint64_t v69;
  mlir::Operation *v70;
  _QWORD *v71;
  mlir::Block ***v72;
  uint64_t v73;
  uint64_t v74;
  mlir::Block ***v75;
  uint64_t v76;
  unint64_t v77;
  mlir::Block ***v78;
  mlir::Block **v79;
  mlir::Block ***v80;
  mlir::Block **v81;
  mlir::Operation *v82;
  mlir::Operation *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  mlir::Block ***v87;
  mlir::Block ***v88;
  int64_t v89;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v87 = a2;
  v88 = a2 - 2;
  v9 = a2 - 3;
  v10 = (mlir::Operation **)v7;
  while (2)
  {
    v7 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)v7);
        if ((_DWORD)result)
        {
          v40 = *(mlir::Operation **)v7;
          *(_QWORD *)v7 = *(a2 - 1);
          *(a2 - 1) = (mlir::Block **)v40;
        }
        return result;
      case 3:
      case 4:
        v41 = (mlir::Block ***)(v7 + 16);
        result = mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)(v7 + 16));
        if ((_DWORD)result)
        {
          v42 = *v41;
          *v41 = *(a2 - 1);
          *(a2 - 1) = v42;
          result = mlir::Operation::isBeforeInBlock(*v41, *(mlir::Operation **)(v7 + 8));
          if ((_DWORD)result)
          {
            v44 = *(_QWORD *)(v7 + 8);
            v43 = *(mlir::Block ***)(v7 + 16);
            v45 = *(mlir::Operation **)v7;
            *(_QWORD *)(v7 + 8) = v43;
            *(_QWORD *)(v7 + 16) = v44;
            result = mlir::Operation::isBeforeInBlock(v43, v45);
            if ((_DWORD)result)
              *(int8x16_t *)v7 = vextq_s8(*(int8x16_t *)v7, *(int8x16_t *)v7, 8uLL);
          }
        }
        return result;
      case 5:
      default:
        if (v11 <= 191)
        {
          v46 = v7 + 8;
          v48 = (mlir::Block ***)v7 == a2 || v46 == (_QWORD)a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v7;
              do
              {
                v53 = *(mlir::Operation **)v50;
                v52 = *(mlir::Block ***)(v50 + 8);
                v50 = v46;
                result = mlir::Operation::isBeforeInBlock(v52, v53);
                if ((_DWORD)result)
                {
                  v54 = *(mlir::Block ***)v50;
                  v55 = v49;
                  do
                  {
                    *(_QWORD *)(v7 + v55 + 8) = *(_QWORD *)(v7 + v55);
                    if (!v55)
                    {
                      v51 = (_QWORD *)v7;
                      goto LABEL_73;
                    }
                    result = mlir::Operation::isBeforeInBlock(v54, *(mlir::Operation **)(v7 + v55 - 8));
                    v55 -= 8;
                  }
                  while ((result & 1) != 0);
                  v51 = (_QWORD *)(v7 + v55 + 8);
LABEL_73:
                  *v51 = v54;
                }
                v46 = v50 + 8;
                v49 += 8;
              }
              while ((mlir::Block ***)(v50 + 8) != a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v82 = *(mlir::Operation **)v7;
              v81 = *(mlir::Block ***)(v7 + 8);
              v7 = v46;
              result = mlir::Operation::isBeforeInBlock(v81, v82);
              if ((_DWORD)result)
              {
                v83 = *(mlir::Operation **)v7;
                v84 = (_QWORD *)v7;
                do
                {
                  v85 = v84;
                  v86 = *--v84;
                  *v85 = v86;
                  result = mlir::Operation::isBeforeInBlock((mlir::Block **)v83, (mlir::Operation *)*(v85 - 2));
                }
                while ((result & 1) != 0);
                *v84 = v83;
              }
              v46 = v7 + 8;
            }
            while ((mlir::Block ***)(v7 + 8) != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((mlir::Block ***)v7 != a2)
          {
            v56 = (unint64_t)(v12 - 2) >> 1;
            v89 = v56;
            do
            {
              v57 = v56;
              if (v89 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = v7 + 8 * v58;
                if (2 * v56 + 2 < v12
                  && mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v59, *(mlir::Operation **)(v59 + 8)))
                {
                  v59 += 8;
                  v58 = 2 * v57 + 2;
                }
                v60 = (mlir::Operation **)(v7 + 8 * v57);
                result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v59, *v60);
                if ((result & 1) == 0)
                {
                  v61 = *v60;
                  do
                  {
                    v62 = (mlir::Operation **)v59;
                    *v60 = *(mlir::Operation **)v59;
                    if (v89 < v58)
                      break;
                    v63 = (2 * v58) | 1;
                    v59 = v7 + 8 * v63;
                    v64 = 2 * v58 + 2;
                    if (v64 < v12
                      && mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v59, *(mlir::Operation **)(v59 + 8)))
                    {
                      v59 += 8;
                      v63 = v64;
                    }
                    result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v59, v61);
                    v60 = v62;
                    v58 = v63;
                  }
                  while (!(_DWORD)result);
                  *v62 = v61;
                  a2 = v87;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v65 = (unint64_t)v11 >> 3;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = *(mlir::Operation **)v7;
              v71 = (_QWORD *)v7;
              do
              {
                v72 = (mlir::Block ***)&v71[v69 + 1];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 < v65)
                {
                  result = mlir::Operation::isBeforeInBlock(*v72, (mlir::Operation *)v71[v69 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v72;
                    v73 = v74;
                  }
                }
                *v71 = *v72;
                v71 = v72;
                v69 = v73;
              }
              while (v73 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              v75 = v68 - 1;
              if (v72 == v75)
              {
                v66 = v75;
                *v72 = (mlir::Block **)v70;
              }
              else
              {
                *v72 = *v75;
                v66 = v75;
                *v75 = (mlir::Block **)v70;
                v76 = (uint64_t)v72 - v7 + 8;
                if (v76 >= 9)
                {
                  v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
                  v78 = (mlir::Block ***)(v7 + 8 * v77);
                  result = mlir::Operation::isBeforeInBlock(*v78, (mlir::Operation *)*v72);
                  if ((_DWORD)result)
                  {
                    v79 = *v72;
                    do
                    {
                      v80 = v78;
                      *v72 = *v78;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = (mlir::Block ***)(v7 + 8 * v77);
                      result = mlir::Operation::isBeforeInBlock(*v78, (mlir::Operation *)v79);
                      v72 = v80;
                    }
                    while ((result & 1) != 0);
                    *v80 = v79;
                  }
                }
              }
              v67 = v65-- <= 2;
              a2 = v66;
            }
            while (!v67);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (mlir::Operation **)(v7 + 8 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 < 0x401)
        {
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          v15 = 8 * v13;
          v16 = *(mlir::Operation **)v7;
          *(_QWORD *)v7 = *(_QWORD *)(v7 + v15);
          *(_QWORD *)(v7 + v15) = v16;
          a2 = v87;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        if (!mlir::Operation::isBeforeInBlock(*(mlir::Block ***)(v7 - 8), *(mlir::Operation **)v7))
        {
          v31 = *(mlir::Operation **)v7;
          result = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)v7, (mlir::Operation *)*v8);
          if ((result & 1) != 0)
          {
            v10 = (mlir::Operation **)v7;
            do
            {
              v32 = v10[1];
              ++v10;
              result = mlir::Operation::isBeforeInBlock((mlir::Block **)v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v7 + 8;
            do
            {
              v10 = (mlir::Operation **)v33;
              if (v33 >= (unint64_t)a2)
                break;
              v33 += 8;
              result = mlir::Operation::isBeforeInBlock((mlir::Block **)v31, *v10);
            }
            while (!(_DWORD)result);
          }
          v34 = (mlir::Operation **)a2;
          if (v10 < (mlir::Operation **)a2)
          {
            v34 = (mlir::Operation **)a2;
            do
            {
              v35 = *--v34;
              result = mlir::Operation::isBeforeInBlock((mlir::Block **)v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *v10;
            *v10 = *v34;
            *v34 = v36;
            do
            {
              v37 = v10[1];
              ++v10;
            }
            while (!mlir::Operation::isBeforeInBlock((mlir::Block **)v31, v37));
            do
            {
              v38 = *--v34;
              result = mlir::Operation::isBeforeInBlock((mlir::Block **)v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 1;
          if (v10 - 1 != (mlir::Operation **)v7)
            *(_QWORD *)v7 = *v39;
          a4 = 0;
          *v39 = v31;
          continue;
        }
LABEL_11:
        v17 = 0;
        v18 = *(mlir::Operation **)v7;
        do
        {
          v19 = mlir::Operation::isBeforeInBlock(*(mlir::Block ***)(v7 + v17 + 8), v18);
          v17 += 8;
        }
        while (v19);
        v20 = v7 + v17;
        if (v17 == 8)
        {
          a2 = v87;
          do
          {
            if (v20 >= (unint64_t)a2)
              break;
            v22 = *--a2;
          }
          while (!mlir::Operation::isBeforeInBlock(v22, v18));
        }
        else
        {
          do
            v21 = *--a2;
          while (!mlir::Operation::isBeforeInBlock(v21, v18));
        }
        if (v20 >= (unint64_t)a2)
        {
          v28 = (mlir::Block ***)(v20 - 8);
          if (v20 - 8 == v7)
            goto LABEL_29;
LABEL_28:
          *(_QWORD *)v7 = *v28;
          goto LABEL_29;
        }
        v23 = (mlir::Block ***)(v7 + v17);
        v24 = a2;
        do
        {
          v25 = *v23;
          *v23 = *v24;
          *v24 = v25;
          do
          {
            v26 = v23[1];
            ++v23;
          }
          while (mlir::Operation::isBeforeInBlock(v26, v18));
          do
            v27 = *--v24;
          while (!mlir::Operation::isBeforeInBlock(v27, v18));
        }
        while (v23 < v24);
        v28 = v23 - 1;
        if (v28 != (mlir::Block ***)v7)
          goto LABEL_28;
LABEL_29:
        *v28 = (mlir::Block **)v18;
        v29 = v20 >= (unint64_t)a2;
        a2 = v87;
        if (!v29)
        {
LABEL_33:
          a4 = 0;
          v10 = (mlir::Operation **)(v28 + 1);
          continue;
        }
        v10 = (mlir::Operation **)(v28 + 1);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v28;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::`anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **,0>(mlir::Operation **a1, mlir::Block ***a2, mlir::Block ***a3, mlir::Block ***a4, mlir::Block ***a5)
{
  mlir::Block **v10;
  mlir::Block **v11;
  mlir::Operation *v12;
  _BOOL8 result;
  mlir::Block **v14;
  mlir::Block **v15;
  mlir::Block **v16;
  mlir::Operation *v17;

  if (mlir::Operation::isBeforeInBlock(*a4, (mlir::Operation *)*a3))
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2))
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (mlir::Operation::isBeforeInBlock(*a2, *a1))
      {
        v12 = *a1;
        *a1 = (mlir::Operation *)*a2;
        *a2 = (mlir::Block **)v12;
      }
    }
  }
  result = mlir::Operation::isBeforeInBlock(*a5, (mlir::Operation *)*a4);
  if (result)
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    result = mlir::Operation::isBeforeInBlock(*a4, (mlir::Operation *)*a3);
    if (result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      result = mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2);
      if (result)
      {
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        result = mlir::Operation::isBeforeInBlock(*a2, *a1);
        if (result)
        {
          v17 = *a1;
          *a1 = (mlir::Operation *)*a2;
          *a2 = (mlir::Block **)v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::`anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **>(mlir::Operation **a1, mlir::Block ***a2, mlir::Block ***a3)
{
  BOOL v6;
  _BOOL8 result;
  mlir::Operation *v8;
  mlir::Block **v9;
  mlir::Operation *v10;
  mlir::Block **v11;

  v6 = mlir::Operation::isBeforeInBlock(*a2, *a1);
  result = mlir::Operation::isBeforeInBlock(*a3, (mlir::Operation *)*a2);
  if (v6)
  {
    v8 = *a1;
    if (result)
    {
      *a1 = (mlir::Operation *)*a3;
      *a3 = (mlir::Block **)v8;
    }
    else
    {
      *a1 = (mlir::Operation *)*a2;
      *a2 = (mlir::Block **)v8;
      result = mlir::Operation::isBeforeInBlock(*a3, v8);
      if (result)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    result = mlir::Operation::isBeforeInBlock(*a2, *a1);
    if (result)
    {
      v10 = *a1;
      *a1 = (mlir::Operation *)*a2;
      *a2 = (mlir::Block **)v10;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::`anonymous namespace'::moveErasedOpsAfter(mlir::Operation *,llvm::SmallVectorImpl<mlir::Operation *> &)::$_1 &,mlir::Operation **>(uint64_t a1, mlir::Block ***a2)
{
  uint64_t v4;
  _BOOL8 result;
  mlir::Operation *v6;
  mlir::Operation **v7;
  mlir::Block ***v8;
  uint64_t v9;
  int v10;
  mlir::Block ***v11;
  mlir::Block **v12;
  uint64_t v13;
  uint64_t v14;
  mlir::Block ***v15;
  mlir::Block **v16;
  mlir::Block **v17;
  uint64_t v18;
  mlir::Operation *v19;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)a1))
      {
        v6 = *(mlir::Operation **)a1;
        *(_QWORD *)a1 = *(a2 - 1);
        *(a2 - 1) = (mlir::Block **)v6;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      v15 = (mlir::Block ***)(a1 + 16);
      if (mlir::Operation::isBeforeInBlock(*(a2 - 1), *(mlir::Operation **)(a1 + 16)))
      {
        v16 = *v15;
        *v15 = *(a2 - 1);
        *(a2 - 1) = v16;
        if (mlir::Operation::isBeforeInBlock(*v15, *(mlir::Operation **)(a1 + 8)))
        {
          v18 = *(_QWORD *)(a1 + 8);
          v17 = *(mlir::Block ***)(a1 + 16);
          v19 = *(mlir::Operation **)a1;
          *(_QWORD *)(a1 + 8) = v17;
          *(_QWORD *)(a1 + 16) = v18;
          if (mlir::Operation::isBeforeInBlock(v17, v19))
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      return 1;
    default:
      v7 = (mlir::Operation **)(a1 + 16);
      v8 = (mlir::Block ***)(a1 + 24);
      if ((mlir::Block ***)(a1 + 24) == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (mlir::Operation::isBeforeInBlock(*v8, *v7))
    {
      v12 = *v8;
      v13 = v9;
      do
      {
        v14 = a1 + v13;
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
        {
          v11 = (mlir::Block ***)a1;
          goto LABEL_7;
        }
        v13 -= 8;
      }
      while (mlir::Operation::isBeforeInBlock(v12, *(mlir::Operation **)(v14 + 8)));
      v11 = (mlir::Block ***)(a1 + v13 + 24);
LABEL_7:
      *v11 = v12;
      if (++v10 == 8)
        return v8 + 1 == a2;
    }
    v7 = (mlir::Operation **)v8;
    v9 += 8;
    if (++v8 == a2)
      return 1;
  }
}

void mlir::ConversionTarget::~ConversionTarget(mlir::ConversionTarget *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm *v14;
  llvm *v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_24C034280;
  v2 = (char *)this + 120;
  v3 = (char *)*((_QWORD *)this + 18);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((_DWORD *)this + 27))
  {
    v5 = *((unsigned int *)this + 26);
    if ((_DWORD)v5)
    {
      v6 = 0;
      while (1)
      {
        v9 = *(_QWORD **)(*((_QWORD *)this + 12) + v6);
        if (v9 != (_QWORD *)-8 && v9 != 0)
          break;
        v6 += 8;
        if (8 * v5 == v6)
          goto LABEL_20;
      }
      v11 = *v9;
      v7 = (_QWORD *)v9[4];
      if (v7 == v9 + 1)
      {
        v7 = v9 + 1;
        v8 = 4;
      }
      else
      {
        if (!v7)
LABEL_11:
          llvm::deallocate_buffer((llvm *)v9, (void *)(v11 + 41));
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
      goto LABEL_11;
    }
  }
LABEL_20:
  free(*((void **)this + 12));
  if (*((_DWORD *)this + 21))
  {
    v12 = *((unsigned int *)this + 20);
    if ((_DWORD)v12)
    {
      v13 = 0;
      do
      {
        v14 = *(llvm **)(*((_QWORD *)this + 9) + v13);
        if (v14 != (llvm *)-8 && v14 != 0)
          llvm::deallocate_buffer(v14, (void *)(*(_QWORD *)v14 + 17));
        v13 += 8;
      }
      while (8 * v12 != v13);
    }
  }
  free(*((void **)this + 9));
  v16 = (llvm *)*((_QWORD *)this + 6);
  v17 = *((unsigned int *)this + 16);
  if (!(_DWORD)v17)
  {
    v22 = 0;
LABEL_40:
    llvm::deallocate_buffer(v16, (void *)v22);
  }
  v18 = (_QWORD **)((char *)v16 + 32);
  v19 = 40 * v17;
  while (1)
  {
    if (((unint64_t)*(v18 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v20 = *v18;
      if (v18 - 3 == *v18)
      {
        v20 = v18 - 3;
        v21 = 4;
      }
      else
      {
        if (!v20)
          goto LABEL_33;
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
    }
LABEL_33:
    v18 += 5;
    v19 -= 40;
    if (!v19)
    {
      v16 = (llvm *)*((_QWORD *)this + 6);
      v22 = 40 * *((unsigned int *)this + 16);
      goto LABEL_40;
    }
  }
}

{
  mlir::ConversionTarget::~ConversionTarget(this);
}

uint64_t sub_207470FDC()
{
  uint64_t v0;

  return v0;
}

void sub_207471000()
{
  JUMPOUT(0x20BD002F8);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::ModuleOp>(mlir::StringAttr **a1, uint64_t a2)
{
  uint64_t *Context;
  uint64_t v5;
  char v6;
  ZinIrHalH13g *v7;
  ZinIrHalH13g *v8;
  _BYTE v10[24];
  uint64_t v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  _QWORD v16[39];

  v16[38] = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"builtin.module", (const unsigned __int8 *)0xE, Context);
  if (!v6)
  {
    v15 = 1283;
    v14[2] = (uint64_t)"builtin.module";
    v14[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v13 = 259;
    llvm::operator+(v14, (uint64_t *)&v12, (uint64_t)v16);
    llvm::report_fatal_error((llvm::Twine *)v16, 1);
  }
  mlir::OperationState::OperationState(v16, a2, v5);
  v10[0] = 0;
  v10[16] = 0;
  mlir::ModuleOp::build(a1, (mlir::OperationState *)v16, (uint64_t)v10);
  v7 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v16);
  if (*(_UNKNOWN **)(*((_QWORD *)v7 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
    v8 = v7;
  else
    v8 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v16);
  return v8;
}

uint64_t mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock(mlir::func::FuncOp *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t Inputs;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  unint64_t v14;
  unint64_t v16[2];
  void *FunctionType;
  uint64_t v18;
  _QWORD v19[7];

  v19[6] = *MEMORY[0x24BDAC8D0];
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = v2 + 32;
  *(_QWORD *)(v2 + 40) = v2 + 32;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = *(unsigned int *)(*(_QWORD *)a1 + 44);
  if ((v3 & 0x7FFFFF) != 0)
    v4 = (uint64_t *)(((*(_QWORD *)a1 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *(unsigned int *)(*(_QWORD *)a1 + 40));
  else
    v4 = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v4, v2);
  v5 = *v4;
  *(_QWORD *)(v2 + 8) = *v4;
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)(v5 + 8) = v2 + 8;
  *v4 = v2 + 8;
  FunctionType = (void *)mlir::func::FuncOp::getFunctionType(a1);
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionType);
  v8 = v6;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  FunctionType = v19;
  v18 = 0x600000000;
  if (v6 < 7)
  {
    if (v6)
    {
      v19[0] = v9;
      if (v6 != 1)
      {
        v19[1] = v9;
        if (v6 != 2)
        {
          v19[2] = v9;
          if (v6 != 3)
          {
            v19[3] = v9;
            if (v6 != 4)
            {
              v19[4] = v9;
              if (v6 != 5)
                v19[5] = v9;
            }
          }
        }
      }
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&FunctionType, v19, v6, 8);
    v10 = (unint64_t *)((char *)FunctionType + 8 * (v8 & 0xFFFFFFFFFFFFFFFCLL));
    v11 = v8 & 3;
    v12 = vdupq_n_s64(v9);
    v13 = (int64x2_t *)((char *)FunctionType + 16);
    v14 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v13[-1] = v12;
      *v13 = v12;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        *v10++ = v9;
        --v11;
      }
      while (v11);
    }
  }
  LODWORD(v18) = v8;
  mlir::ValueRange::ValueRange(v16, Inputs, v8);
  mlir::Block::addArguments((_QWORD *)v2, v16[0], v16[1], (uint64_t)FunctionType, v18);
  if (FunctionType != v19)
    free(FunctionType);
  return v2;
}

uint64_t mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(_QWORD **)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = &v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

BOOL llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_2>(uint64_t a1, uint64_t a2)
{
  llvm *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  llvm *v19;
  uint64_t *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t DefiningOp;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  llvm *v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  uint64_t *v96;
  int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  BOOL v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v126;
  uint64_t v127;
  uint64_t I32IntegerAttr;
  int v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  mlir::Operation *v135;
  uint64_t v136;
  _OWORD *v137;
  __int128 v138;
  _QWORD *v139;
  uint64_t v140;
  llvm *v141[2];
  unsigned int v142;
  void *__p[2];
  __int128 v144;
  unsigned __int128 v145;
  _DWORD *v146;
  uint64_t v147;

  v2 = (llvm *)a2;
  if (!mlir::collect_regions::detail::verifyShouldAddToQueue(*(mlir::Block ***)a1, **(_QWORD **)(a1 + 8), a2, *(_QWORD *)(a1 + 16) + 48))goto LABEL_141;
  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 120) + 16))(*(_QWORD *)(v4 + 120));
  if ((*((_BYTE *)v2 + 46) & 0x80) == 0 || (v5 = *((unsigned int *)v2 + 17), !(_DWORD)v5))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v141[0] = v2;
LABEL_6:
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 8);
    if (v9 == v10)
      v11 = 0;
    else
      v11 = ((v9 - v10) << 6) - 1;
    v12 = *(_QWORD *)(v8 + 40);
    v13 = v12 + *(_QWORD *)(v8 + 32);
    if (v11 == v13)
    {
      std::deque<mlir::Operation *>::__add_back_capacity(v8);
      v12 = *(_QWORD *)(v8 + 40);
      v10 = *(_QWORD *)(v8 + 8);
      v13 = *(_QWORD *)(v8 + 32) + v12;
    }
    *(_QWORD *)(*(_QWORD *)(v10 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v2;
    *(_QWORD *)(v8 + 40) = v12 + 1;
    v14 = *(_QWORD *)(v8 + 48);
    v15 = *(_DWORD *)(v8 + 64);
    if (v15)
    {
      v16 = v15 - 1;
      v17 = v16 & ((v2 >> 4) ^ (v2 >> 9));
      v18 = (uint64_t *)(v14 + 8 * v17);
      v19 = (llvm *)*v18;
      if ((llvm *)*v18 == v2)
      {
LABEL_146:
        v127 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 120) + 16))(*(_QWORD *)(v8 + 120));
        I32IntegerAttr = mlir::Builder::getI32IntegerAttr(*(mlir::Builder **)(*(_QWORD *)(v8 + 120) + 8), *(_DWORD *)(v8 + 128));
        mlir::Operation::setAttr((uint64_t)v2, v127, I32IntegerAttr);
        return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40) < *(_QWORD *)(**(_QWORD **)(a1 + 8) + 16);
      }
      v20 = 0;
      v21 = 1;
      while (v19 != (llvm *)-4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v19 == (llvm *)-8192;
        if (v22)
          v20 = v18;
        v23 = v17 + v21++;
        v17 = v23 & v16;
        v18 = (uint64_t *)(v14 + 8 * v17);
        v19 = (llvm *)*v18;
        if ((llvm *)*v18 == v2)
          goto LABEL_146;
      }
      if (v20)
        v126 = v20;
      else
        v126 = v18;
    }
    else
    {
      v126 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(v8 + 48, v126, (uint64_t *)v141);
    v2 = v141[0];
    goto LABEL_146;
  }
  v6 = 0;
  v7 = *((_QWORD *)v2 + 9);
  while (1)
  {
    v24 = *(_DWORD **)(v7 + 32 * v6 + 24);
    v146 = v24;
    if ((~v24[2] & 7) == 0)
      goto LABEL_22;
    __p[0] = v24;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)__p);
    if (DefiningOp)
    {
      v26 = DefiningOp;
      v27 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v26 + 48) + 32))(*(_QWORD *)(v26 + 48), v27) & 1) != 0)
        goto LABEL_22;
    }
    v28 = mlir::Value::getDefiningOp((mlir::Value *)&v146);
    v29 = v28;
    v30 = *(_QWORD *)(v4 + 48);
    v31 = *(unsigned int *)(v4 + 64);
    if ((_DWORD)v31)
    {
      LODWORD(v32) = ((v28 >> 4) ^ (v28 >> 9)) & (v31 - 1);
      v33 = (uint64_t *)(v30 + 8 * v32);
      v34 = *v33;
      if (*v33 == v28)
        goto LABEL_33;
      v35 = 1;
      while (v34 != -4096)
      {
        v36 = v32 + v35++;
        v32 = v36 & (v31 - 1);
        v34 = *(_QWORD *)(v30 + 8 * v32);
        if (v34 == v28)
        {
          v33 = (uint64_t *)(v30 + 8 * v32);
          goto LABEL_33;
        }
      }
    }
    v33 = (uint64_t *)(v30 + 8 * v31);
LABEL_33:
    if (v33 == (uint64_t *)(v30 + 8 * v31))
      break;
LABEL_22:
    if (++v6 == v5)
    {
      v129 = *((_DWORD *)v2 + 11);
      v8 = *(_QWORD *)(a1 + 16);
      v141[0] = v2;
      if ((v129 & 0x800000) != 0)
      {
        v130 = *((unsigned int *)v2 + 17);
        if ((_DWORD)v130)
        {
          v131 = (uint64_t *)(*((_QWORD *)v2 + 9) + 24);
          do
          {
            v147 = *v131;
            v134 = mlir::Value::getDefiningOp((mlir::Value *)&v147);
            if (v134)
            {
              v135 = (mlir::Operation *)v134;
              v136 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
              if ((*(unsigned int (**)(_QWORD *, uint64_t))(**((_QWORD **)v135 + 6) + 32))(*((_QWORD **)v135 + 6), v136))
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 120) + 16))(*(_QWORD *)(v8 + 120));
                v137 = *(_OWORD **)(*(_QWORD *)(v8 + 120) + 8);
                v138 = v137[1];
                *(_OWORD *)__p = *v137;
                v144 = v138;
                v139 = (_QWORD *)*((_QWORD *)v135 - 2);
                if (!v139 || *v139)
                {
                  v132 = *((_QWORD *)v2 + 2);
                  ZinIrHalH13g::~ZinIrHalH13g(v2);
                  *(_QWORD *)&v144 = v132;
                  *((_QWORD *)&v144 + 1) = v133;
                  mlir::OpBuilder::clone((uint64_t **)__p, v135);
                }
              }
            }
            v131 += 4;
            --v130;
          }
          while (v130);
        }
      }
      goto LABEL_6;
    }
  }
  v37 = *(_DWORD *)(v4 + 112);
  if (!v37)
    goto LABEL_40;
  v38 = *(_QWORD *)(v4 + 96);
  v39 = v37 - 1;
  v40 = v39 & ((v28 >> 4) ^ (v28 >> 9));
  v41 = *(_QWORD *)(v38 + 8 * v40);
  if (v41 != v28)
  {
    v42 = 1;
    while (v41 != -4096)
    {
      v43 = v40 + v42++;
      v40 = v43 & v39;
      v41 = *(_QWORD *)(v38 + 8 * v40);
      if (v41 == v28)
        goto LABEL_141;
    }
LABEL_40:
    v144 = 0u;
    v145 = 0u;
    *(_OWORD *)__p = 0u;
    v141[0] = 0;
    v141[1] = 0;
    v142 = 0;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    v45 = *((_QWORD *)&v145 + 1);
    v44 = v145;
    *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v145 + 1) + (_QWORD)v145) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((*((_QWORD *)&v145 + 1) + v145) & 0x1FF)) = v29;
    *((_QWORD *)&v145 + 1) = v45 + 1;
    if (v45 == -1)
      goto LABEL_118;
    v46 = (char *)__p[1];
    while (2)
    {
      v47 = *(_QWORD *)(*(_QWORD *)&v46[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF));
      v48 = *(_DWORD *)(v47 + 44);
      if ((v48 & 0x7FFFFF) != 0)
      {
        v49 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v47 + 48) + 32))(*(_QWORD *)(v47 + 48), v49))
        {
          v48 = *(_DWORD *)(v47 + 44);
          goto LABEL_46;
        }
LABEL_102:
        v99 = 1;
      }
      else
      {
LABEL_46:
        if ((v48 & 0x800000) != 0)
        {
          v50 = *(unsigned int *)(v47 + 68);
          if ((_DWORD)v50)
          {
            v51 = 0;
            v52 = *(_QWORD *)(v47 + 72);
            while (2)
            {
              v147 = *(_QWORD *)(v52 + 32 * v51 + 24);
              v140 = 0;
              v58 = mlir::Value::getDefiningOp((mlir::Value *)&v147);
              v140 = v58;
              if (v58)
              {
                v59 = v58;
                v60 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
                if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v59 + 48) + 32))(*(_QWORD *)(v59 + 48), v60) & 1) == 0)
                {
                  v61 = v140;
                  if (*(_UNKNOWN **)(*(_QWORD *)(v140 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
                  {
                    v62 = *(_QWORD *)(v4 + 48);
                    v63 = *(unsigned int *)(v4 + 64);
                    v64 = v140 >> 4;
                    if ((_DWORD)v63)
                    {
                      LODWORD(v65) = (v63 - 1) & (v64 ^ (v140 >> 9));
                      v66 = (uint64_t *)(v62 + 8 * v65);
                      v67 = *v66;
                      if (*v66 != v140)
                      {
                        v68 = 1;
                        do
                        {
                          if (v67 == -4096)
                            goto LABEL_60;
                          v69 = v65 + v68++;
                          v65 = v69 & (v63 - 1);
                          v67 = *(_QWORD *)(v62 + 8 * v65);
                        }
                        while (v67 != v140);
                        v66 = (uint64_t *)(v62 + 8 * v65);
                      }
                    }
                    else
                    {
LABEL_60:
                      v66 = (uint64_t *)(v62 + 8 * v63);
                    }
                    if (v66 != (uint64_t *)(v62 + 8 * v63))
                      goto LABEL_102;
                    v70 = *(_DWORD *)(v4 + 112);
                    if (v70)
                    {
                      v71 = *(_QWORD *)(v4 + 96);
                      v72 = v70 - 1;
                      v73 = v72 & (v64 ^ (v140 >> 9));
                      v74 = *(_QWORD *)(v71 + 8 * v73);
                      if (v74 == v140)
                        goto LABEL_102;
                      v75 = 1;
                      while (v74 != -4096)
                      {
                        v76 = v73 + v75++;
                        v73 = v76 & v72;
                        v74 = *(_QWORD *)(v71 + 8 * v73);
                        if (v74 == v140)
                          goto LABEL_102;
                      }
                    }
                    v77 = v142;
                    if (v142)
                    {
                      LODWORD(v78) = (v142 - 1) & (v64 ^ (v140 >> 9));
                      v79 = (llvm *)((char *)v141[0] + 8 * v78);
                      v80 = *(_QWORD *)v79;
                      if (*(_QWORD *)v79 != v140)
                      {
                        v81 = 1;
                        do
                        {
                          if (v80 == -4096)
                            goto LABEL_74;
                          v82 = v78 + v81++;
                          v78 = v82 & (v142 - 1);
                          v80 = *((_QWORD *)v141[0] + v78);
                        }
                        while (v80 != v140);
                        v79 = (llvm *)((char *)v141[0] + 8 * v78);
                      }
                    }
                    else
                    {
LABEL_74:
                      v79 = (llvm *)((char *)v141[0] + 8 * v142);
                    }
                    if (v79 == (llvm *)((char *)v141[0] + 8 * v142))
                    {
                      v83 = *(_DWORD *)(v4 + 88);
                      if (!v83)
                        goto LABEL_77;
                      v53 = *(_QWORD *)(v4 + 72);
                      v54 = v64 ^ (v140 >> 9);
                      v55 = v83 - 1;
                      v56 = (v83 - 1) & v54;
                      v57 = *(_QWORD *)(v53 + 8 * v56);
                      if (v57 != v140)
                      {
                        v97 = 1;
                        while (v57 != -4096)
                        {
                          v98 = v56 + v97++;
                          v56 = v98 & v55;
                          v57 = *(_QWORD *)(v53 + 8 * v56);
                          if (v57 == v140)
                            goto LABEL_50;
                        }
LABEL_77:
                        v84 = (char *)__p[1];
                        if ((void *)v144 == __p[1])
                          v85 = 0;
                        else
                          v85 = (((_QWORD)v144 - (unint64_t)__p[1]) << 6) - 1;
                        v86 = *((_QWORD *)&v145 + 1);
                        v87 = *((_QWORD *)&v145 + 1) + v145;
                        if (v85 == *((_QWORD *)&v145 + 1) + (_QWORD)v145)
                        {
                          std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
                          v86 = *((_QWORD *)&v145 + 1);
                          v84 = (char *)__p[1];
                          v87 = v145 + *((_QWORD *)&v145 + 1);
                          v61 = v140;
                          v77 = v142;
                        }
                        *(_QWORD *)(*(_QWORD *)&v84[(v87 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v87 & 0x1FF)) = v61;
                        *((_QWORD *)&v145 + 1) = v86 + 1;
                        if (v77)
                        {
                          v88 = v77 - 1;
                          v89 = ((v140 >> 4) ^ (v140 >> 9)) & v88;
                          v90 = (uint64_t *)((char *)v141[0] + 8 * v89);
                          v91 = *v90;
                          if (v140 == *v90)
                            goto LABEL_50;
                          v92 = 0;
                          v93 = 1;
                          while (v91 != -4096)
                          {
                            if (v92)
                              v94 = 0;
                            else
                              v94 = v91 == -8192;
                            if (v94)
                              v92 = v90;
                            v95 = v89 + v93++;
                            v89 = v95 & v88;
                            v90 = (uint64_t *)((char *)v141[0] + 8 * v89);
                            v91 = *v90;
                            if (v140 == *v90)
                              goto LABEL_50;
                          }
                          if (v92)
                            v96 = v92;
                          else
                            v96 = v90;
                        }
                        else
                        {
                          v96 = 0;
                        }
                        llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)v141, v96, &v140);
                      }
                    }
                  }
                }
              }
LABEL_50:
              if (++v51 == v50)
                break;
              continue;
            }
          }
        }
        v99 = 0;
      }
      v46 = (char *)__p[1];
      v100 = *((_QWORD *)&v145 + 1) - 1;
      v44 = v145 + 1;
      v145 = __PAIR128__(*((unint64_t *)&v145 + 1), (uint64_t)v145 + 1) + __PAIR128__(-1, 0);
      if (v44 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        v46 = (char *)__p[1] + 8;
        v44 = v145 - 512;
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v145 = v145 - 512;
        v100 = *((_QWORD *)&v145 + 1);
      }
      if (((v100 != 0) & ~v99) == 0)
      {
        if ((v99 & 1) != 0)
        {
          v147 = v29;
          v101 = *(_DWORD *)(v4 + 112);
          if (!v101)
          {
            v122 = 0;
            goto LABEL_133;
          }
          v102 = *(_QWORD *)(v4 + 96);
          v103 = v101 - 1;
          v104 = v103 & ((v29 >> 4) ^ (v29 >> 9));
          v105 = (uint64_t *)(v102 + 8 * v104);
          v106 = *v105;
          if (*v105 != v29)
          {
            v107 = 0;
            v108 = 1;
            while (v106 != -4096)
            {
              if (v107)
                v109 = 0;
              else
                v109 = v106 == -8192;
              if (v109)
                v107 = v105;
              v110 = v104 + v108++;
              v104 = v110 & v103;
              v105 = (uint64_t *)(v102 + 8 * v104);
              v106 = *v105;
              if (*v105 == v29)
                goto LABEL_134;
            }
            if (v107)
              v122 = v107;
            else
              v122 = v105;
LABEL_133:
            llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(v4 + 96, v122, &v147);
          }
          goto LABEL_134;
        }
LABEL_118:
        v147 = v29;
        v111 = *(_DWORD *)(v4 + 88);
        if (v111)
        {
          v112 = *(_QWORD *)(v4 + 72);
          v113 = v111 - 1;
          v114 = v113 & ((v29 >> 4) ^ (v29 >> 9));
          v115 = (uint64_t *)(v112 + 8 * v114);
          v116 = *v115;
          if (*v115 == v29)
            goto LABEL_134;
          v117 = 0;
          v118 = 1;
          while (v116 != -4096)
          {
            if (v117)
              v119 = 0;
            else
              v119 = v116 == -8192;
            if (v119)
              v117 = v115;
            v120 = v114 + v118++;
            v114 = v120 & v113;
            v115 = (uint64_t *)(v112 + 8 * v114);
            v116 = *v115;
            if (*v115 == v29)
              goto LABEL_134;
          }
          if (v117)
            v121 = v117;
          else
            v121 = v115;
        }
        else
        {
          v121 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(v4 + 72, v121, &v147);
LABEL_134:
        llvm::deallocate_buffer(v141[0], (void *)(8 * v142));
      }
      continue;
    }
  }
LABEL_141:
  v123 = *(_QWORD *)(a1 + 24);
  v124 = *(unsigned int *)(v123 + 8);
  if (v124 >= *(_DWORD *)(v123 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v123, (void *)(v123 + 16), v124 + 1, 8);
    LODWORD(v124) = *(_DWORD *)(v123 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v123 + 8 * v124) = v2;
  ++*(_DWORD *)(v123 + 8);
  return 1;
}

void mlir::`anonymous namespace'::RegionQueue::pushFront(mlir::_anonymous_namespace_::RegionQueue *this, mlir::Operation *a2)
{
  mlir::Operation *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  mlir::Operation *v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t I32IntegerAttr;
  mlir::Operation *v22;

  v2 = a2;
  v22 = a2;
  v4 = *((_QWORD *)this + 4);
  if (!v4)
  {
    std::deque<mlir::Operation *>::__add_front_capacity((uint64_t)this);
    v4 = *((_QWORD *)this + 4);
  }
  v5 = *((_QWORD *)this + 1);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (*((_QWORD *)this + 2) == v5)
    v7 = 0;
  else
    v7 = *v6 + 8 * (v4 & 0x1FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_QWORD *)(v7 - 8) = v2;
  v8 = *((_QWORD *)this + 5) + 1;
  *((_QWORD *)this + 4) = v4 - 1;
  *((_QWORD *)this + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  v10 = *((_DWORD *)this + 16);
  if (!v10)
  {
    v19 = 0;
LABEL_20:
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)this + 48, v19, (uint64_t *)&v22);
    v2 = v22;
    goto LABEL_21;
  }
  v11 = v10 - 1;
  v12 = ((v2 >> 4) ^ (v2 >> 9)) & v11;
  v13 = (uint64_t *)(v9 + 8 * v12);
  v14 = (mlir::Operation *)*v13;
  if ((mlir::Operation *)*v13 != v2)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != (mlir::Operation *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == (mlir::Operation *)-8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (uint64_t *)(v9 + 8 * v12);
      v14 = (mlir::Operation *)*v13;
      if ((mlir::Operation *)*v13 == v2)
        goto LABEL_21;
    }
    if (v15)
      v19 = v15;
    else
      v19 = v13;
    goto LABEL_20;
  }
LABEL_21:
  v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 16))(*((_QWORD *)this + 15));
  I32IntegerAttr = mlir::Builder::getI32IntegerAttr(*(mlir::Builder **)(*((_QWORD *)this + 15) + 8), *((_DWORD *)this + 32));
  mlir::Operation::setAttr((uint64_t)v2, v20, I32IntegerAttr);
}

void std::deque<mlir::Operation *>::__add_front_capacity(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  void *v43;

  v2 = *(char **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  if (v3 == v2)
    v4 = 0;
  else
    v4 = ((v3 - v2) << 6) - 1;
  v5 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v4 - (*(_QWORD *)(a1 + 40) + v5)) >= 0x200)
  {
    *(_QWORD *)(a1 + 32) = v5 + 512;
    v43 = (void *)*((_QWORD *)v3 - 1);
    *(_QWORD *)(a1 + 16) = v3 - 8;
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v43);
    return;
  }
  v6 = *(char **)(a1 + 24);
  v7 = *(char **)a1;
  v8 = (uint64_t)&v6[-*(_QWORD *)a1];
  if (v3 - v2 >= (unint64_t)v8)
  {
    if (v6 == v7)
      v9 = 1;
    else
      v9 = v8 >> 2;
    if (v9 >> 61)
LABEL_52:
      std::__throw_bad_array_new_length[abi:nn180100]();
    v10 = (char *)operator new(8 * v9);
    v11 = operator new(0x1000uLL);
    if (v9)
    {
      v12 = &v10[8 * v9];
    }
    else
    {
      v14 = (char *)operator new(8uLL);
      v12 = v14 + 8;
      operator delete(v10);
      v2 = *(char **)(a1 + 8);
      v3 = *(char **)(a1 + 16);
      v10 = v14;
    }
    *(_QWORD *)v10 = v11;
    v15 = v10 + 8;
    v16 = v10;
    if (v2 == v3)
    {
      v17 = v10;
      v18 = v10 + 8;
LABEL_22:
      v19 = *(void **)a1;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = v18;
      *(_QWORD *)(a1 + 24) = v12;
      if (v18 - v17 == 8)
      {
        *(_QWORD *)(a1 + 32) = 256;
        if (!v19)
          return;
      }
      else
      {
        *(_QWORD *)(a1 + 32) += 512;
        if (!v19)
          return;
      }
      operator delete(v19);
      return;
    }
    while (1)
    {
      if (v15 == v12)
      {
        if (v10 <= v16)
        {
          v27 = (v15 - v16) >> 2;
          if (v15 == v16)
            v27 = 1;
          if (v27 >> 61)
            goto LABEL_52;
          v28 = v27 >> 2;
          v29 = 8 * v27;
          v30 = (char *)operator new(8 * v27);
          v31 = v30;
          v17 = &v30[8 * v28];
          v20 = v17;
          v32 = v15 - v10;
          if (v15 != v10)
          {
            v20 = &v17[v32 & 0xFFFFFFFFFFFFFFF8];
            v33 = v32 - 8;
            if (v33 < 0x38 || (unint64_t)(&v30[8 * v28] - v10) < 0x20)
            {
              v34 = &v30[8 * v28];
              v35 = v10;
              goto LABEL_42;
            }
            v37 = (v33 >> 3) + 1;
            v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
            v34 = &v17[v38];
            v35 = &v10[v38];
            v39 = (__int128 *)(v10 + 16);
            v40 = &v30[8 * v28 + 16];
            v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v42 = *v39;
              *((_OWORD *)v40 - 1) = *(v39 - 1);
              *(_OWORD *)v40 = v42;
              v39 += 2;
              v40 += 32;
              v41 -= 4;
            }
            while (v41);
            if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_42:
                v36 = *(_QWORD *)v35;
                v35 += 8;
                *(_QWORD *)v34 = v36;
                v34 += 8;
              }
              while (v34 != v20);
            }
          }
          v15 = &v30[v29];
          if (v16)
            operator delete(v16);
          v16 = v31;
          goto LABEL_26;
        }
        v22 = (v10 - v16) >> 3;
        if (v22 >= -1)
          v23 = v22 + 1;
        else
          v23 = v22 + 2;
        v24 = v23 >> 1;
        v25 = &v10[-8 * (v23 >> 1)];
        v26 = v15;
        if (v15 != v10)
        {
          memmove(v25, v10, v15 - v10);
          v26 = v10;
        }
        v20 = &v25[v15 - v10];
        v17 = &v26[-8 * v24];
      }
      else
      {
        v17 = v10;
        v20 = v15;
        v15 = v12;
      }
LABEL_26:
      v12 = v15;
      v21 = *(_QWORD *)v2;
      v2 += 8;
      *(_QWORD *)v20 = v21;
      v18 = v20 + 8;
      v15 = v18;
      v10 = v17;
      if (v2 == *(char **)(a1 + 16))
        goto LABEL_22;
    }
  }
  if (v2 == v7)
  {
    v43 = operator new(0x1000uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v43);
    v13 = *(_QWORD *)(a1 + 16);
    v43 = *(void **)(v13 - 8);
    *(_QWORD *)(a1 + 16) = v13 - 8;
  }
  else
  {
    v43 = operator new(0x1000uLL);
  }
  std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v43);
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
    *(_QWORD *)(a1 + 32) = 256;
  else
    *(_QWORD *)(a1 + 32) += 512;
}

void std::__for_each_segment[abi:nn180100]<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<mlir::Operation *,mlir::Operation **,mlir::Operation *&,mlir::Operation ***,long,512l>,std::back_insert_iterator<llvm::SmallVector<mlir::Operation *,6u>>>>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v7 = a2;
  v8 = *a5;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      v22 = *(_DWORD *)(v8 + 8);
      do
      {
        v23 = *v7;
        if (v22 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v22 + 1, 8);
          v22 = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v22) = v23;
        v22 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v22;
        ++v7;
      }
      while (v7 != a4);
    }
  }
  else
  {
    v11 = (uint64_t)(*a1 + 512);
    if ((uint64_t *)v11 != a2)
    {
      v12 = *(_DWORD *)(v8 + 8);
      do
      {
        v13 = *v7;
        if (v12 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v12 + 1, 8);
          v12 = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v12) = v13;
        v12 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v12;
        ++v7;
      }
      while (v7 != (uint64_t *)v11);
    }
    *a5 = v8;
    for (i = (uint64_t *)(a1 + 1); i != (uint64_t *)a3; ++i)
    {
      v15 = 0;
      v16 = *i;
      v17 = *(_DWORD *)(v8 + 8);
      do
      {
        v18 = *(_QWORD *)(v16 + v15);
        if (v17 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v17 + 1, 8);
          v17 = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v17) = v18;
        v17 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v17;
        v15 += 8;
      }
      while (v15 != 4096);
      *a5 = v8;
    }
    v19 = *a3;
    if (*a3 != a4)
    {
      v20 = *(_DWORD *)(v8 + 8);
      do
      {
        v21 = *v19;
        if (v20 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(v8 + 16), v20 + 1, 8);
          v20 = *(_DWORD *)(v8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v20) = v21;
        v20 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v20;
        ++v19;
      }
      while (v19 != a4);
    }
  }
  *a5 = v8;
}

uint64_t mlir::emitOptionalWarning<char const(&)[37],llvm::StringRef &>(uint64_t a1, char a2, char *a3, const void ***a4)
{
  const void **v6;
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t v11;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  mlir::emitWarning(a1, (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, a3);
    v10 = 261;
    v6 = a4[1];
    v9[0] = *a4;
    v9[1] = v6;
    mlir::Diagnostic::operator<<((uint64_t)v12, v9);
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mlir::Block **v17;
  mlir::Operation *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mlir::Block **v22;
  mlir::Operation *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  mlir::Block **v27;
  mlir::Operation *v28;
  uint64_t v29;
  mlir::Block **v30;
  mlir::Operation *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  mlir::Block **v36;
  mlir::Operation *v37;
  uint64_t v38;
  mlir::Block **v39;
  mlir::Operation *v40;
  uint64_t *v41;
  BOOL v42;
  uint64_t v43;
  mlir::Block **v44;
  mlir::Operation *v45;
  uint64_t v46;
  mlir::Block **v47;
  mlir::Operation *v48;
  uint64_t *v49;
  mlir::Block **v50;
  mlir::Operation *v51;
  uint64_t *v52;
  uint64_t v53;
  mlir::Block **v54;
  mlir::Operation *v55;
  uint64_t v56;
  uint64_t v57;
  mlir::Block **v58;
  mlir::Operation *v59;
  uint64_t v60;
  mlir::Block **v61;
  mlir::Operation *v62;
  uint64_t *v63;
  uint64_t v64;
  mlir::Block **DefiningOp;
  mlir::Operation *v66;
  uint64_t v67;
  uint64_t *v68;
  BOOL v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  mlir::Block **v76;
  mlir::Operation *v77;
  uint64_t v78;
  uint64_t v79;
  mlir::Block **v80;
  mlir::Operation *v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  mlir::Block **v87;
  mlir::Operation *v88;
  _BOOL4 v89;
  uint64_t *v90;
  uint64_t v91;
  mlir::Block **v92;
  mlir::Operation *v93;
  uint64_t v94;
  uint64_t v95;
  mlir::Block **v96;
  mlir::Operation *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  mlir::Block **v101;
  mlir::Operation *v102;
  uint64_t v103;
  uint64_t *v104;
  BOOL v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  mlir::Block **v112;
  mlir::Operation *v113;
  uint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  mlir::Block **v119;
  mlir::Operation *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  mlir::Block **v124;
  mlir::Operation *v125;
  uint64_t v126;
  uint64_t v127;
  mlir::Block **v128;
  mlir::Operation *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  mlir::Block **v134;
  mlir::Operation *v135;
  uint64_t *v136;
  int64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v138 = a2;
  v139 = a2 - 2;
  v136 = a2 - 3;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v64 = *(a2 - 1);
        v142 = *v7;
        v143 = v64;
        DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
        v66 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
        result = mlir::Operation::isBeforeInBlock(DefiningOp, v66);
        if ((_DWORD)result)
        {
          v67 = *v7;
          *v7 = *(a2 - 1);
          *(a2 - 1) = v67;
        }
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(v7, v7 + 1, v8);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(v7, v7 + 1, v7 + 2, v8);
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *,0>(v7, v7 + 1, v7 + 2, v7 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v68 = v7 + 1;
          v69 = v7 == a2 || v68 == a2;
          v70 = v69;
          if ((a4 & 1) != 0)
          {
            if ((v70 & 1) == 0)
            {
              v71 = 0;
              v72 = v7;
              do
              {
                v75 = *v72;
                v74 = v72[1];
                v72 = v68;
                v142 = v75;
                v143 = v74;
                v76 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                v77 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                result = mlir::Operation::isBeforeInBlock(v76, v77);
                if ((_DWORD)result)
                {
                  v78 = *v72;
                  v79 = v71;
                  do
                  {
                    *(uint64_t *)((char *)v7 + v79 + 8) = *(uint64_t *)((char *)v7 + v79);
                    if (!v79)
                    {
                      v73 = v7;
                      goto LABEL_69;
                    }
                    v142 = *(uint64_t *)((char *)v7 + v79 - 8);
                    v143 = v78;
                    v80 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                    v81 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                    result = mlir::Operation::isBeforeInBlock(v80, v81);
                    v79 -= 8;
                  }
                  while ((result & 1) != 0);
                  v73 = (uint64_t *)((char *)v7 + v79 + 8);
LABEL_69:
                  *v73 = v78;
                  a2 = v138;
                }
                v68 = v72 + 1;
                v71 += 8;
              }
              while (v72 + 1 != a2);
            }
          }
          else if ((v70 & 1) == 0)
          {
            do
            {
              v127 = *v7;
              v126 = v7[1];
              v7 = v68;
              v142 = v127;
              v143 = v126;
              v128 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v129 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v128, v129);
              if ((_DWORD)result)
              {
                v130 = *v7;
                v131 = v7;
                do
                {
                  v132 = v131;
                  v133 = *--v131;
                  *v132 = v133;
                  v142 = *(v132 - 2);
                  v143 = v130;
                  v134 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                  v135 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                  result = mlir::Operation::isBeforeInBlock(v134, v135);
                }
                while ((result & 1) != 0);
                *v131 = v130;
              }
              v68 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v82 = (unint64_t)(v11 - 2) >> 1;
            v140 = v82;
            do
            {
              v83 = v82;
              if (v140 >= v82)
              {
                v84 = (2 * v82) | 1;
                v85 = &v7[v84];
                if (2 * v82 + 2 < v11)
                {
                  v86 = *v85;
                  v142 = v85[1];
                  v143 = v86;
                  v87 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                  v88 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                  v89 = mlir::Operation::isBeforeInBlock(v87, v88);
                  if (v89)
                    ++v85;
                  a2 = v138;
                  if (v89)
                    v84 = 2 * v83 + 2;
                }
                v90 = &v7[v83];
                v91 = *v85;
                v142 = *v90;
                v143 = v91;
                v92 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                v93 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                result = mlir::Operation::isBeforeInBlock(v92, v93);
                if ((result & 1) == 0)
                {
                  v137 = v83;
                  v94 = *v90;
                  do
                  {
                    v98 = v85;
                    *v90 = *v85;
                    if (v140 < v84)
                      break;
                    v99 = (2 * v84) | 1;
                    v85 = &v7[v99];
                    if (2 * v84 + 2 < v11)
                    {
                      v100 = *v85;
                      v142 = v85[1];
                      v143 = v100;
                      v101 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                      v102 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                      if (mlir::Operation::isBeforeInBlock(v101, v102))
                      {
                        ++v85;
                        v99 = 2 * v84 + 2;
                      }
                    }
                    v95 = *v85;
                    v142 = v94;
                    v143 = v95;
                    v96 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                    v97 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                    result = mlir::Operation::isBeforeInBlock(v96, v97);
                    v90 = v98;
                    v84 = v99;
                  }
                  while (!(_DWORD)result);
                  *v98 = v94;
                  v83 = v137;
                  a2 = v138;
                }
              }
              v82 = v83 - 1;
            }
            while (v83);
            v103 = (unint64_t)v10 >> 3;
            do
            {
              v106 = 0;
              v141 = *v7;
              v107 = v7;
              do
              {
                v108 = &v107[v106 + 1];
                v109 = (2 * v106) | 1;
                v110 = 2 * v106 + 2;
                if (v110 < v103)
                {
                  v111 = *v108;
                  v142 = v108[1];
                  v143 = v111;
                  v112 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                  v113 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                  result = mlir::Operation::isBeforeInBlock(v112, v113);
                  if ((_DWORD)result)
                  {
                    ++v108;
                    v109 = v110;
                  }
                }
                *v107 = *v108;
                v107 = v108;
                v106 = v109;
              }
              while (v109 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
              v114 = a2 - 1;
              if (v108 == a2 - 1)
              {
                v104 = a2 - 1;
                *v108 = v141;
              }
              else
              {
                *v108 = *v114;
                v104 = a2 - 1;
                *v114 = v141;
                v115 = (char *)v108 - (char *)v7 + 8;
                if (v115 >= 9)
                {
                  v116 = (((unint64_t)v115 >> 3) - 2) >> 1;
                  v117 = &v7[v116];
                  v118 = *v117;
                  v142 = *v108;
                  v143 = v118;
                  v119 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                  v120 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                  result = mlir::Operation::isBeforeInBlock(v119, v120);
                  if ((_DWORD)result)
                  {
                    v121 = *v108;
                    do
                    {
                      v122 = v117;
                      *v108 = *v117;
                      if (!v116)
                        break;
                      v116 = (v116 - 1) >> 1;
                      v117 = &v7[v116];
                      v123 = *v117;
                      v142 = v121;
                      v143 = v123;
                      v124 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
                      v125 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
                      result = mlir::Operation::isBeforeInBlock(v124, v125);
                      v108 = v122;
                    }
                    while ((result & 1) != 0);
                    *v122 = v121;
                  }
                }
              }
              v105 = v103-- <= 2;
              a2 = v104;
            }
            while (!v105);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v7[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(v13, v7, v8);
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(v7, v13, v8);
          v14 = v12;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(v7 + 1, &v7[v14 - 1], v139);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(v7 + 2, &v7[v14 + 1], v136);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(&v7[v14 - 1], v13, &v7[v14 + 1]);
          v15 = *v7;
          *v7 = v7[v14];
          v7[v14] = v15;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_11;
        }
        v16 = *(v7 - 1);
        v142 = *v7;
        v143 = v16;
        v17 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
        v18 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
        if (!mlir::Operation::isBeforeInBlock(v17, v18))
        {
          v43 = *v7;
          v142 = *v8;
          v143 = v43;
          v44 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
          v45 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          result = mlir::Operation::isBeforeInBlock(v44, v45);
          if ((result & 1) != 0)
          {
            v9 = v7;
            do
            {
              v46 = v9[1];
              ++v9;
              v142 = v46;
              v143 = v43;
              v47 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v48 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v47, v48);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v49 = v7 + 1;
            do
            {
              v9 = v49;
              if (v49 >= a2)
                break;
              ++v49;
              v142 = *v9;
              v143 = v43;
              v50 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v51 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v50, v51);
            }
            while (!(_DWORD)result);
          }
          v52 = a2;
          if (v9 < a2)
          {
            v52 = a2;
            do
            {
              v53 = *--v52;
              v142 = v53;
              v143 = v43;
              v54 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v55 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v54, v55);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v52)
          {
            v56 = *v9;
            *v9 = *v52;
            *v52 = v56;
            do
            {
              v57 = v9[1];
              ++v9;
              v142 = v57;
              v143 = v43;
              v58 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v59 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
            }
            while (!mlir::Operation::isBeforeInBlock(v58, v59));
            do
            {
              v60 = *--v52;
              v142 = v60;
              v143 = v43;
              v61 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
              v62 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
              result = mlir::Operation::isBeforeInBlock(v61, v62);
            }
            while ((result & 1) != 0);
          }
          v63 = v9 - 1;
          if (v9 - 1 != v7)
            *v7 = *v63;
          a4 = 0;
          *v63 = v43;
          continue;
        }
LABEL_11:
        v19 = 0;
        v20 = *v7;
        do
        {
          v21 = v7[v19 + 1];
          v142 = v20;
          v143 = v21;
          v22 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
          v23 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          ++v19;
        }
        while (mlir::Operation::isBeforeInBlock(v22, v23));
        v24 = &v7[v19];
        v25 = v138;
        v69 = v19 == 1;
        a2 = v138;
        if (v69)
        {
          v25 = v138;
          do
          {
            if (v24 >= v25)
              break;
            v29 = *--v25;
            v142 = v20;
            v143 = v29;
            v30 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
            v31 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          }
          while (!mlir::Operation::isBeforeInBlock(v30, v31));
        }
        else
        {
          do
          {
            v26 = *--v25;
            v142 = v20;
            v143 = v26;
            v27 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
            v28 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          }
          while (!mlir::Operation::isBeforeInBlock(v27, v28));
        }
        if (v24 >= v25)
        {
          v41 = v24 - 1;
          if (v24 - 1 == v7)
            goto LABEL_29;
LABEL_28:
          *v7 = *v41;
          goto LABEL_29;
        }
        v32 = v24;
        v33 = v25;
        do
        {
          v34 = *v32;
          *v32 = *v33;
          *v33 = v34;
          do
          {
            v35 = v32[1];
            ++v32;
            v142 = v20;
            v143 = v35;
            v36 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
            v37 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          }
          while (mlir::Operation::isBeforeInBlock(v36, v37));
          do
          {
            v38 = *--v33;
            v142 = v20;
            v143 = v38;
            v39 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v143);
            v40 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v142);
          }
          while (!mlir::Operation::isBeforeInBlock(v39, v40));
        }
        while (v32 < v33);
        v41 = v32 - 1;
        a2 = v138;
        if (v41 != v7)
          goto LABEL_28;
LABEL_29:
        *v41 = v20;
        if (v24 < v25)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *,false>(v7, v41, a3, a4 & 1);
          a4 = 0;
          v9 = v41 + 1;
          continue;
        }
        v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(v7, v41);
        v9 = v41 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(v41 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v42)
            continue;
          goto LABEL_32;
        }
        a2 = v41;
        if (!v42)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  mlir::Block **DefiningOp;
  mlir::Operation *v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  mlir::Block **v16;
  mlir::Operation *v17;
  uint64_t v18;
  uint64_t v19;
  mlir::Block **v20;
  mlir::Operation *v21;
  uint64_t v22;
  uint64_t v23;
  mlir::Block **v24;
  mlir::Operation *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(a1, a2, a3, a4);
  v10 = *a5;
  v27 = *a4;
  v28 = v10;
  DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
  v12 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
  result = mlir::Operation::isBeforeInBlock(DefiningOp, v12);
  if (result)
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    v15 = *a4;
    v27 = *a3;
    v28 = v15;
    v16 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
    v17 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
    result = mlir::Operation::isBeforeInBlock(v16, v17);
    if (result)
    {
      v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      v19 = *a3;
      v27 = *a2;
      v28 = v19;
      v20 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
      v21 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
      result = mlir::Operation::isBeforeInBlock(v20, v21);
      if (result)
      {
        v22 = *a2;
        *a2 = *a3;
        *a3 = v22;
        v23 = *a2;
        v27 = *a1;
        v28 = v23;
        v24 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v28);
        v25 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v27);
        result = mlir::Operation::isBeforeInBlock(v24, v25);
        if (result)
        {
          v26 = *a1;
          *a1 = *a2;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  mlir::Block **DefiningOp;
  mlir::Operation *v8;
  BOOL v9;
  uint64_t v10;
  mlir::Block **v11;
  mlir::Operation *v12;
  _BOOL8 result;
  uint64_t v14;
  mlir::Block **v15;
  mlir::Operation *v16;
  uint64_t v17;
  uint64_t v18;
  mlir::Block **v19;
  mlir::Operation *v20;
  uint64_t v21;
  uint64_t v22;
  mlir::Block **v23;
  mlir::Operation *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a2;
  v25 = *a1;
  v26 = v6;
  DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
  v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
  v9 = mlir::Operation::isBeforeInBlock(DefiningOp, v8);
  v10 = *a3;
  if (v9)
  {
    v25 = *a2;
    v26 = v10;
    v11 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
    v12 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
    result = mlir::Operation::isBeforeInBlock(v11, v12);
    v14 = *a1;
    if (result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v14;
      v22 = *a3;
      v25 = v14;
      v26 = v22;
      v23 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
      v24 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
      result = mlir::Operation::isBeforeInBlock(v23, v24);
      if (!result)
        return result;
      v14 = *a2;
      *a2 = *a3;
    }
    *a3 = v14;
  }
  else
  {
    v25 = *a2;
    v26 = v10;
    v15 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
    v16 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
    result = mlir::Operation::isBeforeInBlock(v15, v16);
    if (result)
    {
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      v18 = *a2;
      v25 = *a1;
      v26 = v18;
      v19 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v26);
      v20 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v25);
      result = mlir::Operation::isBeforeInBlock(v19, v20);
      if (result)
      {
        v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  mlir::Block **DefiningOp;
  mlir::Operation *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  mlir::Block **v16;
  mlir::Operation *v17;
  uint64_t v18;
  uint64_t v19;
  mlir::Block **v20;
  mlir::Operation *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v22 = *a1;
      v23 = v6;
      DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
      v8 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
      if (mlir::Operation::isBeforeInBlock(DefiningOp, v8))
      {
        v9 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v22 = *v10;
    v23 = v15;
    v16 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
    v17 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
    if (mlir::Operation::isBeforeInBlock(v16, v17))
    {
      v18 = *v11;
      v19 = v12;
      do
      {
        *(uint64_t *)((char *)a1 + v19 + 24) = *(uint64_t *)((char *)a1 + v19 + 16);
        if (v19 == -16)
        {
          v14 = a1;
          goto LABEL_7;
        }
        v22 = *(uint64_t *)((char *)a1 + v19 + 8);
        v23 = v18;
        v20 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v23);
        v21 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v22);
        v19 -= 8;
      }
      while (mlir::Operation::isBeforeInBlock(v20, v21));
      v14 = (uint64_t *)((char *)a1 + v19 + 24);
LABEL_7:
      *v14 = v18;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  mlir::Block **DefiningOp;
  mlir::Operation *v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  mlir::Block **v14;
  mlir::Operation *v15;
  uint64_t v16;
  uint64_t v17;
  mlir::Block **v18;
  mlir::Operation *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_4 &,mlir::Value *>(a1, a2, a3);
  v8 = *a4;
  v21 = *a3;
  v22 = v8;
  DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
  v10 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
  result = mlir::Operation::isBeforeInBlock(DefiningOp, v10);
  if (result)
  {
    v12 = *a3;
    *a3 = *a4;
    *a4 = v12;
    v13 = *a3;
    v21 = *a2;
    v22 = v13;
    v14 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
    v15 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
    result = mlir::Operation::isBeforeInBlock(v14, v15);
    if (result)
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a2;
      v21 = *a1;
      v22 = v17;
      v18 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v22);
      v19 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v21);
      result = mlir::Operation::isBeforeInBlock(v18, v19);
      if (result)
      {
        v20 = *a1;
        *a1 = *a2;
        *a2 = v20;
      }
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_7>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_8>(_BYTE **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4) & 1) != 0)
    return 1;
  v5 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v5) & 1) != 0)
    return 1;
  v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v6) & 1) != 0)
    return 1;
  result = 0;
  **a1 = 0;
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_9>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

mlir::Block *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_10>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::Block *result;

  v4 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  result = (mlir::Block *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4);
  if ((result & 1) == 0)
  {
    result = mlir::collect_regions::detail::verifyShouldAddToQueue(*(mlir::Block ***)a1, **(_QWORD **)(a1 + 8), a2, 0);
    if ((_BYTE)result)
      **(_BYTE **)(a1 + 16) = 1;
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::collectRegions(mlir::func::FuncOp,mlir::RegionOpCreator *,mlir::CostModelParams const*)::$_11>(uint64_t **a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **a1);
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__0NS1_9placement12HostTypeCastEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESO_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t **a1, ZinIrHalH13g *this)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Input;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  mlir::Operation *v24;
  mlir::Operation *DefiningOp;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  mlir::Operation *v29;
  uint64_t v30;
  uint64_t v31[2];

  if (this
    && *(_UNKNOWN **)(*((_QWORD *)this + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id)
  {
    v3 = *a1;
    v29 = this;
    v4 = *v3;
    v5 = *v3 + 16;
    v28 = *(_OWORD *)v5;
    v6 = *((_QWORD *)this + 2);
    ZinIrHalH13g::~ZinIrHalH13g(this);
    *(_QWORD *)v5 = v6;
    *(_QWORD *)(v4 + 24) = v7;
    v8 = *(_QWORD *)v3[1];
    v9 = *((_QWORD *)this + 3);
    Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v29);
    v11 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v29) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v11)
      goto LABEL_12;
    v12 = *v11;
    v13 = mlir::TypeID::get<mlir::ShapedType>();
    v14 = *(unsigned int *)(v12 + 16);
    if (!(_DWORD)v14)
      goto LABEL_12;
    v15 = *(_QWORD **)(v12 + 8);
    v16 = &v15[2 * v14];
    do
    {
      v17 = v14 >> 1;
      v18 = &v15[2 * (v14 >> 1)];
      v20 = *v18;
      v19 = v18 + 2;
      v14 += ~(v14 >> 1);
      if (v20 < v13)
        v15 = v19;
      else
        v14 = v17;
    }
    while (v14);
    if (v15 != v16 && *v15 == v13)
      v21 = v15[1];
    else
LABEL_12:
      v21 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(v8, v9, Input, v11, v21, v3[2]);
    v22 = v3[2];
    v23 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v29);
    v30 = v23;
    v31[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v22, (unint64_t *)&v30, v31)&& v31[0] != *(_QWORD *)v22 + 16 * *(unsigned int *)(v22 + 16))
    {
      v23 = *(_QWORD *)(v31[0] + 8);
    }
    v30 = v23;
    v24 = v29;
    DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v30);
    v26 = *((unsigned int *)v24 + 9);
    v27 = (uint64_t)v24 - 16;
    if (!(_DWORD)v26)
      v27 = 0;
    v31[0] = v27;
    v31[1] = v26;
    mlir::ResultRange::replaceAllUsesWith(v31, DefiningOp);
    mlir::Operation::erase(v29);
    if (v4)
    {
      if ((_QWORD)v28)
      {
        *(_OWORD *)v5 = v28;
      }
      else
      {
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
      }
    }
  }
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_15legalizeRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEE3__1NS1_24TargetLegalizerInterfaceES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESO_E4typeES4_OT1_EUlS4_E_EES2_lS4_(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *InterfaceFor;
  uint64_t v5;
  uint64_t ArgOperands;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int **v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t NextResultAtOffset;
  uint64_t v38;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *__p;
  char *v56;
  char v57;
  mlir::Operation *v58[2];
  _QWORD v59[3];
  const void **v60;
  __int16 v61;
  uint64_t v62;
  _QWORD v63[2];
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD v67[21];

  v67[19] = *MEMORY[0x24BDAC8D0];
  if (!mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2)
    || !a2)
  {
    return 1;
  }
  InterfaceFor = (mlir::Operation *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  v5 = *a1;
  v58[0] = a2;
  v58[1] = InterfaceFor;
  mlir::SymbolTable::getSymbolUses(a2, **(mlir::Operation ***)v5, (uint64_t)&__p);
  if (!v57)
  {
    v17 = "Operation has no symbol table uses";
    goto LABEL_59;
  }
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v58);
  *(_DWORD *)(*(_QWORD *)(v5 + 8) + 8) = 0;
  if (!v57)
  {
    v50 = (unint64_t *)std::__throw_bad_optional_access[abi:nn180100]();
    goto LABEL_82;
  }
  v7 = ArgOperands;
  v8 = (char *)__p;
  v9 = v56;
  if (__p != v56)
  {
    do
    {
      v10 = *(_QWORD *)v8;
      if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)v8 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOps,void>::id)
      {
        v11 = *(_QWORD *)(v5 + 8);
        v12 = *(unsigned int *)(v11 + 8);
        if (v12 >= *(unsigned int *)(v11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(v5 + 8), (void *)(v11 + 16), v12 + 1, 8);
          v12 = *(unsigned int *)(v11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
        ++*(_DWORD *)(v11 + 8);
      }
      v8 += 16;
    }
    while (v8 != v9);
  }
  v13 = *(_QWORD *)(v5 + 16);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 || *(_DWORD *)(v13 + 12))
  {
    v15 = *(unsigned int *)(v13 + 16);
    if (v15 > 4 * v14 && v15 >= 0x41)
    {
      llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear(v13);
      goto LABEL_31;
    }
    if (!(_DWORD)v15)
      goto LABEL_30;
    v18 = *(_QWORD **)v13;
    v19 = (v15 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v19)
    {
      v20 = v19 + 1;
      v21 = (v19 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v22 = &v18[2 * v21];
      v23 = v18 + 2;
      v24 = v21;
      do
      {
        *(v23 - 2) = -4096;
        *v23 = -4096;
        v23 += 4;
        v24 -= 2;
      }
      while (v24);
      if (v20 == v21)
        goto LABEL_30;
    }
    else
    {
      v22 = *(_QWORD **)v13;
    }
    v25 = &v18[2 * v15];
    do
    {
      *v22 = -4096;
      v22 += 2;
    }
    while (v22 != v25);
LABEL_30:
    *(_QWORD *)(v13 + 8) = 0;
  }
LABEL_31:
  v26 = mlir::TargetLegalizerInterface::legalizeBody((uint64_t)v58, **(_QWORD **)(v5 + 8), *(unsigned int *)(*(_QWORD *)(v5 + 8) + 8), **(_QWORD **)(v5 + 24), *(_QWORD *)(v5 + 16));
  if (!v26)
  {
    v17 = "Legalization failed";
LABEL_59:
    v60 = (const void **)v17;
    v61 = 259;
    mlir::OpState::emitOpError((uint64_t **)v58, &v60, (uint64_t)&v62);
    if (v62)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
    goto LABEL_70;
  }
  v27 = v26;
  mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v58);
  v28 = *(_QWORD *)(v5 + 8);
  v29 = *(unsigned int *)(v28 + 8);
  if ((_DWORD)v29)
  {
    v30 = *(unsigned int ***)v28;
    v31 = *(_QWORD *)v28 + 8 * v29;
    v53 = v31;
    v54 = v7;
    while (1)
    {
      v32 = *v30;
      *(_DWORD *)(*(_QWORD *)(v5 + 32) + 8) = 0;
      v33 = v32[9];
      v34 = (_DWORD)v33 ? (uint64_t)(v32 - 4) : 0;
      if ((_DWORD)v33)
        break;
LABEL_34:
      if (++v30 == (unsigned int **)v31)
        goto LABEL_74;
    }
    v35 = 0;
    v36 = 0;
    while (1)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v36);
      v38 = *(_QWORD *)(v5 + 16);
      v60 = (const void **)NextResultAtOffset;
      v62 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)v38, (unint64_t *)&v60, &v62)|| v62 == *(_QWORD *)v38 + 16 * *(unsigned int *)(v38 + 16))
      {
        break;
      }
      v40 = *(uint64_t **)(v62 + 8);
      if (!v40)
        break;
      if (v40 != (uint64_t *)NextResultAtOffset)
      {
        while (1)
        {
          v41 = *(uint64_t **)NextResultAtOffset;
          if (!*(_QWORD *)NextResultAtOffset)
            break;
          v42 = (uint64_t *)v41[1];
          if (v42)
          {
            *v42 = *v41;
            if (*v41)
              *(_QWORD *)(*v41 + 8) = v41[1];
          }
          v41[3] = (uint64_t)v40;
          v41[1] = (uint64_t)v40;
          v43 = *v40;
          *v41 = *v40;
          if (v43)
            *(_QWORD *)(v43 + 8) = v41;
          *v40 = (uint64_t)v41;
        }
        v35 = 1;
      }
      if (++v36 == v33)
      {
        v31 = v53;
        v7 = v54;
        if ((v35 & 1) != 0)
          mlir::Operation::erase((mlir::Operation *)v32);
        goto LABEL_34;
      }
    }
    v60 = (const void **)"Result has no mapping in the valueMap (result #";
    v61 = 259;
    mlir::Operation::emitOpError((uint64_t *)v32, &v60, (uint64_t)&v62);
    v44 = *(_QWORD *)(NextResultAtOffset + 8) & 7;
    if (NextResultAtOffset && v44 == 6)
      v44 = (*(_DWORD *)(NextResultAtOffset + 16) + 6);
    if (!v62)
    {
LABEL_70:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v63);
      v16 = 0;
      if (!v57)
        return v16;
      goto LABEL_71;
    }
    LODWORD(v59[0]) = 5;
    v59[1] = v44;
    v45 = (char *)v59;
    v46 = v64;
    if (v65 < v66)
      goto LABEL_67;
    v50 = &v64;
    v51 = v65 + 1;
    if (v64 > (unint64_t)v59 || v64 + 24 * v65 <= (unint64_t)v59)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v51, 24);
      v45 = (char *)v59;
      v46 = v64;
      goto LABEL_67;
    }
LABEL_82:
    v52 = (char *)v59 - v46;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v50, v67, v51, 24);
    v46 = v64;
    v45 = &v52[v64];
LABEL_67:
    v47 = v46 + 24 * v65;
    v48 = *(_OWORD *)v45;
    *(_QWORD *)(v47 + 16) = *((_QWORD *)v45 + 2);
    *(_OWORD *)v47 = v48;
    ++v65;
    if (v62)
    {
      mlir::Diagnostic::operator<<((uint64_t)v63, ")");
      if (v62)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v62);
    }
    goto LABEL_70;
  }
LABEL_74:
  if (v27 != v7)
    mlir::Operation::cloneWithoutRegions(v58[0]);
  v16 = 1;
  if (v57)
  {
LABEL_71:
    if (__p)
    {
      v56 = (char *)__p;
      operator delete(__p);
    }
  }
  return v16;
}

ZinIrHalH13g *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::legalizeRegions(mlir::ModuleOp,mlir::RegionOpCreator *)::$_1::operator() const(mlir::TargetLegalizerInterface)::{lambda(mlir::Operation *)#1}>(uint64_t a1, mlir::Operation *a2)
{
  ZinIrHalH13g *result;

  result = (ZinIrHalH13g *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (!result)
    return mlir::OpBuilder::clone(*(uint64_t ***)a1, a2, *(mlir::IRMapping **)(a1 + 8));
  return result;
}

uint64_t mlir::OpInterface<mlir::ExecutionCostOpInterface,mlir::detail::ExecutionCostOpInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v21 = *(_QWORD *)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v21);
    if (result)
    {
      v19 = result;
      v20 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, v20, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    v7 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
    v8 = *(unsigned int *)(v6 + 40);
    if (!(_DWORD)v8)
      goto LABEL_14;
    v9 = *(_QWORD **)(v6 + 32);
    v10 = &v9[2 * v8];
    do
    {
      v11 = v8 >> 1;
      v12 = &v9[2 * (v8 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7)
        v9 = v13;
      else
        v8 = v11;
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (result = v9[1]) == 0)
    {
LABEL_14:
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(a1 + 48);
      v18 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, v18, v17);
    }
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir10WalkResultEPNS1_9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_14collectRegionsENS1_8ModuleOpEPNS1_15RegionOpCreatorEPKNS1_15CostModelParamsEE3__0NS1_4func6FuncOpES2_EENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S4_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_S2_EE5valueESS_E4typeES4_OT1_EUlS4_E_EES2_lS4_(mlir::Operation ****a1, ZinIrHalH13g *a2)
{
  uint64_t result;

  result = 1;
  if (a2)
  {
    if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
      mlir::collectRegions(a2, ***a1);
  }
  return result;
}

uint64_t mlir::RegionOpCreator::getRegionCall(_QWORD *a1, uint64_t a2, mlir::Operation **a3, uint64_t a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  mlir::Operation *v12;
  mlir::Operation *DefiningOp;
  mlir::Block **v14;
  mlir::Operation *v15;
  _QWORD *v16;
  mlir::Operation *v17;
  uint64_t InterfaceFor;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _BOOL4 v23;
  BOOL v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD *NextResultAtOffset;
  uint64_t v42;
  uint64_t v43;
  mlir::OpBuilder *v44;
  uint64_t Loc;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  std::string::__raw *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  std::string::size_type size;
  uint64_t v55;
  uint64_t v56;
  uint64_t InherentAttr;
  mlir::MLIRContext *v58;
  unsigned int v59;
  uint64_t UnitAttr;
  uint64_t v61;
  int v62;
  int v63;
  mlir::StringAttr **v64;
  _QWORD *AttrData;
  uint64_t v66;
  char v67;
  char v68;
  _QWORD **v69;
  uint64_t StringAttr;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t ArrayAttr;
  mlir::StringAttr *Context;
  uint64_t v77;
  mlir::Operation **v79;
  __int128 v82;
  std::string v87;
  _QWORD *v88;
  uint64_t v89;
  const char *v90;
  __int16 v91;
  _QWORD *v92;
  uint64_t v93;
  std::string *v94;
  char v95;
  char v96;
  std::string __p;
  uint64_t v98;
  std::string::size_type v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::string *p_p;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;

  v9 = a2;
  v10 = a1;
  v109 = *MEMORY[0x24BDAC8D0];
  p_p = a5;
  v107 = 0;
  if (a6)
  {
    v79 = a3;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v88 = (_QWORD *)mlir::ValueRange::dereference_iterator(&p_p, v11);
      DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v88);
      v14 = (mlir::Block **)DefiningOp;
      if (v12 == 0 && DefiningOp != 0)
        v15 = DefiningOp;
      else
        v15 = v12;
      if ((v12 != 0 || DefiningOp == 0) && DefiningOp)
      {
        if (mlir::Operation::isBeforeInBlock((mlir::Block **)v12, DefiningOp))
          v15 = (mlir::Operation *)v14;
        else
          v15 = v12;
      }
      v16 = (_QWORD *)*v88;
      v12 = v15;
      if (*v88)
        break;
LABEL_12:
      v11 = ++v107;
      if (p_p == a5 && v11 == a6)
      {
        v9 = a2;
        v10 = a1;
        a3 = v79;
        if (v12)
          goto LABEL_39;
        goto LABEL_38;
      }
    }
    while (1)
    {
      v17 = (mlir::Operation *)v16[2];
      if (mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v17))
      {
        if (v17)
          InterfaceFor = mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v17);
        else
          InterfaceFor = 0;
        v92 = v17;
        v93 = InterfaceFor;
        if (v17)
        {
          v102 = &v104;
          v103 = 0x400000000;
          mlir::RegionBranchOpInterface::getEntrySuccessorOperands((uint64_t)&v92, (uint64_t)&v102);
          v19 = (uint64_t **)v102;
          if ((_DWORD)v103)
          {
            v20 = 40 * v103 - 40;
            do
            {
              v21 = *v19;
              v19 += 5;
              v22 = *v21;
              v24 = v22 == mlir::TypeID::get<mlir::MemoryEffects::Write>();
              v23 = v24;
              v24 = v24 || v20 == 0;
              v20 -= 40;
            }
            while (!v24);
            v19 = (uint64_t **)v102;
            if (v102 != &v104)
LABEL_30:
              free(v19);
          }
          else
          {
            v23 = 0;
            if (v102 != &v104)
              goto LABEL_30;
          }
          if (v23 && mlir::Operation::isBeforeInBlock(v14, v17))
            v12 = v17;
        }
      }
      else
      {
        v92 = 0;
        v93 = 0;
      }
      v16 = (_QWORD *)*v16;
      if (!v16)
        goto LABEL_12;
    }
  }
LABEL_38:
  v12 = *a3;
LABEL_39:
  v25 = v10[1];
  v26 = (_OWORD *)(v25 + 16);
  v82 = *(_OWORD *)(v25 + 16);
  v27 = *((_QWORD *)v12 + 2);
  ZinIrHalH13g::~ZinIrHalH13g(v12);
  v29 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v25 + 16) = v27;
  *(_QWORD *)(v25 + 24) = v29;
  v30 = *((_QWORD *)v12 + 3);
  v31 = v10;
  v32 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, std::string *, uint64_t))(*v10 + 152))(v10, v30, v9, a5, a6);
  v33 = v32;
  v34 = *(unsigned int *)(v32 + 36);
  if ((_DWORD)v34)
    v35 = (void *)(v32 - 16);
  else
    v35 = 0;
  v102 = v35;
  v103 = 0;
  v104 = a7;
  v105 = 0;
  if (!(_DWORD)v34)
  {
    v50 = &unk_207A9F000;
LABEL_59:
    if ((_QWORD)v82)
    {
      *v26 = v82;
    }
    else
    {
      *(_QWORD *)v26 = 0;
      *(_QWORD *)(v25 + 24) = 0;
    }
    goto LABEL_62;
  }
  v36 = 0;
  v37 = 0;
  v38 = v35;
  do
  {
    if (v104 == a7 && v37 == a8)
      break;
    NextResultAtOffset = (_QWORD *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v38, v36);
    v42 = mlir::ValueRange::dereference_iterator(&v104, v105);
    v88 = NextResultAtOffset;
    if ((NextResultAtOffset[1] & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      v43 = v42;
      v44 = (mlir::OpBuilder *)v31[1];
      Loc = mlir::Value::getLoc((mlir::Value *)&v88);
      p_p = (std::string *)(*(_QWORD *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)mlir::OpBuilder::create<mlir::placement::HostTypeCast,mlir::Type const&,mlir::Value &>(v44, Loc, (uint64_t *)&p_p, (uint64_t *)&v88);
      v46 = v88;
      v47 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&__p);
      v92 = v46;
      p_p = 0;
      v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a9, (unint64_t *)&v92, &p_p);
      v49 = (std::string::__raw *)p_p;
      if ((v48 & 1) == 0)
      {
        v49 = (std::string::__raw *)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a9, (uint64_t)&v92, (unint64_t *)&v92, p_p);
        v49->__words[0] = (std::string::size_type)v92;
        v49->__words[1] = 0;
      }
      v49->__words[1] = v47;
    }
    v38 = v102;
    v36 = v103 + 1;
    v37 = v105 + 1;
    ++v103;
    ++v105;
  }
  while (v102 != v35 || v36 != v34);
  v50 = (_QWORD *)&unk_207A9F000;
  if (v25)
    goto LABEL_59;
LABEL_62:
  v101 = 0;
  v102 = &v104;
  v103 = v50[76];
  v100 = a7;
  if (a8)
  {
    v51 = 0;
    v52 = v31;
    while (1)
    {
      v92 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v100, v51);
      p_p = 0;
      v53 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a9, (unint64_t *)&v92, &p_p);
      size = 0;
      if (v53 && p_p != (std::string *)(*(_QWORD *)a9 + 16 * *(unsigned int *)(a9 + 16)))
        size = p_p->__r_.__value_.__l.__size_;
      v99 = size;
      v55 = mlir::Value::getDefiningOp((mlir::Value *)&v99);
      v56 = v55;
      if (*(_BYTE *)(v55 + 47)
        && (InherentAttr = mlir::Operation::getInherentAttr(v55, (uint64_t)"name", 4), (_BYTE)v58))
      {
        if (!InherentAttr)
          goto LABEL_74;
      }
      else
      {
        InherentAttr = mlir::DictionaryAttr::get(v56 + 56, "name", 4uLL);
        if (!InherentAttr)
        {
LABEL_74:
          UnitAttr = mlir::Builder::getUnitAttr((mlir::UnitAttr **)v52[1], v58);
          v61 = UnitAttr;
          v62 = v103;
          if (v103 >= HIDWORD(v103))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v103 + 1, 8);
            *((_QWORD *)v102 + v103) = v61;
            v63 = v103 + 1;
          }
          else
          {
            *((_QWORD *)v102 + v103) = UnitAttr;
            v63 = v62 + 1;
          }
          LODWORD(v103) = v63;
          goto LABEL_91;
        }
      }
      if (v99 && (*(_QWORD *)(v99 + 8) & 7) == 6)
        v59 = *(_DWORD *)(v99 + 16) + 6;
      else
        v59 = *(_QWORD *)(v99 + 8) & 7;
      v98 = InherentAttr;
      v64 = (mlir::StringAttr **)v52[1];
      AttrData = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v98);
      v91 = 773;
      v88 = AttrData;
      v89 = v66;
      v90 = ":";
      std::to_string(&v87, v59);
      v67 = v91;
      if ((_BYTE)v91)
      {
        if (v91 == 1)
        {
          v92 = &v87;
          v68 = 1;
          v67 = 4;
        }
        else
        {
          if (HIBYTE(v91) != 1)
            v67 = 2;
          v69 = &v88;
          if (HIBYTE(v91) == 1)
            v69 = (_QWORD **)v88;
          v92 = v69;
          v93 = v89;
          v94 = &v87;
          v68 = 4;
        }
      }
      else
      {
        v68 = 1;
      }
      v95 = v67;
      v96 = v68;
      llvm::Twine::str((llvm::Twine *)&v92, &__p);
      v108 = 260;
      p_p = &__p;
      StringAttr = mlir::Builder::getStringAttr(v64, (mlir::MLIRContext *)&p_p);
      v71 = StringAttr;
      v72 = v103;
      if (v103 >= HIDWORD(v103))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, v103 + 1, 8);
        *((_QWORD *)v102 + v103) = v71;
        v72 = v103;
      }
      else
      {
        *((_QWORD *)v102 + v103) = StringAttr;
      }
      LODWORD(v103) = v72 + 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_91;
      }
      else if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_91;
      }
      operator delete(v87.__r_.__value_.__l.__data_);
LABEL_91:
      v51 = ++v101;
      if (v100 == a7 && v51 == a8)
      {
        v73 = (uint64_t *)v102;
        v74 = v103;
        goto LABEL_99;
      }
    }
  }
  v74 = 0;
  v73 = &v104;
  v52 = v31;
LABEL_99:
  ArrayAttr = mlir::Builder::getArrayAttr((mlir::MLIRContext **)v52[1], (uint64_t)v73, v74);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(v33 + 24));
  v108 = 261;
  p_p = (std::string *)"output_names";
  v107 = 12;
  v77 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&p_p);
  mlir::Operation::setAttr(v33, v77, ArrayAttr);
  if (v102 != &v104)
    free(v102);
  return v33;
}

uint64_t mlir::RegionOpCreator::isOpCompatible(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlir::RegionOpCreator::replaceOutOfRegionUses(mlir::RegionOpCreator *this, mlir::Operation *a2)
{
  return 1;
}

uint64_t mlir::RegionOpCreator::getHostReshape()
{
  return 0;
}

uint64_t mlir::RegionOpCreator::getHostCast()
{
  return 0;
}

void mlir::RegionOpCreator::getPromotedTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a4 + 8) = 0;
  v13 = a2;
  v14 = 0;
  if (a3)
  {
    v8 = 0;
    v9 = (void *)(a4 + 16);
    do
    {
      v10 = mlir::ValueRange::dereference_iterator(&v13, v8);
      v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 184))(a1, *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8);
      v12 = *(unsigned int *)(a4 + 8);
      if (v12 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v9, v12 + 1, 8);
        v12 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = v11;
      ++*(_DWORD *)(a4 + 8);
      v8 = ++v14;
    }
    while (v13 != a2 || v8 != a3);
  }
}

{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_DWORD *)(a4 + 8) = 0;
  if (a3)
  {
    v8 = 0;
    v9 = (void *)(a4 + 16);
    do
    {
      v10 = mlir::TypeRange::dereference_iterator(a2, v8);
      v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 184))(a1, v10);
      v12 = *(unsigned int *)(a4 + 8);
      if (v12 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v9, v12 + 1, 8);
        v12 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = v11;
      ++*(_DWORD *)(a4 + 8);
      ++v8;
    }
    while (a3 != v8);
  }
}

uint64_t mlir::TypeID::get<mlir::MemoryEffects::Write>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451A000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451A000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffects::Write]";
      v12 = 76;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::MemoryEffects::Write,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451A000;
    }
  }
  return v1[407];
}

uint64_t mlir::minimalLegalize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t NextResultAtOffset;
  char v12;
  _QWORD *v13;
  uint64_t InterfaceFor;
  uint64_t v16;
  _QWORD *v17;

  if (a3)
  {
    v6 = a2;
    v7 = a2 + 8 * a3;
    do
    {
      v8 = *(unsigned int *)(*(_QWORD *)v6 + 36);
      if ((_DWORD)v8)
        v9 = *(_QWORD *)v6 - 16;
      else
        v9 = 0;
      if ((_DWORD)v8)
      {
        for (i = 0; i != v8; ++i)
        {
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, i);
          v16 = NextResultAtOffset;
          v17 = 0;
          v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a4, (unint64_t *)&v16, &v17);
          v13 = v17;
          if ((v12 & 1) == 0)
          {
            v13 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a4, (uint64_t)&v16, (unint64_t *)&v16, v17);
            *v13 = v16;
            v13[1] = 0;
          }
          v13[1] = NextResultAtOffset;
        }
      }
      v6 += 8;
    }
    while (v6 != v7);
  }
  if (!mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(a1)
    || !a1)
  {
    return 0;
  }
  InterfaceFor = mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(InterfaceFor + 16))(InterfaceFor, a1);
}

uint64_t mlir::TargetLegalizerInterface::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, a2, a3, a4, a5);
}

uint64_t mlir::TargetLegalizerInterface::setFunctionType(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1[1] + 24))(a1[1], *a1, a2);
}

uint64_t mlir::TargetLegalizerInterface::getBody(mlir::TargetLegalizerInterface *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)this + 1) + 32))(*((_QWORD *)this + 1), *(_QWORD *)this);
}

float mlir::getDeviceInfo@<S0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  float v7;
  float result;

  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 20) = 0u;
  *(_OWORD *)(a3 + 4) = 0u;
  *(_DWORD *)(a3 + 48) = 978433816;
  *(_DWORD *)(a3 + 52) = a1;
  *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 36) = a2;
  if (a1 == 3)
  {
    *(_DWORD *)(a3 + 4) = 1072399647;
    *(_DWORD *)(a3 + 32) = 1112014848;
    *(_QWORD *)(a3 + 40) = 0x4248000041A3D70ALL;
    if ((uint64_t)a2 < 6)
    {
      v3 = 0x424800003FEB851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0xA)
    {
LABEL_13:
      *(_DWORD *)(a3 + 32) = 1120403456;
      *(_DWORD *)(a3 + 44) = 1120403456;
      v3 = 0x42C800003FEB851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0x14)
    {
LABEL_17:
      *(_DWORD *)(a3 + 32) = 1128792064;
      v4 = 1120403456;
LABEL_20:
      *(_DWORD *)(a3 + 44) = v4;
      *(_DWORD *)(a3 + 4) = 1080788255;
      v3 = 0x43480000406B851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0x28)
    {
LABEL_22:
      *(_DWORD *)(a3 + 32) = 1137180672;
      v5 = 1120403456;
LABEL_25:
      *(_DWORD *)(a3 + 44) = v5;
      *(_DWORD *)(a3 + 4) = 1080788255;
      v3 = 0x43C80000406B851FLL;
      goto LABEL_29;
    }
    *(_DWORD *)(a3 + 32) = 1145569280;
    v6 = 1120403456;
LABEL_28:
    *(_DWORD *)(a3 + 44) = v6;
    *(_DWORD *)(a3 + 4) = 1089176863;
    v3 = 0x4448000040EB851FLL;
    goto LABEL_29;
  }
  if (a1 != 4)
  {
    *(_DWORD *)(a3 + 4) = 1072399647;
    *(_DWORD *)(a3 + 32) = 1107846758;
    *(_QWORD *)(a3 + 40) = 0x4208666641591EB8;
    if ((uint64_t)a2 < 6)
    {
      v3 = 0x420866663FEB851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0xA)
    {
      *(_DWORD *)(a3 + 32) = 1116235366;
      *(_DWORD *)(a3 + 44) = 1116235366;
      v3 = 0x428866663FEB851FLL;
      goto LABEL_29;
    }
    if (a2 <= 0x14)
    {
      *(_DWORD *)(a3 + 32) = 1128792064;
      v4 = 1116235366;
      goto LABEL_20;
    }
    if (a2 <= 0x28)
    {
      *(_DWORD *)(a3 + 32) = 1137180672;
      v5 = 1116235366;
      goto LABEL_25;
    }
    *(_DWORD *)(a3 + 32) = 1145569280;
    v6 = 1116235366;
    goto LABEL_28;
  }
  *(_DWORD *)(a3 + 4) = 1072399647;
  *(_DWORD *)(a3 + 32) = 1112014848;
  *(_QWORD *)(a3 + 40) = 0x4248000041A3D70ALL;
  v3 = 0x424800003FEB851FLL;
  if ((uint64_t)a2 >= 7)
  {
    if (a2 > 0xA)
    {
      if (a2 > 0x14)
      {
        if (a2 > 0x28)
          goto LABEL_29;
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_13;
  }
LABEL_29:
  v7 = (float)(uint64_t)a2 * 0.33;
  *(float *)(a3 + 8) = *(float *)&v3 + *(float *)&v3;
  *(_QWORD *)(a3 + 12) = v3;
  *(float *)(a3 + 20) = v7;
  *(float *)(a3 + 24) = v7;
  result = v7 * 0.25;
  *(float *)(a3 + 28) = v7 * 0.25;
  return result;
}

mlir::placement::PlacementDialect *mlir::placement::PlacementDialect::PlacementDialect(mlir::placement::PlacementDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"placement", 9, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id);
  *v3 = off_24C052C78;
  mlir::Dialect::addOperations<mlir::placement::ANEIOCast,mlir::placement::HostTypeCast,mlir::placement::MemrefToTensor,mlir::placement::RegionCall,mlir::placement::ReplacedOps,mlir::placement::ReplacedOpsLiveOuts,mlir::placement::StartTimer,mlir::placement::StopTimer,mlir::placement::TensorToMemref>((uint64_t)v3);
  mlir::Dialect::addAttribute<mlir::placement::RegionTypeAttr>((uint64_t)this);
  mlir::Dialect::addType<mlir::placement::TimerHandleType>((uint64_t)this);
  return this;
}

void mlir::placement::PlacementDialect::~PlacementDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_207474ECC()
{
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::Dialect::addOperations<mlir::placement::ANEIOCast,mlir::placement::HostTypeCast,mlir::placement::MemrefToTensor,mlir::placement::RegionCall,mlir::placement::ReplacedOps,mlir::placement::ReplacedOpsLiveOuts,mlir::placement::StartTimer,mlir::placement::StopTimer,mlir::placement::TensorToMemref>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = (_QWORD *)operator new();
  v5 = mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v5, 0, 0);
  v3 = (uint64_t)v5;
  v5 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::placement::HostTypeCast>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::MemrefToTensor>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::RegionCall>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOps>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOpsLiveOuts>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::StartTimer>(a1);
  mlir::RegisteredOperationName::insert<mlir::placement::StopTimer>(a1);
  return mlir::RegisteredOperationName::insert<mlir::placement::TensorToMemref>(a1);
}

uint64_t mlir::placement::RegionTypeAttr::get(mlir::MLIRContext *a1, unsigned int a2)
{
  unsigned __int8 **AttributeUniquer;
  unsigned int v5;
  _QWORD v6[2];

  v5 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v6[1] = a1;
  return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v6, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v5);
}

uint64_t mlir::placement::RegionTypeAttr::parse(mlir::AsmParser *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v8;
  int v10;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15[8];
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  _QWORD v20[3];
  __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  mlir::AsmParser::getContext(a1);
  (*(void (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 152))(a1))
  {
    v2 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
    v13 = 0;
    v14 = 0;
    v3 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(mlir::AsmParser *, uint64_t *))(*(_QWORD *)a1 + 384))(a1, &v13))
    {
      *(_QWORD *)v15 = "expected valid keyword";
      v16 = 259;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, unsigned int *))(*(_QWORD *)a1 + 24))(&v19, a1, v3, v15);
      v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v19);
      if (v19)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v20);
      if (!v4)
        goto LABEL_31;
    }
    if (v14 != 3)
    {
LABEL_19:
      v16 = 257;
      (*(void (**)(const char **__return_ptr, mlir::AsmParser *, uint64_t, unsigned int *))(*(_QWORD *)a1 + 24))(&v19, a1, v2, v15);
      if (v19)
      {
        mlir::Diagnostic::operator<<((uint64_t)v20, "expected ");
        if (v19)
        {
          mlir::Diagnostic::operator<<((uint64_t)v20, "::mlir::placement::RegionType");
          if (v19)
          {
            mlir::Diagnostic::operator<<((uint64_t)v20, " to be one of: ");
            if (v19)
            {
              mlir::Diagnostic::operator<<((uint64_t)v20, "GPU");
              if (v19)
              {
                mlir::Diagnostic::operator<<((uint64_t)v20, ", ");
                if (v19)
                {
                  mlir::Diagnostic::operator<<((uint64_t)v20, "ANE");
                  if (v19)
                  {
                    mlir::Diagnostic::operator<<((uint64_t)v20, ", ");
                    if (v19)
                      mlir::Diagnostic::operator<<((uint64_t)v20, "CPU");
                  }
                }
              }
            }
          }
        }
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v19);
      if (v19)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v20);
LABEL_31:
      v8 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 40))(a1);
      v21 = 259;
      (*(void (**)(uint64_t *__return_ptr, mlir::AsmParser *, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v17, a1, v8, &v19);
      if (v17)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v18);
      return 0;
    }
    if (*(_WORD *)v13 == 20551 && *(_BYTE *)(v13 + 2) == 85)
    {
      v10 = 0;
    }
    else if (*(_WORD *)v13 == 20033 && *(_BYTE *)(v13 + 2) == 69)
    {
      v10 = 1;
    }
    else
    {
      if (*(_WORD *)v13 != 20547 || *(_BYTE *)(v13 + 2) != 85)
        goto LABEL_19;
      v10 = 2;
    }
    if ((*(unsigned __int8 (**)(mlir::AsmParser *))(*(_QWORD *)a1 + 168))(a1))
    {
      Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(a1);
      v15[0] = v10;
      AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
      v19 = (const char *)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
      v20[0] = Context;
      return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v19, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, v15);
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::placement::RegionTypeAttr::print(mlir::placement::RegionTypeAttr *this, mlir::AsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  int v6;
  BOOL v7;
  size_t v8;
  char *v9;
  llvm::raw_ostream *v10;
  void *v11;
  llvm::raw_ostream *result;
  _BYTE *v13;

  mlir::Attribute::getContext(this);
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    *v5 = 60;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = *(_DWORD *)(*(_QWORD *)this + 8);
  if (!v6)
  {
    v7 = 0;
    v9 = "GPU";
LABEL_14:
    v8 = 3;
    goto LABEL_15;
  }
  if (v6 == 2)
  {
    v7 = 0;
    v9 = "CPU";
    goto LABEL_14;
  }
  v7 = v6 != 1;
  if (v6 == 1)
    v8 = 3;
  else
    v8 = 0;
  if (v6 == 1)
    v9 = "ANE";
  else
    v9 = &byte_207AF6795;
LABEL_15:
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (void *)*((_QWORD *)v10 + 4);
  if (v8 <= *((_QWORD *)v10 + 3) - (_QWORD)v11)
  {
    if (!v7)
    {
      memcpy(v11, v9, v8);
      *((_QWORD *)v10 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, v9, v8);
  }
  result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v13)
    return llvm::raw_ostream::write(result, ">", 1uLL);
  *v13 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t mlir::placement::PlacementDialect::parseAttribute(uint64_t a1, mlir::AsmParser *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  const void **v9;
  const void **v10;
  uint64_t v11;
  char v12[32];
  __int16 v13;
  const void **v14;
  uint64_t v15;
  __int16 v16;
  mlir::AsmParser *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int16 v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a2 + 40))(a2);
  v17 = a2;
  v5 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)a2 + 40))(a2);
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v18 = v5;
  LOBYTE(v21) = 0;
  if (!(*(unsigned __int8 (**)(mlir::AsmParser *, _QWORD **))(*(_QWORD *)a2 + 608))(a2, &v19))
  {
    v21 = 256;
    goto LABEL_12;
  }
  v14 = (const void **)"region_type";
  v15 = 11;
  if (v22)
    goto LABEL_12;
  v6 = v20;
  if (v20)
  {
    if (v20 == 11 && *v19 == 0x745F6E6F69676572 && *(_QWORD *)((char *)v19 + 3) == 0x657079745F6E6F69)
    {
      result = mlir::placement::RegionTypeAttr::parse(a2);
      v6 = 0;
      v9 = 0;
      LOBYTE(v21) = result != 0;
      HIBYTE(v21) = 1;
      goto LABEL_13;
    }
    goto LABEL_25;
  }
  (*(void (**)(mlir::AsmParser *, const void ***, uint64_t))(*(_QWORD *)v17 + 616))(v17, &v14, 1);
  if (v22)
  {
LABEL_12:
    v6 = 0;
    v9 = 0;
    result = 0;
    goto LABEL_13;
  }
  v6 = v20;
LABEL_25:
  result = 0;
  v9 = (const void **)v19;
  v21 = 0;
LABEL_13:
  if (v21 <= 0xFFu)
  {
    v13 = 257;
    (*(void (**)(mlir::AsmParser **__return_ptr, mlir::AsmParser *, uint64_t, char *))(*(_QWORD *)a2 + 24))(&v17, a2, v4, v12);
    if (v17)
    {
      if (v17)
      {
        v16 = 261;
        v14 = v9;
        v15 = v6;
        mlir::Diagnostic::operator<<((uint64_t)&v18, &v14);
        if (v17)
        {
          if (v17)
          {
            v10 = *(const void ***)(a1 + 8);
            v11 = *(_QWORD *)(a1 + 16);
            v16 = 261;
            v14 = v10;
            v15 = v11;
            mlir::Diagnostic::operator<<((uint64_t)&v18, &v14);
            if (v17)
            {
              if (v17)
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
            }
          }
        }
      }
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v18);
    return 0;
  }
  return result;
}

void mlir::placement::PlacementDialect::printAttribute(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id)
  {
    v6 = a2;
    v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a3 + 16))(a3);
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0xA)
    {
      *(_DWORD *)(v5 + 7) = 1701869940;
      *(_QWORD *)v5 = *(_QWORD *)"region_type";
      *((_QWORD *)v4 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v4, "region_type", 0xBuLL);
    }
    mlir::placement::RegionTypeAttr::print((mlir::placement::RegionTypeAttr *)&v6, a3);
  }
}

uint64_t mlir::placement::TimerHandleType::get(mlir::placement::TimerHandleType *this, mlir::MLIRContext *a2)
{
  unsigned __int8 **TypeUniquer;
  mlir::MLIRContext *v4;
  _QWORD v5[2];
  mlir::placement::TimerHandleType *v6;

  v4 = a2;
  v6 = this;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(this);
  v5[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  v5[1] = &v6;
  return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (unint64_t *)&v4);
}

uint64_t mlir::placement::TimerHandleType::parse(mlir::placement::TimerHandleType *this, mlir::AsmParser *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  mlir::MLIRContext *Context;
  unsigned __int8 **TypeUniquer;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  unint64_t v13;
  mlir::MLIRContext *v14;
  uint64_t v15;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x24BDAC8D0];
  mlir::AsmParser::getContext(this);
  (*(void (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)this + 40))(this);
  if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)this + 152))(this))
  {
    v12 = 257;
    if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *, const char *, uint64_t, _QWORD *))(*(_QWORD *)this + 368))(this, "handle", 6, v11))
    {
      if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)this + 136))(this))
      {
        v3 = mlir::FieldParser<unsigned long long,unsigned long long>::parse((uint64_t)this);
        v4 = *(_QWORD *)this;
        if (v5)
        {
          v6 = v3;
          if ((*(unsigned __int8 (**)(mlir::placement::TimerHandleType *))(v4 + 168))(this))
          {
            Context = (mlir::MLIRContext *)mlir::AsmParser::getContext(this);
            v13 = v6;
            v14 = Context;
            TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
            v11[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
            v11[1] = &v14;
            return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v11, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, &v13);
          }
        }
        else
        {
          v10 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(v4 + 40))(this);
          v12 = 259;
          (*(void (**)(uint64_t *__return_ptr, mlir::placement::TimerHandleType *, uint64_t, _QWORD *))(*(_QWORD *)this + 24))(&v15, this, v10, v11);
          if (v15)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::FieldParser<unsigned long long,unsigned long long>::parse(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  char v4;
  uint64_t v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  _QWORD v10[24];

  v10[23] = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v3 = mlir::AsmParser::parseOptionalInteger<unsigned long long>(a1, &v6);
  v4 = v3;
  if (v3 <= 0xFFu)
  {
    v7 = "expected integer value";
    v8 = 259;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v9, a1, v2, &v7);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v9);
    if (v9)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v9);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v10);
  }
  if (v4)
    return v6;
  else
    return 0;
}

llvm::raw_ostream *mlir::placement::TimerHandleType::print(mlir::placement::TimerHandleType *this, mlir::AsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *result;
  _BYTE *v17;

  mlir::Attribute::getContext(this);
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<", 1uLL);
  }
  else
  {
    *v5 = 60;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 5)
  {
    *(_WORD *)(v7 + 4) = 25964;
    *(_DWORD *)v7 = 1684955496;
    *((_QWORD *)v6 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v6, "handle", 6uLL);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 32;
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if (*((_BYTE **)v10 + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "=", 1uLL);
  }
  else
  {
    *v11 = 61;
    ++*((_QWORD *)v10 + 4);
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 32;
  }
  v14 = *(_QWORD *)(*(_QWORD *)this + 8);
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  llvm::raw_ostream::operator<<(v15, v14);
  result = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v17)
    return llvm::raw_ostream::write(result, ">", 1uLL);
  *v17 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t mlir::placement::PlacementDialect::parseType(uint64_t a1, mlir::placement::TimerHandleType *a2)
{
  uint64_t v4;
  uint64_t v5;
  mlir::AsmParser *v6;
  uint64_t v7;
  uint64_t result;
  const void **v10;
  const void **v11;
  uint64_t v12;
  char v13[32];
  __int16 v14;
  const void **v15;
  uint64_t v16;
  __int16 v17;
  mlir::placement::TimerHandleType *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)a2 + 40))(a2);
  v18 = a2;
  v5 = (*(uint64_t (**)(mlir::placement::TimerHandleType *))(*(_QWORD *)a2 + 40))(a2);
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v19 = v5;
  LOBYTE(v22) = 0;
  if (!(*(unsigned __int8 (**)(mlir::placement::TimerHandleType *, uint64_t *))(*(_QWORD *)a2 + 608))(a2, &v20))
  {
    v22 = 256;
    goto LABEL_12;
  }
  v15 = (const void **)"timer";
  v16 = 5;
  if (v23)
    goto LABEL_12;
  v7 = v21;
  if (v21)
  {
    if (v21 == 5 && *(_DWORD *)v20 == 1701669236 && *(_BYTE *)(v20 + 4) == 114)
    {
      result = mlir::placement::TimerHandleType::parse(a2, v6);
      v7 = 0;
      v10 = 0;
      LOBYTE(v22) = result != 0;
      HIBYTE(v22) = 1;
      goto LABEL_13;
    }
    goto LABEL_25;
  }
  (*(void (**)(mlir::placement::TimerHandleType *, const void ***, uint64_t))(*(_QWORD *)v18 + 616))(v18, &v15, 1);
  if (v23)
  {
LABEL_12:
    result = 0;
    v7 = 0;
    v10 = 0;
    goto LABEL_13;
  }
  v7 = v21;
LABEL_25:
  result = 0;
  v10 = (const void **)v20;
  v22 = 0;
LABEL_13:
  if (v22 <= 0xFFu)
  {
    v14 = 257;
    (*(void (**)(mlir::placement::TimerHandleType **__return_ptr, mlir::placement::TimerHandleType *, uint64_t, char *))(*(_QWORD *)a2 + 24))(&v18, a2, v4, v13);
    if (v18)
    {
      if (v18)
      {
        v17 = 261;
        v15 = v10;
        v16 = v7;
        mlir::Diagnostic::operator<<((uint64_t)&v19, &v15);
        if (v18)
        {
          if (v18)
          {
            v11 = *(const void ***)(a1 + 8);
            v12 = *(_QWORD *)(a1 + 16);
            v17 = 261;
            v15 = v11;
            v16 = v12;
            mlir::Diagnostic::operator<<((uint64_t)&v19, &v15);
            if (v18)
            {
              if (v18)
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v18);
            }
          }
        }
      }
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v19);
    return 0;
  }
  return result;
}

void mlir::placement::PlacementDialect::printType(uint64_t a1, uint64_t a2, mlir::AsmPrinter *a3)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id)
  {
    v6 = a2;
    v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::AsmPrinter *))(*(_QWORD *)a3 + 16))(a3);
    v5 = *((_QWORD *)v4 + 4);
    if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 4)
    {
      *(_BYTE *)(v5 + 4) = 114;
      *(_DWORD *)v5 = 1701669236;
      *((_QWORD *)v4 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v4, "timer", 5uLL);
    }
    mlir::placement::TimerHandleType::print((mlir::placement::TimerHandleType *)&v6, a3);
  }
}

uint64_t mlir::placement::detail::ANEIOCastGenericAdaptorBase::ANEIOCastGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "placement.ane_io_cast", 21, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0(uint64_t *a1, const void **a2, const void **a3, const void **a4, unsigned int a5)
{
  _QWORD *v6;
  void *v7;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  const void **v17;
  const void ***v18;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v35;
  char *v36;
  const void **v37[4];
  __int16 v38;
  const void **v39;
  int v40;
  uint64_t v41;
  const void **v42;
  _BYTE v43[16];
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD v47[20];

  v47[19] = *MEMORY[0x24BDAC8D0];
  v39 = a2;
  v6 = *a2;
  v7 = (void *)*((_QWORD *)*a2 + 17);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *((unsigned int *)v6 + 4);
    if (!(_DWORD)v10)
      goto LABEL_14;
    v11 = (_QWORD *)v6[1];
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      v17 = (const void **)v11[1];
    else
LABEL_14:
      v17 = 0;
    v42 = a2;
    v18 = &v42;
    goto LABEL_36;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v26 = mlir::TypeID::get<mlir::ShapedType>();
    v27 = *((unsigned int *)v6 + 4);
    if (!(_DWORD)v27)
      goto LABEL_34;
    v28 = (_QWORD *)v6[1];
    v29 = &v28[2 * v27];
    do
    {
      v30 = v27 >> 1;
      v31 = &v28[2 * (v27 >> 1)];
      v33 = *v31;
      v32 = v31 + 2;
      v27 += ~(v27 >> 1);
      if (v33 < v26)
        v28 = v32;
      else
        v27 = v30;
    }
    while (v27);
    if (v28 != v29 && *v28 == v26)
      v17 = (const void **)v28[1];
    else
LABEL_34:
      v17 = 0;
    v37[0] = a2;
    v18 = v37;
LABEL_36:
    v18[1] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v18);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    return 1;
  v38 = 261;
  v37[0] = a3;
  v37[1] = a4;
  mlir::Operation::emitOpError(a1, v37, (uint64_t)&v42);
  if (v42)
  {
    mlir::Diagnostic::operator<<((uint64_t)v43, " #");
    if (v42)
    {
      v40 = 5;
      v41 = a5;
      v20 = &v40;
      v21 = v44;
      if (v45 >= v46)
      {
        v35 = v45 + 1;
        if (v44 <= (unint64_t)&v40 && v44 + 24 * v45 > (unint64_t)&v40)
        {
          v36 = (char *)&v40 - v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          v21 = v44;
          v20 = (int *)&v36[v44];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          v20 = &v40;
          v21 = v44;
        }
      }
      v22 = v21 + 24 * v45;
      v23 = *(_OWORD *)v20;
      *(_QWORD *)(v22 + 16) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v22 = v23;
      ++v45;
      if (v42)
        mlir::Diagnostic::operator<<((uint64_t)v43, " must be tensor of any type values or memref of any type values or index, but got ");
    }
  }
  v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v42, (uint64_t *)&v39);
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
  if (v42)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v43);
  return v25;
}

uint64_t mlir::placement::ANEIOCast::verify(uint64_t **this)
{
  uint64_t DefiningOp;
  uint64_t v3;
  const void **v5;
  __int16 v6;
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)((*this)[9] + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v7);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id
    || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(*this - 1) & 0xFFFFFFFFFFFFFFF8))
  {
    return 1;
  }
  v6 = 257;
  mlir::OpState::emitOpError(this, &v5, (uint64_t)&v7);
  if (v7)
    mlir::Diagnostic::operator<<((uint64_t)v8, "invalid conversion");
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v7);
  if (v7)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return v3;
}

uint64_t mlir::placement::detail::MemrefToTensorGenericAdaptorBase::MemrefToTensorGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "placement.memref_to_tensor", 26, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave(mlir::placement::detail::MemrefToTensorGenericAdaptorBase *this)
{
  MirInfoChannelAssignment *Value;
  MirInfoChannelAssignment *v3;
  MirInfoChannelAssignment *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;

  Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue(this);
  v3 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v3, **(_QWORD **)(*((_QWORD *)this + 1) + 96));
  if ((v5 & 1) != 0 && (v6 = *((_QWORD *)v4 + 1)) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *(void **)(*(_QWORD *)v6 + 136);
    if (v10 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      v6 = 0;
    v16 = v6;
    if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      mlir::IntegerAttr::getValue(&v16, (llvm::APInt *)&v14);
      if (v15 >= 0x41)
        v11 = v14;
      else
        v11 = (uint64_t *)&v14;
      v12 = *v11;
      v7 = *v11 & 0xFFFFFF00;
      if (v15 >= 0x41 && v14)
        MEMORY[0x20BD002D4]();
      v9 = v12;
      v8 = 0x100000000;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  return v8 | v7 | v9;
}

uint64_t mlir::placement::MemrefToTensorAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  MirInfoChannelAssignment *Value;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _QWORD v35[4];
  __int16 v36;
  _QWORD *v37;
  _QWORD v38[2];
  uint64_t OperandRange;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x24BDAC8D0];
  v40 = *a1;
  Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (**(_QWORD **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        v5 = *((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        v6 = *((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        v7 = (_QWORD *)*((_QWORD *)Value + 1);
      }
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    while (Value != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40));
    if (v7)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v7))
        goto LABEL_33;
      v8 = *v7;
      v9 = mlir::TypeID::get<mlir::ElementsAttr>();
      v10 = *(unsigned int *)(v8 + 16);
      if (!(_DWORD)v10)
        goto LABEL_20;
      v11 = *(_QWORD **)(v8 + 8);
      v12 = &v11[2 * v10];
      do
      {
        v13 = v10 >> 1;
        v14 = &v11[2 * (v10 >> 1)];
        v16 = *v14;
        v15 = v14 + 2;
        v10 += ~(v10 >> 1);
        if (v16 < v9)
          v11 = v15;
        else
          v10 = v13;
      }
      while (v10);
      if (v11 != v12 && *v11 == v9)
        v17 = v11[1];
      else
LABEL_20:
        v17 = 0;
      v35[0] = v7;
      v35[1] = v17;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v35);
      v19 = Type;
      if (!Type)
        goto LABEL_30;
      v20 = *Type;
      v21 = mlir::TypeID::get<mlir::ShapedType>();
      v22 = *(unsigned int *)(v20 + 16);
      if (!(_DWORD)v22)
        goto LABEL_30;
      v23 = *(_QWORD **)(v20 + 8);
      v24 = &v23[2 * v22];
      do
      {
        v25 = v22 >> 1;
        v26 = &v23[2 * (v22 >> 1)];
        v28 = *v26;
        v27 = v26 + 2;
        v22 += ~(v22 >> 1);
        if (v28 < v21)
          v23 = v27;
        else
          v22 = v25;
      }
      while (v22);
      if (v23 != v24 && *v23 == v21)
        v29 = v23[1];
      else
LABEL_30:
        v29 = 0;
      v41 = (uint64_t)v19;
      v42[0] = v29;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v41);
      if (v30 != 1
        || (v37 = v7,
            v38[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37),
            v38[1] = v31,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_33:
        v32 = "'placement.memref_to_tensor' op attribute 'shape' failed to satisfy constraint: ui64 elements attribute of rank 1";
        goto LABEL_44;
      }
    }
  }
  if (v6)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      v32 = "'placement.memref_to_tensor' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
      goto LABEL_44;
    }
    v41 = v6;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  }
  if (!v5)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v35[0] = v5;
    v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v41, 32))
      return 1;
  }
  v32 = "'placement.memref_to_tensor' op attribute 'interleave' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_44:
  v35[0] = v32;
  v36 = 259;
  mlir::emitError(a2, (uint64_t)v35, (uint64_t)&v41);
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::placement::MemrefToTensor::getShapeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::DenseIntElementsAttr::classof(*((_QWORD *)v9 + 1)))
    return v11;
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getResultElementTypeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::getInterleaveAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (MirInfoChannelAssignment *)(v7 + 16 * v8), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::placement::MemrefToTensor::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t OperandRange;
  unint64_t v18;
  const void *Shape;
  unint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  MirInfoChannelAssignment *Value;
  MirInfoChannelAssignment *v28;
  MirInfoChannelAssignment *v29;
  char v30;
  uint64_t v31;
  void *v32;
  MirInfoChannelAssignment *v33;
  MirInfoChannelAssignment *v34;
  MirInfoChannelAssignment *v35;
  char v36;
  uint64_t v37;
  uint64_t RawStringData;
  uint64_t v39;
  int isSplat;
  unint64_t NumElements;
  unsigned int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  MirInfoChannelAssignment *v49;
  MirInfoChannelAssignment *v50;
  MirInfoChannelAssignment *v51;
  char v52;
  uint64_t v53;
  MirInfoChannelAssignment *v54;
  MirInfoChannelAssignment *v55;
  MirInfoChannelAssignment *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t Interleave;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  BOOL v66;
  _QWORD v67[2];
  _QWORD v68[2];
  void *v69;
  uint64_t v70;
  _BYTE v71[40];
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v72 = a6;
  LOBYTE(v73) = 0;
  v74 = 0;
  v75 = a9;
  v76 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v72);
    if (v74)
      v74 = 0;
    mlir::OperationName::OperationName(&v73, "placement.memref_to_tensor", 26, Context);
    v74 = 1;
  }
  v77 = a4;
  v78 = a5;
  if (a5)
  {
    v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::placement::MemrefToTensorAdaptor::verify(&v72, v15))
    {
      v69 = v77;
      v70 = 0;
      v16 = mlir::ValueRange::dereference_iterator(&v69, 0);
      v68[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      v68[1] = a2;
      if (v68[0])
      {
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68);
        Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v68);
        v20 = v18;
        v69 = v71;
        v70 = 0x500000000;
        v21 = 8 * v18;
        if (8 * v18 < 0x29)
        {
          v22 = 0;
          if (!v18)
          {
LABEL_17:
            LODWORD(v70) = v22 + (v21 >> 3);
            Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
            v28 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
            v29 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v28, *(_QWORD *)(*(_QWORD *)(v73 + 96) + 8));
            if ((v30 & 1) != 0)
            {
              v31 = *((_QWORD *)v29 + 1);
              if (v31)
              {
                v32 = *(void **)(*(_QWORD *)v31 + 136);
                if (v32 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
                  v31 = 0;
                v67[0] = v31;
                if (v32 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
                  OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v67);
              }
            }
            v33 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
            v34 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
            v35 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v33, v34, *(_QWORD *)(*(_QWORD *)(v73 + 96) + 16));
            if ((v36 & 1) == 0
              || (v37 = *((_QWORD *)v35 + 1)) == 0
              || !mlir::DenseIntElementsAttr::classof(*((_QWORD *)v35 + 1)))
            {
LABEL_47:
              v49 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
              v50 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
              v51 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v49, v50, **(_QWORD **)(v73 + 96));
              if ((v52 & 1) != 0)
              {
                v53 = *((_QWORD *)v51 + 1);
                if (v53)
                {
                  if (*(_UNKNOWN **)(*(_QWORD *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    v54 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72);
                    v55 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v72);
                    v56 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v54, v55, *(_QWORD *)(*(_QWORD *)(v73 + 96) + 16));
                    if ((v57 & 1) == 0
                      || (v58 = *((_QWORD *)v56 + 1)) == 0
                      || (mlir::DenseIntElementsAttr::classof(v58) & 1) == 0)
                    {
                      v59 = v70;
                      if ((v70 & 0xFFFFFFFE) != 4)
                      {
                        v63 = mlir::UnrankedTensorType::get(OperandRange);
                        goto LABEL_58;
                      }
                      Interleave = mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave((mlir::placement::detail::MemrefToTensorGenericAdaptorBase *)&v72);
                      v61 = 16;
                      if ((_DWORD)v59 == 4)
                        v61 = 8;
                      v62 = v69;
                      *(uint64_t *)((char *)v69 + v61) /= Interleave;
                      v62[v59 - 1] *= Interleave;
                    }
                  }
                }
              }
              v63 = mlir::RankedTensorType::get((uint64_t)v69, v70, OperandRange, 0);
LABEL_58:
              v64 = v63;
              v65 = *(_DWORD *)(a11 + 8);
              if (v65 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v65 + 1, 8);
                v65 = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v65) = v64;
              ++*(_DWORD *)(a11 + 8);
              if (v69 != v71)
                free(v69);
              return 1;
            }
            v67[0] = v37;
            v67[1] = 1;
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v67, 8, 1, 0))
            {
              RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v67);
              LOBYTE(Shape) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v67);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v67);
              mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v67);
            }
            else
            {
              RawStringData = 0;
            }
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v67, 8, 1, 0))
            {
              v39 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v67);
              isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v67);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v67);
              NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v67);
              v20 = NumElements;
              LODWORD(v70) = 0;
              if (NumElements <= HIDWORD(v70))
              {
                v42 = 0;
                v66 = RawStringData == v39 && isSplat == Shape;
                v44 = v66;
                if (v66 && !NumElements)
                {
LABEL_46:
                  LODWORD(v70) = v42 + v20;
                  goto LABEL_47;
                }
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, NumElements, 8);
                v42 = v70;
                v43 = RawStringData == v39 && isSplat == Shape;
                v44 = v43;
              }
            }
            else
            {
              v44 = 0;
              v42 = 0;
            }
            v45 = 0;
            v46 = (char *)v69 + 8 * v42;
            do
            {
              if ((_BYTE)Shape)
                v47 = 0;
              else
                v47 = v45;
              *(_QWORD *)&v46[8 * v45] = *(_QWORD *)(RawStringData + 8 * v47);
              v43 = v20 - 1 == v45++;
              if (v43)
                v48 = v44;
              else
                v48 = 0;
            }
            while (v48 != 1);
            goto LABEL_46;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, (uint64_t)(8 * v18) >> 3, 8);
          v22 = v70;
          if (!v20)
            goto LABEL_17;
        }
        memcpy((char *)v69 + 8 * v22, Shape, v21);
        v22 = v70;
        goto LABEL_17;
      }
    }
  }
  v23 = mlir::Float32Type::get(this, a2);
  v24 = mlir::UnrankedTensorType::get(v23);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::placement::MemrefToTensor::build(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  mlir::UnknownLoc *v13;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  mlir::MLIRContext *v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24[2];
  void *__src;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  mlir::OperationState::addOperands(a2, (uint64_t)a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v27;
  v26 = 0x200000000;
  v13 = *a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::placement::MemrefToTensor::inferReturnTypes(v13, v16, v17, a3, a4, Dictionary, v18, v19, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v20 = __src;
  v21 = v26;
  v22 = *(unsigned int *)(a2 + 72);
  v23 = v22 + v26;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v21)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v27)
    free(__src);
}

BOOL mlir::placement::MemrefToTensor::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  const void **v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  uint64_t NumNeededNEs;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 16 * v4;
    do
    {
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      v11 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == NumNeededNEs)
      {
        v6 = (const void **)*((_QWORD *)Value + 1);
      }
      else
      {
        v12 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
        v11 = *this;
        if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v12)
        {
          v7 = *((_QWORD *)Value + 1);
        }
        else
        {
          v13 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
          v11 = *this;
          if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == v13)
            v8 = (const void **)*((_QWORD *)Value + 1);
        }
      }
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v11 = *this;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(v11, v8, (const void **)"shape", 5)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v7, (const void **)"resultElementType", (const void **)0x11)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, v6, (const void **)"interleave", (const void **)0xA)|| !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7,
                           0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v14 = (uint64_t)(*this - 2);
  else
    v14 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(uint64_t *a1, const void **a2, const void **a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void **v34;
  _QWORD v35[2];
  uint64_t OperandRange;
  const void **v37;
  uint64_t v38;
  __int16 v39;
  _QWORD *v40;
  _QWORD v41[24];

  v41[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  if (!mlir::DenseIntElementsAttr::classof((uint64_t)a2))
    goto LABEL_25;
  v8 = *a2;
  v9 = mlir::TypeID::get<mlir::ElementsAttr>();
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
    goto LABEL_11;
  v11 = (_QWORD *)v8[1];
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_11:
    v17 = 0;
  v37 = a2;
  v38 = v17;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v37);
  v19 = Type;
  if (!Type)
    goto LABEL_21;
  v20 = *Type;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *(unsigned int *)(v20 + 16);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = *(_QWORD **)(v20 + 8);
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_21:
    v29 = 0;
  v40 = v19;
  v41[0] = v29;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v40);
  if (v30 == 1)
  {
    v34 = a2;
    v35[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34);
    v35[1] = v31;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      return 1;
  }
LABEL_25:
  v39 = 257;
  mlir::Operation::emitOpError(a1, &v37, (uint64_t)&v40);
  if (v40)
  {
    mlir::Diagnostic::operator<<((uint64_t)v41, "attribute '");
    if (v40)
    {
      v39 = 261;
      v37 = a3;
      v38 = a4;
      mlir::Diagnostic::operator<<((uint64_t)v41, &v37);
      if (v40)
        mlir::Diagnostic::operator<<((uint64_t)v41, "' failed to satisfy constraint: ui64 elements attribute of rank 1");
    }
  }
  v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v40);
  if (v40)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v41);
  return v32;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6;
  const void **v8[4];
  __int16 v9;
  uint64_t v10;
  _QWORD v11[24];

  v11[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    v10 = a2;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v10);
    return 1;
  }
  v9 = 257;
  mlir::Operation::emitOpError(a1, v8, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, "attribute '");
    if (v10)
    {
      v9 = 261;
      v8[0] = a3;
      v8[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v11, v8);
      if (v10)
        mlir::Diagnostic::operator<<((uint64_t)v11, "' failed to satisfy constraint: any type attribute");
    }
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v6;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(uint64_t *a1, const void **a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t Value;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  if (*((_UNKNOWN **)*a2 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32))
      return 1;
  }
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&Value);
  if (Value)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (Value)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (Value)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: 32-bit unsigned integer attribute");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v27;
  char *v28;
  const void **v29[4];
  __int16 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD v39[20];

  v39[19] = *MEMORY[0x24BDAC8D0];
  v31 = a2;
  v9 = *(_QWORD *)a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    goto LABEL_13;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = *(_QWORD **)(v9 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v34 = a2;
  v35[0] = v19;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v34);
  if (mlir::isStrided(a2))
    return 1;
LABEL_13:
  v30 = 261;
  v29[0] = a3;
  v29[1] = a4;
  mlir::Operation::emitOpError(a1, v29, (uint64_t)&v34);
  if (v34)
  {
    mlir::Diagnostic::operator<<((uint64_t)v35, " #");
    if (v34)
    {
      v32 = 5;
      v33 = a5;
      v21 = &v32;
      v22 = v36;
      if (v37 >= v38)
      {
        v27 = v37 + 1;
        if (v36 <= (unint64_t)&v32 && v36 + 24 * v37 > (unint64_t)&v32)
        {
          v28 = (char *)&v32 - v36;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v27, 24);
          v22 = v36;
          v21 = (int *)&v28[v36];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v27, 24);
          v21 = &v32;
          v22 = v36;
        }
      }
      v23 = v22 + 24 * v37;
      v24 = *(_OWORD *)v21;
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v23 = v24;
      ++v37;
      if (v34)
        mlir::Diagnostic::operator<<((uint64_t)v35, " must be strided memref of any type values, but got ");
    }
  }
  v25 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v34, &v31);
  v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
  if (v34)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v35);
  return v20;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v5;
  void *v6;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v26;
  char *v27;
  const void **v28[4];
  __int16 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD v38[20];

  v38[19] = *MEMORY[0x24BDAC8D0];
  v30 = a2;
  v5 = *(_QWORD *)a2;
  v6 = *(void **)(*(_QWORD *)a2 + 136);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *(unsigned int *)(v5 + 16);
    if (!(_DWORD)v10)
      goto LABEL_14;
    v11 = *(_QWORD **)(v5 + 8);
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      v17 = v11[1];
    else
LABEL_14:
      v17 = 0;
    v33 = a2;
    v34[0] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v33);
    return 1;
  }
  else
  {
    v29 = 261;
    v28[0] = a3;
    v28[1] = a4;
    mlir::Operation::emitOpError(a1, v28, (uint64_t)&v33);
    if (v33)
    {
      mlir::Diagnostic::operator<<((uint64_t)v34, " #");
      if (v33)
      {
        v31 = 5;
        v32 = a5;
        v20 = &v31;
        v21 = v35;
        if (v36 >= v37)
        {
          v26 = v36 + 1;
          if (v35 <= (unint64_t)&v31 && v35 + 24 * v36 > (unint64_t)&v31)
          {
            v27 = (char *)&v31 - v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v21 = v35;
            v20 = (int *)&v27[v35];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v20 = &v31;
            v21 = v35;
          }
        }
        v22 = v21 + 24 * v36;
        v23 = *(_OWORD *)v20;
        *(_QWORD *)(v22 + 16) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v22 = v23;
        ++v36;
        if (v33)
          mlir::Diagnostic::operator<<((uint64_t)v34, " must be tensor of any type values, but got ");
      }
    }
    v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v33, &v30);
    v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
    if (v33)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v34);
  }
  return v18;
}

mlir::Operation *mlir::placement::MemrefToTensor::verify(mlir::Operation **this)
{
  char isSplat;
  mlir::Operation *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *Shape;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t NumElements;
  unint64_t isValidIntOrFloat;
  uint64_t RawStringData;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *p_ShapeAttr;
  uint64_t v24;
  char v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  const void ***v58;
  uint64_t v59;
  __int128 v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  const void ***v66;
  uint64_t v67;
  __int128 v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  BOOL v72;
  char *v73;
  char *v74;
  const void **v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78[2];
  mlir::Operation *v79;
  uint64_t v80;
  _BOOL8 v81;
  void *InterleaveAttr;
  uint64_t v83;
  _BYTE v84[16];
  __int16 v85;
  uint64_t ShapeAttr;
  _QWORD v87[2];
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  _QWORD v91[20];

  v91[19] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  v79 = v2;
  v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v78[0] = (uint64_t)v3;
  v78[1] = v4;
  if (!mlir::placement::MemrefToTensor::getShapeAttr(&v79)
    || !v3
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v78))
  {
    goto LABEL_23;
  }
  Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  if (v6)
  {
    v7 = 8 * v6;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v7 -= 8;
      if (!v7)
        goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_8:
  v8 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  NumElements = mlir::ShapedType::getNumElements(v8, v9);
  ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v79);
  v87[0] = ShapeAttr != 0;
  isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&ShapeAttr, 8, 1, 0);
  if ((isValidIntOrFloat & 1) == 0)
  {
    RawStringData = 0;
    if (isValidIntOrFloat < 2)
      goto LABEL_11;
LABEL_13:
    v15 = 0;
    v13 = isValidIntOrFloat & 0xFFFFFFFFFFFFFFFELL;
    v16 = 1;
    v17 = 1;
    do
    {
      if (isSplat)
        v18 = 0;
      else
        v18 = v15;
      if (isSplat)
        v19 = 0;
      else
        v19 = v15 + 1;
      v16 *= *(_QWORD *)(RawStringData + 8 * v18);
      v17 *= *(_QWORD *)(RawStringData + 8 * v19);
      v15 += 2;
    }
    while (v15 != v13);
    v14 = v17 * v16;
    goto LABEL_91;
  }
  RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&ShapeAttr);
  isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ShapeAttr);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ShapeAttr);
  isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&ShapeAttr);
  if (!isValidIntOrFloat)
  {
    v14 = 1;
    goto LABEL_92;
  }
  if (isValidIntOrFloat >= 2)
    goto LABEL_13;
LABEL_11:
  v13 = 0;
  v14 = 1;
  do
  {
    if (isSplat)
      v52 = 0;
    else
      v52 = v13;
    v14 *= *(_QWORD *)(RawStringData + 8 * v52);
    ++v13;
LABEL_91:
    ;
  }
  while (isValidIntOrFloat != v13);
LABEL_92:
  if (NumElements != v14)
  {
    v85 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, (const void ***)&InterleaveAttr, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v87, "Input shape ");
    v53 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&ShapeAttr, v78);
    v54 = (uint64_t)v53;
    if (*v53)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v53 + 1), " (");
      if (*(_QWORD *)v54)
      {
        v55 = v54 + 24;
        v56 = *(_QWORD *)(v54 + 24);
        LODWORD(v75) = 5;
        v76 = NumElements;
        v57 = *(unsigned int *)(v54 + 32);
        v58 = &v75;
        if (v57 >= *(_DWORD *)(v54 + 36))
        {
          v69 = v57 + 1;
          v70 = v56 + 24 * v57 > (unint64_t)&v75;
          if (v56 <= (unint64_t)&v75 && v70)
          {
            v73 = (char *)&v75 - v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v54 + 40), v69, 24);
            v56 = *(_QWORD *)(v54 + 24);
            v58 = (const void ***)&v73[v56];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v55, (void *)(v54 + 40), v69, 24);
            v56 = *(_QWORD *)(v54 + 24);
            v58 = &v75;
          }
        }
        v59 = v56 + 24 * *(unsigned int *)(v54 + 32);
        v60 = *(_OWORD *)v58;
        *(_QWORD *)(v59 + 16) = v58[2];
        *(_OWORD *)v59 = v60;
        ++*(_DWORD *)(v54 + 32);
        if (*(_QWORD *)v54)
          mlir::Diagnostic::operator<<(v54 + 8, " elements) is not compatible with shape attribute ");
      }
    }
    v80 = mlir::placement::MemrefToTensor::getShapeAttr(&v79);
    v81 = v80 != 0;
    v61 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Attribute>(v54, &v80);
    v62 = (uint64_t)v61;
    if (*v61)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v61 + 1), " (");
      if (*(_QWORD *)v62)
      {
        v63 = v62 + 24;
        v64 = *(_QWORD *)(v62 + 24);
        LODWORD(v75) = 2;
        v76 = v14;
        v65 = *(unsigned int *)(v62 + 32);
        v66 = &v75;
        if (v65 >= *(_DWORD *)(v62 + 36))
        {
          v71 = v65 + 1;
          v72 = v64 + 24 * v65 > (unint64_t)&v75;
          if (v64 <= (unint64_t)&v75 && v72)
          {
            v74 = (char *)&v75 - v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v63, (void *)(v62 + 40), v71, 24);
            v64 = *(_QWORD *)(v62 + 24);
            v66 = (const void ***)&v74[v64];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v63, (void *)(v62 + 40), v71, 24);
            v64 = *(_QWORD *)(v62 + 24);
            v66 = &v75;
          }
        }
        v67 = v64 + 24 * *(unsigned int *)(v62 + 32);
        v68 = *(_OWORD *)v66;
        *(_QWORD *)(v67 + 16) = v66[2];
        *(_OWORD *)v67 = v68;
        ++*(_DWORD *)(v62 + 32);
        if (*(_QWORD *)v62)
          mlir::Diagnostic::operator<<(v62 + 8, " elements)");
      }
    }
    v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult(v62);
    if (ShapeAttr)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    return v2;
  }
LABEL_23:
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(&v79)
    || !v78[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v78))
  {
    return (mlir::Operation *)1;
  }
  v20 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  if (v21)
  {
    v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22)
        goto LABEL_30;
    }
    return (mlir::Operation *)1;
  }
LABEL_30:
  InterleaveAttr = (void *)mlir::placement::MemrefToTensor::getInterleaveAttr(&v79);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue(&InterleaveAttr, (llvm::APInt *)&ShapeAttr);
    if (LODWORD(v87[0]) >= 0x41)
      p_ShapeAttr = (uint64_t *)ShapeAttr;
    else
      p_ShapeAttr = &ShapeAttr;
    v24 = *(unsigned int *)p_ShapeAttr;
    if (LODWORD(v87[0]) >= 0x41 && ShapeAttr)
      MEMORY[0x20BD002D4]();
  }
  else
  {
    v24 = 0;
  }
  mlir::getANENextSupportedInterleaveValue(v24);
  if (!v25)
  {
    v85 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, (const void ***)&InterleaveAttr, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v87, "interleave factor not supported");
    v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ShapeAttr);
    if (ShapeAttr)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    return v2;
  }
  InterleaveAttr = v84;
  v83 = 0x400000000;
  v26 = (_BYTE *)mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  v27 = mlir::ShapedType::getShape((mlir::ShapedType *)v78);
  v28 = 0;
  v30 = (_BYTE *)(v27 + 8 * v29);
  LODWORD(v83) = 0;
  v31 = (v30 - v26) >> 3;
  if (v31 > HIDWORD(v83))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v84, v31, 8);
    v28 = v83;
  }
  if (v30 != v26)
  {
    memcpy((char *)InterleaveAttr + 8 * v28, v26, v30 - v26);
    v28 = v83;
  }
  v32 = v28 + ((unint64_t)(v30 - v26) >> 3);
  LODWORD(v83) = v28 + ((unint64_t)(v30 - v26) >> 3);
  if ((unint64_t)(v32 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v77 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, &v75, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v87, "Interleave can only be applied on 4D or 5D tensor");
LABEL_70:
    v2 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ShapeAttr);
    if (ShapeAttr)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v87);
    v36 = 0;
    goto LABEL_73;
  }
  v75 = (const void **)mlir::placement::MemrefToTensor::getInterleaveAttr(&v79);
  if (v75)
  {
    mlir::IntegerAttr::getValue(&v75, (llvm::APInt *)&ShapeAttr);
    if (LODWORD(v87[0]) >= 0x41)
      v33 = (uint64_t *)ShapeAttr;
    else
      v33 = &ShapeAttr;
    v34 = *(unsigned int *)v33;
    if (LODWORD(v87[0]) >= 0x41 && ShapeAttr)
      MEMORY[0x20BD002D4](ShapeAttr);
  }
  else
  {
    v34 = 0;
  }
  v35 = (_DWORD)v32 == 4;
  v36 = 1;
  if (v35)
    v37 = 1;
  else
    v37 = 2;
  if (*((_QWORD *)InterleaveAttr + v37) % v34)
  {
    v77 = 257;
    mlir::Operation::emitOpError((uint64_t *)v2, &v75, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
    {
      mlir::Diagnostic::operator<<((uint64_t)v87, "channel ");
      if (ShapeAttr)
      {
        v38 = *((_QWORD *)InterleaveAttr + v37);
        LODWORD(v80) = 2;
        v81 = v38;
        v39 = &v80;
        v40 = v88;
        if (v89 >= v90)
        {
          v48 = v89 + 1;
          if (v88 <= (unint64_t)&v80 && v88 + 24 * v89 > (unint64_t)&v80)
          {
            v50 = (char *)&v80 - v88;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v48, 24);
            v40 = v88;
            v39 = (uint64_t *)&v50[v88];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v48, 24);
            v39 = &v80;
            v40 = v88;
          }
        }
        v41 = v40 + 24 * v89;
        v42 = *(_OWORD *)v39;
        *(_QWORD *)(v41 + 16) = v39[2];
        *(_OWORD *)v41 = v42;
        ++v89;
        if (ShapeAttr)
        {
          mlir::Diagnostic::operator<<((uint64_t)v87, " must be a multiple of interleave ");
          if (ShapeAttr)
          {
            LODWORD(v80) = 2;
            v81 = v34;
            v43 = &v80;
            v44 = v88;
            if (v89 >= v90)
            {
              v49 = v89 + 1;
              if (v88 <= (unint64_t)&v80 && v88 + 24 * v89 > (unint64_t)&v80)
              {
                v51 = (char *)&v80 - v88;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v49, 24);
                v44 = v88;
                v43 = (uint64_t *)&v51[v88];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v91, v49, 24);
                v43 = &v80;
                v44 = v88;
              }
            }
            v45 = v44 + 24 * v89;
            v46 = *(_OWORD *)v43;
            *(_QWORD *)(v45 + 16) = v43[2];
            *(_OWORD *)v45 = v46;
            ++v89;
          }
        }
      }
    }
    goto LABEL_70;
  }
LABEL_73:
  if (InterleaveAttr != v84)
    free(InterleaveAttr);
  if (v36)
    return (mlir::Operation *)1;
  return v2;
}

uint64_t mlir::placement::RegionCall::getCallee(mlir::Operation **this)
{
  uint64_t MaxValueAttr;
  uint64_t Value;

  MaxValueAttr = mlir::anec::ClampedRelu::getMaxValueAttr(this);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&MaxValueAttr);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
}

uint64_t mlir::placement::RegionCall::getRegionType(mlir::Operation **this)
{
  return *(unsigned int *)(mlir::anec::ClampedRelu::getMinValueAttr(this) + 8);
}

void mlir::placement::RegionCall::build(mlir::MLIRContext **a1, uint64_t a2, mlir::SymbolRefAttr *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t InterfaceFor;
  mlir::Operation *v13;
  const void *Results;
  mlir::Operation *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  mlir::StringAttr *Context;
  uint64_t v21;
  mlir::MLIRContext *v22;
  unsigned __int8 **AttributeUniquer;
  uint64_t v24;
  mlir::StringAttr *v25;
  uint64_t v26;
  uint64_t canMapOperands;
  const char *v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  if (a3)
    InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a3);
  else
    InterfaceFor = 0;
  v28 = (const char *)a3;
  v29 = InterfaceFor;
  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v28);
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands);
  v15 = v13;
  v16 = 8 * (_QWORD)v13;
  v17 = *(unsigned int *)(a2 + 72);
  v18 = v17 + ((8 * (uint64_t)v13) >> 3);
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v15)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v17), Results, v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + (v16 >> 3);
  v19 = mlir::SymbolRefAttr::get(a3, v13);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v30 = 261;
  v28 = "callee";
  v29 = 6;
  v21 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v28);
  ZinMirCacheTensors::ZinMirCacheTensors(&v31, v21, v19);
  mlir::NamedAttrList::push_back(a2 + 112, v31, v32);
  v22 = *a1;
  LODWORD(v31) = a4;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(v22);
  v28 = (const char *)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v29 = (uint64_t)v22;
  v24 = mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)&v28, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, (unsigned int *)&v31);
  v25 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v30 = 261;
  v28 = "region_type";
  v29 = 11;
  v26 = mlir::StringAttr::get(v25, (mlir::MLIRContext *)&v28);
  ZinMirCacheTensors::ZinMirCacheTensors(&v31, v26, v24);
  mlir::NamedAttrList::push_back(a2 + 112, v31, v32);
  mlir::OperationState::addOperands(a2, a5, a6);
}

void mlir::placement::RegionCall::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  mlir::OperationState::addOperands(a2, a7, a8);
  ZinMirCacheTensors::ZinMirCacheTensors(&v16, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a5);
  mlir::NamedAttrList::push_back(a2 + 112, v16, v17);
  ZinMirCacheTensors::ZinMirCacheTensors(&v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a6);
  mlir::NamedAttrList::push_back(a2 + 112, v16, v17);
  v13 = *(unsigned int *)(a2 + 72);
  if (a4 + v13 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v13, 8);
    v13 = *(unsigned int *)(a2 + 72);
  }
  if (a4)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a2 + 64) + 8 * v13;
    do
    {
      *(_QWORD *)(v15 + 8 * v14) = mlir::TypeRange::dereference_iterator(a3, v14);
      ++v14;
    }
    while (a4 != v14);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + a4;
}

uint64_t mlir::placement::RegionCall::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t NextResultAtOffset;
  const void **v21[4];
  __int16 v22;
  unint64_t AttrDictionary;
  _QWORD v24[24];

  v24[23] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
    {
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (v6)
    {
      v8 = *((_QWORD *)Value + 1);
      while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        Value = (MirInfoChannelAssignment *)((char *)Value + 16);
        v6 -= 16;
        if (!v6)
          goto LABEL_13;
      }
      v11 = *((_QWORD *)Value + 1);
      if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(*this, v8, (const void **)"callee", (const void **)6))
      {
        v12 = *this;
        if (!v11
          || *(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id)
        {
LABEL_29:
          if ((*((_BYTE *)v12 + 46) & 0x80) != 0 && (v14 = *((unsigned int *)v12 + 17), (_DWORD)v14))
          {
            v15 = 0;
            v16 = v12[9] + 24;
            while (mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(*this, (const void **)(*(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", (const void **)7, v15))
            {
              ++v15;
              v16 += 32;
              if (v14 == v15)
              {
                v12 = *this;
                goto LABEL_35;
              }
            }
          }
          else
          {
LABEL_35:
            v17 = *((unsigned int *)v12 + 9);
            if (*((_DWORD *)v12 + 9))
              v18 = (uint64_t)(v12 - 2);
            else
              v18 = 0;
            if (!(_DWORD)v17)
              return 1;
            v19 = 0;
            v9 = 1;
            while (1)
            {
              NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, v19);
              if (!mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(*this, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", (const void **)6, v19))break;
              if (v17 == ++v19)
                return v9;
            }
          }
          return 0;
        }
        v22 = 257;
        mlir::Operation::emitOpError(v12, v21, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v24, "attribute '");
          if (AttrDictionary)
          {
            v22 = 261;
            v21[0] = (const void **)"region_type";
            v21[1] = (const void **)11;
            mlir::Diagnostic::operator<<((uint64_t)v24, v21);
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v24, "' failed to satisfy constraint: Available region types");
          }
        }
        v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
        if (v13)
        {
          v12 = *this;
          goto LABEL_29;
        }
      }
      return 0;
    }
LABEL_13:
    v7 = "requires attribute 'region_type'";
  }
  else
  {
LABEL_8:
    v7 = "requires attribute 'callee'";
  }
  v21[0] = (const void **)v7;
  v22 = 259;
  mlir::OpState::emitOpError(this, v21, (uint64_t)&AttrDictionary);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
  return v9;
}

uint64_t mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v13[4];
  __int16 v14;
  uint64_t v15;
  _QWORD v16[24];

  v16[23] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  v7 = *(void **)(*(_QWORD *)a2 + 136);
  v8 = v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  v9 = v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id ? a2 : 0;
  v15 = v9;
  if (v8)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v15);
    if (!v10)
      return 1;
  }
  v14 = 257;
  mlir::Operation::emitOpError(a1, v13, (uint64_t)&v15);
  if (v15)
  {
    mlir::Diagnostic::operator<<((uint64_t)v16, "attribute '");
    if (v15)
    {
      v14 = 261;
      v13[0] = a3;
      v13[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v16, v13);
      if (v15)
        mlir::Diagnostic::operator<<((uint64_t)v16, "' failed to satisfy constraint: flat symbol reference attribute");
    }
  }
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v15);
  if (v15)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
  return v11;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps4(uint64_t *a1, const void **a2, const void **a3, const void **a4, unsigned int a5)
{
  _QWORD *v6;
  void *v7;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  const void **v17;
  const void ***v18;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v35;
  char *v36;
  const void **v37[4];
  __int16 v38;
  const void **v39;
  int v40;
  uint64_t v41;
  const void **v42;
  _BYTE v43[16];
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD v47[20];

  v47[19] = *MEMORY[0x24BDAC8D0];
  v39 = a2;
  v6 = *a2;
  v7 = (void *)*((_QWORD *)*a2 + 17);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *((unsigned int *)v6 + 4);
    if (!(_DWORD)v10)
      goto LABEL_14;
    v11 = (_QWORD *)v6[1];
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      v17 = (const void **)v11[1];
    else
LABEL_14:
      v17 = 0;
    v42 = a2;
    v18 = &v42;
    goto LABEL_36;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    v26 = mlir::TypeID::get<mlir::ShapedType>();
    v27 = *((unsigned int *)v6 + 4);
    if (!(_DWORD)v27)
      goto LABEL_34;
    v28 = (_QWORD *)v6[1];
    v29 = &v28[2 * v27];
    do
    {
      v30 = v27 >> 1;
      v31 = &v28[2 * (v27 >> 1)];
      v33 = *v31;
      v32 = v31 + 2;
      v27 += ~(v27 >> 1);
      if (v33 < v26)
        v28 = v32;
      else
        v27 = v30;
    }
    while (v27);
    if (v28 != v29 && *v28 == v26)
      v17 = (const void **)v28[1];
    else
LABEL_34:
      v17 = 0;
    v37[0] = a2;
    v18 = v37;
LABEL_36:
    v18[1] = v17;
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v18);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    return 1;
  v38 = 261;
  v37[0] = a3;
  v37[1] = a4;
  mlir::Operation::emitOpError(a1, v37, (uint64_t)&v42);
  if (v42)
  {
    mlir::Diagnostic::operator<<((uint64_t)v43, " #");
    if (v42)
    {
      v40 = 5;
      v41 = a5;
      v20 = &v40;
      v21 = v44;
      if (v45 >= v46)
      {
        v35 = v45 + 1;
        if (v44 <= (unint64_t)&v40 && v44 + 24 * v45 > (unint64_t)&v40)
        {
          v36 = (char *)&v40 - v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          v21 = v44;
          v20 = (int *)&v36[v44];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v35, 24);
          v20 = &v40;
          v21 = v44;
        }
      }
      v22 = v21 + 24 * v45;
      v23 = *(_OWORD *)v20;
      *(_QWORD *)(v22 + 16) = *((_QWORD *)v20 + 2);
      *(_OWORD *)v22 = v23;
      ++v45;
      if (v42)
        mlir::Diagnostic::operator<<((uint64_t)v43, " must be variadic of tensor of any type values or memref of any type values or index, but got ");
    }
  }
  v24 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v42, (uint64_t *)&v39);
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v24);
  if (v42)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v42);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v43);
  return v25;
}

uint64_t mlir::placement::ReplacedOps::getResAttrsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  MirInfoChannelAssignment *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  MirInfoChannelAssignment *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (MirInfoChannelAssignment *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (MirInfoChannelAssignment *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

void mlir::placement::ReplacedOps::build(uint64_t a1, mlir::Attribute *a2, void *a3, uint64_t a4, mlir::SymbolRefAttr *a5, mlir::Operation **a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  mlir::MLIRContext *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t StringAttr;
  mlir::StringAttr *Context;
  uint64_t v24;
  mlir::Operation *v25;
  uint64_t v26;
  mlir::StringAttr *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t Loc;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  mlir::Operation *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v47;
  uint64_t *v48;
  BOOL v49;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _WORD v55[24];
  const char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  llvm *v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65[2];
  _BYTE *v66;
  uint64_t v67;
  _BYTE v68[32];
  unint64_t v69[2];
  unint64_t v70[2];
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v71 = (const char *)a9;
  v72 = a10;
  v18 = *(mlir::MLIRContext **)a1;
  mlir::TypeRange::TypeRange(v70, a9, a10);
  mlir::TypeRange::TypeRange(v69, a11, a12);
  v19 = mlir::FunctionType::get(v18, v70[0], v70[1], v69[0], v69[1]);
  v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 96) + 8);
  v21 = mlir::TypeAttr::get(v19);
  ZinMirCacheTensors::ZinMirCacheTensors(&v56, v20, v21);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v56, v57);
  v55[8] = 261;
  v53 = a3;
  v54 = a4;
  StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)a1, (mlir::MLIRContext *)&v53);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  LOWORD(v60) = 261;
  v56 = "sym_name";
  v57 = 8;
  v24 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v56);
  ZinMirCacheTensors::ZinMirCacheTensors(&v66, v24, StringAttr);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v66, v67);
  v26 = mlir::SymbolRefAttr::get(a5, v25);
  v27 = (mlir::StringAttr *)mlir::Attribute::getContext(a2);
  LOWORD(v60) = 261;
  v56 = "replaced_by";
  v57 = 11;
  v28 = mlir::StringAttr::get(v27, (mlir::MLIRContext *)&v56);
  ZinMirCacheTensors::ZinMirCacheTensors(&v53, v28, v26);
  mlir::NamedAttrList::push_back((uint64_t)a2 + 112, (uint64_t)v53, v54);
  v29 = (uint64_t *)mlir::OperationState::addRegion(a2);
  v30 = operator new();
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_QWORD *)(v30 + 32) = v30 + 32;
  *(_QWORD *)(v30 + 40) = v30 + 32;
  *(_QWORD *)(v30 + 56) = 0;
  *(_QWORD *)(v30 + 64) = 0;
  *(_QWORD *)(v30 + 48) = 0;
  v66 = v68;
  v67 = 0x400000000;
  v32 = (uint64_t)v71;
  v31 = v72;
  v56 = v71;
  v57 = 0;
  if (v72)
  {
    v33 = 0;
    do
    {
      v53 = (void *)mlir::ValueRange::dereference_iterator(&v56, v33);
      Loc = mlir::Value::getLoc((mlir::Value *)&v53);
      v35 = v67;
      if (v67 >= (unint64_t)HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
        v35 = v67;
      }
      *(_QWORD *)&v66[8 * v35] = Loc;
      LODWORD(v67) = v67 + 1;
      v33 = ++v57;
    }
    while (v56 != (const char *)v32 || v33 != v31);
  }
  mlir::TypeRange::TypeRange(v65, v32, v31);
  mlir::Block::addArguments((_QWORD *)v30, v65[0], v65[1], (uint64_t)v66, v67);
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v29, v30);
  v37 = *v29;
  *(_QWORD *)(v30 + 8) = *v29;
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v37 + 8) = v30 + 8;
  *v29 = v30 + 8;
  v38 = *(_QWORD *)(v30 + 40);
  v39 = *(void **)(v30 + 48);
  *(_QWORD *)(a1 + 16) = v30;
  *(_QWORD *)(a1 + 24) = v38;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v40 = (uint64_t)(*(_QWORD *)(v30 + 56) - (_QWORD)v39) >> 3;
  v53 = v39;
  v54 = v40;
  mlir::IRMapping::map<mlir::ValueRange &,llvm::MutableArrayRef<mlir::BlockArgument>,(void *)0>((uint64_t)&v56, (uint64_t *)&v71, (uint64_t **)&v53);
  if (a7)
  {
    v41 = 8 * a7;
    do
    {
      v42 = *a6++;
      mlir::OpBuilder::clone((uint64_t **)a1, v42, (mlir::IRMapping *)&v56);
      v41 -= 8;
    }
    while (v41);
  }
  v53 = v55;
  v54 = 0x600000000;
  if (a12 < 7)
  {
    v43 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, a12, 8);
    v43 = v54;
  }
  v73 = a11;
  v74 = 0;
  v75 = (uint64_t *)&v56;
  v76 = 1;
  if (a12)
  {
    v44 = 0;
    v45 = (uint64_t *)((char *)v53 + 8 * v43);
    do
    {
      v47 = mlir::ValueRange::dereference_iterator(&v73, v44);
      v48 = v75;
      v51 = v47;
      v52 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v75, (unint64_t *)&v51, &v52))v49 = v52 == *v48 + 16 * *((unsigned int *)v48 + 4);
      else
        v49 = 1;
      if (!v49)
        v47 = *(_QWORD *)(v52 + 8);
      *v45++ = v47;
      v44 = ++v74;
    }
    while (v73 != a11 || v44 != a12);
    v43 = v54;
  }
  LODWORD(v54) = v43 + a12;
  mlir::OpBuilder::create<mlir::placement::ReplacedOpsLiveOuts,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)a1, *(_QWORD *)a2, (uint64_t)&v53);
  if (v53 != v55)
    free(v53);
  llvm::deallocate_buffer(v62, (void *)(16 * v64));
}

void sub_2074794AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,llvm *a27,uint64_t a28,unsigned int a29)
{
  llvm::deallocate_buffer(a27, (void *)(16 * a29));
}

void sub_2074794C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,llvm *a24,uint64_t a25,unsigned int a26)
{
  llvm::deallocate_buffer(a24, (void *)(16 * a26));
}

void sub_2074794D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  __int128 v64;
  void *v65;
  void *v66;

  if ((_QWORD)v64)
  {
    *(_OWORD *)v63 = v64;
  }
  else
  {
    *(_QWORD *)v63 = 0;
    *(_QWORD *)(v63 + 8) = 0;
  }
  if (v66 != v65)
    free(v66);
}

uint64_t mlir::IRMapping::map<mlir::ValueRange &,llvm::MutableArrayRef<mlir::BlockArgument>,(void *)0>(uint64_t result, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  v19 = *a2;
  v20 = 0;
  v5 = *a3;
  v6 = a3[1];
  v21 = *a3;
  if (v4)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = (uint64_t *)result;
    v9 = 0;
    v10 = &v5[(_QWORD)v6];
    do
    {
      v14 = mlir::ValueRange::dereference_iterator(&v19, v9);
      v15 = *v21;
      v17 = v14;
      v18 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v8, (unint64_t *)&v17, &v18);
      v16 = v18;
      if ((result & 1) == 0)
      {
        result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v8, (uint64_t)&v17, (unint64_t *)&v17, v18);
        v16 = (_QWORD *)result;
        *(_QWORD *)result = v17;
        *(_QWORD *)(result + 8) = 0;
      }
      v16[1] = v15;
      v9 = v20 + 1;
      v11 = v21 + 1;
      v20 = v9;
      ++v21;
    }
    while ((v9 != v4 || v19 != v3) && v11 != v10);
  }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::placement::ReplacedOpsLiveOuts,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  ZinIrHalH13g *v9;
  ZinIrHalH13g *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x24BDAC8D0];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.live_outs", (const unsigned __int8 *)0x13, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"placement.live_outs";
    v15[3] = 19;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::ReplacedOpsLiveOuts,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

BOOL mlir::placement::ReplacedOps::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void **v10;
  MirInfoChannelAssignment *v11;
  uint64_t NumNeededNEs;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t *v19;
  char v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const void ***v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char *v32;
  _QWORD v33[4];
  __int16 v34;
  const void **v35[4];
  __int16 v36;
  const void **v37[4];
  __int16 v38;
  unint64_t AttrDictionary;
  _BYTE v40[16];
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD v44[20];

  v44[19] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    v8 = "requires attribute 'function_type'";
LABEL_16:
    v37[0] = (const void **)v8;
    v38 = 259;
    mlir::OpState::emitOpError(this, v37, (uint64_t)&AttrDictionary);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
    return v14;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != MirInfoChannelAssignment::GetNumNeededNEs(Value))
  {
    if (**(_QWORD **)((*this)[6] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      v6 = *((_QWORD *)Value + 1);
    Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    v7 -= 16;
    if (!v7)
      goto LABEL_10;
  }
  if (!v7)
  {
LABEL_15:
    v8 = "requires attribute 'replaced_by'";
    goto LABEL_16;
  }
  v9 = 0;
  v10 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    v11 = (MirInfoChannelAssignment *)((char *)Value + v9);
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)((char *)Value + v9));
    v13 = *this;
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == NumNeededNEs)
      break;
    v9 += 16;
    if (v7 == v9)
      goto LABEL_15;
  }
  v16 = *((_QWORD *)v11 + 1);
  v17 = 0;
  for (i = v7 - v9; i; i -= 16)
  {
    v29 = MirInfoChannelAssignment::GetNumNeededNEs(v11);
    v13 = *this;
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) == v29)
      v17 = *((_QWORD *)v11 + 1);
    v11 = (MirInfoChannelAssignment *)((char *)v11 + 16);
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(v13, v16, (const void **)"replaced_by", (const void **)0xB))return 0;
  if (v10)
  {
    v19 = *this;
    if (*((_UNKNOWN **)*v10 + 17) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
      || (AttrDictionary = (unint64_t)v10,
          *(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&AttrDictionary) + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
      || (v37[0] = v10,
          *(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v37) + 136) != &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id))
    {
      v38 = 257;
      mlir::Operation::emitOpError(v19, v37, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v40, "attribute '");
        if (AttrDictionary)
        {
          v38 = 261;
          v37[0] = (const void **)"function_type";
          v37[1] = (const void **)13;
          mlir::Diagnostic::operator<<((uint64_t)v40, v37);
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v40, "' failed to satisfy constraint: type attribute of function type");
        }
      }
      v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
      if (!v20)
        return 0;
    }
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v6, (const void **)"arg_attrs", (const void **)9)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v17, (const void **)"res_attrs", (const void **)9))
  {
    return 0;
  }
  v21 = *this;
  v22 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
        + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)*this + 10);
  v23 = *(_QWORD *)(v22 + 8);
  if (v23 != v22 && *(_QWORD *)(v23 + 8) == v22)
    return 1;
  v37[0] = (const void **)"region #";
  v38 = 259;
  mlir::Operation::emitOpError(v21, v37, (uint64_t)&AttrDictionary);
  if (AttrDictionary)
  {
    LODWORD(v35[0]) = 5;
    v35[1] = 0;
    v24 = v35;
    v25 = v41;
    if (v42 >= v43)
    {
      v31 = v42 + 1;
      if (v41 <= (unint64_t)v35 && v41 + 24 * v42 > (unint64_t)v35)
      {
        v32 = (char *)v35 - v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v25 = v41;
        v24 = (const void ***)&v32[v41];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v24 = v35;
        v25 = v41;
      }
    }
    v26 = v25 + 24 * v42;
    v27 = *(_OWORD *)v24;
    *(_QWORD *)(v26 + 16) = v24[2];
    *(_OWORD *)v26 = v27;
    ++v42;
    v28 = AttrDictionary == 0;
  }
  else
  {
    v28 = 1;
  }
  v34 = 1283;
  v33[0] = " ('";
  v33[2] = "body";
  v33[3] = 4;
  v35[0] = (const void **)v33;
  v35[2] = (const void **)"') ";
  v36 = 770;
  if (!v28)
  {
    mlir::Diagnostic::operator<<((uint64_t)v40, v35);
    if (AttrDictionary)
      mlir::Diagnostic::operator<<((uint64_t)v40, "failed to verify constraint: region with 1 blocks");
  }
  v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v40);
  return v30 != 0;
}

BOOL mlir::placement::ReplacedOpsLiveOuts::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v7[2];
  uint64_t v8;
  void *v9[2];
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  v7[0] = &v8;
  v7[1] = (void *)0x100000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = (*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, v9, 0, 1, 0xFFFFFFFFLL)&& ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1), (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))&& (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v7)&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v9, (uint64_t)v7, v4, a2 + 16) != 0;
  if (v7[0] != &v8)
    free(v7[0]);
  if (v9[0] != v10)
    free(v9[0]);
  return v5;
}

void mlir::placement::ReplacedOpsLiveOuts::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  mlir::Operation *v12;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  mlir::Operation *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  uint64_t v34;
  BOOL v36;
  uint64_t *v37;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40[2];
  unint64_t AttrDictionary;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[5];

  v47[4] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v7 = *((unsigned int *)v6 + 17);
    v8 = *((_QWORD *)v6 + 9);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = (*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  if (v7)
  {
    v10 = (llvm::raw_ostream *)v9;
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(v8 + 24));
    v11 = v7 - 1;
    if (v11)
    {
      v37 = (uint64_t *)(v8 + 56);
      do
      {
        v39 = (_WORD *)*((_QWORD *)v10 + 4);
        if (*((_QWORD *)v10 + 3) - (_QWORD)v39 > 1uLL)
        {
          *v39 = 8236;
          *((_QWORD *)v10 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v10, ", ", 2uLL);
        }
        v38 = *v37;
        v37 += 4;
        (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 160))(a2, v38);
        --v11;
      }
      while (v11);
    }
  }
  v45 = v47;
  v46 = 0x200000000;
  v12 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v12);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v15, v45, v46);
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, ":", 1uLL);
  }
  else
  {
    *v19 = 58;
    ++*((_QWORD *)v18 + 4);
  }
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 32;
  }
  v22 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v23 = *((unsigned int *)v22 + 17);
    v24 = *((_QWORD *)v22 + 9);
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  v40[0] = v24;
  v40[1] = v23;
  mlir::OperandRange::getTypes(v40, (uint64_t *)&AttrDictionary);
  v26 = AttrDictionary;
  v25 = v42;
  v27 = v43;
  v28 = v44;
  if (AttrDictionary != v43 || v42 != v44)
  {
    v29 = AttrDictionary + 32 * v42;
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v26 != v27 || v25 + 1 != v28)
    {
      v30 = v28 - v25 - 2;
      v31 = (uint64_t *)(v29 + 56);
      do
      {
        v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v33 = (_WORD *)*((_QWORD *)v32 + 4);
        if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 1uLL)
        {
          *v33 = 8236;
          *((_QWORD *)v32 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v32, ", ", 2uLL);
        }
        v34 = *v31;
        v31 += 4;
        (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, *(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF8);
        v36 = v30-- != 0;
      }
      while (v26 != v27 || v36);
    }
  }
  if (v45 != v47)
    free(v45);
}

void mlir::placement::StartTimer::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7[2];

  ZinMirCacheTensors::ZinMirCacheTensors(v7, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, v7[0], v7[1]);
  v6 = *(unsigned int *)(a2 + 72);
  if (v6 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v6) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::placement::StartTimer::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x24BDAC8D0];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps3(*this, Value[1], (const void **)"replaced_ops_ref", (const void **)0x10))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'replaced_ops_ref'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  char *v14;
  const void **v15[4];
  __int16 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[20];

  v25[19] = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id)
    return 1;
  v16 = 261;
  v15[0] = a3;
  v15[1] = a4;
  mlir::Operation::emitOpError(a1, v15, (uint64_t)&v20);
  if (v20)
  {
    mlir::Diagnostic::operator<<((uint64_t)v21, " #");
    if (v20)
    {
      v18 = 5;
      v19 = a5;
      v6 = &v18;
      v7 = v22;
      if (v23 >= v24)
      {
        v13 = v23 + 1;
        if (v22 <= (unint64_t)&v18 && v22 + 24 * v23 > (unint64_t)&v18)
        {
          v14 = (char *)&v18 - v22;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v13, 24);
          v7 = v22;
          v6 = (int *)&v14[v22];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v25, v13, 24);
          v6 = &v18;
          v7 = v22;
        }
      }
      v8 = v7 + 24 * v23;
      v9 = *(_OWORD *)v6;
      *(_QWORD *)(v8 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v8 = v9;
      ++v23;
      if (v20)
        mlir::Diagnostic::operator<<((uint64_t)v21, " must be , but got ");
    }
  }
  v10 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v20, &v17);
  v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v10);
  if (v20)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
  return v11;
}

uint64_t mlir::placement::TensorToMemrefAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  MirInfoChannelAssignment *Value;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *Type;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _QWORD v35[4];
  __int16 v36;
  _QWORD *v37;
  _QWORD v38[2];
  uint64_t OperandRange;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[24];

  v42[23] = *MEMORY[0x24BDAC8D0];
  v40 = *a1;
  Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (Value == (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (**(_QWORD **)(a1[1] + 96) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        v5 = *((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        v6 = *((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == MirInfoChannelAssignment::GetNumNeededNEs(Value))
      {
        v7 = (_QWORD *)*((_QWORD *)Value + 1);
      }
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
    }
    while (Value != (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v40));
    if (v7)
    {
      if (!mlir::DenseIntElementsAttr::classof((uint64_t)v7))
        goto LABEL_33;
      v8 = *v7;
      v9 = mlir::TypeID::get<mlir::ElementsAttr>();
      v10 = *(unsigned int *)(v8 + 16);
      if (!(_DWORD)v10)
        goto LABEL_20;
      v11 = *(_QWORD **)(v8 + 8);
      v12 = &v11[2 * v10];
      do
      {
        v13 = v10 >> 1;
        v14 = &v11[2 * (v10 >> 1)];
        v16 = *v14;
        v15 = v14 + 2;
        v10 += ~(v10 >> 1);
        if (v16 < v9)
          v11 = v15;
        else
          v10 = v13;
      }
      while (v10);
      if (v11 != v12 && *v11 == v9)
        v17 = v11[1];
      else
LABEL_20:
        v17 = 0;
      v35[0] = v7;
      v35[1] = v17;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v35);
      v19 = Type;
      if (!Type)
        goto LABEL_30;
      v20 = *Type;
      v21 = mlir::TypeID::get<mlir::ShapedType>();
      v22 = *(unsigned int *)(v20 + 16);
      if (!(_DWORD)v22)
        goto LABEL_30;
      v23 = *(_QWORD **)(v20 + 8);
      v24 = &v23[2 * v22];
      do
      {
        v25 = v22 >> 1;
        v26 = &v23[2 * (v22 >> 1)];
        v28 = *v26;
        v27 = v26 + 2;
        v22 += ~(v22 >> 1);
        if (v28 < v21)
          v23 = v27;
        else
          v22 = v25;
      }
      while (v22);
      if (v23 != v24 && *v23 == v21)
        v29 = v23[1];
      else
LABEL_30:
        v29 = 0;
      v41 = (uint64_t)v19;
      v42[0] = v29;
      mlir::ShapedType::getShape((mlir::ShapedType *)&v41);
      if (v30 != 1
        || (v37 = v7,
            v38[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v37),
            v38[1] = v31,
            OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v38),
            !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_33:
        v32 = "'placement.tensor_to_memref' op attribute 'shape' failed to satisfy constraint: ui64 elements attribute of rank 1";
        goto LABEL_44;
      }
    }
  }
  if (v6)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      v32 = "'placement.tensor_to_memref' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
      goto LABEL_44;
    }
    v41 = v6;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v41);
  }
  if (!v5)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v35[0] = v5;
    v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v35);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v41, 32))
      return 1;
  }
  v32 = "'placement.tensor_to_memref' op attribute 'interleave' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_44:
  v35[0] = v32;
  v36 = 259;
  mlir::emitError(a2, (uint64_t)v35, (uint64_t)&v41);
  v33 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
  return v33;
}

uint64_t mlir::placement::TensorToMemref::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t OperandRange;
  unint64_t v18;
  const void *Shape;
  unint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  MirInfoChannelAssignment *Value;
  MirInfoChannelAssignment *v28;
  MirInfoChannelAssignment *v29;
  char v30;
  uint64_t v31;
  void *v32;
  MirInfoChannelAssignment *v33;
  MirInfoChannelAssignment *v34;
  MirInfoChannelAssignment *v35;
  char v36;
  uint64_t v37;
  uint64_t RawStringData;
  uint64_t v39;
  int isSplat;
  unint64_t NumElements;
  unsigned int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  MirInfoChannelAssignment *v49;
  MirInfoChannelAssignment *v50;
  MirInfoChannelAssignment *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t Interleave;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  _QWORD v62[2];
  _QWORD v63[2];
  void *v64;
  uint64_t v65;
  _BYTE v66[40];
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v67 = a6;
  LOBYTE(v68) = 0;
  v69 = 0;
  v70 = a9;
  v71 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v69)
      v69 = 0;
    mlir::OperationName::OperationName(&v68, "placement.tensor_to_memref", 26, Context);
    v69 = 1;
  }
  v72 = a4;
  v73 = a5;
  if (a5)
  {
    v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::placement::TensorToMemrefAdaptor::verify(&v67, v15))
    {
      v64 = v72;
      v65 = 0;
      v16 = mlir::ValueRange::dereference_iterator(&v64, 0);
      v63[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
      v63[1] = a2;
      if (v63[0])
      {
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
        Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v63);
        v20 = v18;
        v64 = v66;
        v65 = 0x500000000;
        v21 = 8 * v18;
        if (8 * v18 < 0x29)
        {
          v22 = 0;
          if (!v18)
          {
LABEL_17:
            LODWORD(v65) = v22 + (v21 >> 3);
            Value = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
            v28 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
            v29 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v28, *(_QWORD *)(*(_QWORD *)(v68 + 96) + 8));
            if ((v30 & 1) != 0)
            {
              v31 = *((_QWORD *)v29 + 1);
              if (v31)
              {
                v32 = *(void **)(*(_QWORD *)v31 + 136);
                if (v32 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
                  v31 = 0;
                v62[0] = v31;
                if (v32 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
                  OperandRange = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v62);
              }
            }
            v33 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
            v34 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
            v35 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v33, v34, *(_QWORD *)(*(_QWORD *)(v68 + 96) + 16));
            if ((v36 & 1) == 0
              || (v37 = *((_QWORD *)v35 + 1)) == 0
              || !mlir::DenseIntElementsAttr::classof(*((_QWORD *)v35 + 1)))
            {
LABEL_47:
              v49 = (MirInfoChannelAssignment *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v67);
              v50 = (MirInfoChannelAssignment *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v67);
              v51 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v49, v50, **(_QWORD **)(v68 + 96));
              if ((v52 & 1) != 0)
              {
                v53 = *((_QWORD *)v51 + 1);
                if (v53)
                {
                  if (*(_UNKNOWN **)(*(_QWORD *)v53 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    v54 = v65;
                    if ((v65 & 0xFFFFFFFE) != 4)
                    {
                      v58 = mlir::UnrankedTensorType::get(OperandRange);
                      goto LABEL_55;
                    }
                    Interleave = mlir::placement::detail::MemrefToTensorGenericAdaptorBase::getInterleave((mlir::placement::detail::MemrefToTensorGenericAdaptorBase *)&v67);
                    v56 = 16;
                    if ((_DWORD)v54 == 4)
                      v56 = 8;
                    v57 = (uint64_t *)v64;
                    *(_QWORD *)((char *)v64 + v56) *= Interleave;
                    v57[v54 - 1] /= Interleave;
                  }
                }
              }
              v58 = mlir::MemRefType::get((uint64_t *)v64, (mlir::AffineMap *)v65, OperandRange, 0, 0, 0);
LABEL_55:
              v59 = v58;
              v60 = *(_DWORD *)(a11 + 8);
              if (v60 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v60 + 1, 8);
                v60 = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v60) = v59;
              ++*(_DWORD *)(a11 + 8);
              if (v64 != v66)
                free(v64);
              return 1;
            }
            v62[0] = v37;
            v62[1] = 1;
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v62, 8, 1, 0))
            {
              RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v62);
              LOBYTE(Shape) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v62);
              mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v62);
            }
            else
            {
              RawStringData = 0;
            }
            if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)v62, 8, 1, 0))
            {
              v39 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v62);
              isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62);
              mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v62);
              NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)v62);
              v20 = NumElements;
              LODWORD(v65) = 0;
              if (NumElements <= HIDWORD(v65))
              {
                v42 = 0;
                v61 = RawStringData == v39 && isSplat == Shape;
                v44 = v61;
                if (v61 && !NumElements)
                {
LABEL_46:
                  LODWORD(v65) = v42 + v20;
                  goto LABEL_47;
                }
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, NumElements, 8);
                v42 = v65;
                v43 = RawStringData == v39 && isSplat == Shape;
                v44 = v43;
              }
            }
            else
            {
              v44 = 0;
              v42 = 0;
            }
            v45 = 0;
            v46 = (char *)v64 + 8 * v42;
            do
            {
              if ((_BYTE)Shape)
                v47 = 0;
              else
                v47 = v45;
              *(_QWORD *)&v46[8 * v45] = *(_QWORD *)(RawStringData + 8 * v47);
              v43 = v20 - 1 == v45++;
              if (v43)
                v48 = v44;
              else
                v48 = 0;
            }
            while (v48 != 1);
            goto LABEL_46;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, (uint64_t)(8 * v18) >> 3, 8);
          v22 = v65;
          if (!v20)
            goto LABEL_17;
        }
        memcpy((char *)v64 + 8 * v22, Shape, v21);
        v22 = v65;
        goto LABEL_17;
      }
    }
  }
  v23 = mlir::Float32Type::get(this, a2);
  v24 = mlir::UnrankedTensorType::get(v23);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::placement::TensorToMemref::build(mlir::UnknownLoc **a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  mlir::UnknownLoc *v13;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  mlir::MLIRContext *v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24[2];
  void *__src;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  mlir::OperationState::addOperands(a2, (uint64_t)a3, a4);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(unsigned int *)(a2 + 120);
  if (a6 + v12 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v12, 16);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v12), a5, 16 * a6);
    LODWORD(v12) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v12 + a6;
  __src = v27;
  v26 = 0x200000000;
  v13 = *a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v24, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::placement::TensorToMemref::inferReturnTypes(v13, v16, v17, a3, a4, Dictionary, v18, v19, v24[0], v24[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v20 = __src;
  v21 = v26;
  v22 = *(unsigned int *)(a2 + 72);
  v23 = v22 + v26;
  if (v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v23, 8);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v21)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v22), v20, 8 * v21);
    LODWORD(v22) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v22 + v21;
  if (__src != v27)
    free(__src);
}

BOOL mlir::placement::TensorToMemref::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  MirInfoChannelAssignment *Value;
  const void **v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  uint64_t NumNeededNEs;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NextResultAtOffset;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (MirInfoChannelAssignment *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 16 * v4;
    do
    {
      NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(Value);
      v11 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == NumNeededNEs)
      {
        v6 = (const void **)*((_QWORD *)Value + 1);
      }
      else
      {
        v12 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
        v11 = *this;
        if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v12)
        {
          v7 = *((_QWORD *)Value + 1);
        }
        else
        {
          v13 = MirInfoChannelAssignment::GetNumNeededNEs(Value);
          v11 = *this;
          if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == v13)
            v8 = (const void **)*((_QWORD *)Value + 1);
        }
      }
      Value = (MirInfoChannelAssignment *)((char *)Value + 16);
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v6 = 0;
    v11 = *this;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps0(v11, v8, (const void **)"shape", 5)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v7, (const void **)"resultElementType", (const void **)0x11)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, v6, (const void **)"interleave", (const void **)0xA)|| !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7,
                           0))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v14 = (uint64_t)(*this - 2);
  else
    v14 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps2(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

mlir::Operation *mlir::placement::TensorToMemref::verify(mlir::Operation **this)
{
  unsigned __int8 isSplat;
  uint64_t v2;
  mlir::Operation *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *Shape;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t NumElements;
  unint64_t isValidIntOrFloat;
  uint64_t RawStringData;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *p_ShapeAttr;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  int v56;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  const void ***v69;
  uint64_t v70;
  __int128 v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  const void ***v77;
  uint64_t v78;
  __int128 v79;
  unint64_t v80;
  BOOL v81;
  unint64_t v82;
  BOOL v83;
  char *v84;
  char *v85;
  const void **v86;
  _BOOL8 v87;
  __int16 v88;
  uint64_t v89[2];
  mlir::Operation *v90;
  uint64_t v91;
  _BOOL8 v92;
  void *InterleaveAttr;
  uint64_t v94;
  _BYTE v95[16];
  __int16 v96;
  uint64_t ShapeAttr;
  _QWORD v98[2];
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  _QWORD v102[20];

  v102[19] = *MEMORY[0x24BDAC8D0];
  v3 = *this;
  v90 = v3;
  v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v89[0] = (uint64_t)v4;
  v89[1] = v5;
  if (!mlir::placement::MemrefToTensor::getShapeAttr(&v90)
    || !v4
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
  {
    goto LABEL_23;
  }
  Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  if (v7)
  {
    v8 = 8 * v7;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v8 -= 8;
      if (!v8)
        goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_8:
  v9 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  NumElements = mlir::ShapedType::getNumElements(v9, v10);
  ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v90);
  v98[0] = ShapeAttr != 0;
  isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&ShapeAttr, 8, 1, 0);
  if ((isValidIntOrFloat & 1) == 0)
  {
    RawStringData = 0;
    if (isValidIntOrFloat < 2)
      goto LABEL_11;
LABEL_13:
    v15 = 0;
    v14 = isValidIntOrFloat & 0xFFFFFFFFFFFFFFFELL;
    v16 = 1;
    v17 = 1;
    do
    {
      if (isSplat)
        v18 = 0;
      else
        v18 = v15;
      if (isSplat)
        v19 = 0;
      else
        v19 = v15 + 1;
      v16 *= *(_QWORD *)(RawStringData + 8 * v18);
      v17 *= *(_QWORD *)(RawStringData + 8 * v19);
      v15 += 2;
    }
    while (v15 != v14);
    v2 = v17 * v16;
    goto LABEL_121;
  }
  RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&ShapeAttr);
  isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ShapeAttr);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ShapeAttr);
  isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&ShapeAttr);
  if (!isValidIntOrFloat)
  {
    v2 = 1;
    goto LABEL_122;
  }
  if (isValidIntOrFloat >= 2)
    goto LABEL_13;
LABEL_11:
  v14 = 0;
  v2 = 1;
  do
  {
    if (isSplat)
      v63 = 0;
    else
      v63 = v14;
    v2 *= *(_QWORD *)(RawStringData + 8 * v63);
    ++v14;
LABEL_121:
    ;
  }
  while (isValidIntOrFloat != v14);
LABEL_122:
  if (NumElements != v2)
  {
    v96 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, (const void ***)&InterleaveAttr, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v98, "Input shape ");
    v64 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&ShapeAttr, v89);
    v65 = (uint64_t)v64;
    if (*v64)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v64 + 1), " (");
      if (*(_QWORD *)v65)
      {
        v66 = v65 + 24;
        v67 = *(_QWORD *)(v65 + 24);
        LODWORD(v86) = 5;
        v87 = NumElements;
        v68 = *(unsigned int *)(v65 + 32);
        v69 = &v86;
        if (v68 >= *(_DWORD *)(v65 + 36))
        {
          v80 = v68 + 1;
          v81 = v67 + 24 * v68 > (unint64_t)&v86;
          if (v67 <= (unint64_t)&v86 && v81)
          {
            v84 = (char *)&v86 - v67;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 40), v80, 24);
            v67 = *(_QWORD *)(v65 + 24);
            v69 = (const void ***)&v84[v67];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v66, (void *)(v65 + 40), v80, 24);
            v67 = *(_QWORD *)(v65 + 24);
            v69 = &v86;
          }
        }
        v70 = v67 + 24 * *(unsigned int *)(v65 + 32);
        v71 = *(_OWORD *)v69;
        *(_QWORD *)(v70 + 16) = v69[2];
        *(_OWORD *)v70 = v71;
        ++*(_DWORD *)(v65 + 32);
        if (*(_QWORD *)v65)
          mlir::Diagnostic::operator<<(v65 + 8, " elements) is not compatible with shape attribute ");
      }
    }
    v91 = mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    v92 = v91 != 0;
    v72 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Attribute>(v65, &v91);
    v73 = (uint64_t)v72;
    if (*v72)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v72 + 1), " (");
      if (*(_QWORD *)v73)
      {
        v74 = v73 + 24;
        v75 = *(_QWORD *)(v73 + 24);
        LODWORD(v86) = 2;
        v87 = v2;
        v76 = *(unsigned int *)(v73 + 32);
        v77 = &v86;
        if (v76 >= *(_DWORD *)(v73 + 36))
        {
          v82 = v76 + 1;
          v83 = v75 + 24 * v76 > (unint64_t)&v86;
          if (v75 <= (unint64_t)&v86 && v83)
          {
            v85 = (char *)&v86 - v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 40), v82, 24);
            v75 = *(_QWORD *)(v73 + 24);
            v77 = (const void ***)&v85[v75];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 40), v82, 24);
            v75 = *(_QWORD *)(v73 + 24);
            v77 = &v86;
          }
        }
        v78 = v75 + 24 * *(unsigned int *)(v73 + 32);
        v79 = *(_OWORD *)v77;
        *(_QWORD *)(v78 + 16) = v77[2];
        *(_OWORD *)v78 = v79;
        ++*(_DWORD *)(v73 + 32);
        if (*(_QWORD *)v73)
          mlir::Diagnostic::operator<<(v73 + 8, " elements)");
      }
    }
    v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult(v73);
    if (ShapeAttr)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
    return v3;
  }
LABEL_23:
  if (!mlir::placement::MemrefToTensor::getInterleaveAttr(&v90)
    || !v89[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89))
  {
    return (mlir::Operation *)1;
  }
  v20 = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  if (v21)
  {
    v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22)
        goto LABEL_30;
    }
    return (mlir::Operation *)1;
  }
LABEL_30:
  InterleaveAttr = (void *)mlir::placement::MemrefToTensor::getInterleaveAttr(&v90);
  if (InterleaveAttr)
  {
    mlir::IntegerAttr::getValue(&InterleaveAttr, (llvm::APInt *)&ShapeAttr);
    if (LODWORD(v98[0]) >= 0x41)
      p_ShapeAttr = (uint64_t *)ShapeAttr;
    else
      p_ShapeAttr = &ShapeAttr;
    v24 = *(unsigned int *)p_ShapeAttr;
    if (LODWORD(v98[0]) >= 0x41 && ShapeAttr)
      MEMORY[0x20BD002D4]();
  }
  else
  {
    v24 = 0;
  }
  mlir::getANENextSupportedInterleaveValue(v24);
  if (!v25)
  {
    v96 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, (const void ***)&InterleaveAttr, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v98, "interleave factor not supported");
    v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ShapeAttr);
    if (ShapeAttr)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
    return v3;
  }
  InterleaveAttr = v95;
  v94 = 0x400000000;
  if (mlir::placement::MemrefToTensor::getShapeAttr(&v90))
  {
    ShapeAttr = mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    v98[0] = ShapeAttr != 0;
    if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&ShapeAttr, 8, 1, 0))
    {
      v26 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&ShapeAttr);
      isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ShapeAttr);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ShapeAttr);
      mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&ShapeAttr);
    }
    else
    {
      v26 = 0;
    }
    v86 = (const void **)mlir::placement::MemrefToTensor::getShapeAttr(&v90);
    v87 = v86 != 0;
    if (mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)&v86, 8, 1, 0))
    {
      v34 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v86);
      v35 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v86);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      v36 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v86);
      v2 = v36;
      LODWORD(v94) = 0;
      if (v36 <= HIDWORD(v94))
      {
        v37 = 0;
        v58 = v26 == v34 && v35 == isSplat;
        v39 = v58;
        if (v58 && !v36)
        {
LABEL_70:
          v33 = v37 + v2;
          goto LABEL_71;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v95, v36, 8);
        v37 = v94;
        v38 = v26 == v34 && v35 == isSplat;
        v39 = v38;
      }
    }
    else
    {
      v39 = 0;
      v37 = 0;
    }
    v40 = 0;
    v41 = (char *)InterleaveAttr + 8 * v37;
    do
    {
      if (isSplat)
        v42 = 0;
      else
        v42 = v40;
      *(_QWORD *)&v41[8 * v40] = *(_QWORD *)(v26 + 8 * v42);
      v38 = v2 - 1 == v40++;
      if (v38)
        v43 = v39;
      else
        v43 = 0;
    }
    while (v43 != 1);
    goto LABEL_70;
  }
  v27 = (_BYTE *)mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  v28 = mlir::ShapedType::getShape((mlir::ShapedType *)v89);
  v29 = 0;
  v31 = (_BYTE *)(v28 + 8 * v30);
  LODWORD(v94) = 0;
  v32 = (v31 - v27) >> 3;
  if (v32 > HIDWORD(v94))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&InterleaveAttr, v95, v32, 8);
    v29 = v94;
  }
  if (v31 != v27)
  {
    memcpy((char *)InterleaveAttr + 8 * v29, v27, v31 - v27);
    v29 = v94;
  }
  v33 = v29 + ((unint64_t)(v31 - v27) >> 3);
LABEL_71:
  LODWORD(v94) = v33;
  v44 = v33;
  if ((unint64_t)v33 - 6 > 0xFFFFFFFFFFFFFFFDLL)
  {
    v86 = (const void **)mlir::placement::MemrefToTensor::getInterleaveAttr(&v90);
    if (v86)
    {
      mlir::IntegerAttr::getValue(&v86, (llvm::APInt *)&ShapeAttr);
      if (LODWORD(v98[0]) >= 0x41)
        v45 = (uint64_t *)ShapeAttr;
      else
        v45 = &ShapeAttr;
      v46 = *(unsigned int *)v45;
      if (LODWORD(v98[0]) >= 0x41 && ShapeAttr)
        MEMORY[0x20BD002D4](ShapeAttr);
    }
    else
    {
      v46 = 0;
    }
    if (!(*((_QWORD *)InterleaveAttr + v44 - 1) % v46))
    {
      v56 = 1;
      goto LABEL_93;
    }
    v88 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, &v86, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
    {
      mlir::Diagnostic::operator<<((uint64_t)v98, "width ");
      if (ShapeAttr)
      {
        v47 = *((_QWORD *)InterleaveAttr + v44 - 1);
        LODWORD(v91) = 2;
        v92 = v47;
        v48 = &v91;
        v49 = v99;
        if (v100 >= v101)
        {
          v59 = v100 + 1;
          if (v99 <= (unint64_t)&v91 && v99 + 24 * v100 > (unint64_t)&v91)
          {
            v61 = (char *)&v91 - v99;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v59, 24);
            v49 = v99;
            v48 = (uint64_t *)&v61[v99];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v59, 24);
            v48 = &v91;
            v49 = v99;
          }
        }
        v50 = v49 + 24 * v100;
        v51 = *(_OWORD *)v48;
        *(_QWORD *)(v50 + 16) = v48[2];
        *(_OWORD *)v50 = v51;
        ++v100;
        if (ShapeAttr)
        {
          mlir::Diagnostic::operator<<((uint64_t)v98, " must be a multiple of interleave ");
          if (ShapeAttr)
          {
            LODWORD(v91) = 2;
            v92 = v46;
            v52 = &v91;
            v53 = v99;
            if (v100 >= v101)
            {
              v60 = v100 + 1;
              if (v99 <= (unint64_t)&v91 && v99 + 24 * v100 > (unint64_t)&v91)
              {
                v62 = (char *)&v91 - v99;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v60, 24);
                v53 = v99;
                v52 = (uint64_t *)&v62[v99];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v99, v102, v60, 24);
                v52 = &v91;
                v53 = v99;
              }
            }
            v54 = v53 + 24 * v100;
            v55 = *(_OWORD *)v52;
            *(_QWORD *)(v54 + 16) = v52[2];
            *(_OWORD *)v54 = v55;
            ++v100;
          }
        }
      }
    }
  }
  else
  {
    v88 = 257;
    mlir::Operation::emitOpError((uint64_t *)v3, &v86, (uint64_t)&ShapeAttr);
    if (ShapeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v98, "Interleave can only be applied on 4D or 5D tensor");
  }
  v3 = (mlir::Operation *)mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ShapeAttr);
  if (ShapeAttr)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ShapeAttr);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v98);
  v56 = 0;
LABEL_93:
  if (InterleaveAttr != v95)
    free(InterleaveAttr);
  if (v56)
    return (mlir::Operation *)1;
  return v3;
}

uint64_t mlir::placement::`anonymous namespace'::isCompatibleMemrefTensorOpReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  const void *Shape;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t OperandRange;
  _QWORD v22[2];
  _QWORD v23[2];

  result = 1;
  if (a2 && a4)
  {
    v7 = 0;
    v8 = a2 - 1;
    v9 = a4 - 1;
    while (1)
    {
      v10 = (uint64_t *)mlir::TypeRange::dereference_iterator(a1, v7);
      v11 = (uint64_t *)mlir::TypeRange::dereference_iterator(a3, v7);
      v23[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v10);
      v23[1] = v12;
      v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v11);
      v22[0] = v13;
      v22[1] = v14;
      v15 = !v23[0] || v13 == 0;
      if (v15)
        break;
      Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v23);
      v18 = v17;
      v19 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v22);
      if (v18 != v20 || memcmp(Shape, v19, 8 * v18))
        break;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v23);
      v15 = OperandRange == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
      result = v15;
      if (v15 && v8 != v7)
      {
        v15 = v9 == v7++;
        if (!v15)
          continue;
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t mlir::placement::MemrefToTensor::fold(mlir::Operation **a1)
{
  uint64_t DefiningOp;
  uint64_t v3;
  void *v4;
  BOOL v5;
  mlir::Operation *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t NextResultAtOffset;
  uint64_t InterleaveAttr;
  uint64_t v12;
  mlir::Operation *v13;

  v12 = *(_QWORD *)(*((_QWORD *)*a1 + 9) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp)
    return 0;
  v3 = DefiningOp;
  v4 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v5 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id;
  v6 = v4 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id
     ? (mlir::Operation *)DefiningOp
     : 0;
  v13 = v6;
  if (!v5)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*((_DWORD *)*a1 + 9))
    v9 = (uint64_t)*a1 - 16;
  else
    v9 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0);
  result = 0;
  if (v8 == (*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    InterleaveAttr = mlir::placement::MemrefToTensor::getInterleaveAttr(a1);
    if (InterleaveAttr == mlir::placement::MemrefToTensor::getInterleaveAttr(&v13)
      && !mlir::placement::MemrefToTensor::getResultElementTypeAttr(a1)
      && !mlir::placement::MemrefToTensor::getResultElementTypeAttr(&v13))
    {
      return *(_QWORD *)(*(_QWORD *)(v3 + 72) + 24) | 4;
    }
    return 0;
  }
  return result;
}

uint64_t mlir::placement::ReplacedOps::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::placement::ReplacedOps::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24));
}

uint64_t mlir::placement::RegionCall::verifySymbolUses(mlir::placement::RegionCall *this, mlir::SymbolTableCollection *a2)
{
  uint64_t v4;
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v26;
  const void **AttrData;
  uint64_t v28;
  char *v29;
  int Kind;
  int v31;
  const void **v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t NumResults;
  unint64_t v37;
  const void **v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  const void ***v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t canMapOperands;
  _QWORD v66[2];
  const void **v67[4];
  __int16 v68;
  uint64_t v69;
  const void **Value;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  _QWORD v74[24];

  v74[23] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 47)
    && (InherentAttr = mlir::Operation::getInherentAttr(*(_QWORD *)this, (uint64_t)"callee", 6), v6))
  {
    v7 = InherentAttr;
    if (!InherentAttr)
      goto LABEL_10;
  }
  else
  {
    v7 = mlir::DictionaryAttr::get(v4 + 56, "callee", 6uLL);
    if (!v7)
    {
LABEL_10:
      v11 = "requires a 'callee' symbol reference attribute";
      goto LABEL_11;
    }
  }
  v8 = *(void **)(*(_QWORD *)v7 + 136);
  v9 = v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
    v10 = v7;
  else
    v10 = 0;
  v73 = v10;
  if (!v9)
    goto LABEL_10;
  mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v73);
  v15 = v14 ? 0 : v7;
  v69 = v15;
  if (!v15)
    goto LABEL_10;
  v16 = mlir::SymbolTableCollection::lookupNearestSymbolFrom((uint64_t)a2, *(mlir::SymbolTable **)this, v15);
  if (!v16)
  {
    v68 = 257;
    mlir::OpState::emitOpError((uint64_t **)this, v67, (uint64_t)&v73);
    if (v73)
      mlir::Diagnostic::operator<<((uint64_t)v74, "'");
    Value = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v69);
    AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
    if (!v73)
      goto LABEL_75;
    v72 = 261;
    Value = AttrData;
    v71 = v28;
    mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
    if (!v73)
      goto LABEL_75;
    v29 = "' does not reference a valid function";
    goto LABEL_74;
  }
  v17 = v16;
  v18 = *(void **)(*(_QWORD *)(v16 + 48) + 16);
  if (v18 == &mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A17,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::anec::A11Legacy,void>::id
    || v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id)
  {
    v26 = 1;
  }
  else if (v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
  {
    v26 = 0;
  }
  else
  {
    v26 = 2 * (v18 == &mlir::detail::TypeIDResolver<mlir::mpsx::CPUOp,void>::id);
  }
  if (*(_DWORD *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this) + 8) != v26)
  {
    v68 = 257;
    mlir::OpState::emitOpError((uint64_t **)this, v67, (uint64_t)&v73);
    if (v73)
      mlir::Diagnostic::operator<<((uint64_t)v74, "failed: callee of type '");
    if (v73)
    {
      v38 = (const void **)(&off_24C061050)[v26];
      v72 = 261;
      Value = v38;
      v71 = 3;
      mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
      if (v73)
        mlir::Diagnostic::operator<<((uint64_t)v74, "' does not match the call region type ('");
    }
    v39 = *(int *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)this) + 8);
    if (v39 > 2)
    {
      v41 = 0;
      v40 = &byte_207AF6795;
    }
    else
    {
      v40 = (&off_24C061050)[v39];
      v41 = 3;
    }
    if (!v73)
      goto LABEL_75;
    v72 = 261;
    Value = (const void **)v40;
    v71 = v41;
    mlir::Diagnostic::operator<<((uint64_t)v74, &Value);
    if (!v73)
      goto LABEL_75;
    v29 = "')";
LABEL_74:
    mlir::Diagnostic::operator<<((uint64_t)v74, v29);
LABEL_75:
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    goto LABEL_13;
  }
  v66[0] = v17;
  v66[1] = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v17);
  canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v66);
  Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands);
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) == 0)
  {
    if (!Kind)
      goto LABEL_55;
LABEL_105:
    v11 = "incorrect number of operands for callee";
    goto LABEL_11;
  }
  if (Kind != *(_DWORD *)(*(_QWORD *)this + 68))
    goto LABEL_105;
LABEL_55:
  v31 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands);
  if (v31)
  {
    v32 = 0;
    v33 = v31;
    v34 = 24;
    while (1)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + v34) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)(mlir::FunctionType::getInputs((mlir::FunctionType *)&canMapOperands) + 8 * (_QWORD)v32) != v35)
        break;
      v32 = (const void **)((char *)v32 + 1);
      v34 += 32;
      if (v33 == (_DWORD)v32)
        goto LABEL_59;
    }
    Value = (const void **)"operand type mismatch: expected operand type ";
    v72 = 259;
    mlir::OpState::emitOpError((uint64_t **)this, &Value, (uint64_t)&v73);
    v64 = *(_QWORD *)(mlir::FunctionType::getInputs((mlir::FunctionType *)&canMapOperands) + 8 * (_QWORD)v32);
    v42 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v73, &v64);
    v43 = (uint64_t)v42;
    if (*v42)
      mlir::Diagnostic::operator<<((uint64_t)(v42 + 1), ", but provided ");
    v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + v34) + 8) & 0xFFFFFFFFFFFFFFF8;
    v44 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>(v43, (uint64_t *)&v63);
    v45 = (uint64_t)v44;
    if (*v44)
    {
      mlir::Diagnostic::operator<<((uint64_t)(v44 + 1), " for operand number ");
      if (*(_QWORD *)v45)
      {
        v46 = v45 + 24;
        v47 = *(_QWORD *)(v45 + 24);
        LODWORD(v67[0]) = 5;
        v67[1] = v32;
        v48 = *(unsigned int *)(v45 + 32);
        v49 = v67;
        if (v48 >= *(_DWORD *)(v45 + 36))
        {
          v60 = v48 + 1;
          v61 = v47 + 24 * v48 > (unint64_t)v67;
          if (v47 <= (unint64_t)v67 && v61)
          {
            v62 = (char *)v67 - v47;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v46, (void *)(v45 + 40), v60, 24);
            v47 = *(_QWORD *)(v45 + 24);
            v49 = (const void ***)&v62[v47];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v46, (void *)(v45 + 40), v60, 24);
            v47 = *(_QWORD *)(v45 + 24);
            v49 = v67;
          }
        }
        v50 = v47 + 24 * *(unsigned int *)(v45 + 32);
        v51 = *(_OWORD *)v49;
        *(_QWORD *)(v50 + 16) = v49[2];
        *(_OWORD *)v50 = v51;
        ++*(_DWORD *)(v45 + 32);
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v45);
    if (v73)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    goto LABEL_13;
  }
LABEL_59:
  if (mlir::FunctionType::getNumResults((mlir::FunctionType *)&canMapOperands) == *(_DWORD *)(*(_QWORD *)this + 36))
  {
    NumResults = mlir::FunctionType::getNumResults((mlir::FunctionType *)&canMapOperands);
    if ((_DWORD)NumResults)
    {
      v12 = NumResults;
      v37 = *(_QWORD *)(*(_QWORD *)this - 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) == v37)
      {
        if ((_DWORD)v12 == 1)
          return v12;
        v52 = *(_QWORD *)(*(_QWORD *)this - 24) & 0xFFFFFFFFFFFFFFF8;
        if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 8) == v52)
        {
          if ((_DWORD)v12 == 2)
            return 1;
          v53 = *(_QWORD *)(*(_QWORD *)this - 40) & 0xFFFFFFFFFFFFFFF8;
          if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 16) == v53)
          {
            if ((_DWORD)v12 == 3)
              return 1;
            v54 = *(_QWORD *)(*(_QWORD *)this - 56) & 0xFFFFFFFFFFFFFFF8;
            if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 24) == v54)
            {
              if ((_DWORD)v12 == 4)
                return 1;
              v55 = *(_QWORD *)(*(_QWORD *)this - 72) & 0xFFFFFFFFFFFFFFF8;
              if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 32) == v55)
              {
                if ((_DWORD)v12 == 5)
                  return 1;
                v56 = *(_QWORD *)(*(_QWORD *)this - 88) & 0xFFFFFFFFFFFFFFF8;
                if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 40) == v56)
                {
                  v57 = v12 - 6;
                  if ((_DWORD)v12 == 6)
                    return 1;
                  v58 = 0;
                  while (1)
                  {
                    v59 = *(_QWORD *)(*(_QWORD *)this - 24 * (v58 + 1) - 88) & 0xFFFFFFFFFFFFFFF8;
                    if (*(_QWORD *)(mlir::FunctionType::getResults((mlir::FunctionType *)&canMapOperands) + 8 * v58 + 48) != v59)
                      break;
                    ++v58;
                    v12 = 1;
                    if (v57 == (_DWORD)v58)
                      return v12;
                  }
                }
              }
            }
          }
        }
      }
      Value = (const void **)"result type mismatch";
      v72 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, &Value, (uint64_t)&v73);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v73);
      return v12;
    }
    return 1;
  }
  v11 = "incorrect number of results for callee";
LABEL_11:
  Value = (const void **)v11;
  v72 = 259;
  mlir::OpState::emitOpError((uint64_t **)this, &Value, (uint64_t)&v73);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
  if (v73)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
LABEL_13:
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v74);
  return v12;
}

float mlir::placement::RegionCall::getExecutionCost(uint64_t *a1)
{
  uint64_t v2;
  uint64_t InherentAttr;
  char v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  float *v8;
  uint64_t v9;
  mlir::Block *ParentOp;
  int v11;
  float result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t NextResultAtOffset;
  float *v22[3];
  int v23;
  int v24;
  float v25;

  v2 = *a1;
  if (!*(_BYTE *)(*a1 + 47) || (InherentAttr = mlir::Operation::getInherentAttr(*a1, (uint64_t)"callee", 6), !v4))
    InherentAttr = mlir::DictionaryAttr::get(v2 + 56, "callee", 6uLL);
  v5 = InherentAttr;
  if (InherentAttr)
  {
    v6 = *(void **)(*(_QWORD *)InherentAttr + 136);
    v7 = v6 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id;
    if (v6 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
      v8 = (float *)InherentAttr;
    else
      v8 = 0;
    v22[0] = v8;
    if (v7)
    {
      mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v22);
      if (v9)
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
  }
  ParentOp = (mlir::Block *)*a1;
  do
  {
    ParentOp = (mlir::Block *)*((_QWORD *)ParentOp + 2);
    if (!ParentOp)
      break;
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    if (!ParentOp)
      break;
  }
  while (*(_UNKNOWN **)(*((_QWORD *)ParentOp + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id);
  mlir::SymbolTable::lookupSymbolIn((uint64_t)ParentOp, v5);
  v25 = 0.0;
  v11 = *(_DWORD *)(mlir::anec::ClampedRelu::getMinValueAttr((mlir::Operation **)a1) + 8);
  if (v11)
  {
    result = 0.0;
    if (v11 == 1)
      return 0.0008;
  }
  else
  {
    v24 = 1317060348;
    v23 = 1132462080;
    v22[0] = &v25;
    v22[1] = (float *)&v23;
    v22[2] = (float *)&v24;
    v13 = *a1;
    if ((*(_BYTE *)(*a1 + 46) & 0x80) != 0)
    {
      v14 = *(unsigned int *)(v13 + 68);
      if ((_DWORD)v14)
      {
        v15 = (uint64_t *)(*(_QWORD *)(v13 + 72) + 24);
        do
        {
          v16 = *v15;
          v15 += 4;
          mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(v22, v16);
          --v14;
        }
        while (v14);
        v13 = *a1;
      }
    }
    v17 = *(unsigned int *)(v13 + 36);
    v18 = v13 - 16;
    if ((_DWORD)v17)
      v19 = v18;
    else
      v19 = 0;
    if ((_DWORD)v17)
    {
      for (i = 0; i != v17; ++i)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, i);
        mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(v22, NextResultAtOffset);
      }
    }
    return v25;
  }
  return result;
}

float mlir::placement::RegionCall::getExecutionCost(mlir::DeviceInfo const&)::$_0::operator()(float **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *Shape;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  float v20;
  float result;
  _QWORD v22[2];
  uint64_t OperandRange;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v3)
    goto LABEL_10;
  v4 = *v3;
  v5 = mlir::TypeID::get<mlir::ShapedType>();
  v6 = *(unsigned int *)(v4 + 16);
  if (!(_DWORD)v6)
    goto LABEL_10;
  v7 = *(_QWORD **)(v4 + 8);
  v8 = &v7[2 * v6];
  do
  {
    v9 = v6 >> 1;
    v10 = &v7[2 * (v6 >> 1)];
    v12 = *v10;
    v11 = v10 + 2;
    v6 += ~(v6 >> 1);
    if (v12 < v5)
      v7 = v11;
    else
      v6 = v9;
  }
  while (v6);
  if (v7 != v8 && *v7 == v5)
    v13 = v7[1];
  else
LABEL_10:
    v13 = 0;
  v22[0] = v3;
  v22[1] = v13;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v22))
  {
LABEL_17:
    v20 = 32768.0;
    goto LABEL_18;
  }
  Shape = (_QWORD *)mlir::ShapedType::getShape((mlir::ShapedType *)v22);
  if (v15)
  {
    v16 = 8 * v15;
    while (*Shape != 0x8000000000000000)
    {
      ++Shape;
      v16 -= 8;
      if (!v16)
        goto LABEL_16;
    }
    goto LABEL_17;
  }
LABEL_16:
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v22);
  v17 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange) >> 3;
  v18 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v22);
  v20 = (float)v17 * (float)mlir::ShapedType::getNumElements(v18, v19);
LABEL_18:
  result = (float)((float)(v20 / *a1[1]) / *a1[2]) + **a1;
  **a1 = result;
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::HostTypeCast>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.host_type_cast", 24, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::HostTypeCast,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C04F4A0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::MemrefToTensor>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::placement::MemrefToTensor>,mlir::OpTrait::OneResult<mlir::placement::MemrefToTensor>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::placement::MemrefToTensor>,mlir::OpTrait::ZeroSuccessors<mlir::placement::MemrefToTensor>,mlir::OpTrait::OneOperand<mlir::placement::MemrefToTensor>,mlir::OpTrait::OpInvariants<mlir::placement::MemrefToTensor>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::MemrefToTensor>,mlir::OpTrait::HostTypeConversion<mlir::placement::MemrefToTensor>,mlir::InferTypeOpInterface::Trait<mlir::placement::MemrefToTensor>,mlir::CompatibleReturnTypesInterface::Trait<mlir::placement::MemrefToTensor>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.memref_to_tensor", 26, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C04F568;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::placement::MemrefToTensor::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::RegionCall>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::placement::RegionCall>,mlir::OpTrait::VariadicResults<mlir::placement::RegionCall>,mlir::OpTrait::ZeroSuccessors<mlir::placement::RegionCall>,mlir::OpTrait::VariadicOperands<mlir::placement::RegionCall>,mlir::OpTrait::OpInvariants<mlir::placement::RegionCall>,mlir::OpTrait::RegionOp<mlir::placement::RegionCall>,mlir::SymbolUserOpInterface::Trait<mlir::placement::RegionCall>,mlir::MinimumAlignmentInterface::Trait<mlir::placement::RegionCall>,mlir::ExecutionCostOpInterface::Trait<mlir::placement::RegionCall>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.region_call", 21, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C04F248;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::placement::RegionCall::getAttributeNames(void)::attrNames, 2);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOps>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.replaced_ops", 22, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ReplacedOps,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C04F3D8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::placement::ReplacedOps::getAttributeNames(void)::attrNames, 4);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::ReplacedOpsLiveOuts>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.live_outs", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ReplacedOpsLiveOuts,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C04F6F8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::StartTimer>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.start_timer", 21, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::StartTimer,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C04F310;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::placement::StartTimer::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::StopTimer>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.stop_timer", 20, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::StopTimer,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C04F7C0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::placement::TensorToMemref>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)operator new();
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::placement::TensorToMemref>,mlir::OpTrait::OneResult<mlir::placement::TensorToMemref>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::placement::TensorToMemref>,mlir::OpTrait::ZeroSuccessors<mlir::placement::TensorToMemref>,mlir::OpTrait::OneOperand<mlir::placement::TensorToMemref>,mlir::OpTrait::OpInvariants<mlir::placement::TensorToMemref>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::TensorToMemref>,mlir::OpTrait::HostTypeConversion<mlir::placement::TensorToMemref>,mlir::InferTypeOpInterface::Trait<mlir::placement::TensorToMemref>,mlir::CompatibleReturnTypesInterface::Trait<mlir::placement::TensorToMemref>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"placement.tensor_to_memref", 26, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_24C04F630;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::placement::TensorToMemref::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = 0x300000000;
  v4 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::ANEIOCast>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v11, v5, v4);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"placement.ane_io_cast", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id, (uint64_t)&v11);
  v6 = v11;
  if ((_DWORD)v12)
  {
    v7 = 16 * v12;
    v8 = (void **)((char *)v11 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = v11;
  }
  if (v6 != v13)
    free(v6);
  *a1 = &off_24BFF4278;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  v6 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                         + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ANEIOCast>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::placement::ANEIOCast>(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::foldSingleResultHook<mlir::placement::ANEIOCast>(mlir::Operation *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  mlir::placement::detail::ANEIOCastGenericAdaptorBase::ANEIOCastGenericAdaptorBase((uint64_t)v13, this);
  v14 = a2;
  v15 = a3;
  v12 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::ANEIOCast,void>::id
      && (v9 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24),
          (*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)this - 1) & 0xFFFFFFFFFFFFFFF8))
      && (v10 = v9 | 4, (v9 | 4uLL) >= 8))
    {
      if ((mlir::Operation *)((char *)this - 16) != (mlir::Operation *)(v9 & 0xFFFFFFFFFFFFFFF8))
      {
        v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
          LODWORD(v11) = *(_DWORD *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v11) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451A000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451A000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      v12 = 104;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451A000;
    }
  }
  return v1[308];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  uint64_t *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::ANEIOCast>,mlir::OpTrait::OneResult<mlir::placement::ANEIOCast>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::placement::ANEIOCast>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ANEIOCast>,mlir::OpTrait::OneOperand<mlir::placement::ANEIOCast>,mlir::OpTrait::OpInvariants<mlir::placement::ANEIOCast>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::ANEIOCast>>((uint64_t)a1, a2))return 0;
  v4 = a1;
  return mlir::placement::ANEIOCast::verify(&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::ANEIOCast>,mlir::OpTrait::OneResult<mlir::placement::ANEIOCast>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::placement::ANEIOCast>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ANEIOCast>,mlir::OpTrait::OneOperand<mlir::placement::ANEIOCast>,mlir::OpTrait::OpInvariants<mlir::placement::ANEIOCast>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::ANEIOCast>>(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;

  if (!mlir::OpTrait::impl::verifyZeroRegions((mlir::OpTrait::impl *)a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult((mlir::OpTrait::impl *)a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand((mlir::OpTrait::impl *)a1, v5)
    || !mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0((uint64_t *)a1, (const void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 36))
    v6 = a1 - 16;
  else
    v6 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps0((uint64_t *)a1, (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::placement::ANEIOCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::HostTypeCast>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HostTypeConversion<Empty>]";
      v12 = 90;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v1[80];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  uint64_t v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 9))
    v6 = (uint64_t)a1 - 16;
  else
    v6 = 0;
  mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return 1;
}

uint64_t mlir::Op<mlir::placement::HostTypeCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::HostTypeConversion>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v5;
  char v6;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v5 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::MemrefToTensor>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::placement::MemrefToTensor>,mlir::OpTrait::OneResult<mlir::placement::MemrefToTensor>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::placement::MemrefToTensor>,mlir::OpTrait::ZeroSuccessors<mlir::placement::MemrefToTensor>,mlir::OpTrait::OneOperand<mlir::placement::MemrefToTensor>,mlir::OpTrait::OpInvariants<mlir::placement::MemrefToTensor>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::MemrefToTensor>,mlir::OpTrait::HostTypeConversion<mlir::placement::MemrefToTensor>,mlir::InferTypeOpInterface::Trait<mlir::placement::MemrefToTensor>,mlir::CompatibleReturnTypesInterface::Trait<mlir::placement::MemrefToTensor>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::placement::MemrefToTensor::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::MemrefToTensor>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::MemrefToTensor>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::MemrefToTensor>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  _QWORD *v14;
  char *v16[2];
  unint64_t v17[2];
  unint64_t v18[2];
  void *v19;
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;
  _QWORD v23[24];

  v11 = a3;
  v23[23] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x400000000;
  if (!mlir::placement::MemrefToTensor::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v19))goto LABEL_8;
  mlir::ValueRange::ValueRange(v18, (uint64_t)v19, v20);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  {
    v13 = 1;
    goto LABEL_9;
  }
  v16[0] = "placement.memref_to_tensor";
  v16[1] = (char *)26;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v22);
    v14 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v22, "'", v16, "' op inferred type(s) ", (uint64_t)&v19, " are incompatible with return type(s) of operation ", a11);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v22)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  }
  else
  {
LABEL_8:
    v13 = 0;
  }
LABEL_9:
  if (v19 != v21)
    free(v19);
  return v13;
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::Operation *v13;
  _BYTE v14[40];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  mlir::placement::detail::MemrefToTensorGenericAdaptorBase::MemrefToTensorGenericAdaptorBase((uint64_t)v14, a2);
  v15 = a3;
  v16 = a4;
  v9 = mlir::placement::MemrefToTensor::fold(&v13);
  v10 = v9;
  if (v9 < 8
    || (mlir::Operation *)((char *)a2 - 16) == (mlir::Operation *)(v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    return v9 > 7;
  }
  v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451A000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451A000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<Empty>]";
      v12 = 110;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451A000;
    }
  }
  return v1[421];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::placement::MemrefToTensor::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::placement::MemrefToTensor::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::placement::MemrefToTensor,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::RegionCall>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::placement::RegionCall>,mlir::OpTrait::VariadicResults<mlir::placement::RegionCall>,mlir::OpTrait::ZeroSuccessors<mlir::placement::RegionCall>,mlir::OpTrait::VariadicOperands<mlir::placement::RegionCall>,mlir::OpTrait::OpInvariants<mlir::placement::RegionCall>,mlir::OpTrait::RegionOp<mlir::placement::RegionCall>,mlir::SymbolUserOpInterface::Trait<mlir::placement::RegionCall>,mlir::MinimumAlignmentInterface::Trait<mlir::placement::RegionCall>,mlir::ExecutionCostOpInterface::Trait<mlir::placement::RegionCall>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::verifySymbolUses;
  v3 = mlir::TypeID::get<mlir::SymbolUserOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x10uLL, 0x80040803F642BuLL);
  *v4 = mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumOperandAlignment;
  v4[1] = mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumResultAlignment;
  v5 = mlir::TypeID::get<mlir::MinimumAlignmentInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::ExecutionCostOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getExecutionCost;
  v7 = mlir::TypeID::get<mlir::ExecutionCostOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::SymbolUserOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::verifySymbolUses(int a1, uint64_t a2, mlir::SymbolTableCollection *a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::placement::RegionCall::verifySymbolUses((mlir::placement::RegionCall *)&v4, a3);
}

uint64_t mlir::TypeID::get<mlir::SymbolUserOpInterface>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451B000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451B000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      v12 = 77;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451B000;
    }
  }
  return v1[43];
}

uint64_t mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumOperandAlignment()
{
  return 0x4000;
}

uint64_t mlir::detail::MinimumAlignmentInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getMinimumResultAlignment()
{
  return 0x4000;
}

float mlir::detail::ExecutionCostOpInterfaceInterfaceTraits::Model<mlir::placement::RegionCall>::getExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::placement::RegionCall::getExecutionCost(&v3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451A000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451A000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v12 = 87;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451A000;
    }
  }
  return v1[427];
}

uint64_t mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_25451B000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_25451B000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface::Trait<Empty>]";
      v12 = 91;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolUserOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_25451B000;
    }
  }
  return v1[47];
}

uint64_t mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MinimumAlignmentInterface::Trait<Empty>]";
      v12 = 95;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::MinimumAlignmentInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MinimumAlignmentInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v1[88];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
  {
    return 0;
  }
  v5 = a1;
  return mlir::placement::RegionCall::verifyInvariantsImpl((uint64_t **)&v5) != 0;
}

uint64_t mlir::Op<mlir::placement::RegionCall,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::SymbolUserOpInterface::Trait,mlir::MinimumAlignmentInterface::Trait,mlir::ExecutionCostOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::foldHook()
{
  mlir::Operation *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::placement::ReplacedOps::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::printAssembly(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOps>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(0x80uLL, 0x800408754F03FuLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isDeclaration;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x48uLL, 0x800404C0E4D0CuLL);
  *v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeResAttrsAttr;
  v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>>((uint64_t)a1);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::anec::A11Legacy::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::placement::ReplacedOps::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), a3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 24), a3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 24));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>>(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = malloc_type_malloc(0x38uLL, 0xE004091171B8EuLL);
  *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != (_QWORD *)v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_9:
    v11 = 0;
  v2[5] = v11;
  v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  v13 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v13)
    goto LABEL_18;
  v14 = *(_QWORD **)a1;
  v15 = *(_QWORD *)a1 + 16 * v13;
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != (_QWORD *)v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_18:
    v20 = 0;
  v2[6] = v20;
  v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();
  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8), a3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::Operation *v11;
  uint64_t FunctionTypeAttr;

  v11 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v11);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::anec::A11Legacy>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::placement::ReplacedOps>::verifyType()
{
  return 1;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t v9;
  mlir::Operation *v10;
  uint64_t FunctionTypeAttr;

  mlir::OpState::printOpName((uint64_t)a2, a3, a4, a5);
  v10 = a2;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr(&v10);
  mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  FunctionTypeAttr = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
  mlir::function_interface_impl::printFunctionOp(a3, (uint64_t)a2, InterfaceFor, 0, AttrData, v9, **(_QWORD **)(*((_QWORD *)a2 + 6) + 96), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 96) + 24));
}

BOOL mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroResults<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroSuccessors<mlir::placement::ReplacedOps>,mlir::OpTrait::ZeroOperands<mlir::placement::ReplacedOps>,mlir::OpTrait::OpInvariants<mlir::placement::ReplacedOps>,mlir::SymbolOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::CallableOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::FunctionOpInterface::Trait<mlir::placement::ReplacedOps>,mlir::OpTrait::IsIsolatedFromAbove<mlir::placement::ReplacedOps>>(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  uint64_t *v8;

  if (mlir::OpTrait::impl::verifyOneRegion((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands((mlir::OpTrait::impl *)a1, v5)
    && (v8 = a1, mlir::placement::ReplacedOps::verifyInvariantsImpl(&v8))
    && mlir::detail::verifySymbol((mlir::detail *)a1, v6))
  {
    return mlir::function_interface_impl::verifyTrait<mlir::placement::ReplacedOps>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::function_interface_impl::verifyTrait<mlir::placement::ReplacedOps>(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *Value;
  uint64_t v8;
  __int128 *v9;
  _BYTE *AttrData;
  size_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t NameDialect;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  _BYTE *v22;
  size_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  const char *v39;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  const void **v48[4];
  __int16 v49;
  uint64_t ArgAttrsAttr;
  uint64_t *v51;
  __int128 v52;
  uint64_t FunctionTypeAttr;
  _BYTE v54[16];
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD v58[20];

  v58[19] = *MEMORY[0x24BDAC8D0];
  v51 = a1;
  ArgAttrsAttr = mlir::anec::A11Legacy::getArgAttrsAttr((mlir::Operation **)&v51);
  if (ArgAttrsAttr)
  {
    FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr((mlir::Operation **)&v51);
    FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    v2 = v1;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    v3 = v2;
    if (v4 != v2)
    {
      v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::Diagnostic::operator<<((uint64_t)v54, "expects argument attribute array to have the same number of elements as the number of function arguments, got ");
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
      if (!FunctionTypeAttr)
        goto LABEL_59;
      LODWORD(v52) = 5;
      *((_QWORD *)&v52 + 1) = v28;
      v29 = (char *)&v52;
      v30 = v55;
      if (v56 < v57)
        goto LABEL_50;
      v31 = v56 + 1;
      if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
        goto LABEL_81;
      goto LABEL_82;
    }
    if (v2)
    {
      LODWORD(v5) = 0;
      while (1)
      {
        v6 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
        v5 = v5;
        if (!v6)
          break;
        if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
          v6 = 0;
        v47 = v6;
        if (!v6)
          goto LABEL_65;
        Value = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
        v8 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
        if (Value != (__int128 *)v8)
        {
          v9 = (__int128 *)v8;
          do
          {
            v52 = *Value;
            FunctionTypeAttr = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v52);
            AttrData = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
            if (!v11 || (v12 = AttrData, (v13 = (char *)memchr(AttrData, 46, v11)) == 0) || v13 - v12 == -1)
            {
              v39 = "arguments may only have dialect attributes";
              goto LABEL_58;
            }
            NameDialect = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
            if (NameDialect)
            {
              if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)NameDialect + 80))(NameDialect, v51, 0, v5, v52, *((_QWORD *)&v52 + 1)))return 0;
            }
            ++Value;
          }
          while (Value != v9);
        }
        LODWORD(v5) = v5 + 1;
        if ((_DWORD)v5 == v2)
          goto LABEL_19;
      }
      v47 = 0;
LABEL_65:
      v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (!FunctionTypeAttr)
        goto LABEL_71;
      goto LABEL_70;
    }
  }
LABEL_19:
  ArgAttrsAttr = mlir::placement::ReplacedOps::getResAttrsAttr((mlir::Operation **)&v51);
  if (!ArgAttrsAttr)
    goto LABEL_37;
  FunctionTypeAttr = mlir::anec::A11Legacy::getFunctionTypeAttr((mlir::Operation **)&v51);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
  v16 = v15;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
  v3 = v16;
  if (v17 != v16)
  {
    v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (FunctionTypeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v54, "expects result attribute array to have the same number of elements as the number of function results, got ");
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    if (!FunctionTypeAttr)
      goto LABEL_59;
    LODWORD(v52) = 5;
    *((_QWORD *)&v52 + 1) = v32;
    v29 = (char *)&v52;
    v30 = v55;
    if (v56 < v57)
    {
LABEL_50:
      v33 = v30 + 24 * v56;
      v34 = *(_OWORD *)v29;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)v29 + 2);
      *(_OWORD *)v33 = v34;
      ++v56;
      if (FunctionTypeAttr)
      {
        mlir::Diagnostic::operator<<((uint64_t)v54, ", but expected ");
        if (FunctionTypeAttr)
        {
          LODWORD(v52) = 5;
          *((_QWORD *)&v52 + 1) = v3;
          v35 = (char *)&v52;
          v36 = v55;
          if (v56 >= v57)
          {
            v44 = v56 + 1;
            if (v55 <= (unint64_t)&v52 && v55 + 24 * v56 > (unint64_t)&v52)
            {
              v46 = (char *)&v52 - v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v36 = v55;
              v35 = &v46[v55];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v35 = (char *)&v52;
              v36 = v55;
            }
          }
          v37 = v36 + 24 * v56;
          v38 = *(_OWORD *)v35;
          *(_QWORD *)(v37 + 16) = *((_QWORD *)v35 + 2);
          *(_OWORD *)v37 = v38;
          ++v56;
        }
      }
LABEL_59:
      v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
LABEL_61:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v54);
      return v27;
    }
    v31 = v56 + 1;
    if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
    {
LABEL_81:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
      v29 = (char *)&v52;
      v30 = v55;
      goto LABEL_50;
    }
LABEL_82:
    v45 = (char *)&v52 - v30;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
    v30 = v55;
    v29 = &v45[v55];
    goto LABEL_50;
  }
  if (v16)
  {
    LODWORD(v5) = 0;
    while (1)
    {
      v18 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
      v5 = v5;
      if (!v18)
        break;
      if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
        v18 = 0;
      v47 = v18;
      if (!v18)
        goto LABEL_68;
      v19 = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
      v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
      if (v19 != (__int128 *)v20)
      {
        v21 = (__int128 *)v20;
        while (1)
        {
          v52 = *v19;
          FunctionTypeAttr = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v52);
          v22 = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
          if (!v23)
            break;
          v24 = v22;
          v25 = (char *)memchr(v22, 46, v23);
          if (!v25 || v25 - v24 == -1)
            break;
          v26 = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
          if (v26
            && !(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v26 + 88))(v26, v51, 0, v5, v52, *((_QWORD *)&v52 + 1)))
          {
            return 0;
          }
          if (++v19 == v21)
            goto LABEL_36;
        }
        v39 = "results may only have dialect attributes";
        goto LABEL_58;
      }
LABEL_36:
      LODWORD(v5) = v5 + 1;
      if ((_DWORD)v5 == v16)
        goto LABEL_37;
    }
    v47 = 0;
LABEL_68:
    v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (!FunctionTypeAttr)
      goto LABEL_71;
LABEL_70:
    mlir::Diagnostic::operator<<((uint64_t)v54, v41);
LABEL_71:
    *(_QWORD *)&v52 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
    v42 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v52);
    v43 = (uint64_t)v42;
    if (*v42)
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v43);
    if (FunctionTypeAttr)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
    goto LABEL_61;
  }
LABEL_37:
  if ((*((_DWORD *)v51 + 11) & 0x7FFFFF) != 1)
  {
    v39 = "expects one region";
LABEL_58:
    v48[0] = (const void **)v39;
    v49 = 259;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    goto LABEL_59;
  }
  return mlir::detail::FunctionOpInterfaceTrait<mlir::anec::A11Legacy>::verifyBody((mlir::Operation **)&v51);
}

BOOL mlir::Op<mlir::placement::ReplacedOps,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::foldHook()
{
  uint64_t v0;
  llvm *v1;
  llvm *v3[2];
  unint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v4 & 4) != 0)
    {
      if ((v4 & 2) != 0)
        v1 = (llvm *)v3;
      else
        v1 = v3[0];
      (*(void (**)(llvm *))((v4 & 0xFFFFFFFFFFFFFFF8) + 16))(v1);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v3[0], v3[1]);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  _BOOL8 v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  v6 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::placement::ReplacedOpsLiveOuts::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t (**v9)(uint64_t, uint64_t, uint64_t);
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2, a3, a4, a5);
  v8 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v9 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v10;
      else
        v9 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v10[0];
      (*(void (**)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))(v9, v5, v6, v7);
    }
    if ((v8 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::ReplacedOpsLiveOuts>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::placement::ReplacedOpsLiveOuts::print(&v7, a3);
}

BOOL mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
}

uint64_t mlir::Op<mlir::placement::ReplacedOpsLiveOuts,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StartTimer>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleT"
            "ype>::Impl<Empty>]";
      v12 = 126;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<mlir::pdl_interp::detail::GetResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    }
  }
  return v1[102];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::placement::StartTimer::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::placement::StartTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::placement::TimerHandleType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::foldHook()
{
  uint64_t *v0;
  uint64_t v1;
  llvm **v2;
  llvm *v4[2];
  unint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v1 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0)
        v2 = v4;
      else
        v2 = (llvm **)v4[0];
      (*(void (**)(_QWORD *, uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))(v2, v0);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  uint64_t *v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = (uint64_t *)v7;
      else
        v5 = (uint64_t *)v7[0];
      (*(void (**)(uint64_t *, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))(v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  char v6;
  llvm **v7;
  llvm *v8[2];
  unint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
     + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0)
    {
      if ((v9 & 2) != 0)
        v7 = v8;
      else
        v7 = (llvm **)v8[0];
      result = (*(uint64_t (**)(_QWORD *))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v7);
    }
    if ((v6 & 2) == 0)
      llvm::deallocate_buffer(v8[0], v8[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::StopTimer>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::StopTimer>,mlir::OpTrait::ZeroResults<mlir::placement::StopTimer>,mlir::OpTrait::ZeroSuccessors<mlir::placement::StopTimer>,mlir::OpTrait::OneOperand<mlir::placement::StopTimer>,mlir::OpTrait::OpInvariants<mlir::placement::StopTimer>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::placement::StopTimer>,mlir::OpTrait::ZeroResults<mlir::placement::StopTimer>,mlir::OpTrait::ZeroSuccessors<mlir::placement::StopTimer>,mlir::OpTrait::OneOperand<mlir::placement::StopTimer>,mlir::OpTrait::OpInvariants<mlir::placement::StopTimer>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::placement::__mlir_ods_local_type_constraint_PlacementOps6((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
}

uint64_t mlir::Op<mlir::placement::StopTimer,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_24C034118;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  JUMPOUT(0x20BD002F8);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x24BDAC8D0];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::placement::TensorToMemref>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::placement::TensorToMemref>,mlir::OpTrait::OneResult<mlir::placement::TensorToMemref>,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::placement::TensorToMemref>,mlir::OpTrait::ZeroSuccessors<mlir::placement::TensorToMemref>,mlir::OpTrait::OneOperand<mlir::placement::TensorToMemref>,mlir::OpTrait::OpInvariants<mlir::placement::TensorToMemref>,mlir::MemoryEffectOpInterface::Trait<mlir::placement::TensorToMemref>,mlir::OpTrait::HostTypeConversion<mlir::placement::TensorToMemref>,mlir::InferTypeOpInterface::Trait<mlir::placement::TensorToMemref>,mlir::CompatibleReturnTypesInterface::Trait<mlir::placement::TensorToMemref>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::placement::TensorToMemref::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::placement::TensorToMemref>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::TensorToMemref>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::placement::TensorToMemref>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  _QWORD *v14;
  char *v16[2];
  unint64_t v17[2];
  unint64_t v18[2];
  void *v19;
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;
  _QWORD v23[24];

  v11 = a3;
  v23[23] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x400000000;
  if (!mlir::placement::TensorToMemref::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v19))goto LABEL_8;
  mlir::ValueRange::ValueRange(v18, (uint64_t)v19, v20);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  {
    v13 = 1;
    goto LABEL_9;
  }
  v16[0] = "placement.tensor_to_memref";
  v16[1] = (char *)26;
  if (v11)
  {
    mlir::emitError((uint64_t)a2, (uint64_t)&v22);
    v14 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v22, "'", v16, "' op inferred type(s) ", (uint64_t)&v19, " are incompatible with return type(s) of operation ", a11);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v22)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  }
  else
  {
LABEL_8:
    v13 = 0;
  }
LABEL_9:
  if (v19 != v21)
    free(v19);
  return v13;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::HostTypeConversion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HostTypeConversion>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::placement::TensorToMemref::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::placement::TensorToMemref::verify(&v7) != 0;
}

BOOL mlir::Op<mlir::placement::TensorToMemref,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::HostTypeConversion,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t *mlir::Dialect::addAttribute<mlir::placement::RegionTypeAttr>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *AttributeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::placement::RegionTypeAttr,mlir::Attribute,mlir::placement::detail::RegionTypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSD_6detail21RegionTypeAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSC_6detail21RegionTypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, 0, v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::placement::RegionTypeAttr,mlir::Attribute,mlir::placement::detail::RegionTypeAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement14RegionTypeAttrES2_NSC_6detail21RegionTypeAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  mlir::MLIRContext *Context;
  unsigned __int8 **AttributeUniquer;
  uint64_t v6;
  unsigned int v7;
  _QWORD v8[2];

  v6 = a2;
  v2 = *(_DWORD *)(a2 + 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id;
  v8[1] = Context;
  return mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::RegionTypeAttr,void>::id, &v7);
}

uint64_t *mlir::Dialect::addType<mlir::placement::TimerHandleType>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  llvm **v4;
  _BYTE *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *TypeUniquer;
  uint64_t v10;
  char v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[48];
  llvm *v18[2];
  unint64_t v19;
  uint64_t (*v20)();
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  char *v23;
  void *v24;
  _BYTE *v25;
  int v26;
  _BYTE v27[48];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v27, 0, sizeof(v27));
  v25 = v27;
  v26 = 0;
  v14 = a1;
  v15 = v17;
  v16 = 0x300000000;
  v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::placement::TimerHandleType,mlir::Type,mlir::placement::detail::TimerHandleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSD_6detail22TimerHandleTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  v21 = &v13;
  v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSC_6detail22TimerHandleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  v23 = &v12;
  v24 = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, (uint64_t)&v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = v15;
  if ((_DWORD)v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v15;
  }
  if (v5 != v17)
    free(v5);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, 0, v10);
}

uint64_t mlir::detail::StorageUserBase<mlir::placement::TimerHandleType,mlir::Type,mlir::placement::detail::TimerHandleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9placement15TimerHandleTypeES2_NSC_6detail22TimerHandleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  mlir::MLIRContext *Context;
  unsigned __int8 **TypeUniquer;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  mlir::MLIRContext *v9;

  v6 = a2;
  v2 = *(_QWORD *)(a2 + 8);
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v7 = v2;
  v9 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id;
  v8[1] = &v9;
  return mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::placement::TimerHandleType,void>::id, &v7);
}

uint64_t mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  unint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  unsigned __int8 **v14;
  _QWORD v15[2];
  unsigned int *v16;
  unsigned int v17;
  _QWORD v18[2];

  v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  v17 = *a5;
  v7 = &unk_254519000;
  if ((v6 & 1) == 0)
  {
    v14 = a1;
    v7 = &unk_254519000;
    v11 = v10;
    v5 = a4;
    a1 = v14;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      v7 = (_QWORD *)&unk_254519000;
      v5 = a4;
      a1 = v14;
    }
  }
  v8 = 0x9DDFEA08EB382D69
     * (v7[373] ^ v17 ^ ((0x9DDFEA08EB382D69 * (((8 * v17) | 4) ^ v7[373] ^ v17)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                              * (((8 * v17) | 4) ^ v7[373] ^ v17)));
  v15[0] = &v17;
  v15[1] = v18;
  v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895 * ((v8 >> 47) ^ v8), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_DWORD **a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == **a1;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::RegionTypeAttrStorage * mlir::StorageUniquer::get<mlir::placement::detail::RegionTypeAttrStorage,mlir::placement::RegionType>(llvm::function_ref<void ()(mlir::placement::detail::RegionTypeAttrStorage *)>,mlir::TypeID,mlir::placement::RegionType &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = mlir::placement::detail::RegionTypeAttrStorage::construct(a2, *(int **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, unint64_t))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

unint64_t mlir::placement::detail::RegionTypeAttrStorage::construct(uint64_t a1, int *a2)
{
  int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  unint64_t result;

  v3 = *a2;
  *(_QWORD *)(a1 + 80) += 16;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 16 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    result = (*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)a1 = result + 16;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = v3;
  return result;
}

_QWORD *_ZN4llvm12function_refIFvPN4mlir9placement6detail21RegionTypeAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_14RegionTypeAttrEJNS2_10RegionTypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS5_(uint64_t *a1, _QWORD *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 **v15;
  _QWORD v16[2];
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[2];

  v5 = a4;
  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v7 = &unk_254519000;
  if ((v6 & 1) == 0)
  {
    v15 = a1;
    v7 = &unk_254519000;
    v12 = v11;
    v5 = a4;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      v7 = (_QWORD *)&unk_254519000;
      v5 = a4;
      a1 = v15;
    }
  }
  v8 = v7[373] ^ HIDWORD(v18);
  v9 = 0x9DDFEA08EB382D69 * ((8 * v18 + 8) ^ v8);
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == **a1;
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::placement::detail::TimerHandleTypeStorage * mlir::StorageUniquer::get<mlir::placement::detail::TimerHandleTypeStorage,unsigned long long>(llvm::function_ref<void ()(mlir::placement::detail::TimerHandleTypeStorage *)>,mlir::TypeID,unsigned long long &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::placement::detail::TimerHandleTypeStorage::construct(a2, *(uint64_t **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::placement::detail::TimerHandleTypeStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *result;

  v3 = *a2;
  *(_QWORD *)(a1 + 80) += 16;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 16 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a1 = result + 2;
  *result = 0;
  result[1] = v3;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir9placement6detail22TimerHandleTypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_15TimerHandleTypeEJyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS5_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::AsmParser::parseOptionalInteger<unsigned long long>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int8 v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  const char *v16;
  __int16 v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21[46];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v19 = 1;
  v18 = 0;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)a1 + 352))(a1, &v18);
  if (v5 >= 0x100u && v5 != 0)
  {
    llvm::APInt::sextOrTrunc((char *)&v18, 0x40u, (uint64_t)&v20);
    v9 = v21[0];
    if (v21[0] < 0x41)
    {
      v10 = (uint64_t)v20;
      *a2 = (uint64_t)v20;
      goto LABEL_14;
    }
    v11 = v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v20);
    v12 = v20;
    if (v11 <= 0x40)
    {
      *a2 = *v20;
    }
    else
    {
      v10 = -1;
      *a2 = -1;
      if (!v12)
      {
LABEL_14:
        v21[0] = v19;
        if (v19 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v20, v10, 0);
          if (v21[0] > 0x40)
          {
            v14 = llvm::APInt::equalSlowCase((const void **)&v20, (const void **)&v18);
            if (v20)
              MEMORY[0x20BD002D4](v20, 0x1000C8000313F17);
            if (v14)
              goto LABEL_21;
            goto LABEL_25;
          }
        }
        else
        {
          if (v19)
            v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
          else
            v13 = 0;
          v20 = (_QWORD *)(v13 & v10);
        }
        if (v20 == v18)
        {
LABEL_21:
          v7 = 1;
LABEL_28:
          v8 = 1;
          goto LABEL_29;
        }
LABEL_25:
        v16 = "integer value too large";
        v17 = 259;
        (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(&v20, a1, v4, &v16);
        if (v20)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
        v7 = 0;
        goto LABEL_28;
      }
    }
    MEMORY[0x20BD002D4]();
    v10 = *a2;
    goto LABEL_14;
  }
  v7 = v5;
  v8 = HIBYTE(v5);
LABEL_29:
  if (v19 >= 0x41 && v18)
    MEMORY[0x20BD002D4](v18, 0x1000C8000313F17);
  return v7 | (v8 << 8);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::placement::ReplacedOps::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

void mlir::detail::PDLByteCodePattern::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int16 Benefit;
  uint64_t Context;
  char *Value;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t InputAttributeNames;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE v30[128];
  void *__dst;
  unint64_t v32;
  _QWORD v33[18];

  v33[16] = *MEMORY[0x24BDAC8D0];
  v26 = a1;
  Benefit = mlir::pdl_interp::RecordMatchOp::getBenefit((mlir::pdl_interp::RecordMatchOp *)&v26);
  mlir::PatternBenefit::PatternBenefit(&v25, Benefit);
  Context = mlir::Attribute::getContext((mlir::Attribute *)(v26 + 24));
  __dst = v33;
  v32 = 0x800000000;
  InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v26);
  if (!InputAttributeNames)
    goto LABEL_9;
  Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
  v10 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
  v12 = (char *)(v10 + 8 * v11);
  v28 = v30;
  v29 = 0x800000000;
  v13 = v12 - Value;
  if ((unint64_t)(v12 - Value) < 0x41)
  {
    v14 = 0;
    v16 = 0;
    v15 = v30;
    if (v12 == Value)
    {
LABEL_4:
      v17 = v16 + (v13 >> 3);
      LODWORD(v29) = v16 + (v13 >> 3);
      if (v15 != v30)
        goto LABEL_5;
      goto LABEL_19;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, (uint64_t)v13 >> 3, 16);
    v14 = v29;
    v15 = v28;
    v16 = v29;
    if (v12 == Value)
      goto LABEL_4;
  }
  v19 = &v15[16 * v14];
  do
  {
    v20 = *(_QWORD *)Value;
    Value += 8;
    v27 = v20;
    *v19 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v27);
    v19[1] = v21;
    v19 += 2;
  }
  while (Value != v12);
  v15 = v28;
  v17 = v29 + (v13 >> 3);
  LODWORD(v29) = v29 + (v13 >> 3);
  if (v28 != v30)
  {
LABEL_5:
    if (__dst != v33)
    {
      free(__dst);
      v15 = v28;
      LODWORD(v17) = v29;
    }
    __dst = v15;
    v32 = __PAIR64__(HIDWORD(v29), v17);
    v28 = v30;
    v29 = 0;
    goto LABEL_9;
  }
LABEL_19:
  v22 = v32;
  if (v32 >= v17)
  {
    if ((_DWORD)v17)
      memmove(__dst, v30, 16 * v17);
    goto LABEL_28;
  }
  if (HIDWORD(v32) < v17)
  {
    LODWORD(v32) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v33, v17, 16);
    v22 = 0;
    v23 = v29;
    if (!(_DWORD)v29)
      goto LABEL_28;
    goto LABEL_27;
  }
  if ((_DWORD)v32)
  {
    memmove(__dst, v30, 16 * v32);
    v23 = v29;
    if (v22 == v29)
      goto LABEL_28;
    goto LABEL_27;
  }
  v22 = 0;
  v23 = v29;
  if ((_DWORD)v29)
LABEL_27:
    memcpy((char *)__dst + 16 * v22, &v28[16 * v22], 16 * v23 - 16 * v22);
LABEL_28:
  LODWORD(v32) = v17;
  LODWORD(v29) = 0;
  if (v28 != v30)
    free(v28);
LABEL_9:
  mlir::pdl_interp::RecordMatchOp::getRootKind((uint64_t)&v26, (uint64_t)&v28);
  if (v30[0])
  {
    mlir::Pattern::Pattern(a4, (uint64_t)v28, v29, v25, Context, __dst, v32);
    *(_DWORD *)(a4 + 88) = a3;
    *(_QWORD *)(a4 + 96) = a2;
    v18 = __dst;
    if (__dst == v33)
      return;
    goto LABEL_11;
  }
  mlir::Pattern::Pattern(a4, v25, Context, __dst, v32);
  *(_DWORD *)(a4 + 88) = a3;
  *(_QWORD *)(a4 + 96) = a2;
  v18 = __dst;
  if (__dst != v33)
LABEL_11:
    free(v18);
}

uint64_t mlir::detail::PDLByteCodeMutableState::updatePatternBenefit(uint64_t result, unsigned int a2, __int16 a3)
{
  *(_WORD *)(*(_QWORD *)(result + 168) + 2 * a2) = a3;
  return result;
}

_QWORD *mlir::detail::PDLByteCodeMutableState::cleanupAfterMatchAndRewrite(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;

  v1 = this;
  v2 = this[9];
  for (i = this[10]; i != v2; i -= 16)
  {
    v4 = *(_QWORD *)(i - 16);
    this = (_QWORD *)v4;
    if (v4)
      this = (_QWORD *)MEMORY[0x20BD002D4](this, 0x20C8093837F09);
  }
  v1[10] = v2;
  v5 = v1[15];
  for (j = v1[16]; j != v5; j -= 16)
  {
    v7 = *(_QWORD *)(j - 16);
    this = (_QWORD *)v7;
    if (v7)
      this = (_QWORD *)MEMORY[0x20BD002D4](this, 0x20C8093837F09);
  }
  v1[16] = v5;
  return this;
}

void mlir::detail::PDLByteCode::PDLByteCode(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  const unsigned __int8 *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v38[2];
  int v39;
  llvm *v40;
  uint64_t v41;
  int v42;
  void *v43[3];
  void *v44[8];
  int v45;
  __int16 v46;
  uint64_t Context;
  llvm *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if (*(_DWORD *)(a3 + 8))
    llvm::SmallVectorImpl<std::unique_ptr<mlir::PDLPatternConfigSet>>::operator=(a1, a3);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 112;
  *(_OWORD *)(a1 + 96) = xmmword_207AB84F0;
  *(_QWORD *)(a1 + 240) = a1 + 264;
  *(_OWORD *)(a1 + 248) = xmmword_207AB84F0;
  *(_QWORD *)(a1 + 392) = a1 + 408;
  *(_QWORD *)(a1 + 400) = 0x2000000000;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_OWORD *)(a1 + 3768) = 0u;
  *(_OWORD *)(a1 + 3778) = 0u;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43[0] = 0;
  v43[1] = 0;
  v43[2] = (void *)0x1000000000;
  v44[0] = 0;
  v44[1] = 0;
  v44[2] = (void *)0x1000000000;
  v44[3] = 0;
  v44[4] = 0;
  v44[6] = 0;
  v44[7] = 0;
  v44[5] = (void *)0x1000000000;
  v45 = 0;
  v46 = 0;
  v50 = 0;
  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  v48 = 0;
  v49 = 0;
  v51 = a1 + 64;
  v52 = a1 + 88;
  v53 = a1 + 240;
  v54 = a1 + 392;
  v55 = a1 + 3784;
  v56 = a1 + 3786;
  v57 = a1 + 3788;
  v58 = a1 + 3790;
  v59 = a1 + 3792;
  v60 = a4;
  v7 = *(uint64_t **)a5;
  v8 = *(unsigned int *)(a5 + 8);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)a5;
    v10 = a6;
    if (*v7)
      v11 = *v7 == -8;
    else
      v11 = 1;
    if (v11)
    {
      do
      {
        v13 = v9[1];
        ++v9;
        v12 = v13;
        if (v13)
          v14 = v12 == -8;
        else
          v14 = 1;
      }
      while (v14);
    }
    v15 = &v7[v8];
    if (v9 == v15)
    {
LABEL_23:
      v21 = *(uint64_t **)v10;
      v22 = *(unsigned int *)(v10 + 8);
      if ((_DWORD)v22)
      {
        v23 = *(uint64_t **)v10;
        if (*v21)
          v24 = *v21 == -8;
        else
          v24 = 1;
        if (v24)
        {
          do
          {
            v26 = v23[1];
            ++v23;
            v25 = v26;
            if (v26)
              v27 = v25 == -8;
            else
              v27 = 1;
          }
          while (v27);
        }
        v28 = &v21[v22];
        if (v23 == v28)
LABEL_43:
      }
      else
      {
        v23 = *(uint64_t **)v10;
        v28 = &v21[v22];
        if (v21 == v28)
          goto LABEL_43;
      }
      v29 = 0;
      v30 = *v23;
      do
      {
        v31 = *(const unsigned __int8 **)v30;
        v61[0] = v29;
        llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>((uint64_t)v43, (int8x16_t *)(v30 + 40), v31, v61);
        do
        {
          v32 = v23[1];
          ++v23;
          v30 = v32;
          if (v32)
            v33 = v30 == -8;
          else
            v33 = 1;
        }
        while (v33);
        ++v29;
      }
      while (v23 != v28);
      goto LABEL_43;
    }
  }
  else
  {
    v9 = *(uint64_t **)a5;
    v10 = a6;
    v15 = &v7[v8];
    if (v7 == v15)
      goto LABEL_23;
  }
  v16 = 0;
  v17 = *v9;
  do
  {
    v18 = *(const unsigned __int8 **)v17;
    v61[0] = v16;
    llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>((uint64_t)v44, (int8x16_t *)(v17 + 40), v18, v61);
    do
    {
      v19 = v9[1];
      ++v9;
      v17 = v19;
      if (v19)
        v20 = v17 == -8;
      else
        v20 = 1;
    }
    while (v20);
    ++v16;
  }
  while (v9 != v15);
  goto LABEL_23;
}

void sub_207484640(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, llvm *a14, uint64_t a15, unsigned int a16)
{
  llvm::deallocate_buffer(a14, (void *)(16 * a16));
}

uint64_t sub_207484654()
{
  uint64_t v0;

  return v0;
}

void `anonymous namespace'::Generator::generate(uint64_t *a1, unsigned int *a2)
{
  mlir::Attribute *v4;
  mlir::StringAttr *Context;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  mlir::StringAttr *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ZinIrHalH13g *v13;
  unsigned int *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t Body;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  ZinIrHalH13g *v25;
  ZinIrHalH13g *v26;
  ZinIrHalH13g *v27;
  mlir::ForwardIterator *v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  llvm *v40;
  uint64_t v41;
  llvm *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  unint64_t v53;
  unsigned __int8 v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  llvm *v58;
  uint64_t v59;
  llvm *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unsigned __int8 v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  llvm *v76;
  int v77;
  llvm *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _WORD *v83;
  _WORD *v84;
  _WORD *v85;
  unsigned int (*v86)(void);
  uint64_t *buffer;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _QWORD *v93;
  ZinIrHalH13g *v94;
  uint64_t *v95;
  unsigned int *v96;
  unint64_t v97;
  unint64_t v98;
  llvm *v99[2];
  int v100;
  int v101;
  llvm *v102[2];
  int v103;
  llvm *v104[2];
  int v105;
  __int128 v106;
  ZinIrHalH13g *v107[2];
  __int128 v108;
  __int128 v109;
  void *v110;
  uint64_t v111;
  _QWORD v112[3];
  uint64_t *v113;
  __int128 v114;
  uint64_t *(**v115)(uint64_t *, uint64_t);
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  ZinIrHalH13g *v120;
  llvm *v121;
  uint64_t *v122;
  llvm **v123;
  llvm **v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v4 = (mlir::Attribute *)(a2 + 6);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 6));
  LOWORD(v118) = 261;
  *(_QWORD *)&v116 = "matcher";
  *((_QWORD *)&v116 + 1) = 7;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v116);
  v7 = mlir::SymbolTable::lookupSymbolIn(a2, v6);
  if (v7)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(v7 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FuncOp,void>::id)
      v8 = (unsigned int *)v7;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  v96 = v8;
  v9 = (mlir::StringAttr *)mlir::Attribute::getContext(v4);
  LOWORD(v118) = 261;
  *(_QWORD *)&v116 = "rewriters";
  *((_QWORD *)&v116 + 1) = 9;
  v10 = mlir::StringAttr::get(v9, (mlir::MLIRContext *)&v116);
  v11 = mlir::SymbolTable::lookupSymbolIn(a2, v10);
  if (v11)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(v11 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
      v12 = v11;
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  mlir::Region::getOps<mlir::pdl_interp::FuncOp>((mlir::Region *)(((v12+ 64+ 16 * (((unint64_t)*(unsigned int *)(v12 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v12 + 44) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(v12 + 40)), (uint64_t)&v116);
  v106 = v116;
  *(_OWORD *)v107 = v117;
  v108 = v118;
  v109 = v119;
  v13 = (ZinIrHalH13g *)v117;
  v94 = v120;
  v95 = a1;
  if ((ZinIrHalH13g *)v117 == v120)
    goto LABEL_118;
  while (1)
  {
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    v14 = (unsigned int *)(*((uint64_t (**)(void))&v109 + 1))();
    v104[0] = (llvm *)v14;
    LOWORD(v102[0]) = 0;
    LOWORD(v99[0]) = 0;
    LOWORD(v126) = 0;
    v122 = a1;
    v123 = v102;
    v124 = v99;
    v125 = &v126;
    v15 = v14[11];
    if ((v15 & 0x7FFFFF) != 0)
    {
      v16 = (_QWORD *)((((unint64_t)&v14[4 * ((v15 >> 23) & 1) + 17] + ((v15 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * v14[10]);
      if ((_QWORD *)*v16 == v16)
        goto LABEL_22;
    }
    else
    {
      v16 = 0;
      if (!MEMORY[0])
        goto LABEL_22;
    }
    v17 = v16[1];
    v18 = v17 ? v17 - 8 : 0;
    v19 = *(unint64_t **)(v18 + 48);
    v20 = *(unint64_t **)(v18 + 56);
    if (v20 != v19)
      break;
LABEL_22:
    Body = mlir::func::FuncOp::getBody((mlir::func::FuncOp *)v104);
    v121 = (llvm *)&v122;
    v22 = *(_QWORD *)(Body + 8);
    a1 = v95;
    if (v22 != Body)
    {
      v23 = Body;
      do
      {
        v24 = v22 - 8;
        if (!v22)
          v24 = 0;
        v25 = (ZinIrHalH13g *)(v24 + 32);
        v26 = *(ZinIrHalH13g **)(v24 + 40);
        if (v26 != (ZinIrHalH13g *)(v24 + 32))
        {
          do
          {
            v27 = (ZinIrHalH13g *)*((_QWORD *)v26 + 1);
            ZinIrHalH13g::~ZinIrHalH13g(v26);
            v26 = v27;
          }
          while (v27 != v25);
        }
        v22 = *(_QWORD *)(v22 + 8);
      }
      while (v22 != v23);
    }
    v83 = (_WORD *)v95[27];
    if (LOWORD(v102[0]) > (unsigned __int16)*v83)
      *v83 = v102[0];
    v84 = (_WORD *)v95[29];
    if (LOWORD(v99[0]) > (unsigned __int16)*v84)
      *v84 = v99[0];
    v85 = (_WORD *)v95[30];
    if ((unsigned __int16)v126 > (unsigned __int16)*v85)
      *v85 = v126;
    do
    {
      mlir::Region::OpIterator::operator++((uint64_t *)&v106);
      v13 = v107[0];
      if (v107[0] == *((ZinIrHalH13g **)&v108 + 1))
        goto LABEL_13;
      v86 = (unsigned int (*)(void))v109;
      ZinIrHalH13g::~ZinIrHalH13g(v107[0]);
    }
    while (!v86());
    v13 = v107[0];
LABEL_13:
    if (v13 == v94)
    {
LABEL_118:
      v104[0] = 0;
      v104[1] = 0;
      v105 = 0;
      v102[0] = 0;
      v102[1] = 0;
      v103 = 0;
      v101 = 0;
      v115 = 0;
      buffer = (uint64_t *)llvm::allocate_buffer(0x20uLL, (std::align_val_t)8uLL);
      v114 = xmmword_207A7D540;
      *buffer = (uint64_t)v104;
      buffer[1] = (uint64_t)&v101;
      buffer[2] = (uint64_t)&v113;
      buffer[3] = (uint64_t)v102;
      v113 = buffer;
      v110 = v112;
      v111 = 0;
      v112[0] = 0;
      v112[1] = 1;
      v89 = v96[10];
      v88 = v96[11];
      v106 = 0uLL;
      v107[0] = 0;
      v107[1] = (ZinIrHalH13g *)((char *)&v108 + 8);
      *(_QWORD *)&v108 = 0x400000000;
      v99[0] = 0;
      v99[1] = 0;
      v100 = 0;
      v90 = *(_QWORD *)((((unint64_t)&v96[4 * ((v88 >> 23) & 1) + 17] + ((v88 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * v89
                      + 8);
      if (v90)
        v91 = v90 - 8;
      else
        v91 = 0;
      v98 = **(_QWORD **)(v91 + 48);
      *(_QWORD *)&v116 = 0;
      v92 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(a1, &v98, &v116);
      v93 = (_QWORD *)v116;
      if ((v92 & 1) == 0)
      {
        v93 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a1, (uint64_t)&v98, &v98, (_QWORD *)v116);
        *v93 = v98;
        *((_WORD *)v93 + 4) = 0;
      }
      *((_WORD *)v93 + 4) = 0;
      mlir::Liveness::Liveness((mlir::Liveness *)&v97, (mlir::Operation *)v96);
    }
  }
  while (1)
  {
    v29 = *v19;
    v113 = (uint64_t *)*v19;
    v30 = (uint64_t)v122;
    v31 = (*(_WORD *)v123)++;
    v32 = *(_DWORD *)(v30 + 16);
    if (!v32)
    {
      v46 = 0;
      goto LABEL_87;
    }
    v33 = *(_QWORD *)v30;
    if ((v34 & 1) == 0
    {
      v80 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v80 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v80;
    }
    v35 = 0x9DDFEA08EB382D69
        * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v29) ^ HIDWORD(v29));
    v36 = 0x9DDFEA08EB382D69 * (HIDWORD(v29) ^ (v35 >> 47) ^ v35);
    v37 = -348639895 * ((v36 >> 47) ^ v36);
    v38 = (unint64_t)v113;
    v39 = v37 & (v32 - 1);
    v40 = (llvm *)(v33 + 16 * v39);
    v41 = *(_QWORD *)v40;
    if (v113 != *(uint64_t **)v40)
      break;
LABEL_50:
    v47 = *(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(_QWORD *)v47 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      v47 = 0;
    v97 = v47;
    if (!v47)
      goto LABEL_32;
    v48 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v97) + 136);
    if (v48 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v49 = (uint64_t *)(v30 + 24);
      v64 = *(_QWORD *)(v30 + 24);
      v51 = (*(_WORD *)v124)++;
      v65 = *(_DWORD *)(v30 + 40);
      if (!v65)
        goto LABEL_79;
      v66 = (unint64_t)v113;
      if ((v67 & 1) == 0
      {
        v81 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v81 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v81;
      }
      v68 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v66) ^ HIDWORD(v66));
      v69 = 0x9DDFEA08EB382D69 * (HIDWORD(v66) ^ (v68 >> 47) ^ v68);
      v70 = (-348639895 * ((v69 >> 47) ^ v69)) & (v65 - 1);
      v58 = (llvm *)(v64 + 16 * v70);
      v71 = *(_QWORD *)v58;
      if (v113 == *(uint64_t **)v58)
        goto LABEL_32;
      v60 = 0;
      v72 = 1;
      while (v71 != -4096)
      {
        if (v60)
          v73 = 0;
        else
          v73 = v71 == -8192;
        if (v73)
          v60 = v58;
        v74 = v70 + v72++;
        v70 = v74 & (v65 - 1);
        v58 = (llvm *)(v64 + 16 * v70);
        v71 = *(_QWORD *)v58;
        if (v113 == *(uint64_t **)v58)
          goto LABEL_32;
      }
    }
    else
    {
      if (v48 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        goto LABEL_32;
      v49 = (uint64_t *)(v30 + 24);
      v50 = *(_QWORD *)(v30 + 24);
      v51 = (*(_WORD *)v125)++;
      v52 = *(_DWORD *)(v30 + 40);
      if (!v52)
      {
LABEL_79:
        v75 = 0;
LABEL_94:
        v75 *= 2;
        goto LABEL_95;
      }
      v53 = (unint64_t)v113;
      if ((v54 & 1) == 0
      {
        v82 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v82 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v82;
      }
      v55 = 0x9DDFEA08EB382D69
          * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v53) ^ HIDWORD(v53));
      v56 = 0x9DDFEA08EB382D69 * (HIDWORD(v53) ^ (v55 >> 47) ^ v55);
      v57 = (-348639895 * ((v56 >> 47) ^ v56)) & (v52 - 1);
      v58 = (llvm *)(v50 + 16 * v57);
      v59 = *(_QWORD *)v58;
      if (v113 == *(uint64_t **)v58)
        goto LABEL_32;
      v60 = 0;
      v61 = 1;
      while (v59 != -4096)
      {
        if (v60)
          v62 = 0;
        else
          v62 = v59 == -8192;
        if (v62)
          v60 = v58;
        v63 = v57 + v61++;
        v57 = v63 & (v52 - 1);
        v58 = (llvm *)(v50 + 16 * v57);
        v59 = *(_QWORD *)v58;
        if (v113 == *(uint64_t **)v58)
          goto LABEL_32;
      }
    }
    if (v60)
      v78 = v60;
    else
      v78 = v58;
    v75 = *(_DWORD *)(v30 + 40);
    v79 = *(_DWORD *)(v30 + 32);
    if (4 * v79 + 4 >= 3 * v75)
      goto LABEL_94;
    if (v75 + ~v79 - *(_DWORD *)(v30 + 36) > v75 >> 3)
    {
      ++*(_DWORD *)(v30 + 32);
      if (*(_QWORD *)v78 == -4096)
        goto LABEL_31;
      goto LABEL_30;
    }
LABEL_95:
    llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow((uint64_t)v49, v75);
    v121 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v49, (unint64_t *)&v113, &v121);
    v78 = v121;
    ++*(_DWORD *)(v30 + 32);
    if (*(_QWORD *)v78 == -4096)
      goto LABEL_31;
LABEL_30:
    --*(_DWORD *)(v30 + 36);
LABEL_31:
    *(_QWORD *)v78 = v113;
    *((_WORD *)v78 + 4) = v51;
LABEL_32:
    if (++v19 == v20)
      goto LABEL_22;
  }
  v42 = 0;
  v43 = 1;
  while (v41 != -4096)
  {
    if (v42)
      v44 = 0;
    else
      v44 = v41 == -8192;
    if (v44)
      v42 = v40;
    v45 = v39 + v43++;
    v39 = v45 & (v32 - 1);
    v40 = (llvm *)(v33 + 16 * v39);
    v41 = *(_QWORD *)v40;
    if (v113 == *(uint64_t **)v40)
      goto LABEL_50;
  }
  if (v42)
    v76 = v42;
  else
    v76 = v40;
  v46 = *(_DWORD *)(v30 + 16);
  v77 = *(_DWORD *)(v30 + 8);
  if (4 * v77 + 4 < 3 * v46)
  {
    if (v46 + ~v77 - *(_DWORD *)(v30 + 12) > v46 >> 3)
    {
      ++*(_DWORD *)(v30 + 8);
      if (*(_QWORD *)v76 == -4096)
      {
LABEL_49:
        *(_QWORD *)v76 = v113;
        *((_WORD *)v76 + 4) = v31;
        v38 = (unint64_t)v113;
        goto LABEL_50;
      }
LABEL_48:
      --*(_DWORD *)(v30 + 12);
      goto LABEL_49;
    }
  }
  else
  {
LABEL_87:
    v46 *= 2;
  }
  llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(v30, v46);
  v121 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)v30, (unint64_t *)&v113, &v121);
  v76 = v121;
  ++*(_DWORD *)(v30 + 8);
  if (*(_QWORD *)v76 == -4096)
    goto LABEL_49;
  goto LABEL_48;
}

void mlir::detail::PDLByteCode::initializeMutableState(mlir::detail::PDLByteCode *this, mlir::detail::PDLByteCodeMutableState *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _WORD *v52;
  unint64_t v53;
  char *v54;
  __int16 v55;
  uint64_t v56;
  unint64_t v57;
  _OWORD *v58;
  char *v59;
  unint64_t v60;
  __int128 v61;
  __int128 __x;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int16 *)this + 1892);
  *(_QWORD *)&__x = 0;
  v5 = (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *((_QWORD *)a2 + 1) = *(_QWORD *)a2 + 8 * v4;
  }
  else
  {
    std::vector<void const*>::__append((unint64_t *)a2, v4 - v5, (const double *)&__x);
  }
  v6 = *((_QWORD *)a2 + 3);
  v7 = *((_QWORD *)a2 + 4);
  v8 = *((unsigned __int16 *)this + 1893);
  v9 = (v7 - v6) >> 4;
  if (v8 <= v9)
  {
    if (v8 < v9)
    {
      v10 = v6 + 16 * v8;
      while (v7 != v10)
      {
        v12 = *(_QWORD *)(v7 - 16);
        v7 -= 16;
        v11 = v12;
        if (v12)
          MEMORY[0x20BD002D4](v11, 0x20C8093837F09);
      }
      *((_QWORD *)a2 + 4) = v10;
    }
  }
  else
  {
    std::vector<llvm::OwningArrayRef<mlir::Operation *>>::__append((char **)a2 + 3, v8 - v9);
  }
  v13 = *((unsigned __int16 *)this + 1894);
  mlir::ValueRange::ValueRange((unint64_t *)&__x, 0, 0);
  v14 = *((_QWORD *)a2 + 6);
  v15 = (*((_QWORD *)a2 + 7) - v14) >> 4;
  if (v13 <= v15)
  {
    if (v13 < v15)
      *((_QWORD *)a2 + 7) = v14 + 16 * v13;
  }
  else
  {
    std::vector<mlir::TypeRange>::__append((char **)a2 + 6, v13 - v15, &__x);
  }
  v16 = *((unsigned __int16 *)this + 1895);
  mlir::ValueRange::ValueRange((unint64_t *)&__x, 0, 0);
  v17 = *((_QWORD *)a2 + 12);
  v18 = (*((_QWORD *)a2 + 13) - v17) >> 4;
  if (v16 <= v18)
  {
    if (v16 < v18)
      *((_QWORD *)a2 + 13) = v17 + 16 * v16;
  }
  else
  {
    std::vector<mlir::TypeRange>::__append((char **)a2 + 12, v16 - v18, &__x);
  }
  v19 = *((_QWORD *)a2 + 18);
  v20 = *((_QWORD *)a2 + 19);
  v21 = *((unsigned __int16 *)this + 1896);
  LODWORD(__x) = 0;
  v22 = (v20 - v19) >> 2;
  if (v21 <= v22)
  {
    if (v21 < v22)
      *((_QWORD *)a2 + 19) = v19 + 4 * v21;
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)a2 + 6, v21 - v22, (std::vector<unsigned int>::const_reference)&__x);
  }
  v23 = *((unsigned int *)this + 100);
  v24 = (_BYTE *)*((_QWORD *)a2 + 21);
  if (v23 > (uint64_t)(*((_QWORD *)a2 + 23) - (_QWORD)v24) >> 1)
  {
    v25 = (_BYTE *)*((_QWORD *)a2 + 22);
    v26 = (char *)operator new(2 * v23);
    v27 = v25 - v24;
    v28 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
    v29 = v28;
    if (v25 == v24)
      goto LABEL_34;
    if ((unint64_t)(v27 - 2) >= 0x1E)
    {
      v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
      if ((unint64_t)(&v25[-(v27 & 0xFFFFFFFFFFFFFFFELL)] - v26) >= 0x20)
      {
        v30 = v27 >> 1;
        v31 = ((unint64_t)(v27 - 2) >> 1) + 1;
        v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
        v33 = &v25[-v32];
        v29 = &v28[-v32];
        v34 = &v26[2 * v30 - 16];
        v35 = (__int128 *)(v25 - 16);
        v36 = v31 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v37 = *v35;
          *((_OWORD *)v34 - 1) = *(v35 - 1);
          *(_OWORD *)v34 = v37;
          v34 -= 32;
          v35 -= 2;
          v36 -= 16;
        }
        while (v36);
        v25 = v33;
        if (v31 == (v31 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_34:
          *((_QWORD *)a2 + 21) = v29;
          *((_QWORD *)a2 + 22) = v28;
          *((_QWORD *)a2 + 23) = &v26[2 * v23];
          if (v24)
          {
            operator delete(v24);
            LODWORD(v23) = *((_DWORD *)this + 100);
          }
          goto LABEL_36;
        }
      }
    }
    else
    {
      v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFFELL];
    }
    do
    {
      v38 = *((_WORD *)v25 - 1);
      v25 -= 2;
      *((_WORD *)v29 - 1) = v38;
      v29 -= 2;
    }
    while (v25 != v24);
    goto LABEL_34;
  }
LABEL_36:
  if ((_DWORD)v23)
  {
    v39 = *((_QWORD *)this + 49);
    v40 = v39 + 104 * v23;
    v41 = (char *)*((_QWORD *)a2 + 22);
    while (1)
    {
      v43 = *(_WORD *)(v39 + 12);
      v44 = *((_QWORD *)a2 + 23);
      if ((unint64_t)v41 >= v44)
        break;
      *(_WORD *)v41 = v43;
      v42 = (uint64_t)(v41 + 2);
LABEL_39:
      *((_QWORD *)a2 + 22) = v42;
      v39 += 104;
      v41 = (char *)v42;
      if (v39 == v40)
        return;
    }
    v45 = (char *)*((_QWORD *)a2 + 21);
    v46 = v41 - v45;
    if (v41 - v45 <= -3)
      abort();
    v47 = v46 >> 1;
    v48 = v44 - (_QWORD)v45;
    if (v48 <= (v46 >> 1) + 1)
      v49 = v47 + 1;
    else
      v49 = v48;
    if (v48 >= 0x7FFFFFFFFFFFFFFELL)
      v50 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v50 = v49;
    if (v50)
    {
      if (v50 < 0)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v51 = operator new(2 * v50);
      v52 = &v51[2 * v47];
      *v52 = v43;
      v42 = (uint64_t)(v52 + 1);
      if (v41 == v45)
        goto LABEL_56;
    }
    else
    {
      v51 = 0;
      v52 = (_WORD *)(2 * v47);
      *(_WORD *)(2 * v47) = v43;
      v42 = 2 * v47 + 2;
      if (v41 == v45)
        goto LABEL_56;
    }
    v53 = v41 - 2 - v45;
    if (v53 >= 0x5E)
    {
      if (&v51[(v46 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v53 & 0xFFFFFFFFFFFFFFFELL)] > &v51[(v46 & 0xFFFFFFFFFFFFFFFELL) - 2])
      {
        v54 = v41;
      }
      else if (&v41[-(v53 & 0xFFFFFFFFFFFFFFFELL) - 2] > v41 - 2)
      {
        v54 = v41;
      }
      else if (v41 - v51 - (v46 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
      {
        v56 = (v53 >> 1) + 1;
        v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
        v54 = &v41[-v57];
        v52 = (_WORD *)((char *)v52 - v57);
        v58 = &v51[2 * v47 - 16];
        v59 = v41 - 16;
        v60 = v56 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v61 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          *v58 = v61;
          v58 -= 2;
          v59 -= 32;
          v60 -= 16;
        }
        while (v60);
        if (v56 == (v56 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_56;
      }
      else
      {
        v54 = v41;
      }
    }
    else
    {
      v54 = v41;
    }
    do
    {
      v55 = *((_WORD *)v54 - 1);
      v54 -= 2;
      *--v52 = v55;
    }
    while (v54 != v45);
LABEL_56:
    *((_QWORD *)a2 + 21) = v52;
    *((_QWORD *)a2 + 22) = v42;
    *((_QWORD *)a2 + 23) = &v51[2 * v50];
    if (v45)
      operator delete(v45);
    goto LABEL_39;
  }
}

void mlir::detail::PDLByteCode::match(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const std::nothrow_t *v32;
  unint64_t v33;
  _QWORD *v34;
  BOOL v35;
  void *v36;
  void *v37;
  unsigned __int16 *v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[32];

  v41[30] = *MEMORY[0x24BDAC8D0];
  **(_QWORD **)a5 = a2;
  v6 = *(_QWORD **)a5;
  v7 = (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3;
  v8 = *(_QWORD *)(a5 + 24);
  v9 = (*(_QWORD *)(a5 + 32) - v8) >> 4;
  v10 = *(_QWORD *)(a5 + 48);
  v11 = (*(_QWORD *)(a5 + 56) - v10) >> 4;
  v12 = a5 + 72;
  v13 = *(_QWORD *)(a5 + 96);
  v14 = (*(_QWORD *)(a5 + 104) - v13) >> 4;
  v15 = a5 + 120;
  v16 = *(_QWORD *)(a5 + 144);
  v17 = (*(_QWORD *)(a5 + 152) - v16) >> 2;
  v18 = *(_QWORD *)(a1 + 64);
  v19 = (*(_QWORD *)(a1 + 72) - v18) >> 3;
  v20 = *(unsigned __int16 **)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a5 + 168);
  v23 = (*(_QWORD *)(a5 + 176) - v22) >> 1;
  v24 = *(_QWORD *)(a1 + 392);
  v25 = *(unsigned int *)(a1 + 400);
  v26 = *(_QWORD *)(a1 + 3736);
  v27 = (*(_QWORD *)(a1 + 3744) - v26) >> 5;
  v28 = *(_QWORD *)(a1 + 3760);
  v29 = (*(_QWORD *)(a1 + 3768) - v28) >> 5;
  v38 = v20;
  v39 = v41;
  v40 = 0x600000000;
  v41[6] = v6;
  v41[7] = v7;
  v41[8] = v8;
  v41[9] = v9;
  v41[10] = v10;
  v41[11] = v11;
  v41[12] = v12;
  v41[13] = v13;
  v41[14] = v14;
  v41[15] = v15;
  v41[16] = v16;
  v41[17] = v17;
  v41[18] = v18;
  v41[19] = v19;
  v41[20] = v20;
  v41[21] = v21;
  v41[22] = v22;
  v41[23] = v23;
  v41[24] = v24;
  v41[25] = v25;
  v41[26] = v26;
  v41[27] = v27;
  v41[28] = v28;
  v41[29] = v29;
  v30 = *(_QWORD *)a4;
  v31 = *(unsigned int *)(a4 + 8);
  if (!(_DWORD)v31)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v30, (_QWORD *)(v30 + 120 * v31), v31, 0, 0);
    v36 = v39;
    if (v39 == v41)
      return;
    goto LABEL_6;
  }
  v32 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v33 = v31;
  while (1)
  {
    v34 = operator new(120 * v33, v32);
    if (v34)
      break;
    v35 = v33 > 1;
    v33 >>= 1;
    if (!v35)
      goto LABEL_5;
  }
  v37 = v34;
  std::__stable_sort<std::_ClassicAlgPolicy,mlir::detail::PDLByteCode::match(mlir::Operation *,mlir::PatternRewriter &,llvm::SmallVectorImpl<mlir::detail::PDLByteCode::MatchResult> &,mlir::detail::PDLByteCodeMutableState &)::$_0 &,mlir::detail::PDLByteCode::MatchResult*>(v30, (_QWORD *)(v30 + 120 * v31), v31, v34, v33);
  operator delete(v37);
  v36 = v39;
  if (v39 != v41)
LABEL_6:
    free(v36);
}

uint64_t `anonymous namespace'::ByteCodeExecutor::execute(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unsigned __int16 **v6;
  unsigned __int16 **v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t result;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 **v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  _QWORD *v35;
  void *v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 **v58;
  void *v59;
  uint64_t v60;
  unsigned __int16 *v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 *v69;
  unint64_t v70;
  unsigned __int16 *v71;
  unint64_t v72;
  unsigned __int16 *v73;
  unsigned __int16 **v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int16 *v77;
  unsigned __int16 **v78;
  unsigned __int16 *v79;
  unint64_t v80;
  unsigned __int16 **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int16 *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int16 **v94;
  unsigned __int16 *v95;
  unsigned __int16 *v96;
  uint64_t v97;
  unint64_t v98;
  unsigned __int16 **v99;
  _DWORD *RawStringData;
  uint64_t NumElements;
  int v102;
  uint64_t i;
  unsigned __int16 *v104;
  int v105;
  uint64_t v106;
  unsigned __int16 *v107;
  void *v108;
  unsigned __int16 *v109;
  unint64_t v110;
  unint64_t v111;
  unsigned __int16 *v112;
  unsigned int v113;
  unint64_t v114;
  unsigned __int16 *v115;
  unsigned __int16 **v116;
  unsigned __int16 *v117;
  uint64_t v118;
  unsigned __int16 **v119;
  unsigned __int16 *v120;
  unint64_t v121;
  unsigned __int16 *v122;
  unsigned int v123;
  int v124;
  unint64_t v125;
  unsigned __int16 *v126;
  unsigned __int16 **v127;
  unsigned __int16 *v128;
  uint64_t *v129;
  unsigned __int16 **v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int16 *v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  _BOOL4 v139;
  uint64_t v140;
  unsigned __int16 *v141;
  unsigned int v142;
  unint64_t v143;
  uint64_t v144;
  BOOL v145;
  unsigned __int16 **v146;
  unsigned __int16 *v147;
  unsigned int v148;
  unsigned int v149;
  _BOOL4 v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int16 *v154;
  uint64_t v155;
  unsigned __int16 *v156;
  unsigned int v157;
  unint64_t v158;
  uint64_t *v159;
  BOOL v160;
  unsigned __int16 **v161;
  unint64_t v162;
  void **Value;
  uint64_t v164;
  uint64_t v165;
  void **v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unsigned __int16 *v172;
  unsigned __int16 **v173;
  unsigned __int16 *v174;
  int v175;
  int v176;
  int v177;
  unsigned __int16 *v178;
  unint64_t v179;
  unsigned __int16 *v180;
  uint64_t v181;
  unsigned int v182;
  unint64_t v183;
  BOOL v184;
  unsigned __int16 **v185;
  unsigned __int16 *v186;
  uint64_t v187;
  unsigned __int16 **v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned __int16 *v196;
  int v197;
  unint64_t v198;
  unsigned __int16 *v199;
  unsigned __int16 **v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  char *v207;
  unint64_t v208;
  unsigned __int16 *v209;
  unsigned __int16 **v210;
  _QWORD *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned __int16 *v215;
  uint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  unsigned __int16 *v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int16 *v224;
  unsigned int v225;
  unint64_t v226;
  uint64_t v227;
  BOOL v228;
  unsigned __int16 **v229;
  unint64_t v230;
  void *v231;
  uint64_t AttrData;
  uint64_t v233;
  uint64_t InherentAttr;
  char v235;
  uint64_t v236;
  unsigned __int16 *v237;
  unsigned int v238;
  uint64_t v239;
  unsigned __int16 *v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int16 *v243;
  unsigned int v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int16 *v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  unsigned __int16 *v252;
  unsigned int v253;
  uint64_t v254;
  unsigned __int16 *v255;
  uint64_t v256;
  uint64_t v257;
  unsigned __int16 *v258;
  unsigned int v259;
  uint64_t v260;
  unint64_t v261;
  unsigned __int16 *v262;
  uint64_t NextResultAtOffset;
  uint64_t v264;
  char v265;
  _QWORD *v266;
  uint64_t v267;
  unsigned __int16 *v268;
  __n128 *v269;
  void *v270;
  void *v271;
  uint64_t v272;
  unint64_t v273;
  unsigned int v274;
  uint64_t v275;
  unint64_t v276;
  unsigned __int16 *v277;
  unsigned __int16 **v278;
  unsigned __int16 *v279;
  unint64_t v280;
  unsigned __int16 **v281;
  void **v282;
  uint64_t v283;
  uint64_t v284;
  void **v285;
  uint64_t v286;
  unsigned __int16 *v287;
  uint64_t *v288;
  unint64_t v289;
  unsigned __int16 **v290;
  void **v291;
  uint64_t v292;
  uint64_t v293;
  void **v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int16 *v302;
  uint64_t v303;
  unint64_t v304;
  unsigned __int16 **v305;
  uint64_t isValidIntOrFloat;
  unsigned __int8 (*v307)(uint64_t, unint64_t, uint64_t, void *, void *, unint64_t, uint64_t *);
  uint64_t Context;
  mlir::MLIRContext *v309;
  unint64_t Dictionary;
  uint64_t *v311;
  unsigned __int16 *v312;
  size_t v313;
  unint64_t v314;
  void *v315;
  _OWORD *v316;
  _OWORD *v317;
  _QWORD *v318;
  void *v319;
  void *v320;
  uint64_t v321;
  BOOL v322;
  _QWORD *v323;
  _QWORD *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  unint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  char v331;
  __int128 **v332;
  uint64_t v333;
  unsigned __int16 *v334;
  uint64_t v335;
  __int128 v336;
  unsigned __int16 *v337;
  unsigned __int16 *v338;
  uint64_t v339;
  int v340;
  unsigned __int16 *v341;
  __int128 v342;
  uint64_t v343;
  unsigned __int16 *v344;
  _QWORD *v345;
  uint64_t v346;
  unsigned __int16 *v347;
  _QWORD *v348;
  void *v349;
  void *v350;
  void *v351;
  uint64_t v352;
  void *v353;
  _QWORD *canMapOperands;
  int v357;
  int v358;
  unsigned __int16 *v359;
  int v360;
  unint64_t v361;
  unsigned __int16 *v362;
  unsigned __int16 **v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  unint64_t v370;
  _BYTE *v371;
  uint64_t v372;
  BOOL v373;
  unsigned __int16 *v374;
  unsigned __int16 *v375;
  uint64_t **v376;
  _BOOL4 v377;
  void *v378;
  unint64_t v379;
  uint64_t v380;
  int *v381;
  unint64_t v382;
  unsigned int v383;
  int *v384;
  _BOOL4 v385;
  void *v386;
  unint64_t v387;
  uint64_t v388;
  int *v389;
  unint64_t v390;
  unsigned int v391;
  int *v392;
  _QWORD *v393;
  _QWORD *v394;
  void *v395;
  uint64_t v396;
  unsigned __int16 *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  int32x4_t *v401;
  int32x4_t v402;
  uint64_t v403;
  int32x4_t v404;
  int v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  int32x4_t *v409;
  int32x4_t v410;
  uint64_t v411;
  int32x4_t v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  unsigned __int16 **v419;
  void **v421;
  mlir::OpBuilder *v422;
  unsigned __int16 **v423;
  unsigned __int16 **v425;
  void *__src[2];
  uint64_t v427;
  uint64_t v428;
  _BYTE *v429;
  uint64_t v430;
  _BYTE v431[32];
  _BYTE v432[16];
  _BYTE *v433;
  uint64_t v434;
  _BYTE v435[48];
  uint64_t *v436;
  uint64_t v437;
  uint64_t v438[3];
  unsigned int v439;
  uint64_t *v440;
  uint64_t v441;
  uint64_t v442;
  void *v443[2];
  _BYTE v444[256];
  __int128 v445;
  uint64_t v446;

  v446 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 9;
  v7 = a1 + 21;
  v419 = a1 + 23;
  v417 = a1 + 3;
  v418 = (uint64_t)(a1 + 1);
  v423 = a1 + 9;
  v422 = (mlir::OpBuilder *)(a2 + 8);
  v425 = a1 + 21;
  while (2)
  {
    v15 = *a1;
    v17 = *a1 + 1;
    v16 = **a1;
    *a1 = v17;
    result = 1;
    switch(v16)
    {
      case 0:
        *a1 = v15 + 2;
        v4 = v15[1];
        v104 = a1[29];
        __src[0] = &v427;
        __src[1] = (void *)0x1000000000;
        v105 = *(*a1)++;
        v443[0] = __src[0];
        v443[1] = (void *)LODWORD(__src[1]);
        v106 = *(_QWORD *)&v104[16 * v4 + 12];
        if (!v106)
          goto LABEL_548;
        v107 = &(*a1)[2
                    * (v105 == ((*(unsigned __int8 (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v106 + 48))(v106, a2, v443) != 0))];
        *a1 = v107;
        *a1 = &a1[23][*(unsigned int *)v107];
        v108 = __src[0];
        if (__src[0] != &v427)
          goto LABEL_472;
        continue;
      case 1:
        *a1 = v15 + 2;
        v4 = v15[1];
        v109 = a1[31];
        v443[0] = v444;
        v443[1] = (void *)0x1000000000;
        v110 = *(*a1)++;
        __src[0] = &v427;
        __src[1] = (void *)0x300000000;
        v429 = v431;
        v430 = 0x300000000;
        v433 = v435;
        v434 = 0x300000000;
        v436 = v438;
        v437 = 0x300000000;
        v440 = &v442;
        v441 = 0x300000000;
        if (v110 >= 4)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v429, v431, v110, 16);
          if (HIDWORD(v434) < v110)
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v433, v435, v110, 16);
        }
        *(void **)&v445 = v443[0];
        *((_QWORD *)&v445 + 1) = LODWORD(v443[1]);
        v330 = *(_QWORD *)&v109[16 * v4 + 12];
        if (!v330)
LABEL_548:
          std::__throw_bad_function_call[abi:nn180100]();
        v331 = (*(uint64_t (**)(uint64_t, uint64_t, void **, __int128 *))(*(_QWORD *)v330 + 48))(v330, a2, __src, &v445);
        if (!LODWORD(__src[1]))
          goto LABEL_345;
        v332 = (__int128 **)__src[0];
        v333 = 16 * LODWORD(__src[1]);
        do
        {
          v340 = *((_DWORD *)v332 + 2);
          if (v340 == 5)
          {
            v334 = a1[16];
            v335 = 8 * **a1;
            v336 = **v332;
            ++*a1;
            *(_OWORD *)&v334[v335] = v336;
            v337 = a1[16];
LABEL_339:
            v338 = &v337[v335];
            goto LABEL_340;
          }
          if (v340 == 3)
          {
            v341 = a1[13];
            v335 = 8 * **a1;
            v342 = **v332;
            ++*a1;
            *(_OWORD *)&v341[v335] = v342;
            v337 = a1[13];
            goto LABEL_339;
          }
          v338 = (unsigned __int16 *)*v332;
LABEL_340:
          v339 = *(*a1)++;
          *(_QWORD *)&a1[9][4 * v339] = v338;
          v332 += 2;
          v333 -= 16;
        }
        while (v333);
LABEL_345:
        if ((_DWORD)v437)
        {
          v4 = (unint64_t)v436;
          v343 = 16 * v437;
          do
          {
            while (1)
            {
              v344 = a1[15];
              v345 = (_QWORD *)*((_QWORD *)v344 + 1);
              if ((unint64_t)v345 < *((_QWORD *)v344 + 2))
                break;
              *((_QWORD *)v344 + 1) = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)a1[15], v4);
              v4 += 16;
              v343 -= 16;
              if (!v343)
                goto LABEL_350;
            }
            *v345 = 0;
            v345[1] = 0;
            *(_OWORD *)v345 = *(_OWORD *)v4;
            *(_QWORD *)v4 = 0;
            *(_QWORD *)(v4 + 8) = 0;
            v4 += 16;
            *((_QWORD *)v344 + 1) = v345 + 2;
            v343 -= 16;
          }
          while (v343);
        }
LABEL_350:
        if ((_DWORD)v441)
        {
          v4 = (unint64_t)v440;
          v346 = 16 * v441;
          do
          {
            while (1)
            {
              v347 = a1[18];
              v348 = (_QWORD *)*((_QWORD *)v347 + 1);
              if ((unint64_t)v348 < *((_QWORD *)v347 + 2))
                break;
              *((_QWORD *)v347 + 1) = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)a1[18], v4);
              v4 += 16;
              v346 -= 16;
              if (!v346)
                goto LABEL_355;
            }
            *v348 = 0;
            v348[1] = 0;
            *(_OWORD *)v348 = *(_OWORD *)v4;
            *(_QWORD *)v4 = 0;
            *(_QWORD *)(v4 + 8) = 0;
            v4 += 16;
            *((_QWORD *)v347 + 1) = v348 + 2;
            v346 -= 16;
          }
          while (v346);
        }
LABEL_355:
        mlir::PDLResultList::~PDLResultList((mlir::PDLResultList *)__src);
        if (v443[0] != v444)
          free(v443[0]);
        if (v331)
          continue;
        return 0;
      case 2:
        v113 = v15[2];
        v112 = v15 + 2;
        v111 = v113;
        *a1 = v112;
        v114 = *(v112 - 1);
        v115 = a1[10];
        if ((unint64_t)v115 <= v114)
          v116 = v7;
        else
          v116 = v6;
        if ((unint64_t)v115 <= v114)
          v117 = a1[10];
        else
          v117 = 0;
        v118 = *(_QWORD *)&(*v116)[4 * (v114 - (_QWORD)v117)];
        *a1 = v112 + 1;
        if ((unint64_t)v115 <= v111)
          v119 = v7;
        else
          v119 = v6;
        if ((unint64_t)v115 > v111)
          v115 = 0;
        v120 = &v112[2 * (v118 != *(_QWORD *)&(*v119)[4 * (v111 - (_QWORD)v115)]) + 1];
        *a1 = v120;
        v53 = *(unsigned int *)v120;
        goto LABEL_507;
      case 3:
        v123 = v15[3];
        v122 = v15 + 3;
        v121 = v123;
        v124 = *(v122 - 2);
        *a1 = v122;
        v125 = *(v122 - 1);
        v126 = a1[10];
        if ((unint64_t)v126 <= v125)
          v127 = v7;
        else
          v127 = v6;
        if ((unint64_t)v126 <= v125)
          v128 = a1[10];
        else
          v128 = 0;
        v129 = *(uint64_t **)&(*v127)[4 * (v125 - (_QWORD)v128)];
        *a1 = v122 + 1;
        if ((unint64_t)v126 <= v121)
          v130 = v7;
        else
          v130 = v6;
        if ((unint64_t)v126 > v121)
          v126 = 0;
        v131 = *(uint64_t **)&(*v130)[4 * (v121 - (_QWORD)v126)];
        if (v124 != 3)
        {
          v4 = v129[1];
          if (v4 != v131[1])
            goto LABEL_511;
          v349 = (void *)*v131;
          v350 = (void *)*v129;
          __src[0] = (void *)*v129;
          __src[1] = 0;
          v443[0] = v349;
          v443[1] = 0;
          if (v4)
          {
            v351 = 0;
            while (1)
            {
              v352 = mlir::ValueRange::dereference_iterator(__src, (uint64_t)v351);
              if (v352 != mlir::ValueRange::dereference_iterator(v443, (uint64_t)v443[1]))
                goto LABEL_511;
              v351 = ++__src[1];
              v353 = ++v443[1];
              if (__src[0] == v350 && v351 == (void *)v4)
                break;
              if (v443[0] == v349 && v353 == (void *)v4)
                goto LABEL_511;
            }
            if (v443[0] != v349)
            {
LABEL_511:
              v398 = 2;
LABEL_512:
              v134 = &(*a1)[v398];
              *a1 = v134;
              goto LABEL_506;
            }
          }
          else
          {
            v353 = 0;
          }
          v322 = v353 != (void *)v4;
          v398 = 2;
          if (!v322)
            v398 = 0;
          goto LABEL_512;
        }
        v132 = v129[1];
        if (v132 == v131[1])
        {
          if (std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(*v129, 0, *v129, v132, *v131, 0, *v131, v132))
          {
            v133 = 0;
          }
          else
          {
            v133 = 2;
          }
          v134 = &(*a1)[v133];
          *a1 = v134;
        }
        else
        {
          v134 = v122 + 3;
          *a1 = v122 + 3;
        }
LABEL_506:
        v53 = *(unsigned int *)v134;
LABEL_507:
        v54 = a1[23];
LABEL_508:
        *a1 = &v54[v53];
        continue;
      case 4:
        goto LABEL_421;
      case 5:
        *a1 = v15 + 2;
        v135 = *(_QWORD *)&a1[9][4 * v15[1]];
        v136 = *((_DWORD *)v15 + 1);
        v71 = v15 + 5;
        *a1 = v15 + 5;
        v137 = *(_DWORD *)(v135 + 44);
        if (v15[4])
        {
          if ((v137 & 0x800000) != 0)
            v138 = *(_DWORD *)(v135 + 68);
          else
            v138 = 0;
          v139 = v138 < v136;
        }
        else
        {
          if ((v137 & 0x800000) != 0)
            v357 = *(_DWORD *)(v135 + 68);
          else
            v357 = 0;
          v139 = v357 != v136;
        }
        v75 = 2 * v139;
        goto LABEL_396;
      case 6:
        v142 = v15[2];
        v141 = v15 + 2;
        v140 = v142;
        *a1 = v141;
        v143 = (unint64_t)a1[10];
        v144 = *(_QWORD *)&a1[9][4 * *(v141 - 1)];
        *a1 = v141 + 1;
        v145 = v143 > v142;
        if (v143 <= v142)
          v146 = v7;
        else
          v146 = v6;
        if (v145)
          v143 = 0;
        v147 = &v141[2 * (*(_QWORD *)(v144 + 48) != *(_QWORD *)&(*v146)[4 * (v140 - v143)]) + 1];
        *a1 = v147;
        v53 = *(unsigned int *)v147;
        goto LABEL_507;
      case 7:
        *a1 = v15 + 2;
        v148 = *((_DWORD *)v15 + 1);
        v149 = *(_DWORD *)(*(_QWORD *)&a1[9][4 * v15[1]] + 36);
        v322 = v149 == v148;
        v150 = v149 < v148;
        v151 = !v322;
        v152 = 2 * v151;
        v153 = 2 * v150;
        if (!v15[4])
          v153 = v152;
        v154 = &v15[v153 + 5];
        *a1 = v154;
        v53 = *(unsigned int *)v154;
        goto LABEL_507;
      case 8:
        v157 = v15[2];
        v156 = v15 + 2;
        v155 = v157;
        *a1 = v156;
        v158 = (unint64_t)a1[10];
        v159 = *(uint64_t **)&a1[9][4 * *(v156 - 1)];
        *a1 = v156 + 1;
        v160 = v158 > v157;
        if (v158 <= v157)
          v161 = v7;
        else
          v161 = v6;
        if (v160)
          v162 = 0;
        else
          v162 = v158;
        v443[0] = *(void **)&(*v161)[4 * (v155 - v162)];
        Value = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v443);
        v164 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v443);
        v166 = (void **)(v164 + 8 * v165);
        v167 = v159[1];
        if (v167 != v166 - Value)
          goto LABEL_497;
        v4 = 0;
        if (!v167)
          goto LABEL_493;
        v168 = *v159;
        while (Value != v166)
        {
          v169 = mlir::TypeRange::dereference_iterator(v168, v4);
          __src[0] = *Value;
          if (v169 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src))
            goto LABEL_497;
          ++v4;
          ++Value;
          if (v167 == v4)
            goto LABEL_494;
        }
        Value = v166;
LABEL_493:
        if (v4 != v167)
        {
LABEL_497:
          v396 = 2;
          goto LABEL_498;
        }
LABEL_494:
        v396 = 2;
        if (Value == v166)
          v396 = 0;
LABEL_498:
        v397 = &(*a1)[v396];
        *a1 = v397;
        *a1 = &a1[23][*(unsigned int *)v397];
        continue;
      case 9:
        *a1 = v15 + 2;
        ++*(_DWORD *)&a1[19][2 * v15[1]];
        v25 = *((unsigned int *)a1 + 4);
        *a1 = *(unsigned __int16 **)&a1[1][4 * v25 - 4];
        *((_DWORD *)a1 + 4) = v25 - 1;
        continue;
      case 10:
        v26 = v15[1];
        v27 = v6;
        v28 = v15[2];
        *a1 = v15 + 4;
        v29 = v15[3];
        v30 = a1[10];
        if ((unint64_t)v30 > v29)
          v30 = 0;
        else
          v27 = v7;
        *(_QWORD *)&v445 = *(_QWORD *)&(*v27)[4 * (v29 - (_QWORD)v30)];
        v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v445);
        v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v445);
        v33 = v31 + 8 * v32;
        if (v33 == v4)
        {
          mlir::ValueRange::ValueRange((unint64_t *)__src, 0, 0);
          *(_OWORD *)&a1[13][8 * v28] = *(_OWORD *)__src;
        }
        else
        {
          v34 = a1[15];
          v35 = (_QWORD *)operator new[]();
          bzero(v35, v33 - v4);
          __src[0] = v35;
          __src[1] = (void *)((uint64_t)(v33 - v4) >> 3);
          do
          {
            v36 = *(void **)v4;
            v4 += 8;
            v443[0] = v36;
            *v35++ = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v443);
          }
          while (v4 != v33);
          v37 = (_OWORD *)*((_QWORD *)v34 + 1);
          if ((unint64_t)v37 >= *((_QWORD *)v34 + 2))
          {
            v38 = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)v34, (uint64_t)__src);
          }
          else
          {
            *v37 = *(_OWORD *)__src;
            __src[0] = 0;
            __src[1] = 0;
            v38 = v37 + 1;
          }
          *((_QWORD *)v34 + 1) = v38;
          mlir::ValueRange::ValueRange((unint64_t *)v443, *((_QWORD *)v38 - 2), *((_QWORD *)v38 - 1));
          *(_OWORD *)&a1[13][8 * v28] = *(_OWORD *)v443;
          if (__src[0])
            MEMORY[0x20BD002D4](__src[0], 0x20C8093837F09);
        }
        *(_QWORD *)&a1[9][4 * v26] = &a1[13][8 * v28];
        v6 = v423;
        continue;
      case 11:
        v170 = v15[1];
        *a1 = v15 + 3;
        v171 = v15[2];
        v172 = a1[10];
        if ((unint64_t)v172 <= v171)
          v173 = v7;
        else
          v173 = v6;
        if ((unint64_t)v172 > v171)
          v172 = 0;
        mlir::OperationState::OperationState(__src, a4, *(_QWORD *)&(*v173)[4 * (v171 - (_QWORD)v172)]);
        v174 = *a1 + 1;
        v175 = **a1;
        *a1 = v174;
        v4 = (unint64_t)v432;
        if (v175)
        {
          do
          {
            v178 = *a1;
            v179 = (*a1)[1];
            ++*a1;
            v182 = *v178;
            v180 = v178 + 2;
            v181 = v182;
            v183 = (unint64_t)a1[10];
            v184 = v183 > v182;
            if (v183 <= v182)
              v185 = v7;
            else
              v185 = v6;
            if (v184)
              v186 = 0;
            else
              v186 = a1[10];
            v187 = *(_QWORD *)&(*v185)[4 * (v181 - (_QWORD)v186)];
            *a1 = v180;
            if (v183 <= v179)
              v188 = v7;
            else
              v188 = v6;
            if (v183 <= v179)
              v189 = v183;
            else
              v189 = 0;
            v190 = *(_QWORD *)&(*v188)[4 * (v179 - v189)];
            if (v190)
            {
              ZinMirCacheTensors::ZinMirCacheTensors(v443, v187, v190);
              mlir::NamedAttrList::push_back((uint64_t)v432, (uint64_t)v443[0], (uint64_t)v443[1]);
            }
            --v175;
          }
          while (v175);
          v176 = *(*a1)++;
          if (!v176)
            goto LABEL_304;
        }
        else
        {
          v177 = *v174;
          v176 = v177;
          *a1 = v174 + 1;
          if (!v177)
            goto LABEL_304;
        }
        if (v176 == 0xFFFF)
        {
          v307 = *(unsigned __int8 (**)(uint64_t, unint64_t, uint64_t, void *, void *, unint64_t, uint64_t *))mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>((uint64_t)__src[1] + 32);
          Context = mlir::Attribute::getContext((mlir::Attribute *)__src);
          v4 = (unint64_t)__src[0];
          mlir::ValueRange::ValueRange((unint64_t *)v443, v427, v428);
          v309 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)__src);
          Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v432, v309);
          v311 = v440;
          mlir::ValueRange::ValueRange((unint64_t *)&v445, v438[2], v439);
          if (!v307(Context, v4, 1, v443[0], v443[1], Dictionary, v311))
            goto LABEL_305;
        }
        else
        {
          v358 = 0;
          do
          {
            while (1)
            {
              v359 = *a1;
              v360 = **a1;
              *a1 += 2;
              v361 = v359[1];
              if (v360 != 2)
                break;
              v362 = a1[10];
              if ((unint64_t)v362 <= v361)
                v363 = v7;
              else
                v363 = v6;
              if ((unint64_t)v362 > v361)
                v362 = 0;
              v364 = *(_QWORD *)&(*v363)[4 * (v361 - (_QWORD)v362)];
              v365 = v430;
              if (v430 >= (unint64_t)HIDWORD(v430))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v429, v431, v430 + 1, 8);
                v365 = v430;
              }
              *(_QWORD *)&v429[8 * v365] = v364;
              LODWORD(v430) = v430 + 1;
              if (++v358 == v176)
                goto LABEL_304;
            }
            v366 = *(uint64_t **)&(*v6)[4 * v361];
            v367 = *v366;
            v368 = v366[1];
            v369 = v430;
            v370 = v368 + v430;
            if (v370 > HIDWORD(v430))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v429, v431, v370, 8);
              v369 = v430;
            }
            if (v368)
            {
              v4 = 0;
              v371 = &v429[8 * v369];
              do
              {
                *(_QWORD *)&v371[8 * v4] = mlir::TypeRange::dereference_iterator(v367, v4);
                ++v4;
              }
              while (v368 != v4);
              v369 = v430;
            }
            LODWORD(v430) = v369 + v368;
            ++v358;
          }
          while (v358 != v176);
        }
LABEL_304:
        *(_QWORD *)&(*v6)[4 * v170] = mlir::OpBuilder::create(v422, (const mlir::OperationState *)__src);
LABEL_305:
        mlir::OperationState::~OperationState((mlir::OperationState *)__src);
        continue;
      case 12:
        v191 = v15[1];
        v192 = v15[2];
        __src[0] = &v427;
        __src[1] = (void *)0x600000000;
        *a1 = v15 + 4;
        v193 = v15[3];
        if (!v15[3])
          goto LABEL_311;
        v194 = 0;
        v195 = 0;
        do
        {
          while (1)
          {
            v196 = *a1;
            v197 = **a1;
            *a1 += 2;
            v198 = v196[1];
            if (v197 != 2)
              break;
            v199 = a1[10];
            if ((unint64_t)v199 <= v198)
              v200 = v7;
            else
              v200 = v6;
            if ((unint64_t)v199 > v198)
              v199 = 0;
            v201 = *(_QWORD *)&(*v200)[4 * (v198 - (_QWORD)v199)];
            if (v194 >= HIDWORD(__src[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v427, v194 + 1, 8);
              v194 = __src[1];
            }
            *((_QWORD *)__src[0] + v194) = v201;
            v194 = ++LODWORD(__src[1]);
            if (++v195 == v193)
              goto LABEL_306;
          }
          v202 = *(uint64_t **)&(*v6)[4 * v198];
          v203 = *v202;
          v204 = v202[1];
          v205 = v204 + v194;
          if (v205 > HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v427, v205, 8);
            v194 = __src[1];
          }
          if (v204)
          {
            v206 = 0;
            v207 = (char *)__src[0] + 8 * v194;
            do
            {
              *(_QWORD *)&v207[8 * v206] = mlir::TypeRange::dereference_iterator(v203, v206);
              ++v206;
            }
            while (v204 != v206);
            v194 = __src[1];
            v7 = v425;
          }
          v194 += v204;
          LODWORD(__src[1]) = v194;
          ++v195;
        }
        while (v195 != v193);
LABEL_306:
        if (v194)
        {
          v312 = a1[15];
          v313 = 8 * v194;
          v314 = v194;
          v315 = (void *)operator new[]();
          bzero(v315, v313);
          v443[0] = v315;
          v443[1] = (void *)v314;
          if (LODWORD(__src[1]))
            memmove(v315, __src[0], 8 * LODWORD(__src[1]));
          v316 = (_OWORD *)*((_QWORD *)v312 + 1);
          v4 = (unint64_t)&v427;
          if ((unint64_t)v316 >= *((_QWORD *)v312 + 2))
          {
            v317 = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)v312, (uint64_t)v443);
          }
          else
          {
            *v316 = *(_OWORD *)v443;
            v443[1] = 0;
            v443[0] = 0;
            v317 = v316 + 1;
          }
          *((_QWORD *)v312 + 1) = v317;
          mlir::ValueRange::ValueRange((unint64_t *)&v445, *((_QWORD *)v317 - 2), *((_QWORD *)v317 - 1));
          *(_OWORD *)&a1[13][8 * v192] = v445;
          if (v443[0])
            MEMORY[0x20BD002D4](v443[0], 0x20C8093837F09);
        }
        else
        {
LABEL_311:
          mlir::ValueRange::ValueRange((unint64_t *)v443, 0, 0);
          *(_OWORD *)&a1[13][8 * v192] = *(_OWORD *)v443;
          v4 = (unint64_t)&v427;
        }
        *(_QWORD *)&a1[9][4 * v191] = &a1[13][8 * v192];
        v108 = __src[0];
        if (__src[0] != &v427)
LABEL_472:
          free(v108);
        continue;
      case 13:
        v39 = v15[1];
        *a1 = v15 + 3;
        v40 = v15[2];
        __src[0] = &v427;
        __src[1] = (void *)0x600000000;
        v41 = LODWORD(__src[1]);
        if (LODWORD(__src[1]))
        {
          v42 = a1[18];
          v4 = operator new[]();
          bzero((void *)v4, 8 * v41);
          v443[0] = (void *)v4;
          v443[1] = (void *)v41;
          if (LODWORD(__src[1]))
            memmove((void *)v4, __src[0], 8 * LODWORD(__src[1]));
          v43 = (_OWORD *)*((_QWORD *)v42 + 1);
          if ((unint64_t)v43 >= *((_QWORD *)v42 + 2))
          {
            v44 = std::vector<llvm::OwningArrayRef<mlir::Type>>::__push_back_slow_path<llvm::OwningArrayRef<mlir::Type>>((void **)v42, (uint64_t)v443);
          }
          else
          {
            *v43 = *(_OWORD *)v443;
            v443[1] = 0;
            v443[0] = 0;
            v44 = v43 + 1;
          }
          *((_QWORD *)v42 + 1) = v44;
          mlir::ValueRange::ValueRange((unint64_t *)&v445, *((_QWORD *)v44 - 2), *((_QWORD *)v44 - 1));
          *(_OWORD *)&a1[16][8 * v40] = v445;
          if (v443[0])
            MEMORY[0x20BD002D4](v443[0], 0x20C8093837F09);
        }
        else
        {
          mlir::ValueRange::ValueRange((unint64_t *)v443, 0, 0);
          *(_OWORD *)&a1[16][8 * v40] = *(_OWORD *)v443;
        }
        *(_QWORD *)&a1[9][4 * v39] = &a1[16][8 * v40];
        v108 = __src[0];
        if (__src[0] != &v427)
          goto LABEL_472;
        continue;
      case 14:
        *a1 = v15 + 2;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)&a1[9][4 * v15[1]]);
        continue;
      case 15:
        *a1 = v15 + 2;
        v208 = v15[1];
        v209 = a1[10];
        if ((unint64_t)v209 <= v208)
          v210 = v7;
        else
          v210 = v6;
        if ((unint64_t)v209 > v208)
          v209 = 0;
        v211 = *(_QWORD **)&(*v210)[4 * (v208 - (_QWORD)v209)];
        v212 = *((unsigned int *)v15 + 1);
        *a1 = v15 + 5;
        v213 = v15[4];
        if (v211)
        {
          if (v211[1] <= v212)
            v214 = 0;
          else
            v214 = *(_QWORD *)(*v211 + 8 * v212);
          *(_QWORD *)&(*v6)[4 * v213] = v214;
        }
        else
        {
          *(_QWORD *)&(*v6)[4 * v213] = 0;
        }
        continue;
      case 16:
        *a1 = v15 + 2;
        v215 = a1[9];
        v216 = *(uint64_t **)&v215[4 * v15[1]];
        v217 = *((unsigned int *)v15 + 1);
        *a1 = v15 + 5;
        v218 = v15[4];
        if (v216)
        {
          if (v216[1] <= v217)
            *(_QWORD *)&v215[4 * v218] = 0;
          else
            *(_QWORD *)&(*v6)[4 * v218] = mlir::TypeRange::dereference_iterator(*v216, v217);
        }
        else
        {
          *(_QWORD *)&v215[4 * v218] = 0;
        }
        continue;
      case 17:
        *a1 = v15 + 2;
        v219 = a1[9];
        v220 = *(_QWORD **)&v219[4 * v15[1]];
        v221 = *((unsigned int *)v15 + 1);
        *a1 = v15 + 5;
        v222 = v15[4];
        if (!v220)
          goto LABEL_212;
        if (v220[1] <= v221)
        {
          *(_QWORD *)&v219[4 * v222] = 0;
        }
        else
        {
          v220 = (_QWORD *)mlir::ValueRange::dereference_iterator(v220, v221);
          v219 = *v6;
LABEL_212:
          *(_QWORD *)&v219[4 * v222] = v220;
        }
        continue;
      case 18:
        return result;
      case 19:
        v45 = v15[1];
        v46 = v15[2];
        v47 = v15 + 5;
        *a1 = v15 + 5;
        v48 = v15[4];
        v49 = a1[19];
        v50 = &a1[11][8 * v45];
        v51 = *(unsigned int *)&v49[2 * v48];
        if (*((_QWORD *)v50 + 1) <= v51)
        {
          *(_DWORD *)&v49[2 * v48] = 0;
          *a1 = v47;
          v53 = *(unsigned int *)v47;
          v54 = *v419;
        }
        else
        {
          *(_QWORD *)&a1[9][4 * v46] = *(_QWORD *)(*(_QWORD *)v50 + 8 * v51);
          v52 = *((unsigned int *)a1 + 4);
          if (v52 >= *((unsigned int *)a1 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v418, v417, v52 + 1, 8);
            v52 = *((unsigned int *)a1 + 4);
          }
          *(_QWORD *)&a1[1][4 * v52] = v15;
          ++*((_DWORD *)a1 + 4);
          v53 = 2;
          v54 = *a1;
        }
        goto LABEL_508;
      case 20:
        v225 = v15[3];
        v224 = v15 + 3;
        v223 = v225;
        v4 = *(v224 - 2);
        *a1 = v224;
        v226 = (unint64_t)a1[10];
        v227 = *(_QWORD *)&a1[9][4 * *(v224 - 1)];
        *a1 = v224 + 1;
        v228 = v226 > v225;
        if (v226 <= v225)
          v229 = v7;
        else
          v229 = v6;
        if (v228)
          v230 = 0;
        else
          v230 = v226;
        v231 = *(void **)&(*v229)[4 * (v223 - v230)];
        __src[0] = v231;
        if (!*(_BYTE *)(v227 + 47))
          goto LABEL_222;
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__src);
        InherentAttr = mlir::Operation::getInherentAttr(v227, AttrData, v233);
        if (!v235)
        {
          v231 = __src[0];
LABEL_222:
          InherentAttr = mlir::DictionaryAttr::get(v227 + 56, (uint64_t)v231);
        }
        *(_QWORD *)&(*v6)[4 * v4] = InherentAttr;
        continue;
      case 21:
        v55 = v15[1];
        *a1 = v15 + 3;
        v56 = v15[2];
        v57 = a1[10];
        if ((unint64_t)v57 <= v56)
          v58 = v7;
        else
          v58 = v6;
        if ((unint64_t)v57 > v56)
          v57 = 0;
        v4 = *(_QWORD *)&(*v58)[4 * (v56 - (_QWORD)v57)];
        if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v4 + 8))
        {
          LOBYTE(v4) = 0;
          __src[0] = 0;
          __src[1] = 0;
          goto LABEL_390;
        }
        v59 = (void *)mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(_QWORD *)v4 + 8);
        __src[0] = (void *)v4;
        __src[1] = v59;
        if (!v4)
          goto LABEL_390;
        canMapOperands = (_QWORD *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)__src);
        goto LABEL_391;
      case 22:
        v55 = v15[1];
        if (v15[2] == 4)
        {
          *a1 = v15 + 4;
          __src[0] = *(void **)&a1[9][4 * v15[3]];
          if (__src[0])
            goto LABEL_376;
        }
        else
        {
          *a1 = v15 + 4;
          canMapOperands = *(_QWORD **)&a1[9][4 * v15[3]];
          if (!canMapOperands)
            goto LABEL_391;
          if (canMapOperands[1])
          {
            __src[0] = (void *)mlir::ValueRange::dereference_iterator(canMapOperands, 0);
LABEL_376:
            canMapOperands = (_QWORD *)mlir::Value::getDefiningOp((mlir::Value *)__src);
            goto LABEL_391;
          }
        }
LABEL_390:
        canMapOperands = 0;
LABEL_391:
        *(_QWORD *)&(*v6)[4 * v55] = canMapOperands;
        continue;
      case 23:
      case 24:
      case 25:
      case 26:
        v21 = v15[2];
        v20 = v15 + 2;
        v19 = v21;
        *a1 = v20;
        v22 = a1[9];
        v23 = *(_QWORD *)&v22[4 * *(v20 - 1)];
        *a1 = v20 + 1;
        if ((*(_BYTE *)(v23 + 46) & 0x80) != 0)
        {
          v24 = (v16 - 23);
          if (*(_DWORD *)(v23 + 68) <= v24)
            *(_QWORD *)&v22[4 * v19] = 0;
          else
            *(_QWORD *)&v22[4 * v19] = *(_QWORD *)(*(_QWORD *)(v23 + 72) + 32 * v24 + 24);
        }
        else
        {
          *(_QWORD *)&v22[4 * v19] = 0;
        }
        continue;
      case 27:
        v238 = v15[4];
        v237 = v15 + 4;
        v236 = v238;
        v239 = *(unsigned int *)(v237 - 3);
        *a1 = v237;
        v240 = a1[9];
        v241 = *(_QWORD *)&v240[4 * *(v237 - 1)];
        *a1 = v237 + 1;
        if ((*(_BYTE *)(v241 + 46) & 0x80) != 0)
        {
          if (*(_DWORD *)(v241 + 68) <= v239)
            *(_QWORD *)&v240[4 * v236] = 0;
          else
            *(_QWORD *)&v240[4 * v236] = *(_QWORD *)(*(_QWORD *)(v241 + 72) + 32 * v239 + 24);
        }
        else
        {
          *(_QWORD *)&v240[4 * v236] = 0;
        }
        continue;
      case 28:
        v244 = v15[4];
        v243 = v15 + 4;
        v242 = v244;
        v245 = *(unsigned int *)(v243 - 3);
        *a1 = v243;
        v246 = *(_QWORD *)&a1[9][4 * *(v243 - 1)];
        *a1 = v243 + 1;
        if ((*(_BYTE *)(v246 + 46) & 0x80) != 0)
        {
          v247 = *(_QWORD *)(v246 + 72);
          v4 = *(unsigned int *)(v246 + 68);
          v248 = a1[16];
          if ((_DWORD)v245 == -1)
            goto LABEL_477;
        }
        else
        {
          v247 = 0;
          v4 = 0;
          v248 = a1[16];
          if ((_DWORD)v245 == -1)
            goto LABEL_477;
        }
        if (mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedOperandSegments>((_QWORD *)(v246 + 48)))
        {
          if (*(_BYTE *)(v246 + 47)
            && (v249 = mlir::Operation::getInherentAttr(v246, (uint64_t)"operandSegmentSizes", 19), v250))
          {
            v4 = v249;
            if (!v249)
              goto LABEL_457;
          }
          else
          {
            v4 = mlir::DictionaryAttr::get(v246 + 56, "operandSegmentSizes", 0x13uLL);
            if (!v4)
            {
LABEL_457:
              v374 = 0;
              v6 = v423;
              goto LABEL_524;
            }
          }
          v377 = mlir::detail::DenseArrayAttrImpl<int>::classof((_QWORD *)v4);
          if (v377)
            v378 = (void *)v4;
          else
            v378 = 0;
          __src[0] = v378;
          if (!v377)
            goto LABEL_457;
          mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
          if (v379 <= v245)
            goto LABEL_457;
          v380 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
          v381 = (int *)(v380 + 4 * v245);
          if (!(_DWORD)v245)
          {
            v6 = v423;
            v4 = *v381;
            if ((_DWORD)v242 == 0xFFFF)
            {
LABEL_521:
              if (v4 == 1)
                v374 = *(unsigned __int16 **)(v247 + 24);
              else
                v374 = 0;
              goto LABEL_524;
            }
LABEL_478:
            mlir::ValueRange::ValueRange((unint64_t *)__src, v247, v4);
            v374 = &v248[8 * v242];
            *(_OWORD *)v374 = *(_OWORD *)__src;
LABEL_524:
            v406 = *(*a1)++;
            *(_QWORD *)&a1[9][4 * v406] = v374;
            continue;
          }
          v382 = (v245 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v382 >= 7)
          {
            v399 = v382 + 1;
            v400 = (v382 + 1) & 0x7FFFFFFFFFFFFFF8;
            v384 = (int *)(v380 + 4 * v400);
            v401 = (int32x4_t *)(v380 + 16);
            v402 = 0uLL;
            v403 = v400;
            v404 = 0uLL;
            v6 = v423;
            do
            {
              v402 = vaddq_s32(v401[-1], v402);
              v404 = vaddq_s32(*v401, v404);
              v401 += 2;
              v403 -= 8;
            }
            while (v403);
            v383 = vaddvq_s32(vaddq_s32(v404, v402));
            if (v399 == v400)
            {
LABEL_520:
              v4 = *v381;
              v247 += 32 * v383;
              if ((_DWORD)v242 == 0xFFFF)
                goto LABEL_521;
              goto LABEL_478;
            }
          }
          else
          {
            v383 = 0;
            v384 = (int *)v380;
            v6 = v423;
          }
          do
          {
            v405 = *v384++;
            v383 += v405;
          }
          while (v384 != v381);
          goto LABEL_520;
        }
        v373 = v4 >= v245;
        v4 -= v245;
        if (!v373)
        {
          v374 = 0;
          v6 = v423;
          goto LABEL_524;
        }
        v247 += 32 * v245;
LABEL_477:
        v6 = v423;
        if ((_DWORD)v242 == 0xFFFF)
          goto LABEL_521;
        goto LABEL_478;
      case 29:
      case 30:
      case 31:
      case 32:
        v8 = v16 - 29;
        v11 = v15[2];
        v10 = v15 + 2;
        v9 = v11;
        *a1 = v10;
        v12 = a1[9];
        v13 = *(_QWORD *)&v12[4 * *(v10 - 1)];
        *a1 = v10 + 1;
        v14 = v13 - 16 * (v16 - 28);
        if (*(_DWORD *)(v13 + 36) <= v8)
          v14 = 0;
        *(_QWORD *)&v12[4 * v9] = v14;
        continue;
      case 33:
        v253 = v15[4];
        v252 = v15 + 4;
        v251 = v253;
        v254 = *(unsigned int *)(v252 - 3);
        *a1 = v252;
        v255 = a1[9];
        v256 = *(_QWORD *)&v255[4 * *(v252 - 1)];
        *a1 = v252 + 1;
        if (*(_DWORD *)(v256 + 36) <= v254)
        {
          *(_QWORD *)&v255[4 * v251] = 0;
        }
        else if (v254 > 5)
        {
          *(_QWORD *)&v255[4 * v251] = v256 - 24 * (v254 - 5) - 96;
        }
        else
        {
          *(_QWORD *)&v255[4 * v251] = v256 - 16 * v254 - 16;
        }
        continue;
      case 34:
        v259 = v15[4];
        v258 = v15 + 4;
        v257 = v259;
        v4 = *(unsigned int *)(v258 - 3);
        *a1 = v258;
        v260 = *(_QWORD *)&a1[9][4 * *(v258 - 1)];
        *a1 = v258 + 1;
        v261 = *(unsigned int *)(v260 + 36);
        v262 = a1[16];
        if ((_DWORD)v261)
          NextResultAtOffset = v260 - 16;
        else
          NextResultAtOffset = 0;
        if ((_DWORD)v4 == -1)
          goto LABEL_442;
        if (!mlir::OperationName::hasTrait<mlir::OpTrait::AttrSizedResultSegments>((_QWORD *)(v260 + 48)))
        {
          if (v261 < v4)
            goto LABEL_534;
          if ((_DWORD)v4)
            NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v4);
          v261 -= v4;
LABEL_442:
          if ((_DWORD)v257 == 0xFFFF)
          {
LABEL_532:
            if (v261 == 1)
            {
              v375 = (unsigned __int16 *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
LABEL_535:
              v414 = *(*a1)++;
              *(_QWORD *)&a1[9][4 * v414] = v375;
              continue;
            }
LABEL_534:
            v375 = 0;
            goto LABEL_535;
          }
LABEL_443:
          mlir::ValueRange::ValueRange((unint64_t *)__src, NextResultAtOffset, v261);
          v375 = &v262[8 * v257];
          *(_OWORD *)v375 = *(_OWORD *)__src;
          goto LABEL_535;
        }
        if (*(_BYTE *)(v260 + 47)
          && (v264 = mlir::Operation::getInherentAttr(v260, (uint64_t)"resultSegmentSizes", 18), v265))
        {
          v266 = (_QWORD *)v264;
          if (!v264)
            goto LABEL_534;
        }
        else
        {
          v266 = (_QWORD *)mlir::DictionaryAttr::get(v260 + 56, "resultSegmentSizes", 0x12uLL);
          if (!v266)
            goto LABEL_534;
        }
        v385 = mlir::detail::DenseArrayAttrImpl<int>::classof(v266);
        if (v385)
          v386 = v266;
        else
          v386 = 0;
        __src[0] = v386;
        if (!v385)
          goto LABEL_534;
        mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
        if (v387 <= v4)
          goto LABEL_534;
        v388 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)__src);
        v389 = (int *)(v388 + 4 * v4);
        if (!(_DWORD)v4)
        {
          LODWORD(v4) = *v389;
          goto LABEL_531;
        }
        v390 = (v4 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v390 >= 7)
        {
          v407 = v390 + 1;
          v408 = (v390 + 1) & 0x7FFFFFFFFFFFFFF8;
          v392 = (int *)(v388 + 4 * v408);
          v409 = (int32x4_t *)(v388 + 16);
          v410 = 0uLL;
          v411 = v408;
          v412 = 0uLL;
          do
          {
            v410 = vaddq_s32(v409[-1], v410);
            v412 = vaddq_s32(*v409, v412);
            v409 += 2;
            v411 -= 8;
          }
          while (v411);
          v391 = vaddvq_s32(vaddq_s32(v412, v410));
          if (v407 == v408)
          {
LABEL_529:
            LODWORD(v4) = *v389;
            if (v391)
              NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v391);
LABEL_531:
            v261 = (int)v4;
            if ((_DWORD)v257 == 0xFFFF)
              goto LABEL_532;
            goto LABEL_443;
          }
        }
        else
        {
          v391 = 0;
          v392 = (int *)v388;
        }
        do
        {
          v413 = *v392++;
          v391 += v413;
        }
        while (v392 != v389);
        goto LABEL_529;
      case 35:
        v60 = v15[1];
        *a1 = v15 + 3;
        v4 = (unint64_t)&a1[11][8 * v15[2]];
        *(_QWORD *)&a1[9][4 * v60] = v4;
        if (*(_QWORD *)v4)
          MEMORY[0x20BD002D4](*(_QWORD *)v4, 0x20C8093837F09);
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        v61 = *a1;
        v62 = **a1;
        *a1 += 2;
        v63 = *(_QWORD *)&a1[9][4 * v61[1]];
        if (v62 == 4)
        {
          if (v63)
          {
            v64 = *(_QWORD **)v63;
            if (*(_QWORD *)v63)
            {
              v65 = 0;
              v66 = -1;
              do
              {
                v64 = (_QWORD *)*v64;
                ++v66;
                v65 += 8;
              }
              while (v64);
              v67 = v66 + 1;
            }
            else
            {
              v67 = 0;
            }
            v393 = (_QWORD *)operator new[]();
            if (*(_QWORD *)v4)
              MEMORY[0x20BD002D4](*(_QWORD *)v4, 0x20C8093837F09);
            *(_QWORD *)v4 = v393;
            *(_QWORD *)(v4 + 8) = v67;
            v394 = *(_QWORD **)v63;
            if (*(_QWORD *)v63)
            {
              do
              {
                *v393++ = v394[2];
                v394 = (_QWORD *)*v394;
              }
              while (v394);
            }
          }
          continue;
        }
        if (!v63)
          continue;
        __src[0] = &v427;
        __src[1] = (void *)0x600000000;
        v318 = *(_QWORD **)v63;
        v443[0] = *(void **)v63;
        v443[1] = 0;
        v319 = *(void **)(v63 + 8);
        if (!v319)
        {
          v321 = 0;
          goto LABEL_486;
        }
        v320 = 0;
        do
        {
          v323 = (_QWORD *)mlir::ValueRange::dereference_iterator(v443, (uint64_t)v320);
          v324 = (_QWORD *)*v323;
          if (*v323)
          {
            v325 = 0;
            v326 = (_QWORD *)*v323;
            do
            {
              ++v325;
              v326 = (_QWORD *)*v326;
            }
            while (v326);
            v327 = LODWORD(__src[1]);
            v328 = v325 + LODWORD(__src[1]);
            if (v328 > HIDWORD(__src[1]))
            {
LABEL_326:
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v427, v328, 8);
              v327 = LODWORD(__src[1]);
            }
          }
          else
          {
            LODWORD(v325) = 0;
            v327 = LODWORD(__src[1]);
            v328 = LODWORD(__src[1]);
            if (LODWORD(__src[1]) > (unint64_t)HIDWORD(__src[1]))
              goto LABEL_326;
          }
          if (v324)
          {
            v329 = (char *)__src[0] + 8 * v327;
            do
            {
              *v329++ = v324[2];
              v324 = (_QWORD *)*v324;
            }
            while (v324);
          }
          v321 = (v327 + v325);
          LODWORD(__src[1]) = v327 + v325;
          v320 = ++v443[1];
          v322 = v443[0] == v318 && v320 == v319;
        }
        while (!v322);
LABEL_486:
        v395 = (void *)operator new[]();
        if (*(_QWORD *)v4)
          MEMORY[0x20BD002D4](*(_QWORD *)v4, 0x20C8093837F09);
        *(_QWORD *)v4 = v395;
        *(_QWORD *)(v4 + 8) = v321;
        v4 = (unint64_t)__src[0];
        if (LODWORD(__src[1]))
          memmove(v395, __src[0], 8 * LODWORD(__src[1]));
        if ((uint64_t *)v4 != &v427)
          free((void *)v4);
        continue;
      case 36:
        v68 = v15[1];
        *a1 = v15 + 3;
        v69 = a1[9];
        v70 = *(_QWORD *)&v69[4 * v15[2]];
        if (v70)
          v70 = *(_QWORD *)(v70 + 8) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)&v69[4 * v68] = v70;
        continue;
      case 37:
        v267 = v15[1];
        v4 = v15[2];
        *a1 = v15 + 4;
        v268 = a1[9];
        v269 = *(__n128 **)&v268[4 * v15[3]];
        if (v269)
        {
          mlir::ValueRange::getTypes(v269, (__n128 *)__src);
          v270 = __src[0];
          v271 = __src[1];
          v272 = v428;
          v443[0] = __src[0];
          v443[1] = __src[1];
          if (__src[1])
          {
            v270 = (void *)mlir::ValueRange::offset_base(v443, (uint64_t)__src[1]);
            v271 = v443[1];
          }
          mlir::TypeRange::TypeRange((unint64_t *)v443, (uint64_t)v270, v272 - (_QWORD)v271);
          *(_OWORD *)&a1[13][8 * v4] = *(_OWORD *)v443;
          *(_QWORD *)&a1[9][4 * v267] = &a1[13][8 * v4];
        }
        else
        {
          *(_QWORD *)&v268[4 * v267] = 0;
        }
        continue;
      case 38:
        v71 = v15 + 2;
        *a1 = v15 + 2;
        v72 = v15[1];
        v73 = a1[10];
        if ((unint64_t)v73 <= v72)
          v74 = v7;
        else
          v74 = v6;
        if ((unint64_t)v73 > v72)
          v73 = 0;
        v75 = 2 * (*(_QWORD *)&(*v74)[4 * (v72 - (_QWORD)v73)] == 0);
LABEL_396:
        *a1 = &v71[v75];
        v53 = *(unsigned int *)&v71[v75];
        goto LABEL_507;
      case 39:
        LOWORD(v445) = a1[25][v15[1]];
        LODWORD(v4) = (unsigned __int16)v445;
        *a1 = v15 + 2;
        if ((_DWORD)v4 == 0xFFFF)
        {
          *a1 = &a1[23][*((unsigned int *)v15 + 1)];
          continue;
        }
        *a1 = v15 + 5;
        v273 = v15[4];
        __src[0] = &v427;
        __src[1] = (void *)0x400000000;
        if (v273 < 5)
        {
          v274 = 0;
          v376 = (uint64_t **)&v427;
          if (!(_DWORD)v273)
            goto LABEL_540;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v427, v273, 8);
          v274 = __src[1];
        }
        do
        {
          v415 = *(*a1)++;
          v416 = *(_QWORD *)(*(_QWORD *)&a1[9][4 * v415] + 24);
          if (v274 >= HIDWORD(__src[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, &v427, v274 + 1, 8);
            v274 = __src[1];
          }
          *((_QWORD *)__src[0] + v274) = v416;
          v274 = ++LODWORD(__src[1]);
          LODWORD(v273) = v273 - 1;
        }
        while ((_DWORD)v273);
        v376 = (uint64_t **)__src[0];
LABEL_540:
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)v422, v376, (mlir::MLIRContext *)v274, 0);
      case 40:
        *a1 = v15 + 2;
        v275 = *(_QWORD *)&a1[9][4 * v15[1]];
        v4 = (unint64_t)&v427;
        __src[0] = &v427;
        __src[1] = (void *)0x1000000000;
        mlir::ValueRange::ValueRange((unint64_t *)v443, (uint64_t)__src[0], LODWORD(__src[1]));
        (*(void (**)(uint64_t, uint64_t, void *, void *))(*(_QWORD *)a2 + 24))(a2, v275, v443[0], v443[1]);
        v108 = __src[0];
        if (__src[0] != &v427)
          goto LABEL_472;
        continue;
      case 41:
        *a1 = v15 + 2;
        v76 = v15[1];
        v77 = a1[10];
        if ((unint64_t)v77 <= v76)
          v78 = v7;
        else
          v78 = v6;
        if ((unint64_t)v77 <= v76)
          v79 = a1[10];
        else
          v79 = 0;
        v4 = *(_QWORD *)&(*v78)[4 * (v76 - (_QWORD)v79)];
        *a1 = v15 + 3;
        v80 = v15[2];
        if ((unint64_t)v77 <= v80)
          v81 = v7;
        else
          v81 = v6;
        if ((unint64_t)v77 > v80)
          v77 = 0;
        __src[0] = *(void **)&(*v81)[4 * (v80 - (_QWORD)v77)];
        v82 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v83 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v85 = v83 + 8 * v84;
        if (v85 == v82)
          goto LABEL_505;
        v86 = -v82;
        while (*(_QWORD *)v82 != v4)
        {
          v82 += 8;
          v86 -= 8;
          if (v82 == v85)
            goto LABEL_505;
        }
        v372 = (uint64_t)*a1 + ((-v86 - mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src)) >> 1);
        goto LABEL_475;
      case 42:
        *a1 = v15 + 2;
        v302 = a1[10];
        v303 = *(_QWORD *)&a1[9][4 * v15[1]];
        *a1 = v15 + 3;
        v304 = v15[2];
        if ((unint64_t)v302 <= v304)
          v305 = v7;
        else
          v305 = v6;
        if ((unint64_t)v302 > v304)
          v302 = 0;
        __src[0] = *(void **)&(*v305)[4 * (v304 - (_QWORD)v302)];
        isValidIntOrFloat = mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)__src, 4, 1, 0);
        if ((_DWORD)isValidIntOrFloat)
        {
          RawStringData = (_DWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__src);
          LOBYTE(v4) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__src);
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
          isValidIntOrFloat = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)__src);
        }
        else
        {
          RawStringData = 0;
        }
        if ((*(_BYTE *)(v303 + 46) & 0x80) != 0)
          v102 = *(_DWORD *)(v303 + 68);
        else
          v102 = 0;
        if (!isValidIntOrFloat)
          goto LABEL_505;
        if ((_BYTE)v4)
          goto LABEL_383;
        i = 0;
        while (RawStringData[i] != v102)
        {
          if (isValidIntOrFloat == ++i)
            goto LABEL_505;
        }
LABEL_474:
        v372 = (uint64_t)&(*a1)[2 * i];
        goto LABEL_475;
      case 43:
        v87 = v15[2];
        *a1 = v15 + 2;
        v88 = *(_QWORD *)(*(_QWORD *)&a1[9][4 * v15[1]] + 48);
        v17 = v15 + 3;
        *a1 = v15 + 3;
        if (!v87)
          goto LABEL_421;
        v89 = 0;
        v90 = a1[10];
        v91 = -10 - 2 * v87;
        v92 = v87 - 1;
        while (1)
        {
          *a1 = &v15[v89 + 4];
          v93 = v15[v89 + 3];
          v94 = (unint64_t)v90 <= v93 ? v7 : v6;
          v95 = (unint64_t)v90 <= v93 ? v90 : 0;
          if (*(_QWORD *)&(*v94)[4 * (v93 - (_QWORD)v95)] == v88)
            break;
          v91 -= 4;
          --v92;
          ++v89;
          if (v92 == -1)
          {
            v17 = &v15[v89 + 3];
            goto LABEL_421;
          }
        }
        v17 = (unsigned __int16 *)((char *)v15 - v91);
        *a1 = (unsigned __int16 *)((char *)v15 - v91);
LABEL_421:
        v53 = *(unsigned int *)v17;
        goto LABEL_507;
      case 44:
        *a1 = v15 + 2;
        v96 = a1[10];
        v97 = *(_QWORD *)&a1[9][4 * v15[1]];
        *a1 = v15 + 3;
        v98 = v15[2];
        if ((unint64_t)v96 <= v98)
          v99 = v7;
        else
          v99 = v6;
        if ((unint64_t)v96 > v98)
          v96 = 0;
        __src[0] = *(void **)&(*v99)[4 * (v98 - (_QWORD)v96)];
        mlir::DenseElementsAttr::isValidIntOrFloat((mlir::DenseElementsAttr *)__src, 4, 1, 0);
        RawStringData = (_DWORD *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__src);
        LOBYTE(v4) = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__src);
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)__src);
        if (!NumElements)
          goto LABEL_505;
        v102 = *(_DWORD *)(v97 + 36);
        if ((v4 & 1) == 0)
        {
          for (i = 0; i != NumElements; ++i)
          {
            if (RawStringData[i] == v102)
              goto LABEL_474;
          }
          goto LABEL_505;
        }
LABEL_383:
        if (*RawStringData != v102)
          goto LABEL_505;
        i = 0;
        goto LABEL_474;
      case 45:
        *a1 = v15 + 2;
        v276 = v15[1];
        v277 = a1[10];
        if ((unint64_t)v277 <= v276)
          v278 = v7;
        else
          v278 = v6;
        if ((unint64_t)v277 <= v276)
          v279 = a1[10];
        else
          v279 = 0;
        v4 = *(_QWORD *)&(*v278)[4 * (v276 - (_QWORD)v279)];
        *a1 = v15 + 3;
        v280 = v15[2];
        if ((unint64_t)v277 <= v280)
          v281 = v7;
        else
          v281 = v6;
        if ((unint64_t)v277 > v280)
          v277 = 0;
        __src[0] = *(void **)&(*v281)[4 * (v280 - (_QWORD)v277)];
        v282 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v283 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v285 = (void **)(v283 + 8 * v284);
        if (v285 == v282)
          goto LABEL_505;
        v286 = 0;
        while (1)
        {
          __src[0] = *v282;
          if (v4 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src))
            break;
          ++v282;
          v286 += 8;
          if (v282 == v285)
          {
LABEL_505:
            v134 = *a1;
            goto LABEL_506;
          }
        }
        v372 = (uint64_t)*a1 + (v286 >> 1);
LABEL_475:
        v134 = (unsigned __int16 *)(v372 + 4);
        *a1 = v134;
        goto LABEL_506;
      case 46:
        *a1 = v15 + 2;
        v287 = a1[10];
        v288 = *(uint64_t **)&a1[9][4 * v15[1]];
        *a1 = v15 + 3;
        v289 = v15[2];
        if ((unint64_t)v287 <= v289)
          v290 = v7;
        else
          v290 = v6;
        if ((unint64_t)v287 > v289)
          v287 = 0;
        __src[0] = *(void **)&(*v290)[4 * (v289 - (_QWORD)v287)];
        v291 = (void **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        v292 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__src);
        if (!v288)
          goto LABEL_505;
        v294 = (void **)(v292 + 8 * v293);
        v421 = v291;
        if (v294 == v291)
          goto LABEL_312;
        while (2)
        {
          v443[0] = *v291;
          v4 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v443);
          v295 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v443);
          v297 = v295 + 8 * v296;
          v298 = v288[1];
          if (v298 != (uint64_t)(v297 - v4) >> 3)
            goto LABEL_283;
          v299 = 0;
          if (v298)
          {
            v300 = *v288;
            while (v4 != v297)
            {
              v301 = mlir::TypeRange::dereference_iterator(v300, v299);
              __src[0] = *(void **)v4;
              if (v301 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__src))
                goto LABEL_283;
              ++v299;
              v4 += 8;
              if (v298 == v299)
                goto LABEL_282;
            }
            v4 = v297;
          }
          if (v299 != v298)
            goto LABEL_283;
LABEL_282:
          if (v4 != v297)
          {
LABEL_283:
            if (++v291 == v294)
            {
LABEL_312:
              v134 = *a1;
              goto LABEL_313;
            }
            continue;
          }
          break;
        }
        v134 = (unsigned __int16 *)((char *)*a1 + (((char *)v291 - (char *)v421) >> 1) + 4);
        *a1 = v134;
LABEL_313:
        v6 = v423;
        v7 = v425;
        goto LABEL_506;
      default:
        continue;
    }
  }
}

uint64_t mlir::detail::PDLByteCode::rewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[32];

  v47[30] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 104) + 96);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v9)
    {
      v10 = *(uint64_t **)v8;
      v11 = 8 * v9;
      do
      {
        v12 = *v10++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, a2);
        v11 -= 8;
      }
      while (v11);
    }
  }
  v13 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v13)
    memmove(*(void **)a4, *(const void **)(a3 + 8), 8 * v13);
  v14 = *(_QWORD *)(a1 + 240);
  v15 = *(_QWORD *)(a1 + 248);
  v16 = *(void **)a4;
  v17 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3;
  v18 = *(_QWORD *)(a4 + 24);
  v19 = (*(_QWORD *)(a4 + 32) - v18) >> 4;
  v20 = *(_QWORD *)(a4 + 48);
  v21 = (*(_QWORD *)(a4 + 56) - v20) >> 4;
  v22 = a4 + 72;
  v23 = *(_QWORD *)(a4 + 96);
  v24 = (*(_QWORD *)(a4 + 104) - v23) >> 4;
  v25 = a4 + 120;
  v26 = *(_QWORD *)(a4 + 144);
  v27 = (*(_QWORD *)(a4 + 152) - v26) >> 2;
  v28 = *(_QWORD *)(a1 + 64);
  v29 = (*(_QWORD *)(a1 + 72) - v28) >> 3;
  v30 = *(_QWORD *)(a4 + 168);
  v31 = (*(_QWORD *)(a4 + 176) - v30) >> 1;
  v32 = *(_QWORD *)(a1 + 392);
  v33 = *(unsigned int *)(a1 + 400);
  v34 = *(_QWORD *)(a1 + 3736);
  v35 = (*(_QWORD *)(a1 + 3744) - v34) >> 5;
  v36 = *(_QWORD *)(a1 + 3760);
  v37 = (*(_QWORD *)(a1 + 3768) - v36) >> 5;
  v44 = (unsigned __int16 *)(v14 + 2 * *(unsigned int *)(*(_QWORD *)(a3 + 104) + 88));
  v45 = v47;
  v46 = 0x600000000;
  v47[6] = v16;
  v47[7] = v17;
  v47[8] = v18;
  v47[9] = v19;
  v47[10] = v20;
  v47[11] = v21;
  v47[12] = v22;
  v47[13] = v23;
  v47[14] = v24;
  v47[15] = v25;
  v47[16] = v26;
  v47[17] = v27;
  v47[18] = v28;
  v47[19] = v29;
  v47[20] = v14;
  v47[21] = v15;
  v47[22] = v30;
  v47[23] = v31;
  v47[24] = v32;
  v47[25] = v33;
  v47[26] = v34;
  v47[27] = v35;
  v47[28] = v36;
  v47[29] = v37;
  if (v8)
  {
    v39 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v39)
    {
      v40 = *(uint64_t **)v8;
      v41 = 8 * v39;
      do
      {
        v42 = *v40++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 24))(v42, a2);
        v41 -= 8;
      }
      while (v41);
    }
  }
  if (!(_BYTE)v38 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) & 1) == 0)
    llvm::report_fatal_error((llvm *)"Native PDL Rewrite failed, but the pattern rewriter doesn't support recovery. Failable pattern rewrites should not be used with pattern rewriters that do not support them.", (const char *)1);
  if (v45 != v47)
    free(v45);
  return v38;
}

uint64_t *llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<unsigned long>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _WORD *buffer;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 8;
    if (a3)
LABEL_4:
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        v17 = v9[1];
        ++v9;
        v10 = v17;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    v12 = buffer + 8;
    if (a3)
      goto LABEL_4;
  }
  a3[(_QWORD)v12] = 0;
  *(_QWORD *)buffer = a3;
  buffer[4] = *a4;
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v13 = *v9 == -8;
  else
    v13 = 1;
  if (v13)
  {
    do
    {
      v15 = v9[1];
      ++v9;
      v14 = v15;
      if (v15)
        v16 = v14 == -8;
      else
        v16 = 1;
    }
    while (v16);
  }
  return v9;
}

void `anonymous namespace'::Generator::generate(uint64_t a1, Operation *a2, uint64_t *a3)
{
  void *v5;
  int8x16_t *Name;
  const unsigned __int8 *v7;
  __int16 v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Inputs;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 IsNegated;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  mlir::Block **v24;
  mlir::Block *v25;
  uint64_t v26;
  uint64_t v27;
  Operation *v28;
  __int16 v29;
  int8x16_t *v30;
  const unsigned __int8 *v31;
  __int16 v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t Results;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  Operation *NextResultAtOffset;
  Operation *v52;
  __int16 v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  __int16 v59;
  _QWORD *v60;
  uint64_t v61;
  Operation *Input;
  unint64_t Filter;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  mlir::Block **v75;
  mlir::Block *v76;
  Operation *v77;
  uint64_t FastmathAttr;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  __int16 v85;
  _QWORD *v86;
  uint64_t v87;
  void *v88;
  __int16 v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  int Count;
  __int16 InferredResultTypes;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  __int16 v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  __int16 v102;
  uint64_t v103;
  mlir::Block **v104;
  mlir::Block *v105;
  Operation *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  Operation *v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t *v115;
  __int16 v116;
  _QWORD *v117;
  uint64_t v118;
  mlir::Block **v119;
  mlir::Block *v120;
  Operation *v121;
  uint64_t Type;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  __int16 v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  __int16 v135;
  _QWORD *v136;
  uint64_t v137;
  Operation *v138;
  _QWORD *v139;
  uint64_t *v140;
  __int16 v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  __int16 v147;
  uint64_t v148;
  mlir::Block **v149;
  mlir::Block *v150;
  __int16 v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  __int16 v157;
  Operation *Result;
  char v159;
  _QWORD *v160;
  Operation *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t *v168;
  __int16 v169;
  unint64_t v170;
  void *v171;
  _QWORD *v172;
  uint64_t v173;
  __int16 v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t InputOperands;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t Offsets;
  uint64_t v185;
  __int16 v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t *Value;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  Operation **v196;
  BOOL v198;
  Operation *v199;
  _QWORD *v200;
  __int16 v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  __int16 v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t Sizes;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  Operation *v217;
  uint64_t *v218;
  __int16 v219;
  Operation *v220;
  uint64_t *v221;
  __int16 v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t *v225;
  __int16 v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t *v244;
  __int16 v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  void *v250;
  __int16 v251;
  uint64_t v252;
  Operation *v253;
  uint64_t v254;
  uint64_t *v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  Operation *v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t *v268;
  __int16 v269;
  _QWORD *v270;
  uint64_t v271;
  void *v272;
  __int16 v273;
  Operation *v274;
  unsigned int Index;
  Operation *v276;
  _QWORD *v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t *v280;
  __int16 v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t *v286;
  _QWORD *v287;
  __int16 v288;
  _QWORD *v289;
  Operation *v290;
  Operation *v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t *v296;
  __int16 v297;
  Operation *v298;
  _QWORD *v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t *v302;
  __int16 v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t *v307;
  __int16 v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __int16 v313;
  unsigned int v314;
  unsigned int v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t *v318;
  int v319;
  BOOL v320;
  unsigned int v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t **v327;
  unint64_t v328;
  uint64_t *v329;
  uint64_t *v330;
  _QWORD *v331;
  uint64_t v332;
  unsigned int v333;
  unsigned int v334;
  __int16 v335;
  _QWORD *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  __int16 v342;
  mlir::Block *Successor;
  _QWORD *v344;
  uint64_t v345;
  unsigned __int16 v346;
  unsigned __int16 *v347;
  unint64_t Body;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  _BYTE *v355;
  Operation *v356;
  uint64_t v357;
  int v358;
  unint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  unint64_t v362;
  __int16 v363;
  _QWORD *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  unsigned int v368;
  unsigned int v369;
  __int16 v370;
  _QWORD *v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t *v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t *v378;
  _OWORD *v379;
  uint64_t *v380;
  uint64_t v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  unint64_t v387;
  uint64_t *v388;
  _QWORD *v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  unint64_t v393;
  unint64_t v394;
  Operation *v395;
  uint64_t *v396;
  __int16 v397;
  _QWORD *v398;
  unint64_t v399;
  void *v400;
  Operation *v401;
  Operation *v402;
  _QWORD *v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t *v406;
  _QWORD *v407;
  _QWORD *v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t *v411;
  __int16 v412;
  _QWORD *v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  uint64_t v417;
  _QWORD *v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  __int16 v424;
  uint64_t *v425;
  __int16 v426;
  _QWORD *v427;
  uint64_t *v428;
  _QWORD *v429;
  __int16 v430;
  _QWORD *v431;
  uint64_t v432;
  _QWORD *v433;
  _QWORD *v434;
  uint64_t v435;
  _QWORD *v436;
  uint64_t *v437;
  __int16 v438;
  _QWORD *v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t Indices;
  uint64_t v445;
  _QWORD *v446;
  uint64_t v447;
  unint64_t *v448;
  unint64_t v449;
  Operation *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  _QWORD *v456;
  uint64_t *v457;
  __int16 v458;
  Operation *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  _QWORD *v465;
  uint64_t *v466;
  __int16 v467;
  _QWORD *v468;
  uint64_t v469;
  mlir::Block **v470;
  mlir::Block *v471;
  _QWORD *v472;
  uint64_t v473;
  mlir::Block **v474;
  mlir::Block *v475;
  Operation **v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  Operation *v480;
  uint64_t v481;
  uint64_t v482;
  _QWORD *v483;
  uint64_t v484;
  _QWORD *v485;
  uint64_t *v486;
  __int16 v487;
  uint64_t v488;
  int v489;
  unsigned int v490;
  uint64_t v491;
  _QWORD *v492;
  Operation **v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  Operation *v497;
  uint64_t v498;
  uint64_t v499;
  mlir::Block **v500;
  mlir::Block *v501;
  int v502;
  int v503;
  int v504;
  int8x16_t *AttrData;
  const unsigned __int8 *v506;
  uint64_t *v507;
  unsigned int v508;
  uint64_t v509;
  __int128 v510;
  void *v511;
  unsigned int v512;
  void *v513;
  uint64_t v514;
  __int128 v515;
  unsigned int v516;
  void *v517;
  uint64_t MatchedOps;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  _QWORD *v523;
  uint64_t v524;
  _QWORD *v525;
  uint64_t v526;
  mlir::Block **v527;
  mlir::Block *v528;
  _QWORD *v529;
  uint64_t v530;
  Operation **v531;
  _QWORD *v532;
  uint64_t *v533;
  __int16 v534;
  _QWORD *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  uint64_t v541;
  unint64_t *v542;
  unint64_t v543;
  uint64_t *v544;
  int v545;
  BOOL v546;
  unsigned int v547;
  Operation *InputAttributeNames;
  __int128 *v549;
  uint64_t v550;
  Operation *v551;
  Operation *v552;
  Operation *Rewriter;
  __int128 v554;
  uint64_t v555;
  void *__src;
  unsigned int v557;
  int v558;
  _OWORD v559[2];
  void *v560;
  unsigned int v561;
  int v562;
  __int128 v563;
  uint64_t v564;

  v564 = *MEMORY[0x24BDAC8D0];
  v5 = *(void **)(*((_QWORD *)a2 + 6) + 16);
  if (a2 && v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyConstraintOp,void>::id)
  {
    InputAttributeNames = a2;
    Name = (int8x16_t *)mlir::pdl::ApplyNativeConstraintOp::getName((mlir::pdl::ApplyNativeConstraintOp *)&InputAttributeNames);
    v8 = *(_WORD *)(*llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(a1 + 72, Name, v7) + 8);
    v9 = (_QWORD *)a3[3];
    v10 = v9[1];
    if ((unint64_t)(v10 + 1) > v9[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v9 + 3, v10 + 1, 2);
      v10 = v9[1];
    }
    *(_WORD *)(*v9 + 2 * v10) = 0;
    ++v9[1];
    v11 = (_QWORD *)a3[3];
    v12 = v11[1];
    if ((unint64_t)(v12 + 1) > v11[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v11 + 3, v12 + 1, 2);
      v12 = v11[1];
    }
    *(_WORD *)(*v11 + 2 * v12) = v8;
    ++v11[1];
    Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&InputAttributeNames);
    v15 = v13;
    v16 = (_QWORD *)a3[3];
    v17 = v16[1];
    if ((unint64_t)(v17 + 1) > v16[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v16 + 3, v17 + 1, 2);
      *(_WORD *)(*v16 + 2 * v16[1]++) = v15;
      if (v15)
      {
LABEL_9:
        v18 = (unint64_t *)(Inputs + 24);
        do
        {
          v19 = *v18;
          v18 += 4;
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      *(_WORD *)(*v16 + 2 * v17) = v13;
      ++v16[1];
      if (v13)
        goto LABEL_9;
    }
    IsNegated = mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&InputAttributeNames);
    v21 = (_QWORD *)a3[3];
    v22 = v21[1];
    if ((unint64_t)(v22 + 1) > v21[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v21 + 3, v22 + 1, 2);
      v22 = v21[1];
    }
    *(_WORD *)(*v21 + 2 * v22) = IsNegated;
    ++v21[1];
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v23 = *((_QWORD *)&v554 + 1);
    if (*((_QWORD *)&v554 + 1))
    {
      v24 = (mlir::Block **)(v554 + 24);
      do
      {
        v25 = *v24;
        v24 += 4;
        --v23;
      }
      while (v23);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ApplyRewriteOp,void>::id)
  {
    Rewriter = a2;
    v30 = (int8x16_t *)mlir::pdl_interp::ApplyRewriteOp::getName((mlir::pdl_interp::ApplyRewriteOp *)&Rewriter);
    v32 = *(_WORD *)(*llvm::StringMap<unsigned short,llvm::MallocAllocator>::try_emplace<>(a1 + 48, v30, v31) + 8);
    v33 = (_QWORD *)a3[3];
    v34 = v33[1];
    if ((unint64_t)(v34 + 1) > v33[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v33 + 3, v34 + 1, 2);
      v34 = v33[1];
    }
    *(_WORD *)(*v33 + 2 * v34) = 1;
    ++v33[1];
    v35 = (_QWORD *)a3[3];
    v36 = v35[1];
    if ((unint64_t)(v36 + 1) > v35[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v35 + 3, v36 + 1, 2);
      v36 = v35[1];
    }
    *(_WORD *)(*v35 + 2 * v36) = v32;
    ++v35[1];
    v38 = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&Rewriter);
    v39 = v37;
    v40 = (_QWORD *)a3[3];
    v41 = v40[1];
    if ((unint64_t)(v41 + 1) > v40[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v40 + 3, v41 + 1, 2);
      *(_WORD *)(*v40 + 2 * v40[1]++) = v39;
      if (v39)
      {
LABEL_48:
        v42 = (unint64_t *)(v38 + 24);
        do
        {
          v43 = *v42;
          v42 += 4;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      *(_WORD *)(*v40 + 2 * v41) = v37;
      ++v40[1];
      if (v37)
        goto LABEL_48;
    }
    Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&Rewriter);
    v46 = v44;
    v47 = (_QWORD *)a3[3];
    v48 = v47[1];
    if ((unint64_t)(v48 + 1) > v47[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v47 + 3, v48 + 1, 2);
      *(_WORD *)(*v47 + 2 * v47[1]++) = v46;
      if (!v46)
        return;
    }
    else
    {
      *(_WORD *)(*v47 + 2 * v48) = v44;
      ++v47[1];
      if (!v44)
        return;
    }
    v49 = 0;
    v50 = (uint64_t *)(a1 + 24);
    do
    {
      NextResultAtOffset = (Operation *)mlir::detail::OpResultImpl::getNextResultAtOffset(Results, v49);
      v52 = NextResultAtOffset;
      if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)NextResultAtOffset + 1) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
      {
        InputAttributeNames = NextResultAtOffset;
        *(_QWORD *)&v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v50, (unint64_t *)&InputAttributeNames, &v554))
        {
          v53 = *(_WORD *)(v554 + 8);
        }
        else
        {
          v54 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v50, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
          v53 = 0;
          *v54 = InputAttributeNames;
          *((_WORD *)v54 + 4) = 0;
        }
        v55 = (_QWORD *)a3[3];
        v56 = v55[1];
        if ((unint64_t)(v56 + 1) > v55[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v55 + 3, v56 + 1, 2);
          v56 = v55[1];
        }
        *(_WORD *)(*v55 + 2 * v56) = v53;
        ++v55[1];
      }
      v57 = (_QWORD *)a3[3];
      v58 = (uint64_t *)a3[4];
      InputAttributeNames = v52;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v58, (unint64_t *)&InputAttributeNames, &v554))
      {
        v59 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v60 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v58, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v59 = 0;
        *v60 = InputAttributeNames;
        *((_WORD *)v60 + 4) = 0;
      }
      v61 = v57[1];
      if ((unint64_t)(v61 + 1) > v57[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v57, v57 + 3, v61 + 1, 2);
        v61 = v57[1];
      }
      *(_WORD *)(*v57 + 2 * v61) = v59;
      ++v57[1];
      ++v49;
    }
    while (v46 != v49);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::AreEqualOp,void>::id)
  {
    Rewriter = a2;
    Input = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)Input + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      v65 = *((_QWORD *)&v554 + 1);
      v64 = v554;
      v66 = (_QWORD *)a3[3];
      v67 = v66[1];
      if ((unint64_t)(v67 + 1) > v66[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v66 + 3, v67 + 1, 2);
        v67 = v66[1];
      }
      *(_WORD *)(*v66 + 2 * v67) = 2;
      ++v66[1];
      v68 = (_QWORD *)a3[3];
      v69 = (uint64_t *)a3[4];
      InputAttributeNames = Input;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v69, (unint64_t *)&InputAttributeNames, &v554))
      {
        v70 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v90 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v69, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v70 = 0;
        *v90 = InputAttributeNames;
        *((_WORD *)v90 + 4) = 0;
      }
      v91 = v68[1];
      if ((unint64_t)(v91 + 1) > v68[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v68, v68 + 3, v91 + 1, 2);
        v91 = v68[1];
      }
      *(_WORD *)(*v68 + 2 * v91) = v70;
      ++v68[1];
      goto LABEL_136;
    }
    v86 = (_QWORD *)a3[3];
    v87 = v86[1];
    if ((unint64_t)(v87 + 1) > v86[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v86 + 3, v87 + 1, 2);
      v87 = v86[1];
    }
    *(_WORD *)(*v86 + 2 * v87) = 3;
    ++v86[1];
    v88 = *(void **)(*(_QWORD *)(*((_QWORD *)Input + 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
    {
      v89 = 0;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      v89 = 1;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      *(_QWORD *)&v554 = *((_QWORD *)Input + 1) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
        v89 = 3;
      else
        v89 = 5;
    }
    else if (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v89 = 2;
    }
    else
    {
      v89 = 4 * (v88 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    v136 = (_QWORD *)a3[3];
    v137 = v136[1];
    if ((unint64_t)(v137 + 1) > v136[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v136 + 3, v137 + 1, 2);
      v137 = v136[1];
    }
    *(_WORD *)(*v136 + 2 * v137) = v89;
    ++v136[1];
    v138 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    v65 = *((_QWORD *)&v554 + 1);
    v64 = v554;
    v139 = (_QWORD *)a3[3];
    v140 = (uint64_t *)a3[4];
    InputAttributeNames = v138;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v140, (unint64_t *)&InputAttributeNames, &v554))
    {
      v141 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v142 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v140, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v141 = 0;
      *v142 = InputAttributeNames;
      *((_WORD *)v142 + 4) = 0;
    }
    v143 = v139[1];
    if ((unint64_t)(v143 + 1) > v139[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v139, v139 + 3, v143 + 1, 2);
      v143 = v139[1];
    }
    *(_WORD *)(*v139 + 2 * v143) = v141;
LABEL_135:
    ++v139[1];
LABEL_136:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::BranchOp,void>::id)
  {
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, a2);
    v71 = *((_QWORD *)&v554 + 1);
    v72 = v554;
    v73 = (_QWORD *)a3[3];
    v74 = v73[1];
    if ((unint64_t)(v74 + 1) > v73[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v73 + 3, v74 + 1, 2);
      v74 = v73[1];
    }
    *(_WORD *)(*v73 + 2 * v74) = 4;
    ++v73[1];
    if (v71)
    {
      v75 = (mlir::Block **)(v72 + 24);
      do
      {
        v76 = *v75;
        v75 += 4;
        --v71;
      }
      while (v71);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckAttributeOp,void>::id)
  {
    Rewriter = a2;
    v77 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    v79 = *((_QWORD *)&v554 + 1);
    v80 = v554;
    v81 = (_QWORD *)a3[3];
    v82 = v81[1];
    if ((unint64_t)(v82 + 1) > v81[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v81 + 3, v82 + 1, 2);
      v82 = v81[1];
    }
    *(_WORD *)(*v81 + 2 * v82) = 2;
    ++v81[1];
    v83 = (_QWORD *)a3[3];
    v84 = (uint64_t *)a3[4];
    InputAttributeNames = v77;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v84, (unint64_t *)&InputAttributeNames, &v554))
    {
      v85 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v99 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v84, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v85 = 0;
      *v99 = InputAttributeNames;
      *((_WORD *)v99 + 4) = 0;
    }
    v100 = v83[1];
    if ((unint64_t)(v100 + 1) > v83[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v83, v83 + 3, v100 + 1, 2);
      v100 = v83[1];
    }
    *(_WORD *)(*v83 + 2 * v100) = v85;
    ++v83[1];
    v101 = (_QWORD *)a3[3];
    v103 = v101[1];
    if ((unint64_t)(v103 + 1) > v101[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v101, v101 + 3, v103 + 1, 2);
      *(_WORD *)(*v101 + 2 * v101[1]++) = v102;
      if (!v79)
        return;
    }
    else
    {
      *(_WORD *)(*v101 + 2 * v103) = v102;
      ++v101[1];
      if (!v79)
        return;
    }
    v104 = (mlir::Block **)(v80 + 24);
    do
    {
      v105 = *v104;
      v104 += 4;
      --v79;
    }
    while (v79);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperandCountOp,void>::id)
  {
    InputAttributeNames = a2;
    v92 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    Count = mlir::pdl_interp::CheckOperandCountOp::getCount((mlir::pdl_interp::CheckOperandCountOp *)&InputAttributeNames);
    InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v96 = *((_QWORD *)&v554 + 1);
    v95 = v554;
    v97 = a3;
    v98 = 5;
LABEL_108:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckOperationNameOp,void>::id)
  {
    Rewriter = a2;
    v106 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    v107 = mlir::pdl_interp::ApplyRewriteOp::getName((mlir::pdl_interp::ApplyRewriteOp *)&Rewriter);
    mlir::OperationName::OperationName(&v552, v107, v108, *(_QWORD *)(a1 + 152));
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    v109 = *((_QWORD *)&v554 + 1);
    v110 = v554;
    v111 = v552;
    v112 = (_QWORD *)a3[3];
    v113 = v112[1];
    if ((unint64_t)(v113 + 1) > v112[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v112 + 3, v113 + 1, 2);
      v113 = v112[1];
    }
    *(_WORD *)(*v112 + 2 * v113) = 6;
    ++v112[1];
    v114 = (_QWORD *)a3[3];
    v115 = (uint64_t *)a3[4];
    InputAttributeNames = v106;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v115, (unint64_t *)&InputAttributeNames, &v554))
    {
      v116 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v117 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v115, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v116 = 0;
      *v117 = InputAttributeNames;
      *((_WORD *)v117 + 4) = 0;
    }
    v118 = v114[1];
    if ((unint64_t)(v118 + 1) > v114[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v114, v114 + 3, v118 + 1, 2);
      v118 = v114[1];
    }
    *(_WORD *)(*v114 + 2 * v118) = v116;
    ++v114[1];
    if (v109)
    {
      v119 = (mlir::Block **)(v110 + 24);
      do
      {
        v120 = *v119;
        v119 += 4;
        --v109;
      }
      while (v109);
    }
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckResultCountOp,void>::id)
  {
    InputAttributeNames = a2;
    v92 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    Count = mlir::pdl_interp::CheckOperandCountOp::getCount((mlir::pdl_interp::CheckOperandCountOp *)&InputAttributeNames);
    InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v96 = *((_QWORD *)&v554 + 1);
    v95 = v554;
    v97 = a3;
    v98 = 7;
    goto LABEL_108;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypeOp,void>::id)
  {
    Rewriter = a2;
    v121 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    Type = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&Rewriter);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
    v123 = *((_QWORD *)&v554 + 1);
    v124 = v554;
    v125 = (_QWORD *)a3[3];
    v126 = v125[1];
    if ((unint64_t)(v126 + 1) > v125[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v125 + 3, v126 + 1, 2);
      v126 = v125[1];
    }
    *(_WORD *)(*v125 + 2 * v126) = 2;
    ++v125[1];
    v127 = (_QWORD *)a3[3];
    v128 = (uint64_t *)a3[4];
    InputAttributeNames = v121;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v128, (unint64_t *)&InputAttributeNames, &v554))
    {
      v129 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v144 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v128, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v129 = 0;
      *v144 = InputAttributeNames;
      *((_WORD *)v144 + 4) = 0;
    }
    v145 = v127[1];
    if ((unint64_t)(v145 + 1) > v127[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v127, v127 + 3, v145 + 1, 2);
      v145 = v127[1];
    }
    *(_WORD *)(*v127 + 2 * v145) = v129;
    ++v127[1];
    v146 = (_QWORD *)a3[3];
    v148 = v146[1];
    if ((unint64_t)(v148 + 1) > v146[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v146, v146 + 3, v148 + 1, 2);
      *(_WORD *)(*v146 + 2 * v146[1]++) = v147;
      if (!v123)
        return;
    }
    else
    {
      *(_WORD *)(*v146 + 2 * v148) = v147;
      ++v146[1];
      if (!v123)
        return;
    }
    v149 = (mlir::Block **)(v124 + 24);
    do
    {
      v150 = *v149;
      v149 += 4;
      --v123;
    }
    while (v123);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CheckTypesOp,void>::id)
  {
    InputAttributeNames = a2;
    v130 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    v131 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v133 = *((_QWORD *)&v554 + 1);
    v132 = v554;
    v134 = a3;
    v135 = 8;
    goto LABEL_125;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ContinueOp,void>::id)
  {
    v151 = *(_WORD *)(a1 + 144);
    v152 = (_QWORD *)a3[3];
    v153 = v152[1];
    if ((unint64_t)(v153 + 1) > v152[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v152 + 3, v153 + 1, 2);
      v153 = v152[1];
    }
    *(_WORD *)(*v152 + 2 * v153) = 9;
    ++v152[1];
    v154 = (_QWORD *)a3[3];
    v155 = v154[1];
    if ((unint64_t)(v155 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v155 + 1, 2);
      v155 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v155) = v151 - 1;
    goto LABEL_151;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateAttributeOp,void>::id)
  {
    Rewriter = a2;
    v156 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    Result = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
LABEL_153:
    InputAttributeNames = Result;
    *(_QWORD *)&v554 = 0;
    v159 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)&InputAttributeNames, &v554);
    v160 = (_QWORD *)v554;
    if ((v159 & 1) == 0)
    {
      v160 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(a1, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      *v160 = InputAttributeNames;
      *((_WORD *)v160 + 4) = 0;
    }
    *((_WORD *)v160 + 4) = v157;
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateOperationOp,void>::id)
  {
    v551 = a2;
    v161 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v551);
    v162 = mlir::pdl_interp::CreateOperationOp::getName((mlir::pdl_interp::CreateOperationOp *)&v551);
    mlir::OperationName::OperationName(&v550, v162, v163, *(_QWORD *)(a1 + 152));
    v164 = v550;
    v165 = (_QWORD *)a3[3];
    v166 = v165[1];
    if ((unint64_t)(v166 + 1) > v165[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v165 + 3, v166 + 1, 2);
      v166 = v165[1];
    }
    *(_WORD *)(*v165 + 2 * v166) = 11;
    ++v165[1];
    v167 = (_QWORD *)a3[3];
    v168 = (uint64_t *)a3[4];
    InputAttributeNames = v161;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v168, (unint64_t *)&InputAttributeNames, &v554))
    {
      v169 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v175 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v168, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v169 = 0;
      *v175 = InputAttributeNames;
      *((_WORD *)v175 + 4) = 0;
    }
    v176 = v167[1];
    if ((unint64_t)(v176 + 1) > v167[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v167, v167 + 3, v176 + 1, 2);
      v176 = v167[1];
    }
    *(_WORD *)(*v167 + 2 * v176) = v169;
    ++v167[1];
    InputOperands = mlir::pdl_interp::CreateOperationOp::getInputOperands((mlir::pdl_interp::CreateOperationOp *)&v551);
    v179 = v177;
    v180 = (_QWORD *)a3[3];
    v181 = v180[1];
    if ((unint64_t)(v181 + 1) > v180[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v180 + 3, v181 + 1, 2);
      *(_WORD *)(*v180 + 2 * v180[1]++) = v179;
      if (v179)
      {
LABEL_169:
        v182 = (unint64_t *)(InputOperands + 24);
        do
        {
          v183 = *v182;
          v182 += 4;
          --v179;
        }
        while (v179);
      }
    }
    else
    {
      *(_WORD *)(*v180 + 2 * v181) = v177;
      ++v180[1];
      if (v177)
        goto LABEL_169;
    }
    Offsets = mlir::memref::ReinterpretCastOp::getOffsets((mlir::memref::ReinterpretCastOp *)&v551);
    v186 = v185;
    *(_QWORD *)&v554 = Offsets;
    *((_QWORD *)&v554 + 1) = v185;
    v187 = (_QWORD *)a3[3];
    v188 = v187[1];
    if ((unint64_t)(v188 + 1) > v187[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v187 + 3, v188 + 1, 2);
      v188 = v187[1];
    }
    *(_WORD *)(*v187 + 2 * v188) = v186;
    ++v187[1];
    InputAttributeNames = (Operation *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v551);
    v549 = &v554;
    Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
    v190 = *(_QWORD *)v549;
    v191 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&InputAttributeNames);
    v193 = (uint64_t *)(v191 + 8 * v192);
    if (v193 != Value)
    {
      v195 = *(_QWORD *)v549;
      v194 = *((_QWORD *)v549 + 1);
      v196 = (Operation **)(v190 + 24);
      do
      {
        v198 = v194-- != 0;
        if (v190 == v195 && !v198)
          break;
        v199 = *v196;
        v200 = (_QWORD *)a3[3];
        v202 = v200[1];
        if ((unint64_t)(v202 + 1) > v200[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v200, v200 + 3, v202 + 1, 2);
          v202 = v200[1];
        }
        *(_WORD *)(*v200 + 2 * v202) = v201;
        ++v200[1];
        v203 = (_QWORD *)a3[3];
        v204 = (uint64_t *)a3[4];
        v552 = v199;
        Rewriter = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v204, (unint64_t *)&v552, &Rewriter))
        {
          v205 = *((_WORD *)Rewriter + 4);
        }
        else
        {
          v206 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v204, (uint64_t)&v552, (unint64_t *)&v552, Rewriter);
          v205 = 0;
          *v206 = v552;
          *((_WORD *)v206 + 4) = 0;
        }
        v207 = v203[1];
        if ((unint64_t)(v207 + 1) > v203[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v203, v203 + 3, v207 + 1, 2);
          v207 = v203[1];
        }
        *(_WORD *)(*v203 + 2 * v207) = v205;
        ++v203[1];
        ++Value;
        v196 += 4;
      }
      while (Value != v193);
    }
    if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v551))
    {
      Sizes = mlir::memref::ReinterpretCastOp::getSizes((mlir::memref::ReinterpretCastOp *)&v551);
      v211 = v209;
      v212 = (_QWORD *)a3[3];
      v213 = v212[1];
      if ((unint64_t)(v213 + 1) > v212[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v212 + 3, v213 + 1, 2);
        *(_WORD *)(*v212 + 2 * v212[1]++) = v211;
        if (!v211)
          return;
      }
      else
      {
        *(_WORD *)(*v212 + 2 * v213) = v209;
        ++v212[1];
        if (!v209)
          return;
      }
      v214 = (unint64_t *)(Sizes + 24);
      do
      {
        v215 = *v214;
        v214 += 4;
        --v211;
      }
      while (v211);
      return;
    }
    v154 = (_QWORD *)a3[3];
    v208 = v154[1];
    if ((unint64_t)(v208 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v208 + 1, 2);
      v208 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v208) = -1;
LABEL_151:
    ++v154[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateRangeOp,void>::id)
  {
    v170 = *((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8;
    Rewriter = a2;
    *(_QWORD *)&v554 = v170;
    v171 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136);
    if (v171 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v172 = (_QWORD *)a3[3];
      v173 = v172[1];
      if ((unint64_t)(v173 + 1) <= v172[2])
      {
        v174 = 12;
        goto LABEL_204;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v172 + 3, v173 + 1, 2);
      v174 = 12;
    }
    else
    {
      if (v171 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        goto LABEL_205;
      v172 = (_QWORD *)a3[3];
      v173 = v172[1];
      if ((unint64_t)(v173 + 1) <= v172[2])
      {
        v174 = 13;
LABEL_204:
        *(_WORD *)(*v172 + 2 * v173) = v174;
        ++v172[1];
LABEL_205:
        v220 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
        InputAttributeNames = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
        v221 = (uint64_t *)(a1 + 24);
        *(_QWORD *)&v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v221, (unint64_t *)&InputAttributeNames, &v554))
        {
          v222 = *(_WORD *)(v554 + 8);
        }
        else
        {
          v223 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v221, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
          v222 = 0;
          *v223 = InputAttributeNames;
          *((_WORD *)v223 + 4) = 0;
        }
        v224 = (_QWORD *)a3[3];
        v225 = (uint64_t *)a3[4];
        InputAttributeNames = v220;
        *(_QWORD *)&v554 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v225, (unint64_t *)&InputAttributeNames, &v554))
        {
          v226 = *(_WORD *)(v554 + 8);
        }
        else
        {
          v227 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v225, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
          v226 = 0;
          *v227 = InputAttributeNames;
          *((_WORD *)v227 + 4) = 0;
        }
        v228 = v224[1];
        if ((unint64_t)(v228 + 1) > v224[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v224, v224 + 3, v228 + 1, 2);
          v228 = v224[1];
        }
        *(_WORD *)(*v224 + 2 * v228) = v226;
        ++v224[1];
        v229 = (_QWORD *)a3[3];
        v230 = v229[1];
        if ((unint64_t)(v230 + 1) > v229[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v229 + 3, v230 + 1, 2);
          v230 = v229[1];
        }
        *(_WORD *)(*v229 + 2 * v230) = v222;
        ++v229[1];
        if ((*((_BYTE *)Rewriter + 46) & 0x80) != 0)
        {
          v231 = *((_QWORD *)Rewriter + 9);
          v232 = *((unsigned int *)Rewriter + 17);
          v233 = (_QWORD *)a3[3];
          v234 = v233[1];
          v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) <= v233[2])
            goto LABEL_217;
        }
        else
        {
          v231 = 0;
          v232 = 0;
          v233 = (_QWORD *)a3[3];
          v234 = v233[1];
          v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) <= v233[2])
          {
LABEL_217:
            *(_WORD *)(*v233 + 2 * v234) = v232;
            ++v233[1];
            if (!v232)
              return;
LABEL_218:
            v236 = (unint64_t *)(v231 + 24);
            do
            {
              v237 = *v236;
              v236 += 4;
              --v232;
            }
            while (v232);
            return;
          }
        }
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v233, v233 + 3, v235, 2);
        *(_WORD *)(*v233 + 2 * v233[1]++) = v232;
        if (!v232)
          return;
        goto LABEL_218;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v172 + 3, v173 + 1, 2);
      v174 = 13;
    }
    v173 = v172[1];
    goto LABEL_204;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypeOp,void>::id)
  {
    Rewriter = a2;
    v216 = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&Rewriter);
    Result = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    goto LABEL_153;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::CreateTypesOp,void>::id)
  {
    Rewriter = a2;
    v217 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    InputAttributeNames = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    v218 = (uint64_t *)(a1 + 24);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v218, (unint64_t *)&InputAttributeNames, &v554))
    {
      v219 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v239 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v218, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v219 = 0;
      *v239 = InputAttributeNames;
      *((_WORD *)v239 + 4) = 0;
    }
    v240 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    v241 = (_QWORD *)a3[3];
    v242 = v241[1];
    if ((unint64_t)(v242 + 1) > v241[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v241 + 3, v242 + 1, 2);
      v242 = v241[1];
    }
    *(_WORD *)(*v241 + 2 * v242) = 10;
    ++v241[1];
    v243 = (_QWORD *)a3[3];
    v244 = (uint64_t *)a3[4];
    InputAttributeNames = v217;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v244, (unint64_t *)&InputAttributeNames, &v554))
    {
      v245 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v246 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v244, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v245 = 0;
      *v246 = InputAttributeNames;
      *((_WORD *)v246 + 4) = 0;
    }
    v247 = v243[1];
    if ((unint64_t)(v247 + 1) > v243[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v243, v243 + 3, v247 + 1, 2);
      v247 = v243[1];
    }
    *(_WORD *)(*v243 + 2 * v247) = v245;
    ++v243[1];
    v248 = (_QWORD *)a3[3];
    v249 = v248[1];
    if ((unint64_t)(v249 + 1) > v248[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v248 + 3, v249 + 1, 2);
      v249 = v248[1];
    }
    *(_WORD *)(*v248 + 2 * v249) = v219;
    ++v248[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::EraseOp,void>::id)
  {
    *(_QWORD *)&v554 = a2;
    v238 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v554);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ExtractOp,void>::id)
  {
    Rewriter = a2;
    v250 = *(void **)(*(_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter)
                                            + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136);
    if (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      v251 = 15;
    }
    else if (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
    {
      v251 = 17;
    }
    else
    {
      v251 = 16 * (v250 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    }
    v274 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&Rewriter);
    v276 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    v277 = (_QWORD *)a3[3];
    v278 = v277[1];
    if ((unint64_t)(v278 + 1) > v277[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v277 + 3, v278 + 1, 2);
      v278 = v277[1];
    }
    *(_WORD *)(*v277 + 2 * v278) = v251;
    ++v277[1];
    v279 = (_QWORD *)a3[3];
    v280 = (uint64_t *)a3[4];
    InputAttributeNames = v274;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v280, (unint64_t *)&InputAttributeNames, &v554))
    {
      v281 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v282 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v280, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v281 = 0;
      *v282 = InputAttributeNames;
      *((_WORD *)v282 + 4) = 0;
    }
    v283 = v279[1];
    if ((unint64_t)(v283 + 1) > v279[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v279, v279 + 3, v283 + 1, 2);
      v283 = v279[1];
    }
    *(_WORD *)(*v279 + 2 * v283) = v281;
    ++v279[1];
    v284 = (_QWORD *)a3[3];
    v285 = v284[1];
    if (v284[2] < (unint64_t)(v285 + 2))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v284 + 3, v285 + 2, 2);
      v285 = v284[1];
    }
    *(_DWORD *)(*v284 + 2 * v285) = Index;
    v284[1] += 2;
    goto LABEL_287;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::FinalizeOp,void>::id)
  {
    v154 = (_QWORD *)a3[3];
    v252 = v154[1];
    if ((unint64_t)(v252 + 1) > v154[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v154, v154 + 3, v252 + 1, 2);
      v252 = v154[1];
    }
    *(_WORD *)(*v154 + 2 * v252) = 18;
    goto LABEL_151;
  }
  if (a2 && v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::ForEachOp,void>::id)
  {
    Rewriter = a2;
    v26 = *(_QWORD *)(mlir::func::FuncOp::getBody((mlir::func::FuncOp *)&Rewriter) + 8);
    if (v26)
      v27 = v26 - 8;
    else
      v27 = 0;
    v28 = **(Operation ***)(v27 + 48);
    InputAttributeNames = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 24), (unint64_t *)&InputAttributeNames, &v554))
    {
      v29 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v262 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(a1 + 24, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v29 = 0;
      *v262 = InputAttributeNames;
      *((_WORD *)v262 + 4) = 0;
    }
    v263 = (_QWORD *)a3[3];
    v264 = v263[1];
    if ((unint64_t)(v264 + 1) > v263[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v263 + 3, v264 + 1, 2);
      v264 = v263[1];
    }
    *(_WORD *)(*v263 + 2 * v264) = 19;
    ++v263[1];
    v265 = (_QWORD *)a3[3];
    v266 = v265[1];
    if ((unint64_t)(v266 + 1) > v265[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v265 + 3, v266 + 1, 2);
      v266 = v265[1];
    }
    *(_WORD *)(*v265 + 2 * v266) = v29;
    ++v265[1];
    v267 = (_QWORD *)a3[3];
    v268 = (uint64_t *)a3[4];
    InputAttributeNames = v28;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v268, (unint64_t *)&InputAttributeNames, &v554))
    {
      v269 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v270 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v268, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v269 = 0;
      *v270 = InputAttributeNames;
      *((_WORD *)v270 + 4) = 0;
    }
    v271 = v267[1];
    if ((unint64_t)(v271 + 1) > v267[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v267, v267 + 3, v271 + 1, 2);
      v271 = v267[1];
    }
    *(_WORD *)(*v267 + 2 * v271) = v269;
    ++v267[1];
    v272 = *(void **)(*(_QWORD *)(*((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
    {
      v273 = 0;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      v273 = 1;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      *(_QWORD *)&v554 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v554) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
        v273 = 3;
      else
        v273 = 5;
    }
    else if (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v273 = 2;
    }
    else
    {
      v273 = 4 * (v272 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    }
    v340 = (_QWORD *)a3[3];
    v341 = v340[1];
    if ((unint64_t)(v341 + 1) > v340[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v340 + 3, v341 + 1, 2);
      v341 = v340[1];
    }
    *(_WORD *)(*v340 + 2 * v341) = v273;
    ++v340[1];
    v342 = *(_WORD *)(a1 + 144);
    Successor = (mlir::Block *)mlir::pdl_interp::ForEachOp::getSuccessor((mlir::pdl_interp::ForEachOp *)&Rewriter);
    v344 = (_QWORD *)a3[3];
    v345 = v344[1];
    if ((unint64_t)(v345 + 1) > v344[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v344 + 3, v345 + 1, 2);
      v345 = v344[1];
    }
    *(_WORD *)(*v344 + 2 * v345) = v342;
    ++v344[1];
    v346 = *(_WORD *)(a1 + 144) + 1;
    *(_WORD *)(a1 + 144) = v346;
    v347 = *(unsigned __int16 **)(a1 + 248);
    if (*v347 < v346)
      *v347 = v346;
    Body = mlir::func::FuncOp::getBody((mlir::func::FuncOp *)&Rewriter);
    --*(_WORD *)(a1 + 144);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeOp,void>::id)
  {
    Rewriter = a2;
    v290 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    v291 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    v292 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
    v293 = (_QWORD *)a3[3];
    v294 = v293[1];
    if ((unint64_t)(v294 + 1) > v293[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v293 + 3, v294 + 1, 2);
      v294 = v293[1];
    }
    *(_WORD *)(*v293 + 2 * v294) = 20;
    ++v293[1];
    v295 = (_QWORD *)a3[3];
    v296 = (uint64_t *)a3[4];
    InputAttributeNames = v290;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v296, (unint64_t *)&InputAttributeNames, &v554))
    {
      v297 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v304 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v296, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v297 = 0;
      *v304 = InputAttributeNames;
      *((_WORD *)v304 + 4) = 0;
    }
    v305 = v295[1];
    if ((unint64_t)(v305 + 1) > v295[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v295, v295 + 3, v305 + 1, 2);
      v305 = v295[1];
    }
    *(_WORD *)(*v295 + 2 * v305) = v297;
    ++v295[1];
    v306 = (_QWORD *)a3[3];
    v307 = (uint64_t *)a3[4];
    InputAttributeNames = v291;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v307, (unint64_t *)&InputAttributeNames, &v554))
    {
      v308 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v309 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v307, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v308 = 0;
      *v309 = InputAttributeNames;
      *((_WORD *)v309 + 4) = 0;
    }
    v310 = v306[1];
    if ((unint64_t)(v310 + 1) > v306[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v306, v306 + 3, v310 + 1, 2);
      v310 = v306[1];
    }
    *(_WORD *)(*v306 + 2 * v310) = v308;
    ++v306[1];
    v287 = (_QWORD *)a3[3];
    v311 = a3[4];
    v312 = *(_QWORD *)(v311 + 120);
    v313 = **(_WORD **)(v311 + 216);
    v314 = *(_DWORD *)(v311 + 136);
    if (v314)
    {
      v315 = (v314 - 1) & ((v292 >> 4) ^ (v292 >> 9));
      v316 = (uint64_t *)(v312 + 16 * v315);
      v317 = *v316;
      if (*v316 == v292)
      {
LABEL_388:
        v288 = *((_WORD *)v316 + 4);
LABEL_389:
        v384 = v287[1];
        if ((unint64_t)(v384 + 1) > v287[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v287, v287 + 3, v384 + 1, 2);
          v384 = v287[1];
        }
        *(_WORD *)(*v287 + 2 * v384) = v288;
        ++v287[1];
        return;
      }
      v318 = 0;
      v319 = 1;
      while (v317 != -4096)
      {
        if (v318)
          v320 = 0;
        else
          v320 = v317 == -8192;
        if (v320)
          v318 = v316;
        v321 = v315 + v319++;
        v315 = v321 & (v314 - 1);
        v316 = (uint64_t *)(v312 + 16 * v315);
        v317 = *v316;
        if (*v316 == v292)
          goto LABEL_388;
      }
      if (v318)
        v316 = v318;
    }
    else
    {
      v316 = 0;
    }
    v324 = *(_QWORD *)(*(_QWORD *)(v311 + 184) + 8) - **(_QWORD **)(v311 + 184);
    v325 = *(_DWORD *)(v311 + 128);
    if (4 * v325 + 4 >= 3 * v314)
    {
      v314 *= 2;
    }
    else if (v314 + ~v325 - *(_DWORD *)(v311 + 132) > v314 >> 3)
    {
      goto LABEL_329;
    }
    llvm::DenseMap<void const*,unsigned short,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned short>>::grow(v311 + 120, v314);
    v488 = *(_QWORD *)(v311 + 120);
    v489 = *(_DWORD *)(v311 + 136) - 1;
    v490 = v489 & ((v292 >> 4) ^ (v292 >> 9));
    v316 = (uint64_t *)(v488 + 16 * v490);
    v491 = *v316;
    if (*v316 == v292)
    {
      v326 = v292;
      goto LABEL_330;
    }
    v544 = 0;
    v545 = 1;
    while (v491 != -4096)
    {
      if (v544)
        v546 = 0;
      else
        v546 = v491 == -8192;
      if (v546)
        v544 = v316;
      v547 = v490 + v545++;
      v490 = v547 & v489;
      v316 = (uint64_t *)(v488 + 16 * v490);
      v491 = *v316;
      v326 = v292;
      if (*v316 == v292)
        goto LABEL_330;
    }
    if (v544)
      v316 = v544;
LABEL_329:
    v326 = *v316;
LABEL_330:
    ++*(_DWORD *)(v311 + 128);
    if (v326 != -4096)
      --*(_DWORD *)(v311 + 132);
    *v316 = v292;
    *((_WORD *)v316 + 4) = v313 + (v324 >> 3);
    v327 = *(uint64_t ***)(v311 + 184);
    v329 = v327[1];
    v328 = (unint64_t)v327[2];
    if ((unint64_t)v329 >= v328)
    {
      v349 = *v327;
      v350 = (char *)v329 - (char *)*v327;
      v351 = v350 >> 3;
      v352 = (v350 >> 3) + 1;
      if (v352 >> 61)
        abort();
      v353 = v328 - (_QWORD)v349;
      if (v353 >> 2 > v352)
        v352 = v353 >> 2;
      if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
        v354 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v354 = v352;
      if (v354)
      {
        if (v354 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v355 = operator new(8 * v354);
      }
      else
      {
        v355 = 0;
      }
      v373 = (uint64_t *)&v355[8 * v351];
      v374 = (uint64_t *)&v355[8 * v354];
      *v373 = v292;
      v330 = v373 + 1;
      if (v329 != v349)
      {
        v375 = (char *)v329 - (char *)v349 - 8;
        if (v375 < 0x58)
          goto LABEL_603;
        if ((unint64_t)((char *)v329 - v355 - v350) < 0x20)
          goto LABEL_603;
        v376 = (v375 >> 3) + 1;
        v377 = 8 * (v376 & 0x3FFFFFFFFFFFFFFCLL);
        v378 = &v329[v377 / 0xFFFFFFFFFFFFFFF8];
        v373 = (uint64_t *)((char *)v373 - v377);
        v379 = &v355[8 * v351 - 16];
        v380 = v329 - 2;
        v381 = v376 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v382 = *(_OWORD *)v380;
          *(v379 - 1) = *((_OWORD *)v380 - 1);
          *v379 = v382;
          v379 -= 2;
          v380 -= 4;
          v381 -= 4;
        }
        while (v381);
        v329 = v378;
        if (v376 != (v376 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_603:
          do
          {
            v383 = *--v329;
            *--v373 = v383;
          }
          while (v329 != v349);
        }
        v329 = *v327;
      }
      *v327 = v373;
      v327[1] = v330;
      v327[2] = v374;
      if (v329)
        operator delete(v329);
    }
    else
    {
      *v329 = v292;
      v330 = v329 + 1;
    }
    v327[1] = v330;
    goto LABEL_388;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetAttributeTypeOp,void>::id)
  {
    Rewriter = a2;
    v298 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    v276 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    v299 = (_QWORD *)a3[3];
    v300 = v299[1];
    if ((unint64_t)(v300 + 1) > v299[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v299 + 3, v300 + 1, 2);
      v300 = v299[1];
    }
    *(_WORD *)(*v299 + 2 * v300) = 21;
    ++v299[1];
    v301 = (_QWORD *)a3[3];
    v302 = (uint64_t *)a3[4];
    InputAttributeNames = v298;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v302, (unint64_t *)&InputAttributeNames, &v554))
    {
      v303 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v331 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v302, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v303 = 0;
      *v331 = InputAttributeNames;
      *((_WORD *)v331 + 4) = 0;
    }
    v332 = v301[1];
    if ((unint64_t)(v332 + 1) > v301[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v301, v301 + 3, v332 + 1, 2);
      v332 = v301[1];
    }
    *(_WORD *)(*v301 + 2 * v332) = v303;
    ++v301[1];
LABEL_287:
    v287 = (_QWORD *)a3[3];
    v286 = (uint64_t *)a3[4];
    InputAttributeNames = v276;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v286, (unint64_t *)&InputAttributeNames, &v554))
    {
      v288 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v289 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v286, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v288 = 0;
      *v289 = InputAttributeNames;
      *((_WORD *)v289 + 4) = 0;
    }
    goto LABEL_389;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetDefiningOpOp,void>::id)
  {
    *(_QWORD *)&v554 = a2;
    v322 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v554);
    v323 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v554);
LABEL_322:
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandOp,void>::id)
  {
    *(_QWORD *)&v554 = a2;
    v333 = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v554);
    v334 = v333;
    if (v333 > 3)
    {
      v364 = (_QWORD *)a3[3];
      v365 = v364[1];
      if ((unint64_t)(v365 + 1) > v364[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v364 + 3, v365 + 1, 2);
        v365 = v364[1];
      }
      *(_WORD *)(*v364 + 2 * v365) = 27;
      ++v364[1];
      v366 = (_QWORD *)a3[3];
      v338 = v366 + 1;
      v367 = v366[1];
      if (v366[2] < (unint64_t)(v367 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v366 + 3, v367 + 2, 2);
        v367 = v366[1];
      }
      *(_DWORD *)(*v366 + 2 * v367) = v334;
      v339 = 2;
    }
    else
    {
      v335 = v333 + 23;
      v336 = (_QWORD *)a3[3];
      v338 = v336 + 1;
      v337 = v336[1];
      if ((unint64_t)(v337 + 1) > v336[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v336 + 3, v337 + 1, 2);
        v337 = v336[1];
      }
      *(_WORD *)(*v336 + 2 * v337) = v335;
      v339 = 1;
    }
    goto LABEL_405;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetOperandsOp,void>::id)
  {
    Rewriter = a2;
    v356 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    v357 = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&Rewriter);
    if ((v357 & 0xFF00000000) != 0)
      v358 = v357;
    else
      v358 = -1;
    v359 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)v356 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v360 = (_QWORD *)a3[3];
      v361 = v360[1];
      v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) > v360[2])
      {
LABEL_397:
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v362, 2);
        v363 = -1;
LABEL_442:
        v361 = v360[1];
        goto LABEL_456;
      }
LABEL_366:
      v363 = -1;
      goto LABEL_456;
    }
    InputAttributeNames = v356;
    v388 = (uint64_t *)(a1 + 24);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v388, (unint64_t *)&InputAttributeNames, &v554))
    {
      v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v398 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v388, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v363 = 0;
      *v398 = InputAttributeNames;
      *((_WORD *)v398 + 4) = 0;
    }
    v360 = (_QWORD *)a3[3];
    v361 = v360[1];
    v399 = v361 + 1;
    if ((unint64_t)(v361 + 1) <= v360[2])
      goto LABEL_456;
LABEL_441:
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v399, 2);
    goto LABEL_442;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultOp,void>::id)
  {
    *(_QWORD *)&v554 = a2;
    v368 = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v554);
    v369 = v368;
    if (v368 > 3)
    {
      v389 = (_QWORD *)a3[3];
      v390 = v389[1];
      if ((unint64_t)(v390 + 1) > v389[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v389 + 3, v390 + 1, 2);
        v390 = v389[1];
      }
      *(_WORD *)(*v389 + 2 * v390) = 33;
      ++v389[1];
      v391 = (_QWORD *)a3[3];
      v338 = v391 + 1;
      v392 = v391[1];
      if (v391[2] < (unint64_t)(v392 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v391 + 3, v392 + 2, 2);
        v392 = v391[1];
      }
      *(_DWORD *)(*v391 + 2 * v392) = v369;
      v339 = 2;
    }
    else
    {
      v370 = v368 + 29;
      v371 = (_QWORD *)a3[3];
      v338 = v371 + 1;
      v372 = v371[1];
      if ((unint64_t)(v372 + 1) > v371[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v371 + 3, v372 + 1, 2);
        v372 = v371[1];
      }
      *(_WORD *)(*v371 + 2 * v372) = v370;
      v339 = 1;
    }
LABEL_405:
    *v338 += v339;
    v393 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v554);
    v394 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v554);
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetResultsOp,void>::id)
  {
    Rewriter = a2;
    v356 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    v385 = mlir::pdl::ResultsOp::getIndex((mlir::pdl::ResultsOp *)&Rewriter);
    if ((v385 & 0xFF00000000) != 0)
      v386 = v385;
    else
      v386 = -1;
    v387 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    if (*(_UNKNOWN **)(*(_QWORD *)(*((_QWORD *)v356 + 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v360 = (_QWORD *)a3[3];
      v361 = v360[1];
      v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) > v360[2])
        goto LABEL_397;
      goto LABEL_366;
    }
    InputAttributeNames = v356;
    v406 = (uint64_t *)(a1 + 24);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v406, (unint64_t *)&InputAttributeNames, &v554))
    {
      v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v418 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v406, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v363 = 0;
      *v418 = InputAttributeNames;
      *((_WORD *)v418 + 4) = 0;
    }
    v360 = (_QWORD *)a3[3];
    v361 = v360[1];
    v399 = v361 + 1;
    if ((unint64_t)(v361 + 1) <= v360[2])
      goto LABEL_456;
    goto LABEL_441;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetUsersOp,void>::id)
  {
    Rewriter = a2;
    v395 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    InputAttributeNames = v395;
    v396 = (uint64_t *)(a1 + 24);
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v396, (unint64_t *)&InputAttributeNames, &v554))
    {
      v397 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v407 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v396, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v397 = 0;
      *v407 = InputAttributeNames;
      *((_WORD *)v407 + 4) = 0;
    }
    v408 = (_QWORD *)a3[3];
    v409 = v408[1];
    if ((unint64_t)(v409 + 1) > v408[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v408 + 3, v409 + 1, 2);
      v409 = v408[1];
    }
    *(_WORD *)(*v408 + 2 * v409) = 35;
    ++v408[1];
    v410 = (_QWORD *)a3[3];
    v411 = (uint64_t *)a3[4];
    InputAttributeNames = v395;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v411, (unint64_t *)&InputAttributeNames, &v554))
    {
      v412 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v413 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v411, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v412 = 0;
      *v413 = InputAttributeNames;
      *((_WORD *)v413 + 4) = 0;
    }
    v414 = v410[1];
    if ((unint64_t)(v414 + 1) > v410[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v410, v410 + 3, v414 + 1, 2);
      v414 = v410[1];
    }
    *(_WORD *)(*v410 + 2 * v414) = v412;
    ++v410[1];
    v415 = (_QWORD *)a3[3];
    v416 = v415[1];
    if ((unint64_t)(v416 + 1) > v415[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v415 + 3, v416 + 1, 2);
      v416 = v415[1];
    }
    *(_WORD *)(*v415 + 2 * v416) = v397;
    ++v415[1];
    v323 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    goto LABEL_322;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::GetValueTypeOp,void>::id)
  {
    Rewriter = a2;
    v400 = *(void **)(*(_QWORD *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136);
    v401 = (Operation *)mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&Rewriter);
    v402 = v401;
    if (v400 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      InputAttributeNames = v401;
      v425 = (uint64_t *)(a1 + 24);
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v425, (unint64_t *)&InputAttributeNames, &v554))
      {
        v426 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v433 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v425, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v426 = 0;
        *v433 = InputAttributeNames;
        *((_WORD *)v433 + 4) = 0;
      }
      v356 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
      v434 = (_QWORD *)a3[3];
      v435 = v434[1];
      if ((unint64_t)(v435 + 1) > v434[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v434 + 3, v435 + 1, 2);
        v435 = v434[1];
      }
      *(_WORD *)(*v434 + 2 * v435) = 37;
      ++v434[1];
      v436 = (_QWORD *)a3[3];
      v437 = (uint64_t *)a3[4];
      InputAttributeNames = v402;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v437, (unint64_t *)&InputAttributeNames, &v554))
      {
        v438 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v439 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v437, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v438 = 0;
        *v439 = InputAttributeNames;
        *((_WORD *)v439 + 4) = 0;
      }
      v440 = v436[1];
      if ((unint64_t)(v440 + 1) > v436[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v436, v436 + 3, v440 + 1, 2);
        v440 = v436[1];
      }
      *(_WORD *)(*v436 + 2 * v440) = v438;
      ++v436[1];
      v360 = (_QWORD *)a3[3];
      v441 = v360[1];
      if ((unint64_t)(v441 + 1) > v360[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v360 + 3, v441 + 1, 2);
        v441 = v360[1];
      }
      *(_WORD *)(*v360 + 2 * v441) = v426;
      goto LABEL_457;
    }
    v356 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
    v403 = (_QWORD *)a3[3];
    v404 = v403[1];
    if ((unint64_t)(v404 + 1) > v403[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v403 + 3, v404 + 1, 2);
      v404 = v403[1];
    }
    *(_WORD *)(*v403 + 2 * v404) = 36;
    ++v403[1];
    v360 = (_QWORD *)a3[3];
    v405 = (uint64_t *)a3[4];
    InputAttributeNames = v402;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v405, (unint64_t *)&InputAttributeNames, &v554))
    {
      v363 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v427 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v405, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v363 = 0;
      *v427 = InputAttributeNames;
      *((_WORD *)v427 + 4) = 0;
    }
    v361 = v360[1];
    if ((unint64_t)(v361 + 1) > v360[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v360, v360 + 3, v361 + 1, 2);
      v361 = v360[1];
    }
LABEL_456:
    *(_WORD *)(*v360 + 2 * v361) = v363;
LABEL_457:
    ++v360[1];
    v429 = (_QWORD *)a3[3];
    v428 = (uint64_t *)a3[4];
    InputAttributeNames = v356;
    *(_QWORD *)&v554 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v428, (unint64_t *)&InputAttributeNames, &v554))
    {
      v430 = *(_WORD *)(v554 + 8);
    }
    else
    {
      v431 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v428, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
      v430 = 0;
      *v431 = InputAttributeNames;
      *((_WORD *)v431 + 4) = 0;
    }
    v432 = v429[1];
    if ((unint64_t)(v432 + 1) > v429[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v429, v429 + 3, v432 + 1, 2);
      v432 = v429[1];
    }
    *(_WORD *)(*v429 + 2 * v432) = v430;
    ++v429[1];
    return;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::IsNotNullOp,void>::id)
  {
    InputAttributeNames = a2;
    Filter = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v65 = *((_QWORD *)&v554 + 1);
    v64 = v554;
    v139 = (_QWORD *)a3[3];
    v417 = v139[1];
    if ((unint64_t)(v417 + 1) > v139[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v139 + 3, v417 + 1, 2);
      v417 = v139[1];
    }
    *(_WORD *)(*v139 + 2 * v417) = 38;
    goto LABEL_135;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::RecordMatchOp,void>::id)
    v253 = a2;
  else
    v253 = 0;
  if (v253)
  {
    v552 = v253;
    v254 = *(_QWORD *)(a1 + 208);
    v255 = *(uint64_t **)(a1 + 256);
    v256 = *((_DWORD *)v255 + 4);
    if (v256)
    {
      v257 = *v255;
      v258 = v256 - 1;
      v259 = (v256 - 1) & ((v253 >> 4) ^ (v253 >> 9));
      v260 = *(Operation **)(v257 + 16 * v259);
      if (v260 == v253)
      {
LABEL_259:
        v261 = *(_QWORD *)(v257 + 16 * v259 + 8);
        goto LABEL_533;
      }
      v502 = 1;
      while (v260 != (Operation *)-4096)
      {
        v503 = v259 + v502++;
        v259 = v503 & v258;
        v260 = *(Operation **)(v257 + 16 * v259);
        if (v260 == v253)
          goto LABEL_259;
      }
    }
    v261 = 0;
LABEL_533:
    v504 = *(_DWORD *)(v254 + 8);
    Rewriter = (Operation *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v552);
    InputAttributeNames = (Operation *)mlir::SymbolRefAttr::getLeafReference((mlir::SymbolRefAttr *)&Rewriter);
    AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&InputAttributeNames);
    v507 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1 + 96, AttrData, v506);
    mlir::detail::PDLByteCodePattern::create((uint64_t)v253, v261, *(_DWORD *)(*v507 + 8), (uint64_t)&v554);
    v508 = *(_DWORD *)(v254 + 8);
    if (v508 >= *(_DWORD *)(v254 + 12))
    {
      llvm::SmallVectorTemplateBase<mlir::detail::PDLByteCodePattern,false>::growAndEmplaceBack<mlir::detail::PDLByteCodePattern>(v254, &v554);
      v517 = v560;
      if (v560 != &v563)
LABEL_554:
        free(v517);
LABEL_555:
      if (__src != v559)
        free(__src);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, v552);
      MatchedOps = mlir::pdl_interp::RecordMatchOp::getMatchedOps((mlir::pdl_interp::RecordMatchOp *)&v552);
      v520 = v519;
      v521 = *((_QWORD *)&v554 + 1);
      v522 = v554;
      v523 = (_QWORD *)a3[3];
      v524 = v523[1];
      if ((unint64_t)(v524 + 1) > v523[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v523 + 3, v524 + 1, 2);
        v524 = v523[1];
      }
      *(_WORD *)(*v523 + 2 * v524) = 39;
      ++v523[1];
      v525 = (_QWORD *)a3[3];
      v526 = v525[1];
      if ((unint64_t)(v526 + 1) > v525[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v525 + 3, v526 + 1, 2);
        *(_WORD *)(*v525 + 2 * v525[1]++) = v504;
        if (!v521)
          goto LABEL_563;
      }
      else
      {
        *(_WORD *)(*v525 + 2 * v526) = v504;
        ++v525[1];
        if (!v521)
          goto LABEL_563;
      }
      v527 = (mlir::Block **)(v522 + 24);
      do
      {
        v528 = *v527;
        v527 += 4;
        --v521;
      }
      while (v521);
LABEL_563:
      v529 = (_QWORD *)a3[3];
      v530 = v529[1];
      if ((unint64_t)(v530 + 1) > v529[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v529 + 3, v530 + 1, 2);
        *(_WORD *)(*v529 + 2 * v529[1]++) = v520;
        if (v520)
        {
LABEL_565:
          v531 = (Operation **)(MatchedOps + 24);
          do
          {
            v532 = (_QWORD *)a3[3];
            v533 = (uint64_t *)a3[4];
            Rewriter = *v531;
            InputAttributeNames = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v533, (unint64_t *)&Rewriter, &InputAttributeNames))
            {
              v534 = *((_WORD *)InputAttributeNames + 4);
            }
            else
            {
              v535 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v533, (uint64_t)&Rewriter, (unint64_t *)&Rewriter, InputAttributeNames);
              v534 = 0;
              *v535 = Rewriter;
              *((_WORD *)v535 + 4) = 0;
            }
            v536 = v532[1];
            if ((unint64_t)(v536 + 1) > v532[2])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v532, v532 + 3, v536 + 1, 2);
              v536 = v532[1];
            }
            *(_WORD *)(*v532 + 2 * v536) = v534;
            ++v532[1];
            v531 += 4;
            --v520;
          }
          while (v520);
        }
      }
      else
      {
        *(_WORD *)(*v529 + 2 * v530) = v520;
        ++v529[1];
        if (v520)
          goto LABEL_565;
      }
      v538 = mlir::pdl_interp::RecordMatchOp::getInputs((mlir::pdl_interp::RecordMatchOp *)&v552);
      v539 = v537;
      v540 = (_QWORD *)a3[3];
      v541 = v540[1];
      if ((unint64_t)(v541 + 1) > v540[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v540 + 3, v541 + 1, 2);
        *(_WORD *)(*v540 + 2 * v540[1]++) = v539;
        if (!v539)
          return;
      }
      else
      {
        *(_WORD *)(*v540 + 2 * v541) = v537;
        ++v540[1];
        if (!v537)
          return;
      }
      v542 = (unint64_t *)(v538 + 24);
      do
      {
        v543 = *v542;
        v542 += 4;
        --v539;
      }
      while (v539);
      return;
    }
    v509 = *(_QWORD *)v254 + 104 * v508;
    v510 = v554;
    *(_QWORD *)(v509 + 16) = v555;
    *(_OWORD *)v509 = v510;
    v511 = (void *)(v509 + 40);
    *(_QWORD *)(v509 + 24) = v509 + 40;
    *(_QWORD *)(v509 + 32) = 0x200000000;
    v512 = v557;
    if (!v557 || (__int128 *)v509 == &v554)
    {
LABEL_545:
      v515 = v559[1];
      *(_QWORD *)(v509 + 72) = v509 + 88;
      *(_OWORD *)(v509 + 56) = v515;
      *(_QWORD *)(v509 + 80) = 0;
      v516 = v561;
      if (v561 && (__int128 *)v509 != &v554)
      {
        if (v560 == &v563)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v509 + 72, (void *)(v509 + 88), v561, 16);
          if (v561)
            memcpy(*(void **)(v509 + 72), v560, 16 * v561);
          *(_DWORD *)(v509 + 80) = v516;
        }
        else
        {
          *(_QWORD *)(v509 + 72) = v560;
          *(_DWORD *)(v509 + 80) = v516;
          *(_DWORD *)(v509 + 84) = v562;
          v560 = &v563;
          v562 = 0;
        }
        v561 = 0;
      }
      *(_OWORD *)(v509 + 88) = v563;
      ++*(_DWORD *)(v254 + 8);
      v517 = v560;
      if (v560 != &v563)
        goto LABEL_554;
      goto LABEL_555;
    }
    v513 = __src;
    if (__src != v559)
    {
      *(_QWORD *)(v509 + 24) = __src;
      *(_DWORD *)(v509 + 32) = v512;
      *(_DWORD *)(v509 + 36) = v558;
      __src = v559;
      v558 = 0;
LABEL_544:
      v557 = 0;
      goto LABEL_545;
    }
    if (v557 < 3)
    {
      v514 = v557;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v509 + 24, (void *)(v509 + 40), v557, 8);
      v514 = v557;
      if (!v557)
      {
LABEL_543:
        *(_DWORD *)(v509 + 32) = v512;
        goto LABEL_544;
      }
      v513 = __src;
      v511 = *(void **)(v509 + 24);
    }
    memcpy(v511, v513, 8 * v514);
    goto LABEL_543;
  }
  if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::ReplaceOp,void>::id)
  {
    if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchAttributeOp,void>::id)
    {
      Rewriter = a2;
      v450 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
      v451 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      v452 = *((_QWORD *)&v554 + 1);
      v453 = v554;
      v454 = (_QWORD *)a3[3];
      v455 = v454[1];
      if ((unint64_t)(v455 + 1) > v454[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v454 + 3, v455 + 1, 2);
        v455 = v454[1];
      }
      *(_WORD *)(*v454 + 2 * v455) = 41;
      ++v454[1];
      v456 = (_QWORD *)a3[3];
      v457 = (uint64_t *)a3[4];
      InputAttributeNames = v450;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v457, (unint64_t *)&InputAttributeNames, &v554))
      {
        v458 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v468 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v457, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v458 = 0;
        *v468 = InputAttributeNames;
        *((_WORD *)v468 + 4) = 0;
      }
      v469 = v456[1];
      if ((unint64_t)(v469 + 1) > v456[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v456, v456 + 3, v469 + 1, 2);
        v469 = v456[1];
      }
      *(_WORD *)(*v456 + 2 * v469) = v458;
      ++v456[1];
      if (v452)
      {
        v470 = (mlir::Block **)(v453 + 24);
        do
        {
          v471 = *v470;
          v470 += 4;
          --v452;
        }
        while (v452);
      }
      return;
    }
    if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypeOp,void>::id)
    {
      Rewriter = a2;
      v459 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
      v460 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
      v461 = *((_QWORD *)&v554 + 1);
      v462 = v554;
      v463 = (_QWORD *)a3[3];
      v464 = v463[1];
      if ((unint64_t)(v464 + 1) > v463[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v463 + 3, v464 + 1, 2);
        v464 = v463[1];
      }
      *(_WORD *)(*v463 + 2 * v464) = 45;
      ++v463[1];
      v465 = (_QWORD *)a3[3];
      v466 = (uint64_t *)a3[4];
      InputAttributeNames = v459;
      *(_QWORD *)&v554 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v466, (unint64_t *)&InputAttributeNames, &v554))
      {
        v467 = *(_WORD *)(v554 + 8);
      }
      else
      {
        v472 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v466, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
        v467 = 0;
        *v472 = InputAttributeNames;
        *((_WORD *)v472 + 4) = 0;
      }
      v473 = v465[1];
      if ((unint64_t)(v473 + 1) > v465[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v465, v465 + 3, v473 + 1, 2);
        v473 = v465[1];
      }
      *(_WORD *)(*v465 + 2 * v473) = v467;
      ++v465[1];
      if (v461)
      {
        v474 = (mlir::Block **)(v462 + 24);
        do
        {
          v475 = *v474;
          v474 += 4;
          --v461;
        }
        while (v461);
      }
      return;
    }
    if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchTypesOp,void>::id)
    {
      if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperandCountOp,void>::id)
      {
        InputAttributeNames = a2;
        v419 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
        v420 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
        mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
        v422 = *((_QWORD *)&v554 + 1);
        v421 = v554;
        v423 = a3;
        v424 = 42;
      }
      else
      {
        if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchOperationNameOp,void>::id)
        {
          Rewriter = a2;
          *(_QWORD *)&v554 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Rewriter);
          v476 = (Operation **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v554);
          v477 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v554);
          v479 = v478;
          v480 = (Operation *)mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&Rewriter);
          mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, Rewriter);
          v481 = *((_QWORD *)&v554 + 1);
          v482 = v554;
          v483 = (_QWORD *)a3[3];
          v484 = v483[1];
          if ((unint64_t)(v484 + 1) > v483[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v483 + 3, v484 + 1, 2);
            v484 = v483[1];
          }
          *(_WORD *)(*v483 + 2 * v484) = 43;
          ++v483[1];
          v485 = (_QWORD *)a3[3];
          v486 = (uint64_t *)a3[4];
          InputAttributeNames = v480;
          *(_QWORD *)&v554 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v486, (unint64_t *)&InputAttributeNames, &v554))
          {
            v487 = *(_WORD *)(v554 + 8);
          }
          else
          {
            v492 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v486, (uint64_t)&InputAttributeNames, (unint64_t *)&InputAttributeNames, (_QWORD *)v554);
            v487 = 0;
            *v492 = InputAttributeNames;
            *((_WORD *)v492 + 4) = 0;
          }
          v493 = (Operation **)(v477 + 8 * v479);
          v494 = v485[1];
          if ((unint64_t)(v494 + 1) > v485[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v485, v485 + 3, v494 + 1, 2);
            v494 = v485[1];
          }
          *(_WORD *)(*v485 + 2 * v494) = v487;
          ++v485[1];
          v495 = (_QWORD *)a3[3];
          v496 = v495[1];
          if ((unint64_t)(v496 + 1) > v495[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v495 + 3, v496 + 1, 2);
            v496 = v495[1];
          }
          *(_WORD *)(*v495 + 2 * v496) = (unint64_t)((char *)v493 - (char *)v476) >> 3;
          ++v495[1];
          while (v476 != v493)
          {
            v497 = *v476++;
            InputAttributeNames = v497;
            v498 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&InputAttributeNames);
            mlir::OperationName::OperationName(&v554, v498, v499, *(_QWORD *)(a1 + 152));
          }
          if (v481)
          {
            v500 = (mlir::Block **)(v482 + 24);
            do
            {
              v501 = *v500;
              v500 += 4;
              --v481;
            }
            while (v481);
          }
          return;
        }
        if (v5 != &mlir::detail::TypeIDResolver<mlir::pdl_interp::SwitchResultCountOp,void>::id)
          return;
        InputAttributeNames = a2;
        v419 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
        v420 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
        mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
        v422 = *((_QWORD *)&v554 + 1);
        v421 = v554;
        v423 = a3;
        v424 = 44;
      }
      return;
    }
    InputAttributeNames = a2;
    v130 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&InputAttributeNames);
    v131 = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&InputAttributeNames);
    mlir::SuccessorRange::SuccessorRange((unint64_t *)&v554, InputAttributeNames);
    v133 = *((_QWORD *)&v554 + 1);
    v132 = v554;
    v134 = a3;
    v135 = 46;
LABEL_125:
    return;
  }
  *(_QWORD *)&v554 = a2;
  v442 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v554);
  Indices = mlir::memref::LoadOp::getIndices((mlir::memref::LoadOp *)&v554);
  v445 = v443;
  v446 = (_QWORD *)a3[3];
  v447 = v446[1];
  if ((unint64_t)(v447 + 1) > v446[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a3[3], v446 + 3, v447 + 1, 2);
    *(_WORD *)(*v446 + 2 * v446[1]++) = v445;
    if (!v445)
      return;
  }
  else
  {
    *(_WORD *)(*v446 + 2 * v447) = v443;
    ++v446[1];
    if (!v443)
      return;
  }
  v448 = (unint64_t *)(Indices + 24);
  do
  {
    v449 = *v448;
    v448 += 4;
    --v445;
  }
  while (v445);
}

void `anonymous namespace'::Generator::generate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  ZinIrHalH13g *v20;
  ZinIrHalH13g *i;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v34 = v36;
  v35 = 0x800000000;
  llvm::ReversePostOrderTraversal<mlir::Region *,llvm::GraphTraits<mlir::Region *>>::Initialize((uint64_t)&v34, (uint64_t)&v33);
  v5 = (char *)v34;
  if (!(_DWORD)v35)
    goto LABEL_44;
  v6 = (char *)v34 + 8 * v35;
  do
  {
    v8 = *((_QWORD *)v6 - 1);
    v6 -= 8;
    v7 = v8;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8);
    v10 = *(_DWORD *)(a1 + 176);
    if (!v10)
      goto LABEL_27;
    v11 = *(_QWORD *)(a1 + 160);
    v12 = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
    v13 = (_QWORD *)(v11 + 16 * v12);
    v14 = *v13;
    if (v7 == *v13)
      goto LABEL_20;
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & (v10 - 1);
      v13 = (_QWORD *)(v11 + 16 * v12);
      v14 = *v13;
      if (v7 == *v13)
        goto LABEL_20;
    }
    v23 = v15 ? v15 : v13;
    v24 = *(_DWORD *)(a1 + 168);
    if (4 * v24 + 4 < 3 * v10)
    {
      if (v10 + ~v24 - *(_DWORD *)(a1 + 172) > v10 >> 3)
        goto LABEL_17;
    }
    else
    {
LABEL_27:
      v10 *= 2;
    }
    llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1 + 160, v10);
    v25 = *(_QWORD *)(a1 + 160);
    v26 = *(_DWORD *)(a1 + 176) - 1;
    v27 = v26 & ((v7 >> 4) ^ (v7 >> 9));
    v23 = (_QWORD *)(v25 + 16 * v27);
    v28 = *v23;
    if (v7 == *v23)
    {
LABEL_29:
      ++*(_DWORD *)(a1 + 168);
      if (v7 == -4096)
        goto LABEL_19;
LABEL_18:
      --*(_DWORD *)(a1 + 172);
      goto LABEL_19;
    }
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = v23;
      v32 = v27 + v30++;
      v27 = v32 & v26;
      v23 = (_QWORD *)(v25 + 16 * (v32 & v26));
      v28 = *v23;
      if (v7 == *v23)
        goto LABEL_29;
    }
    if (v29)
      v23 = v29;
LABEL_17:
    v19 = *v23;
    ++*(_DWORD *)(a1 + 168);
    if (v19 != -4096)
      goto LABEL_18;
LABEL_19:
    *v23 = v7;
    *((_DWORD *)v23 + 2) = v9;
LABEL_20:
    v20 = (ZinIrHalH13g *)(v7 + 32);
    for (i = *(ZinIrHalH13g **)(v7 + 40); i != v20; i = (ZinIrHalH13g *)*((_QWORD *)i + 1))
    {
      ZinIrHalH13g::~ZinIrHalH13g(i);
    }
  }
  while (v6 != v5);
  v5 = (char *)v34;
LABEL_44:
  if (v5 != (char *)v36)
    free(v5);
}

uint64_t `anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_3::operator()(uint64_t a1, unint64_t a2)
{
  _WORD *v3;
  uint64_t *v4;
  __int16 v5;
  uint64_t result;
  unint64_t v7;
  void *v8;
  uint64_t *v9;
  _WORD *v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v13 = a2;
  v4 = *(uint64_t **)a1;
  v3 = *(_WORD **)(a1 + 8);
  v5 = (*v3)++;
  v14 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v4, &v13, &v14);
  if ((result & 1) == 0)
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v4, (uint64_t)&v13, &v13, v14);
    *(_QWORD *)result = v13;
    *(_WORD *)(result + 8) = v5;
  }
  v7 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v7 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    v7 = 0;
  v12 = v7;
  if (v7)
  {
    result = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
    v8 = *(void **)(*(_QWORD *)result + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v9 = v4 + 3;
      v10 = *(_WORD **)(a1 + 16);
    }
    else
    {
      if (v8 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        return result;
      v9 = v4 + 3;
      v10 = *(_WORD **)(a1 + 24);
    }
    v11 = (*v10)++;
    v14 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>(v9, &v13, &v14);
    if ((result & 1) == 0)
    {
      result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v9, (uint64_t)&v13, &v13, v14);
      *(_QWORD *)result = v13;
      *(_WORD *)(result + 8) = v11;
    }
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>,mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::InsertIntoBucketImpl<mlir::Value>(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096)
      return a4;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_7;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
LABEL_4:
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<mlir::Value,unsigned short,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned short>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  llvm *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    v16 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v17 = 16 * v3;
      v18 = v4;
      do
      {
        if ((*(_QWORD *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>,mlir::Value,llvm::SMLoc,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,llvm::SMLoc>>::LookupBucketFor<mlir::Value>((uint64_t *)a1, (unint64_t *)v18, &v25);
          v19 = v25;
          *v25 = *(_QWORD *)v18;
          *((_WORD *)v19 + 4) = *((_WORD *)v18 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v18 = (llvm *)((char *)v18 + 16);
        v17 -= 16;
      }
      while (v17);
    }
    llvm::deallocate_buffer(v4, v16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_23;
    v21 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    v22 = result + 2;
    v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -4096;
      *v22 = -4096;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v24 = &result[2 * v20];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v24);
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<`anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_0>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t i;
  unint64_t NextResultAtOffset;

  v2 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v2)
    v3 = a2 - 16;
  else
    v3 = 0;
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)result;
    for (i = 0; i != v2; ++i)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, i);
    }
  }
  return result;
}

uint64_t *llvm::detail::UniqueFunctionBase<void,mlir::Operation *>::CallImpl<`anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_1>(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t i;
  uint64_t v21;
  ZinIrHalH13g *v22;
  ZinIrHalH13g *j;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  unsigned int v53;

  v3 = result;
  v5 = *result;
  v4 = (_DWORD *)result[1];
  v6 = (*v4)++;
  v7 = *(_DWORD *)(v5 + 16);
  v8 = a2 >> 4;
  if (!v7)
    goto LABEL_49;
  v9 = (v7 - 1) & (v8 ^ (a2 >> 9));
  v10 = (_QWORD *)(*(_QWORD *)v5 + 16 * v9);
  v11 = *v10;
  if (*v10 == a2)
    goto LABEL_17;
  v12 = 0;
  v13 = 1;
  while (v11 != -4096)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == -8192;
    if (v14)
      v12 = v10;
    v15 = v9 + v13++;
    v9 = v15 & (v7 - 1);
    v10 = (_QWORD *)(*(_QWORD *)v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_17;
  }
  v36 = (uint64_t)(v12 ? v12 : v10);
  v37 = *(_DWORD *)(v5 + 8);
  if (4 * v37 + 4 < 3 * v7)
  {
    if (v7 + ~v37 - *(_DWORD *)(v5 + 12) > v7 >> 3)
      goto LABEL_14;
  }
  else
  {
LABEL_49:
    v7 *= 2;
  }
  result = llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v5, v7);
  v38 = *(_DWORD *)(v5 + 16) - 1;
  v39 = v38 & (v8 ^ (a2 >> 9));
  v36 = *(_QWORD *)v5 + 16 * v39;
  v40 = *(_QWORD *)v36;
  if (*(_QWORD *)v36 == a2)
  {
LABEL_51:
    ++*(_DWORD *)(v5 + 8);
    if (a2 == -4096)
      goto LABEL_16;
    goto LABEL_15;
  }
  v46 = 0;
  v47 = 1;
  while (v40 != -4096)
  {
    if (v46)
      v48 = 0;
    else
      v48 = v40 == -8192;
    if (v48)
      v46 = v36;
    v49 = v39 + v47++;
    v39 = v49 & v38;
    v36 = *(_QWORD *)v5 + 16 * (v49 & v38);
    v40 = *(_QWORD *)v36;
    if (*(_QWORD *)v36 == a2)
      goto LABEL_51;
  }
  if (v46)
    v36 = v46;
LABEL_14:
  v16 = *(_QWORD *)v36;
  ++*(_DWORD *)(v5 + 8);
  if (v16 != -4096)
LABEL_15:
    --*(_DWORD *)(v5 + 12);
LABEL_16:
  *(_QWORD *)v36 = a2;
  *(_DWORD *)(v36 + 8) = v6;
LABEL_17:
  v17 = *(unsigned int *)(a2 + 44);
  if ((v17 & 0x7FFFFF) != 0)
  {
    v18 = ((a2 + 16 * ((v17 >> 23) & 1) + ((v17 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a2 + 40);
    v19 = v18 + 24 * (v17 & 0x7FFFFF);
    do
    {
      for (i = *(_QWORD *)(v18 + 8); i != v18; i = *(_QWORD *)(i + 8))
      {
        v21 = i - 8;
        if (!i)
          v21 = 0;
        v22 = (ZinIrHalH13g *)(v21 + 32);
        for (j = *(ZinIrHalH13g **)(v21 + 40); j != v22; j = (ZinIrHalH13g *)*((_QWORD *)j + 1))
        {
          ZinIrHalH13g::~ZinIrHalH13g(j);
          result = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)(v3[2] + 24) & 0xFFFFFFFFFFFFFFF8))();
        }
      }
      v18 += 24;
    }
    while (v18 != v19);
  }
  v24 = v3[3];
  v25 = (_DWORD *)v3[1];
  v26 = (*v25)++;
  v27 = *(_DWORD *)(v24 + 16);
  if (!v27)
    goto LABEL_57;
  v28 = (v27 - 1) & (v8 ^ (a2 >> 9));
  v29 = (_QWORD *)(*(_QWORD *)v24 + 16 * v28);
  v30 = *v29;
  if (*v29 != a2)
  {
    v32 = 0;
    v33 = 1;
    while (v30 != -4096)
    {
      if (v32)
        v34 = 0;
      else
        v34 = v30 == -8192;
      if (v34)
        v32 = v29;
      v35 = v28 + v33++;
      v28 = v35 & (v27 - 1);
      v29 = (_QWORD *)(*(_QWORD *)v24 + 16 * v28);
      v30 = *v29;
      if (*v29 == a2)
        return result;
    }
    if (v32)
      v41 = (uint64_t)v32;
    else
      v41 = (uint64_t)v29;
    v42 = *(_DWORD *)(v24 + 8);
    if (4 * v42 + 4 < 3 * v27)
    {
      if (v27 + ~v42 - *(_DWORD *)(v24 + 12) > v27 >> 3)
        goto LABEL_33;
      goto LABEL_58;
    }
LABEL_57:
    v27 *= 2;
LABEL_58:
    result = llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v24, v27);
    v43 = *(_DWORD *)(v24 + 16) - 1;
    v44 = v43 & (v8 ^ (a2 >> 9));
    v41 = *(_QWORD *)v24 + 16 * v44;
    v45 = *(_QWORD *)v41;
    if (*(_QWORD *)v41 == a2)
    {
LABEL_59:
      ++*(_DWORD *)(v24 + 8);
      if (a2 == -4096)
        goto LABEL_35;
      goto LABEL_34;
    }
    v50 = 0;
    v51 = 1;
    while (v45 != -4096)
    {
      if (v50)
        v52 = 0;
      else
        v52 = v45 == -8192;
      if (v52)
        v50 = v41;
      v53 = v44 + v51++;
      v44 = v53 & v43;
      v41 = *(_QWORD *)v24 + 16 * (v53 & v43);
      v45 = *(_QWORD *)v41;
      if (*(_QWORD *)v41 == a2)
        goto LABEL_59;
    }
    if (v50)
      v41 = v50;
LABEL_33:
    v31 = *(_QWORD *)v41;
    ++*(_DWORD *)(v24 + 8);
    if (v31 == -4096)
    {
LABEL_35:
      *(_QWORD *)v41 = a2;
      *(_DWORD *)(v41 + 8) = v26;
      return result;
    }
LABEL_34:
    --*(_DWORD *)(v24 + 12);
    goto LABEL_35;
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Block *)>::callback_fn<`anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_2>(uint64_t a1, uint64_t a2)
{
  uint64_t *Liveness;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  mlir::Block *ParentRegion;
  unint64_t v14;
  mlir::Block **v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  mlir::Block **v20;
  ZinIrHalH13g *v21;
  ZinIrHalH13g *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  mlir::Block **v26;
  uint64_t j;
  unint64_t NextResultAtOffset;
  unint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t **v32;
  uint64_t *v33;

  Liveness = mlir::Liveness::getLiveness(*(_QWORD *)a1, a2);
  v33 = Liveness;
  v5 = *(_OWORD *)(a1 + 24);
  v30[0] = *(_OWORD *)(a1 + 8);
  v30[1] = v5;
  v31 = *(_QWORD *)(a1 + 40);
  v32 = &v33;
  v6 = Liveness[2];
  v7 = 24;
  if (v6 == Liveness[1])
    v7 = 28;
  v8 = *(unsigned int *)((char *)Liveness + v7);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = (unint64_t *)Liveness[2];
    while (*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_16;
    }
  }
  else
  {
    v10 = (unint64_t *)Liveness[2];
  }
  v11 = (unint64_t *)(v6 + 8 * v8);
  if (v10 != v11)
  {
    v12 = *v10;
LABEL_11:
    v29 = v12;
    ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v29);
    if (ParentRegion == (mlir::Block *)mlir::Block::getParent((mlir::Block *)a2))
    {
      v14 = v29;
      ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(a2 + 40));
    }
    while (++v10 != v11)
    {
      v12 = *v10;
      if (*v10 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v10 != v11)
          goto LABEL_11;
        break;
      }
    }
  }
LABEL_16:
  if (mlir::Block::isEntryBlock((mlir::Block *)a2))
  {
    v16 = *(unint64_t **)(a2 + 48);
    v17 = *(_QWORD *)(a2 + 56) - (_QWORD)v16;
    if (v17)
    {
      v18 = 8 * (v17 >> 3);
      do
      {
        v19 = *v16++;
        ZinIrHalH13g::~ZinIrHalH13g(*(ZinIrHalH13g **)(a2 + 40));
        v18 -= 8;
      }
      while (v18);
    }
  }
  v21 = (ZinIrHalH13g *)(a2 + 32);
  for (i = *(ZinIrHalH13g **)(a2 + 40); i != v21; i = (ZinIrHalH13g *)*((_QWORD *)i + 1))
  {
    ZinIrHalH13g::~ZinIrHalH13g(i);
    v24 = *(unsigned int *)(v23 + 36);
    if ((_DWORD)v24)
      v25 = v23 - 16;
    else
      v25 = 0;
    if ((_DWORD)v24)
    {
      v26 = (mlir::Block **)v23;
      for (j = 0; j != v24; ++j)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, j);
      }
    }
  }
}

void `anonymous namespace'::Generator::allocateMemoryIndices(mlir::pdl_interp::FuncOp,mlir::ModuleOp)::$_2::operator() const(mlir::Block *)::{lambda(mlir::Value,mlir::Operation *)#1}::operator()(uint64_t a1, unint64_t a2, mlir::Block **a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  _BYTE *v42;
  int v43;
  _DWORD *v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  llvm *v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  _QWORD *buffer;
  unsigned int v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  llvm *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;

  v87 = a2;
  if (**(_QWORD **)a1 == a2)
    return;
  v4 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v88 = 0;
  v9 = v88;
  if (v8)
  {
    v10 = *(_QWORD *)(v88 + 8);
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_DWORD *)(v11 + 16);
    if (v12)
      goto LABEL_4;
LABEL_19:
    v15 = 0;
    v24 = *(_DWORD *)(v11 + 8);
    if (4 * v24 + 4 >= 3 * v12)
    {
LABEL_57:
      v12 *= 2;
LABEL_58:
      llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v11, v12);
      v47 = *(_DWORD *)(v11 + 16) - 1;
      v48 = v47 & ((a3 >> 4) ^ (a3 >> 9));
      v15 = *(_QWORD *)v11 + 16 * v48;
      v49 = *(_QWORD *)v15;
      if (*(mlir::Block ***)v15 == a3)
      {
LABEL_59:
        ++*(_DWORD *)(v11 + 8);
        if (a3 == (mlir::Block **)-4096)
          goto LABEL_23;
        goto LABEL_22;
      }
      v79 = 0;
      v80 = 1;
      while (v49 != -4096)
      {
        if (v79)
          v81 = 0;
        else
          v81 = v49 == -8192;
        if (v81)
          v79 = v15;
        v82 = v48 + v80++;
        v48 = v82 & v47;
        v15 = *(_QWORD *)v11 + 16 * (v82 & v47);
        v49 = *(_QWORD *)v15;
        if (*(mlir::Block ***)v15 == a3)
          goto LABEL_59;
      }
      if (v79)
        v15 = v79;
LABEL_21:
      v25 = *(_QWORD *)v15;
      ++*(_DWORD *)(v11 + 8);
      if (v25 == -4096)
      {
LABEL_23:
        *(_QWORD *)v15 = a3;
        *(_DWORD *)(v15 + 8) = 0;
        v4 = v87;
        goto LABEL_24;
      }
LABEL_22:
      --*(_DWORD *)(v11 + 12);
      goto LABEL_23;
    }
LABEL_20:
    if (v12 + ~v24 - *(_DWORD *)(v11 + 12) > v12 >> 3)
      goto LABEL_21;
    goto LABEL_58;
  }
  v89 = v88;
  v21 = *(_DWORD *)(v7 + 8);
  v22 = *(unsigned int *)(v7 + 16);
  if (4 * v21 + 4 >= (3 * v22))
  {
    v23 = 2 * v22;
  }
  else
  {
    v23 = *(_DWORD *)(v7 + 16);
    if ((int)v22 + ~v21 - *(_DWORD *)(v7 + 12) > v22 >> 3)
    {
      *(_DWORD *)(v7 + 8) = v21 + 1;
      if (*(_QWORD *)v9 == -4096)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  v54 = *(llvm **)v7;
  v55 = (v23 - 1) | ((unint64_t)(v23 - 1) >> 1);
  v56 = v55 | (v55 >> 2) | ((v55 | (v55 >> 2)) >> 4);
  v57 = ((v56 | (v56 >> 8)) >> 16) | v56 | (v56 >> 8);
  if ((v57 + 1) > 0x40)
    v58 = v57 + 1;
  else
    v58 = 64;
  *(_DWORD *)(v7 + 16) = v58;
  buffer = llvm::allocate_buffer(40 * v58, (std::align_val_t)8uLL);
  *(_QWORD *)v7 = buffer;
  if (v54)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v60 = *(_DWORD *)(v7 + 16);
    if (!v60)
      goto LABEL_88;
    v61 = 40 * v60 - 40;
    if (v61 >= 0x28)
    {
      v69 = v61 / 0x28 + 1;
      v62 = &buffer[5 * (v69 & 0xFFFFFFFFFFFFFFELL)];
      v70 = v69 & 0xFFFFFFFFFFFFFFELL;
      v71 = buffer;
      do
      {
        *v71 = -4096;
        v71[5] = -4096;
        v71 += 10;
        v70 -= 2;
      }
      while (v70);
      if (v69 == (v69 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_88:
        if ((_DWORD)v22)
        {
          v73 = 40 * v22;
          v74 = v54;
          do
          {
            if ((*(_QWORD *)v74 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v90 = 0;
              v75 = v90;
              *v90 = *(_QWORD *)v74;
              v76 = *((_QWORD *)v74 + 1);
              *((_QWORD *)v74 + 1) = 0;
              v75[1] = v76;
              v77 = *(_QWORD *)((char *)v74 + 29);
              *((_OWORD *)v75 + 1) = *((_OWORD *)v74 + 1);
              *(_QWORD *)((char *)v75 + 29) = v77;
              ++*(_DWORD *)(v7 + 8);
              v78 = *((_QWORD *)v74 + 1);
              *((_QWORD *)v74 + 1) = 0;
              if (v78)
              {
                if (*(_DWORD *)(v78 + 272))
                {
                  llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::visitNodes(v78, (void (*)(_QWORD *, _QWORD, uint64_t))llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::deleteNode, 0);
                  *(_DWORD *)(v78 + 272) = 0;
                  *(_OWORD *)(v78 + 240) = 0u;
                  *(_OWORD *)(v78 + 256) = 0u;
                  *(_OWORD *)(v78 + 208) = 0u;
                  *(_OWORD *)(v78 + 224) = 0u;
                  *(_OWORD *)(v78 + 176) = 0u;
                  *(_OWORD *)(v78 + 192) = 0u;
                  *(_OWORD *)(v78 + 144) = 0u;
                  *(_OWORD *)(v78 + 160) = 0u;
                  *(_OWORD *)(v78 + 112) = 0u;
                  *(_OWORD *)(v78 + 128) = 0u;
                  *(_OWORD *)(v78 + 80) = 0u;
                  *(_OWORD *)(v78 + 96) = 0u;
                  *(_OWORD *)(v78 + 48) = 0u;
                  *(_OWORD *)(v78 + 64) = 0u;
                  *(_OWORD *)(v78 + 16) = 0u;
                  *(_OWORD *)(v78 + 32) = 0u;
                  *(_OWORD *)v78 = 0u;
                }
                *(_DWORD *)(v78 + 276) = 0;
                MEMORY[0x20BD002F8](v78, 0x1020C4078626902);
              }
            }
            v74 = (llvm *)((char *)v74 + 40);
            v73 -= 40;
          }
          while (v73);
        }
        llvm::deallocate_buffer(v54, (void *)(40 * v22));
      }
    }
    else
    {
      v62 = buffer;
    }
    v72 = &buffer[5 * v60];
    do
    {
      *v62 = -4096;
      v62 += 5;
    }
    while (v62 != v72);
    goto LABEL_88;
  }
  *(_QWORD *)(v7 + 8) = 0;
  v63 = *(_DWORD *)(v7 + 16);
  if (v63)
  {
    v64 = 40 * v63 - 40;
    v65 = buffer;
    if (v64 < 0x28)
      goto LABEL_125;
    v66 = v64 / 0x28 + 1;
    v65 = &buffer[5 * (v66 & 0xFFFFFFFFFFFFFFELL)];
    v67 = v66 & 0xFFFFFFFFFFFFFFELL;
    v68 = buffer;
    do
    {
      *v68 = -4096;
      v68[5] = -4096;
      v68 += 10;
      v67 -= 2;
    }
    while (v67);
    if (v66 != (v66 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_125:
      do
      {
        *v65 = -4096;
        v65 += 5;
      }
      while (v65 != &buffer[5 * v63]);
    }
  }
  v9 = v89;
  ++*(_DWORD *)(v7 + 8);
  if (*(_QWORD *)v9 != -4096)
LABEL_17:
    --*(_DWORD *)(v7 + 12);
LABEL_18:
  *(_QWORD *)v9 = v4;
  v10 = operator new();
  *(_QWORD *)(v10 + 272) = 0;
  *(_QWORD *)(v10 + 280) = v6;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_QWORD *)(v9 + 8) = v10;
  *(_BYTE *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 20) = 0;
  *(_BYTE *)(v9 + 24) = 0;
  *(_BYTE *)(v9 + 28) = 0;
  *(_BYTE *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 36) = 0;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_DWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_19;
LABEL_4:
  v13 = v12 - 1;
  v14 = (v12 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v15 = *(_QWORD *)v11 + 16 * v14;
  v16 = *(_QWORD *)v15;
  if (*(mlir::Block ***)v15 != a3)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = *(_QWORD *)v11 + 16 * (v20 & v13);
      v16 = *(_QWORD *)v15;
      if (*(mlir::Block ***)v15 == a3)
        goto LABEL_24;
    }
    if (v17)
      v15 = v17;
    v24 = *(_DWORD *)(v11 + 8);
    if (4 * v24 + 4 >= 3 * v12)
      goto LABEL_57;
    goto LABEL_20;
  }
LABEL_24:
  v26 = *(unsigned int *)(v15 + 8);
  v27 = *(_QWORD *)(a1 + 32);
  mlir::LivenessBlockInfo::getEndOperation(**(_QWORD **)(a1 + 40), (uint64_t **)v4, a3);
  v29 = v28;
  v30 = *(_DWORD *)(v27 + 16);
  if (!v30)
    goto LABEL_64;
  v31 = v30 - 1;
  v32 = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
  v33 = *(_QWORD *)v27 + 16 * v32;
  v34 = *(_QWORD *)v33;
  if (v28 == *(_QWORD *)v33)
    goto LABEL_40;
  v35 = 0;
  v36 = 1;
  while (v34 != -4096)
  {
    if (v35)
      v37 = 0;
    else
      v37 = v34 == -8192;
    if (v37)
      v35 = v33;
    v38 = v32 + v36++;
    v32 = v38 & v31;
    v33 = *(_QWORD *)v27 + 16 * (v38 & v31);
    v34 = *(_QWORD *)v33;
    if (v28 == *(_QWORD *)v33)
      goto LABEL_40;
  }
  if (v35)
    v33 = v35;
  v50 = *(_DWORD *)(v27 + 8);
  if (4 * v50 + 4 < 3 * v30)
  {
    if (v30 + ~v50 - *(_DWORD *)(v27 + 12) > v30 >> 3)
      goto LABEL_37;
  }
  else
  {
LABEL_64:
    v30 *= 2;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(v27, v30);
  v51 = *(_DWORD *)(v27 + 16) - 1;
  v52 = v51 & ((v29 >> 4) ^ (v29 >> 9));
  v33 = *(_QWORD *)v27 + 16 * v52;
  v53 = *(_QWORD *)v33;
  if (v29 == *(_QWORD *)v33)
  {
LABEL_66:
    ++*(_DWORD *)(v27 + 8);
    if (v29 == -4096)
      goto LABEL_39;
    goto LABEL_38;
  }
  v83 = 0;
  v84 = 1;
  while (v53 != -4096)
  {
    if (v83)
      v85 = 0;
    else
      v85 = v53 == -8192;
    if (v85)
      v83 = v33;
    v86 = v52 + v84++;
    v52 = v86 & v51;
    v33 = *(_QWORD *)v27 + 16 * (v86 & v51);
    v53 = *(_QWORD *)v33;
    if (v29 == *(_QWORD *)v33)
      goto LABEL_66;
  }
  if (v83)
    v33 = v83;
LABEL_37:
  v39 = *(_QWORD *)v33;
  ++*(_DWORD *)(v27 + 8);
  if (v39 != -4096)
LABEL_38:
    --*(_DWORD *)(v27 + 12);
LABEL_39:
  *(_QWORD *)v33 = v29;
  *(_DWORD *)(v33 + 8) = 0;
  v4 = v87;
LABEL_40:
  llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insert(v10, v26, *(unsigned int *)(v33 + 8), 0);
  v40 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v40 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    v40 = 0;
  v90 = (_QWORD *)v40;
  if (v40)
  {
    v41 = *(void **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v90) + 136);
    if (v41 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    {
      v45 = *(unsigned __int8 *)(v9 + 20);
      v42 = (_BYTE *)(v9 + 20);
      v44 = v42 - 4;
      if (v45)
      {
LABEL_50:
        *v44 = 0;
        return;
      }
    }
    else if (v41 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    {
      v46 = *(unsigned __int8 *)(v9 + 28);
      v42 = (_BYTE *)(v9 + 28);
      v44 = v42 - 4;
      if (v46)
        goto LABEL_50;
    }
    else
    {
      if (v41 != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        return;
      v43 = *(unsigned __int8 *)(v9 + 36);
      v42 = (_BYTE *)(v9 + 36);
      v44 = v42 - 4;
      if (v43)
        goto LABEL_50;
    }
    *v42 = 1;
    goto LABEL_50;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insert(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 272))
  {
    v12 = a1;
    v13 = v15;
    v14 = 0x400000000;
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeFind(&v12, a2);
LABEL_44:
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insert((uint64_t)&v12, a2, a3, a4);
    if (v13 != v15)
      free(v13);
    return;
  }
  v7 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v7 == 16)
  {
    v12 = a1;
    v13 = v15;
    HIDWORD(v14) = 4;
    if (*(_QWORD *)(a1 + 8) >= a2)
    {
      v8 = 16;
    }
    else if (*(_QWORD *)(a1 + 24) >= a2)
    {
      v8 = 0x100000010;
    }
    else if (*(_QWORD *)(a1 + 40) >= a2)
    {
      v8 = 0x200000010;
    }
    else if (*(_QWORD *)(a1 + 56) >= a2)
    {
      v8 = 0x300000010;
    }
    else if (*(_QWORD *)(a1 + 72) >= a2)
    {
      v8 = 0x400000010;
    }
    else if (*(_QWORD *)(a1 + 88) >= a2)
    {
      v8 = 0x500000010;
    }
    else if (*(_QWORD *)(a1 + 104) >= a2)
    {
      v8 = 0x600000010;
    }
    else if (*(_QWORD *)(a1 + 120) >= a2)
    {
      v8 = 0x700000010;
    }
    else if (*(_QWORD *)(a1 + 136) >= a2)
    {
      v8 = 0x800000010;
    }
    else if (*(_QWORD *)(a1 + 152) >= a2)
    {
      v8 = 0x900000010;
    }
    else if (*(_QWORD *)(a1 + 168) >= a2)
    {
      v8 = 0xA00000010;
    }
    else if (*(_QWORD *)(a1 + 184) >= a2)
    {
      v8 = 0xB00000010;
    }
    else if (*(_QWORD *)(a1 + 200) >= a2)
    {
      v8 = 0xC00000010;
    }
    else if (*(_QWORD *)(a1 + 216) >= a2)
    {
      v8 = 0xD00000010;
    }
    else if (*(_QWORD *)(a1 + 232) >= a2)
    {
      v8 = 0xE00000010;
    }
    else if (*(_QWORD *)(a1 + 248) >= a2)
    {
      v8 = 0xF00000010;
    }
    else
    {
      v8 = 0x1000000010;
    }
    v15[0] = a1;
    v15[1] = v8;
    LODWORD(v14) = 1;
    goto LABEL_44;
  }
  v9 = 0;
  if ((_DWORD)v7)
  {
    v10 = (unint64_t *)(a1 + 8);
    while (1)
    {
      v11 = *v10;
      v10 += 2;
      if (v11 >= a2)
        break;
      if ((_DWORD)v7 == ++v9)
      {
        v9 = *(_DWORD *)(a1 + 276);
        break;
      }
    }
  }
  LODWORD(v12) = v9;
  *(_DWORD *)(a1 + 276) = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(a1, &v12, v7, a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Value,`anonymous namespace'::ByteCodeLiveRange,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::ByteCodeLiveRange>>,mlir::Value,`anonymous namespace'::ByteCodeLiveRange,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,`anonymous namespace'::ByteCodeLiveRange>>::LookupBucketFor<mlir::Value>(uint64_t a1, int a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;

  if (a2)
  {
    v4 = *a3;
    v6 = &unk_254519000;
    if ((v5 & 1) == 0)
    {
      v25 = a1;
      v22 = a3;
      v23 = a4;
      v24 = a2;
      v21 = *a3;
      v6 = &unk_254519000;
      v4 = v21;
      a3 = v22;
      a2 = v24;
      a4 = v23;
      v19 = v18;
      a1 = v25;
      if (v19)
      {
        v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v20 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        v6 = (_QWORD *)&unk_254519000;
        v4 = v21;
        a3 = v22;
        a2 = v24;
        a1 = v25;
        a4 = v23;
      }
    }
    v7 = (v6[373] + 8 * v4) ^ HIDWORD(v4);
    v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    v9 = a2 - 1;
    v10 = (-348639895 * ((v8 >> 47) ^ v8)) & (a2 - 1);
    v11 = (_QWORD *)(a1 + 40 * v10);
    v12 = *v11;
    if (*a3 == *v11)
    {
LABEL_4:
      *a4 = v11;
      return 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v12 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16)
          v14 = v11;
        v17 = v10 + v15++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(a1 + 40 * (v17 & v9));
        v12 = *v11;
        if (*a3 == *v11)
          goto LABEL_4;
      }
      if (v14)
        v11 = v14;
      *a4 = v11;
      return 0;
    }
  }
  else
  {
    *a4 = 0;
    return 0;
  }
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::visitNodes(uint64_t a1, void (*a2)(_QWORD *, _QWORD, uint64_t), uint64_t a3)
{
  int v3;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  _BYTE v30[32];
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 272);
  if (v3)
  {
    v31 = v33;
    v32 = 0x400000000;
    v28 = v30;
    v29 = 0x400000000;
    if (*(_DWORD *)(a1 + 276))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(a1 + 8 + 8 * v7);
        if (v6 >= HIDWORD(v32))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v6 + 1, 8);
          v6 = v32;
        }
        *((_QWORD *)v31 + v6) = v8;
        v6 = v32 + 1;
        LODWORD(v32) = v32 + 1;
        ++v7;
      }
      while (v7 != *(_DWORD *)(a1 + 276));
      v3 = *(_DWORD *)(a1 + 272);
    }
    v9 = (v3 - 1);
    if (v3 != 1)
    {
      v10 = (_QWORD *)(a1 + (a3 >> 1));
      if ((a3 & 1) != 0)
      {
        do
        {
          v17 = v32;
          if ((_DWORD)v32)
          {
            v18 = 0;
            do
            {
              v19 = 0;
              v20 = v29;
              v21 = 8 * (*((_QWORD *)v31 + v18) & 0x3FLL) + 8;
              do
              {
                v22 = *(_QWORD *)((*((_QWORD *)v31 + v18) & 0xFFFFFFFFFFFFFFC0) + v19);
                if (v20 >= HIDWORD(v29))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v20 + 1, 8);
                  v20 = v29;
                }
                v28[v20] = v22;
                v20 = v29 + 1;
                LODWORD(v29) = v29 + 1;
                v19 += 8;
              }
              while (v21 != v19);
              (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v10 + a2))(v10, *((_QWORD *)v31 + v18++), v9);
            }
            while (v18 != v17);
          }
          LODWORD(v32) = 0;
          llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap((uint64_t)&v31, (uint64_t)&v28);
          v9 = (v9 - 1);
        }
        while ((_DWORD)v9);
      }
      else
      {
        do
        {
          v11 = v32;
          if ((_DWORD)v32)
          {
            v12 = 0;
            do
            {
              v13 = 0;
              v14 = v29;
              v15 = 8 * (*((_QWORD *)v31 + v12) & 0x3FLL) + 8;
              do
              {
                v16 = *(_QWORD *)((*((_QWORD *)v31 + v12) & 0xFFFFFFFFFFFFFFC0) + v13);
                if (v14 >= HIDWORD(v29))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v14 + 1, 8);
                  v14 = v29;
                }
                v28[v14] = v16;
                v14 = v29 + 1;
                LODWORD(v29) = v29 + 1;
                v13 += 8;
              }
              while (v15 != v13);
              a2(v10, *((_QWORD *)v31 + v12++), v9);
            }
            while (v12 != v11);
          }
          LODWORD(v32) = 0;
          llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap((uint64_t)&v31, (uint64_t)&v28);
          v9 = (v9 - 1);
        }
        while ((_DWORD)v9);
      }
    }
    if ((_DWORD)v32)
    {
      v23 = (_QWORD *)(a1 + (a3 >> 1));
      v24 = 0;
      if ((a3 & 1) != 0)
      {
        v26 = 8 * v32;
        do
        {
          (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v23 + a2))(v23, *(_QWORD *)((char *)v31 + v24), 0);
          v24 += 8;
        }
        while (v26 != v24);
      }
      else
      {
        v25 = 8 * v32;
        do
        {
          a2(v23, *(_QWORD *)((char *)v31 + v24), 0);
          v24 += 8;
        }
        while (v25 != v24);
      }
    }
    if (v28 != (_QWORD *)v30)
      free(v28);
    if (v31 != v33)
      free(v31);
  }
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::deleteNode(uint64_t result, uint64_t a2)
{
  unint64_t *v2;

  v2 = *(unint64_t **)(result + 280);
  *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFC0) = *v2;
  *v2 = a2 & 0xFFFFFFFFFFFFFFC0;
  return result;
}

void llvm::SmallVectorImpl<llvm::IntervalMapImpl::NodeRef>::swap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a1 == a2)
    return;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 != a1 + 16 && *(_QWORD *)a2 != a2 + 16)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v5;
    v6 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v6;
    return;
  }
  v7 = *(unsigned int *)(a2 + 8);
  if (*(_DWORD *)(a1 + 12) < v7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v7, 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a2 + 12) >= v8)
    {
LABEL_7:
      v9 = *(_DWORD *)(a2 + 8);
      if (v8 >= v9)
        v10 = v9;
      else
        v10 = v8;
      if (!(_DWORD)v10)
        goto LABEL_11;
      goto LABEL_20;
    }
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 8);
    if (*(_DWORD *)(a2 + 12) >= v8)
      goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v8, 8);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a2 + 8);
  if (v8 >= v9)
    v10 = v9;
  else
    v10 = v8;
  if (!(_DWORD)v10)
  {
LABEL_11:
    v11 = v8;
    v12 = v9;
    v13 = v8 - v9;
    if (v8 > v9)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_20:
  v14 = 0;
  do
  {
    v15 = *(_QWORD *)a2;
    v16 = *(_QWORD *)(*(_QWORD *)a1 + v14);
    *(_QWORD *)(*(_QWORD *)a1 + v14) = *(_QWORD *)(*(_QWORD *)a2 + v14);
    *(_QWORD *)(v15 + v14) = v16;
    v14 += 8;
  }
  while (8 * v10 != v14);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a2 + 8);
  v11 = v8;
  v12 = v9;
  v13 = v8 - v9;
  if (v8 > v9)
  {
LABEL_12:
    if ((_DWORD)v10 != (_DWORD)v8)
    {
      memcpy((void *)(*(_QWORD *)a2 + 8 * v12), (const void *)(*(_QWORD *)a1 + 8 * v10), *(_QWORD *)a1 + 8 * v11 - (*(_QWORD *)a1 + 8 * v10));
      v9 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a2 + 8) = v13 + v9;
    *(_DWORD *)(a1 + 8) = v10;
    return;
  }
LABEL_23:
  v17 = v9 - v8;
  if (v9 > v8)
  {
    if ((_DWORD)v10 != v9)
    {
      memcpy((void *)(*(_QWORD *)a1 + 8 * v11), (const void *)(*(_QWORD *)a2 + 8 * v10), *(_QWORD *)a2 + 8 * v12 - (*(_QWORD *)a2 + 8 * v10));
      LODWORD(v8) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v17 + v8;
    *(_DWORD *)(a2 + 8) = v10;
  }
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::insert(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;

  v8 = *(_QWORD *)a1;
  if (!*(_DWORD *)(*(_QWORD *)a1 + 272))
  {
    v9 = a1 + 8;
    result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(_QWORD *)a1, (_DWORD *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4), *(unsigned int *)(v8 + 276), a2, a3, a4);
    if (result <= 0x10)
    {
      *(_DWORD *)(v8 + 276) = result;
      *(_DWORD *)(*(_QWORD *)v9 + 8) = result;
      return result;
    }
    v11 = llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::branchRoot(v8, (unsigned int *)*(unsigned int *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4));
    llvm::IntervalMapImpl::Path::replaceRoot((unsigned int *)(a1 + 8), v8 + 8, *(_DWORD *)(v8 + 276), v11);
  }
  return llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeInsert((_DWORD *)a1, a2, a3, a4);
}

uint64_t llvm::IntervalMapImpl::LeafNode<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v44;
  BOOL v46;
  BOOL v48;
  BOOL v50;
  BOOL v52;
  BOOL v54;
  BOOL v56;
  BOOL v58;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  const double *v71;
  const double *v72;
  const double *v73;
  double *v74;
  double *v75;
  double *v76;
  double *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  const double *v81;
  const double *v82;
  const double *v83;
  const double *v84;
  const double *v85;
  const double *v86;
  const double *v87;
  double *v88;
  double *v89;
  double *v90;
  double *v91;
  double *v92;
  double *v93;
  double *v94;
  double *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v113;
  BOOL v115;
  BOOL v117;
  BOOL v119;
  BOOL v121;
  BOOL v123;
  BOOL v125;
  BOOL v127;
  BOOL v129;
  BOOL v131;
  BOOL v133;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  __int128 *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _OWORD *v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  __int128 *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _OWORD *v170;
  float64x2x2_t v171;
  float64x2x2_t v172;
  float64x2x2_t v173;
  float64x2x2_t v174;
  float64x2x2_t v175;
  float64x2x2_t v176;
  float64x2x2_t v177;
  float64x2x2_t v178;
  float64x2x2_t v179;
  float64x2x2_t v180;
  float64x2x2_t v181;
  float64x2x2_t v182;

  v7 = *a2;
  if (!(_DWORD)v7)
    goto LABEL_11;
  v8 = (v7 - 1);
  if (*(unsigned __int8 *)(a1 + v8 + 256) != a6
    || (v9 = a1 + 16 * v8, v11 = *(_QWORD *)(v9 + 8), v10 = (_QWORD *)(v9 + 8), v11 + 1 != a4))
  {
    if ((_DWORD)v7 == 16)
      return 17;
LABEL_11:
    v16 = a3 - v7;
    if ((_DWORD)a3 == (_DWORD)v7)
    {
      v17 = (_QWORD *)(a1 + 16 * a3);
      *v17 = a4;
      v17[1] = a5;
      *(_BYTE *)(a1 + a3 + 256) = a6;
      return (a3 + 1);
    }
    if (*(unsigned __int8 *)(a1 + v7 + 256) == a6)
    {
      v18 = (_QWORD *)(a1 + 16 * v7);
      if (a5 + 1 == *v18)
      {
        *v18 = a4;
        return a3;
      }
    }
    if ((_DWORD)a3 == 16)
      return 17;
    v19 = (unsigned __int8 *)(a1 + v7 + 256);
    v20 = (~(_DWORD)v7 + a3);
    if (v20 >= 7 && (int)v7 + 1 <= a3)
    {
      v25 = (a3 - 1);
      if (v20 <= v25)
      {
        v26 = (16 * a3) | 8;
        v27 = a1 + v26;
        v28 = 16 * v20;
        if (a1 + v26 - 16 * v20 <= (unint64_t)(a1 + v26))
        {
          v29 = 16 * a3;
          if (a1 + v29 - v28 <= (unint64_t)(a1 + v29))
          {
            v30 = (16 * (a3 - 1)) | 8;
            v31 = a1 + v30;
            if (a1 + v30 - v28 <= (unint64_t)(a1 + v30))
            {
              v32 = 16 * (a3 - 1);
              if (a1 + v32 - v28 <= (unint64_t)(a1 + v32)
                && a1 + (unint64_t)a3 + 256 - v20 <= a1 + (unint64_t)a3 + 256
                && a1 + v25 + 256 - v20 <= (unint64_t)(a1 + v25 + 256))
              {
                v33 = a1 + v29 - v28;
                v34 = a1 + v26 - v28;
                v35 = v29 + a1 + 16;
                v36 = a1 + v32 - v28;
                v37 = a1 + v30 - v28;
                v38 = v32 + a1 + 16;
                v39 = a1 + a3 + 256 - v20;
                v40 = a3 + a1 + 257;
                v41 = a1 + v25 + 256 - v20;
                v42 = v25 + a1 + 257;
                v44 = v33 < v31 && v36 < v27;
                v46 = v33 < v38 && v37 < v27;
                v48 = v33 < v40 && v39 < v27;
                v50 = v33 < v42 && v41 < v27;
                v52 = v34 < v31 && v36 < v35;
                v54 = v34 < v38 && v37 < v35;
                v56 = v34 < v40 && v39 < v35;
                v58 = v34 < v42 && v41 < v35;
                v60 = v36 < v40 && v39 < v31;
                v62 = v37 < v40 && v39 < v38;
                v64 = v39 < v42 && v41 < v40;
                v65 = v34 >= v27 || v33 >= v35;
                if (!v65 || v44)
                {
                  v19 = (unsigned __int8 *)(a1 + v7 + 256);
                }
                else
                {
                  v19 = (unsigned __int8 *)(a1 + v7 + 256);
                  if (!v46 && !v48 && !v50 && !v52 && !v54 && !v56 && !v58 && !v60 && !v62 && !v64)
                  {
                    v66 = v20 + 1;
                    if (v20 < 0xF)
                    {
                      v67 = 0;
                      goto LABEL_117;
                    }
                    v67 = v66 & 0x1FFFFFFF0;
                    v78 = v66 & 0x1FFFFFFF0;
                    v79 = a3;
                    do
                    {
                      v80 = v79 - 1;
                      v81 = (const double *)(a1 - 240 + 16 * v80);
                      v82 = v81;
                      v172 = vld2q_f64(v82);
                      v82 += 4;
                      v174 = vld2q_f64(v82);
                      v83 = v81 + 8;
                      v176 = vld2q_f64(v83);
                      v84 = v81 + 12;
                      v178 = vld2q_f64(v84);
                      v85 = v81 + 16;
                      v179 = vld2q_f64(v85);
                      v86 = v81 + 20;
                      v180 = vld2q_f64(v86);
                      v87 = v81 + 24;
                      v181 = vld2q_f64(v87);
                      v81 += 28;
                      v182 = vld2q_f64(v81);
                      v88 = (double *)(a1 - 248 + 16 * v79);
                      v89 = v88 + 1;
                      vst2q_f64(v89, v172);
                      v90 = v88 + 5;
                      vst2q_f64(v90, v174);
                      v91 = v88 + 9;
                      vst2q_f64(v91, v176);
                      v92 = v88 + 13;
                      vst2q_f64(v92, v178);
                      v93 = v88 + 17;
                      vst2q_f64(v93, v179);
                      v94 = v88 + 21;
                      vst2q_f64(v94, v180);
                      v95 = v88 + 25;
                      vst2q_f64(v95, v181);
                      v88 += 29;
                      vst2q_f64(v88, v182);
                      *(_OWORD *)(a1 + 241 + v79) = *(_OWORD *)(a1 + 241 + v80);
                      v79 -= 16;
                      v78 -= 16;
                    }
                    while (v78);
                    if (v66 == v67)
                      goto LABEL_22;
                    if ((v66 & 8) != 0)
                    {
LABEL_117:
                      v16 -= v66 & 0xFFFFFFF8;
                      v68 = a3 - v67;
                      v69 = v67 - (v66 & 0x1FFFFFFF8);
                      do
                      {
                        v70 = v68 - 1;
                        v71 = (const double *)(a1 - 112 + 16 * v70);
                        v72 = v71;
                        v171 = vld2q_f64(v72);
                        v72 += 4;
                        v173 = vld2q_f64(v72);
                        v73 = v71 + 8;
                        v175 = vld2q_f64(v73);
                        v71 += 12;
                        v177 = vld2q_f64(v71);
                        v74 = (double *)(a1 - 120 + 16 * v68);
                        v75 = v74 + 1;
                        vst2q_f64(v75, v171);
                        v76 = v74 + 5;
                        vst2q_f64(v76, v173);
                        v77 = v74 + 9;
                        vst2q_f64(v77, v175);
                        v74 += 13;
                        vst2q_f64(v74, v177);
                        *(_QWORD *)(a1 + 249 + v68) = *(_QWORD *)(a1 + 249 + v70);
                        v68 -= 8;
                        v69 += 8;
                      }
                      while (v69);
                      if (v66 == (v66 & 0x1FFFFFFF8))
                        goto LABEL_22;
                      goto LABEL_20;
                    }
                    v16 -= v67;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_20:
    v21 = v7 + v16;
    do
    {
      v22 = v21 - 1;
      *(_OWORD *)(a1 + 16 * v21) = *(_OWORD *)(a1 + 16 * v22);
      *(_BYTE *)(a1 + 256 + v21--) = *(_BYTE *)(a1 + 256 + v22);
      --v16;
    }
    while (v16);
LABEL_22:
    v23 = (_QWORD *)(a1 + 16 * v7);
    *v23 = a4;
    v23[1] = a5;
    *v19 = a6;
    return (a3 + 1);
  }
  *a2 = v8;
  if ((_DWORD)a3 != (_DWORD)v7 && *(unsigned __int8 *)(a1 + v7 + 256) == a6)
  {
    v12 = 16 * v7;
    if (a5 + 1 == *(_QWORD *)(a1 + 16 * v7))
    {
      *v10 = *(_QWORD *)(a1 + 16 * v7 + 8);
      v13 = (v7 + 1);
      if ((_DWORD)v13 == (_DWORD)a3)
        return (a3 - 1);
      v14 = ~(_DWORD)v7 + a3;
      if (v14 < 8)
      {
        v15 = v7;
        goto LABEL_243;
      }
      v96 = (a3 - 2 - v7);
      if ((int)a3 - 2 < v7)
      {
        v15 = v7;
      }
      else if ((int)a3 - 1 < v13)
      {
        v15 = v7;
      }
      else
      {
        v97 = a1 + v12;
        v98 = a1 + v12 + 8;
        v99 = 16 * (a3 - 2 - v7);
        if (v98 + v99 < v98)
        {
          v15 = v7;
        }
        else if (v97 + v99 < v97)
        {
          v15 = v7;
        }
        else
        {
          v100 = 16 * (v7 + 1);
          v101 = a1 + v100;
          v102 = a1 + v100 + 8;
          if (v102 + v99 < v102)
          {
            v15 = v7;
          }
          else if (v101 + v99 < v101)
          {
            v15 = v7;
          }
          else
          {
            v103 = v12 + v99;
            v104 = a1 + (v103 | 8);
            v105 = v103 + a1 + 16;
            v106 = v7 + a1 + 256;
            v107 = v7 + a1 + v96 + 257;
            v108 = a1 + ((v99 + v100) | 8);
            v109 = v99 + v100 + a1 + 16;
            v110 = v13 + a1 + 256;
            v111 = v13 + a1 + v96 + 257;
            v113 = v97 < v107 && v106 < v104;
            v115 = v97 < v108 && v101 < v104;
            v117 = v97 < v109 && v102 < v104;
            v119 = v97 < v111 && v110 < v104;
            v121 = v98 < v107 && v106 < v105;
            v123 = v98 < v108 && v101 < v105;
            v125 = v98 < v109 && v102 < v105;
            v127 = v98 < v111 && v110 < v105;
            v129 = v106 < v108 && v101 < v107;
            v131 = v106 < v109 && v102 < v107;
            v133 = v106 < v111 && v110 < v107;
            if (v98 < v104 && v97 < v105)
            {
              v15 = v7;
              goto LABEL_243;
            }
            if (v113)
            {
              v15 = v7;
            }
            else if (v115)
            {
              v15 = v7;
            }
            else if (v117)
            {
              v15 = v7;
            }
            else if (v119)
            {
              v15 = v7;
            }
            else if (v121)
            {
              v15 = v7;
            }
            else if (v123)
            {
              v15 = v7;
            }
            else if (v125)
            {
              v15 = v7;
            }
            else if (v127)
            {
              v15 = v7;
            }
            else if (v129)
            {
              v15 = v7;
            }
            else if (v131)
            {
              v15 = v7;
            }
            else if (v133)
            {
              v15 = v7;
            }
            else
            {
              if (v14 < 0x10)
              {
                v135 = 0;
                goto LABEL_224;
              }
              v135 = v14 & 0xFFFFFFF0;
              v136 = v7;
              v137 = v14 & 0xFFFFFFF0;
              do
              {
                v138 = v136 + 1;
                v139 = (__int128 *)(a1 + 16 * v138);
                v141 = *v139;
                v140 = v139[1];
                v143 = v139[2];
                v142 = v139[3];
                v144 = v136;
                v146 = v139[4];
                v145 = v139[5];
                v148 = v139[6];
                v147 = v139[7];
                v150 = v139[8];
                v149 = v139[9];
                v152 = v139[10];
                v151 = v139[11];
                v154 = v139[12];
                v153 = v139[13];
                v156 = v139[14];
                v155 = v139[15];
                v157 = (_OWORD *)(a1 + 16 * v136);
                v157[14] = v156;
                v157[15] = v155;
                v157[12] = v154;
                v157[13] = v153;
                v157[10] = v152;
                v157[11] = v151;
                v157[8] = v150;
                v157[9] = v149;
                v157[6] = v148;
                v157[7] = v147;
                v157[4] = v146;
                v157[5] = v145;
                v157[2] = v143;
                v157[3] = v142;
                *v157 = v141;
                v157[1] = v140;
                v136 += 16;
                *(_OWORD *)(a1 + 256 + v144) = *(_OWORD *)(a1 + 256 + v138);
                v137 -= 16;
              }
              while (v137);
              if (v14 == v135)
                return (a3 - 1);
              if ((v14 & 8) != 0)
              {
LABEL_224:
                LODWORD(v13) = v13 + (v14 & 0xFFFFFFF8);
                v15 = v7 + (v14 & 0xFFFFFFF8);
                v158 = v135 - (v14 & 0xFFFFFFF8);
                v159 = v135 + v7;
                do
                {
                  v160 = v159 + 1;
                  v161 = (__int128 *)(a1 + 16 * v160);
                  v163 = *v161;
                  v162 = v161[1];
                  v165 = v161[2];
                  v164 = v161[3];
                  v167 = v161[4];
                  v166 = v161[5];
                  v169 = v161[6];
                  v168 = v161[7];
                  v170 = (_OWORD *)(a1 + 16 * v159);
                  v170[6] = v169;
                  v170[7] = v168;
                  v170[4] = v167;
                  v170[5] = v166;
                  v170[2] = v165;
                  v170[3] = v164;
                  *v170 = v163;
                  v170[1] = v162;
                  *(_QWORD *)(a1 + 256 + v159) = *(_QWORD *)(a1 + 256 + v160);
                  v159 += 8;
                  v158 += 8;
                }
                while (v158);
                if (v14 == (v14 & 0xFFFFFFF8))
                  return (a3 - 1);
                goto LABEL_243;
              }
              v15 = v7 + v135;
              LODWORD(v13) = v13 + v135;
            }
          }
        }
      }
      do
      {
LABEL_243:
        *(_OWORD *)(a1 + 16 * v15) = *(_OWORD *)(a1 + 16 * v13);
        *(_BYTE *)(a1 + 256 + v15) = *(_BYTE *)(a1 + 256 + v13);
        LODWORD(v13) = v13 + 1;
        ++v15;
      }
      while ((_DWORD)a3 != (_DWORD)v13);
      return (a3 - 1);
    }
  }
  *v10 = a5;
  return a3;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::treeFind(_DWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  int v14;

  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 276);
  if ((_DWORD)v5)
  {
    v6 = 0;
    while (*(_QWORD *)(v4 + 136 + 8 * v6) < a2)
    {
      if ((_DWORD)v5 == (_DWORD)++v6)
      {
        v6 = *(unsigned int *)(*(_QWORD *)a1 + 276);
        v7 = *(_DWORD *)(v4 + 272);
        v8 = (uint64_t)(a1 + 2);
        a1[4] = 0;
        v9 = a1[5];
        if (v7)
          goto LABEL_8;
        goto LABEL_11;
      }
    }
    v12 = *(_DWORD *)(v4 + 272);
    v8 = (uint64_t)(a1 + 2);
    a1[4] = 0;
    v9 = a1[5];
    if (v12)
      goto LABEL_8;
  }
  else
  {
    v6 = 0;
    v10 = *(_DWORD *)(v4 + 272);
    v8 = (uint64_t)(a1 + 2);
    a1[4] = 0;
    v9 = a1[5];
    if (v10)
    {
LABEL_8:
      v4 += 8;
      if (v9)
      {
        v11 = 0;
        goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
LABEL_11:
  if (v9)
  {
    v11 = 0;
    goto LABEL_13;
  }
LABEL_17:
  llvm::SmallVectorBase<unsigned int>::grow_pod(v8, a1 + 6, 1uLL, 16);
  v11 = a1[4];
LABEL_13:
  v13 = (_QWORD *)(*(_QWORD *)v8 + 16 * v11);
  *v13 = v4;
  v13[1] = v5 | (v6 << 32);
  v14 = a1[4];
  a1[4] = v14 + 1;
  if (v14 != -1 && *(_DWORD *)(*(_QWORD *)v8 + 12) < *(_DWORD *)(*(_QWORD *)v8 + 8))
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind((uint64_t)a1, a2);
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::const_iterator::pathFillFind(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;

  v4 = a1 + 8;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 8) + 16 * (v5 - 1);
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 272);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 8 * *(unsigned int *)(v6 + 12));
  v9 = v7 - v5;
  if (v7 != v5)
  {
    do
    {
      v10 = 0;
      v11 = v8 & 0xFFFFFFFFFFFFFFC0;
      do
      {
        v12 = v10;
        v13 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFC0) + 8 * v10++ + 0x60);
      }
      while (v13 < a2);
      if (v5 >= *(_DWORD *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 24), v5 + 1, 16);
        v5 = *(_DWORD *)(a1 + 16);
      }
      v14 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 16 * v5);
      *v14 = v11;
      v14[1] = (v8 & 0x3F | ((unint64_t)v12 << 32)) + 1;
      v5 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 16) = v5;
      v8 = *(_QWORD *)(v11 + 8 * v12);
      --v9;
    }
    while (v9);
  }
  v15 = 0;
  do
  {
    v16 = v15;
    v17 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFC0) + 16 * v15++ + 8);
  }
  while (v17 < a2);
  v18 = v16;
  if (v5 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 24), v5 + 1, 16);
    v5 = *(_DWORD *)(a1 + 16);
  }
  v19 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 16 * v5);
  *v19 = v8 & 0xFFFFFFFFFFFFFFC0;
  v19[1] = (v8 & 0x3F | (v18 << 32)) + 1;
  ++*(_DWORD *)(a1 + 16);
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeInsert(_DWORD *a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  llvm::IntervalMapImpl::Path *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t LeftSibling;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t result;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  _BOOL4 v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  v9 = a1[4];
  if (!v9 || (v10 = *(_QWORD *)v8, *(_DWORD *)(*(_QWORD *)v8 + 12) >= *(_DWORD *)(*(_QWORD *)v8 + 8)))
  {
    v11 = *(unsigned int *)(*(_QWORD *)a1 + 272);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(_QWORD *)a1 + 272));
    v10 = *((_QWORD *)a1 + 1);
    ++*(_DWORD *)(v10 + 16 * v11 + 12);
    v9 = a1[4];
  }
  v12 = v10 + 16 * v9;
  if (!*(_DWORD *)(v12 - 4) && **(_QWORD **)(v12 - 16) > a2)
  {
    LeftSibling = llvm::IntervalMapImpl::Path::getLeftSibling(v8, v9 - 1);
    if (LeftSibling)
    {
      if (*(unsigned __int8 *)(LeftSibling + 176) == a4)
      {
        v14 = LeftSibling & 0xFFFFFFFFFFFFFFC0;
        v15 = LeftSibling & 0x3F;
        v16 = (unint64_t *)((LeftSibling & 0xFFFFFFFFFFFFFFC0) + 16 * v15 + 8);
        if (*(_QWORD *)((LeftSibling & 0xFFFFFFFFFFFFFFC0) + 16 * v15 + 8) + 1 == a2)
        {
          v17 = a1[4];
          v18 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v17 - 16);
          llvm::IntervalMapImpl::Path::moveLeft(v8, v17 - 1);
          if (*(_QWORD *)v18 > a3 && (*(unsigned __int8 *)(v18 + 176) != a4 || a3 + 1 != *(_QWORD *)v18))
          {
            v20 = a1[4] - 1;
            *v16 = a3;
            return llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::setNodeStop((uint64_t)a1, v20, a3);
          }
          a2 = *(_QWORD *)(v14 + 16 * v15);
          llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeErase((llvm::IntervalMapImpl::Path *)a1, 0);
        }
      }
    }
    else
    {
      **(_QWORD **)a1 = a2;
    }
  }
  v22 = (_DWORD *)(*((_QWORD *)a1 + 1) + 16 * a1[4]);
  v23 = *--v22;
  v24 = *(v22 - 1);
  v25 = v23 == v24;
  result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(_QWORD *)(v22 - 3), v22, v24, a2, a3, a4);
  if (result >= 0xC)
  {
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::overflow<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>((llvm::IntervalMapImpl::Path *)a1, a1[4] - 1);
    v26 = (_DWORD *)(*((_QWORD *)a1 + 1) + 16 * a1[4]);
    v27 = *--v26;
    v28 = *(v26 - 1);
    v25 = v27 == v28;
    result = llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>::insertFrom(*(_QWORD *)(v26 - 3), v26, v28, a2, a3, a4);
  }
  v29 = a1[4];
  v30 = *((_QWORD *)a1 + 1);
  *(_DWORD *)(v30 + 16 * (v29 - 1) + 8) = result;
  if (v29 != 1)
  {
    v31 = v30 + 16 * (v29 - 2);
    *(_QWORD *)(*(_QWORD *)v31 + 8 * *(unsigned int *)(v31 + 12)) = *(_QWORD *)(*(_QWORD *)v31
                                                                                + 8 * *(unsigned int *)(v31 + 12)) & 0xFFFFFFFFFFFFFFC0 | (result - 1);
  }
  if (v25)
  {
    v32 = a1[4];
    v33 = v32 - 1;
    if (v32 != 1)
    {
      v34 = *(_QWORD *)v8;
      v35 = 16 * v33;
      while (1)
      {
        v36 = v35 - 16;
        if (v35 == 16)
          break;
        v37 = v34 + v35;
        v38 = *(_QWORD *)(v37 - 16);
        v40 = v37 - 8;
        LODWORD(v37) = *(_DWORD *)(v37 - 8);
        v39 = *(unsigned int *)(v40 + 4);
        *(_QWORD *)(v38 + 8 * v39 + 96) = a3;
        LODWORD(v38) = v37 - 1;
        v35 = v36;
        if ((_DWORD)v39 != (_DWORD)v38)
          return result;
      }
      *(_QWORD *)(*(_QWORD *)v34 + 8 * *(unsigned int *)(v34 + 12) + 128) = a3;
    }
  }
  return result;
}

unint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::branchRoot(uint64_t a1, unsigned int *a2)
{
  unint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)2, *(_DWORD *)(a1 + 276), 0xBu, 0, &v15, a2, 1);
  v4 = llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(_QWORD *)(a1 + 280));
  v5 = (unint64_t)v4;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v6 = v15;
  if (v15)
  {
    v7 = 0;
    do
    {
      v4[v7] = *(_OWORD *)(a1 + 16 * v7);
      *((_BYTE *)v4 + v7 + 176) = *(_BYTE *)(a1 + v7 + 256);
      ++v7;
    }
    while (v6 != v7);
    v8 = v15;
  }
  else
  {
    v8 = 0;
  }
  v9 = (unint64_t)llvm::RecyclingAllocator<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>,char,192ul,64ul>::Allocate<llvm::IntervalMapImpl::LeafNode<unsigned long long,char,11u,llvm::IntervalMapInfo<unsigned long long>>>(*(_QWORD *)(a1 + 280));
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  v10 = v16;
  if (v16)
  {
    v11 = 0;
    do
    {
      v12 = v8 + v11;
      *(_OWORD *)(v9 + 16 * v11) = *(_OWORD *)(a1 + 16 * v12);
      *(_BYTE *)(v9 + v11++ + 176) = *(_BYTE *)(a1 + v12 + 256);
    }
    while (v10 != (_DWORD)v11);
    v13 = (v16 - 1);
  }
  else
  {
    v13 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1) & 0xFFFFFFC0) + 16 * (v15 - 1) + 8);
  *(_QWORD *)(a1 + 8) = v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFC0 | v13 & 0xFFFFFFFFFFFFFFC0) + 16 * v13 + 8);
  *(_QWORD *)(a1 + 16) = v9 & 0xFFFFFFFFFFFFFFC0 | v13;
  *(_QWORD *)a1 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFC0 | (v8 - 1) & 0xFFFFFFC0);
  *(_QWORD *)(a1 + 272) = 0x200000001;
  return v3;
}

uint64_t llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::setNodeStop(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = 16 * a2;
    while (1)
    {
      v5 = v4 - 16;
      if (v4 == 16)
        break;
      v6 = v3 + v4;
      v7 = *(_QWORD *)(v6 - 16);
      v9 = v6 - 8;
      LODWORD(v6) = *(_DWORD *)(v6 - 8);
      v8 = *(unsigned int *)(v9 + 4);
      *(_QWORD *)(v7 + 8 * v8 + 96) = a3;
      LODWORD(v7) = v6 - 1;
      v4 = v5;
      if ((_DWORD)v8 != (_DWORD)v7)
        return result;
    }
    *(_QWORD *)(*(_QWORD *)v3 + 8 * *(unsigned int *)(v3 + 12) + 128) = a3;
  }
  return result;
}

void llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::treeErase(llvm::IntervalMapImpl::Path *this, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v44;
  BOOL v46;
  BOOL v48;
  BOOL v50;
  BOOL v52;
  BOOL v54;
  BOOL v56;
  BOOL v58;
  BOOL v60;
  BOOL v62;
  BOOL v64;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  __int128 *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  int v114;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *(_QWORD *)this;
  v7 = *((unsigned int *)this + 4);
  v8 = v4 + 16 * v7;
  v9 = *(_QWORD **)(v8 - 16);
  v10 = *(_DWORD *)(v8 - 8);
  if (v10 == 1)
  {
    v11 = *(_QWORD **)(v6 + 280);
    *v9 = *v11;
    *v11 = v9;
    llvm::IntervalMap<unsigned long long,char,16u,llvm::IntervalMapInfo<unsigned long long>>::iterator::eraseNode((uint64_t *)this, *(_DWORD *)(v6 + 272));
    if (a2)
    {
      if (*(_DWORD *)(v6 + 272))
      {
        v12 = *((unsigned int *)this + 4);
        if ((_DWORD)v12)
        {
          v13 = *v5;
          if (*(_DWORD *)(*v5 + 12) < *(_DWORD *)(*v5 + 8))
          {
            v14 = (int *)(v13 + 12);
            v15 = *((unsigned int *)this + 4);
            while (1)
            {
              v16 = *v14;
              v14 += 4;
              if (v16)
                break;
              if (!--v15)
              {
                v17 = *(_QWORD **)(v13 + 16 * v12 - 16);
                goto LABEL_150;
              }
            }
          }
        }
      }
    }
    return;
  }
  v18 = *(unsigned int *)(v8 - 4);
  v19 = (v18 + 1);
  if ((_DWORD)v19 != v10)
  {
    v20 = v10 + ~(_DWORD)v18;
    if (v20 < 8)
    {
      v21 = v18;
      goto LABEL_134;
    }
    v22 = (v10 - 2 - v18);
    v23 = 2 * v18;
    v24 = (char *)&v9[2 * v18];
    v25 = (unint64_t)(v24 + 8);
    v26 = 16 * v22;
    v27 = 2 * (v18 + 1);
    v28 = (char *)&v9[v27];
    v29 = (unint64_t)&v9[v27 + 1];
    if (v10 - 2 < v18
      || v10 - 1 < v19
      || (unint64_t)&v24[v26 + 8] < v25
      || &v24[v26] < v24
      || v29 + v26 < v29
      || &v9[v27 + (unint64_t)v26 / 8] < (_QWORD *)v28)
    {
      v21 = v18;
      goto LABEL_134;
    }
    v35 = (char *)v9 + ((v23 * 8 + v26) | 8);
    v36 = (unint64_t)&v9[v23 + 2 + (unint64_t)v26 / 8];
    v37 = (unint64_t)v9 + v18 + 176;
    v38 = (unint64_t)v9 + v18 + v22 + 177;
    v39 = (char *)v9 + ((v26 + v27 * 8) | 8);
    v40 = (unint64_t)&v9[(unint64_t)v26 / 8 + 2 + v27];
    v41 = (unint64_t)v9 + v19 + 176;
    v42 = (unint64_t)v9 + v19 + v22 + 177;
    v44 = (unint64_t)v24 < v38 && v37 < (unint64_t)v35;
    v46 = v24 < v39 && v28 < v35;
    v48 = (unint64_t)v24 < v40 && v29 < (unint64_t)v35;
    v50 = (unint64_t)v24 < v42 && v41 < (unint64_t)v35;
    v52 = v25 < v38 && v37 < v36;
    v54 = v25 < (unint64_t)v39 && (unint64_t)v28 < v36;
    v56 = v25 < v40 && v29 < v36;
    v58 = v25 < v42 && v41 < v36;
    v60 = v37 < (unint64_t)v39 && (unint64_t)v28 < v38;
    v62 = v37 < v40 && v29 < v38;
    v64 = v37 < v42 && v41 < v38;
    if (v25 < (unint64_t)v35 && (unint64_t)v24 < v36)
    {
      v21 = v18;
      goto LABEL_134;
    }
    if (v44)
    {
      v21 = v18;
    }
    else if (v46)
    {
      v21 = v18;
    }
    else if (v48)
    {
      v21 = v18;
    }
    else if (v50)
    {
      v21 = v18;
    }
    else if (v52)
    {
      v21 = v18;
    }
    else if (v54)
    {
      v21 = v18;
    }
    else if (v56)
    {
      v21 = v18;
    }
    else if (v58)
    {
      v21 = v18;
    }
    else if (v60)
    {
      v21 = v18;
    }
    else if (v62)
    {
      v21 = v18;
    }
    else if (v64)
    {
      v21 = v18;
    }
    else
    {
      if (v20 < 0x10)
      {
        v66 = 0;
        goto LABEL_120;
      }
      v66 = v20 & 0xFFFFFFF0;
      v67 = v18;
      v68 = v20 & 0xFFFFFFF0;
      do
      {
        v69 = v67 + 1;
        v70 = (__int128 *)&v9[2 * v69];
        v72 = *v70;
        v71 = v70[1];
        v74 = v70[2];
        v73 = v70[3];
        v75 = v67;
        v77 = v70[4];
        v76 = v70[5];
        v79 = v70[6];
        v78 = v70[7];
        v81 = v70[8];
        v80 = v70[9];
        v83 = v70[10];
        v82 = v70[11];
        v85 = v70[12];
        v84 = v70[13];
        v87 = v70[14];
        v86 = v70[15];
        v88 = &v9[2 * v67];
        v88[14] = v87;
        v88[15] = v86;
        v88[12] = v85;
        v88[13] = v84;
        v88[10] = v83;
        v88[11] = v82;
        v88[8] = v81;
        v88[9] = v80;
        v88[6] = v79;
        v88[7] = v78;
        v88[4] = v77;
        v88[5] = v76;
        v88[2] = v74;
        v88[3] = v73;
        *v88 = v72;
        v88[1] = v71;
        v67 += 16;
        *(_OWORD *)((char *)v9 + v75 + 176) = *(_OWORD *)((char *)v9 + v69 + 176);
        v68 -= 16;
      }
      while (v68);
      if (v20 == v66)
        goto LABEL_135;
      if ((v20 & 8) != 0)
      {
LABEL_120:
        LODWORD(v19) = v19 + (v20 & 0xFFFFFFF8);
        v21 = v18 + (v20 & 0xFFFFFFF8);
        v89 = v66 - (v20 & 0xFFFFFFF8);
        v90 = v66 + v18;
        do
        {
          v91 = v90 + 1;
          v92 = (__int128 *)&v9[2 * v91];
          v94 = *v92;
          v93 = v92[1];
          v96 = v92[2];
          v95 = v92[3];
          v98 = v92[4];
          v97 = v92[5];
          v100 = v92[6];
          v99 = v92[7];
          v101 = &v9[2 * v90];
          v101[6] = v100;
          v101[7] = v99;
          v101[4] = v98;
          v101[5] = v97;
          v101[2] = v96;
          v101[3] = v95;
          *v101 = v94;
          v101[1] = v93;
          *(_QWORD *)((char *)v9 + v90 + 176) = *(_QWORD *)((char *)v9 + v91 + 176);
          v90 += 8;
          v89 += 8;
        }
        while (v89);
        if (v20 == (v20 & 0xFFFFFFF8))
          goto LABEL_135;
        goto LABEL_134;
      }
      v21 = v18 + v66;
      LODWORD(v19) = v19 + v66;
    }
    do
    {
LABEL_134:
      *(_OWORD *)&v9[2 * v21] = *(_OWORD *)&v9[2 * v19];
      *((_BYTE *)v9 + v21 + 176) = *((_BYTE *)v9 + v19 + 176);
      LODWORD(v19) = v19 + 1;
      ++v21;
    }
    while (v10 != (_DWORD)v19);
LABEL_135:
    v4 = *((_QWORD *)this + 1);
    v7 = *((unsigned int *)this + 4);
    v10 = *(_DWORD *)(v4 + 16 * v7 - 8);
  }
  v102 = *(unsigned int *)(v6 + 272);
  *(_DWORD *)(v4 + 16 * v102 + 8) = v10 - 1;
  if ((_DWORD)v102)
  {
    v103 = v4 + 16 * (v102 - 1);
    *(_QWORD *)(*(_QWORD *)v103 + 8 * *(unsigned int *)(v103 + 12)) = *(_QWORD *)(*(_QWORD *)v103
                                                                                  + 8 * *(unsigned int *)(v103 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v10 - 2);
    v4 = *((_QWORD *)this + 1);
    v7 = *((unsigned int *)this + 4);
  }
  v104 = v4 + 16 * v7;
  if (*(_DWORD *)(v104 - 4) == v10 - 1)
  {
    v105 = *(unsigned int *)(v6 + 272);
    if ((_DWORD)v105)
    {
      v106 = v9[2 * (v10 - 2) + 1];
      v107 = 16 * v105;
      while (1)
      {
        v108 = v107 - 16;
        if (v107 == 16)
          break;
        v109 = v4 + v107;
        v110 = *(_QWORD *)(v109 - 16);
        v112 = v109 - 8;
        LODWORD(v109) = *(_DWORD *)(v109 - 8);
        v111 = *(unsigned int *)(v112 + 4);
        *(_QWORD *)(v110 + 8 * v111 + 96) = v106;
        LODWORD(v110) = v109 - 1;
        v107 = v108;
        if ((_DWORD)v111 != (_DWORD)v110)
          goto LABEL_153;
      }
      *(_QWORD *)(*(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 12) + 128) = v106;
    }
LABEL_153:
    llvm::IntervalMapImpl::Path::moveRight(v5, v105);
  }
  else if (a2)
  {
    if ((_DWORD)v7)
    {
      v113 = (int *)(v4 + 12);
      while (1)
      {
        v114 = *v113;
        v113 += 4;
        if (v114)
          break;
        if (!--v7)
          goto LABEL_149;
      }
    }
    else
    {
LABEL_149:
      v17 = *(_QWORD **)(v104 - 16);
LABEL_150:
      *(_QWORD *)v6 = *v17;
    }
  }
}

