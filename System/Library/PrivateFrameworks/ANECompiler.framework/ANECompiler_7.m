void sub_22DC115A4()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 144));
}

void sub_22DC115AC()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 144));
}

void sub_22DC115B4()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 144));
}

void sub_22DC115BC(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, absl::lts_2020_02_25::Mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  absl::lts_2020_02_25::Mutex::Unlock(a10, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedBoundsManager::Synchronize(operations_research::sat::SharedBoundsManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  absl::lts_2020_02_25::Mutex *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  absl::lts_2020_02_25::Mutex *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  v56 = (operations_research::sat::SharedBoundsManager *)((char *)this + 16);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedBoundsManager *)((char *)this + 16), a2);
  v3 = (uint64_t *)*((_QWORD *)this + 16);
  v4 = (uint64_t *)*((_QWORD *)this + 17);
  if (v3 != v4)
  {
    v5 = *((_QWORD *)this + 30);
    if (v5)
    {
      v6 = 1;
      v57 = (uint64_t *)*((_QWORD *)this + 17);
      while (1)
      {
        v58 = v3;
        v7 = *v3;
        v8 = *v3 << 32 >> 29;
        *(_QWORD *)(*((_QWORD *)this + 19) + v8) = *(_QWORD *)(*((_QWORD *)this + 3) + v8);
        *(_QWORD *)(*((_QWORD *)this + 22) + v8) = *(_QWORD *)(*((_QWORD *)this + 6) + v8);
        if (v6)
          break;
LABEL_4:
        v3 = v58 + 1;
        if (v58 + 1 == v57)
          goto LABEL_34;
      }
      v9 = 0;
      v61 = (int)v7;
      v10 = (unint64_t)(int)v7 >> 6;
      v11 = 1 << v7;
      v59 = 1 << v7;
      v60 = v10;
      while (1)
      {
        v13 = *((_QWORD *)this + 29) + v9;
        v14 = *(_QWORD *)(*((_QWORD *)this + 26) + 8 * (v13 / 0x33));
        v15 = v13 % 0x33;
        v16 = *(_QWORD *)(v14 + 80 * v15 + 8);
        v17 = *(_QWORD *)(v16 + 8 * v10);
        if ((v17 & v11) != 0)
          goto LABEL_9;
        *(_QWORD *)(v16 + 8 * v10) = v17 | v11;
        v18 = v14 + 80 * v15;
        v21 = *(_QWORD *)(v18 + 72);
        v20 = (_QWORD *)(v18 + 72);
        v19 = v21;
        v23 = v20 - 1;
        v22 = (char *)*(v20 - 1);
        if ((unint64_t)v22 >= v21)
          break;
        *(_QWORD *)v22 = v61;
        v12 = (uint64_t)(v22 + 8);
LABEL_8:
        *v23 = v12;
LABEL_9:
        ++v9;
        v6 = v5;
        if (v5 <= v9)
          goto LABEL_4;
      }
      v24 = v20 - 2;
      v25 = (char *)*(v20 - 2);
      v26 = (v22 - v25) >> 3;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v28 = v19 - (_QWORD)v25;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v30 = v5;
        v31 = v29;
        v32 = operator new(8 * v29);
        v24 = v20 - 2;
        v29 = v31;
        v5 = v30;
        v26 = (v22 - v25) >> 3;
        v33 = &v32[8 * v26];
        *v33 = v61;
        v12 = (uint64_t)(v33 + 1);
        if (v22 == v25)
          goto LABEL_29;
      }
      else
      {
        v32 = 0;
        v33 = (_QWORD *)(8 * v26);
        *(_QWORD *)(8 * v26) = v61;
        v12 = 8 * v26 + 8;
        if (v22 == v25)
        {
LABEL_29:
          *v24 = v33;
          *v23 = v12;
          *v20 = &v32[8 * v29];
          if (v25)
          {
            operator delete(v25);
            v5 = *((_QWORD *)this + 30);
          }
          v11 = v59;
          v10 = v60;
          goto LABEL_8;
        }
      }
      v34 = v22 - 8 - v25;
      if (v34 < 0x58)
        goto LABEL_39;
      if ((unint64_t)(v25 - v32) < 0x20)
        goto LABEL_39;
      v35 = (v34 >> 3) + 1;
      v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
      v37 = &v22[-v36];
      v33 = (_QWORD *)((char *)v33 - v36);
      v38 = &v32[8 * v26 - 16];
      v39 = v22 - 16;
      v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *v38 = v41;
        v38 -= 2;
        v39 -= 32;
        v40 -= 4;
      }
      while (v40);
      v22 = v37;
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          v42 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v33 = v42;
        }
        while (v22 != v25);
      }
      goto LABEL_29;
    }
    v43 = *((_QWORD *)this + 3);
    v44 = *((_QWORD *)this + 19);
    v45 = *((_QWORD *)this + 6);
    v46 = *((_QWORD *)this + 22);
    do
    {
      v47 = *v3++;
      v48 = 8 * (int)v47;
      *(_QWORD *)(v44 + v48) = *(_QWORD *)(v43 + v48);
      *(_QWORD *)(v46 + v48) = *(_QWORD *)(v45 + v48);
    }
    while (v3 != v4);
  }
LABEL_34:
  bzero(*((void **)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  *((_QWORD *)this + 17) = *((_QWORD *)this + 16);
  absl::lts_2020_02_25::Mutex::Unlock(v56, v49, v50, v51, v52, v53, v54, v55);
}

void sub_22DC11948(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, absl::lts_2020_02_25::Mutex *a10)
{
  absl::lts_2020_02_25::Mutex::Unlock(a10, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::SharedBoundsManager::RegisterNewId(operations_research::sat::SharedBoundsManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  absl::lts_2020_02_25::Mutex *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  absl::lts_2020_02_25::Mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = (operations_research::sat::SharedBoundsManager *)((char *)this + 16);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedBoundsManager *)((char *)this + 16), a2);
  v4 = (_QWORD *)((char *)this + 200);
  v5 = *((_QWORD *)this + 30);
  v6 = (v5 << 32) + 0x100000000;
  if (v6 >> 32 > v5)
  {
    std::deque<operations_research::SparseBitset<long long>>::__append(v4, (v6 >> 32) - v5);
    goto LABEL_12;
  }
  if (v6 >> 32 < v5)
  {
    v7 = *((_QWORD *)this + 29);
    v8 = *((_QWORD *)this + 26);
    v9 = (_QWORD *)(v8 + 8 * (v7 / 0x33));
    if (*((_QWORD *)this + 27) == v8)
    {
      v10 = 0;
      if (v5 << 32 == 0xFFFFFFFF00000000)
      {
LABEL_11:
        std::deque<operations_research::SparseBitset<long long>>::__erase_to_end(v4, v9, v10);
        goto LABEL_12;
      }
    }
    else
    {
      v10 = (_QWORD *)(*v9 + 80 * (v7 % 0x33));
      if (v5 << 32 == 0xFFFFFFFF00000000)
        goto LABEL_11;
    }
    v11 = (v6 >> 32) - 0x3333333333333333 * (((uint64_t)v10 - *v9) >> 4);
    if (v11 < 1)
    {
      v12 = 50 - v11;
      v9 -= v12 / 0x33;
      v10 = (_QWORD *)(*v9 + 80 * (51 * (v12 / 0x33) - v12) + 4000);
    }
    else
    {
      v9 += v11 / 0x33uLL;
      v10 = (_QWORD *)(*v9 + 80 * (v11 % 0x33uLL));
    }
    goto LABEL_11;
  }
LABEL_12:
  operations_research::SparseBitset<long long>::ClearAndResize((uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 26) + 8 * ((*((_QWORD *)this + 29) + (int)v5) / 0x33uLL))+ 80 * ((*((_QWORD *)this + 29) + (int)v5) % 0x33uLL)), *(int *)this);
  v20 = *(_DWORD *)this;
  if (*(int *)this >= 1)
  {
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 8 * v21 + 8);
      v23 = *(_QWORD **)(v22 + 24);
      if (*v23 != *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v21)
        || v23[*(int *)(v22 + 16) - 1] != *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v21))
      {
        operations_research::SparseBitset<long long>::Set((_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26) + 8 * ((*((_QWORD *)this + 29) + (int)v5) / 0x33uLL))+ 80 * ((*((_QWORD *)this + 29) + (int)v5) % 0x33uLL)), v21);
        v20 = *(_DWORD *)this;
      }
      ++v21;
    }
    while (v21 < v20);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v3, v13, v14, v15, v16, v17, v18, v19);
  return v5;
}

void sub_22DC11BBC(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex *v8;

  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedBoundsManager::GetChangedBounds(_QWORD *a1, absl::lts_2020_02_25::Mutex *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  int v8;
  absl::lts_2020_02_25::Mutex *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  absl::lts_2020_02_25::Mutex *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  absl::lts_2020_02_25::Mutex *v91;
  uint64_t *v92;
  _QWORD *v93;
  _QWORD *v94;

  v6 = a4;
  v8 = (int)a2;
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  v10 = (absl::lts_2020_02_25::Mutex *)(a1 + 2);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 2), a2);
  v11 = a1[29] + v8;
  v94 = a1;
  v12 = a1[26];
  v13 = v11 / 0x33;
  v14 = *(_QWORD *)(v12 + 8 * (v11 / 0x33));
  v15 = v11 % 0x33;
  v16 = v14 + 80 * v15;
  v17 = *(uint64_t **)(v16 + 56);
  v92 = *(uint64_t **)(v16 + 64);
  if (v17 != v92)
  {
    v90 = v8;
    v91 = v10;
    v93 = v6;
    while (1)
    {
      v18 = *v17;
      v20 = (char *)a3[1];
      v19 = a3[2];
      if ((unint64_t)v20 < v19)
      {
        *(_DWORD *)v20 = v18;
        v21 = (uint64_t)(v20 + 4);
        goto LABEL_26;
      }
      v22 = (char *)*a3;
      v23 = (uint64_t)&v20[-*a3];
      v24 = v23 >> 2;
      v25 = (v23 >> 2) + 1;
      if (v25 >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v26 = v19 - (_QWORD)v22;
      if (v26 >> 1 > v25)
        v25 = v26 >> 1;
      v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v25;
      if (v27)
        break;
      v28 = 0;
      v29 = (_DWORD *)(4 * v24);
      *(_DWORD *)(4 * v24) = v18;
      v21 = 4 * v24 + 4;
      if (v20 != v22)
        goto LABEL_17;
LABEL_23:
      *a3 = v29;
      a3[1] = v21;
      a3[2] = &v28[4 * v27];
      if (v22)
        operator delete(v22);
      v6 = v93;
LABEL_26:
      a3[1] = v21;
      v39 = v94[19];
      v41 = (char *)v6[1];
      v40 = v6[2];
      if ((unint64_t)v41 >= v40)
      {
        v43 = (char *)*v6;
        v44 = (uint64_t)&v41[-*v6];
        v45 = v44 >> 3;
        v46 = (v44 >> 3) + 1;
        if (v46 >> 61)
          goto LABEL_72;
        v47 = v40 - (_QWORD)v43;
        if (v47 >> 2 > v46)
          v46 = v47 >> 2;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          if (v48 >> 61)
            goto LABEL_70;
          v49 = operator new(8 * v48);
          v50 = &v49[8 * v45];
          *v50 = *(_QWORD *)(v39 + 8 * (int)v18);
          v42 = (uint64_t)(v50 + 1);
          if (v41 == v43)
            goto LABEL_45;
LABEL_39:
          v51 = v41 - 8 - v43;
          if (v51 < 0x58)
            goto LABEL_75;
          if ((unint64_t)(v41 - &v49[v44]) < 0x20)
            goto LABEL_75;
          v52 = (v51 >> 3) + 1;
          v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          v54 = &v41[-v53];
          v50 = (_QWORD *)((char *)v50 - v53);
          v55 = &v49[8 * v45 - 16];
          v56 = v41 - 16;
          v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *v55 = v58;
            v55 -= 2;
            v56 -= 32;
            v57 -= 4;
          }
          while (v57);
          v41 = v54;
          if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_75:
            do
            {
              v59 = *((_QWORD *)v41 - 1);
              v41 -= 8;
              *--v50 = v59;
            }
            while (v41 != v43);
          }
        }
        else
        {
          v49 = 0;
          v50 = (_QWORD *)(8 * v45);
          *(_QWORD *)(8 * v45) = *(_QWORD *)(v39 + 8 * (int)v18);
          v42 = 8 * v45 + 8;
          if (v41 != v43)
            goto LABEL_39;
        }
LABEL_45:
        v6 = v93;
        *v93 = v50;
        v93[1] = v42;
        v93[2] = &v49[8 * v48];
        if (v43)
          operator delete(v43);
        goto LABEL_47;
      }
      *(_QWORD *)v41 = *(_QWORD *)(v39 + 8 * (int)v18);
      v42 = (uint64_t)(v41 + 8);
LABEL_47:
      v6[1] = v42;
      v60 = v94[22];
      v62 = (char *)a5[1];
      v61 = a5[2];
      if ((unint64_t)v62 < v61)
      {
        *(_QWORD *)v62 = *(_QWORD *)(v60 + 8 * (int)v18);
        a5[1] = v62 + 8;
        if (++v17 == v92)
          goto LABEL_68;
      }
      else
      {
        v63 = (char *)*a5;
        v64 = (uint64_t)&v62[-*a5];
        v65 = v64 >> 3;
        v66 = (v64 >> 3) + 1;
        if (v66 >> 61)
LABEL_72:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v67 = v61 - (_QWORD)v63;
        if (v67 >> 2 > v66)
          v66 = v67 >> 2;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          if (v68 >> 61)
LABEL_70:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v69 = operator new(8 * v68);
          v70 = &v69[8 * v65];
          *v70 = *(_QWORD *)(v60 + 8 * (int)v18);
          v71 = (uint64_t)(v70 + 1);
          if (v62 == v63)
            goto LABEL_65;
LABEL_59:
          v72 = v62 - 8 - v63;
          if (v72 < 0x58)
            goto LABEL_76;
          if ((unint64_t)(v62 - &v69[v64]) < 0x20)
            goto LABEL_76;
          v73 = (v72 >> 3) + 1;
          v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
          v75 = &v62[-v74];
          v70 = (_QWORD *)((char *)v70 - v74);
          v76 = &v69[8 * v65 - 16];
          v77 = v62 - 16;
          v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v79 = *(_OWORD *)v77;
            *(v76 - 1) = *((_OWORD *)v77 - 1);
            *v76 = v79;
            v76 -= 2;
            v77 -= 32;
            v78 -= 4;
          }
          while (v78);
          v62 = v75;
          if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_76:
            do
            {
              v80 = *((_QWORD *)v62 - 1);
              v62 -= 8;
              *--v70 = v80;
            }
            while (v62 != v63);
          }
          goto LABEL_65;
        }
        v69 = 0;
        v70 = (_QWORD *)(8 * v65);
        *(_QWORD *)(8 * v65) = *(_QWORD *)(v60 + 8 * (int)v18);
        v71 = 8 * v65 + 8;
        if (v62 != v63)
          goto LABEL_59;
LABEL_65:
        *a5 = v70;
        a5[1] = v71;
        a5[2] = &v69[8 * v68];
        if (v63)
          operator delete(v63);
        v6 = v93;
        a5[1] = v71;
        if (++v17 == v92)
        {
LABEL_68:
          v12 = v94[26];
          v10 = v91;
          v81 = v94[29] + v90;
          v13 = v81 / 0x33;
          v15 = v81 % 0x33;
          goto LABEL_69;
        }
      }
    }
    if (v27 >> 62)
      goto LABEL_70;
    v28 = operator new(4 * v27);
    v29 = &v28[4 * v24];
    *v29 = v18;
    v21 = (uint64_t)(v29 + 1);
    if (v20 == v22)
      goto LABEL_23;
LABEL_17:
    v30 = v20 - 4 - v22;
    if (v30 < 0x2C)
      goto LABEL_77;
    if ((unint64_t)(v20 - &v28[v23]) < 0x20)
      goto LABEL_77;
    v31 = (v30 >> 2) + 1;
    v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    v33 = &v20[-v32];
    v29 = (_DWORD *)((char *)v29 - v32);
    v34 = &v28[4 * v24 - 16];
    v35 = v20 - 16;
    v36 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 8;
    }
    while (v36);
    v20 = v33;
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        v38 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *--v29 = v38;
      }
      while (v20 != v22);
    }
    goto LABEL_23;
  }
LABEL_69:
  v82 = *(_QWORD *)(v12 + 8 * v13) + 80 * v15;
  bzero(*(void **)(v82 + 8), *(_QWORD *)(v82 + 16) - *(_QWORD *)(v82 + 8));
  *(_QWORD *)(v82 + 64) = *(_QWORD *)(v82 + 56);
  absl::lts_2020_02_25::Mutex::Unlock(v10, v83, v84, v85, v86, v87, v88, v89);
}

void sub_22DC12118(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, absl::lts_2020_02_25::Mutex *a11)
{
  absl::lts_2020_02_25::Mutex::Unlock(a11, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void **operations_research::sat::SharedSolutionRepository<long long>::AddInternal(void **result, uint64_t *a2)
{
  void **v2;
  _BYTE *v3;
  uint64_t v4;
  int v5;
  const void *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  _BYTE *v36;
  int *v37;

  v37 = (int *)result;
  v3 = result[9];
  v2 = result + 9;
  v36 = result[10];
  if (v36 != v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = (const void *)a2[1];
    v7 = *a2;
    v8 = a2[2] - (_QWORD)v6;
    if ((unint64_t)((v36 - v3) / 40) <= 1)
      v9 = 1;
    else
      v9 = (v36 - v3) / 40;
    while (1)
    {
      v10 = *(_QWORD *)&v3[40 * v4];
      if (v10 == v7)
      {
        v11 = &v3[40 * v4];
        result = (void **)*((_QWORD *)v11 + 1);
        if (*((_QWORD *)v11 + 2) - (_QWORD)result == v8)
        {
          result = (void **)memcmp(result, v6, v8);
          if (!(_DWORD)result)
            return result;
        }
      }
      v12 = *(_QWORD *)&v3[40 * v5];
      if (v12 == v10)
      {
        v13 = &v3[40 * v4];
        v15 = *((_QWORD *)v13 + 1);
        v14 = *((_QWORD *)v13 + 2);
        if (v15 == v14)
          goto LABEL_6;
        v16 = *(uint64_t **)&v3[40 * v5 + 8];
        v17 = v15 + 8;
        while (v16 != *(uint64_t **)&v3[40 * v5 + 16])
        {
          v18 = *v16;
          v19 = *(_QWORD *)(v17 - 8);
          if (*v16 < v19)
            break;
          ++v16;
          v20 = v19 < v18 || v17 == v14;
          v17 += 8;
          if (v20)
            goto LABEL_6;
        }
      }
      else if (v12 >= v10)
      {
        goto LABEL_6;
      }
      v5 = v4;
LABEL_6:
      if (++v4 == v9)
        goto LABEL_24;
    }
  }
  v5 = 0;
LABEL_24:
  if ((v36 - v3) / 40 >= (unint64_t)*v37)
  {
    v27 = (uint64_t *)&v3[40 * v5];
    if (*a2 == *v27)
    {
      v28 = &v3[40 * v5];
      v30 = *((_QWORD *)v28 + 1);
      v29 = *((_QWORD *)v28 + 2);
      if (v30 == v29)
        return result;
      v31 = (uint64_t *)a2[1];
      v32 = v30 + 8;
      while (v31 != (uint64_t *)a2[2])
      {
        v33 = *v31;
        v34 = *(_QWORD *)(v32 - 8);
        if (*v31 < v34)
          break;
        ++v31;
        v35 = v34 < v33 || v32 == v29;
        v32 += 8;
        if (v35)
          return result;
      }
    }
    else if (*a2 >= *v27)
    {
      return result;
    }
    *v27 = *a2;
    if (v27 != a2)
      result = (void **)std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&v3[40 * v5 + 8], (char *)a2[1], (char *)a2[2], (a2[2] - a2[1]) >> 3);
    *(_DWORD *)&v3[40 * v5 + 32] = *((_DWORD *)a2 + 8);
  }
  else if ((unint64_t)v36 >= *((_QWORD *)v37 + 11))
  {
    result = (void **)std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::__push_back_slow_path<operations_research::sat::SharedSolutionRepository<long long>::Solution const&>(v2, a2);
    *((_QWORD *)v37 + 10) = result;
  }
  else
  {
    v21 = *a2;
    *((_QWORD *)v36 + 1) = 0;
    *(_QWORD *)v36 = v21;
    *((_QWORD *)v36 + 2) = 0;
    *((_QWORD *)v36 + 3) = 0;
    v23 = (_BYTE *)a2[1];
    v22 = (_BYTE *)a2[2];
    v24 = v22 - v23;
    if (v22 != v23)
    {
      if (v24 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v25 = (char *)operator new(v22 - v23);
      *((_QWORD *)v36 + 1) = v25;
      *((_QWORD *)v36 + 2) = v25;
      v26 = &v25[8 * (v24 >> 3)];
      *((_QWORD *)v36 + 3) = v26;
      result = (void **)memcpy(v25, v23, v24);
      *((_QWORD *)v36 + 2) = v26;
    }
    *((_DWORD *)v36 + 8) = *((_DWORD *)a2 + 8);
    *((_QWORD *)v37 + 10) = v36 + 40;
    *((_QWORD *)v37 + 10) = v36 + 40;
  }
  return result;
}

void sub_22DC123DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void **v11;
  void *v13;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(a9 + 16) = v13;
    operator delete(v13);
  }
  *(_QWORD *)(a11 + 80) = a9;
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::__push_back_slow_path<operations_research::sat::SharedSolutionRepository<long long>::Solution const&>(void **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  char **v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  void *v22;
  _QWORD *v24;
  char *v25;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v4) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v4) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[10 * v5];
  v10[1] = 0;
  v25 = (char *)&v9[10 * v8];
  v10[2] = 0;
  v11 = (char **)(v10 + 2);
  v12 = (_BYTE *)a2[1];
  *v10 = *a2;
  v10[3] = 0;
  v24 = a2;
  v13 = (_BYTE *)a2[2];
  v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v13 - v12);
    v10[1] = v15;
    *v11 = v15;
    v16 = &v15[8 * (v14 >> 3)];
    v10[3] = v16;
    memcpy(v15, v12, v14);
    *v11 = v16;
  }
  v9[10 * v5 + 8] = *((_DWORD *)v24 + 8);
  v17 = v10 + 5;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v25;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = &v10[v18 / 8];
      v20 = &v3[v18];
      *(v19 - 5) = *(_QWORD *)&v3[v18 - 40];
      *(v19 - 3) = 0;
      *(v19 - 2) = 0;
      *((_OWORD *)v19 - 2) = *(_OWORD *)&v3[v18 - 32];
      *(v19 - 2) = *(_QWORD *)&v3[v18 - 16];
      *((_QWORD *)v20 - 4) = 0;
      *((_QWORD *)v20 - 3) = 0;
      *((_QWORD *)v20 - 2) = 0;
      *((_DWORD *)v19 - 2) = *(_DWORD *)&v3[v18 - 8];
      v18 -= 40;
    }
    while (&v3[v18] != v4);
    v21 = (char *)*a1;
    v3 = (char *)a1[1];
    v17 = v10 + 5;
    *a1 = &v10[v18 / 8];
    a1[1] = v10 + 5;
    a1[2] = v25;
    if (v3 != v21)
    {
      do
      {
        v22 = (void *)*((_QWORD *)v3 - 4);
        if (v22)
        {
          *((_QWORD *)v3 - 3) = v22;
          operator delete(v22);
        }
        v3 -= 40;
      }
      while (v3 != v21);
      v3 = v21;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_22DC12644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  _QWORD *v5;
  void *v7;
  va_list va;

  va_start(va, a4);
  v7 = *v4;
  if (*v4)
  {
    *v5 = v7;
    operator delete(v7);
  }
  std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, 8 * v17);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>::__push_back_slow_path<operations_research::sat::SharedSolutionRepository<double>::Solution const&>(void **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  char **v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  void *v22;
  _QWORD *v24;
  char *v25;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v4) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v4) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[10 * v5];
  v10[1] = 0;
  v25 = (char *)&v9[10 * v8];
  v10[2] = 0;
  v11 = (char **)(v10 + 2);
  v12 = (_BYTE *)a2[1];
  *v10 = *a2;
  v10[3] = 0;
  v24 = a2;
  v13 = (_BYTE *)a2[2];
  v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v13 - v12);
    v10[1] = v15;
    *v11 = v15;
    v16 = &v15[8 * (v14 >> 3)];
    v10[3] = v16;
    memcpy(v15, v12, v14);
    *v11 = v16;
  }
  v9[10 * v5 + 8] = *((_DWORD *)v24 + 8);
  v17 = v10 + 5;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v25;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = &v10[v18 / 8];
      v20 = &v3[v18];
      *(v19 - 5) = *(_QWORD *)&v3[v18 - 40];
      *(v19 - 3) = 0;
      *(v19 - 2) = 0;
      *((_OWORD *)v19 - 2) = *(_OWORD *)&v3[v18 - 32];
      *(v19 - 2) = *(_QWORD *)&v3[v18 - 16];
      *((_QWORD *)v20 - 4) = 0;
      *((_QWORD *)v20 - 3) = 0;
      *((_QWORD *)v20 - 2) = 0;
      *((_DWORD *)v19 - 2) = *(_DWORD *)&v3[v18 - 8];
      v18 -= 40;
    }
    while (&v3[v18] != v4);
    v21 = (char *)*a1;
    v3 = (char *)a1[1];
    v17 = v10 + 5;
    *a1 = &v10[v18 / 8];
    a1[1] = v10 + 5;
    a1[2] = v25;
    if (v3 != v21)
    {
      do
      {
        v22 = (void *)*((_QWORD *)v3 - 4);
        if (v22)
        {
          *((_QWORD *)v3 - 3) = v22;
          operator delete(v22);
        }
        v3 -= 40;
      }
      while (v3 != v21);
      v3 = v21;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_22DC129EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  _QWORD *v5;
  void *v7;
  va_list va;

  va_start(va, a4);
  v7 = *v4;
  if (*v4)
  {
    *v5 = v7;
    operator delete(v7);
  }
  std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = (char **)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *((_QWORD *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *v12 = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_22DC12BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *std::vector<std::pair<int,std::function<void ()(operations_research::sat::CpSolverResponse const&)>>>::__emplace_back_slow_path<int const&,std::function<void ()(operations_research::sat::CpSolverResponse const&)>>(void **a1, _DWORD *a2, _QWORD *a3)
{
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  _DWORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v5) >> 3) > v7)
    v7 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v5) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v5) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = operator new(40 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[5 * v6];
  *v12 = *a2;
  v13 = (_QWORD *)a3[3];
  if (!v13)
  {
    v11[5 * v6 + 4] = 0;
    if (v4 == v5)
      goto LABEL_26;
    goto LABEL_16;
  }
  v14 = &v11[5 * v6 + 4];
  if (v13 == a3)
  {
    *v14 = v12 + 2;
    (*(void (**)(_QWORD *))(*a3 + 24))(a3);
    v5 = *a1;
    v4 = a1[1];
    if (v4 == *a1)
      goto LABEL_26;
    goto LABEL_16;
  }
  *v14 = v13;
  a3[3] = 0;
  if (v4 != v5)
  {
LABEL_16:
    v15 = 0;
    v16 = v4;
    while (1)
    {
      v18 = &v12[v15];
      v19 = &v4[v15 * 4];
      v12[v15 - 10] = *(_DWORD *)&v4[v15 * 4 - 40];
      v20 = *(_BYTE **)&v4[v15 * 4 - 8];
      if (v20)
      {
        if (v19 - 32 == v20)
        {
          *((_QWORD *)v18 - 1) = v18 - 8;
          (*(void (**)(_QWORD))(**((_QWORD **)v19 - 1) + 24))(*((_QWORD *)v19 - 1));
          goto LABEL_19;
        }
        v17 = v16 - 8;
        *((_QWORD *)v18 - 1) = v20;
      }
      else
      {
        v17 = v18 - 2;
      }
      *v17 = 0;
LABEL_19:
      v16 -= 40;
      v15 -= 10;
      if (&v4[v15 * 4] == v5)
      {
        v21 = (char *)&v12[v15];
        goto LABEL_27;
      }
    }
  }
LABEL_26:
  v21 = (char *)&v11[5 * v6];
LABEL_27:
  v22 = (char *)*a1;
  v23 = (char *)a1[1];
  *a1 = v21;
  a1[1] = v12 + 10;
  a1[2] = &v11[5 * v10];
  while (v23 != v22)
  {
    v24 = (char *)*((_QWORD *)v23 - 1);
    if (v23 - 32 == v24)
    {
      v24 = v23 - 32;
      v25 = 4;
LABEL_29:
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
      goto LABEL_30;
    }
    if (v24)
    {
      v25 = 5;
      goto LABEL_29;
    }
LABEL_30:
    v23 -= 40;
  }
  if (v22)
    operator delete(v22);
  return v12 + 10;
}

_QWORD *operations_research::sat::Model::Delete<operations_research::sat::DebugSolution>::~Delete(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = &off_24F987A68;
  a1[1] = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E31DF78](v2, 0x20C40960023A9);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DebugSolution>::~Delete(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &off_24F987A68;
  a1[1] = 0;
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x22E31DF78](v1, 0x20C40960023A9);
  }
  JUMPOUT(0x22E31DF78);
}

void std::deque<operations_research::SparseBitset<long long>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v4 = a1[1];
  v5 = a1[2];
  if (v5 == v4)
    v6 = 0;
  else
    v6 = 51 * ((v5 - v4) >> 3) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  v9 = v6 - v8;
  v10 = a2 > v9;
  v11 = a2 - v9;
  if (v10)
  {
    std::deque<operations_research::SparseBitset<long long>>::__add_back_capacity((uint64_t)a1, v11);
    v7 = a1[5];
    v4 = a1[1];
    v5 = a1[2];
    v8 = a1[4] + v7;
  }
  v12 = (_QWORD *)(v4 + 8 * (v8 / 0x33));
  if (v5 == v4)
  {
    v13 = 0;
    if (!a2)
      return;
  }
  else
  {
    v13 = *v12 + 80 * (v8 % 0x33);
    if (!a2)
      return;
  }
  v14 = a2 - 0x3333333333333333 * ((uint64_t)(v13 - *v12) >> 4);
  if (v14 < 1)
  {
    v17 = 50 - v14;
    v15 = &v12[-(v17 / 0x33)];
    v16 = *v15 + 80 * (51 * (v17 / 0x33) - v17) + 4000;
    if (v13 != v16)
    {
      do
      {
LABEL_15:
        v18 = v16;
        if (v12 != v15)
          v18 = *v12 + 4080;
        if (v13 == v18)
        {
          a1[5] = v7;
          if (v12 == v15)
            return;
        }
        else
        {
          v19 = v13;
          do
          {
            *(_OWORD *)v19 = 0uLL;
            *(_OWORD *)(v19 + 16) = 0uLL;
            *(_QWORD *)(v19 + 32) = v19;
            *(_QWORD *)(v19 + 40) = 0;
            *(_QWORD *)(v19 + 48) = 0;
            *(_QWORD *)(v19 + 56) = 0;
            *(_DWORD *)(v19 + 40) = -1;
            *(_QWORD *)(v19 + 64) = 0;
            *(_QWORD *)(v19 + 72) = 0;
            v19 += 80;
          }
          while (v19 != v18);
          v7 = a1[5] - 0x3333333333333333 * ((uint64_t)(v18 - v13) >> 4);
          a1[5] = v7;
          if (v12 == v15)
            return;
        }
        v20 = v12[1];
        ++v12;
        v13 = v20;
      }
      while (v20 != v16);
    }
  }
  else
  {
    v15 = &v12[v14 / 0x33uLL];
    v16 = *v15 + 80 * (v14 % 0x33uLL);
    if (v13 != v16)
      goto LABEL_15;
  }
}

void std::deque<operations_research::SparseBitset<long long>>::__erase_to_end(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a3;
  v6 = a1[4];
  v5 = a1[5];
  v8 = a1[1];
  v7 = a1[2];
  v9 = (_QWORD *)(v8 + 8 * ((v6 + v5) / 0x33));
  if (v7 == v8)
  {
    v10 = 0;
    if (!a3)
      return;
  }
  else
  {
    v10 = *v9 + 80 * ((v6 + v5) % 0x33);
    if ((_QWORD *)v10 == a3)
      return;
  }
  v11 = 51 * (v9 - a2) - 0x3333333333333333 * ((uint64_t)(v10 - *v9) >> 4);
  v12 = ((uint64_t)a3 - *a2) >> 4;
  v13 = v11 + 0x3333333333333333 * v12;
  if (v13 < 1)
    return;
  v14 = (_QWORD *)(v8 + 8 * (v6 / 0x33));
  if (v7 == v8)
  {
    v15 = 0;
    if (!a3)
      goto LABEL_15;
  }
  else
  {
    v15 = *v14 + 80 * (v6 % 0x33);
    if (a3 == (_QWORD *)v15)
    {
LABEL_15:
      if (v3 == (_QWORD *)v10)
        goto LABEL_27;
      do
      {
LABEL_20:
        v21 = (void *)v3[7];
        if (v21)
        {
          v3[8] = v21;
          operator delete(v21);
        }
        v22 = (void *)v3[1];
        if (v22)
        {
          v3[2] = v22;
          operator delete(v22);
        }
        v3 += 10;
        if ((_QWORD *)((char *)v3 - *v14) == (_QWORD *)4080)
        {
          v23 = (_QWORD *)v14[1];
          ++v14;
          v3 = v23;
        }
      }
      while (v3 != (_QWORD *)v10);
      v8 = a1[1];
      v7 = a1[2];
      v6 = a1[4];
      v5 = a1[5];
      goto LABEL_27;
    }
  }
  v16 = 51 * (a2 - v14) - 0x3333333333333333 * v12;
  v17 = (uint64_t)(v15 - *v14) >> 4;
  v18 = v16 + 0x3333333333333333 * v17;
  if (!v18)
  {
    v3 = (_QWORD *)v15;
    goto LABEL_15;
  }
  v19 = v18 - 0x3333333333333333 * v17;
  if (v19 >= 1)
  {
    v14 += v19 / 0x33uLL;
    v3 = (_QWORD *)(*v14 + 80 * (v19 % 0x33uLL));
    if (v3 == (_QWORD *)v10)
      goto LABEL_27;
    goto LABEL_20;
  }
  v20 = 50 - v19;
  v14 -= v20 / 0x33;
  v3 = (_QWORD *)(*v14 + 80 * (51 * (v20 / 0x33) - v20) + 4000);
  if (v3 != (_QWORD *)v10)
    goto LABEL_20;
LABEL_27:
  if (v7 == v8)
    v24 = 0;
  else
    v24 = 51 * ((v7 - v8) >> 3) - 1;
  v25 = v5 - v13;
  a1[5] = v25;
  if (v24 - (v25 + v6) >= 0x66)
  {
    do
    {
      operator delete(*(void **)(v7 - 8));
      v7 = a1[2] - 8;
      v26 = v7 == a1[1];
      v27 = 51 * ((v7 - a1[1]) >> 3) - 1;
      a1[2] = v7;
      if (v26)
        v27 = 0;
    }
    while ((unint64_t)(v27 - (a1[5] + a1[4])) > 0x65);
  }
}

void std::deque<operations_research::SparseBitset<long long>>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x33)
    v6 = v5 / 0x33 + 1;
  else
    v6 = v5 / 0x33;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 / 0x33)
    v8 = v7 / 0x33;
  else
    v8 = v6;
  if (v6 <= v7 / 0x33)
  {
    *(_QWORD *)(a1 + 32) = v7 - 51 * v8;
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0xFF0uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v145);
        --v6;
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0xFF0uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 50;
        else
          v116 = 51;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 = v6;
      *(_QWORD *)(a1 + 32) = v117 - 51 * v6;
      if (!v6)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= 51 * v8;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = -51 * v8;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0xFF0uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) += v144;
  if (v71)
    operator delete(v71);
}

void sub_22DC13CE4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_22DC13D30()
{
  __cxa_end_catch();
  JUMPOUT(0x22DC13D38);
}

void operations_research::sat::AddTableConstraint(uint64_t a1, std::string::size_type a2, char *a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  operations_research::Domain *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::string::size_type v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  operations_research::sat::IntegerTrail *v45;
  uint64_t v46;
  char **v47;
  uint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  int v51;
  void *v52;
  int64_t v53;
  char *v54;
  int v55;
  uint64_t *v56;
  __int128 *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  void *v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  unint64_t v70;
  char v71;
  int v72;
  uint64_t v73;
  char **v74;
  uint64_t *v75;
  char *v76;
  unint64_t v77;
  char *v78;
  size_t v79;
  char *v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  _QWORD *v93;
  unint64_t v94;
  _UNKNOWN **v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  std::string::size_type v125;
  char *v126;
  char *v127;
  int64_t v128;
  _UNKNOWN **v129;
  _QWORD *v130;
  std::string::size_type v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  int64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _OWORD *v151;
  char *v152;
  uint64_t v153;
  __int128 v154;
  _UNKNOWN **v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  void *v169;
  int64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  int v175;
  uint64_t *v176;
  char *v177;
  void *v178;
  char *v179;
  void *v180;
  void *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  void *v190;
  void *v191;
  uint64_t **v192;
  uint64_t **v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  int v210;
  int v211;
  char *v212;
  char **v213;
  char **v214;
  int v215;
  _DWORD *v216;
  uint64_t *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  _BYTE *v227;
  _DWORD *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  _OWORD *v233;
  char *v234;
  uint64_t v235;
  __int128 v236;
  int v237;
  std::string::size_type size;
  std::string::size_type *p_size;
  uint64_t **v240;
  int v241;
  _DWORD *v242;
  uint64_t *v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  _BYTE *v252;
  _DWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  _OWORD *v258;
  char *v259;
  uint64_t v260;
  __int128 v261;
  int v262;
  void *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char **v270;
  uint64_t *v271;
  _QWORD *v272;
  unint64_t v273;
  int v274;
  const void *v275;
  int64_t v276;
  char *v277;
  signed int v278;
  uint64_t *v279;
  uint64_t (***v280)();
  uint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  void *v286;
  __int128 v287;
  uint64_t v288;
  _QWORD *v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  _BYTE *v299;
  _QWORD *v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _OWORD *v307;
  char *v308;
  uint64_t v309;
  __int128 v310;
  _BYTE *v311;
  char *v312;
  uint64_t v313;
  uint64_t **v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t v321;
  int v322;
  int v323;
  unint64_t v324;
  int v325;
  int v326;
  unint64_t v327;
  _BYTE *v329;
  char *v330;
  _BYTE *v331;
  char *v332;
  unsigned int v333;
  _BYTE *v334;
  _BYTE *v335;
  char *v336;
  _BYTE *v337;
  char *v338;
  _BYTE *v339;
  char **v340;
  uint64_t v341;
  _BYTE *v342;
  google::LogMessage *v343;
  _QWORD *v344;
  std::string *v345;
  std::string::size_type v346;
  uint64_t **v347;
  uint64_t **v348;
  uint64_t v349;
  unint64_t v350;
  int *v351;
  operations_research::sat::SatSolver *v352;
  int v353;
  _DWORD *v354;
  int *v355;
  unsigned int v356;
  int *v357;
  unint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  operations_research::sat::SatSolver *v361;
  int v362;
  char *v363;
  char *v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  _BYTE *v369;
  _DWORD *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  _OWORD *v376;
  char *v377;
  uint64_t v378;
  __int128 v379;
  int v380;
  _BYTE *v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  _BYTE *v386;
  std::string::size_type v387;
  _QWORD *v388;
  _QWORD *v389;
  _QWORD *v390;
  _QWORD *v391;
  _QWORD *v392;
  void **v393;
  void **v394;
  void *v395;
  _QWORD *v396;
  uint64_t *v397;
  uint64_t **v398;
  BOOL v399;
  std::string *v400;
  std::string *v401;
  uint64_t (***v402)();
  uint64_t v403;
  _DWORD *v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _DWORD *v408;
  _OWORD *v409;
  __int128 *v410;
  uint64_t v411;
  __int128 v412;
  int v413;
  _QWORD *v414;
  uint64_t v415;
  int *v416;
  int v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  _BYTE *v422;
  int *v423;
  char *v424;
  _DWORD *v425;
  unint64_t v426;
  int *v427;
  uint64_t v428;
  uint64_t v429;
  _OWORD *v430;
  int *v431;
  uint64_t v432;
  __int128 v433;
  int v434;
  char *v435;
  char *v436;
  char *v437;
  uint64_t *v438;
  char *v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  char *v443;
  uint64_t *v444;
  _QWORD *v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t *v450;
  absl::lts_2020_02_25::hash_internal::CityHashState *v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  char *v455;
  char *v456;
  uint64_t *v457;
  char *v458;
  unint64_t v459;
  _BYTE *v460;
  unint64_t v461;
  uint64_t *v462;
  int v463;
  uint64_t v464;
  absl::lts_2020_02_25::hash_internal::CityHashState *v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  uint64_t v470;
  char *v471;
  char *v472;
  uint64_t *v473;
  char *v474;
  unint64_t v475;
  _BYTE *v476;
  uint64_t v477;
  unint64_t v478;
  char *v479;
  int v480;
  char *v481;
  uint64_t *v482;
  char *v483;
  char *v484;
  absl::lts_2020_02_25::hash_internal::CityHashState *v485;
  uint64_t v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  char *v490;
  char *v491;
  uint64_t *v492;
  char *v493;
  unint64_t v494;
  _BYTE *v495;
  unint64_t v496;
  char *v497;
  uint64_t v498;
  char *v499;
  char *v500;
  uint64_t *v501;
  uint64_t *v502;
  char *v503;
  char *v504;
  uint64_t v505;
  uint64_t v506;
  _OWORD *v507;
  uint64_t *v508;
  uint64_t v509;
  __int128 v510;
  uint64_t v511;
  uint64_t v512;
  _OWORD *v513;
  char *v514;
  uint64_t v515;
  __int128 v516;
  uint64_t v517;
  uint64_t v518;
  _OWORD *v519;
  __int128 *v520;
  uint64_t v521;
  __int128 v522;
  char *v523;
  uint64_t **v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  unint64_t v530;
  unint64_t v531;
  uint64_t v532;
  unint64_t v533;
  int v534;
  std::string::size_type v535;
  std::string::size_type v536;
  void *v537;
  std::string::size_type v538;
  uint64_t v539;
  unint64_t v540;
  int64_t v541;
  unint64_t v542;
  char *v543;
  char *v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  std::string::size_type v548;
  char *v549;
  __int128 *v550;
  uint64_t v551;
  __int128 v552;
  int v553;
  uint64_t (***v554)();
  uint64_t v555;
  uint64_t v556;
  std::string::size_type v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t *v560;
  unint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unint64_t v568;
  int v569;
  void *v570;
  std::string::size_type v571;
  uint64_t v572;
  unint64_t v573;
  int64_t v574;
  unint64_t v575;
  char *v576;
  int *v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  std::string::size_type v581;
  char *v582;
  __int128 *v583;
  uint64_t v584;
  __int128 v585;
  int v586;
  void *v587;
  uint64_t *v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  void **v592;
  void **v593;
  void *v594;
  _QWORD *v595;
  char *v596;
  _QWORD *v597;
  char *v598;
  void *v599;
  void *v600;
  void **v601;
  void **v602;
  void *v603;
  _QWORD *v604;
  unint64_t *v605;
  absl::lts_2020_02_25::numbers_internal *v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  unsigned int v610;
  absl::lts_2020_02_25::numbers_internal *v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  operations_research::sat::IntegerTrail *v621;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  char *v627;
  _QWORD *v628;
  int v629;
  uint64_t v630;
  absl::lts_2020_02_25::hash_internal::CityHashState *v631;
  absl::lts_2020_02_25::hash_internal::CityHashState *v632;
  absl::lts_2020_02_25::hash_internal::CityHashState *v633;
  uint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  char *v638;
  uint64_t v639;
  std::string::size_type v640;
  uint64_t **v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t *v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  char *v649;
  uint64_t v650;
  void *v651[3];
  void *v652;
  void *v653;
  char *v654;
  unint64_t v655[3];
  void *v656;
  void **v657;
  _BYTE v658[16];
  void *v659;
  void *v660;
  uint64_t v661;
  int v662;
  uint64_t v663;
  std::string v664;
  void *v665;
  uint64_t v666;
  char *v667;
  void *v668;
  void **v669;
  char *v670;
  void *v671;
  void *__p;
  uint64_t (**v673)();
  int *v674[2];
  uint64_t (***v675)();
  uint64_t (**v676)();
  int *v677[2];
  uint64_t (***v678)();
  _QWORD v679[3];
  _QWORD *v680;
  _QWORD v681[3];
  _QWORD *v682;
  void *v683;
  char *v684;
  _QWORD v685[4];
  void *__s2;
  uint64_t v687;
  unint64_t v688;
  __int128 v689;
  char *v690;
  __int128 *v691;
  uint64_t (**v692)();
  signed int v693;
  uint64_t (***v694)();
  _BYTE v695[40];
  uint64_t v696;
  uint64_t v697;

  v697 = *MEMORY[0x24BDAC8D0];
  v621 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  v7 = *(_QWORD **)a3;
  v6 = *((_QWORD *)a3 + 1);
  v609 = (int)a2;
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v656, (int)a2);
  v8 = (v6 - (uint64_t)v7) >> 3;
  v627 = a3;
  v640 = a2;
  v607 = 0xAAAAAAAAAAAAAAABLL * v8;
  if (-1431655765 * (int)v8 < 1)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v642 = (-1431655765 * v8);
    do
    {
      if ((int)a2 < 1)
      {
LABEL_17:
        v24 = *(_QWORD *)a3 + 24 * v9;
        v647 = v10;
        v25 = *(_QWORD *)a3 + 24 * v10;
        v26 = *(_OWORD *)v24;
        *(_OWORD *)v24 = *(_OWORD *)v25;
        *(_OWORD *)v25 = v26;
        v27 = *(_QWORD *)(v24 + 16);
        *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
        *(_QWORD *)(v25 + 16) = v27;
        if ((int)a2 >= 1)
        {
          v28 = 0;
          do
          {
            v32 = 0;
            v34 = (char *)v656 + 48 * v28;
            v35 = *(_QWORD *)(*(_QWORD *)v627 + 24 * v647);
            v36 = *(_QWORD *)(v35 + 8 * v28);
            v37 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v36)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v36));
            v33 = (v37 >> 7) ^ (*v34 >> 12);
            v38 = v34[3];
            while (1)
            {
              v29 = v33 & v38;
              v30 = *(_QWORD *)(*v34 + v29);
              v31 = ((v30 ^ (0x101010101010101 * (v37 & 0x7F))) - 0x101010101010101) & ~(v30 ^ (0x101010101010101
                                                                                                  * (v37 & 0x7F))) & 0x8080808080808080;
              if (v31)
                break;
LABEL_22:
              if ((v30 & (~v30 << 6) & 0x8080808080808080) != 0)
              {
                *(_QWORD *)(v34[1]
                          + 8
                          * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v656 + 6 * v28, v37)) = *(_QWORD *)(v35 + 8 * v28);
                goto LABEL_25;
              }
              v32 += 8;
              v33 = v32 + v29;
            }
            while (*(_QWORD *)(v34[1] + 8 * ((v29 + (__clz(__rbit64(v31)) >> 3)) & v38)) != v36)
            {
              v31 &= v31 - 1;
              if (!v31)
                goto LABEL_22;
            }
LABEL_25:
            ++v28;
          }
          while (v28 != a2);
        }
        v10 = v647 + 1;
        a3 = v627;
      }
      else
      {
        v11 = 0;
        while (1)
        {
          v12 = 0;
          v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 24 * v9) + 8 * v11);
          v14 = (char *)v656 + 48 * v11;
          v15 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v13)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v13));
          v16 = (v15 >> 7) ^ (*v14 >> 12);
          v17 = v14[3];
          v18 = 0x101010101010101 * (v15 & 0x7F);
          while (1)
          {
            v19 = v16 & v17;
            v20 = *(_QWORD *)(*v14 + v19);
            v21 = ((v20 ^ v18) - 0x101010101010101) & ~(v20 ^ v18) & 0x8080808080808080;
            if (v21)
              break;
LABEL_12:
            if ((v20 & (~v20 << 6) & 0x8080808080808080) != 0)
              goto LABEL_15;
            v12 += 8;
            v16 = v12 + v19;
          }
          while (1)
          {
            v22 = (v19 + (__clz(__rbit64(v21)) >> 3)) & v17;
            if (*(_QWORD *)(v14[1] + 8 * v22) == v13)
              break;
            v21 &= v21 - 1;
            if (!v21)
              goto LABEL_12;
          }
          if (v22 == v17)
            break;
LABEL_7:
          if (++v11 == a2)
            goto LABEL_17;
        }
LABEL_15:
        v23 = (operations_research::Domain *)operations_research::sat::IntegerTrail::InitialVariableDomain((uint64_t)v621, *(_DWORD *)(a1 + 4 * v11));
        if (operations_research::Domain::Contains(v23, v13))
          goto LABEL_7;
      }
      ++v9;
    }
    while (v9 != v642);
  }
  v39 = *((_QWORD *)a3 + 1);
  v40 = 0xAAAAAAAAAAAAAAABLL * ((v39 - *(_QWORD *)a3) >> 3);
  if (v10 <= v40)
  {
    v41 = a2;
    if (v10 >= v40)
    {
      v42 = *((_QWORD *)a3 + 1);
      v43 = *(_QWORD **)a3;
      v44 = v39 - *(_QWORD *)a3;
      if (v44)
        goto LABEL_30;
    }
    else
    {
      v42 = *(_QWORD *)a3 + 24 * v10;
      if (v39 != v42)
      {
        v67 = *((_QWORD *)a3 + 1);
        do
        {
          v69 = *(void **)(v67 - 24);
          v67 -= 24;
          v68 = v69;
          if (v69)
          {
            *(_QWORD *)(v39 - 16) = v68;
            operator delete(v68);
          }
          v39 = v67;
        }
        while (v67 != v42);
      }
      *((_QWORD *)a3 + 1) = v42;
      v43 = *(_QWORD **)a3;
      v44 = v42 - *(_QWORD *)a3;
      if (v42 != *(_QWORD *)a3)
        goto LABEL_30;
    }
LABEL_365:
    *((_BYTE *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a4) + 496) = 1;
    goto LABEL_776;
  }
  std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)a3, v10 - v40);
  v41 = a2;
  v43 = *(_QWORD **)a3;
  v42 = *((_QWORD *)a3 + 1);
  v44 = v42 - *(_QWORD *)a3;
  if (v42 == *(_QWORD *)a3)
    goto LABEL_365;
LABEL_30:
  if ((_DWORD)v41 == 2)
  {
    v45 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
    std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::vector(&__s2, (int)a2);
    v46 = 0;
    while (1)
    {
      v47 = (char **)((char *)v656 + 48 * v46);
      v48 = (uint64_t *)v47[1];
      v49 = *v47;
      if (**v47 <= -2)
      {
        do
        {
          v50 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v49 = (_QWORD *)((char *)v49 + v50);
          v48 += v50;
        }
        while (*(char *)v49 < -1);
      }
      std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::const_iterator,0>(&v683, v49, v48, &v47[3][(_QWORD)*v47]);
      v51 = *(_DWORD *)(a1 + 4 * v46);
      v668 = 0;
      v669 = 0;
      v670 = 0;
      v52 = v683;
      v53 = v684 - (_BYTE *)v683;
      if (v684 != v683)
      {
        if (v53 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v668 = operator new(v684 - (_BYTE *)v683);
        v669 = (void **)v668;
        v54 = (char *)v668 + 8 * (v53 >> 3);
        v670 = v54;
        memcpy(v668, v52, v53);
        v669 = (void **)v54;
      }
      operations_research::Domain::FromValues((int64_t **)&v668, (unint64_t *)&v671);
      operations_research::sat::IntegerTrail::UpdateInitialDomain((uint64_t)v45, v51, (operations_research::Domain *)&v671);
      if ((v671 & 1) != 0)
        operator delete(__p);
      if (v668)
      {
        v669 = (void **)v668;
        operator delete(v668);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v657 - (_BYTE *)v656) >> 4) < 2)
        goto LABEL_60;
      v55 = *(_DWORD *)(a1 + 4 * v46);
      *(_QWORD *)&v689 = &off_24F980458;
      DWORD2(v689) = v55;
      v691 = &v689;
      v56 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a4);
      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v56, SDWORD2(v689)))
        operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v56, SDWORD2(v689));
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v56, SDWORD2(v689), (char **)&v665);
      if (v665)
      {
        v666 = (uint64_t)v665;
        operator delete(v665);
      }
      v57 = v691;
      if (v691 == &v689)
        break;
      if (v691)
      {
        v58 = 5;
LABEL_51:
        (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
      }
      v59 = (char *)__s2 + 48 * v46;
      v60 = *(_QWORD *)&v695[32];
      v61 = v696;
      *(_QWORD *)&v695[32] = 0;
      v696 = 0;
      v62 = *(_OWORD *)v695;
      *(_QWORD *)v695 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)&v695[8] = 0;
      v63 = *(void **)v59;
      *(_OWORD *)v59 = v62;
      v64 = *(_OWORD *)&v695[16];
      *(_QWORD *)&v695[16] = 0;
      *(_QWORD *)&v695[24] = 0;
      v65 = *((_QWORD *)v59 + 3);
      v66 = (_QWORD *)*((_QWORD *)v59 + 4);
      *((_OWORD *)v59 + 1) = v64;
      *((_QWORD *)v59 + 4) = v60;
      *((_QWORD *)v59 + 5) = v61;
      if (v65)
        operator delete(v63);
      if (v66)
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v66);
      if (*(_QWORD *)&v695[24])
      {
        operator delete(*(void **)v695);
        *(_QWORD *)v695 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        v696 = 0;
        memset(&v695[8], 0, 24);
      }
      if (*(_QWORD *)&v695[32])
        absl::lts_2020_02_25::container_internal::UnsampleSlow(*(_QWORD **)&v695[32]);
LABEL_60:
      if (v683)
      {
        v684 = (char *)v683;
        operator delete(v683);
      }
      if (++v46 == a2)
      {
        if (*((_QWORD *)v656 + 2) != 1 && *((_QWORD *)v656 + 8) != 1)
        {
          v685[0] = 0;
          v684 = 0;
          v683 = &v684;
          *(_OWORD *)&v664.__r_.__value_.__r.__words[1] = 0uLL;
          v664.__r_.__value_.__r.__words[0] = (std::string::size_type)&v664.__r_.__value_.__l.__size_;
          v193 = *(uint64_t ***)v627;
          v192 = (uint64_t **)*((_QWORD *)v627 + 1);
          if (*(uint64_t ***)v627 != v192)
          {
            v641 = (uint64_t **)*((_QWORD *)v627 + 1);
            while (2)
            {
              v198 = 0;
              v264 = **v193;
              v263 = (void *)(*v193)[1];
              *(_QWORD *)v695 = v264;
              v659 = v263;
              v265 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v264)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v264));
              v199 = (*(_QWORD *)__s2 >> 12) ^ (v265 >> 7);
              v266 = *((_QWORD *)__s2 + 3);
              v267 = 0x101010101010101 * (v265 & 0x7F);
              while (1)
              {
                v194 = v199 & v266;
                v195 = *(_QWORD *)(*(_QWORD *)__s2 + v194);
                v196 = ((v195 ^ v267) - 0x101010101010101) & ~(v195 ^ v267) & 0x8080808080808080;
                if (v196)
                  break;
LABEL_253:
                if ((v195 & (~v195 << 6) & 0x8080808080808080) != 0)
                  goto LABEL_325;
                v198 += 8;
                v199 = v198 + v194;
              }
              while (1)
              {
                v197 = (v194 + (__clz(__rbit64(v196)) >> 3)) & v266;
                if (*(_QWORD *)(*((_QWORD *)__s2 + 1) + 12 * v197) == v264)
                  break;
                v196 &= v196 - 1;
                if (!v196)
                  goto LABEL_253;
              }
              if (v197 == v266)
                goto LABEL_325;
              v200 = 0;
              v201 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                      + (unint64_t)v263)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + (_QWORD)v263));
              v202 = *((_QWORD *)__s2 + 6);
              v203 = (v202 >> 12) ^ (v201 >> 7);
              v204 = *((_QWORD *)__s2 + 9);
              v205 = 0x101010101010101 * (v201 & 0x7F);
              while (1)
              {
                v206 = v203 & v204;
                v207 = *(_QWORD *)(v202 + v206);
                v208 = ((v207 ^ v205) - 0x101010101010101) & ~(v207 ^ v205) & 0x8080808080808080;
                if (v208)
                  break;
LABEL_260:
                if ((v207 & (~v207 << 6) & 0x8080808080808080) != 0)
                  goto LABEL_325;
                v200 += 8;
                v203 = v200 + v206;
              }
              while (1)
              {
                v209 = (v206 + (__clz(__rbit64(v208)) >> 3)) & v204;
                if (*(void **)(*((_QWORD *)__s2 + 7) + 12 * v209) == v263)
                  break;
                v208 &= v208 - 1;
                if (!v208)
                  goto LABEL_260;
              }
              if (v209 == v204)
                goto LABEL_325;
              v210 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>((uint64_t *)__s2, (uint64_t *)v695);
              v211 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>((uint64_t *)__s2 + 6, (uint64_t *)&v659);
              v212 = v684;
              v213 = &v684;
              v214 = &v684;
              if (!v684)
              {
LABEL_270:
                v216 = operator new(0x40uLL);
                v216[8] = v210;
                *((_QWORD *)v216 + 6) = 0;
                *((_QWORD *)v216 + 7) = 0;
                *((_QWORD *)v216 + 5) = 0;
                *(_QWORD *)v216 = 0;
                *((_QWORD *)v216 + 1) = 0;
                *((_QWORD *)v216 + 2) = v214;
                *v213 = (char *)v216;
                v217 = (uint64_t *)v216;
                if (*(_QWORD *)v683)
                {
                  v683 = *(void **)v683;
                  v217 = (uint64_t *)*v213;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v684, v217);
                ++v685[0];
                v219 = (char *)*((_QWORD *)v216 + 6);
                v218 = (char *)*((_QWORD *)v216 + 7);
                if (v219 < v218)
                  goto LABEL_273;
LABEL_275:
                v221 = (char *)*((_QWORD *)v216 + 5);
                v222 = (v219 - v221) >> 2;
                v223 = v222 + 1;
                if ((unint64_t)(v222 + 1) >> 62)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v224 = v218 - v221;
                if (v224 >> 1 > v223)
                  v223 = v224 >> 1;
                if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL)
                  v225 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v225 = v223;
                if (v225)
                {
                  if (v225 >> 62)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v226 = v225;
                  v227 = operator new(4 * v225);
                  v225 = v226;
                  v228 = &v227[4 * v222];
                  *v228 = v211;
                  v220 = (uint64_t)(v228 + 1);
                  if (v219 == v221)
                  {
LABEL_292:
                    *((_QWORD *)v216 + 5) = v228;
                    *((_QWORD *)v216 + 6) = v220;
                    *((_QWORD *)v216 + 7) = &v227[4 * v225];
                    if (v221)
                      operator delete(v221);
                    goto LABEL_294;
                  }
                }
                else
                {
                  v227 = 0;
                  v228 = (_DWORD *)(4 * v222);
                  *(_DWORD *)(4 * v222) = v211;
                  v220 = 4 * v222 + 4;
                  if (v219 == v221)
                    goto LABEL_292;
                }
                v229 = v219 - 4 - v221;
                if (v229 < 0x2C)
                  goto LABEL_817;
                if ((unint64_t)(v221 - v227) < 0x20)
                  goto LABEL_817;
                v230 = (v229 >> 2) + 1;
                v231 = 4 * (v230 & 0x7FFFFFFFFFFFFFF8);
                v232 = &v219[-v231];
                v228 = (_DWORD *)((char *)v228 - v231);
                v233 = &v227[4 * v222 - 16];
                v234 = v219 - 16;
                v235 = v230 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v236 = *(_OWORD *)v234;
                  *(v233 - 1) = *((_OWORD *)v234 - 1);
                  *v233 = v236;
                  v233 -= 2;
                  v234 -= 32;
                  v235 -= 8;
                }
                while (v235);
                v219 = v232;
                if (v230 != (v230 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_817:
                  do
                  {
                    v237 = *((_DWORD *)v219 - 1);
                    v219 -= 4;
                    *--v228 = v237;
                  }
                  while (v219 != v221);
                }
                goto LABEL_292;
              }
              while (1)
              {
                while (1)
                {
                  v214 = (char **)v212;
                  v215 = *((_DWORD *)v212 + 8);
                  if (v210 >= v215)
                    break;
                  v212 = *v214;
                  v213 = v214;
                  if (!*v214)
                    goto LABEL_270;
                }
                if (v215 >= v210)
                  break;
                v212 = v214[1];
                if (!v212)
                {
                  v213 = v214 + 1;
                  goto LABEL_270;
                }
              }
              v216 = v214;
              v219 = v214[6];
              v218 = v214[7];
              if (v219 >= v218)
                goto LABEL_275;
LABEL_273:
              *(_DWORD *)v219 = v211;
              v220 = (uint64_t)(v219 + 4);
LABEL_294:
              *((_QWORD *)v216 + 6) = v220;
              size = v664.__r_.__value_.__l.__size_;
              p_size = &v664.__r_.__value_.__l.__size_;
LABEL_296:
              v240 = (uint64_t **)p_size;
              if (size)
              {
                while (1)
                {
                  p_size = (std::string::size_type *)size;
                  v241 = *(_DWORD *)(size + 32);
                  if (v211 < v241)
                  {
                    size = *p_size;
                    goto LABEL_296;
                  }
                  if (v241 >= v211)
                    break;
                  size = p_size[1];
                  if (!size)
                  {
                    v240 = (uint64_t **)(p_size + 1);
                    goto LABEL_301;
                  }
                }
                v242 = p_size;
              }
              else
              {
LABEL_301:
                v242 = operator new(0x40uLL);
                v242[8] = v211;
                *((_QWORD *)v242 + 6) = 0;
                *((_QWORD *)v242 + 7) = 0;
                *((_QWORD *)v242 + 5) = 0;
                *(_QWORD *)v242 = 0;
                *((_QWORD *)v242 + 1) = 0;
                *((_QWORD *)v242 + 2) = p_size;
                *v240 = (uint64_t *)v242;
                v243 = (uint64_t *)v242;
                if (*(_QWORD *)v664.__r_.__value_.__l.__data_)
                {
                  v664.__r_.__value_.__r.__words[0] = *(_QWORD *)v664.__r_.__value_.__l.__data_;
                  v243 = *v240;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v664.__r_.__value_.__l.__size_, v243);
                ++v664.__r_.__value_.__r.__words[2];
              }
              v245 = (char *)*((_QWORD *)v242 + 6);
              v244 = *((_QWORD *)v242 + 7);
              if ((unint64_t)v245 < v244)
              {
                *(_DWORD *)v245 = v210;
                v246 = (uint64_t)(v245 + 4);
                goto LABEL_324;
              }
              v247 = (char *)*((_QWORD *)v242 + 5);
              v248 = (v245 - v247) >> 2;
              v249 = v248 + 1;
              if ((unint64_t)(v248 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v250 = v244 - (_QWORD)v247;
              if (v250 >> 1 > v249)
                v249 = v250 >> 1;
              if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL)
                v251 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v251 = v249;
              if (v251)
              {
                if (v251 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v252 = operator new(4 * v251);
                v253 = &v252[4 * v248];
                *v253 = v210;
                v246 = (uint64_t)(v253 + 1);
                if (v245 != v247)
                {
LABEL_316:
                  v254 = v245 - 4 - v247;
                  if (v254 < 0x2C)
                    goto LABEL_818;
                  if ((unint64_t)(v247 - v252) < 0x20)
                    goto LABEL_818;
                  v255 = (v254 >> 2) + 1;
                  v256 = 4 * (v255 & 0x7FFFFFFFFFFFFFF8);
                  v257 = &v245[-v256];
                  v253 = (_DWORD *)((char *)v253 - v256);
                  v258 = &v252[4 * v248 - 16];
                  v259 = v245 - 16;
                  v260 = v255 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v261 = *(_OWORD *)v259;
                    *(v258 - 1) = *((_OWORD *)v259 - 1);
                    *v258 = v261;
                    v258 -= 2;
                    v259 -= 32;
                    v260 -= 8;
                  }
                  while (v260);
                  v245 = v257;
                  if (v255 != (v255 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_818:
                    do
                    {
                      v262 = *((_DWORD *)v245 - 1);
                      v245 -= 4;
                      *--v253 = v262;
                    }
                    while (v245 != v247);
                  }
                  *((_QWORD *)v242 + 5) = v253;
                  *((_QWORD *)v242 + 6) = v246;
                  *((_QWORD *)v242 + 7) = &v252[4 * v251];
                  if (v247)
LABEL_323:
                    operator delete(v247);
LABEL_324:
                  *((_QWORD *)v242 + 6) = v246;
                  v192 = v641;
LABEL_325:
                  v193 += 3;
                  if (v193 == v192)
                  {
                    v340 = (char **)v683;
                    goto LABEL_497;
                  }
                  continue;
                }
              }
              else
              {
                v252 = 0;
                v253 = (_DWORD *)(4 * v248);
                *(_DWORD *)(4 * v248) = v210;
                v246 = 4 * v248 + 4;
                if (v245 != v247)
                  goto LABEL_316;
              }
              break;
            }
            *((_QWORD *)v242 + 5) = v253;
            *((_QWORD *)v242 + 6) = v246;
            *((_QWORD *)v242 + 7) = &v252[4 * v251];
            if (v247)
              goto LABEL_323;
            goto LABEL_324;
          }
          v340 = &v684;
LABEL_497:
          v663 = 0;
          v662 = 0;
          v659 = 0;
          v660 = 0;
          v661 = 0;
          *(_QWORD *)v695 = a4;
          *(_QWORD *)&v695[8] = &v663;
          *(_QWORD *)&v695[16] = &v662;
          *(_QWORD *)&v695[24] = (char *)&v663 + 4;
          *(_QWORD *)&v695[32] = &v659;
          if (v340 != &v684)
          {
            do
            {
              v397 = (uint64_t *)v340[1];
              if (v397)
              {
                do
                {
                  v398 = (uint64_t **)v397;
                  v397 = (uint64_t *)*v397;
                }
                while (v397);
              }
              else
              {
                do
                {
                  v398 = (uint64_t **)v340[2];
                  v399 = *v398 == (uint64_t *)v340;
                  v340 = (char **)v398;
                }
                while (!v399);
              }
              v340 = (char **)v398;
            }
            while (v398 != (uint64_t **)&v684);
          }
          v387 = v664.__r_.__value_.__r.__words[0];
          if ((std::string::size_type *)v664.__r_.__value_.__l.__data_ != &v664.__r_.__value_.__r.__words[1])
          {
            do
            {
              v400 = *(std::string **)(v387 + 8);
              if (v400)
              {
                do
                {
                  v401 = v400;
                  v400 = (std::string *)v400->__r_.__value_.__r.__words[0];
                }
                while (v400);
              }
              else
              {
                do
                {
                  v401 = *(std::string **)(v387 + 16);
                  v399 = v401->__r_.__value_.__r.__words[0] == v387;
                  v387 = (std::string::size_type)v401;
                }
                while (!v399);
              }
              v387 = (std::string::size_type)v401;
            }
            while (v401 != (std::string *)&v664.__r_.__value_.__r.__words[1]);
          }
          if (*off_254079720[0] > 1
            && (off_254079720[0] != &google::kLogSiteUninitialized
             || google::InitVLOG3__((google *)off_254079720, (int **)&fLI::FLAGS_v, "./ortools/sat/table.cc", (const char *)2)))
          {
            google::LogMessage::LogMessage((google::LogMessage *)v658, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 166);
            v388 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v658);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v388, (uint64_t)"Table: 2 variables, ", 20);
            v389 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v389, (uint64_t)" tuples encoded using ", 22);
            v390 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v390, (uint64_t)" clauses, ", 10);
            v391 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v391, (uint64_t)" large clauses, ", 16);
            v392 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v392, (uint64_t)" implications", 13);
            google::LogMessage::~LogMessage((google::LogMessage *)v658);
          }
          if (v659)
          {
            v660 = v659;
            operator delete(v659);
          }
          std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v664, (_QWORD *)v664.__r_.__value_.__l.__size_);
          std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v683, v684);
        }
        v393 = (void **)__s2;
        if (__s2)
        {
          v394 = (void **)v687;
          v395 = __s2;
          if ((void *)v687 != __s2)
          {
            do
            {
              if (*(v394 - 3))
              {
                operator delete(*(v394 - 6));
                *(v394 - 1) = 0;
                *(v394 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
                *(v394 - 5) = 0;
                *(v394 - 4) = 0;
                *(v394 - 3) = 0;
              }
              v396 = *(v394 - 2);
              if (v396)
                absl::lts_2020_02_25::container_internal::UnsampleSlow(v396);
              v394 -= 6;
            }
            while (v394 != v393);
            v395 = __s2;
          }
          v687 = (uint64_t)v393;
          goto LABEL_775;
        }
        goto LABEL_776;
      }
    }
    v57 = &v689;
    v58 = 4;
    goto LABEL_51;
  }
  v610 = -1431655765 * (v44 >> 3);
  memset(&v695[8], 0, 32);
  *(_QWORD *)v695 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v696 = 0;
  do
  {
    *(_QWORD *)&v689 = *v43;
    *((_QWORD *)&v689 + 1) = (uint64_t)((v41 << 32) - 0x100000000) >> 32;
    v70 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::find_or_prepare_insert<absl::lts_2020_02_25::Span<long long const>>((uint64_t *)v695, (uint64_t)&v689);
    if (v71)
      *(_OWORD *)(*(_QWORD *)&v695[8] + 16 * v70) = v689;
    v43 += 3;
  }
  while (v43 != (_QWORD *)v42);
  v606 = *(absl::lts_2020_02_25::numbers_internal **)&v695[16];
  if (*(_QWORD *)&v695[24])
  {
    operator delete(*(void **)v695);
    *(_QWORD *)v695 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v696 = 0;
    memset(&v695[8], 0, 24);
  }
  if (*(_QWORD *)&v695[32])
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*(_QWORD **)&v695[32]);
  v608 = (uint64_t)((v41 << 32) - 0x100000000) >> 32;
  std::vector<std::vector<long long>>::vector(&v671, (int)a2);
  if ((int)v41 >= 1)
  {
    v73 = 0;
    do
    {
      v74 = (char **)((char *)v656 + 48 * v73);
      v75 = (uint64_t *)v74[1];
      v76 = *v74;
      if (**v74 <= -2)
      {
        do
        {
          v77 = (__clz(__rbit64(((*(_QWORD *)v76 >> 7) & ~*(_QWORD *)v76 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v76 += v77;
          v75 += v77;
        }
        while (*v76 < -1);
      }
      v78 = &v74[3][(_QWORD)*v74];
      if (v76 == v78)
      {
        v79 = 0;
      }
      else
      {
        v79 = 0;
        v80 = v76;
        do
        {
          v81 = *++v80;
          if (v81 <= -2)
          {
            do
              v80 += (__clz(__rbit64(((*(_QWORD *)v80 >> 7) & ~*(_QWORD *)v80 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            while (*v80 < -1);
          }
          ++v79;
        }
        while (v80 != v78);
      }
      std::vector<long long>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator>((uint64_t)v671 + 24 * v73, v76, v75, v78, v72, v79);
      std::__sort<std::__less<long long,long long> &,long long *>();
      ++v73;
    }
    while (v73 != v41);
  }
  *(_QWORD *)v695 = v41;
  LODWORD(__s2) = 2;
  if (v41 < 3)
  {
    *(_QWORD *)&v689 = google::MakeCheckOpString<unsigned long,int>((int)v695, (int)&__s2, "vars.size() > 2");
    if ((_QWORD)v689)
    {
      v605 = google::LogMessageFatal::LogMessageFatal((unint64_t *)v695, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 305, (uint64_t **)&v689);
      google::LogMessage::stream((google::LogMessage *)v605);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v695);
    }
  }
  v82 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)__p - (_BYTE *)v671) >> 3);
  LODWORD(v665) = v82;
  if ((int)v82 >= 1)
  {
    v83 = 0;
    v611 = (absl::lts_2020_02_25::numbers_internal *)(int)v82;
    v612 = -1431655765 * (((_BYTE *)__p - (_BYTE *)v671) >> 3);
    v616 = 2;
    v615 = 1;
    v618 = 8;
    do
    {
      if (v83)
      {
        *(_DWORD *)v695 = v83 + 3;
        v84 = (void **)v695;
        if (v83 + 3 >= (uint64_t)v611)
          v84 = &v665;
        v85 = *(int *)v84;
        v643 = v83;
        v614 = v83 + 1;
        if (v83 + 1 < v85)
        {
LABEL_98:
          v619 = v85;
          v613 = v41 - v643;
          v86 = 2;
          v626 = v615;
          v648 = v616;
          do
          {
            v87 = v626 - v643;
            if (v626 >= v643)
            {
              v110 = (uint64_t *)((char *)v671 + v618);
              v111 = v86;
              v112 = 1;
              v89 = v627;
              do
              {
                v114 = *(v110 - 1);
                v113 = *v110;
                v115 = *v110 - v114;
                v116 = v115 >> 3;
                if (v115 >> 3 >= 0)
                  v117 = v115 >> 3;
                else
                  v117 = -v116;
                v118 = 63 - __clz(v117);
                if (v113 == v114)
                  v119 = 0;
                else
                  v119 = v118;
                if (v112 >= 0)
                  v120 = v112;
                else
                  v120 = -v112;
                v121 = 63 - __clz(v120);
                if (!v112)
                  v121 = 0;
                v122 = v119 + v121;
                if (v122 <= 61)
                {
                  v88 = v116 * v112;
                }
                else
                {
                  v88 = 0;
                  if (v112 && v113 != v114)
                  {
                    v88 = ((v116 ^ (unint64_t)v112) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                    v123 = v117 * v120;
                    if (v122 <= 0x3E && v123 < v88)
                    {
                      if (v88 >= 0)
                        v88 = v117 * v120;
                      else
                        v88 = -(uint64_t)v123;
                    }
                  }
                }
                v110 += 3;
                v112 = v88;
                --v111;
              }
              while (v111);
            }
            else
            {
              v88 = 1;
              v89 = v627;
            }
            v91 = *(_QWORD **)v89;
            v90 = (_QWORD *)*((_QWORD *)v89 + 1);
            if (v88 > (unint64_t)(0x5555555555555556 * (((uint64_t)v90 - *(_QWORD *)v89) >> 3)))
              break;
            v620 = v86;
            *(_QWORD *)v695 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
            memset(&v695[8], 0, 32);
            v696 = 0;
            v634 = v88;
            if (v91 != v90)
            {
              v636 = v87 + 1;
              v92 = (char *)(8 * (v87 + 1));
              v628 = v90;
              while (1)
              {
                v93 = (_QWORD *)(*v91 + 8 * v643);
                if ((unint64_t)v92 < 0x11)
                  break;
                if ((unint64_t)v92 < 0x401)
                {
                  v94 = absl::lts_2020_02_25::hash_internal::CityHash64((absl::lts_2020_02_25::hash_internal *)(*v91 + 8 * v643), (unint64_t)v92);
                  v95 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
LABEL_109:
                  v96 = ((((unint64_t)v95 + v94) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)v95 + v94));
                  goto LABEL_110;
                }
                v96 = (uint64_t)absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, (absl::lts_2020_02_25::hash_internal *)(*v91 + 8 * v643), v92);
LABEL_110:
                v97 = 0;
                v98 = (((v96 + v636) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                        * (v96 + v636));
                v100 = *(_QWORD *)v695;
                v99 = *(_QWORD *)&v695[8];
                v101 = (v98 >> 7) ^ (*(_QWORD *)v695 >> 12);
                v102 = *(_QWORD *)&v695[24];
                while (1)
                {
                  v103 = v101 & v102;
                  v104 = *(_QWORD *)(v100 + (v101 & v102));
                  v105 = ((v104 ^ (0x101010101010101 * (v98 & 0x7F))) - 0x101010101010101) & ~(v104 ^ (0x101010101010101 * (v98 & 0x7F))) & 0x8080808080808080;
                  if (v105)
                    break;
LABEL_116:
                  if ((v104 & (~v104 << 6) & 0x8080808080808080) != 0)
                  {
                    v107 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::prepare_insert((uint64_t *)v695, v98);
                    v108 = (_QWORD *)(*(_QWORD *)&v695[8] + 16 * v107);
                    *v108 = v93;
                    v108[1] = v636;
                    goto LABEL_119;
                  }
                  v97 += 8;
                  v101 = v97 + v103;
                }
                v623 = v99;
                v624 = v97;
                while (1)
                {
                  v106 = v99 + 16 * ((v103 + (__clz(__rbit64(v105)) >> 3)) & v102);
                  if (v92 == (char *)(8 * *(_QWORD *)(v106 + 8)) && !memcmp(*(const void **)v106, v93, (size_t)v92))
                    break;
                  v105 &= v105 - 1;
                  v99 = v623;
                  v97 = v624;
                  if (!v105)
                    goto LABEL_116;
                }
LABEL_119:
                v109 = *(_DWORD *)&v695[16];
                v88 = v634;
                if (*(_QWORD *)&v695[16] == v634)
                {
                  v41 = v640;
                  v174 = v620;
                  if (*(_QWORD *)&v695[24])
                    goto LABEL_242;
                  goto LABEL_243;
                }
                v91 += 3;
                v41 = v640;
                if (v91 == v628)
                  goto LABEL_148;
              }
              v94 = *(_QWORD *)&v92[(_QWORD)v93 - 8];
              v95 = (_UNKNOWN **)(((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *v93)
                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                     * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                      + *v93)));
              goto LABEL_109;
            }
            v109 = 0;
LABEL_148:
            v689 = 0uLL;
            v690 = 0;
            v125 = v643;
            if (v88 <= v109 || v88 >= 2 * v109)
              goto LABEL_241;
            v687 = 0;
            __s2 = 0;
            v688 = 0;
            if (v88 < 1)
              goto LABEL_215;
            v637 = 0;
            v629 = 0;
LABEL_154:
            while (2)
            {
              v126 = (char *)__s2;
              v687 = (uint64_t)__s2;
              if (v626 < v125)
              {
                v127 = (char *)__s2;
                v128 = 0;
                goto LABEL_190;
              }
              v130 = v671;
              v131 = v125;
              LODWORD(v132) = v637;
              do
              {
                v134 = &v130[3 * v131];
                v135 = (int)v132;
                v136 = *v134;
                v137 = (int)v132 % (unint64_t)((v134[1] - *v134) >> 3);
                if ((unint64_t)v126 < v688)
                {
                  *(_QWORD *)v126 = *(_QWORD *)(v136 + 8 * v137);
                  v126 += 8;
                  goto LABEL_160;
                }
                v138 = (char *)__s2;
                v139 = v126 - (_BYTE *)__s2;
                v140 = (v126 - (_BYTE *)__s2) >> 3;
                v141 = v140 + 1;
                if ((unint64_t)(v140 + 1) >> 61)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                v142 = v688 - (_QWORD)__s2;
                if ((uint64_t)(v688 - (_QWORD)__s2) >> 2 > v141)
                  v141 = v142 >> 2;
                if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
                  v143 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v143 = v141;
                if (v143)
                {
                  if (v143 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v88 = (uint64_t)operator new(8 * v143);
                  v144 = (_QWORD *)(v88 + 8 * v140);
                  *v144 = *(_QWORD *)(v136 + 8 * v137);
                  v145 = (uint64_t)(v144 + 1);
                  if (v126 == v138)
                    goto LABEL_176;
                }
                else
                {
                  v88 = 0;
                  v144 = (_QWORD *)(8 * v140);
                  *(_QWORD *)(8 * v140) = *(_QWORD *)(v136 + 8 * v137);
                  v145 = 8 * v140 + 8;
                  if (v126 == v138)
                    goto LABEL_176;
                }
                v146 = v126 - 8 - v138;
                if (v146 >= 0x168)
                {
                  if (v88 + v139 - 8 - (v146 & 0xFFFFFFFFFFFFFFF8) > v88 + v139 - 8)
                  {
                    v147 = v126;
                  }
                  else if (&v126[-(v146 & 0xFFFFFFFFFFFFFFF8) - 8] > v126 - 8)
                  {
                    v147 = v126;
                  }
                  else if ((unint64_t)&v126[-v88 - v139] >= 0x20)
                  {
                    v149 = (v146 >> 3) + 1;
                    v150 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
                    v147 = &v126[-v150];
                    v144 = (_QWORD *)((char *)v144 - v150);
                    v151 = (_OWORD *)(v88 + 8 * v140 - 16);
                    v152 = v126 - 16;
                    v153 = v149 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v154 = *(_OWORD *)v152;
                      *(v151 - 1) = *((_OWORD *)v152 - 1);
                      *v151 = v154;
                      v151 -= 2;
                      v152 -= 32;
                      v153 -= 4;
                    }
                    while (v153);
                    if (v149 == (v149 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_176;
                  }
                  else
                  {
                    v147 = v126;
                  }
                }
                else
                {
                  v147 = v126;
                }
                do
                {
                  v148 = *((_QWORD *)v147 - 1);
                  v147 -= 8;
                  *--v144 = v148;
                }
                while (v147 != v138);
LABEL_176:
                __s2 = v144;
                v687 = v145;
                v688 = v88 + 8 * v143;
                if (v138)
                {
                  operator delete(v138);
                  v130 = v671;
                }
                v126 = (char *)v145;
LABEL_160:
                v687 = (uint64_t)v126;
                v133 = (uint64_t)(v130[3 * v131 + 1] - v130[3 * v131]) >> 3;
                ++v131;
                v132 = v135 / v133;
              }
              while (v131 != v648);
              v127 = (char *)__s2;
              v128 = v126 - (_BYTE *)__s2;
              if ((unint64_t)(v126 - (_BYTE *)__s2) >= 0x11)
              {
                if ((unint64_t)v128 < 0x401)
                {
                  v88 = absl::lts_2020_02_25::hash_internal::CityHash64((absl::lts_2020_02_25::hash_internal *)__s2, v126 - (_BYTE *)__s2);
                  v129 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
                  goto LABEL_195;
                }
                v155 = (_UNKNOWN **)absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, (absl::lts_2020_02_25::hash_internal *)__s2, (char *)(v126 - (_BYTE *)__s2));
              }
              else
              {
LABEL_190:
                if ((unint64_t)v128 >= 9)
                {
                  v88 = *(_QWORD *)&v127[v128 - 8];
                  v129 = (_UNKNOWN **)(((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                        + *(_QWORD *)v127)
                                       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                           + *(_QWORD *)v127)));
                  goto LABEL_195;
                }
                if ((unint64_t)v128 >= 4)
                {
                  v88 = ((unint64_t)*(unsigned int *)&v127[v128 - 4] << (8 * v128 - 32)) | *(unsigned int *)v127;
                  v129 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
                  goto LABEL_195;
                }
                v155 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
                v129 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
                if (v126 != v127)
LABEL_195:
                  v155 = (_UNKNOWN **)(((((unint64_t)v129 + v88) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)v129 + v88)));
              }
              v156 = 0;
              v157 = ((((unint64_t)v155 + (v128 >> 3)) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)v155 + (v128 >> 3)));
              v158 = *(_QWORD *)v695;
              v159 = *(_QWORD *)&v695[8];
              v160 = (v157 >> 7) ^ (*(_QWORD *)v695 >> 12);
              v161 = *(_QWORD *)&v695[24];
              v162 = 0x101010101010101 * (v157 & 0x7F);
              while (1)
              {
                v163 = v160 & v161;
                v164 = *(_QWORD *)(v158 + (v160 & v161));
                v165 = ((v164 ^ v162) - 0x101010101010101) & ~(v164 ^ v162) & 0x8080808080808080;
                if (v165)
                  break;
LABEL_202:
                if ((v164 & (~v164 << 6) & 0x8080808080808080) != 0)
                {
LABEL_205:
                  v168 = (_QWORD *)*((_QWORD *)&v689 + 1);
                  if (*((_QWORD *)&v689 + 1) >= (unint64_t)v690)
                  {
                    v88 = (uint64_t)std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>((char **)&v689, (uint64_t)&__s2);
                    v41 = v640;
                    v125 = v643;
                    v171 = v634;
                  }
                  else
                  {
                    **((_QWORD **)&v689 + 1) = 0;
                    v168[1] = 0;
                    v168[2] = 0;
                    v169 = __s2;
                    v170 = v687 - (_QWORD)__s2;
                    v41 = v640;
                    v125 = v643;
                    v171 = v634;
                    if ((void *)v687 != __s2)
                    {
                      if (v170 < 0)
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      v172 = (char *)operator new(v687 - (_QWORD)__s2);
                      *v168 = v172;
                      v168[1] = v172;
                      v173 = &v172[8 * (v170 >> 3)];
                      v168[2] = v173;
                      memcpy(v172, v169, v170);
                      v168[1] = v173;
                    }
                    v88 = (uint64_t)(v168 + 3);
                  }
                  *((_QWORD *)&v689 + 1) = v88;
                  ++v629;
                  if (++v637 == v171)
                    goto LABEL_215;
                  goto LABEL_154;
                }
                v156 += 8;
                v160 = v156 + v163;
              }
              v625 = v156;
              while (1)
              {
                v166 = (v163 + (__clz(__rbit64(v165)) >> 3)) & v161;
                v167 = v159 + 16 * v166;
                if (v128 == 8 * *(_QWORD *)(v167 + 8))
                {
                  v88 = memcmp(*(const void **)v167, v127, v128);
                  if (!(_DWORD)v88)
                    break;
                }
                v165 &= v165 - 1;
                v156 = v625;
                if (!v165)
                  goto LABEL_202;
              }
              if (v161 == v166)
                goto LABEL_205;
              v41 = v640;
              v125 = v643;
              if (++v637 != v634)
                continue;
              break;
            }
LABEL_215:
            if (v41 < v125)
              absl::lts_2020_02_25::base_internal::ThrowStdOutOfRange((absl::lts_2020_02_25::base_internal *)"pos > size()", v89);
            std::vector<std::vector<long long>>::vector(&v683, (uint64_t *)&v689);
            if (v613 >= (int)v626 - (int)v125 + 1)
              v175 = v626 - v125 + 1;
            else
              v175 = v613;
            operations_research::sat::AddNegatedTableConstraint(a1 + 4 * v643, v175, &v683, a4);
            v176 = (uint64_t *)v683;
            if (v683)
            {
              v177 = v684;
              v178 = v683;
              if (v684 != v683)
              {
                v179 = v684;
                do
                {
                  v181 = (void *)*((_QWORD *)v179 - 3);
                  v179 -= 24;
                  v180 = v181;
                  if (v181)
                  {
                    *((_QWORD *)v177 - 2) = v180;
                    operator delete(v180);
                  }
                  v177 = v179;
                }
                while (v179 != (char *)v176);
                v178 = v683;
              }
              v684 = (char *)v176;
              operator delete(v178);
            }
            if (*off_254079728 >= 2
              && (off_254079728 != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)&off_254079728, (int **)&fLI::FLAGS_v, "./ortools/sat/table.cc", (const char *)2)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)&v668, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 234);
              v182 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v668);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"  add negated tables with ", 26);
              v183 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)" tuples on the range [", 22);
              v184 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)",", 1);
              v185 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)"]", 1);
              google::LogMessage::~LogMessage((google::LogMessage *)&v668);
            }
            if (__s2)
            {
              v687 = (uint64_t)__s2;
              operator delete(__s2);
            }
            v186 = v689;
            if ((_QWORD)v689)
            {
              v187 = *((_QWORD *)&v689 + 1);
              v188 = (void *)v689;
              if (*((_QWORD *)&v689 + 1) != (_QWORD)v689)
              {
                v189 = *((_QWORD *)&v689 + 1);
                do
                {
                  v191 = *(void **)(v189 - 24);
                  v189 -= 24;
                  v190 = v191;
                  if (v191)
                  {
                    *(_QWORD *)(v187 - 16) = v190;
                    operator delete(v190);
                  }
                  v187 = v189;
                }
                while (v189 != v186);
                v188 = (void *)v689;
              }
              *((_QWORD *)&v689 + 1) = v186;
              operator delete(v188);
            }
LABEL_241:
            v174 = v620;
            if (*(_QWORD *)&v695[24])
            {
LABEL_242:
              operator delete(*(void **)v695);
              *(_QWORD *)v695 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              v696 = 0;
              memset(&v695[8], 0, 24);
            }
LABEL_243:
            if (*(_QWORD *)&v695[32])
              absl::lts_2020_02_25::container_internal::UnsampleSlow(*(_QWORD **)&v695[32]);
            ++v648;
            v86 = v174 + 1;
            ++v626;
          }
          while (v626 != v619);
        }
      }
      else
      {
        LODWORD(v85) = (_DWORD)v665;
        v643 = 0;
        v614 = 1;
        if ((int)v665 > 1)
          goto LABEL_98;
      }
      ++v615;
      ++v616;
      v618 += 24;
      v83 = v614;
    }
    while (v614 != v612);
  }
  std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::vector(&v668, v609);
  if ((int)v41 > 0)
  {
    v268 = 0;
    v269 = v41;
    while (1)
    {
      v270 = (char **)((char *)v656 + 48 * v268);
      v271 = (uint64_t *)v270[1];
      v272 = *v270;
      if (**v270 <= -2)
      {
        do
        {
          v273 = (__clz(__rbit64(((*v272 >> 7) & ~*v272 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v272 = (_QWORD *)((char *)v272 + v273);
          v271 += v273;
        }
        while (*(char *)v272 < -1);
      }
      std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,0>(&v689, v272, v271, &v270[3][(_QWORD)*v270]);
      v274 = *(_DWORD *)(a1 + 4 * v268);
      v652 = 0;
      v653 = 0;
      v654 = 0;
      v275 = (const void *)v689;
      v276 = *((_QWORD *)&v689 + 1) - v689;
      if (*((_QWORD *)&v689 + 1) != (_QWORD)v689)
      {
        if (v276 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v652 = operator new(*((_QWORD *)&v689 + 1) - v689);
        v653 = v652;
        v277 = (char *)v652 + 8 * (v276 >> 3);
        v654 = v277;
        memcpy(v652, v275, v276);
        v653 = v277;
      }
      operations_research::Domain::FromValues((int64_t **)&v652, v655);
      operations_research::sat::IntegerTrail::UpdateInitialDomain((uint64_t)v621, v274, (operations_research::Domain *)v655);
      if ((v655[0] & 1) != 0)
        operator delete((void *)v655[1]);
      if (v652)
      {
        v653 = v652;
        operator delete(v652);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v657 - (_BYTE *)v656) >> 4) < 2)
        goto LABEL_360;
      v278 = *(_DWORD *)(a1 + 4 * v268);
      v692 = &off_24F980458;
      v693 = v278;
      v694 = &v692;
      v279 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a4);
      if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v279, v693))
        operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v279, v693);
      operations_research::sat::IntegerEncoder::FullDomainEncoding(v279, v693, (char **)v651);
      if (v651[0])
      {
        v651[1] = v651[0];
        operator delete(v651[0]);
      }
      v280 = v694;
      if (v694 == &v692)
        break;
      if (v694)
      {
        v281 = 5;
LABEL_351:
        (*v280)[v281]();
      }
      v282 = (char *)v668 + 48 * v268;
      v283 = *(_QWORD *)&v695[32];
      v284 = v696;
      *(_QWORD *)&v695[32] = 0;
      v696 = 0;
      v285 = *(_OWORD *)v695;
      *(_QWORD *)v695 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_QWORD *)&v695[8] = 0;
      v286 = *(void **)v282;
      *(_OWORD *)v282 = v285;
      v287 = *(_OWORD *)&v695[16];
      *(_QWORD *)&v695[16] = 0;
      *(_QWORD *)&v695[24] = 0;
      v288 = *((_QWORD *)v282 + 3);
      v289 = (_QWORD *)*((_QWORD *)v282 + 4);
      *((_OWORD *)v282 + 1) = v287;
      *((_QWORD *)v282 + 4) = v283;
      *((_QWORD *)v282 + 5) = v284;
      if (v288)
        operator delete(v286);
      if (v289)
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v289);
      if (*(_QWORD *)&v695[24])
      {
        operator delete(*(void **)v695);
        *(_QWORD *)v695 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        v696 = 0;
        memset(&v695[8], 0, 24);
      }
      if (*(_QWORD *)&v695[32])
        absl::lts_2020_02_25::container_internal::UnsampleSlow(*(_QWORD **)&v695[32]);
LABEL_360:
      if ((_QWORD)v689)
      {
        *((_QWORD *)&v689 + 1) = v689;
        operator delete((void *)v689);
      }
      if (++v268 == v269)
      {
        v290 = 0;
        v291 = 0;
        v292 = 0;
        v293 = 0;
        v665 = 0;
        v666 = 0;
        v667 = 0;
        v294 = v627;
        while (1)
        {
          while (1)
          {
            v295 = *((_QWORD *)v656 + 6 * v293 + 2);
            if (v292 >= v291)
              break;
            *(_QWORD *)v292 = v295;
            v292 += 8;
            v666 = (uint64_t)v292;
            if (++v293 == v269)
              goto LABEL_395;
          }
          v296 = (v292 - v290) >> 3;
          v297 = v296 + 1;
          if ((unint64_t)(v296 + 1) >> 61)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          if ((v291 - v290) >> 2 > v297)
            v297 = (v291 - v290) >> 2;
          v298 = (unint64_t)(v291 - v290) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v297;
          if (v298)
          {
            if (v298 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v299 = operator new(8 * v298);
            v300 = &v299[8 * v296];
            *v300 = v295;
            v301 = (uint64_t)(v300 + 1);
            if (v292 == v290)
            {
LABEL_386:
              v294 = v627;
              v291 = &v299[8 * v298];
              v665 = v300;
              v666 = v301;
              v667 = v291;
              if (!v290)
                goto LABEL_383;
LABEL_382:
              operator delete(v290);
              goto LABEL_383;
            }
          }
          else
          {
            v299 = 0;
            v300 = (_QWORD *)(8 * v296);
            *(_QWORD *)(8 * v296) = v295;
            v301 = 8 * v296 + 8;
            if (v292 == v290)
              goto LABEL_386;
          }
          v302 = v292 - 8 - v290;
          if (v302 < 0x168
            || &v299[v292 - v290 - 8 - (v302 & 0xFFFFFFFFFFFFFFF8)] > &v299[v292 - v290 - 8]
            || &v292[-(v302 & 0xFFFFFFFFFFFFFFF8) - 8] > v292 - 8
            || (unint64_t)(v290 - v299) < 0x20)
          {
            break;
          }
          v305 = (v302 >> 3) + 1;
          v306 = 8 * (v305 & 0x3FFFFFFFFFFFFFFCLL);
          v303 = &v292[-v306];
          v300 = (_QWORD *)((char *)v300 - v306);
          v307 = &v299[8 * v296 - 16];
          v308 = v292 - 16;
          v309 = v305 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v310 = *(_OWORD *)v308;
            *(v307 - 1) = *((_OWORD *)v308 - 1);
            *v307 = v310;
            v307 -= 2;
            v308 -= 32;
            v309 -= 4;
          }
          while (v309);
          v294 = v627;
          if (v305 != (v305 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_380;
LABEL_381:
          v291 = &v299[8 * v298];
          v665 = v300;
          v666 = v301;
          v667 = v291;
          if (v290)
            goto LABEL_382;
LABEL_383:
          v290 = (char *)v300;
          v292 = (char *)v301;
          v666 = v301;
          if (++v293 == v269)
          {
LABEL_395:
            v311 = v665;
            v41 = v640;
            goto LABEL_397;
          }
        }
        v303 = v292;
        v294 = v627;
        do
        {
LABEL_380:
          v304 = *((_QWORD *)v303 - 1);
          v303 -= 8;
          *--v300 = v304;
        }
        while (v303 != v290);
        goto LABEL_381;
      }
    }
    v280 = &v692;
    v281 = 4;
    goto LABEL_351;
  }
  v292 = 0;
  v311 = 0;
  v665 = 0;
  v666 = 0;
  v667 = 0;
  v294 = v627;
LABEL_397:
  operations_research::sat::CompressTuples((uint64_t)v311, (v292 - v311) >> 3, 0x8000000000000000, (uint64_t)v294);
  if (*_MergedGlobals_19[0] < 2)
    goto LABEL_447;
  v314 = *(uint64_t ***)v294;
  v313 = *((_QWORD *)v294 + 1);
  if (_MergedGlobals_19[0] == &google::kLogSiteUninitialized
    && !google::InitVLOG3__((google *)_MergedGlobals_19, (int **)&fLI::FLAGS_v, "./ortools/sat/table.cc", (const char *)2))
  {
    goto LABEL_447;
  }
  if ((int)v41 < 2)
  {
    v318 = 1;
  }
  else
  {
    v315 = (v41 - 1);
    v316 = (uint64_t *)((char *)v656 + 16);
    v317 = 1;
    do
    {
      v320 = *v316;
      v316 += 6;
      v319 = v320;
      if (v320 >= 0)
        v321 = v319;
      else
        v321 = -(uint64_t)v319;
      v322 = 63 - __clz(v321);
      if (v319)
        v323 = v322;
      else
        v323 = 0;
      if (v317 >= 0)
        v324 = v317;
      else
        v324 = -v317;
      v325 = 63 - __clz(v324);
      if (!v317)
        v325 = 0;
      v326 = v323 + v325;
      if (v326 <= 61)
      {
        v318 = v319 * v317;
      }
      else
      {
        v318 = 0;
        if (v317 && v319)
        {
          v318 = ((v319 ^ v317) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v327 = v321 * v324;
          if (v326 <= 0x3E && v327 < v318)
          {
            if (v318 >= 0)
              v318 = v321 * v324;
            else
              v318 = -(uint64_t)v327;
          }
        }
      }
      v317 = v318;
      --v315;
    }
    while (v315);
  }
  *(_QWORD *)v695 = "Table: ";
  *(_QWORD *)&v695[8] = 7;
  v329 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v41, &v690, v312);
  *(_QWORD *)&v689 = &v690;
  *((_QWORD *)&v689 + 1) = v329 - (_BYTE *)&v690;
  __s2 = " variables, original tuples = ";
  v687 = 30;
  v331 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v607, v685, v330);
  v683 = v685;
  v684 = (char *)(v331 - (_BYTE *)v685);
  absl::lts_2020_02_25::StrCat((uint64_t)v695, (uint64_t)&v689, (uint64_t)&__s2, (uint64_t)&v683, &v664);
  v333 = v610;
  if (v610 != (_DWORD)v607)
  {
    *(_QWORD *)v695 = ", valid tuples = ";
    *(_QWORD *)&v695[8] = 17;
    v334 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v610, &v690, v332);
    *(_QWORD *)&v689 = &v690;
    *((_QWORD *)&v689 + 1) = v334 - (_BYTE *)&v690;
    absl::lts_2020_02_25::StrAppend(&v664, (uint64_t)v695, (uint64_t)&v689);
    v333 = v610;
  }
  if ((_DWORD)v606 == v333)
  {
    if (v318 <= (int)v606)
    {
      *(_QWORD *)v695 = ", full prefix = true";
      *(_QWORD *)&v695[8] = 20;
      absl::lts_2020_02_25::StrAppend((uint64_t)&v664, (uint64_t)v695);
    }
    else
    {
      *(_QWORD *)v695 = ", partial prefix = ";
      *(_QWORD *)&v695[8] = 19;
      v335 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v610, &v690, v332);
      *(_QWORD *)&v689 = &v690;
      *((_QWORD *)&v689 + 1) = v335 - (_BYTE *)&v690;
      __s2 = "/";
      v687 = 1;
      v337 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v318, v685, v336);
      v683 = v685;
      v684 = (char *)(v337 - (_BYTE *)v685);
      absl::lts_2020_02_25::StrAppend(&v664, (uint64_t)v695, (uint64_t)&v689, (uint64_t)&__s2, (uint64_t)&v683);
    }
  }
  else
  {
    *(_QWORD *)v695 = ", num prefix tuples = ";
    *(_QWORD *)&v695[8] = 22;
    v339 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((uint64_t)v606, &v690, v332);
    *(_QWORD *)&v689 = &v690;
    *((_QWORD *)&v689 + 1) = v339 - (_BYTE *)&v690;
    absl::lts_2020_02_25::StrAppend(&v664, (uint64_t)v695, (uint64_t)&v689);
  }
  v294 = v627;
  v341 = -1431655765 * ((unint64_t)(v313 - (_QWORD)v314) >> 3);
  if ((_DWORD)v341 != v610)
  {
    *(_QWORD *)v695 = ", compressed tuples = ";
    *(_QWORD *)&v695[8] = 22;
    v342 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v341, &v690, v338);
    *(_QWORD *)&v689 = &v690;
    *((_QWORD *)&v689 + 1) = v342 - (_BYTE *)&v690;
    absl::lts_2020_02_25::StrAppend(&v664, (uint64_t)v695, (uint64_t)&v689);
  }
  if (*off_254079718[0] >= 2
    && (off_254079718[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_254079718, (int **)&fLI::FLAGS_v, "./ortools/sat/table.cc", (const char *)2)))
  {
    v343 = google::LogMessage::LogMessage((google::LogMessage *)v695, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 363);
    v344 = (_QWORD *)google::LogMessage::stream(v343);
    if ((v664.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v345 = &v664;
    else
      v345 = (std::string *)v664.__r_.__value_.__r.__words[0];
    if ((v664.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v346 = HIBYTE(v664.__r_.__value_.__r.__words[2]);
    else
      v346 = v664.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v344, (uint64_t)v345, v346);
    google::LogMessage::~LogMessage((google::LogMessage *)v695);
  }
  if (SHIBYTE(v664.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v664.__r_.__value_.__l.__data_);
    v348 = *(uint64_t ***)v627;
    v347 = (uint64_t **)*((_QWORD *)v627 + 1);
    v349 = (uint64_t)v347 - *(_QWORD *)v627;
    if (v349 == 24)
      goto LABEL_756;
  }
  else
  {
LABEL_447:
    v348 = *(uint64_t ***)v294;
    v347 = (uint64_t **)*((_QWORD *)v294 + 1);
    v349 = (uint64_t)v347 - *(_QWORD *)v294;
    if (v349 == 24)
      goto LABEL_756;
  }
  v350 = 0xAAAAAAAAAAAAAAABLL * (v349 >> 3);
  memset(v695, 0, 24);
  if (v347 == v348)
  {
    v351 = 0;
    if (v349 == 48)
      goto LABEL_451;
  }
  else
  {
    if (v350 >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v351 = (int *)operator new(0xAAAAAAAAAAAAAAACLL * (v349 >> 3));
    *(_QWORD *)v695 = v351;
    *(_QWORD *)&v695[8] = v351;
    *(_QWORD *)&v695[16] = &v351[0xEAAAAAAAAAAAAAABLL * (v349 >> 3)];
    if (v349 == 48)
    {
LABEL_451:
      v681[0] = &off_24F982EF8;
      v682 = v681;
      v352 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a4);
      v353 = *((_DWORD *)v352 + 4);
      operations_research::sat::SatSolver::SetNumVariables(v352, v353 + 1);
      v354 = *(_DWORD **)&v695[8];
      if (*(_QWORD *)&v695[8] >= *(_QWORD *)&v695[16])
      {
        v381 = *(_BYTE **)v695;
        v382 = (uint64_t)(*(_QWORD *)&v695[8] - *(_QWORD *)v695) >> 2;
        v383 = v382 + 1;
        if ((unint64_t)(v382 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v384 = *(_QWORD *)&v695[16] - *(_QWORD *)v695;
        if ((uint64_t)(*(_QWORD *)&v695[16] - *(_QWORD *)v695) >> 1 > v383)
          v383 = v384 >> 1;
        if ((unint64_t)v384 >= 0x7FFFFFFFFFFFFFFCLL)
          v385 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v385 = v383;
        if (v385)
        {
          if (v385 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v386 = operator new(4 * v385);
        }
        else
        {
          v386 = 0;
        }
        v404 = &v386[4 * v382];
        *v404 = 2 * v353;
        v355 = v404 + 1;
        if (v354 != (_DWORD *)v381)
        {
          v405 = (char *)v354 - v381 - 4;
          if (v405 < 0x2C)
            goto LABEL_819;
          if ((unint64_t)(v381 - v386) < 0x20)
            goto LABEL_819;
          v406 = (v405 >> 2) + 1;
          v407 = 4 * (v406 & 0x7FFFFFFFFFFFFFF8);
          v408 = &v354[v407 / 0xFFFFFFFFFFFFFFFCLL];
          v404 = (_DWORD *)((char *)v404 - v407);
          v409 = &v386[4 * v382 - 16];
          v410 = (__int128 *)(v354 - 4);
          v411 = v406 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v412 = *v410;
            *(v409 - 1) = *(v410 - 1);
            *v409 = v412;
            v409 -= 2;
            v410 -= 2;
            v411 -= 8;
          }
          while (v411);
          v354 = v408;
          if (v406 != (v406 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_819:
            do
            {
              v413 = *--v354;
              *--v404 = v413;
            }
            while (v354 != (_DWORD *)v381);
          }
        }
        *(_QWORD *)v695 = v404;
        *(_QWORD *)&v695[8] = v355;
        *(_QWORD *)&v695[16] = &v386[4 * v385];
        if (v381)
          operator delete(v381);
      }
      else
      {
        **(_DWORD **)&v695[8] = 2 * v353;
        v355 = v354 + 1;
      }
      *(_QWORD *)&v695[8] = v355;
      v414 = v682;
      if (v682 == v681)
      {
        v415 = 4;
        v414 = v681;
      }
      else
      {
        if (!v682)
          goto LABEL_548;
        v415 = 5;
      }
      (*(void (**)(void))(*v414 + 8 * v415))();
      v355 = *(int **)&v695[8];
LABEL_548:
      v416 = *(int **)v695;
      v417 = **(_DWORD **)v695 ^ 1;
      if ((unint64_t)v355 < *(_QWORD *)&v695[16])
      {
        *v355 = v417;
        *(_QWORD *)&v695[8] = v355 + 1;
LABEL_572:
        v356 = v610;
        goto LABEL_573;
      }
      v418 = ((uint64_t)v355 - *(_QWORD *)v695) >> 2;
      v419 = v418 + 1;
      if ((unint64_t)(v418 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v420 = *(_QWORD *)&v695[16] - *(_QWORD *)v695;
      if ((uint64_t)(*(_QWORD *)&v695[16] - *(_QWORD *)v695) >> 1 > v419)
        v419 = v420 >> 1;
      if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL)
        v421 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v421 = v419;
      if (v421)
      {
        if (v421 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v422 = operator new(4 * v421);
      }
      else
      {
        v422 = 0;
      }
      v423 = (int *)&v422[4 * v418];
      v424 = &v422[4 * v421];
      *v423 = v417;
      v425 = v423 + 1;
      if (v355 != v416)
      {
        v426 = (char *)v355 - (char *)v416 - 4;
        if (v426 >= 0x2C)
        {
          if ((unint64_t)((char *)v416 - v422) >= 0x20)
          {
            v428 = (v426 >> 2) + 1;
            v429 = 4 * (v428 & 0x7FFFFFFFFFFFFFF8);
            v427 = &v355[v429 / 0xFFFFFFFFFFFFFFFCLL];
            v423 = (int *)((char *)v423 - v429);
            v430 = &v422[4 * v418 - 16];
            v431 = v355 - 4;
            v432 = v428 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v433 = *(_OWORD *)v431;
              *(v430 - 1) = *((_OWORD *)v431 - 1);
              *v430 = v433;
              v430 -= 2;
              v431 -= 8;
              v432 -= 8;
            }
            while (v432);
            if (v428 == (v428 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_571;
          }
          else
          {
            v427 = v355;
          }
        }
        else
        {
          v427 = v355;
        }
        do
        {
          v434 = *--v427;
          *--v423 = v434;
        }
        while (v427 != v416);
      }
LABEL_571:
      *(_QWORD *)v695 = v423;
      *(_QWORD *)&v695[8] = v425;
      *(_QWORD *)&v695[16] = v424;
      operator delete(v416);
      *(_QWORD *)&v695[8] = v425;
      goto LABEL_572;
    }
  }
  v356 = v610;
  if (v350 < 3)
    goto LABEL_573;
  v357 = v351;
  if (v347 == v348)
    goto LABEL_530;
  v358 = 0;
  do
  {
    v679[0] = &off_24F982EF8;
    v680 = v679;
    v361 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a4);
    v362 = *((_DWORD *)v361 + 4);
    operations_research::sat::SatSolver::SetNumVariables(v361, v362 + 1);
    v363 = *(char **)&v695[8];
    if (*(_QWORD *)&v695[8] < *(_QWORD *)&v695[16])
    {
      **(_DWORD **)&v695[8] = 2 * v362;
      *(_QWORD *)&v695[8] = v363 + 4;
      v359 = v680;
      if (v680 == v679)
        goto LABEL_457;
      goto LABEL_483;
    }
    v364 = *(char **)v695;
    v365 = (uint64_t)(*(_QWORD *)&v695[8] - *(_QWORD *)v695) >> 2;
    v366 = v365 + 1;
    if ((unint64_t)(v365 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v367 = *(_QWORD *)&v695[16] - *(_QWORD *)v695;
    if ((uint64_t)(*(_QWORD *)&v695[16] - *(_QWORD *)v695) >> 1 > v366)
      v366 = v367 >> 1;
    if ((unint64_t)v367 >= 0x7FFFFFFFFFFFFFFCLL)
      v368 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v368 = v366;
    if (!v368)
    {
      v369 = 0;
      v370 = (_DWORD *)(4 * v365);
      *(_DWORD *)(4 * v365) = 2 * v362;
      v371 = 4 * v365 + 4;
      if (v363 == v364)
        goto LABEL_480;
LABEL_474:
      v372 = v363 - 4 - v364;
      if (v372 < 0x2C)
        goto LABEL_820;
      if ((unint64_t)(v364 - v369) < 0x20)
        goto LABEL_820;
      v373 = (v372 >> 2) + 1;
      v374 = 4 * (v373 & 0x7FFFFFFFFFFFFFF8);
      v375 = &v363[-v374];
      v370 = (_DWORD *)((char *)v370 - v374);
      v376 = &v369[4 * v365 - 16];
      v377 = v363 - 16;
      v378 = v373 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v379 = *(_OWORD *)v377;
        *(v376 - 1) = *((_OWORD *)v377 - 1);
        *v376 = v379;
        v376 -= 2;
        v377 -= 32;
        v378 -= 8;
      }
      while (v378);
      v363 = v375;
      if (v373 != (v373 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_820:
        do
        {
          v380 = *((_DWORD *)v363 - 1);
          v363 -= 4;
          *--v370 = v380;
        }
        while (v363 != v364);
      }
      goto LABEL_480;
    }
    if (v368 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v369 = operator new(4 * v368);
    v370 = &v369[4 * v365];
    *v370 = 2 * v362;
    v371 = (uint64_t)(v370 + 1);
    if (v363 != v364)
      goto LABEL_474;
LABEL_480:
    *(_QWORD *)v695 = v370;
    *(_QWORD *)&v695[8] = v371;
    *(_QWORD *)&v695[16] = &v369[4 * v368];
    if (v364)
      operator delete(v364);
    v294 = v627;
    LODWORD(v41) = v640;
    *(_QWORD *)&v695[8] = v371;
    v359 = v680;
    if (v680 == v679)
    {
LABEL_457:
      v359 = v679;
      v360 = 4;
LABEL_458:
      (*(void (**)(void))(*v359 + 8 * v360))();
      goto LABEL_459;
    }
LABEL_483:
    if (v359)
    {
      v360 = 5;
      goto LABEL_458;
    }
LABEL_459:
    ++v358;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v294 + 1) - *(_QWORD *)v294) >> 3) > v358);
  v357 = *(int **)v695;
  v351 = *(int **)&v695[8];
LABEL_530:
  v676 = &off_24F980568;
  v677[0] = v357;
  v677[1] = (int *)(v351 - v357);
  v678 = &v676;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v677, a4);
  v402 = v678;
  v356 = v610;
  if (v678 == &v676)
  {
    v403 = 4;
    v402 = &v676;
LABEL_564:
    (*v402)[v403]();
    goto LABEL_572;
  }
  if (v678)
  {
    v403 = 5;
    goto LABEL_564;
  }
LABEL_573:
  v689 = 0uLL;
  v690 = 0;
  v687 = 0;
  __s2 = 0;
  v688 = 0;
  v684 = 0;
  v683 = 0;
  v685[0] = 0;
  if ((int)v41 >= 1)
  {
    v435 = 0;
    v436 = 0;
    v437 = 0;
    v644 = 0;
    v649 = 0;
    v638 = 0;
    v438 = 0;
    v439 = 0;
    v440 = 0;
    v441 = 0;
    v442 = v41;
    v630 = v41;
    while (1)
    {
      if (*((_QWORD *)v656 + 6 * v441 + 2) == 1)
      {
        v443 = v436;
        v444 = v438;
        v445 = v439;
        v356 = v610;
      }
      else
      {
        *((_QWORD *)&v689 + 1) = v440;
        v687 = (uint64_t)v439;
        v684 = (char *)v438;
        v446 = *(_QWORD *)v695;
        if (*(_QWORD *)&v695[8] != *(_QWORD *)v695)
        {
          v447 = 0;
          v444 = v438;
          v445 = v439;
          v635 = v441;
          while (1)
          {
            v449 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v627 + 24 * v447) + 8 * v441);
            if (v449 != 0x8000000000000000)
            {
              if (v440 < v649)
              {
                *(_DWORD *)v440 = *(_DWORD *)(v446 + 4 * v447);
                v440 += 4;
                *((_QWORD *)&v689 + 1) = v440;
                if (v439 < v638)
                  goto LABEL_601;
LABEL_617:
                v484 = (char *)__s2;
                v485 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v439 - (_BYTE *)__s2);
                v486 = (v439 - (_BYTE *)__s2) >> 3;
                v487 = v486 + 1;
                if ((unint64_t)(v486 + 1) >> 61)
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                if ((v638 - (_BYTE *)__s2) >> 2 > v487)
                  v487 = (v638 - (_BYTE *)__s2) >> 2;
                if ((unint64_t)(v638 - (_BYTE *)__s2) >= 0x7FFFFFFFFFFFFFF8)
                  v488 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v488 = v487;
                if (v488)
                {
                  v633 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v439 - (_BYTE *)__s2);
                  v639 = (v439 - (_BYTE *)__s2) >> 3;
                  if (v488 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v489 = v449;
                  v490 = v436;
                  v491 = v439;
                  v492 = v438;
                  v493 = v440;
                  v494 = v488;
                  v495 = operator new(8 * v488);
                  v440 = v493;
                  v438 = v492;
                  v439 = v491;
                  v436 = v490;
                  v488 = v494;
                  v486 = v639;
                  v485 = v633;
                  v445 = &v495[8 * v639];
                  *v445 = v489;
                  v464 = (uint64_t)(v445 + 1);
                  if (v439 != v484)
                  {
LABEL_626:
                    v496 = v439 - 8 - v484;
                    if (v496 < 0x168
                      || (char *)v485 + (_QWORD)v495 - (v496 & 0xFFFFFFFFFFFFFFF8) - 8 > (char *)v485
                                                                                         + (_QWORD)v495
                                                                                         - 8
                      || &v439[-(v496 & 0xFFFFFFFFFFFFFFF8) - 8] > v439 - 8
                      || (unint64_t)(v439 - v495 - (_QWORD)v485) < 0x20)
                    {
                      v497 = v439;
                      v441 = v635;
                    }
                    else
                    {
                      v517 = (v496 >> 3) + 1;
                      v518 = 8 * (v517 & 0x3FFFFFFFFFFFFFFCLL);
                      v497 = &v439[-v518];
                      v445 = (_QWORD *)((char *)v445 - v518);
                      v519 = &v495[8 * v486 - 16];
                      v520 = (__int128 *)(v439 - 16);
                      v521 = v517 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v522 = *v520;
                        *(v519 - 1) = *(v520 - 1);
                        *v519 = v522;
                        v519 -= 2;
                        v520 -= 2;
                        v521 -= 4;
                      }
                      while (v521);
                      v441 = v635;
                      if (v517 == (v517 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_629:
                        __s2 = v445;
                        v638 = &v495[8 * v488];
                        v688 = (unint64_t)v638;
                        if (v484)
                          goto LABEL_630;
                        goto LABEL_631;
                      }
                    }
                    do
                    {
                      v498 = *((_QWORD *)v497 - 1);
                      v497 -= 8;
                      *--v445 = v498;
                    }
                    while (v497 != v484);
                    goto LABEL_629;
                  }
                }
                else
                {
                  v495 = 0;
                  v445 = (_QWORD *)(8 * v486);
                  *(_QWORD *)(8 * v486) = v449;
                  v464 = 8 * v486 + 8;
                  if (v439 != v484)
                    goto LABEL_626;
                }
                v441 = v635;
                __s2 = v445;
                v638 = &v495[8 * v488];
                v688 = (unint64_t)v638;
                if (v484)
                {
LABEL_630:
                  v499 = v484;
                  v500 = v440;
                  v501 = v438;
                  operator delete(v499);
                  v438 = v501;
                  v440 = v500;
                }
LABEL_631:
                v687 = v464;
                v439 = (char *)v464;
                goto LABEL_582;
              }
              v465 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v440 - v436);
              v466 = (v440 - v436) >> 2;
              v467 = v466 + 1;
              if ((unint64_t)(v466 + 1) >> 62)
LABEL_792:
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              if ((v649 - v436) >> 1 > v467)
                v467 = (v649 - v436) >> 1;
              if ((unint64_t)(v649 - v436) >= 0x7FFFFFFFFFFFFFFCLL)
                v468 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v468 = v467;
              if (v468)
              {
                v632 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v440 - v436);
                v650 = (v440 - v436) >> 2;
                if (v468 >> 62)
LABEL_791:
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v469 = v447;
                v470 = v449;
                v471 = v436;
                v472 = v439;
                v473 = v438;
                v474 = v440;
                v475 = v468;
                v476 = operator new(4 * v468);
                v440 = v474;
                v438 = v473;
                v439 = v472;
                v436 = v471;
                v449 = v470;
                v468 = v475;
                v447 = v469;
                v466 = v650;
                v465 = v632;
                v435 = &v476[4 * v650];
                *(_DWORD *)v435 = *(_DWORD *)(v446 + 4 * v469);
                v477 = (uint64_t)(v435 + 4);
                if (v440 != v436)
                {
LABEL_611:
                  v478 = v440 - 4 - v436;
                  if (v478 < 0xBC
                    || (char *)v465 + (_QWORD)v476 - (v478 & 0xFFFFFFFFFFFFFFFCLL) - 4 > (char *)v465 + (_QWORD)v476 - 4
                    || &v440[-(v478 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v440 - 4
                    || (unint64_t)(v440 - ((char *)v465 + (_QWORD)v476)) < 0x20)
                  {
                    v479 = v440;
                    v441 = v635;
                  }
                  else
                  {
                    v511 = (v478 >> 2) + 1;
                    v512 = 4 * (v511 & 0x7FFFFFFFFFFFFFF8);
                    v479 = &v440[-v512];
                    v435 -= v512;
                    v513 = &v476[4 * v466 - 16];
                    v514 = v440 - 16;
                    v515 = v511 & 0x7FFFFFFFFFFFFFF8;
                    v441 = v635;
                    do
                    {
                      v516 = *(_OWORD *)v514;
                      *(v513 - 1) = *((_OWORD *)v514 - 1);
                      *v513 = v516;
                      v513 -= 2;
                      v514 -= 32;
                      v515 -= 8;
                    }
                    while (v515);
                    if (v511 == (v511 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_614:
                      *(_QWORD *)&v689 = v435;
                      v649 = &v476[4 * v468];
                      v690 = v649;
                      if (v436)
                        goto LABEL_615;
                      goto LABEL_616;
                    }
                  }
                  do
                  {
                    v480 = *((_DWORD *)v479 - 1);
                    v479 -= 4;
                    *((_DWORD *)v435 - 1) = v480;
                    v435 -= 4;
                  }
                  while (v479 != v436);
                  goto LABEL_614;
                }
              }
              else
              {
                v476 = 0;
                v435 = (char *)(4 * v466);
                *(_DWORD *)(4 * v466) = *(_DWORD *)(v446 + 4 * v447);
                v477 = 4 * v466 + 4;
                if (v440 != v436)
                  goto LABEL_611;
              }
              v441 = v635;
              *(_QWORD *)&v689 = v435;
              v649 = &v476[4 * v468];
              v690 = v649;
              if (v436)
              {
LABEL_615:
                v481 = v436;
                v482 = v438;
                v483 = v439;
                operator delete(v481);
                v439 = v483;
                v438 = v482;
              }
LABEL_616:
              v436 = v435;
              v440 = (char *)v477;
              *((_QWORD *)&v689 + 1) = v477;
              if (v439 >= v638)
                goto LABEL_617;
LABEL_601:
              *(_QWORD *)v439 = v449;
              v464 = (uint64_t)(v439 + 8);
              goto LABEL_631;
            }
            if (v438 < v644)
            {
              *(_DWORD *)v438 = *(_DWORD *)(v446 + 4 * v447);
              v448 = (uint64_t *)((char *)v438 + 4);
            }
            else
            {
              v450 = (uint64_t *)v683;
              v451 = (absl::lts_2020_02_25::hash_internal::CityHashState *)((char *)v438 - (_BYTE *)v683);
              v452 = ((char *)v438 - (_BYTE *)v683) >> 2;
              v453 = v452 + 1;
              if ((unint64_t)(v452 + 1) >> 62)
                goto LABEL_792;
              if (((char *)v644 - (_BYTE *)v683) >> 1 > v453)
                v453 = ((char *)v644 - (_BYTE *)v683) >> 1;
              if ((unint64_t)((char *)v644 - (_BYTE *)v683) >= 0x7FFFFFFFFFFFFFFCLL)
                v454 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v454 = v453;
              if (v454)
              {
                v631 = (absl::lts_2020_02_25::hash_internal::CityHashState *)((char *)v438 - (_BYTE *)v683);
                v645 = ((char *)v438 - (_BYTE *)v683) >> 2;
                if (v454 >> 62)
                  goto LABEL_791;
                v455 = v436;
                v456 = v439;
                v457 = v438;
                v458 = v440;
                v459 = v454;
                v460 = operator new(4 * v454);
                v440 = v458;
                v438 = v457;
                v439 = v456;
                v436 = v455;
                v454 = v459;
                v452 = v645;
                v451 = v631;
                v444 = (uint64_t *)&v460[4 * v645];
                *(_DWORD *)v444 = *(_DWORD *)(v446 + 4 * v447);
                v448 = (uint64_t *)((char *)v444 + 4);
                if (v457 != v450)
                {
LABEL_594:
                  v461 = (char *)v438 - 4 - (char *)v450;
                  if (v461 < 0xBC
                    || (char *)v451 + (_QWORD)v460 - (v461 & 0xFFFFFFFFFFFFFFFCLL) - 4 > (char *)v451 + (_QWORD)v460 - 4
                    || (char *)v438 - (v461 & 0xFFFFFFFFFFFFFFFCLL) - 4 > (char *)v438 - 4
                    || (unint64_t)((char *)v438 - v460 - (_QWORD)v451) < 0x20)
                  {
                    v462 = v438;
                    v441 = v635;
                  }
                  else
                  {
                    v505 = (v461 >> 2) + 1;
                    v506 = 4 * (v505 & 0x7FFFFFFFFFFFFFF8);
                    v462 = (uint64_t *)((char *)v438 - v506);
                    v444 = (uint64_t *)((char *)v444 - v506);
                    v507 = &v460[4 * v452 - 16];
                    v508 = v438 - 2;
                    v509 = v505 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v510 = *(_OWORD *)v508;
                      *(v507 - 1) = *((_OWORD *)v508 - 1);
                      *v507 = v510;
                      v507 -= 2;
                      v508 -= 4;
                      v509 -= 8;
                    }
                    while (v509);
                    v441 = v635;
                    if (v505 == (v505 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_597:
                      v683 = v444;
                      v644 = (uint64_t *)&v460[4 * v454];
                      v685[0] = v644;
                      if (!v450)
                        goto LABEL_581;
LABEL_634:
                      v502 = v450;
                      v503 = v440;
                      v504 = v439;
                      operator delete(v502);
                      v439 = v504;
                      v440 = v503;
                      goto LABEL_581;
                    }
                  }
                  do
                  {
                    v463 = *((_DWORD *)v462 - 1);
                    v462 = (uint64_t *)((char *)v462 - 4);
                    *((_DWORD *)v444 - 1) = v463;
                    v444 = (uint64_t *)((char *)v444 - 4);
                  }
                  while (v462 != v450);
                  goto LABEL_597;
                }
              }
              else
              {
                v460 = 0;
                v444 = (uint64_t *)(4 * v452);
                *(_DWORD *)(4 * v452) = *(_DWORD *)(v446 + 4 * v447);
                v448 = (uint64_t *)(4 * v452 + 4);
                if (v438 != v450)
                  goto LABEL_594;
              }
              v441 = v635;
              v683 = v444;
              v644 = (uint64_t *)&v460[4 * v454];
              v685[0] = v644;
              if (v450)
                goto LABEL_634;
            }
LABEL_581:
            v684 = (char *)v448;
            v438 = v448;
LABEL_582:
            ++v447;
            v446 = *(_QWORD *)v695;
            v443 = v435;
            v437 = v435;
            if (v447 >= (uint64_t)(*(_QWORD *)&v695[8] - *(_QWORD *)v695) >> 2)
              goto LABEL_663;
          }
        }
        v443 = v436;
        v444 = v438;
        v445 = v439;
LABEL_663:
        LODWORD(v41) = v640;
        if (v437 == v440)
        {
          v437 = v440;
        }
        else
        {
          v440 = v437;
        }
        v356 = v610;
        v442 = v630;
      }
      ++v441;
      v436 = v443;
      v438 = v444;
      v439 = (char *)v445;
      if (v441 == v442)
        goto LABEL_668;
    }
  }
  v437 = 0;
LABEL_668:
  if ((_DWORD)v606 != v356)
    goto LABEL_747;
  memset(&v664, 0, sizeof(v664));
  v523 = v627;
  v524 = *(uint64_t ***)v627;
  if (*((_QWORD *)v627 + 1) == *(_QWORD *)v627)
    goto LABEL_747;
  v525 = 0;
  v526 = (v41 - 1);
  v527 = v608;
  v646 = v526;
  while (2)
  {
    v664.__r_.__value_.__l.__size_ = v664.__r_.__value_.__r.__words[0];
    if ((int)v41 >= 2)
    {
      v556 = 0;
      while (2)
      {
        if (*((_QWORD *)v656 + 6 * v556 + 2) == 1)
          goto LABEL_711;
        v524 = *(uint64_t ***)v523;
        v558 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v523 + 24 * v525) + 8 * v556);
        if (v558 == 0x8000000000000000)
          goto LABEL_711;
        v559 = 0;
        v659 = *(void **)(*(_QWORD *)(*(_QWORD *)v523 + 24 * v525) + 8 * v556);
        v560 = (uint64_t *)((char *)v668 + 48 * v556);
        v561 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v558)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v558));
        v562 = ((unint64_t)*v560 >> 12) ^ (v561 >> 7);
        v563 = v560[3];
        v564 = 0x101010101010101 * (v561 & 0x7F);
        while (1)
        {
          v565 = v562 & v563;
          v566 = *(_QWORD *)(*v560 + v565);
          v567 = ((v566 ^ v564) - 0x101010101010101) & ~(v566 ^ v564) & 0x8080808080808080;
          if (v567)
            break;
LABEL_718:
          if ((v566 & (~v566 << 6) & 0x8080808080808080) != 0)
            goto LABEL_706;
          v559 += 8;
          v562 = v559 + v565;
        }
        while (1)
        {
          v568 = (v565 + (__clz(__rbit64(v567)) >> 3)) & v563;
          if (*(_QWORD *)(v560[1] + 12 * v568) == v558)
            break;
          v567 &= v567 - 1;
          if (!v567)
            goto LABEL_718;
        }
        if (v568 == v563)
          goto LABEL_706;
        v569 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(v560, (uint64_t *)&v659) ^ 1;
        v41 = v664.__r_.__value_.__l.__size_;
        if (v664.__r_.__value_.__l.__size_ < v664.__r_.__value_.__r.__words[2])
        {
          *(_DWORD *)v664.__r_.__value_.__l.__size_ = v569;
          v557 = v41 + 4;
          v523 = v627;
          LODWORD(v41) = v640;
        }
        else
        {
          v570 = (void *)v664.__r_.__value_.__r.__words[0];
          v571 = v664.__r_.__value_.__l.__size_ - v664.__r_.__value_.__r.__words[0];
          v572 = (uint64_t)(v664.__r_.__value_.__l.__size_ - v664.__r_.__value_.__r.__words[0]) >> 2;
          v573 = v572 + 1;
          if ((unint64_t)(v572 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v574 = v664.__r_.__value_.__r.__words[2] - v664.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v664.__r_.__value_.__r.__words[2] - v664.__r_.__value_.__r.__words[0]) >> 1 > v573)
            v573 = v574 >> 1;
          if ((unint64_t)v574 >= 0x7FFFFFFFFFFFFFFCLL)
            v575 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v575 = v573;
          if (v575)
          {
            if (v575 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v576 = (char *)operator new(4 * v575);
            v577 = (int *)&v576[4 * v572];
            *v577 = v569;
            v557 = (std::string::size_type)(v577 + 1);
            if ((void *)v41 != v570)
            {
LABEL_731:
              v578 = v41 - 4 - (_QWORD)v570;
              if (v578 < 0x2C)
                goto LABEL_821;
              if (v41 - (unint64_t)&v576[v571] < 0x20)
                goto LABEL_821;
              v579 = (v578 >> 2) + 1;
              v580 = 4 * (v579 & 0x7FFFFFFFFFFFFFF8);
              v581 = v41 - v580;
              v577 = (int *)((char *)v577 - v580);
              v582 = &v576[4 * v572 - 16];
              v583 = (__int128 *)(v41 - 16);
              v584 = v579 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v585 = *v583;
                *((_OWORD *)v582 - 1) = *(v583 - 1);
                *(_OWORD *)v582 = v585;
                v582 -= 32;
                v583 -= 2;
                v584 -= 8;
              }
              while (v584);
              v41 = v581;
              if (v579 != (v579 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_821:
                do
                {
                  v586 = *(_DWORD *)(v41 - 4);
                  v41 -= 4;
                  *--v577 = v586;
                }
                while ((void *)v41 != v570);
              }
            }
          }
          else
          {
            v576 = 0;
            v577 = (int *)(4 * v572);
            *(_DWORD *)(4 * v572) = v569;
            v557 = 4 * v572 + 4;
            if ((void *)v41 != v570)
              goto LABEL_731;
          }
          v664.__r_.__value_.__r.__words[0] = (std::string::size_type)v577;
          v664.__r_.__value_.__l.__size_ = v557;
          v664.__r_.__value_.__r.__words[2] = (std::string::size_type)&v576[4 * v575];
          if (v570)
            operator delete(v570);
          v523 = v627;
          LODWORD(v41) = v640;
        }
        v526 = v646;
        v664.__r_.__value_.__l.__size_ = v557;
        v527 = v608;
LABEL_711:
        if (++v556 == v526)
        {
          v524 = *(uint64_t ***)v523;
          break;
        }
        continue;
      }
    }
    v532 = 0;
    v587 = (void *)v524[3 * v525][v527];
    v659 = v587;
    v588 = (uint64_t *)((char *)v668 + 48 * (int)v527);
    v589 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v587)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + (_QWORD)v587));
    v533 = (v589 >> 7) ^ ((unint64_t)*v588 >> 12);
    v590 = v588[3];
    v591 = 0x101010101010101 * (v589 & 0x7F);
    while (1)
    {
      v528 = v533 & v590;
      v529 = *(_QWORD *)(*v588 + v528);
      v530 = ((v529 ^ v591) - 0x101010101010101) & ~(v529 ^ v591) & 0x8080808080808080;
      if (v530)
        break;
LABEL_674:
      if ((v529 & (~v529 << 6) & 0x8080808080808080) != 0)
        goto LABEL_705;
      v532 += 8;
      v533 = v532 + v528;
    }
    while (1)
    {
      v531 = (v528 + (__clz(__rbit64(v530)) >> 3)) & v590;
      if (*(void **)(v588[1] + 12 * v531) == v587)
        break;
      v530 &= v530 - 1;
      if (!v530)
        goto LABEL_674;
    }
    if (v531 != v590)
    {
      v534 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(v588, (uint64_t *)&v659);
      v535 = v664.__r_.__value_.__l.__size_;
      if (v664.__r_.__value_.__l.__size_ < v664.__r_.__value_.__r.__words[2])
      {
        *(_DWORD *)v664.__r_.__value_.__l.__size_ = v534;
        v536 = v535 + 4;
        v523 = v627;
        LODWORD(v41) = v640;
        v527 = v608;
        goto LABEL_700;
      }
      v537 = (void *)v664.__r_.__value_.__r.__words[0];
      v538 = v664.__r_.__value_.__l.__size_ - v664.__r_.__value_.__r.__words[0];
      v539 = (uint64_t)(v664.__r_.__value_.__l.__size_ - v664.__r_.__value_.__r.__words[0]) >> 2;
      v540 = v539 + 1;
      if ((unint64_t)(v539 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v541 = v664.__r_.__value_.__r.__words[2] - v664.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v664.__r_.__value_.__r.__words[2] - v664.__r_.__value_.__r.__words[0]) >> 1 > v540)
        v540 = v541 >> 1;
      if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFFCLL)
        v542 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v542 = v540;
      if (v542)
      {
        if (v542 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v543 = (char *)operator new(4 * v542);
        v544 = &v543[4 * v539];
        *(_DWORD *)v544 = v534;
        v536 = (std::string::size_type)(v544 + 4);
        if ((void *)v535 != v537)
        {
LABEL_688:
          v545 = v535 - 4 - (_QWORD)v537;
          LODWORD(v41) = v640;
          if (v545 < 0x2C)
            goto LABEL_822;
          if (v535 - (unint64_t)&v543[v538] < 0x20)
            goto LABEL_822;
          v546 = (v545 >> 2) + 1;
          v547 = 4 * (v546 & 0x7FFFFFFFFFFFFFF8);
          v548 = v535 - v547;
          v544 -= v547;
          v549 = &v543[4 * v539 - 16];
          v550 = (__int128 *)(v535 - 16);
          v551 = v546 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v552 = *v550;
            *((_OWORD *)v549 - 1) = *(v550 - 1);
            *(_OWORD *)v549 = v552;
            v549 -= 32;
            v550 -= 2;
            v551 -= 8;
          }
          while (v551);
          v535 = v548;
          if (v546 != (v546 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_822:
            do
            {
              v553 = *(_DWORD *)(v535 - 4);
              v535 -= 4;
              *((_DWORD *)v544 - 1) = v553;
              v544 -= 4;
            }
            while ((void *)v535 != v537);
          }
          goto LABEL_697;
        }
      }
      else
      {
        v543 = 0;
        v544 = (char *)(4 * v539);
        *(_DWORD *)(4 * v539) = v534;
        v536 = 4 * v539 + 4;
        if ((void *)v535 != v537)
          goto LABEL_688;
      }
      LODWORD(v41) = v640;
LABEL_697:
      v664.__r_.__value_.__r.__words[0] = (std::string::size_type)v544;
      v664.__r_.__value_.__l.__size_ = v536;
      v664.__r_.__value_.__r.__words[2] = (std::string::size_type)&v543[4 * v542];
      if (v537)
        operator delete(v537);
      v523 = v627;
      v527 = v608;
LABEL_700:
      v526 = v646;
      v664.__r_.__value_.__l.__size_ = v536;
      v673 = &off_24F980568;
      v674[0] = (int *)v664.__r_.__value_.__l.__data_;
      v674[1] = (int *)((uint64_t)(v536 - v664.__r_.__value_.__r.__words[0]) >> 2);
      v675 = &v673;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v674, a4);
      v554 = v675;
      if (v675 == &v673)
      {
        v554 = &v673;
        v555 = 4;
LABEL_704:
        (*v554)[v555]();
      }
      else if (v675)
      {
        v555 = 5;
        goto LABEL_704;
      }
    }
LABEL_705:
    v524 = *(uint64_t ***)v523;
LABEL_706:
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v523 + 1) - (_QWORD)v524) >> 3) > ++v525)
      continue;
    break;
  }
  if (v664.__r_.__value_.__r.__words[0])
  {
    v664.__r_.__value_.__l.__size_ = v664.__r_.__value_.__r.__words[0];
    operator delete(v664.__r_.__value_.__l.__data_);
  }
LABEL_747:
  if (v683)
    operator delete(v683);
  if (__s2)
    operator delete(__s2);
  if (v437)
  {
    *((_QWORD *)&v689 + 1) = v437;
    operator delete(v437);
  }
  if (*(_QWORD *)v695)
  {
    *(_QWORD *)&v695[8] = *(_QWORD *)v695;
    operator delete(*(void **)v695);
  }
  v311 = v665;
LABEL_756:
  if (v311)
  {
    v666 = (uint64_t)v311;
    operator delete(v311);
  }
  v592 = (void **)v668;
  if (v668)
  {
    v593 = v669;
    v594 = v668;
    if (v669 != v668)
    {
      do
      {
        if (*(v593 - 3))
        {
          operator delete(*(v593 - 6));
          *(v593 - 1) = 0;
          *(v593 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v593 - 5) = 0;
          *(v593 - 4) = 0;
          *(v593 - 3) = 0;
        }
        v595 = *(v593 - 2);
        if (v595)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v595);
        v593 -= 6;
      }
      while (v593 != v592);
      v594 = v668;
    }
    v669 = v592;
    operator delete(v594);
  }
  v596 = (char *)v671;
  if (v671)
  {
    v597 = __p;
    v395 = v671;
    if (__p != v671)
    {
      v598 = (char *)__p;
      do
      {
        v600 = (void *)*((_QWORD *)v598 - 3);
        v598 -= 24;
        v599 = v600;
        if (v600)
        {
          *(v597 - 2) = v599;
          operator delete(v599);
        }
        v597 = v598;
      }
      while (v598 != v596);
      v395 = v671;
    }
    __p = v596;
LABEL_775:
    operator delete(v395);
  }
LABEL_776:
  v601 = (void **)v656;
  if (v656)
  {
    v602 = v657;
    v603 = v656;
    if (v657 != v656)
    {
      do
      {
        if (*(v602 - 3))
        {
          operator delete(*(v602 - 6));
          *(v602 - 1) = 0;
          *(v602 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v602 - 5) = 0;
          *(v602 - 4) = 0;
          *(v602 - 3) = 0;
        }
        v604 = *(v602 - 2);
        if (v604)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v604);
        v602 -= 6;
      }
      while (v602 != v601);
      v603 = v656;
    }
    v657 = v601;
    operator delete(v603);
  }
}

void sub_22DC17700()
{
  uint64_t v0;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_22DC17708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a68;

  std::vector<std::vector<int>>::~vector[abi:ne180100](&a68);
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a49);
  _Unwind_Resume(a1);
}

void sub_22DC17B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  void *v53;

  v51 = *(_QWORD **)(v49 - 216);
  if (v51 == (_QWORD *)(v49 - 240))
  {
    v52 = 4;
    v51 = (_QWORD *)(v49 - 240);
  }
  else
  {
    if (!v51)
      goto LABEL_6;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_6:
  v53 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v53;
    operator delete(v53);
  }
  std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::~vector[abi:ne180100]((void **)&STACK[0x2A0]);
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a49);
  _Unwind_Resume(a1);
}

void sub_22DC17B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  google::LogMessage::~LogMessage((google::LogMessage *)&a65);
  JUMPOUT(0x22DC17C54);
}

void sub_22DC17B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  void *a68;
  uint64_t v68;
  void *v70;
  void *v71;
  void *v72;
  void *v73;

  v70 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v70;
    operator delete(v70);
    v71 = (void *)STACK[0x2A0];
    if (STACK[0x2A0])
    {
      STACK[0x2A8] = (unint64_t)v71;
      operator delete(v71);
      v72 = *(void **)(v68 - 240);
      if (v72)
      {
        *(_QWORD *)(v68 - 232) = v72;
        operator delete(v72);
      }
      v73 = *(void **)(v68 - 160);
      if (v73)
      {
        *(_QWORD *)(v68 - 152) = v73;
        operator delete(v73);
      }
      if (a62)
      {
        a63 = (uint64_t)a62;
        operator delete(a62);
      }
      std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::~vector[abi:ne180100](&a65);
      std::vector<std::vector<int>>::~vector[abi:ne180100](&a68);
      std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a49);
      _Unwind_Resume(a1);
    }
    JUMPOUT(0x22DC17864);
  }
  JUMPOUT(0x22DC1785CLL);
}

void sub_22DC17BEC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    *(_QWORD *)(v0 + 8) = v2;
    operator delete(v2);
  }
  *(_QWORD *)(v1 - 232) = v0;
  JUMPOUT(0x22DC17C54);
}

void sub_22DC17C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a49);
  _Unwind_Resume(a1);
}

void sub_22DC17C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a49);
  _Unwind_Resume(a1);
}

void sub_22DC17C3C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 136))
    JUMPOUT(0x22DC17CD4);
  JUMPOUT(0x22DC17C6CLL);
}

void sub_22DC17C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  uint64_t v68;
  void *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  char *v75;
  void *v76;
  void *v77;

  v70 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v70;
    operator delete(v70);
    v71 = *(char **)(v68 - 240);
    if (!v71)
    {
LABEL_3:
      if (!*(_QWORD *)(v68 - 136))
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v71 = *(char **)(v68 - 240);
    if (!v71)
      goto LABEL_3;
  }
  v73 = *(char **)(v68 - 232);
  v74 = v71;
  if (v73 != v71)
  {
    v75 = *(char **)(v68 - 232);
    do
    {
      v77 = (void *)*((_QWORD *)v75 - 3);
      v75 -= 24;
      v76 = v77;
      if (v77)
      {
        *((_QWORD *)v73 - 2) = v76;
        operator delete(v76);
      }
      v73 = v75;
    }
    while (v75 != v71);
    v74 = *(char **)(v68 - 240);
  }
  *(_QWORD *)(v68 - 232) = v71;
  operator delete(v74);
  if (!*(_QWORD *)(v68 - 136))
  {
LABEL_4:
    v72 = *(_QWORD **)(v68 - 128);
    if (!v72)
      goto LABEL_15;
LABEL_16:
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v72);
LABEL_15:
    std::vector<std::vector<int>>::~vector[abi:ne180100](&a68);
    std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a49);
    _Unwind_Resume(a1);
  }
LABEL_14:
  operator delete(*(void **)(v68 - 160));
  *(_QWORD *)(v68 - 160) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_QWORD *)(v68 - 120) = 0;
  a25[1] = 0;
  a25[2] = 0;
  *a25 = 0;
  v72 = *(_QWORD **)(v68 - 128);
  if (!v72)
    goto LABEL_15;
  goto LABEL_16;
}

_QWORD *std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(48 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[48 * a2];
    a1[2] = v5;
    do
    {
      *(_QWORD *)v4 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + 24) = 0uLL;
      *((_QWORD *)v4 + 5) = 0;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_22DC17DE0(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;
  _QWORD *v6;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*(v4 - 3))
        {
          operator delete(*(v4 - 6));
          *(v4 - 1) = 0;
          *(v4 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v4 - 5) = 0;
          *(v4 - 4) = 0;
          *(v4 - 3) = 0;
        }
        v6 = *(v4 - 2);
        if (v6)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v6);
        v4 -= 6;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::`anonymous namespace'::GetEncoding(uint64_t a1, signed int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v6, a2, &v18);
  v7 = v18;
  v8 = v19;
  if (v18 != v19)
  {
    do
    {
      v14 = 0;
      v16 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v7)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v7));
      v15 = (v16 >> 7) ^ (*(_QWORD *)a1 >> 12);
      v17 = *(_QWORD *)(a1 + 24);
      while (1)
      {
        v9 = v15 & v17;
        v10 = *(_QWORD *)(*(_QWORD *)a1 + v9);
        v11 = ((v10 ^ (0x101010101010101 * (v16 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                            * (v16 & 0x7F))) & 0x8080808080808080;
        if (v11)
          break;
LABEL_7:
        if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
        {
          v13 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)a1, v16);
          v12 = *v5;
          *(_QWORD *)(*v5 + 12 * v13) = *(_QWORD *)v7;
          goto LABEL_10;
        }
        v14 += 8;
        v15 = v14 + v9;
      }
      v12 = *v5;
      while (1)
      {
        v13 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v17;
        if (*(_QWORD *)(v12 + 12 * v13) == *(_QWORD *)v7)
          break;
        v11 &= v11 - 1;
        if (!v11)
          goto LABEL_7;
      }
LABEL_10:
      *(_DWORD *)(v12 + 12 * v13 + 8) = *((_DWORD *)v7 + 2);
      v7 += 12;
    }
    while (v7 != v8);
    v7 = v18;
  }
  if (v7)
  {
    v19 = v7;
    operator delete(v7);
  }
}

void sub_22DC17FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~flat_hash_map(v1);
  _Unwind_Resume(a1);
}

void sub_22DC18008(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~flat_hash_map(v1);
  _Unwind_Resume(a1);
}

void sub_22DC1801C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~flat_hash_map(v11);
  _Unwind_Resume(a1);
}

void operations_research::sat::`anonymous namespace'::ProcessOneColumn(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (***v25)();
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t i;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  operations_research::sat::SatSolver *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  int64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t (***v49)();
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t *v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  unint64_t v95;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t (**v105)();
  int *v106[2];
  uint64_t (***v107)();
  uint64_t (**v108)();
  unint64_t v109;
  uint64_t (***v110)();
  uint64_t (**v111)();
  int *v112[2];
  uint64_t (***v113)();
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  v101 = (a1[1] - *a1) >> 2;
  v7 = *a2;
  v8 = a2[1];
  v104 = (v8 - *a2) >> 3;
  if (v101 == v104)
  {
    v101 = 0;
    v102 = 0;
    v103 = 0;
    if (v8 != v7)
      goto LABEL_3;
LABEL_38:
    v11 = 0;
    v36 = 0;
    goto LABEL_39;
  }
  v98 = (char *)google::MakeCheckOpString<unsigned long,unsigned long>((int)&v101, (int)&v104, "line_literals.size() == values.size()");
  if (v98)
  {
    google::LogMessageFatal::LogMessageFatal((unint64_t *)&v101, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 60, (uint64_t **)&v98);
    google::LogMessage::stream((google::LogMessage *)&v101);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v101);
  }
  v7 = *a2;
  v37 = a2[1];
  v101 = 0;
  v102 = 0;
  v103 = 0;
  if (v37 == v7)
    goto LABEL_38;
LABEL_3:
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    v14 = 0;
    v15 = *(uint64_t **)(v7 + 8 * v12);
    v98 = (char *)v15;
    v16 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v15)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + (_QWORD)v15));
    v17 = (v16 >> 7) ^ ((unint64_t)*a3 >> 12);
    v18 = a3[3];
    v19 = 0x101010101010101 * (v16 & 0x7F);
    while (1)
    {
      v20 = v17 & v18;
      v21 = *(_QWORD *)(*a3 + v20);
      v22 = ((v21 ^ v19) - 0x101010101010101) & ~(v21 ^ v19) & 0x8080808080808080;
      if (v22)
        break;
LABEL_11:
      if ((v21 & (~v21 << 6) & 0x8080808080808080) != 0)
      {
        v24 = *a1;
        goto LABEL_17;
      }
      v14 += 8;
      v17 = v14 + v20;
    }
    while (1)
    {
      v23 = (v20 + (__clz(__rbit64(v22)) >> 3)) & v18;
      if (*(uint64_t **)(a3[1] + 12 * v23) == v15)
        break;
      v22 &= v22 - 1;
      if (!v22)
        goto LABEL_11;
    }
    v24 = *a1;
    if (v23 == v18)
    {
LABEL_17:
      LODWORD(v104) = *(_DWORD *)(v24 + 4 * v12) ^ 1;
      v111 = &off_24F980568;
      v112[0] = (int *)&v104;
      v112[1] = (int *)1;
      v113 = &v111;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v112, a5);
      v25 = v113;
      if (v113 == &v111)
      {
        v25 = &v111;
        goto LABEL_4;
      }
    }
    else
    {
      if (v11 >= v10)
      {
        v26 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v9) >> 2) + 1;
        if (v26 > 0x1555555555555555)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v10 - v9) >> 2) > v26)
          v26 = 0x5555555555555556 * ((v10 - v9) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v27 = 0x1555555555555555;
        else
          v27 = v26;
        if (v27 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v28 = (char *)operator new(12 * v27);
        v29 = &v28[4 * ((v11 - v9) >> 2)];
        *(_QWORD *)v29 = v15;
        *((_DWORD *)v29 + 2) = *(_DWORD *)(v24 + 4 * v12);
        for (i = (unint64_t)v29; v11 != v9; *(_DWORD *)(i + 8) = v32)
        {
          v31 = *(_QWORD *)(v11 - 12);
          v11 -= 12;
          v32 = *((_DWORD *)v11 + 2);
          *(_QWORD *)(i - 12) = v31;
          i -= 12;
        }
        v10 = &v28[12 * v27];
        v11 = v29 + 12;
        v101 = i;
        v102 = v29 + 12;
        v103 = v10;
        if (v9)
        {
          operator delete(v9);
          v24 = *a1;
        }
        v9 = (char *)i;
      }
      else
      {
        *(_QWORD *)v11 = v15;
        *((_DWORD *)v11 + 2) = *(_DWORD *)(v24 + 4 * v12);
        v11 += 12;
      }
      v102 = v11;
      v33 = *(unsigned int *)(v24 + 4 * v12);
      v34 = v33 | ((unint64_t)*(unsigned int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(a3, (uint64_t *)&v98) << 32);
      v108 = &off_24F982CC0;
      v109 = v34;
      v110 = &v108;
      v35 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a5);
      operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v35, v109 ^ 1, SHIDWORD(v109));
      v25 = v110;
      if (v110 == &v108)
      {
        v25 = &v108;
LABEL_4:
        v13 = 4;
LABEL_5:
        (*v25)[v13]();
        goto LABEL_6;
      }
    }
    if (v25)
    {
      v13 = 5;
      goto LABEL_5;
    }
LABEL_6:
    ++v12;
    v7 = *a2;
  }
  while (v12 < (a2[1] - *a2) >> 3);
  v36 = v101;
LABEL_39:
  v38 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-v36] >> 2));
  if (v11 == (char *)v36)
    v39 = 0;
  else
    v39 = v38;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,false>(v36, (uint64_t *)v11, (uint64_t)&v98, v39, 1);
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v41 = *(const void **)a4;
  v40 = *(_QWORD *)(a4 + 8);
  v42 = v40 - *(_QWORD *)a4;
  if (v40 == *(_QWORD *)a4)
  {
    v43 = 0;
    v44 = (char *)v101;
    v45 = &v102[-v101];
    if (v102 == (char *)v101)
      goto LABEL_107;
LABEL_47:
    v46 = 0;
    v47 = 0;
    v48 = (uint64_t)v45 / 12;
    while (1)
    {
      v51 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2;
      v52 = (v99 - v98) >> 2;
      if (v51 <= v52)
      {
        if (v51 < v52)
          v99 = &v98[4 * v51];
      }
      else
      {
        std::vector<operations_research::sat::Literal>::__append((uint64_t)&v98, v51 - v52);
      }
      v104 = *(_QWORD *)&v44[12 * v46];
      v53 = (int)v47;
      if (v48 > (int)v47)
        break;
LABEL_82:
      v74 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(a3, &v104) ^ 1;
      v75 = (uint64_t *)v99;
      v95 = v47;
      if (v99 < v100)
      {
        *(_DWORD *)v99 = v74;
        v76 = (uint64_t)v75 + 4;
        goto LABEL_103;
      }
      v77 = (uint64_t *)v98;
      v78 = v99 - v98;
      v79 = (v99 - v98) >> 2;
      v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v81 = v100 - v98;
      if ((v100 - v98) >> 1 > v80)
        v80 = v81 >> 1;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
        v82 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v82 = v80;
      if (v82)
      {
        if (v82 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v83 = (char *)operator new(4 * v82);
        v84 = (uint64_t *)&v83[4 * v79];
        *(_DWORD *)v84 = v74;
        v76 = (uint64_t)v84 + 4;
        if (v75 == v77)
          goto LABEL_101;
LABEL_95:
        v85 = (char *)v75 - 4 - (char *)v77;
        if (v85 < 0x2C)
          goto LABEL_122;
        if ((unint64_t)((char *)v75 - &v83[v78]) < 0x20)
          goto LABEL_122;
        v86 = (v85 >> 2) + 1;
        v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
        v88 = (uint64_t *)((char *)v75 - v87);
        v84 = (uint64_t *)((char *)v84 - v87);
        v89 = &v83[4 * v79 - 16];
        v90 = v75 - 2;
        v91 = v86 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v92 = *(_OWORD *)v90;
          *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
          *(_OWORD *)v89 = v92;
          v89 -= 32;
          v90 -= 4;
          v91 -= 8;
        }
        while (v91);
        v75 = v88;
        if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_122:
          do
          {
            v93 = *((_DWORD *)v75 - 1);
            v75 = (uint64_t *)((char *)v75 - 4);
            *((_DWORD *)v84 - 1) = v93;
            v84 = (uint64_t *)((char *)v84 - 4);
          }
          while (v75 != v77);
        }
        goto LABEL_101;
      }
      v83 = 0;
      v84 = (uint64_t *)(4 * v79);
      *(_DWORD *)(4 * v79) = v74;
      v76 = 4 * v79 + 4;
      if (v75 != v77)
        goto LABEL_95;
LABEL_101:
      v98 = (char *)v84;
      v99 = (char *)v76;
      v100 = &v83[4 * v82];
      if (v77)
        operator delete(v77);
LABEL_103:
      v99 = (char *)v76;
      v105 = &off_24F980568;
      v106[0] = (int *)v98;
      v106[1] = (int *)((v76 - (uint64_t)v98) >> 2);
      v107 = &v105;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v106, a5);
      v49 = v107;
      v47 = v95;
      if (v107 == &v105)
      {
        v49 = &v105;
        v50 = 4;
      }
      else
      {
        if (!v107)
          goto LABEL_50;
        v50 = 5;
      }
      (*v49)[v50]();
LABEL_50:
      v46 = (int)v95;
      if (v48 <= (int)v95)
      {
        v43 = (uint64_t *)v98;
        goto LABEL_107;
      }
    }
    while (1)
    {
      if (*(_QWORD *)&v44[12 * v53] != v104)
      {
LABEL_81:
        v47 = v53;
        goto LABEL_82;
      }
      v55 = &v44[12 * v53 + 8];
      v56 = (uint64_t *)v99;
      if (v99 >= v100)
        break;
      *(_DWORD *)v99 = *(_DWORD *)v55;
      v54 = (uint64_t)v56 + 4;
LABEL_58:
      v99 = (char *)v54;
      if (++v53 == v48)
      {
        v53 = v48;
        goto LABEL_81;
      }
    }
    v57 = (uint64_t *)v98;
    v58 = v99 - v98;
    v59 = (v99 - v98) >> 2;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v61 = v100 - v98;
    if ((v100 - v98) >> 1 > v60)
      v60 = v61 >> 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
      v62 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    if (v62)
    {
      if (v62 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v63 = (char *)operator new(4 * v62);
      v64 = (uint64_t *)&v63[4 * v59];
      *(_DWORD *)v64 = *(_DWORD *)v55;
      v54 = (uint64_t)v64 + 4;
      if (v56 == v57)
        goto LABEL_78;
    }
    else
    {
      v63 = 0;
      v64 = (uint64_t *)(4 * v59);
      *(_DWORD *)(4 * v59) = *(_DWORD *)v55;
      v54 = 4 * v59 + 4;
      if (v56 == v57)
      {
LABEL_78:
        v98 = (char *)v64;
        v99 = (char *)v54;
        v100 = &v63[4 * v62];
        if (v57)
          operator delete(v57);
        goto LABEL_58;
      }
    }
    v65 = (char *)v56 - 4 - (char *)v57;
    if (v65 < 0x2C)
      goto LABEL_123;
    if ((unint64_t)((char *)v56 - &v63[v58]) < 0x20)
      goto LABEL_123;
    v66 = (v65 >> 2) + 1;
    v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
    v68 = (uint64_t *)((char *)v56 - v67);
    v64 = (uint64_t *)((char *)v64 - v67);
    v69 = &v63[4 * v59 - 16];
    v70 = v56 - 2;
    v71 = v66 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v72 = *(_OWORD *)v70;
      *((_OWORD *)v69 - 1) = *((_OWORD *)v70 - 1);
      *(_OWORD *)v69 = v72;
      v69 -= 32;
      v70 -= 4;
      v71 -= 8;
    }
    while (v71);
    v56 = v68;
    if (v66 != (v66 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_123:
      do
      {
        v73 = *((_DWORD *)v56 - 1);
        v56 = (uint64_t *)((char *)v56 - 4);
        *((_DWORD *)v64 - 1) = v73;
        v64 = (uint64_t *)((char *)v64 - 4);
      }
      while (v56 != v57);
    }
    goto LABEL_78;
  }
  if (v42 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v43 = (uint64_t *)operator new(v40 - *(_QWORD *)a4);
  v98 = (char *)v43;
  v99 = (char *)v43;
  v100 = (char *)v43 + 4 * (v42 >> 2);
  memcpy(v43, v41, v42);
  v99 = (char *)v43 + 4 * (v42 >> 2);
  v44 = (char *)v101;
  v45 = &v102[-v101];
  if (v102 != (char *)v101)
    goto LABEL_47;
LABEL_107:
  if (v43)
  {
    v99 = (char *)v43;
    operator delete(v43);
    v44 = (char *)v101;
  }
  if (v44)
    operator delete(v44);
}

void sub_22DC188CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DC188D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE v18[16];

  v2 = 0;
  v3 = *a2;
  v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  v5 = *a1;
  v6 = a1[1];
  v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  v8 = a1[3];
  v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    v10 = v7 & v8;
    v11 = *(_QWORD *)(v5 + v10);
    v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12)
      break;
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
      goto LABEL_9;
    v2 += 8;
    v7 = v2 + v10;
  }
  while (1)
  {
    v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    v14 = (_QWORD *)(v6 + 12 * v13);
    if (*v14 == v3)
      break;
    v12 &= v12 - 1;
    if (!v12)
      goto LABEL_5;
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v18, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    v16 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v18);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v18);
  }
  return v14 + 1;
}

void sub_22DC18B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void **std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _QWORD *v5;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 3))
        {
          operator delete(*(v3 - 6));
          *(v3 - 1) = 0;
          *(v3 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v3 - 5) = 0;
          *(v3 - 4) = 0;
          *(v3 - 3) = 0;
        }
        v5 = *(v3 - 2);
        if (v5)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
        v3 -= 6;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::AddNegatedTableConstraint(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  operations_research::sat::IntegerTrail *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  operations_research::Domain *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  operations_research::Domain *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  unint64_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t i;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t *v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t j;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  BOOL v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  BOOL v87;
  _QWORD *v88;
  int v89;
  int64_t v90;
  uint64_t v91;
  int AssociatedLiteral;
  int v93;
  char *v94;
  uint64_t k;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  char *v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  unint64_t v110;
  char *v111;
  int64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  _BYTE *v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  int v127;
  char *v128;
  int v129;
  int v130;
  char *v131;
  int64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _OWORD *v140;
  char *v141;
  uint64_t v142;
  __int128 v143;
  int v144;
  unint64_t v145;
  char *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  char *v151;
  uint64_t v152;
  __int128 v153;
  int *v154;
  uint64_t (***v155)();
  uint64_t v156;
  void **v157;
  void **v158;
  void *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  _QWORD *v169;
  uint64_t *v170;
  unint64_t *__p;
  uint64_t v172;
  void *v173;
  char *v174;
  char *v175;
  void *v176;
  void **v177;
  unint64_t *v178;
  unint64_t *v179;
  char *v180;
  _BYTE v181[12];
  uint64_t (**v182)();
  int *v183[2];
  uint64_t (***v184)();
  uint64_t (**v185)();
  int v186;
  uint64_t (***v187)();
  uint64_t (**v188)();
  int v189;
  uint64_t (***v190)();
  uint64_t v191;

  v191 = *MEMORY[0x24BDAC8D0];
  v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  v166 = a4;
  v170 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a4);
  if (a3[1] == *a3)
    return;
  v168 = a2;
  v172 = a1;
  if (a2 >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = 0;
      while (1)
      {
        v12 = (operations_research::Domain *)operations_research::sat::IntegerTrail::InitialVariableDomain((uint64_t)v8, *(_DWORD *)(a1 + 4 * v11));
        if (!operations_research::Domain::Contains(v12, *(_QWORD *)(*(_QWORD *)(*a3 + 24 * v9) + 8 * v11)))
          break;
        if (a2 == ++v11)
        {
          ++v10;
          v13 = a3[1];
          goto LABEL_5;
        }
      }
      v14 = a3[1];
      v15 = (_QWORD *)(*a3 + 24 * v9);
      if (v15 != (_QWORD *)(v14 - 24))
      {
        std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v15, *(char **)(v14 - 24), *(char **)(v14 - 16), (uint64_t)(*(_QWORD *)(v14 - 16) - *(_QWORD *)(v14 - 24)) >> 3);
        v14 = a3[1];
      }
      v13 = v14 - 24;
      v16 = *(void **)(v14 - 24);
      if (v16)
      {
        *(_QWORD *)(v14 - 16) = v16;
        operator delete(v16);
      }
      a3[1] = v13;
LABEL_5:
      v9 = v10;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v13 - *a3) >> 3) > v10);
    if (*a3 == v13)
      return;
    __p = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    while (1)
    {
      while (1)
      {
        v21 = (operations_research::Domain *)operations_research::sat::IntegerTrail::InitialVariableDomain((uint64_t)v8, *(_DWORD *)(v172 + 4 * v19));
        v22 = operations_research::Domain::Size(v21);
        v23 = v22;
        if ((unint64_t)v18 >= v17)
          break;
        *v18++ = v22;
        v20 = (uint64_t)v18;
        v179 = v18;
        if (++v19 == a2)
          goto LABEL_44;
      }
      v24 = v18 - __p;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v17 - (_QWORD)__p) >> 2 > v25)
        v25 = (uint64_t)(v17 - (_QWORD)__p) >> 2;
      if (v17 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        if (v26 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v27 = v26;
        v28 = operator new(8 * v26);
        v26 = v27;
        v29 = (unint64_t *)&v28[8 * v24];
        *v29 = v23;
        v20 = (uint64_t)(v29 + 1);
        v30 = __p;
        if (v18 == __p)
          goto LABEL_32;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t *)(8 * v24);
        *(_QWORD *)(8 * v24) = v23;
        v20 = 8 * v24 + 8;
        v30 = __p;
        if (v18 == __p)
          goto LABEL_32;
      }
      v31 = (char *)(v18 - 1) - (char *)v30;
      if (v31 < 0x168
        || &v28[(char *)v18 - (char *)__p - 8 - (v31 & 0xFFFFFFFFFFFFFFF8)] > &v28[(char *)v18 - (char *)__p - 8]
        || (unint64_t *)((char *)v18 - (v31 & 0xFFFFFFFFFFFFFFF8) - 8) > v18 - 1
        || (unint64_t)((char *)__p - v28) < 0x20)
      {
        v32 = v18;
        v30 = __p;
      }
      else
      {
        v35 = (v31 >> 3) + 1;
        v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        v32 = &v18[v36 / 0xFFFFFFFFFFFFFFF8];
        v29 = (unint64_t *)((char *)v29 - v36);
        v37 = &v28[8 * v24 - 16];
        v38 = v18 - 2;
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 4;
          v39 -= 4;
        }
        while (v39);
        v30 = __p;
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_32;
      }
      do
      {
        v33 = *--v32;
        *--v29 = v33;
      }
      while (v32 != v30);
LABEL_32:
      v178 = v29;
      v34 = &v28[8 * v26];
      v180 = v34;
      if (v30)
        operator delete(v30);
      __p = v29;
      v17 = (unint64_t)v34;
      v179 = (unint64_t *)v20;
      ++v19;
      v18 = (unint64_t *)v20;
      if (v19 == a2)
        goto LABEL_44;
    }
  }
  v20 = 0;
  __p = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
LABEL_44:
  operations_research::sat::CompressTuples((uint64_t)__p, (v20 - (uint64_t)__p) >> 3, 0x8000000000000000, (uint64_t)a3);
  std::vector<absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>>::vector(&v176, a2);
  if (a2 >= 1)
  {
    for (i = 0; i != v168; ++i)
    {
      operations_research::sat::IntegerEncoder::PartialDomainEncoding(v170, *(_DWORD *)(v172 + 4 * i), (char **)&v173);
      v43 = (char *)v173;
      v42 = v174;
      if (v173 == v174)
      {
        if (!v173)
          continue;
      }
      else
      {
        do
        {
          v49 = 0;
          v51 = *(_QWORD *)v43;
          v52 = *((_DWORD *)v43 + 2);
          v53 = (char *)v176 + 48 * i;
          v54 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v43)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + *(_QWORD *)v43));
          v50 = (v54 >> 7) ^ (*v53 >> 12);
          v55 = v53[3];
          while (1)
          {
            v44 = v50 & v55;
            v45 = *(_QWORD *)(*v53 + v44);
            v46 = ((v45 ^ (0x101010101010101 * (v54 & 0x7F))) - 0x101010101010101) & ~(v45 ^ (0x101010101010101
                                                                                                * (v54 & 0x7F))) & 0x8080808080808080;
            if (v46)
              break;
LABEL_54:
            if ((v45 & (~v45 << 6) & 0x8080808080808080) != 0)
            {
              v48 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)v176 + 6 * i, v54);
              v47 = v53[1];
              *(_QWORD *)(v47 + 16 * v48) = v51;
              goto LABEL_57;
            }
            v49 += 8;
            v50 = v49 + v44;
          }
          v47 = v53[1];
          while (1)
          {
            v48 = (v44 + (__clz(__rbit64(v46)) >> 3)) & v55;
            if (*(_QWORD *)(v47 + 16 * v48) == v51)
              break;
            v46 &= v46 - 1;
            if (!v46)
              goto LABEL_54;
          }
LABEL_57:
          *(_DWORD *)(v47 + 16 * v48 + 8) = v52;
          v43 += 12;
        }
        while (v43 != v42);
        v43 = (char *)v173;
        if (!v173)
          continue;
      }
      v174 = v43;
      operator delete(v43);
    }
  }
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v57 = (_QWORD *)*a3;
  v56 = (_QWORD *)a3[1];
  v58 = __p;
  if ((_QWORD *)*a3 == v56)
    goto LABEL_191;
  v59 = v168;
  v60 = v168;
  v169 = (_QWORD *)(v166 + 32);
  v163 = v56;
  do
  {
LABEL_63:
    v61 = (char *)v173;
    v174 = (char *)v173;
    if (v59 < 1)
    {
      v154 = (int *)v173;
      goto LABEL_181;
    }
    v62 = 0;
    v167 = v57;
    do
    {
      v63 = *(_QWORD *)(*v57 + 8 * v62);
      if (v63 != 0x8000000000000000)
      {
        v64 = 0;
        v65 = (uint64_t *)((char *)v176 + 48 * v62);
        v66 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v63)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v63));
        v67 = *v65;
        v68 = ((unint64_t)*v65 >> 12) ^ (v66 >> 7);
        v69 = v65[3];
        v70 = 0x101010101010101 * (v66 & 0x7F);
        for (j = v68; ; j = v64 + v72)
        {
          v72 = j & v69;
          v73 = *(_QWORD *)(v67 + (j & v69));
          v74 = ((v73 ^ v70) - 0x101010101010101) & ~(v73 ^ v70) & 0x8080808080808080;
          if (v74)
            break;
LABEL_73:
          if ((v73 & (~v73 << 6) & 0x8080808080808080) != 0)
            goto LABEL_76;
          v64 += 8;
        }
        v75 = v65[1];
        while (1)
        {
          v76 = (v72 + (__clz(__rbit64(v74)) >> 3)) & v69;
          if (*(_QWORD *)(v75 + 16 * v76) == v63)
            break;
          v74 &= v74 - 1;
          if (!v74)
            goto LABEL_73;
        }
        if (v76 != v69)
        {
          for (k = 0; ; v68 = k + v96)
          {
            v96 = v68 & v69;
            v97 = *(_QWORD *)(v67 + v96);
            v98 = ((v97 ^ v70) - 0x101010101010101) & ~(v97 ^ v70) & 0x8080808080808080;
            if (v98)
              break;
LABEL_103:
            if ((v97 & (~v97 << 6) & 0x8080808080808080) != 0)
              goto LABEL_199;
            k += 8;
          }
          while (1)
          {
            v99 = (v96 + (__clz(__rbit64(v98)) >> 3)) & v69;
            if (*(_QWORD *)(v75 + 16 * v99) == v63)
              break;
            v98 &= v98 - 1;
            if (!v98)
              goto LABEL_103;
          }
          if (v99 == v69)
          {
LABEL_199:
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v181, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
            v161 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v181);
            v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"Check failed: it != collection.end() ", 37);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)"Map key not found: ", 19);
            std::ostream::operator<<();
            google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v181);
          }
          v100 = *(_DWORD *)(v75 + 16 * v99 + 8) ^ 1;
          if (v61 < v175)
          {
            *(_DWORD *)v61 = v100;
            v101 = (uint64_t)(v61 + 4);
LABEL_168:
            v174 = (char *)v101;
            v61 = (char *)v101;
            v60 = v168;
            goto LABEL_66;
          }
          v111 = (char *)v173;
          v112 = v61 - (_BYTE *)v173;
          v113 = (v61 - (_BYTE *)v173) >> 2;
          v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 62)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v115 = v175 - (_BYTE *)v173;
          if ((v175 - (_BYTE *)v173) >> 1 > v114)
            v114 = v115 >> 1;
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
            v116 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v116 = v114;
          if (v116)
          {
            if (v116 >> 62)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v117 = v61;
            v118 = operator new(4 * v116);
            v61 = v117;
            v119 = (int *)&v118[4 * v113];
            *v119 = v100;
            v101 = (uint64_t)(v119 + 1);
            if (v61 == v111)
              goto LABEL_166;
          }
          else
          {
            v118 = 0;
            v119 = (int *)(4 * v113);
            *(_DWORD *)(4 * v113) = v100;
            v101 = 4 * v113 + 4;
            if (v61 == v111)
              goto LABEL_166;
          }
          v145 = v61 - 4 - v111;
          if (v145 >= 0xBC)
          {
            if (&v118[v112 - 4 - (v145 & 0xFFFFFFFFFFFFFFFCLL)] > &v118[v112 - 4])
            {
              v146 = v61;
            }
            else if (&v61[-(v145 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v61 - 4)
            {
              v146 = v61;
            }
            else if ((unint64_t)(v61 - v118 - v112) >= 0x20)
            {
              v148 = (v145 >> 2) + 1;
              v149 = 4 * (v148 & 0x7FFFFFFFFFFFFFF8);
              v146 = &v61[-v149];
              v119 = (int *)((char *)v119 - v149);
              v150 = &v118[4 * v113 - 16];
              v151 = v61 - 16;
              v152 = v148 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v153 = *(_OWORD *)v151;
                *(v150 - 1) = *((_OWORD *)v151 - 1);
                *v150 = v153;
                v150 -= 2;
                v151 -= 32;
                v152 -= 8;
              }
              while (v152);
              if (v148 == (v148 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_166;
            }
            else
            {
              v146 = v61;
            }
          }
          else
          {
            v146 = v61;
          }
          do
          {
            v147 = *((_DWORD *)v146 - 1);
            v146 -= 4;
            *--v119 = v147;
          }
          while (v146 != v111);
          goto LABEL_166;
        }
LABEL_76:
        v77 = *(_DWORD *)(v172 + 4 * v62);
        v188 = &off_24F982FF8;
        v189 = v77;
        v190 = &v188;
        v78 = v166 + 32;
        v79 = (_QWORD *)*v169;
        v80 = (_QWORD *)*v169;
        do
        {
          v81 = v80[4];
          v82 = v81 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v81 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
            v83 = v80;
          else
            v83 = v80 + 1;
          if (v82)
            v78 = (uint64_t)v80;
          v80 = (_QWORD *)*v83;
        }
        while (*v83);
        v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v78 + 40) + 40) + 12 * v77);
        v185 = &off_24F9830C0;
        v186 = v77;
        v187 = &v185;
        v85 = v166 + 32;
        do
        {
          v86 = v79[4];
          v87 = v86 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
          if (v86 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d)
            v88 = v79;
          else
            v88 = v79 + 1;
          if (v87)
            v85 = (uint64_t)v79;
          v79 = (_QWORD *)*v88;
        }
        while (*v88);
        if (v63 >= v84)
        {
          v89 = v77 ^ 1;
          v90 = -*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v85 + 40) + 40) + 12 * v89);
          if (v63 <= v90)
          {
            if (v63 > v84)
            {
              v91 = 1 - v63;
              if (v63 < (uint64_t)0x8000000000000003)
                v91 = 0x7FFFFFFFFFFFFFFFLL;
              *(_DWORD *)v181 = v89;
              *(_QWORD *)&v181[4] = v91;
              v165 = v165 & 0xFFFFFFFF00000000 | HIDWORD(v91);
              AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral((unsigned int *)v170, *(const char **)v181, SHIDWORD(v91));
              v93 = AssociatedLiteral;
              v94 = v174;
              if (v174 < v175)
              {
                *(_DWORD *)v174 = AssociatedLiteral;
                v61 = v94 + 4;
                v60 = v168;
                goto LABEL_138;
              }
              v102 = (char *)v173;
              v103 = v174 - (_BYTE *)v173;
              v104 = (v174 - (_BYTE *)v173) >> 2;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 62)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v106 = v175 - (_BYTE *)v173;
              if ((v175 - (_BYTE *)v173) >> 1 > v105)
                v105 = v106 >> 1;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                v107 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                if (v107 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v108 = (char *)operator new(4 * v107);
                v109 = &v108[4 * v104];
                *(_DWORD *)v109 = v93;
                v61 = v109 + 4;
                if (v94 != v102)
                {
LABEL_117:
                  v110 = v94 - 4 - v102;
                  v60 = v168;
                  if (v110 < 0x2C)
                    goto LABEL_214;
                  if ((unint64_t)(v94 - &v108[v103]) < 0x20)
                    goto LABEL_214;
                  v120 = (v110 >> 2) + 1;
                  v121 = 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
                  v122 = &v94[-v121];
                  v109 -= v121;
                  v123 = &v108[4 * v104 - 16];
                  v124 = v94 - 16;
                  v125 = v120 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v126 = *(_OWORD *)v124;
                    *((_OWORD *)v123 - 1) = *((_OWORD *)v124 - 1);
                    *(_OWORD *)v123 = v126;
                    v123 -= 32;
                    v124 -= 32;
                    v125 -= 8;
                  }
                  while (v125);
                  v94 = v122;
                  if (v120 != (v120 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_214:
                    do
                    {
                      v127 = *((_DWORD *)v94 - 1);
                      v94 -= 4;
                      *((_DWORD *)v109 - 1) = v127;
                      v109 -= 4;
                    }
                    while (v94 != v102);
                  }
                  goto LABEL_136;
                }
              }
              else
              {
                v108 = 0;
                v109 = (char *)(4 * v104);
                *(_DWORD *)(4 * v104) = v93;
                v61 = (char *)(4 * v104 + 4);
                if (v94 != v102)
                  goto LABEL_117;
              }
              v60 = v168;
LABEL_136:
              v173 = v109;
              v174 = v61;
              v175 = &v108[4 * v107];
              if (v102)
              {
                v128 = v61;
                operator delete(v102);
                v61 = v128;
              }
LABEL_138:
              v174 = v61;
              v58 = __p;
            }
            if (v63 >= v90)
            {
              v57 = v167;
              goto LABEL_66;
            }
            *(_DWORD *)v181 = *(_DWORD *)(v172 + 4 * v62);
            *(_QWORD *)&v181[4] = v63 + 1;
            v129 = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral((unsigned int *)v170, *(const char **)v181, (unint64_t)(v63 + 1) >> 32);
            v57 = v167;
            v130 = v129;
            v131 = v174;
            v164 = v164 & 0xFFFFFFFF00000000 | ((unint64_t)(v63 + 1) >> 32);
            if (v174 < v175)
            {
              *(_DWORD *)v174 = v129;
              v101 = (uint64_t)(v131 + 4);
              v58 = __p;
              goto LABEL_168;
            }
            v111 = (char *)v173;
            v132 = v174 - (_BYTE *)v173;
            v133 = (v174 - (_BYTE *)v173) >> 2;
            v134 = v133 + 1;
            if ((unint64_t)(v133 + 1) >> 62)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v135 = v175 - (_BYTE *)v173;
            if ((v175 - (_BYTE *)v173) >> 1 > v134)
              v134 = v135 >> 1;
            if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
              v116 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v116 = v134;
            if (v116)
            {
              if (v116 >> 62)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v118 = operator new(4 * v116);
              v119 = (int *)&v118[4 * v133];
              *v119 = v130;
              v101 = (uint64_t)(v119 + 1);
              if (v131 != v111)
                goto LABEL_151;
            }
            else
            {
              v118 = 0;
              v119 = (int *)(4 * v133);
              *(_DWORD *)(4 * v133) = v130;
              v101 = 4 * v133 + 4;
              if (v131 != v111)
              {
LABEL_151:
                v136 = v131 - 4 - v111;
                v58 = __p;
                if (v136 < 0x2C)
                  goto LABEL_215;
                if ((unint64_t)(v131 - &v118[v132]) < 0x20)
                  goto LABEL_215;
                v137 = (v136 >> 2) + 1;
                v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
                v139 = &v131[-v138];
                v119 = (int *)((char *)v119 - v138);
                v140 = &v118[4 * v133 - 16];
                v141 = v131 - 16;
                v142 = v137 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v143 = *(_OWORD *)v141;
                  *(v140 - 1) = *((_OWORD *)v141 - 1);
                  *v140 = v143;
                  v140 -= 2;
                  v141 -= 32;
                  v142 -= 8;
                }
                while (v142);
                v131 = v139;
                if (v137 != (v137 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_215:
                  do
                  {
                    v144 = *((_DWORD *)v131 - 1);
                    v131 -= 4;
                    *--v119 = v144;
                  }
                  while (v131 != v111);
                }
                goto LABEL_166;
              }
            }
            v58 = __p;
LABEL_166:
            v173 = v119;
            v174 = (char *)v101;
            v175 = &v118[4 * v116];
            if (v111)
              operator delete(v111);
            goto LABEL_168;
          }
        }
        v59 = v168;
        v56 = v163;
        v57 = v167 + 3;
        if (v167 + 3 == v163)
          goto LABEL_189;
        goto LABEL_63;
      }
LABEL_66:
      ++v62;
    }
    while (v62 != v60);
    v154 = (int *)v173;
    v56 = v163;
LABEL_181:
    v182 = &off_24F980568;
    v183[0] = v154;
    v183[1] = (int *)((v61 - (char *)v154) >> 2);
    v184 = &v182;
    operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v183, v166);
    v155 = v184;
    if (v184 == &v182)
    {
      v155 = &v182;
      v156 = 4;
LABEL_185:
      (*v155)[v156]();
    }
    else if (v184)
    {
      v156 = 5;
      goto LABEL_185;
    }
    v57 += 3;
    v59 = v168;
  }
  while (v57 != v56);
LABEL_189:
  if (v173)
  {
    v174 = (char *)v173;
    operator delete(v173);
  }
LABEL_191:
  v157 = (void **)v176;
  if (v176)
  {
    v158 = v177;
    v159 = v176;
    if (v177 != v176)
    {
      do
      {
        if (*(v158 - 3))
        {
          operator delete(*(v158 - 6));
          *(v158 - 1) = 0;
          *(v158 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v158 - 5) = 0;
          *(v158 - 4) = 0;
          *(v158 - 3) = 0;
        }
        v160 = *(v158 - 2);
        if (v160)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v160);
        v158 -= 6;
      }
      while (v158 != v157);
      v159 = v176;
    }
    v177 = v157;
    operator delete(v159);
  }
  if (v58)
  {
    v179 = v58;
    operator delete(v58);
  }
}

void sub_22DC19994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(48 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[48 * a2];
    a1[2] = v5;
    do
    {
      *(_QWORD *)v4 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + 24) = 0uLL;
      *((_QWORD *)v4 + 5) = 0;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_22DC19BA0(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;
  _QWORD *v6;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*(v4 - 3))
        {
          operator delete(*(v4 - 6));
          *(v4 - 1) = 0;
          *(v4 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v4 - 5) = 0;
          *(v4 - 4) = 0;
          *(v4 - 3) = 0;
        }
        v6 = *(v4 - 2);
        if (v6)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v6);
        v4 -= 6;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::TransitionConstraint(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  const void *v14;
  int64_t v15;
  char *v16;
  _QWORD *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  _BYTE *v31;
  char *v32;
  void *__p;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;

  v31 = 0;
  v32 = 0;
  v10 = *(const void **)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = v9 - *(_QWORD *)a1;
  if (v9 != *(_QWORD *)a1)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - *(_QWORD *)a1);
    v13 = &v12[4 * (v11 >> 2)];
    v31 = v12;
    memcpy(v12, v10, v11);
    v32 = v13;
  }
  std::vector<std::vector<long long>>::vector(&__p, a2);
  v35 = a3;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v14 = *(const void **)a4;
  v15 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v15)
  {
    if (v15 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v36 = (char *)operator new(v15);
    v37 = v36;
    v16 = &v36[8 * (v15 >> 3)];
    v38 = v16;
    memcpy(v36, v14, v15);
    v37 = v16;
  }
  *(_QWORD *)(a5 + 24) = 0;
  v17 = operator new(0x58uLL);
  v17[1] = 0;
  *v17 = &off_24F987AA0;
  v17[2] = 0;
  v17[3] = 0;
  v18 = v32 - v31;
  if (v32 != v31)
  {
    if (v18 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(v32 - v31);
    v17[1] = v19;
    v20 = &v19[4 * (v18 >> 2)];
    v17[3] = v20;
    memcpy(v19, v31, v18);
    v17[2] = v20;
  }
  std::vector<std::vector<long long>>::vector(v17 + 4, (uint64_t *)&__p);
  v17[8] = 0;
  v21 = v36;
  v17[7] = v35;
  v17[9] = 0;
  v17[10] = 0;
  v22 = v37 - v21;
  if (v37 != v21)
  {
    if (v22 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v23 = (char *)operator new(v37 - v21);
    v17[8] = v23;
    v17[9] = v23;
    v24 = &v23[8 * (v22 >> 3)];
    v17[10] = v24;
    memcpy(v23, v21, v22);
    v17[9] = v24;
  }
  *(_QWORD *)(a5 + 24) = v17;
  if (v21)
  {
    v37 = v21;
    operator delete(v21);
  }
  v25 = (char *)__p;
  if (__p)
  {
    v26 = v34;
    v27 = __p;
    if (v34 != __p)
    {
      v28 = v34;
      do
      {
        v30 = (void *)*((_QWORD *)v28 - 3);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *((_QWORD *)v26 - 2) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = __p;
    }
    v34 = v25;
    operator delete(v27);
  }
  if (v31)
    operator delete(v31);
}

void sub_22DC19E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;
  void **v20;
  void *v22;

  v22 = *v20;
  if (*v20)
  {
    v19[2] = v22;
    operator delete(v22);
  }
  operator delete(v19);
  operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0::~$_0((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_22DC19ED0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void **v17;

  if (__p)
    operator delete(__p);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v17);
  JUMPOUT(0x22DC19EF4);
}

uint64_t operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0::~$_0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 32);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v5);
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t (***operations_research::sat::`anonymous namespace'::AddSizeTwoTable(absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,std::vector<std::vector<long long>> const&,std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>> const&,operations_research::sat::Model *)::$_0::operator()(uint64_t (***result)(), unsigned int a2, char **a3, int a4))()
{
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  unint64_t v12;
  operations_research::sat::SatSolver *v13;
  uint64_t v14;
  uint64_t (**v15)();
  int v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  int *v27;
  uint64_t (*v28)();
  int64_t v29;
  _DWORD **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  _OWORD *v35;
  int *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  uint64_t (**v41)();
  int *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t (**v46)();
  int *v47[2];
  uint64_t (***v48)();
  uint64_t (**v49)();
  unint64_t v50;
  uint64_t (***v51)();
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v7 = a3[1];
  v8 = *a3;
  v9 = v7 - *a3;
  if (v9 >> 2 == a4)
    return result;
  v10 = result;
  if (v9 == 4)
  {
    v11 = (uint64_t)*result;
    v12 = a2 | ((unint64_t)*(unsigned int *)v8 << 32);
    v49 = &off_24F982CC0;
    v50 = v12;
    v51 = &v49;
    v13 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v11);
    operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v13, v50 ^ 1, SHIDWORD(v50));
    result = v51;
    if (v51 == &v49)
    {
      v14 = 4;
      result = &v49;
    }
    else
    {
      if (!v51)
      {
LABEL_20:
        v30 = (_DWORD **)(v10 + 3);
LABEL_40:
        ++**v30;
        return result;
      }
      v14 = 5;
    }
    result = (uint64_t (***)())(*result)[v14]();
    goto LABEL_20;
  }
  std::vector<operations_research::sat::Literal>::__assign_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>,std::__wrap_iter<operations_research::sat::Literal*>>(result[4], v8, v7, v9 >> 2);
  v15 = v10[4];
  v16 = a2 ^ 1;
  v18 = (int *)v15[1];
  v17 = (unint64_t)v15[2];
  if ((unint64_t)v18 < v17)
  {
    *v18 = v16;
    v19 = (uint64_t)(v18 + 1);
    goto LABEL_30;
  }
  v20 = (int *)*v15;
  v21 = (char *)v18 - (char *)*v15;
  v22 = v21 >> 2;
  v23 = (v21 >> 2) + 1;
  if (v23 >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v24 = v17 - (_QWORD)v20;
  if (v24 >> 1 > v23)
    v23 = v24 >> 1;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
    v25 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v26 = operator new(4 * v25);
    v27 = (int *)&v26[4 * v22];
    v28 = (uint64_t (*)())&v26[4 * v25];
    *v27 = v16;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)v18 - (char *)v20;
    if (v18 == v20)
      goto LABEL_28;
    goto LABEL_22;
  }
  v26 = 0;
  v27 = (int *)(4 * v22);
  v28 = 0;
  *(_DWORD *)(4 * v22) = v16;
  v19 = 4 * v22 + 4;
  v29 = (char *)v18 - (char *)v20;
  if (v18 != v20)
  {
LABEL_22:
    v31 = v29 - 4;
    if (v31 < 0x2C)
      goto LABEL_46;
    if ((unint64_t)((char *)v18 - &v26[v21]) < 0x20)
      goto LABEL_46;
    v32 = (v31 >> 2) + 1;
    v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    v34 = &v18[v33 / 0xFFFFFFFFFFFFFFFCLL];
    v27 = (int *)((char *)v27 - v33);
    v35 = &v26[4 * v22 - 16];
    v36 = v18 - 4;
    v37 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 8;
      v37 -= 8;
    }
    while (v37);
    v18 = v34;
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_46:
      do
      {
        v39 = *--v18;
        *--v27 = v39;
      }
      while (v18 != v20);
    }
  }
LABEL_28:
  *v15 = (uint64_t (*)())v27;
  v15[1] = (uint64_t (*)())v19;
  v15[2] = v28;
  if (v20)
    operator delete(v20);
LABEL_30:
  v15[1] = (uint64_t (*)())v19;
  v40 = (uint64_t)*v10;
  v41 = v10[4];
  v42 = (int *)*v41;
  v43 = ((char *)v41[1] - (char *)*v41) >> 2;
  v46 = &off_24F980568;
  v47[0] = v42;
  v47[1] = (int *)v43;
  v48 = &v46;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v47, v40);
  result = v48;
  if (v48 == &v46)
  {
    v44 = 4;
    result = &v46;
  }
  else
  {
    if (!v48)
      goto LABEL_35;
    v44 = 5;
  }
  result = (uint64_t (***)())(*result)[v44]();
LABEL_35:
  ++*(_DWORD *)v10[1];
  if (a4 >= 0)
    v45 = a4;
  else
    v45 = a4 + 1;
  if ((uint64_t)v45 >> 1 < (unint64_t)((a3[1] - *a3) >> 2))
  {
    v30 = (_DWORD **)(v10 + 2);
    goto LABEL_40;
  }
  return result;
}

void sub_22DC1A288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::const_iterator,0>(_QWORD *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a4)
  {
    v7 = a2;
    v8 = 0;
    v9 = a2;
    do
    {
      v10 = v8;
      v11 = *((char *)v9 + 1);
      v9 = (_QWORD *)((char *)v9 + 1);
      if (v11 <= -2)
      {
        do
          v9 = (_QWORD *)((char *)v9 + ((__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3));
        while (*(char *)v9 < -1);
      }
      ++v8;
    }
    while (v9 != a4);
    if (v10 >= 0x1FFFFFFFFFFFFFFFLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = operator new(8 * v8);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v8];
    do
    {
      v13 = *a3++;
      *v12 = v13;
      LODWORD(v13) = *((char *)v7 + 1);
      v7 = (_QWORD *)((char *)v7 + 1);
      if ((int)v13 <= -2)
      {
        do
        {
          v14 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v7 = (_QWORD *)((char *)v7 + v14);
          a3 += v14;
        }
        while (*(char *)v7 < -1);
      }
      ++v12;
    }
    while (v7 != a4);
    a1[1] = v12;
  }
  return a1;
}

void sub_22DC1A41C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~raw_hash_set(uint64_t a1)
{
  _QWORD *v2;

  if (*(_QWORD *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD **)(a1 + 32);
  if (v2)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t i;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t j;
  uint64_t *v62;

  v8 = result;
LABEL_2:
  v62 = (uint64_t *)((char *)a2 - 12);
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(uint64_t *)((char *)a2 - 12);
        v23 = *(_QWORD *)v8;
        if (v22 < *(_QWORD *)v8)
        {
          v24 = *(_DWORD *)(v8 + 8);
          v25 = *((_DWORD *)a2 - 1);
LABEL_25:
          *(_QWORD *)v8 = v22;
          *(uint64_t *)((char *)a2 - 12) = v23;
          *(_DWORD *)(v8 + 8) = v25;
          *((_DWORD *)a2 - 1) = v24;
          return result;
        }
        if (v23 >= v22)
        {
          v25 = *((_DWORD *)a2 - 1);
          v24 = *(_DWORD *)(v8 + 8);
          if (v25 < v24)
            goto LABEL_25;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v8, (uint64_t *)(v8 + 12), v62);
      case 4uLL:
        result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v8, (uint64_t *)(v8 + 12), (uint64_t *)(v8 + 24));
        v26 = *(uint64_t *)((char *)a2 - 12);
        v27 = *(_QWORD *)(v8 + 24);
        if (v26 >= v27)
        {
          if (v27 < v26)
            return result;
          v29 = *((_DWORD *)a2 - 1);
          v28 = *(_DWORD *)(v8 + 32);
          if (v29 >= v28)
            return result;
        }
        else
        {
          v28 = *(_DWORD *)(v8 + 32);
          v29 = *((_DWORD *)a2 - 1);
        }
        *(_QWORD *)(v8 + 24) = v26;
        *(uint64_t *)((char *)a2 - 12) = v27;
        *(_DWORD *)(v8 + 32) = v29;
        *((_DWORD *)a2 - 1) = v28;
        v30 = *(_QWORD *)(v8 + 24);
        v31 = *(_QWORD *)(v8 + 12);
        if (v30 >= v31)
        {
          if (v31 < v30)
            return result;
          v33 = *(_DWORD *)(v8 + 32);
          v32 = *(_DWORD *)(v8 + 20);
          if (v33 >= v32)
            return result;
        }
        else
        {
          v32 = *(_DWORD *)(v8 + 20);
          v33 = *(_DWORD *)(v8 + 32);
        }
        *(_QWORD *)(v8 + 12) = v30;
        *(_QWORD *)(v8 + 24) = v31;
        *(_DWORD *)(v8 + 20) = v33;
        *(_DWORD *)(v8 + 32) = v32;
        v34 = *(_QWORD *)v8;
        if (v30 < *(_QWORD *)v8)
        {
          v35 = *(_DWORD *)(v8 + 8);
LABEL_90:
          *(_QWORD *)v8 = v30;
          *(_QWORD *)(v8 + 12) = v34;
          *(_DWORD *)(v8 + 8) = v33;
          *(_DWORD *)(v8 + 20) = v35;
          return result;
        }
        if (v34 >= v30)
        {
          v35 = *(_DWORD *)(v8 + 8);
          if (v33 < v35)
            goto LABEL_90;
        }
        return result;
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v8, v8 + 12, v8 + 24, v8 + 36, v62);
      default:
        if (v12 > 287)
        {
          if (v10 == 1)
          {
            if ((uint64_t *)v8 != a2)
            {
              v51 = (v13 - 2) >> 1;
              v52 = v51 + 1;
              v53 = (uint64_t *)(v8 + 12 * v51);
              do
              {
                std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(v8, a3, v13, v53);
                v53 = (uint64_t *)((char *)v53 - 12);
                --v52;
              }
              while (v52);
              v54 = v12 / 0xCuLL;
              do
              {
                result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>((uint64_t *)v8, (uint64_t)a2, a3, v54);
                a2 = (uint64_t *)((char *)a2 - 12);
              }
              while (v54-- > 2);
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v8 + 12 * (v13 >> 1));
          if ((unint64_t)v12 < 0x601)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v15, (uint64_t *)v8, v62);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v8, v15, v62);
            v16 = v8 + 12 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v8 + 12), (uint64_t *)(v16 - 12), a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v8 + 24), (uint64_t *)(v8 + 12 + 12 * v14), (uint64_t *)((char *)a2 - 36));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v16 - 12), v15, (uint64_t *)(v8 + 12 + 12 * v14));
            v17 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *v15;
            *v15 = v17;
            LODWORD(v17) = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v16 + 8);
            *(_DWORD *)(v16 + 8) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v18 = *(_QWORD *)(v8 - 12);
          if (v18 >= *(_QWORD *)v8 && (*(_QWORD *)v8 < v18 || *(_DWORD *)(v8 - 4) >= *(_DWORD *)(v8 + 8)))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,std::__less<void,void> &>((uint64_t *)v8, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,std::__less<void,void> &>((uint64_t *)v8, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_17;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(v8, v19);
          v9 = v19 + 12;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(v19 + 12, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,false>(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 12;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (uint64_t *)v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        v36 = (uint64_t *)(v8 + 12);
        v38 = (uint64_t *)v8 == a2 || v36 == a2;
        if ((a5 & 1) != 0)
        {
          if (v38)
            return result;
          v39 = 0;
          v40 = v8;
LABEL_46:
          v42 = v40;
          v40 = (uint64_t)v36;
          v43 = *(_QWORD *)(v42 + 12);
          v44 = *(_QWORD *)v42;
          if (v43 >= *(_QWORD *)v42)
          {
            if (v44 < v43)
              goto LABEL_45;
            v45 = *(_DWORD *)(v42 + 20);
            v46 = *(_DWORD *)(v42 + 8);
            if (v45 >= v46)
              goto LABEL_45;
          }
          else
          {
            v45 = *(_DWORD *)(v42 + 20);
            v46 = *(_DWORD *)(v42 + 8);
          }
          *(_QWORD *)(v42 + 12) = v44;
          *(_DWORD *)(v40 + 8) = v46;
          v41 = v8;
          if (v42 == v8)
            goto LABEL_44;
          v47 = v39;
          while (1)
          {
            v50 = *(_QWORD *)(v8 + v47 - 12);
            if (v43 < v50)
            {
              v48 = *(_DWORD *)(v8 + v47 - 4);
            }
            else
            {
              if (v50 < v43)
              {
                v41 = v8 + v47;
LABEL_44:
                *(_QWORD *)v41 = v43;
                *(_DWORD *)(v41 + 8) = v45;
LABEL_45:
                v36 = (uint64_t *)(v40 + 12);
                v39 += 12;
                if ((uint64_t *)(v40 + 12) == a2)
                  return result;
                goto LABEL_46;
              }
              v48 = *(_DWORD *)(v8 + v47 - 4);
              if (v45 >= v48)
              {
                v41 = v42;
                goto LABEL_44;
              }
            }
            v42 -= 12;
            v49 = v8 + v47;
            *(_QWORD *)v49 = v50;
            *(_DWORD *)(v49 + 8) = v48;
            v47 -= 12;
            if (!v47)
            {
              v41 = v8;
              goto LABEL_44;
            }
          }
        }
        if (!v38)
        {
          for (i = v8 + 8; ; i += 12)
          {
            v57 = v8;
            v8 = (uint64_t)v36;
            v58 = *(_QWORD *)(v57 + 12);
            v59 = *(_QWORD *)v57;
            if (v58 < *(_QWORD *)v57)
              break;
            if (v59 >= v58)
            {
              v60 = *(_DWORD *)(v57 + 20);
              if (v60 < *(_DWORD *)(v57 + 8))
                goto LABEL_79;
            }
LABEL_74:
            v36 = (uint64_t *)(v8 + 12);
            if ((uint64_t *)(v8 + 12) == a2)
              return result;
          }
          v60 = *(_DWORD *)(v57 + 20);
LABEL_79:
          for (j = i; ; j -= 12)
          {
            *(_QWORD *)(j + 4) = v59;
            *(_DWORD *)(j + 12) = *(_DWORD *)j;
            v59 = *(_QWORD *)(j - 20);
            if (v58 >= v59 && (v59 < v58 || v60 >= *(_DWORD *)(j - 12)))
              break;
          }
          *(_QWORD *)(j - 8) = v58;
          *(_DWORD *)j = v60;
          goto LABEL_74;
        }
        return result;
    }
  }
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *j)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = *(uint64_t *)((char *)j - 12);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((_DWORD *)j - 1)))
  {
    for (i = (uint64_t *)((char *)a1 + 12);
          i < j && v2 >= *i && (*i < v2 || v3 >= *((_DWORD *)i + 2));
  }
  else
  {
    i = a1;
    do
    {
      v7 = *(uint64_t *)((char *)i + 12);
      i = (uint64_t *)((char *)i + 12);
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((_DWORD *)i + 2)));
  }
  if (i < j)
  {
    for (j = (uint64_t *)((char *)j - 12); v2 < v4 || v4 >= v2 && v3 < *((_DWORD *)j + 2); j = (uint64_t *)((char *)j - 12))
    {
      v8 = *(uint64_t *)((char *)j - 12);
      v4 = v8;
    }
  }
  if (i < j)
  {
    v9 = *i;
    v10 = *j;
    do
    {
      *i = v10;
      *j = v9;
      v11 = *(uint64_t *)((char *)i + 12);
      i = (uint64_t *)((char *)i + 12);
      v9 = v11;
      v12 = *((_DWORD *)i - 1);
      *((_DWORD *)i - 1) = *((_DWORD *)j + 2);
      *((_DWORD *)j + 2) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((_DWORD *)i + 2)))
      {
        v13 = *(uint64_t *)((char *)i + 12);
        i = (uint64_t *)((char *)i + 12);
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(uint64_t *)((char *)j - 12);
          j = (uint64_t *)((char *)j - 12);
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *((_DWORD *)j + 2));
    }
    while (i < j);
  }
  if ((uint64_t *)((char *)i - 12) != a1)
  {
    *a1 = *(uint64_t *)((char *)i - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)i - 1);
  }
  *(uint64_t *)((char *)i - 12) = v2;
  *((_DWORD *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v2 = 0;
  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  while (1)
  {
    v5 = *(uint64_t *)((char *)a1 + v2 + 12);
    if (v5 >= v3 && (v3 < v5 || *(_DWORD *)((char *)a1 + v2 + 20) >= v4))
      break;
    v2 += 12;
  }
  v6 = (unint64_t)a1 + v2 + 12;
  if (v2)
  {
    do
    {
      v8 = *(_QWORD *)(a2 - 12);
      a2 -= 12;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v10 = *(_QWORD *)(a2 - 12);
        a2 -= 12;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = v6;
  }
  else
  {
    v12 = *(_QWORD *)a2;
    v13 = v6;
    v14 = a2;
    do
    {
      *(_QWORD *)v13 = v12;
      *(_QWORD *)v14 = v5;
      v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          v16 = *(_QWORD *)(v13 + 12);
          v13 += 12;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 8) < v4);
      do
      {
        v17 = *(_QWORD *)(v14 - 12);
        v14 -= 12;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if ((uint64_t *)(v13 - 12) != a1)
  {
    *a1 = *(_QWORD *)(v13 - 12);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v13 - 4);
  }
  *(_QWORD *)(v13 - 12) = v3;
  *(_DWORD *)(v13 - 4) = v4;
  return v13 - 12;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v19 = *(_QWORD *)(a2 - 12);
      v20 = *(_QWORD *)a1;
      if (v19 < *(_QWORD *)a1)
      {
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_DWORD *)(a2 - 4);
LABEL_24:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a2 - 12) = v20;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 4) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        v22 = *(_DWORD *)(a2 - 4);
        v21 = *(_DWORD *)(a1 + 8);
        if (v22 < v21)
          goto LABEL_24;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      v23 = *(_QWORD *)(a2 - 12);
      v24 = *(_QWORD *)(a1 + 24);
      if (v23 >= v24)
      {
        if (v24 < v23)
          return 1;
        v26 = *(_DWORD *)(a2 - 4);
        v25 = *(_DWORD *)(a1 + 32);
        if (v26 >= v25)
          return 1;
      }
      else
      {
        v25 = *(_DWORD *)(a1 + 32);
        v26 = *(_DWORD *)(a2 - 4);
      }
      *(_QWORD *)(a1 + 24) = v23;
      *(_QWORD *)(a2 - 12) = v24;
      *(_DWORD *)(a1 + 32) = v26;
      *(_DWORD *)(a2 - 4) = v25;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_QWORD *)(a1 + 12);
      if (v27 >= v28)
      {
        if (v28 < v27)
          return 1;
        v30 = *(_DWORD *)(a1 + 32);
        v29 = *(_DWORD *)(a1 + 20);
        if (v30 >= v29)
          return 1;
      }
      else
      {
        v29 = *(_DWORD *)(a1 + 20);
        v30 = *(_DWORD *)(a1 + 32);
      }
      *(_QWORD *)(a1 + 12) = v27;
      *(_QWORD *)(a1 + 24) = v28;
      *(_DWORD *)(a1 + 20) = v30;
      *(_DWORD *)(a1 + 32) = v29;
      v31 = *(_QWORD *)a1;
      if (v27 < *(_QWORD *)a1)
      {
        v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(_QWORD *)a1 = v27;
        *(_QWORD *)(a1 + 12) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        result = 1;
        *(_DWORD *)(a1 + 20) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        v32 = *(_DWORD *)(a1 + 8);
        if (v30 < v32)
          goto LABEL_46;
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(a1, a1 + 12, a1 + 24, a1 + 36, (uint64_t *)(a2 - 12));
      return 1;
    default:
      v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      v7 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *(_QWORD *)v7;
        v12 = *(_QWORD *)v6;
        if (*(_QWORD *)v7 >= *(_QWORD *)v6)
        {
          if (v12 < v11)
            goto LABEL_7;
          v13 = *(_DWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v6 + 8);
          if (v13 >= v14)
            goto LABEL_7;
        }
        else
        {
          v13 = *(_DWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v6 + 8);
        }
        *(_QWORD *)v7 = v12;
        *(_DWORD *)(v7 + 8) = v14;
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v15 = v8;
        while (2)
        {
          v17 = a1 + v15;
          v18 = *(_QWORD *)(a1 + v15 + 12);
          if (v11 < v18)
          {
            v16 = *(_DWORD *)(v17 + 20);
LABEL_13:
            v6 -= 12;
            *(_QWORD *)(v17 + 24) = v18;
            *(_DWORD *)(a1 + v15 + 32) = v16;
            v15 -= 12;
            if (v15 == -24)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          v16 = *(_DWORD *)(a1 + v15 + 20);
          if (v13 >= v16)
          {
            v10 = a1 + v15 + 24;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v10 = v6;
LABEL_6:
        *(_QWORD *)v10 = v11;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8)
          return v7 + 12 == a2;
LABEL_7:
        v6 = v7;
        v8 += 12;
        v7 += 12;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      v6 = (uint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        v7 = *(uint64_t *)((char *)v6 + 12);
        if (*v6 < v7 || v7 >= *v6 && *(_DWORD *)(result + 12 * v5 + 8) < *((_DWORD *)v6 + 5))
        {
          v6 = (uint64_t *)((char *)v6 + 12);
          v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      v8 = *v6;
      v9 = *a4;
      if (*v6 >= *a4)
      {
        if (v9 >= v8)
        {
          v11 = *((_DWORD *)v6 + 2);
          v10 = *((_DWORD *)a4 + 2);
          if (v11 < v10)
            return result;
        }
        else
        {
          v10 = *((_DWORD *)a4 + 2);
          v11 = *((_DWORD *)v6 + 2);
        }
        *a4 = v8;
        *((_DWORD *)a4 + 2) = v11;
        if (v4 >= v5)
        {
          while (1)
          {
            v13 = 2 * v5;
            v5 = (2 * v5) | 1;
            v12 = (uint64_t *)(result + 12 * v5);
            v14 = v13 + 2;
            if (v14 < a3)
            {
              v15 = *(uint64_t *)((char *)v12 + 12);
              if (*v12 < v15 || v15 >= *v12 && *(_DWORD *)(result + 12 * v5 + 8) < *((_DWORD *)v12 + 5))
              {
                v12 = (uint64_t *)((char *)v12 + 12);
                v5 = v14;
              }
            }
            v16 = *v12;
            if (*v12 < v9)
              break;
            v17 = *((_DWORD *)v12 + 2);
            if (v9 >= v16 && v17 < v10)
              break;
            *v6 = v16;
            *((_DWORD *)v6 + 2) = v17;
            v6 = v12;
            if (v4 < v5)
              goto LABEL_14;
          }
        }
        v12 = v6;
LABEL_14:
        *v12 = v9;
        *((_DWORD *)v12 + 2) = v10;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = *((_DWORD *)result + 2);
    v7 = result;
    do
    {
      v8 = v7;
      v9 = v4 + 1;
      v7 = (uint64_t *)((char *)v7 + 12 * v4 + 12);
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v11 < a4)
      {
        v12 = *(uint64_t *)((char *)v7 + 12);
        if (*v7 < v12 || v12 >= *v7 && *((_DWORD *)v8 + 3 * v9 + 2) < *((_DWORD *)v7 + 5))
        {
          v7 = (uint64_t *)((char *)v7 + 12);
          v4 = v11;
        }
      }
      *v8 = *v7;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 2);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (uint64_t *)(a2 - 12))
    {
      *v7 = v5;
      *((_DWORD *)v7 + 2) = v6;
      return result;
    }
    *v7 = *(_QWORD *)(a2 - 12);
    *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 - 4);
    *(_QWORD *)(a2 - 12) = v5;
    *(_DWORD *)(a2 - 4) = v6;
    v13 = (char *)v7 - (char *)result + 12;
    if (v13 >= 13)
    {
      v14 = v13 / 0xCuLL - 2;
      v15 = v14 >> 1;
      v16 = (uint64_t *)((char *)result + 12 * (v14 >> 1));
      v17 = *v16;
      v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17)
          return result;
        v20 = *((_DWORD *)result + 3 * v15 + 2);
        v19 = *((_DWORD *)v7 + 2);
        if (v20 >= v19)
          return result;
      }
      else
      {
        v19 = *((_DWORD *)v7 + 2);
        v20 = *((_DWORD *)result + 3 * v15 + 2);
      }
      *v7 = v17;
      *((_DWORD *)v7 + 2) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          v23 = v15 - 1;
          v15 = (v15 - 1) >> 1;
          v21 = (uint64_t *)((char *)result + 12 * v15);
          v24 = *v21;
          if (*v21 < v18)
          {
            v22 = *((_DWORD *)result + 3 * v15 + 2);
          }
          else
          {
            if (v18 < v24)
              break;
            v22 = *((_DWORD *)result + 3 * v15 + 2);
            if (v22 >= v19)
              break;
          }
          *v16 = v24;
          *((_DWORD *)v16 + 2) = v22;
          v16 = (uint64_t *)((char *)result + 12 * v15);
          if (v23 <= 1)
            goto LABEL_19;
        }
      }
      v21 = v16;
LABEL_19:
      *v21 = v18;
      *((_DWORD *)v21 + 2) = v19;
    }
  }
  return result;
}

_QWORD *std::vector<std::vector<long long>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(v3, v4, v5, v8);
  }
  return a1;
}

void sub_22DC1B3F0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;

  v1[1] = v2;
  if (*v1)
    std::vector<std::vector<operations_research::sat::Literal>>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_22DC1B4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22DC1B4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v2 = (unint64_t)a2;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v24 = a1[4];
    if (!v24)
      return;
LABEL_21:
    *((_QWORD *)v24 + 4) = v14 >> 3;
    *((_QWORD *)v24 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v4] & 0x80000000) == 0)
    {
      v18 = &v5[16 * (_QWORD)v13];
      v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(_QWORD *)v18));
      v20 = *a1;
      v21 = a1[3];
      v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      v23 = *(_QWORD *)&(*a1)[v22] & (~*(_QWORD *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v22 = (v15 + v22) & (unint64_t)v21;
          v23 = *(_QWORD *)&v20[v22] & (~*(_QWORD *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  v24 = a1[4];
  if (v24)
    goto LABEL_21;
}

_QWORD *std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  *a1 = &off_24F987AA0;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = a1[4];
  if (v3)
  {
    v4 = a1[5];
    v5 = (void *)a1[4];
    if (v4 != v3)
    {
      v6 = a1[5];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[4];
    }
    a1[5] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  *a1 = &off_24F987AA0;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = a1[4];
  if (v3)
  {
    v4 = a1[5];
    v5 = (void *)a1[4];
    if (v4 != v3)
    {
      v6 = a1[5];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[4];
    }
    a1[5] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  JUMPOUT(0x22E31DF78);
}

_QWORD *std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x58uLL);
  *v2 = &off_24F987AA0;
  std::__compressed_pair_elem<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_22DC1BA14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24F987AA0;
  return std::__compressed_pair_elem<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = a1[4];
  if (v3)
  {
    v4 = a1[5];
    v5 = (void *)a1[4];
    if (v4 != v3)
    {
      v6 = a1[5];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[4];
    }
    a1[5] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
}

void std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  v3 = __p[4];
  if (v3)
  {
    v4 = __p[5];
    v5 = (void *)__p[4];
    if (v4 != v3)
    {
      v6 = __p[5];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)__p[4];
    }
    __p[5] = v3;
    operator delete(v5);
  }
  v9 = (void *)__p[1];
  if (v9)
  {
    __p[2] = v9;
    operator delete(v9);
  }
  operator delete(__p);
}

void std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__invoke[abi:ne180100]<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0 &,operations_research::sat::Model *>((_QWORD *)(a1 + 8), *a2);
}

uint64_t std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20TransitionConstraintERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVaria"
                     "ble_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS2_IxNS7_IxEEEENS7_ISD_EEEExRKSD_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20TransitionConstraintERKNSt3__16vectorIN3gtl7IntTypeINS0_20I"
                                "ntegerVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS2_IxNS7_IxEEEENS7_ISD_EEEExRKSD_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20TransitionConstraintERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS2_IxNS7_IxEEEENS7_ISD_EEEExRKSD_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20TransitionConstraintERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS2_IxNS7_IxEEEENS7_ISD_EEEExRKSD_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  std::vector<std::vector<long long>>::vector(a1 + 3, (uint64_t *)(a2 + 24));
  v9 = *(_QWORD *)(a2 + 48);
  a1[7] = 0;
  a1[6] = v9;
  a1[8] = 0;
  a1[9] = 0;
  v11 = *(_BYTE **)(a2 + 56);
  v10 = *(_BYTE **)(a2 + 64);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v11);
    a1[7] = v13;
    a1[8] = v13;
    v14 = &v13[8 * (v12 >> 3)];
    a1[9] = v14;
    memcpy(v13, v11, v12);
    a1[8] = v14;
  }
  return a1;
}

void sub_22DC1BCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_objecta)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void std::__invoke[abi:ne180100]<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0 &,operations_research::sat::Model *>(_QWORD *a1, uint64_t a2)
{
  operations_research::sat::IntegerTrail *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  __int128 *v26;
  unint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t **v43;
  uint64_t **v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  void **v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  BOOL v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  BOOL v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t **v113;
  uint64_t **v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  BOOL v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _BYTE *v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  _BYTE *v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  char *v148;
  char *v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  BOOL v156;
  _QWORD *v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t **v173;
  uint64_t **v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  BOOL v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  BOOL v207;
  _QWORD *v208;
  operations_research::sat::SatSolver *v209;
  int v210;
  int v211;
  uint64_t v212;
  char *v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  int *v220;
  char *v221;
  unint64_t v222;
  char *v223;
  int v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  _BYTE *v234;
  char *v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  _OWORD *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  _BYTE *v256;
  char *v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  _BYTE *v266;
  char *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _OWORD *v272;
  char *v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  _OWORD *v279;
  __int128 *v280;
  uint64_t v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  _OWORD *v287;
  __int128 *v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  int64_t v292;
  char *v293;
  char *v294;
  unint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  char *v302;
  int64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  unint64_t *v308;
  size_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t *v314;
  int64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  _BYTE *v320;
  uint64_t *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _OWORD *v328;
  uint64_t *v329;
  uint64_t v330;
  __int128 v331;
  int v332;
  int64_t v333;
  char *v334;
  signed int v335;
  uint64_t *v336;
  uint64_t (***v337)();
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  void *v341;
  __int128 v342;
  __int128 v343;
  uint64_t v344;
  _QWORD *v345;
  char *v346;
  int64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t (***v352)();
  uint64_t v353;
  uint64_t v354;
  uint64_t (***v355)();
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  char *v364;
  int64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  unint64_t *v370;
  unint64_t v371;
  operations_research::sat::SatSolver *v372;
  int v373;
  _QWORD *v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  char *v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t j;
  uint64_t v405;
  operations_research::sat::SatSolver *v406;
  int v407;
  _QWORD *v408;
  uint64_t v409;
  int v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  char *v414;
  char *v415;
  char *v416;
  uint64_t *v417;
  uint64_t *v418;
  uint64_t *v419;
  _QWORD *v420;
  _QWORD *v421;
  _QWORD *v422;
  _QWORD *v423;
  _QWORD *v424;
  _QWORD *v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t __p;
  char *__pa;
  char *__pb;
  char *__pc;
  _QWORD *v437;
  int v439;
  void *v440[2];
  __int128 v441;
  _QWORD *v442;
  uint64_t v443;
  void *v444[3];
  void *v445;
  void *v446;
  char *v447;
  unint64_t v448[3];
  uint64_t *v449;
  uint64_t *v450;
  uint64_t *v451;
  char *v452;
  char *v453;
  char *v454;
  char *v455;
  char *v456;
  char *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  char *v463;
  int *v464;
  _DWORD *v465;
  char *v466;
  unint64_t v467;
  __int128 v468;
  __int128 v469;
  uint64_t v470;
  uint64_t v471;
  __int128 v472;
  __int128 v473;
  uint64_t v474;
  _BYTE v475[40];
  uint64_t v476;
  char *v477;
  char *v478;
  uint64_t **v479;
  uint64_t *v480;
  uint64_t *v481;
  _QWORD v482[3];
  _QWORD *v483;
  _QWORD v484[3];
  _QWORD *v485;
  uint64_t (**v486)();
  _QWORD v487[2];
  uint64_t (***v488)();
  uint64_t (**v489)();
  _QWORD v490[2];
  uint64_t (***v491)();
  uint64_t (**v492)();
  signed int v493;
  uint64_t (***v494)();
  _QWORD v495[3];
  _QWORD *v496;
  uint64_t v497;

  v497 = *MEMORY[0x24BDAC8D0];
  v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v437 = a1;
  v4 = a1[1] - *a1;
  *(_DWORD *)v475 = v4 >> 2;
  LODWORD(v471) = 0;
  v428 = v4 >> 2;
  v431 = (uint64_t)v3;
  if (*(int *)v475 < 1)
  {
    v471 = google::MakeCheckOpString<int,int>((int)v475, (int)&v471, "n > 0");
    if (v471)
    {
      google::LogMessageFatal::LogMessageFatal((unint64_t *)v475, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 598, (uint64_t **)&v471);
      v425 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)v475);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v425, "No variables in TransitionConstraint().");
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v475);
    }
  }
  *(_QWORD *)&v475[8] = 0;
  *(_QWORD *)&v475[16] = 0;
  *(_QWORD *)v475 = &v475[8];
  v5 = a1[3];
  v6 = a1[4];
  if (v5 != v6)
  {
    while (1)
    {
      v7 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5;
      v471 = v7 >> 3;
      LODWORD(v440[0]) = 3;
      if (v7 != 24)
      {
        v467 = google::MakeCheckOpString<unsigned long,int>((int)&v471, (int)v440, "transition.size() == 3");
        if (v467)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)&v471, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 604, (uint64_t **)&v467);
          google::LogMessage::stream((google::LogMessage *)&v471);
          goto LABEL_572;
        }
      }
      v8 = **(_QWORD **)v5;
      v9 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      v10 = *(uint64_t **)&v475[8];
      v11 = (uint64_t **)&v475[8];
      v12 = (uint64_t **)&v475[8];
      if (*(_QWORD *)&v475[8])
        break;
LABEL_26:
      v19 = (uint64_t *)operator new(0x30uLL);
      v19[4] = v8;
      v19[5] = v9;
      *v19 = 0;
      v19[1] = 0;
      v19[2] = (uint64_t)v12;
      *v11 = v19;
      if (**(_QWORD **)v475)
      {
        *(_QWORD *)v475 = **(_QWORD **)v475;
        v19 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v475[8], v19);
      ++*(_QWORD *)&v475[16];
LABEL_29:
      v5 += 24;
      if (v5 == v6)
      {
        v20 = *(_QWORD **)&v475[8];
        goto LABEL_34;
      }
    }
    v13 = &v475[8];
    v14 = *(_QWORD **)&v475[8];
    do
    {
      v15 = v14[4];
      if (v15 < v8)
      {
        ++v14;
      }
      else if (v8 >= v15)
      {
        if (v14[5] < v9)
          ++v14;
        else
          v13 = v14;
      }
      else
      {
        v13 = v14;
      }
      v14 = (_QWORD *)*v14;
    }
    while (v14);
    if (v13 != &v475[8])
    {
      v16 = *((_QWORD *)v13 + 4);
      if (v8 >= v16 && (v16 < v8 || v9 >= *((_QWORD *)v13 + 5)))
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v471, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 606);
        v421 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&v471);
        v422 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v421, (uint64_t)"Check failed: !gtl::ContainsKey(unique_transition_checker, p) ", 62);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v422, (uint64_t)"Duplicate outgoing transitions with value ", 42);
        v423 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v423, (uint64_t)" from state ", 12);
        v424 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v424, (uint64_t)".", 1);
LABEL_572:
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v471);
      }
    }
    while (1)
    {
      v12 = (uint64_t **)v10;
      v17 = v10[4];
      if (v8 < v17)
        goto LABEL_19;
      if (v17 < v8)
      {
LABEL_24:
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          goto LABEL_26;
        }
      }
      else
      {
        v18 = (uint64_t)v12[5];
        if (v9 >= v18)
        {
          if (v18 >= v9)
            goto LABEL_29;
          goto LABEL_24;
        }
LABEL_19:
        v10 = *v12;
        v11 = v12;
        if (!*v12)
          goto LABEL_26;
      }
    }
  }
  v20 = 0;
LABEL_34:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v475, v20);
  v426 = (int)((uint64_t)v4 >> 2);
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v480, v426);
  v432 = (v4 >> 2);
  __p = v4;
  if ((int)v428 > 0)
  {
    for (i = 0; i != v432; ++i)
    {
      v22 = operations_research::sat::IntegerTrail::InitialVariableDomain(v431, *(_DWORD *)(*v437 + 4 * i));
      *(_QWORD *)v475 = 0;
      v23 = *(_QWORD *)v22;
      if ((*(_QWORD *)v22 & 1) == 0)
      {
        *(_QWORD *)v475 = *(_QWORD *)v22;
        *(_OWORD *)&v475[8] = *(_OWORD *)(v22 + 8);
        v24 = (uint64_t *)v437[3];
        v25 = (uint64_t *)v437[4];
        if (v24 != v25)
          goto LABEL_55;
        goto LABEL_59;
      }
      v26 = *(__int128 **)(v22 + 8);
      v27 = v23 >> 1;
      if (v23 < 4)
      {
        v28 = &v475[8];
        if (v23 < 2)
        {
          v29 = 0;
          goto LABEL_47;
        }
      }
      else
      {
        if (v23 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v28 = operator new(16 * v27);
        *(_QWORD *)&v475[8] = v28;
        *(_QWORD *)&v475[16] = v23 >> 1;
        *(_QWORD *)v475 = 1;
      }
      do
      {
        v30 = *v26++;
        *v28++ = v30;
        --v27;
      }
      while (v27);
      v29 = *(_QWORD *)v475;
LABEL_47:
      v23 = v29 + (v23 & 0xFFFFFFFFFFFFFFFELL);
      *(_QWORD *)v475 = v23;
      v24 = (uint64_t *)v437[3];
      v25 = (uint64_t *)v437[4];
      if (v24 != v25)
      {
        do
        {
LABEL_55:
          if (operations_research::Domain::Contains((operations_research::Domain *)v475, *(_QWORD *)(*v24 + 8)))
          {
            v34 = 0;
            v36 = &v480[6 * i];
            v38 = *(_QWORD *)(*v24 + 8);
            v39 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v38)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v38));
            v35 = (v39 >> 7) ^ ((unint64_t)*v36 >> 12);
            v40 = v36[3];
            while (1)
            {
              v31 = v35 & v40;
              v32 = *(_QWORD *)(*v36 + v31);
              v33 = ((v32 ^ (0x101010101010101 * (v39 & 0x7F))) - 0x101010101010101) & ~(v32 ^ (0x101010101010101
                                                                                                  * (v39 & 0x7F))) & 0x8080808080808080;
              if (v33)
                break;
LABEL_52:
              if ((v32 & (~v32 << 6) & 0x8080808080808080) != 0)
              {
                v37 = *v24;
                *(_QWORD *)(v36[1]
                          + 8
                          * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert(&v480[6 * i], v39)) = *(_QWORD *)(v37 + 8);
                goto LABEL_57;
              }
              v34 += 8;
              v35 = v34 + v31;
            }
            while (*(_QWORD *)(v36[1] + 8 * ((v31 + (__clz(__rbit64(v33)) >> 3)) & v40)) != v38)
            {
              v33 &= v33 - 1;
              if (!v33)
                goto LABEL_52;
            }
          }
LABEL_57:
          v24 += 3;
        }
        while (v24 != v25);
        LOBYTE(v23) = v475[0];
      }
LABEL_59:
      if ((v23 & 1) != 0)
        operator delete(*(void **)&v475[8]);
    }
  }
  v477 = 0;
  v478 = 0;
  v479 = 0;
  v41 = (__p << 30) + 0x100000000;
  if (__p << 30 == 0xFFFFFFFF00000000)
  {
    v44 = 0;
    v48 = 8;
    v47 = (uint64_t *)MEMORY[8];
    v49 = v437[6];
    if (MEMORY[8])
      goto LABEL_66;
  }
  else
  {
    if (v41 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v42 = 24 * (v41 >> 32);
    v43 = (uint64_t **)operator new(v42);
    v44 = v43;
    v45 = 0;
    v477 = (char *)v43;
    v479 = &v43[v42 / 8];
    do
    {
      v46 = &v43[v45 / 8];
      v46[2] = 0;
      v43[v45 / 8 + 1] = 0;
      *v46 = (uint64_t *)&v43[v45 / 8 + 1];
      v45 += 24;
    }
    while (v42 != v45);
    v478 = (char *)&v43[v42 / 8];
    v48 = (uint64_t)(v43 + 1);
    v47 = v43[1];
    v49 = v437[6];
    if (v47)
    {
LABEL_66:
      v50 = v426;
      while (1)
      {
        while (1)
        {
          v51 = (uint64_t **)v47;
          v52 = v47[4];
          if (v49 >= v52)
            break;
          v47 = *v51;
          v48 = (uint64_t)v51;
          if (!*v51)
            goto LABEL_74;
        }
        if (v52 >= v49)
          goto LABEL_77;
        v47 = v51[1];
        if (!v47)
        {
          v48 = (uint64_t)(v51 + 1);
          goto LABEL_74;
        }
      }
    }
  }
  v51 = (uint64_t **)v48;
  v50 = v426;
LABEL_74:
  v53 = (uint64_t *)operator new(0x28uLL);
  v53[4] = v49;
  *v53 = 0;
  v53[1] = 0;
  v53[2] = (uint64_t)v51;
  *(_QWORD *)v48 = v53;
  v54 = (uint64_t *)**v44;
  if (v54)
  {
    *v44 = v54;
    v53 = *(uint64_t **)v48;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v44[1], v53);
  v44[2] = (uint64_t *)((char *)v44[2] + 1);
LABEL_77:
  std::set<long long>::set[abi:ne180100]<std::__wrap_iter<long long const*>>((_QWORD **)v475, (uint64_t *)v437[7], (uint64_t *)v437[8]);
  v55 = v477;
  v56 = (uint64_t)&v477[24 * (int)v50];
  v57 = v56 + 8;
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v56, *(_QWORD **)(v56 + 8));
  *(_QWORD *)v56 = *(_QWORD *)v475;
  v58 = *(_QWORD *)&v475[8];
  *(_QWORD *)(v56 + 8) = *(_QWORD *)&v475[8];
  v59 = *(_QWORD *)&v475[16];
  *(_QWORD *)(v56 + 16) = *(_QWORD *)&v475[16];
  if (v59)
  {
    *(_QWORD *)(v58 + 16) = v57;
    *(_QWORD *)v475 = &v475[8];
    *(_QWORD *)&v475[8] = 0;
    *(_QWORD *)&v475[16] = 0;
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v475, 0);
    if ((int)v428 <= 1)
      goto LABEL_222;
  }
  else
  {
    *(_QWORD *)v56 = v57;
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v475, *(_QWORD **)&v475[8]);
    if ((int)v428 <= 1)
      goto LABEL_222;
  }
  if (v437[3] != v437[4])
  {
    v60 = 0;
    v61 = 1;
    do
    {
      v62 = (uint64_t **)v437[3];
      v63 = (uint64_t **)v437[4];
      if (v62 != v63 && *(_QWORD *)&v477[24 * v60 + 8])
      {
        do
        {
          v93 = &v477[24 * v60];
          v96 = (_QWORD *)*((_QWORD *)v93 + 1);
          v94 = v93 + 8;
          v95 = v96;
          if (v96)
          {
            v97 = *v62;
            v98 = **v62;
            v99 = v94;
            do
            {
              v100 = v95[4];
              v101 = v100 < v98;
              if (v100 >= v98)
                v102 = v95;
              else
                v102 = v95 + 1;
              if (!v101)
                v99 = (char *)v95;
              v95 = (_QWORD *)*v102;
            }
            while (*v102);
            if (v99 != v94 && v98 >= *((_QWORD *)v99 + 4))
            {
              v68 = 0;
              v103 = &v480[6 * v60];
              v104 = v97[1];
              v105 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v104)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v104));
              v106 = *v103;
              v107 = v103[1];
              v69 = (v105 >> 7) ^ ((unint64_t)*v103 >> 12);
              v108 = v103[3];
              v109 = 0x101010101010101 * (v105 & 0x7F);
              while (1)
              {
                v64 = v69 & v108;
                v65 = *(_QWORD *)(v106 + v64);
                v66 = ((v65 ^ v109) - 0x101010101010101) & ~(v65 ^ v109) & 0x8080808080808080;
                if (v66)
                  break;
LABEL_90:
                if ((v65 & (~v65 << 6) & 0x8080808080808080) != 0)
                  goto LABEL_141;
                v68 += 8;
                v69 = v68 + v64;
              }
              while (1)
              {
                v67 = (v64 + (__clz(__rbit64(v66)) >> 3)) & v108;
                if (*(_QWORD *)(v107 + 8 * v67) == v104)
                  break;
                v66 &= v66 - 1;
                if (!v66)
                  goto LABEL_90;
              }
              if (v67 != v108)
              {
                v70 = &v477[24 * v61];
                v72 = (void **)(v70 + 8);
                v71 = (_QWORD *)*((_QWORD *)v70 + 1);
                v73 = v97[2];
                v74 = v70 + 8;
                v75 = v70 + 8;
                if (v71)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v75 = v71;
                      v76 = v71[4];
                      if (v73 >= v76)
                        break;
                      v71 = (_QWORD *)*v75;
                      v74 = v75;
                      if (!*v75)
                        goto LABEL_100;
                    }
                    if (v76 >= v73)
                      break;
                    v71 = (_QWORD *)v75[1];
                    if (!v71)
                    {
                      v74 = v75 + 1;
                      goto LABEL_100;
                    }
                  }
                }
                else
                {
LABEL_100:
                  v77 = operator new(0x28uLL);
                  v77[4] = v73;
                  *v77 = 0;
                  v77[1] = 0;
                  v77[2] = v75;
                  *v74 = v77;
                  v78 = **(_QWORD **)v70;
                  if (v78)
                  {
                    *(_QWORD *)v70 = v78;
                    v77 = (_QWORD *)*v74;
                  }
                  v79 = *v72;
                  v80 = v77 == *v72;
                  *((_BYTE *)v77 + 24) = v80;
                  if (!v80)
                  {
                    do
                    {
                      v81 = v77[2];
                      if (*(_BYTE *)(v81 + 24))
                        break;
                      v82 = *(_BYTE **)(v81 + 16);
                      v83 = *(_QWORD *)v82;
                      if (*(_QWORD *)v82 == v81)
                      {
                        v86 = *((_QWORD *)v82 + 1);
                        if (!v86 || (v87 = *(unsigned __int8 *)(v86 + 24), v84 = (_BYTE *)(v86 + 24), v87))
                        {
                          if (*(_QWORD **)v81 == v77)
                          {
                            *(_BYTE *)(v81 + 24) = 1;
                            v82[24] = 0;
                            v90 = *(_QWORD *)(v81 + 8);
                            *(_QWORD *)v82 = v90;
                            if (v90)
                              goto LABEL_117;
                          }
                          else
                          {
                            v88 = *(uint64_t **)(v81 + 8);
                            v89 = *v88;
                            *(_QWORD *)(v81 + 8) = *v88;
                            if (v89)
                            {
                              *(_QWORD *)(v89 + 16) = v81;
                              v82 = *(_BYTE **)(v81 + 16);
                            }
                            v88[2] = (uint64_t)v82;
                            *(_QWORD *)(*(_QWORD *)(v81 + 16) + 8 * (**(_QWORD **)(v81 + 16) != v81)) = v88;
                            *v88 = v81;
                            *(_QWORD *)(v81 + 16) = v88;
                            v82 = (_BYTE *)v88[2];
                            v81 = *(_QWORD *)v82;
                            *((_BYTE *)v88 + 24) = 1;
                            v82[24] = 0;
                            v90 = *(_QWORD *)(v81 + 8);
                            *(_QWORD *)v82 = v90;
                            if (v90)
LABEL_117:
                              *(_QWORD *)(v90 + 16) = v82;
                          }
                          *(_QWORD *)(v81 + 16) = *((_QWORD *)v82 + 2);
                          *(_QWORD *)(*((_QWORD *)v82 + 2) + 8 * (**((_QWORD **)v82 + 2) != (_QWORD)v82)) = v81;
                          *(_QWORD *)(v81 + 8) = v82;
LABEL_123:
                          *((_QWORD *)v82 + 2) = v81;
                          break;
                        }
                      }
                      else if (!v83 || (v85 = *(unsigned __int8 *)(v83 + 24), v84 = (_BYTE *)(v83 + 24), v85))
                      {
                        if (*(_QWORD **)v81 == v77)
                        {
                          v92 = v77[1];
                          *(_QWORD *)v81 = v92;
                          if (v92)
                          {
                            *(_QWORD *)(v92 + 16) = v81;
                            v82 = *(_BYTE **)(v81 + 16);
                          }
                          v77[2] = v82;
                          *(_QWORD *)(*(_QWORD *)(v81 + 16) + 8 * (**(_QWORD **)(v81 + 16) != v81)) = v77;
                          v77[1] = v81;
                          *(_QWORD *)(v81 + 16) = v77;
                          v82 = (_BYTE *)v77[2];
                          *((_BYTE *)v77 + 24) = 1;
                          v82[24] = 0;
                          v81 = *((_QWORD *)v82 + 1);
                          v91 = *(_QWORD **)v81;
                          *((_QWORD *)v82 + 1) = *(_QWORD *)v81;
                          if (v91)
LABEL_121:
                            v91[2] = v82;
                        }
                        else
                        {
                          *(_BYTE *)(v81 + 24) = 1;
                          v82[24] = 0;
                          v81 = *((_QWORD *)v82 + 1);
                          v91 = *(_QWORD **)v81;
                          *((_QWORD *)v82 + 1) = *(_QWORD *)v81;
                          if (v91)
                            goto LABEL_121;
                        }
                        *(_QWORD *)(v81 + 16) = *((_QWORD *)v82 + 2);
                        *(_QWORD *)(*((_QWORD *)v82 + 2) + 8 * (**((_QWORD **)v82 + 2) != (_QWORD)v82)) = v81;
                        *(_QWORD *)v81 = v82;
                        goto LABEL_123;
                      }
                      *(_BYTE *)(v81 + 24) = 1;
                      v77 = v82;
                      v82[24] = v82 == (_BYTE *)v79;
                      *v84 = 1;
                    }
                    while (v82 != (_BYTE *)v79);
                  }
                  ++*((_QWORD *)v70 + 2);
                }
              }
            }
          }
LABEL_141:
          v62 += 3;
        }
        while (v62 != v63);
      }
      ++v60;
      ++v61;
    }
    while (v60 != (_DWORD)v428 - 1);
    v55 = v477;
    v50 = v426;
  }
  do
  {
    v112 = v50--;
    *(_QWORD *)&v475[8] = 0;
    *(_QWORD *)&v475[16] = 0;
    *(_QWORD *)v475 = &v475[8];
    v114 = (uint64_t **)v437[3];
    v113 = (uint64_t **)v437[4];
    if (v114 == v113 || !*(_QWORD *)&v55[24 * v50 + 8])
    {
      v166 = 0;
      v165 = &v475[8];
    }
    else
    {
      __pa = 0;
      do
      {
        v148 = &v477[24 * v50];
        v151 = (_QWORD *)*((_QWORD *)v148 + 1);
        v149 = v148 + 8;
        v150 = v151;
        if (v151)
        {
          v152 = *v114;
          v153 = **v114;
          v154 = v149;
          do
          {
            v155 = v150[4];
            v156 = v155 < v153;
            if (v155 >= v153)
              v157 = v150;
            else
              v157 = v150 + 1;
            if (!v156)
              v154 = (char *)v150;
            v150 = (_QWORD *)*v157;
          }
          while (*v157);
          if (v154 != v149 && v153 >= *((_QWORD *)v154 + 4))
          {
            v119 = 0;
            v158 = &v480[6 * v50];
            v159 = v152[1];
            v160 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v159)
                   * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                      * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                       + v159));
            v161 = *v158;
            v162 = v158[1];
            v120 = (v160 >> 7) ^ ((unint64_t)*v158 >> 12);
            v163 = v158[3];
            v164 = 0x101010101010101 * (v160 & 0x7F);
            while (1)
            {
              v115 = v120 & v163;
              v116 = *(_QWORD *)(v161 + v115);
              v117 = ((v116 ^ v164) - 0x101010101010101) & ~(v116 ^ v164) & 0x8080808080808080;
              if (v117)
                break;
LABEL_155:
              if ((v116 & (~v116 << 6) & 0x8080808080808080) != 0)
                goto LABEL_216;
              v119 += 8;
              v120 = v119 + v115;
            }
            while (1)
            {
              v118 = (v115 + (__clz(__rbit64(v117)) >> 3)) & v163;
              if (*(_QWORD *)(v162 + 8 * v118) == v159)
                break;
              v117 &= v117 - 1;
              if (!v117)
                goto LABEL_155;
            }
            if (v118 != v163)
            {
              v121 = &v477[24 * v112];
              v124 = (_QWORD *)*((_QWORD *)v121 + 1);
              v122 = v121 + 8;
              v123 = v124;
              if (v124)
              {
                v125 = v152[2];
                v126 = v122;
                do
                {
                  v127 = v123[4];
                  v128 = v127 < v125;
                  if (v127 >= v125)
                    v129 = v123;
                  else
                    v129 = v123 + 1;
                  if (!v128)
                    v126 = (char *)v123;
                  v123 = (_QWORD *)*v129;
                }
                while (*v129);
                if (v126 != v122 && v125 >= *((_QWORD *)v126 + 4))
                {
                  v130 = &v475[8];
                  v131 = &v475[8];
                  if (*(_QWORD *)&v475[8])
                  {
                    v132 = *(_QWORD **)&v475[8];
                    while (1)
                    {
                      while (1)
                      {
                        v131 = v132;
                        v133 = v132[4];
                        if (v153 >= v133)
                          break;
                        v132 = (_QWORD *)*v131;
                        v130 = v131;
                        if (!*v131)
                          goto LABEL_175;
                      }
                      if (v133 >= v153)
                        break;
                      v132 = (_QWORD *)v131[1];
                      if (!v132)
                      {
                        v130 = v131 + 1;
                        goto LABEL_175;
                      }
                    }
                  }
                  else
                  {
LABEL_175:
                    v134 = operator new(0x28uLL);
                    v134[4] = v153;
                    *v134 = 0;
                    v134[1] = 0;
                    v134[2] = v131;
                    *v130 = v134;
                    if (**(_QWORD **)v475)
                    {
                      *(_QWORD *)v475 = **(_QWORD **)v475;
                      v134 = (_QWORD *)*v130;
                    }
                    v135 = *(_BYTE **)&v475[8];
                    *((_BYTE *)v134 + 24) = v134 == *(_QWORD **)&v475[8];
                    if (v134 != (_QWORD *)v135)
                    {
                      do
                      {
                        v136 = v134[2];
                        if (*(_BYTE *)(v136 + 24))
                          break;
                        v137 = *(_BYTE **)(v136 + 16);
                        v138 = *(_QWORD *)v137;
                        if (*(_QWORD *)v137 == v136)
                        {
                          v141 = *((_QWORD *)v137 + 1);
                          if (!v141 || (v142 = *(unsigned __int8 *)(v141 + 24), v139 = (_BYTE *)(v141 + 24), v142))
                          {
                            if (*(_QWORD **)v136 == v134)
                            {
                              *(_BYTE *)(v136 + 24) = 1;
                              v137[24] = 0;
                              v145 = *(_QWORD *)(v136 + 8);
                              *(_QWORD *)v137 = v145;
                              if (v145)
                                goto LABEL_191;
                            }
                            else
                            {
                              v143 = *(uint64_t **)(v136 + 8);
                              v144 = *v143;
                              *(_QWORD *)(v136 + 8) = *v143;
                              if (v144)
                              {
                                *(_QWORD *)(v144 + 16) = v136;
                                v137 = *(_BYTE **)(v136 + 16);
                              }
                              v143[2] = (uint64_t)v137;
                              *(_QWORD *)(*(_QWORD *)(v136 + 16) + 8 * (**(_QWORD **)(v136 + 16) != v136)) = v143;
                              *v143 = v136;
                              *(_QWORD *)(v136 + 16) = v143;
                              v137 = (_BYTE *)v143[2];
                              v136 = *(_QWORD *)v137;
                              *((_BYTE *)v143 + 24) = 1;
                              v137[24] = 0;
                              v145 = *(_QWORD *)(v136 + 8);
                              *(_QWORD *)v137 = v145;
                              if (v145)
LABEL_191:
                                *(_QWORD *)(v145 + 16) = v137;
                            }
                            *(_QWORD *)(v136 + 16) = *((_QWORD *)v137 + 2);
                            *(_QWORD *)(*((_QWORD *)v137 + 2) + 8 * (**((_QWORD **)v137 + 2) != (_QWORD)v137)) = v136;
                            *(_QWORD *)(v136 + 8) = v137;
LABEL_202:
                            *((_QWORD *)v137 + 2) = v136;
                            break;
                          }
                        }
                        else if (!v138 || (v140 = *(unsigned __int8 *)(v138 + 24), v139 = (_BYTE *)(v138 + 24), v140))
                        {
                          if (*(_QWORD **)v136 == v134)
                          {
                            v146 = v134[1];
                            *(_QWORD *)v136 = v146;
                            if (v146)
                            {
                              *(_QWORD *)(v146 + 16) = v136;
                              v137 = *(_BYTE **)(v136 + 16);
                            }
                            v134[2] = v137;
                            *(_QWORD *)(*(_QWORD *)(v136 + 16) + 8 * (**(_QWORD **)(v136 + 16) != v136)) = v134;
                            v134[1] = v136;
                            *(_QWORD *)(v136 + 16) = v134;
                            v137 = (_BYTE *)v134[2];
                          }
                          else
                          {
                            v134 = (_QWORD *)v134[2];
                          }
                          *((_BYTE *)v134 + 24) = 1;
                          v137[24] = 0;
                          v136 = *((_QWORD *)v137 + 1);
                          v147 = *(_QWORD **)v136;
                          *((_QWORD *)v137 + 1) = *(_QWORD *)v136;
                          if (v147)
                            v147[2] = v137;
                          *(_QWORD *)(v136 + 16) = *((_QWORD *)v137 + 2);
                          *(_QWORD *)(*((_QWORD *)v137 + 2) + 8 * (**((_QWORD **)v137 + 2) != (_QWORD)v137)) = v136;
                          *(_QWORD *)v136 = v137;
                          goto LABEL_202;
                        }
                        *(_BYTE *)(v136 + 24) = 1;
                        v134 = v137;
                        v137[24] = v137 == v135;
                        *v139 = 1;
                      }
                      while (v137 != v135);
                    }
                    *(_QWORD *)&v475[16] = ++__pa;
                  }
                }
              }
            }
          }
        }
LABEL_216:
        v114 += 3;
      }
      while (v114 != v113);
      v55 = v477;
      v165 = *(_BYTE **)v475;
      v166 = __pa;
    }
    v167 = &v55[24 * v50];
    v168 = *(_QWORD *)v167;
    *(_QWORD *)v167 = v165;
    *(_QWORD *)v475 = v168;
    v170 = *((_QWORD *)v167 + 1);
    v169 = v167 + 8;
    *((_QWORD *)v167 + 1) = *(_QWORD *)&v475[8];
    *(_QWORD *)&v475[8] = v170;
    v171 = *((_QWORD *)v167 + 2);
    *((_QWORD *)v167 + 2) = v166;
    *(_QWORD *)&v475[16] = v171;
    if (*((_QWORD *)v167 + 2))
      v167 = (char *)(*v169 + 16);
    *(_QWORD *)v167 = v169;
    v110 = *(_QWORD **)&v475[8];
    v111 = (_QWORD *)(*(_QWORD *)&v475[8] + 16);
    if (!v171)
      v111 = v475;
    *v111 = &v475[8];
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v475, v110);
  }
  while (v112 > 2);
LABEL_222:
  memset(&v475[8], 0, 32);
  v476 = 0;
  v472 = 0u;
  v473 = 0u;
  v474 = 0;
  *(_QWORD *)v475 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v467 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  v468 = 0u;
  v469 = 0u;
  v470 = 0;
  v471 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  if ((int)v428 < 1)
    goto LABEL_546;
  v172 = 0;
  while (2)
  {
    v465 = 0;
    v466 = 0;
    v461 = 0;
    v462 = 0;
    v463 = 0;
    v464 = 0;
    v459 = 0;
    v460 = 0;
    v455 = 0;
    v456 = 0;
    v457 = 0;
    v458 = 0;
    v173 = (uint64_t **)v437[3];
    v174 = (uint64_t **)v437[4];
    if (v173 == v174)
    {
      __pc = 0;
      v294 = 0;
      v293 = 0;
      v452 = 0;
      v453 = 0;
      v454 = 0;
      goto LABEL_361;
    }
    __pb = 0;
    v429 = 0;
    v175 = 0;
    v176 = v172 + 1;
    do
    {
      while (1)
      {
        while (1)
        {
          v177 = &v477[24 * v172];
          v180 = (_QWORD *)*((_QWORD *)v177 + 1);
          v178 = v177 + 8;
          v179 = v180;
          if (v180)
          {
            v181 = *v173;
            v182 = **v173;
            v183 = v178;
            do
            {
              v184 = v179[4];
              v185 = v184 < v182;
              if (v184 >= v182)
                v186 = v179;
              else
                v186 = v179 + 1;
              if (!v185)
                v183 = (char *)v179;
              v179 = (_QWORD *)*v186;
            }
            while (*v186);
            if (v183 != v178 && v182 >= *((_QWORD *)v183 + 4))
            {
              v187 = 0;
              v188 = &v480[6 * v172];
              v189 = v181[1];
              v190 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v189)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v189));
              v191 = *v188;
              v192 = v188[1];
              v193 = (v190 >> 7) ^ ((unint64_t)*v188 >> 12);
              v194 = v188[3];
              v195 = 0x101010101010101 * (v190 & 0x7F);
              while (1)
              {
                v196 = v193 & v194;
                v197 = *(_QWORD *)(v191 + v196);
                v198 = ((v197 ^ v195) - 0x101010101010101) & ~(v197 ^ v195) & 0x8080808080808080;
                if (v198)
                  break;
LABEL_241:
                if ((v197 & (~v197 << 6) & 0x8080808080808080) != 0)
                  goto LABEL_254;
                v187 += 8;
                v193 = v187 + v196;
              }
              while (1)
              {
                v199 = (v196 + (__clz(__rbit64(v198)) >> 3)) & v194;
                if (*(_QWORD *)(v192 + 8 * v199) == v189)
                  break;
                v198 &= v198 - 1;
                if (!v198)
                  goto LABEL_241;
              }
              if (v199 != v194)
              {
                v200 = &v477[24 * v176];
                v203 = (_QWORD *)*((_QWORD *)v200 + 1);
                v201 = v200 + 8;
                v202 = v203;
                if (v203)
                {
                  v204 = v181[2];
                  v205 = v201;
                  do
                  {
                    v206 = v202[4];
                    v207 = v206 < v204;
                    if (v206 >= v204)
                      v208 = v202;
                    else
                      v208 = v202 + 1;
                    if (!v207)
                      v205 = (char *)v202;
                    v202 = (_QWORD *)*v208;
                  }
                  while (*v208);
                  if (v205 != v201 && v204 >= *((_QWORD *)v205 + 4))
                    break;
                }
              }
            }
          }
LABEL_254:
          v173 += 3;
          if (v173 == v174)
            goto LABEL_356;
        }
        v427 = v176;
        v495[0] = &off_24F982EF8;
        v496 = v495;
        v209 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
        v210 = *((_DWORD *)v209 + 4);
        operations_research::sat::SatSolver::SetNumVariables(v209, v210 + 1);
        v211 = 2 * v210;
        if (v175 < v429)
        {
          *(_DWORD *)v175 = v211;
          v212 = (uint64_t)(v175 + 4);
          v213 = __pb;
          v465 = v175 + 4;
          v214 = v496;
          if (v496 == v495)
            goto LABEL_275;
          goto LABEL_258;
        }
        v216 = (v175 - __pb) >> 2;
        v217 = v216 + 1;
        if ((unint64_t)(v216 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        if ((v429 - __pb) >> 1 > v217)
          v217 = (v429 - __pb) >> 1;
        v218 = (unint64_t)(v429 - __pb) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v217;
        if (v218)
        {
          if (v218 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v219 = operator new(4 * v218);
          v220 = (int *)&v219[4 * v216];
          *v220 = v211;
          v212 = (uint64_t)(v220 + 1);
          v221 = __pb;
          if (v175 != __pb)
          {
LABEL_269:
            v222 = v175 - 4 - v221;
            if (v222 < 0xBC
              || &v219[v175 - __pb - 4 - (v222 & 0xFFFFFFFFFFFFFFFCLL)] > &v219[v175 - __pb - 4]
              || &v175[-(v222 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v175 - 4
              || (unint64_t)(__pb - v219) < 0x20)
            {
              v223 = v175;
            }
            else
            {
              v270 = (v222 >> 2) + 1;
              v271 = 4 * (v270 & 0x7FFFFFFFFFFFFFF8);
              v223 = &v175[-v271];
              v220 = (int *)((char *)v220 - v271);
              v272 = &v219[4 * v216 - 16];
              v273 = v175 - 16;
              v274 = v270 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v275 = *(_OWORD *)v273;
                *(v272 - 1) = *((_OWORD *)v273 - 1);
                *v272 = v275;
                v272 -= 2;
                v273 -= 32;
                v274 -= 8;
              }
              while (v274);
              if (v270 == (v270 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_272:
                v464 = v220;
                v465 = (_DWORD *)v212;
                v429 = &v219[4 * v218];
                v466 = v429;
                if (!v221)
                  goto LABEL_274;
LABEL_273:
                operator delete(v221);
                goto LABEL_274;
              }
            }
            do
            {
              v224 = *((_DWORD *)v223 - 1);
              v223 -= 4;
              *--v220 = v224;
            }
            while (v223 != v221);
            goto LABEL_272;
          }
        }
        else
        {
          v219 = 0;
          v220 = (int *)(4 * v216);
          *(_DWORD *)(4 * v216) = v211;
          v212 = 4 * v216 + 4;
          v221 = __pb;
          if (v175 != __pb)
            goto LABEL_269;
        }
        v464 = v220;
        v465 = (_DWORD *)v212;
        v429 = &v219[4 * v218];
        v466 = v429;
        if (v221)
          goto LABEL_273;
LABEL_274:
        v213 = (char *)v220;
        v465 = (_DWORD *)v212;
        v214 = v496;
        if (v496 == v495)
        {
LABEL_275:
          v214 = v495;
          v215 = 4;
          goto LABEL_276;
        }
LABEL_258:
        if (!v214)
          goto LABEL_277;
        v215 = 5;
LABEL_276:
        (*(void (**)(void))(*v214 + 8 * v215))();
LABEL_277:
        v225 = **v173;
        v226 = v462;
        __pb = v213;
        if (v462 < v463)
        {
          *(_QWORD *)v462 = v225;
          v227 = (uint64_t)(v226 + 8);
          goto LABEL_301;
        }
        v228 = v461;
        v229 = (v462 - v461) >> 3;
        v230 = v229 + 1;
        if ((unint64_t)(v229 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v231 = v463 - v461;
        if ((v463 - v461) >> 2 > v230)
          v230 = v231 >> 2;
        if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF8)
          v232 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v232 = v230;
        if (v232)
        {
          if (v232 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v233 = v232;
          v234 = operator new(8 * v232);
          v232 = v233;
          v235 = &v234[8 * v229];
          *(_QWORD *)v235 = v225;
          v227 = (uint64_t)(v235 + 8);
          if (v226 == v228)
            goto LABEL_299;
LABEL_293:
          v236 = v226 - 8 - v228;
          if (v236 < 0x58)
            goto LABEL_593;
          if ((unint64_t)(v228 - v234) < 0x20)
            goto LABEL_593;
          v237 = (v236 >> 3) + 1;
          v238 = 8 * (v237 & 0x3FFFFFFFFFFFFFFCLL);
          v239 = &v226[-v238];
          v235 -= v238;
          v240 = &v234[8 * v229 - 16];
          v241 = v226 - 16;
          v242 = v237 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v243 = *(_OWORD *)v241;
            *(v240 - 1) = *((_OWORD *)v241 - 1);
            *v240 = v243;
            v240 -= 2;
            v241 -= 32;
            v242 -= 4;
          }
          while (v242);
          v226 = v239;
          if (v237 != (v237 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_593:
            do
            {
              v244 = *((_QWORD *)v226 - 1);
              v226 -= 8;
              *((_QWORD *)v235 - 1) = v244;
              v235 -= 8;
            }
            while (v226 != v228);
          }
          goto LABEL_299;
        }
        v234 = 0;
        v235 = (char *)(8 * v229);
        *(_QWORD *)(8 * v229) = v225;
        v227 = 8 * v229 + 8;
        if (v226 != v228)
          goto LABEL_293;
LABEL_299:
        v461 = v235;
        v463 = &v234[8 * v232];
        if (v228)
          operator delete(v228);
LABEL_301:
        v462 = (char *)v227;
        v245 = (*v173)[1];
        v246 = v459;
        if (v459 < v460)
          break;
        v260 = v458;
        v261 = (v459 - v458) >> 3;
        v262 = v261 + 1;
        if ((unint64_t)(v261 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v263 = v460 - v458;
        if ((v460 - v458) >> 2 > v262)
          v262 = v263 >> 2;
        if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF8)
          v264 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v264 = v262;
        if (v264)
        {
          if (v264 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v265 = v264;
          v266 = operator new(8 * v264);
          v264 = v265;
          v267 = &v266[8 * v261];
          *(_QWORD *)v267 = v245;
          v268 = (uint64_t)(v267 + 8);
          if (v246 == v260)
          {
LABEL_327:
            v176 = v427;
            goto LABEL_342;
          }
        }
        else
        {
          v266 = 0;
          v267 = (char *)(8 * v261);
          *(_QWORD *)(8 * v261) = v245;
          v268 = 8 * v261 + 8;
          if (v246 == v260)
            goto LABEL_327;
        }
        v269 = v246 - 8 - v260;
        if (v269 < 0x58)
        {
          v176 = v427;
          do
          {
LABEL_341:
            v283 = *((_QWORD *)v246 - 1);
            v246 -= 8;
            *((_QWORD *)v267 - 1) = v283;
            v267 -= 8;
          }
          while (v246 != v260);
          goto LABEL_342;
        }
        v176 = v427;
        if ((unint64_t)(v260 - v266) < 0x20)
          goto LABEL_341;
        v276 = (v269 >> 3) + 1;
        v277 = 8 * (v276 & 0x3FFFFFFFFFFFFFFCLL);
        v278 = &v246[-v277];
        v267 -= v277;
        v279 = &v266[8 * v261 - 16];
        v280 = (__int128 *)(v246 - 16);
        v281 = v276 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v282 = *v280;
          *(v279 - 1) = *(v280 - 1);
          *v279 = v282;
          v279 -= 2;
          v280 -= 2;
          v281 -= 4;
        }
        while (v281);
        v246 = v278;
        if (v276 != (v276 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_341;
LABEL_342:
        v458 = v267;
        v460 = &v266[8 * v264];
        if (v260)
          operator delete(v260);
        v459 = (char *)v268;
        if (v176 != v432)
          goto LABEL_345;
LABEL_303:
        v247 = 0;
        v249 = v456;
        v248 = v457;
        if (v456 >= v457)
          goto LABEL_304;
LABEL_346:
        *(_QWORD *)v249 = v247;
        v456 = v249 + 8;
        v173 += 3;
        v175 = (char *)v212;
        if (v173 == v174)
          goto LABEL_356;
      }
      *(_QWORD *)v459 = v245;
      v176 = v427;
      v459 = v246 + 8;
      if (v427 == v432)
        goto LABEL_303;
LABEL_345:
      v247 = (*v173)[2];
      v249 = v456;
      v248 = v457;
      if (v456 < v457)
        goto LABEL_346;
LABEL_304:
      v250 = v455;
      v251 = (v249 - v455) >> 3;
      v252 = v251 + 1;
      if ((unint64_t)(v251 + 1) >> 61)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v253 = v248 - v455;
      if (v253 >> 2 > v252)
        v252 = v253 >> 2;
      if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8)
        v254 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v254 = v252;
      if (v254)
      {
        if (v254 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v255 = v254;
        v256 = operator new(8 * v254);
        v254 = v255;
        v257 = &v256[8 * v251];
        *(_QWORD *)v257 = v247;
        v258 = (uint64_t)(v257 + 8);
        if (v249 == v250)
        {
LABEL_329:
          v176 = v427;
          goto LABEL_353;
        }
      }
      else
      {
        v256 = 0;
        v257 = (char *)(8 * v251);
        *(_QWORD *)(8 * v251) = v247;
        v258 = 8 * v251 + 8;
        if (v249 == v250)
          goto LABEL_329;
      }
      v259 = v249 - 8 - v250;
      if (v259 < 0x58)
      {
        v176 = v427;
        do
        {
LABEL_352:
          v291 = *((_QWORD *)v249 - 1);
          v249 -= 8;
          *((_QWORD *)v257 - 1) = v291;
          v257 -= 8;
        }
        while (v249 != v250);
        goto LABEL_353;
      }
      v176 = v427;
      if ((unint64_t)(v250 - v256) < 0x20)
        goto LABEL_352;
      v284 = (v259 >> 3) + 1;
      v285 = 8 * (v284 & 0x3FFFFFFFFFFFFFFCLL);
      v286 = &v249[-v285];
      v257 -= v285;
      v287 = &v256[8 * v251 - 16];
      v288 = (__int128 *)(v249 - 16);
      v289 = v284 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v290 = *v288;
        *(v287 - 1) = *(v288 - 1);
        *v287 = v290;
        v287 -= 2;
        v288 -= 2;
        v289 -= 4;
      }
      while (v289);
      v249 = v286;
      if (v284 != (v284 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_352;
LABEL_353:
      v455 = v257;
      v457 = &v256[8 * v254];
      if (v250)
        operator delete(v250);
      v456 = (char *)v258;
      v173 += 3;
      v175 = (char *)v212;
    }
    while (v173 != v174);
LABEL_356:
    v452 = 0;
    v453 = 0;
    v454 = 0;
    v292 = v459 - v458;
    __pc = v458;
    if (v459 == v458)
    {
      v294 = 0;
      v293 = 0;
    }
    else
    {
      if (v292 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v293 = (char *)operator new(v459 - v458);
      v452 = v293;
      v294 = &v293[8 * (v292 >> 3)];
      v454 = v294;
      memcpy(v293, __pc, v292);
      v453 = v294;
    }
LABEL_361:
    v295 = 126 - 2 * __clz((v294 - v293) >> 3);
    if (v294 == v293)
      v296 = 0;
    else
      v296 = v295;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>((uint64_t)v293, v294, (uint64_t)v440, v296, 1);
    if (v294 != v293)
    {
      v297 = v293 + 8;
      while (v297 != v294)
      {
        v298 = *((_QWORD *)v297 - 1);
        v299 = *(_QWORD *)v297;
        v297 += 8;
        if (v298 == v299)
        {
          v300 = v297 - 16;
          while (v297 != v294)
          {
            v301 = v298;
            v298 = *(_QWORD *)v297;
            if (v301 != *(_QWORD *)v297)
            {
              *((_QWORD *)v300 + 1) = v298;
              v300 += 8;
            }
            v297 += 8;
          }
          v307 = (char *)(v294 - (v300 + 8));
          if (v294 == v300 + 8)
            break;
          v306 = (v300 + 8 - v293) >> 3;
          v302 = &v293[8 * v306];
          v303 = v300 + 8 - v302;
          if (v303)
            memmove(&v293[8 * v306], &v307[(_QWORD)v302], v300 + 8 - v302);
          v294 = &v302[v303];
          v453 = v294;
          v304 = *(_QWORD *)&v475[24];
          if (*(_QWORD *)&v475[24] >= 0x80uLL)
            goto LABEL_383;
          goto LABEL_377;
        }
      }
    }
    v304 = *(_QWORD *)&v475[24];
    if (*(_QWORD *)&v475[24] < 0x80uLL)
    {
LABEL_377:
      if (v304)
      {
        *(_QWORD *)&v475[16] = 0;
        memset(*(void **)v475, 128, v304 + 8);
        *(_BYTE *)(*(_QWORD *)v475 + *(_QWORD *)&v475[24]) = -1;
        v304 = *(_QWORD *)&v475[24];
        v305 = v304 - (v304 >> 3);
        if (*(_QWORD *)&v475[24] == 7)
          v305 = 6;
        v476 = v305 - *(_QWORD *)&v475[16];
      }
    }
    else
    {
LABEL_383:
      operator delete(*(void **)v475);
      v304 = 0;
      *(_QWORD *)v475 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v476 = 0;
      memset(&v475[8], 0, 24);
    }
    v308 = *(unint64_t **)&v475[32];
    if (!*(_QWORD *)&v475[32])
    {
      v309 = v294 - v293;
      v310 = (v294 - v293) >> 3;
      if ((unint64_t)(v294 - v293) >= 9)
        goto LABEL_386;
LABEL_449:
      v440[0] = (void *)v310;
      v439 = 1;
      if (v309 != 8)
      {
        v449 = (uint64_t *)google::MakeCheckOpString<unsigned long,int>((int)v440, (int)&v439, "s.size() == 1");
        if (v449)
        {
          google::LogMessageFatal::LogMessageFatal((unint64_t *)v440, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 711, &v449);
          google::LogMessage::stream((google::LogMessage *)v440);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v440);
        }
      }
      v350 = *(_QWORD *)v293;
      v351 = *(unsigned int *)(*v437 + 4 * v172);
      v489 = &off_24F983D90;
      v490[0] = v351;
      v490[1] = v350;
      v491 = &v489;
      operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)v490, a2);
      v352 = v491;
      if (v491 == &v489)
      {
        v352 = &v489;
        v353 = 4;
LABEL_454:
        (*v352)[v353]();
      }
      else if (v491)
      {
        v353 = 5;
        goto LABEL_454;
      }
      v354 = *(unsigned int *)(*v437 + 4 * v172);
      v486 = &off_24F983E10;
      v487[0] = v354;
      v487[1] = v350;
      v488 = &v486;
      operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)v487, a2);
      v355 = v488;
      if (v488 == &v486)
      {
        v355 = &v486;
        v356 = 4;
LABEL_459:
        (*v355)[v356]();
      }
      else if (v488)
      {
        v356 = 5;
        goto LABEL_459;
      }
LABEL_460:
      operator delete(v293);
      v440[0] = 0;
      v440[1] = 0;
      *(_QWORD *)&v441 = 0;
      v346 = v455;
      v347 = v456 - v455;
      if (v456 == v455)
        goto LABEL_461;
LABEL_446:
      if (v347 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v348 = (char *)operator new(v347);
      v349 = &v348[8 * (v347 >> 3)];
      v440[0] = v348;
      *(_QWORD *)&v441 = v349;
      memcpy(v348, v346, v347);
      goto LABEL_462;
    }
    *(_QWORD *)(*(_QWORD *)&v475[32] + 8) = 0;
    *v308 = v304;
    v308[4] = 0;
    v308[2] = 0;
    v309 = v294 - v293;
    v310 = (v294 - v293) >> 3;
    if ((unint64_t)(v294 - v293) < 9)
      goto LABEL_449;
LABEL_386:
    v449 = 0;
    v450 = 0;
    v451 = 0;
    if ((v309 & 0x8000000000000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v311 = (uint64_t *)operator new(v309);
    v449 = v311;
    v450 = v311;
    v451 = &v311[v310];
    v312 = v311;
    v430 = v293;
    if (v293 != v294)
    {
      while (1)
      {
        while (1)
        {
          v313 = *(_QWORD *)v293;
          if (v311 >= v451)
            break;
          *v311++ = v313;
          v450 = v311;
          v293 += 8;
          if (v293 == v294)
            goto LABEL_417;
        }
        v314 = v449;
        v315 = (char *)v311 - (char *)v449;
        v316 = v311 - v449;
        v317 = v316 + 1;
        if ((unint64_t)(v316 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v318 = (char *)v451 - (char *)v449;
        if (((char *)v451 - (char *)v449) >> 2 > v317)
          v317 = v318 >> 2;
        v319 = (unint64_t)v318 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v317;
        if (v319)
        {
          if (v319 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v320 = operator new(8 * v319);
          v321 = (uint64_t *)&v320[8 * v316];
          *v321 = v313;
          v322 = (uint64_t)(v321 + 1);
          if (v311 == v314)
          {
LABEL_408:
            v449 = v321;
            v450 = (uint64_t *)v322;
            v451 = (uint64_t *)&v320[8 * v319];
            if (!v314)
              goto LABEL_405;
LABEL_404:
            operator delete(v314);
            goto LABEL_405;
          }
        }
        else
        {
          v320 = 0;
          v321 = (uint64_t *)(8 * v316);
          *(_QWORD *)(8 * v316) = v313;
          v322 = 8 * v316 + 8;
          if (v311 == v314)
            goto LABEL_408;
        }
        v323 = (char *)(v311 - 1) - (char *)v314;
        if (v323 < 0x168
          || &v320[v315 - 8 - (v323 & 0xFFFFFFFFFFFFFFF8)] > &v320[v315 - 8]
          || (uint64_t *)((char *)v311 - (v323 & 0xFFFFFFFFFFFFFFF8) - 8) > v311 - 1
          || (unint64_t)((char *)v311 - v320 - v315) < 0x20)
        {
          break;
        }
        v326 = (v323 >> 3) + 1;
        v327 = 8 * (v326 & 0x3FFFFFFFFFFFFFFCLL);
        v324 = &v311[v327 / 0xFFFFFFFFFFFFFFF8];
        v321 = (uint64_t *)((char *)v321 - v327);
        v328 = &v320[8 * v316 - 16];
        v329 = v311 - 2;
        v330 = v326 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v331 = *(_OWORD *)v329;
          *(v328 - 1) = *((_OWORD *)v329 - 1);
          *v328 = v331;
          v328 -= 2;
          v329 -= 4;
          v330 -= 4;
        }
        while (v330);
        if (v326 != (v326 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_402;
LABEL_403:
        v449 = v321;
        v450 = (uint64_t *)v322;
        v451 = (uint64_t *)&v320[8 * v319];
        if (v314)
          goto LABEL_404;
LABEL_405:
        v311 = (uint64_t *)v322;
        v450 = (uint64_t *)v322;
        v293 += 8;
        if (v293 == v294)
        {
LABEL_417:
          v312 = v449;
          goto LABEL_418;
        }
      }
      v324 = v311;
      do
      {
LABEL_402:
        v325 = *--v324;
        *--v321 = v325;
      }
      while (v324 != v314);
      goto LABEL_403;
    }
LABEL_418:
    v332 = *(_DWORD *)(*v437 + 4 * v172);
    v446 = 0;
    v447 = 0;
    v445 = 0;
    v333 = (char *)v311 - (char *)v312;
    v293 = v430;
    if (v333)
    {
      if (v333 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v445 = operator new(v333);
      v446 = v445;
      v334 = (char *)v445 + 8 * (v333 >> 3);
      v447 = v334;
      memcpy(v445, v312, v333);
      v446 = v334;
    }
    operations_research::Domain::FromValues((int64_t **)&v445, v448);
    operations_research::sat::IntegerTrail::UpdateInitialDomain(v431, v332, (operations_research::Domain *)v448);
    if ((v448[0] & 1) != 0)
      operator delete((void *)v448[1]);
    if (v445)
    {
      v446 = v445;
      operator delete(v445);
    }
    v335 = *(_DWORD *)(*v437 + 4 * v172);
    v492 = &off_24F980458;
    v493 = v335;
    v494 = &v492;
    v336 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v336, v493))
      operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v336, v493);
    operations_research::sat::IntegerEncoder::FullDomainEncoding(v336, v493, (char **)v444);
    if (v444[0])
    {
      v444[1] = v444[0];
      operator delete(v444[0]);
    }
    v337 = v494;
    if (v494 == &v492)
    {
      v337 = &v492;
      v338 = 4;
LABEL_433:
      (*v337)[v338]();
    }
    else if (v494)
    {
      v338 = 5;
      goto LABEL_433;
    }
    v339 = v442;
    v340 = v443;
    v442 = 0;
    v443 = 0;
    v341 = *(void **)v475;
    v342 = *(_OWORD *)v440;
    v343 = v441;
    v440[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v440[1] = 0;
    v441 = 0uLL;
    v344 = *(_QWORD *)&v475[24];
    v345 = *(_QWORD **)&v475[32];
    *(_OWORD *)v475 = v342;
    *(_OWORD *)&v475[16] = v343;
    *(_QWORD *)&v475[32] = v339;
    v476 = v340;
    if (v344)
      operator delete(v341);
    if (v345)
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v345);
    if (*((_QWORD *)&v441 + 1))
    {
      operator delete(v440[0]);
      v440[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v443 = 0;
      v441 = 0uLL;
      v440[1] = 0;
    }
    if (v442)
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v442);
    if (v449)
    {
      v450 = v449;
      operator delete(v449);
    }
    if (v430)
      goto LABEL_460;
    v440[0] = 0;
    v440[1] = 0;
    *(_QWORD *)&v441 = 0;
    v346 = v455;
    v347 = v456 - v455;
    if (v456 != v455)
      goto LABEL_446;
LABEL_461:
    v349 = 0;
    v348 = 0;
LABEL_462:
    v357 = 126 - 2 * __clz((v349 - v348) >> 3);
    if (v349 == v348)
      v358 = 0;
    else
      v358 = v357;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>((uint64_t)v348, v349, (uint64_t)&v452, v358, 1);
    if (v349 != v348)
    {
      v359 = v348 + 8;
      while (v359 != v349)
      {
        v360 = *((_QWORD *)v359 - 1);
        v361 = *(_QWORD *)v359;
        v359 += 8;
        if (v360 == v361)
        {
          v362 = v359 - 16;
          while (v359 != v349)
          {
            v363 = v360;
            v360 = *(_QWORD *)v359;
            if (v363 != *(_QWORD *)v359)
            {
              *((_QWORD *)v362 + 1) = v360;
              v362 += 8;
            }
            v359 += 8;
          }
          v369 = (char *)(v349 - (v362 + 8));
          if (v349 == v362 + 8)
            break;
          v368 = (v362 + 8 - v348) >> 3;
          v364 = &v348[8 * v368];
          v365 = v362 + 8 - v364;
          if (v365)
            memmove(&v348[8 * v368], &v369[(_QWORD)v364], v362 + 8 - v364);
          v349 = &v364[v365];
          v440[1] = v349;
          v366 = v469;
          if ((unint64_t)v469 >= 0x80)
            goto LABEL_484;
          goto LABEL_478;
        }
      }
    }
    v366 = v469;
    if ((unint64_t)v469 < 0x80)
    {
LABEL_478:
      if (v366)
      {
        *((_QWORD *)&v468 + 1) = 0;
        memset((void *)v467, 128, v366 + 8);
        *(_BYTE *)(v467 + v469) = -1;
        v366 = v469;
        v367 = v366 - (v366 >> 3);
        if ((_QWORD)v469 == 7)
          v367 = 6;
        v470 = v367 - *((_QWORD *)&v468 + 1);
      }
    }
    else
    {
LABEL_484:
      operator delete((void *)v467);
      v366 = 0;
      v467 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v470 = 0;
      *(_QWORD *)&v469 = 0;
      v468 = 0uLL;
    }
    v370 = (unint64_t *)*((_QWORD *)&v469 + 1);
    if (*((_QWORD *)&v469 + 1))
    {
      *(_QWORD *)(*((_QWORD *)&v469 + 1) + 8) = 0;
      *v370 = v366;
      v370[4] = 0;
      v370[2] = 0;
      v371 = v349 - v348;
      if (v349 - v348 != 16)
        goto LABEL_510;
LABEL_487:
      v484[0] = &off_24F982EF8;
      v485 = v484;
      v372 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
      v373 = *((_DWORD *)v372 + 4);
      operations_research::sat::SatSolver::SetNumVariables(v372, v373 + 1);
      v374 = v485;
      if (v485 == v484)
      {
        v374 = v484;
        v375 = 4;
      }
      else
      {
        if (!v485)
          goto LABEL_492;
        v375 = 5;
      }
      (*(void (**)(void))(*v374 + 8 * v375))();
LABEL_492:
      v376 = 0;
      v377 = 2 * v373;
      v378 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v348)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(_QWORD *)v348));
      v379 = v467;
      v380 = v468;
      v381 = v467 >> 12;
      v382 = (v467 >> 12) ^ (v378 >> 7);
      v383 = v469;
      while (1)
      {
        v384 = v382 & v469;
        v385 = *(_QWORD *)(v467 + v384);
        v386 = ((v385 ^ (0x101010101010101 * (v378 & 0x7F))) - 0x101010101010101) & ~(v385 ^ (0x101010101010101
                                                                                                * (v378 & 0x7F))) & 0x8080808080808080;
        if (v386)
          break;
LABEL_496:
        if ((v385 & (~v385 << 6) & 0x8080808080808080) != 0)
        {
          v387 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&v467, v378);
          v380 = v468;
          *(_QWORD *)(v468 + 12 * v387) = *(_QWORD *)v348;
          v379 = v467;
          v383 = v469;
          v381 = v467 >> 12;
          goto LABEL_500;
        }
        v376 += 8;
        v382 = v376 + v384;
      }
      while (1)
      {
        v387 = (v384 + (__clz(__rbit64(v386)) >> 3)) & v469;
        if (*(_QWORD *)(v468 + 12 * v387) == *(_QWORD *)v348)
          break;
        v386 &= v386 - 1;
        if (!v386)
          goto LABEL_496;
      }
LABEL_500:
      v388 = 0;
      *(_DWORD *)(v380 + 12 * v387 + 8) = v377;
      v389 = v377 | 1;
      v390 = *((_QWORD *)v349 - 1);
      v391 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v390)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v390));
      v392 = v381 ^ (v391 >> 7);
      v393 = v468;
      while (1)
      {
        v394 = v392 & v383;
        v395 = *(_QWORD *)(v379 + v394);
        v396 = ((v395 ^ (0x101010101010101 * (v391 & 0x7F))) - 0x101010101010101) & ~(v395 ^ (0x101010101010101
                                                                                                * (v391 & 0x7F))) & 0x8080808080808080;
        if (v396)
          break;
LABEL_504:
        if ((v395 & (~v395 << 6) & 0x8080808080808080) != 0)
        {
          v397 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&v467, v391);
          v393 = v468;
          *(_QWORD *)(v468 + 12 * v397) = *((_QWORD *)v349 - 1);
          goto LABEL_508;
        }
        v388 += 8;
        v392 = v388 + v394;
      }
      while (1)
      {
        v397 = (v394 + (__clz(__rbit64(v396)) >> 3)) & v383;
        if (*(_QWORD *)(v468 + 12 * v397) == v390)
          break;
        v396 &= v396 - 1;
        if (!v396)
          goto LABEL_504;
      }
LABEL_508:
      *(_DWORD *)(v393 + 12 * v397 + 8) = v389;
      goto LABEL_526;
    }
    v371 = v349 - v348;
    if (v349 - v348 == 16)
      goto LABEL_487;
LABEL_510:
    if (v348 != v349 && v371 >= 9)
    {
      v398 = v348;
LABEL_519:
      while (2)
      {
        v405 = *(_QWORD *)v398;
        v482[0] = &off_24F982EF8;
        v483 = v482;
        v406 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
        v407 = *((_DWORD *)v406 + 4);
        operations_research::sat::SatSolver::SetNumVariables(v406, v407 + 1);
        v408 = v483;
        if (v483 == v482)
        {
          v408 = v482;
          v409 = 4;
LABEL_523:
          (*(void (**)(void))(*v408 + 8 * v409))();
        }
        else if (v483)
        {
          v409 = 5;
          goto LABEL_523;
        }
        v403 = 0;
        v410 = 2 * v407;
        v411 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v405)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v405));
        for (j = (v467 >> 12) ^ (v411 >> 7); ; j = v403 + v399)
        {
          v399 = j & v469;
          v400 = *(_QWORD *)(v467 + v399);
          v401 = ((v400 ^ (0x101010101010101 * (v411 & 0x7F))) - 0x101010101010101) & ~(v400 ^ (0x101010101010101
                                                                                                  * (v411 & 0x7F))) & 0x8080808080808080;
          if (v401)
          {
            while (1)
            {
              v402 = (v399 + (__clz(__rbit64(v401)) >> 3)) & v469;
              if (*(_QWORD *)(v468 + 12 * v402) == v405)
                break;
              v401 &= v401 - 1;
              if (!v401)
                goto LABEL_516;
            }
            *(_DWORD *)(v468 + 12 * v402 + 8) = v410;
            v398 += 8;
            if (v398 == v349)
              goto LABEL_526;
            goto LABEL_519;
          }
LABEL_516:
          if ((v400 & (~v400 << 6) & 0x8080808080808080) != 0)
            break;
          v403 += 8;
        }
        v412 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&v467, v411);
        v413 = v468;
        *(_QWORD *)(v468 + 12 * v412) = v405;
        *(_DWORD *)(v413 + 12 * v412 + 8) = v410;
        v398 += 8;
        if (v398 != v349)
          continue;
        break;
      }
    }
LABEL_526:
    if (v348)
      operator delete(v348);
    if (*((_QWORD *)&v472 + 1))
    {
      v440[0] = 0;
      v440[1] = 0;
      *(_QWORD *)&v441 = 0;
    }
    if (*(_QWORD *)&v475[16])
    {
      v440[0] = 0;
      v440[1] = 0;
      *(_QWORD *)&v441 = 0;
    }
    if (*((_QWORD *)&v468 + 1))
    {
      v440[0] = 0;
      v440[1] = 0;
      *(_QWORD *)&v441 = 0;
    }
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::operator=((__int128 *)&v471, (char **)&v467);
    if (v346)
      operator delete(v346);
    if (__pc)
      operator delete(__pc);
    if (v461)
      operator delete(v461);
    if (v464)
      operator delete(v464);
    if (++v172 != v432)
      continue;
    break;
  }
  if ((_QWORD)v469)
  {
    operator delete((void *)v467);
    v467 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v470 = 0;
    *(_QWORD *)&v469 = 0;
    v468 = 0uLL;
  }
LABEL_546:
  if (*((_QWORD *)&v469 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v469 + 1));
  if ((_QWORD)v473)
  {
    operator delete((void *)v471);
    v471 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v474 = 0;
    *(_QWORD *)&v473 = 0;
    v472 = 0uLL;
  }
  if (*((_QWORD *)&v473 + 1))
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v473 + 1));
  if (*(_QWORD *)&v475[24])
  {
    operator delete(*(void **)v475);
    *(_QWORD *)v475 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v476 = 0;
    memset(&v475[8], 0, 24);
  }
  if (*(_QWORD *)&v475[32])
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*(_QWORD **)&v475[32]);
  v414 = v477;
  if (v477)
  {
    v415 = v478;
    if (v478 != v477)
    {
      do
      {
        v416 = v415 - 24;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v415 - 24), *((_QWORD **)v415 - 2));
        v415 = v416;
      }
      while (v416 != v414);
      v414 = v477;
    }
    operator delete(v414);
  }
  v417 = v480;
  if (v480)
  {
    v418 = v481;
    v419 = v480;
    if (v481 != v480)
    {
      do
      {
        if (*(v418 - 3))
        {
          operator delete((void *)*(v418 - 6));
          *(v418 - 1) = 0;
          *(v418 - 6) = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v418 - 5) = 0;
          *(v418 - 4) = 0;
          *(v418 - 3) = 0;
        }
        v420 = (_QWORD *)*(v418 - 2);
        if (v420)
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v420);
        v418 -= 6;
      }
      while (v418 != v417);
      v419 = v480;
    }
    v481 = v417;
    operator delete(v419);
  }
}

void sub_22DC1E4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a71);
}

void sub_22DC1E504(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_22DC1EB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a65);
}

void sub_22DC1EB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a71, *(_QWORD **)(v71 + 248));
  _Unwind_Resume(a1);
}

_QWORD **std::set<long long>::set[abi:ne180100]<std::__wrap_iter<long long const*>>(_QWORD **a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = (uint64_t **)std::__tree<long long>::__find_equal<long long>(a1, v4, &v13, &v12, v6);
      if (!*v7)
      {
        v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = *v6;
        v9 = v13;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = v9;
        *v7 = v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = *v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22DC1EC0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

__int128 *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::operator=(__int128 *a1, char **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::raw_hash_set((uint64_t)&v12, a2);
  v3 = *a1;
  v4 = v12;
  v5 = v13;
  v12 = *a1;
  v6 = (_QWORD *)*((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v8 = v15;
  *((_QWORD *)a1 + 4) = v14;
  *((_QWORD *)a1 + 5) = v8;
  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  *a1 = v4;
  a1[1] = v5;
  *(_QWORD *)&v13 = v9;
  *((_QWORD *)&v13 + 1) = v10;
  v14 = v6;
  v15 = v7;
  if (v10)
  {
    operator delete((void *)v3);
    v15 = 0;
    *(_QWORD *)&v12 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((_QWORD *)&v12 + 1) = 0;
    v13 = 0uLL;
    v6 = v14;
  }
  if (v6)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v6);
  return a1;
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::raw_hash_set(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  unint64_t v22;

  *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a2[2];
  if (v4 == (char *)7)
  {
    v5 = 8;
  }
  else
  {
    v5 = (unint64_t)&v4[(uint64_t)(v4 - 1) / 7];
    if (!v5)
      goto LABEL_5;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::resize((char **)a1, (char *)(0xFFFFFFFFFFFFFFFFLL >> __clz(v5)));
LABEL_5:
  v6 = *a2;
  v7 = a2[1];
  if (**a2 > -2)
  {
    v8 = *a2;
    v11 = a2[3];
    v10 = &v11[(_QWORD)v6];
    if (v6 == &v11[(_QWORD)v6])
      goto LABEL_20;
  }
  else
  {
    v8 = *a2;
    do
    {
      v9 = (__clz(__rbit64(((*(_QWORD *)v8 >> 7) & ~*(_QWORD *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v8 += v9;
      v7 += 12 * v9;
    }
    while (*v8 < -1);
    v10 = &a2[3][(_QWORD)v6];
    if (v8 == v10)
      goto LABEL_20;
  }
  do
  {
    v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(_QWORD *)v7)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + *(_QWORD *)v7));
    v13 = *(char **)a1;
    v14 = *(_QWORD *)(a1 + 24);
    v15 = ((v12 >> 7) ^ (*(_QWORD *)a1 >> 12)) & v14;
    v16 = 0;
    for (i = *(_QWORD *)(*(_QWORD *)a1 + v15) & (~*(_QWORD *)(*(_QWORD *)a1 + v15) << 7) & 0x8080808080808080;
          !i;
          i = *(_QWORD *)&v13[v15] & (~*(_QWORD *)&v13[v15] << 7) & 0x8080808080808080)
    {
      v16 += 8;
      v15 = (v16 + v15) & v14;
    }
    v18 = (v15 + (__clz(__rbit64(i)) >> 3)) & v14;
    v13[v18] = v12 & 0x7F;
    *(_BYTE *)((*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + ((v18 - 8) & *(_QWORD *)(a1 + 24)) + 1) = v12 & 0x7F;
    v19 = *(_QWORD *)(a1 + 8) + 12 * v18;
    *(_QWORD *)v19 = *(_QWORD *)v7;
    *(_DWORD *)(v19 + 8) = *((_DWORD *)v7 + 2);
    v20 = *(unint64_t **)(a1 + 32);
    if (v20)
      absl::lts_2020_02_25::container_internal::RecordInsertSlow(v20, v12, v16);
    v21 = *++v8;
    v7 += 12;
    if (v21 <= -2)
    {
      do
      {
        v22 = (__clz(__rbit64(((*(_QWORD *)v8 >> 7) & ~*(_QWORD *)v8 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v8 += v22;
        v7 += 12 * v22;
      }
      while (*v8 < -1);
    }
  }
  while (v8 != v10);
LABEL_20:
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 40) -= a2[2];
  return a1;
}

void sub_22DC1EF34(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

void sub_22DC1EF48(_Unwind_Exception *a1)
{
  uint64_t v1;

  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~raw_hash_set(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::ThetaLambdaTree(uint64_t result)
{
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

_OWORD *operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::Reset(_DWORD *a1, int a2)
{
  int v3;
  int64x2_t v4;
  int v5;
  _OWORD *result;
  int v7;
  int64x2_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (a2 & 1) + a2;
  v4 = vdupq_n_s64(0x8000000000000002);
  v5 = 2;
  if (v3 <= 2)
    v3 = 2;
  *a1 = a2;
  a1[1] = v3;
  v8 = v4;
  v9 = 0;
  v10 = 0;
  result = std::vector<operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::TreeNode,std::allocator<operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::TreeNode>>::assign((uint64_t)(a1 + 4), (2 * v3), &v8);
  do
  {
    v7 = v5;
    v5 *= 2;
  }
  while (v7 < a1[1]);
  a1[2] = v7;
  return result;
}

_OWORD *std::vector<operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::TreeNode,std::allocator<operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::TreeNode>>::assign(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_OWORD **)a1;
  if (a2 > (v6 - (uint64_t)result) >> 5)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 59)
      goto LABEL_24;
    v8 = v6 >> 4;
    if (v6 >> 4 <= a2)
      v8 = a2;
    v9 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0;
    v10 = 0x7FFFFFFFFFFFFFFLL;
    if (!v9)
      v10 = v8;
    if (v10 >> 59)
LABEL_24:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = 2 * v10;
    result = operator new(32 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 32 * a2;
    v13 = (uint64_t)&result[2 * a2];
    do
    {
      v14 = a3[1];
      *result = *a3;
      result[1] = v14;
      result += 2;
      v12 -= 32;
    }
    while (v12);
    goto LABEL_23;
  }
  v15 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)result) >> 5;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)result) >> 5;
  for (; v16; --v16)
  {
    v17 = a3[1];
    *result = *a3;
    result[1] = v17;
    result += 2;
  }
  if (a2 <= v15)
  {
    v13 = *(_QWORD *)a1 + 32 * a2;
LABEL_23:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v18 = *(_OWORD **)(a1 + 8);
  v19 = &v18[2 * (a2 - v15)];
  v20 = 32 * a2 - 32 * v15;
  do
  {
    v21 = a3[1];
    *v18 = *a3;
    v18[1] = v21;
    v18 += 2;
    v20 -= 32;
  }
  while (v20);
  *(_QWORD *)(a1 + 8) = v19;
  return result;
}

int8x16_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  int64x2_t v20;
  int64x2_t v21;
  int8x16_t result;
  BOOL v23;

  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)(a1 + 8) + a2;
  if (v6 < 2 * v5)
    v5 = 0;
  v7 = v6 - v5;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)(v8 + 32 * v7);
  *v9 = a4 + a3;
  v9[1] = a5 + a3;
  v9[2] = a4;
  v9[3] = a5 - a4;
  do
  {
    v10 = (uint64_t *)(v8 + 32 * (v7 & 0x7FFFFFFFFFFFFFELL));
    v11 = *v10;
    v12 = v10[1];
    v13 = (int64x2_t *)(v8 + ((32 * v7) | 0x20));
    v14 = v13[1].u64[0];
    v15 = v13[1].i64[1];
    if (v12 <= v15 + *v10)
      v12 = v15 + *v10;
    v16 = v10[2];
    v17 = v10[3];
    v18 = v14 + v16;
    if (v15 > v17)
      v17 = v13[1].i64[1];
    v19 = (int8x16_t *)(v8 + 32 * ((uint64_t)v7 >> 1));
    v20.i64[0] = v11;
    v20.i64[1] = v12;
    v21 = vaddq_s64(v20, vdupq_n_s64(v14));
    result = vbslq_s8((int8x16_t)vcgtq_s64(*v13, v21), *(int8x16_t *)v13, (int8x16_t)v21);
    *v19 = result;
    v19[1].i64[0] = v18;
    v19[1].i64[1] = v17;
    v23 = v7 <= 3;
    v7 >>= 1;
  }
  while (!v23);
  return result;
}

uint64_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetLeafFromEvent(uint64_t a1, int a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_DWORD *)(a1 + 8) + a2;
  if (v3 < 2 * v2)
    v2 = 0;
  return (v3 - v2);
}

int8x16_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::AddOrUpdateOptionalEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t result;
  BOOL v22;

  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)(a1 + 8) + a2;
  if (v5 < 2 * v4)
    v4 = 0;
  v6 = v5 - v4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (_QWORD *)(v7 + 32 * v6);
  *v8 = 0x8000000000000002;
  v8[1] = a4 + a3;
  v8[2] = 0;
  v8[3] = a4;
  do
  {
    v9 = (uint64_t *)(v7 + 32 * (v6 & 0x7FFFFFFFFFFFFFELL));
    v10 = *v9;
    v11 = v9[1];
    v12 = (int64x2_t *)(v7 + ((32 * v6) | 0x20));
    v13 = v12[1].u64[0];
    v14 = v12[1].i64[1];
    if (v11 <= v14 + *v9)
      v11 = v14 + *v9;
    v15 = v9[2];
    v16 = v9[3];
    v17 = v13 + v15;
    if (v14 > v16)
      v16 = v12[1].i64[1];
    v18 = (int8x16_t *)(v7 + 32 * ((uint64_t)v6 >> 1));
    v19.i64[0] = v10;
    v19.i64[1] = v11;
    v20 = vaddq_s64(v19, vdupq_n_s64(v13));
    result = vbslq_s8((int8x16_t)vcgtq_s64(*v12, v20), *(int8x16_t *)v12, (int8x16_t)v20);
    *v18 = result;
    v18[1].i64[0] = v17;
    v18[1].i64[1] = v16;
    v22 = v6 <= 3;
    v6 >>= 1;
  }
  while (!v22);
  return result;
}

int8x16_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::RemoveEvent(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  int8x16_t result;
  BOOL v20;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_DWORD *)(a1 + 8) + a2;
  if (v3 < 2 * v2)
    v2 = 0;
  v4 = v3 - v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (int64x2_t *)(v5 + 32 * v4);
  *v6 = vdupq_n_s64(0x8000000000000002);
  v6[1].i64[0] = 0;
  v6[1].i64[1] = 0;
  do
  {
    v7 = (uint64_t *)(v5 + 32 * (v4 & 0x7FFFFFFFFFFFFFELL));
    v8 = *v7;
    v9 = v7[1];
    v10 = (int64x2_t *)(v5 + ((32 * v4) | 0x20));
    v11 = v10[1].u64[0];
    v12 = v10[1].i64[1];
    if (v9 <= v12 + *v7)
      v9 = v12 + *v7;
    v13 = v7[2];
    v14 = v7[3];
    v15 = v11 + v13;
    if (v12 > v14)
      v14 = v10[1].i64[1];
    v16 = (int8x16_t *)(v5 + 32 * ((uint64_t)v4 >> 1));
    v17.i64[0] = v8;
    v17.i64[1] = v9;
    v18 = vaddq_s64(v17, vdupq_n_s64(v11));
    result = vbslq_s8((int8x16_t)vcgtq_s64(*v10, v18), *(int8x16_t *)v10, (int8x16_t)v18);
    *v16 = result;
    v16[1].i64[0] = v15;
    v16[1].i64[1] = v14;
    v20 = v4 <= 3;
    v4 >>= 1;
  }
  while (!v20);
  return result;
}

uint64_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelope(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
}

uint64_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetOptionalEnvelope(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
}

uint64_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetMaxEventWithEnvelopeGreaterThan(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = *(_DWORD *)(a1 + 4);
  if (v2 < 2)
  {
    LODWORD(v4) = 1;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 16);
    LODWORD(v4) = 1;
    do
    {
      v5 = 2 * v4;
      v4 = (2 * (int)v4) | 1;
      if (a2 >= *(_QWORD *)(v3 + 32 * v4))
      {
        a2 -= *(_QWORD *)(v3 + 32 * v4 + 16);
        LODWORD(v4) = v5;
      }
    }
    while ((int)v4 < v2);
  }
  return (v2 & (((int)v4 - *(_DWORD *)(a1 + 8)) >> 31)) + (_DWORD)v4 - *(_DWORD *)(a1 + 8);
}

uint64_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEnvelopeOf(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;

  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_DWORD *)(a1 + 8) + a2;
  if (v3 < 2 * v2)
    v2 = 0;
  v4 = v3 - v2;
  v5 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD *)(v5 + 32 * v4);
  if (v4 >= 2)
  {
    do
    {
      v8 = v4 | 1u;
      if (v4 != (_DWORD)v8)
        result += *(_QWORD *)(v5 + 32 * v8 + 16);
      v7 = v4 > 3;
      v4 = v4 >> 1;
    }
    while (v7);
  }
  return result;
}

uint64_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetEventsWithOptionalEnvelopeGreaterThan(uint64_t a1, uint64_t a2, int *a3, int *a4, _QWORD *a5)
{
  uint64_t result;
  int v9;
  int v10;
  uint64_t v11;

  v11 = 0;
  result = operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetLeavesWithOptionalEnvelopeGreaterThan(a1, a2, (_DWORD *)&v11 + 1, (int *)&v11, a5);
  v9 = HIDWORD(v11) - *(_DWORD *)(a1 + 8);
  if (v9 < 0)
  {
    *a3 = *(_DWORD *)(a1 + 4) + v9;
    v10 = v11 - *(_DWORD *)(a1 + 8);
    if (v10 >= 0)
      goto LABEL_3;
  }
  else
  {
    *a3 = v9;
    v10 = v11 - *(_DWORD *)(a1 + 8);
    if (v10 >= 0)
    {
LABEL_3:
      *a4 = v10;
      return result;
    }
  }
  *a4 = *(_DWORD *)(a1 + 4) + v10;
  return result;
}

uint64_t operations_research::sat::ThetaLambdaTree<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>::GetLeavesWithOptionalEnvelopeGreaterThan(uint64_t result, uint64_t a2, _DWORD *a3, int *a4, _QWORD *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v5 = *(_DWORD *)(result + 4);
  v6 = *(_QWORD *)(result + 16);
  LODWORD(v7) = 1;
  if (v5 >= 2)
  {
    while (1)
    {
      while (1)
      {
        LODWORD(v7) = 2 * v7;
        v8 = (int)v7 | 1;
        v9 = (_QWORD *)(v6 + 32 * v8);
        if (a2 >= v9[1])
          break;
        LODWORD(v7) = v7 | 1;
        if ((int)v8 >= v5)
          goto LABEL_7;
      }
      v11 = v9[2];
      v10 = v9[3];
      v12 = *(_QWORD *)(v6 + 32 * (int)v7);
      if (a2 < v10 + v11 + v12)
        break;
      a2 -= v11;
      if ((int)v7 >= v5)
        goto LABEL_7;
    }
    while ((int)v8 < v5)
    {
      LODWORD(v8) = 2 * v8;
      if (*(_QWORD *)(v6 + 32 * ((int)v8 | 1) + 24) == v10)
        LODWORD(v8) = v8 | 1;
    }
    *a4 = v8;
    v13 = a2 - (v10 + v11);
    v14 = *(_DWORD *)(result + 4);
    if (v14 > (int)v7)
    {
      do
      {
        v15 = 2 * v7;
        v7 = (2 * (int)v7) | 1;
        if (v13 >= *(_QWORD *)(v6 + 32 * v7))
        {
          v13 -= *(_QWORD *)(v6 + 32 * v7 + 16);
          LODWORD(v7) = v15;
        }
      }
      while ((int)v7 < v14);
      v12 = *(_QWORD *)(v6 + 32 * (int)v7);
    }
    *a3 = v7;
    *a5 = v13 - v12 + *(_QWORD *)(v6 + 32 * *a4 + 16) + *(_QWORD *)(v6 + 32 * *a4 + 24);
  }
  else
  {
LABEL_7:
    *a3 = v7;
    *a4 = v7;
    *a5 = a2
        - *(_QWORD *)(v6 + 32 * (int)v7 + 8)
        + *(_QWORD *)(v6 + 32 * (int)v7 + 16)
        + *(_QWORD *)(v6 + 32 * (int)v7 + 24);
  }
  return result;
}

uint64_t operations_research::sat::TimeTablingPerTask::TimeTablingPerTask(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  std::vector<int>::size_type v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  std::vector<int>::size_type v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  std::vector<int>::size_type v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  std::vector<int>::size_type v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v9 = *(_QWORD *)(a5 + 40);
  *(_QWORD *)a1 = &off_24F987B20;
  v10 = v9 - *(_QWORD *)(a5 + 32);
  v11 = v10 >> 2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v10 >> 2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v13 = *(const void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v14 = v12 - *(_QWORD *)a2;
  if (v12 != *(_QWORD *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v14 >> 2) >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v14);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *(_QWORD *)(a1 + 32) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 24) = v16;
  }
  v17 = *a3;
  v18 = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 56) = v18;
  *(_OWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 72) = a5;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v19 = 2 * v11 + 4;
  if (2 * (_DWORD)v11 != -4)
  {
    if ((int)v11 <= -3)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = v19;
    v21 = (char *)operator new(16 * v19);
    *(_QWORD *)(a1 + 80) = v21;
    *(_QWORD *)(a1 + 88) = v21;
    *(_QWORD *)(a1 + 96) = &v21[16 * v20];
  }
  *(_DWORD *)(a1 + 176) = v11;
  v22 = (int)((uint64_t)v10 >> 2);
  if ((v10 >> 2))
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 128), v22);
    LODWORD(v11) = *(_DWORD *)(a1 + 8);
    v23 = *(_QWORD *)(a1 + 152);
    v27 = *(_QWORD *)(a1 + 160);
    v22 = (int)v11;
    *(_DWORD *)(a1 + 180) = v11;
    v28 = (v27 - v23) >> 2;
    v25 = (int)v11 >= v28;
    v26 = (int)v11 - v28;
    if (v26 == 0 || !v25)
      goto LABEL_12;
LABEL_10:
    std::vector<int>::__append((std::vector<int> *)(a1 + 152), v26);
    LODWORD(v11) = *(_DWORD *)(a1 + 8);
    v22 = (int)v11;
    goto LABEL_14;
  }
  v23 = 0;
  *(_DWORD *)(a1 + 180) = v11;
  v24 = (uint64_t)(v10 >> 2) >> 2;
  v25 = v22 >= v24;
  v26 = v22 - v24;
  if (v26 != 0 && v25)
    goto LABEL_10;
LABEL_12:
  if (!v25)
    *(_QWORD *)(a1 + 160) = v23 + 4 * v22;
LABEL_14:
  *(_DWORD *)(a1 + 232) = 0;
  v29 = *(_QWORD *)(a1 + 184);
  v30 = (*(_QWORD *)(a1 + 192) - v29) >> 2;
  v31 = v22 >= v30;
  v32 = v22 - v30;
  if (v32 != 0 && v31)
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 184), v32);
    LODWORD(v11) = *(_DWORD *)(a1 + 8);
    v22 = (int)v11;
  }
  else if (!v31)
  {
    *(_QWORD *)(a1 + 192) = v29 + 4 * v22;
  }
  v33 = *(_QWORD *)(a1 + 208);
  v34 = (*(_QWORD *)(a1 + 216) - v33) >> 2;
  v35 = v22 >= v34;
  v36 = v22 - v34;
  if (v36 != 0 && v35)
  {
    std::vector<int>::__append((std::vector<int> *)(a1 + 208), v36);
    LODWORD(v11) = *(_DWORD *)(a1 + 8);
  }
  else if (!v35)
  {
    *(_QWORD *)(a1 + 216) = v33 + 4 * v22;
  }
  *(_QWORD *)(a1 + 112) = 0;
  if ((int)v11 >= 1)
  {
    v37 = 0;
    v38 = *(_QWORD *)(a1 + 128);
    v39 = *(_QWORD *)(a1 + 152);
    v40 = *(_QWORD *)(a1 + 184);
    v41 = *(_QWORD *)(a1 + 208);
    do
    {
      v42 = 4 * v37;
      *(_DWORD *)(v38 + v42) = v37;
      *(_DWORD *)(v39 + v42) = v37;
      *(_DWORD *)(v40 + v42) = v37;
      *(_DWORD *)(v41 + v42) = v37++;
    }
    while (v37 < *(int *)(a1 + 8));
  }
  return a1;
}

void sub_22DC1F8AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (!*v2)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 24) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::TimeTablingPerTask::RegisterWith(operations_research::sat::TimeTablingPerTask *this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(*((operations_research::sat::SchedulingConstraintHelper **)this + 9), v4, a2, 1, 1);
  v5 = *((unsigned int *)this + 10);
  if ((_DWORD)v5 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5 ^ 1, v4, 0xFFFFFFFFLL);
  if (*((int *)this + 2) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, *(unsigned int *)(*((_QWORD *)this + 2) + v6), v4, 0xFFFFFFFFLL);
      ++v7;
      v6 += 20;
    }
    while (v7 < *((int *)this + 2));
  }
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(a2, v4, (int *)this + 44);
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(a2, v4, (int *)this + 45);
  operations_research::sat::GenericLiteralWatcher::RegisterReversibleInt(a2, v4, (int *)this + 58);
}

uint64_t operations_research::sat::TimeTablingPerTask::Propagate(operations_research::sat::TimeTablingPerTask *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  BOOL v19;

  while (1)
  {
    *((_BYTE *)this + 120) = 0;
    result = operations_research::sat::TimeTablingPerTask::BuildProfile(this);
    if (!(_DWORD)result)
      return result;
    result = operations_research::sat::TimeTablingPerTask::SweepAllTasks(this, 1);
    if (!(_DWORD)result)
      return result;
    operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*((operations_research::sat::SchedulingConstraintHelper **)this + 9), 0);
    v3 = *((_QWORD *)this + 10);
    v4 = *((_QWORD *)this + 11);
    if ((unint64_t)(v4 - v3) < 0x21)
      goto LABEL_13;
    v5 = (v4 - v3) >> 4;
    if (v5 <= 3)
      v5 = 3;
    v6 = v5 - 2;
    if (v5 - 2 < 2)
    {
      v7 = 1;
      v8 = 2;
LABEL_11:
      v12 = ~v7 + v5;
      v13 = (_QWORD *)(v3 + 16 * v7);
      v14 = (uint64_t *)(v3 + 16 * v8);
      do
      {
        v15 = *v14;
        v14 += 2;
        *v13 = -v15;
        v13 += 2;
        --v12;
      }
      while (v12);
      goto LABEL_13;
    }
    v7 = v6 | 1;
    v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 2;
    v9 = (_QWORD *)(v3 + 32);
    v10 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v11 = -v9[2];
      *(v9 - 2) = -*v9;
      *v9 = v11;
      v9 += 4;
      v10 -= 2;
    }
    while (v10);
    if (v6 != (v6 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_11;
LABEL_13:
    if (v3 + 16 != v4 - 16)
    {
      v16 = (_OWORD *)(v4 - 32);
      if ((unint64_t)v16 > v3 + 16)
      {
        v17 = v3 + 32;
        do
        {
          v18 = *(_OWORD *)(v17 - 16);
          *(_OWORD *)(v17 - 16) = *v16;
          *v16-- = v18;
          v19 = v17 >= (unint64_t)v16;
          v17 += 16;
        }
        while (!v19);
      }
    }
    if ((operations_research::sat::TimeTablingPerTask::SweepAllTasks(this, 0) & 1) == 0)
      return 0;
    if (!*((_BYTE *)this + 120))
      return 1;
  }
}

uint64_t operations_research::sat::TimeTablingPerTask::BuildProfile(operations_research::sat::TimeTablingPerTask *this)
{
  int v2;
  int v3;
  operations_research::sat::SchedulingConstraintHelper *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *started;
  char *v14;
  void **v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  int v25;
  unsigned int v26;
  int v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  int64_t v39;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  unint64_t v48;
  void **v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  int64_t *v68;
  int64_t *v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;

  operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*((operations_research::sat::SchedulingConstraintHelper **)this + 9), 1);
  v2 = *((_DWORD *)this + 58);
  v3 = *((_DWORD *)this + 2);
  v4 = (operations_research::sat::SchedulingConstraintHelper *)*((_QWORD *)this + 9);
  if (v2 < v3)
  {
    v5 = v2;
    v6 = *((_QWORD *)this + 23);
    v7 = *((_QWORD *)v4 + 16);
    do
    {
      v8 = *(_DWORD *)(v6 + 4 * v5);
      v9 = *(int *)(v7 + 4 * v8);
      if ((_DWORD)v9 == -1
        || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
      {
        v10 = v8;
        if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 40) + 12 * *(int *)(*((_QWORD *)v4 + 7) + 4 * v8)) > -*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 40) + 12 * (*(_DWORD *)(*((_QWORD *)v4 + 4) + 4 * v8) ^ 1)))
        {
          v11 = *(int *)(v6 + 4 * v2);
          *(_DWORD *)(v6 + 4 * v5) = v11;
          *(_DWORD *)(v6 + 4 * *((int *)this + 58)) = v8;
          v12 = *((_QWORD *)this + 26);
          *(_DWORD *)(v12 + 4 * v10) = *((_DWORD *)this + 58);
          *(_DWORD *)(v12 + 4 * v11) = v5;
          v2 = *((_DWORD *)this + 58) + 1;
          *((_DWORD *)this + 58) = v2;
          v3 = *((_DWORD *)this + 2);
        }
      }
      ++v5;
    }
    while (v5 < v3);
  }
  started = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(v4);
  v14 = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingEndMin(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                     + 9));
  v15 = (void **)((char *)this + 80);
  v16 = (char *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 11) = v16;
  *((_QWORD *)this + 13) = 0x8000000000000002;
  v17 = *((_QWORD *)this + 12);
  v82 = v14;
  v83 = started;
  if ((unint64_t)v16 >= v17)
  {
    v19 = v17 - (_QWORD)v16;
    v20 = v19 >> 3;
    if ((unint64_t)(v19 >> 3) <= 1)
      v20 = 1;
    v21 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0;
    v22 = 0xFFFFFFFFFFFFFFFLL;
    if (!v21)
      v22 = v20;
    if (v22 >> 60)
      goto LABEL_94;
    v23 = v22;
    v24 = operator new(16 * v22);
    *v24 = xmmword_22DCF0BC0;
    v18 = (char *)(v24 + 1);
    *((_QWORD *)this + 10) = v24;
    *((_QWORD *)this + 11) = v24 + 1;
    *((_QWORD *)this + 12) = &v24[v23];
    if (v16)
      operator delete(v16);
    v14 = v82;
    started = v83;
  }
  else
  {
    *(_OWORD *)v16 = xmmword_22DCF0BC0;
    v18 = v16 + 16;
  }
  v84 = 0x8000000000000002;
  *((_QWORD *)this + 11) = v18;
  v25 = *((_DWORD *)this + 2);
  v26 = v25 - 1;
  if (v25 >= 1)
  {
    v27 = 0;
    v28 = *((_QWORD *)this + 14);
    v29 = 0x8000000000000002;
    while (1)
    {
      v31 = v28;
      v32 = *(_QWORD *)v14 + 12 * v27;
      v34 = *(_QWORD *)(v32 + 4);
      v33 = (_QWORD *)(v32 + 4);
      v30 = v34;
      if ((v26 & 0x80000000) != 0)
      {
        if (v27 >= v25)
          goto LABEL_45;
      }
      else
      {
        v35 = v26;
        v36 = *(_QWORD *)started + 12 * v26;
        v39 = *(_QWORD *)(v36 + 4);
        v37 = (_QWORD *)(v36 + 4);
        v38 = v39;
        if (v39 < v30)
          v30 = v38;
        do
        {
          if (*v37 != v30)
          {
            v26 = v35;
            if (v27 < v25)
              goto LABEL_37;
            goto LABEL_45;
          }
          v41 = *((int *)v37 - 1);
          if (*(_DWORD *)(*((_QWORD *)this + 26) + 4 * v41) < *((_DWORD *)this + 58))
          {
            v42 = (int *)(*((_QWORD *)this + 2) + 20 * (int)v41);
            v43 = *(_QWORD *)(v42 + 3);
            if (*v42 != -1)
              v43 += *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 40) + 12 * *v42) * *(_QWORD *)(v42 + 1);
            v28 += v43;
          }
          v37 = (_QWORD *)((char *)v37 - 12);
        }
        while (v35-- > 0);
        v26 = -1;
        if (v27 >= v25)
          goto LABEL_45;
      }
LABEL_37:
      v44 = v25 - (uint64_t)v27;
      while (*v33 == v30)
      {
        v45 = *((int *)v33 - 1);
        if (*(_DWORD *)(*((_QWORD *)this + 26) + 4 * v45) < *((_DWORD *)this + 58))
        {
          v46 = (int *)(*((_QWORD *)this + 2) + 20 * (int)v45);
          v47 = *(_QWORD *)(v46 + 3);
          if (*v46 != -1)
            v47 += *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 40) + 12 * *v46) * *(_QWORD *)(v46 + 1);
          v28 -= v47;
        }
        ++v27;
        v33 = (_QWORD *)((char *)v33 + 12);
        if (!--v44)
        {
          v27 = v25;
          break;
        }
      }
LABEL_45:
      if (v28 == v31)
      {
        v30 = v29;
      }
      else
      {
        v48 = *((_QWORD *)this + 12);
        if ((unint64_t)v18 >= v48)
        {
          v49 = v15;
          v50 = (char *)*v15;
          v51 = (v18 - (_BYTE *)*v15) >> 4;
          v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 60)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v86 = v26;
          v53 = v48 - (_QWORD)v50;
          if (v53 >> 3 > v52)
            v52 = v53 >> 3;
          v21 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0;
          v54 = 0xFFFFFFFFFFFFFFFLL;
          if (!v21)
            v54 = v52;
          if (v54 >> 60)
            goto LABEL_94;
          v85 = 16 * v54;
          v55 = (char *)operator new(16 * v54);
          v56 = (unint64_t *)&v55[16 * v51];
          *v56 = v29;
          v56[1] = v31;
          if (v18 == v50)
          {
            v58 = &v55[16 * v51];
            v15 = v49;
          }
          else
          {
            v57 = &v55[16 * v51];
            v15 = v49;
            do
            {
              v58 = v57 - 16;
              *((_OWORD *)v57 - 1) = *((_OWORD *)v18 - 1);
              v18 -= 16;
              v57 -= 16;
            }
            while (v18 != v50);
          }
          v18 = (char *)(v56 + 2);
          *((_QWORD *)this + 10) = v58;
          *((_QWORD *)this + 11) = v56 + 2;
          *((_QWORD *)this + 12) = &v55[v85];
          started = v83;
          if (v50)
            operator delete(v50);
          v14 = v82;
          v26 = v86;
          *((_QWORD *)this + 11) = v18;
          if (v28 > *((_QWORD *)this + 13))
          {
LABEL_63:
            *((_QWORD *)this + 13) = v28;
            v84 = v30;
          }
        }
        else
        {
          *(_QWORD *)v18 = v29;
          *((_QWORD *)v18 + 1) = v31;
          v18 += 16;
          *((_QWORD *)this + 11) = v18;
          if (v28 > *((_QWORD *)this + 13))
            goto LABEL_63;
        }
      }
      v25 = *((_DWORD *)this + 2);
      v29 = v30;
      if (v27 >= v25)
        goto LABEL_65;
    }
  }
  v30 = 0x8000000000000002;
LABEL_65:
  v59 = (char *)*((_QWORD *)this + 12);
  if (v18 < v59)
  {
    *(_QWORD *)v18 = v30;
    *((_QWORD *)v18 + 1) = 0;
    v60 = v18 + 16;
    goto LABEL_77;
  }
  v61 = (char *)*v15;
  v62 = (v18 - (_BYTE *)*v15) >> 4;
  v63 = v62 + 1;
  if ((unint64_t)(v62 + 1) >> 60)
    goto LABEL_96;
  v64 = v59 - v61;
  if (v64 >> 3 > v63)
    v63 = v64 >> 3;
  v21 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0;
  v65 = 0xFFFFFFFFFFFFFFFLL;
  if (!v21)
    v65 = v63;
  if (v65 >> 60)
LABEL_94:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v66 = 16 * v65;
  v67 = (char *)operator new(16 * v65);
  v68 = (int64_t *)&v67[16 * v62];
  v59 = &v67[v66];
  *v68 = v30;
  v68[1] = 0;
  v60 = (char *)(v68 + 2);
  if (v18 == v61)
  {
    *((_QWORD *)this + 10) = v68;
    *((_QWORD *)this + 11) = v60;
    *((_QWORD *)this + 12) = v59;
    if (v61)
    {
LABEL_76:
      operator delete(v61);
      v59 = (char *)*((_QWORD *)this + 12);
    }
  }
  else
  {
    do
    {
      v69 = v68 - 2;
      *((_OWORD *)v68 - 1) = *((_OWORD *)v18 - 1);
      v18 -= 16;
      v68 -= 2;
    }
    while (v18 != v61);
    *((_QWORD *)this + 10) = v69;
    *((_QWORD *)this + 11) = v60;
    *((_QWORD *)this + 12) = v59;
    if (v61)
      goto LABEL_76;
  }
LABEL_77:
  *((_QWORD *)this + 11) = v60;
  if (v60 < v59)
  {
    *(_OWORD *)v60 = xmmword_22DCF8E80;
    v70 = v60 + 16;
    goto LABEL_89;
  }
  v71 = (char *)*v15;
  v72 = (v60 - (_BYTE *)*v15) >> 4;
  v73 = v72 + 1;
  if ((unint64_t)(v72 + 1) >> 60)
LABEL_96:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v74 = v59 - v71;
  if (v74 >> 3 > v73)
    v73 = v74 >> 3;
  v21 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0;
  v75 = 0xFFFFFFFFFFFFFFFLL;
  if (!v21)
    v75 = v73;
  if (v75 >> 60)
    goto LABEL_94;
  v76 = 16 * v75;
  v77 = (char *)operator new(16 * v75);
  v78 = &v77[16 * v72];
  v79 = &v77[v76];
  *(_OWORD *)v78 = xmmword_22DCF8E80;
  v70 = v78 + 16;
  if (v60 == v71)
  {
    *((_QWORD *)this + 10) = v78;
    *((_QWORD *)this + 11) = v70;
    *((_QWORD *)this + 12) = v79;
    if (!v71)
      goto LABEL_89;
    goto LABEL_88;
  }
  do
  {
    v80 = v78 - 16;
    *((_OWORD *)v78 - 1) = *((_OWORD *)v60 - 1);
    v60 -= 16;
    v78 -= 16;
  }
  while (v60 != v71);
  *((_QWORD *)this + 10) = v80;
  *((_QWORD *)this + 11) = v70;
  *((_QWORD *)this + 12) = v79;
  if (v71)
LABEL_88:
    operator delete(v71);
LABEL_89:
  *((_QWORD *)this + 11) = v70;
  return operations_research::sat::TimeTablingPerTask::IncreaseCapacity((uint64_t)this, v84, *((_QWORD *)this + 13));
}

uint64_t operations_research::sat::TimeTablingPerTask::SweepAllTasks(operations_research::sat::TimeTablingPerTask *this, int a2)
{
  int v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v3 = *((_DWORD *)this + 10);
  v4 = *(_QWORD *)((char *)this + 52);
  v5 = __OFADD__(v3, 1);
  if (v3 != -1)
    v4 -= *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 40) + 12 * (v3 ^ 1)) * *(_QWORD *)((char *)this + 44);
  v6 = *((_QWORD *)this + 13);
  v7 = v4 - v6;
  v8 = (v4 - v6) ^ v4;
  v9 = v6 ^ v4;
  v10 = (v4 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
  if ((v8 & v9) < 0 != v5)
    v11 = v10;
  else
    v11 = v7;
  if (a2)
    v12 = 176;
  else
    v12 = 180;
  if (a2)
    v13 = 128;
  else
    v13 = 152;
  v14 = *(unsigned int *)((char *)this + v12);
  if ((int)v14 >= 1)
  {
    v15 = v14 + 1;
    v16 = v14 - 1;
    do
    {
      v19 = *(_QWORD *)((char *)this + v13);
      v20 = *(int *)(v19 + 4 * v16);
      v21 = v16;
      v22 = (_QWORD *)*((_QWORD *)this + 9);
      v23 = *(int *)(v22[16] + 4 * v20);
      if ((_DWORD)v23 == -1)
        goto LABEL_36;
      v24 = *(_QWORD *)(*(_QWORD *)(*v22 + 24) + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8));
      v25 = v23 & 0x3F;
      if (((v24 >> (v25 ^ 1u)) & 1) != 0)
        goto LABEL_14;
      if (((v24 >> v25) & 1) != 0)
      {
LABEL_36:
        v26 = *(_DWORD *)(v22[4] + 4 * v20);
        if (!(*(_QWORD *)(*(_QWORD *)(v22[1] + 40) + 12 * v26)
             + *(_QWORD *)(*(_QWORD *)(v22[1] + 40) + 12 * (v26 ^ 1))))
          goto LABEL_14;
      }
      v27 = *((_QWORD *)this + 2) + 20 * (int)v20;
      v28 = *(_DWORD *)v27;
      v29 = *(_QWORD *)(v27 + 12);
      if (*(_DWORD *)v27 == -1)
      {
        if (v29 <= v11)
          goto LABEL_28;
      }
      else
      {
        v30 = *(_QWORD *)(v27 + 4);
        v31 = *(_QWORD *)(*((_QWORD *)this + 8) + 40);
        if (v29 + *(_QWORD *)(v31 + 12 * v28) * v30 <= v11)
        {
          v29 -= *(_QWORD *)(v31 + 12 * (v28 ^ 1)) * v30;
LABEL_28:
          if (v29)
            goto LABEL_15;
LABEL_14:
          v17 = *(int *)((char *)this + v12) - 1;
          *(_DWORD *)((char *)this + v12) = v17;
          v17 *= 4;
          v18 = *(_DWORD *)(v19 + 4 * v21);
          *(_DWORD *)(v19 + 4 * v21) = *(_DWORD *)(v19 + v17);
          *(_DWORD *)(v19 + v17) = v18;
          goto LABEL_15;
        }
      }
      v32 = *(_DWORD *)(v22[10] + 4 * v20);
      if (v32 == -1)
      {
        if (!*(_QWORD *)(v22[13] + 8 * v20))
          goto LABEL_14;
      }
      else
      {
        v33 = *(_QWORD *)(v22[1] + 40);
        if (!*(_QWORD *)(v33 + 12 * v32))
        {
          if (*(_QWORD *)(v33 + 12 * (v32 ^ 1)))
            goto LABEL_15;
          goto LABEL_14;
        }
      }
      if ((operations_research::sat::TimeTablingPerTask::SweepTask(this, v20) & 1) == 0)
        return 0;
LABEL_15:
      --v15;
      v16 = v21 - 1;
    }
    while (v15 > 1);
  }
  return 1;
}

uint64_t operations_research::sat::TimeTablingPerTask::IncreaseCapacity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD **v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BYTE v27[12];

  v7 = a1 + 40;
  v6 = *(_DWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 52);
  if (v6 != -1)
    v8 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40) + 12 * v6) * *(_QWORD *)(a1 + 44);
  if (v8 >= a3)
    return 1;
  operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 72));
  operations_research::sat::TimeTablingPerTask::AddProfileReason(a1, a2, a2 + 1);
  v9 = *(_DWORD *)(a1 + 40);
  v10 = *(_QWORD **)(a1 + 72);
  if (v9 == -1)
    return operations_research::sat::SchedulingConstraintHelper::ReportConflict(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 72));
  *(_DWORD *)v27 = v9 ^ 1;
  *(_QWORD *)&v27[4] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40) + 12 * (v9 ^ 1));
  v12 = (_DWORD *)v10[49];
  v11 = v10[50];
  if ((unint64_t)v12 >= v11)
  {
    v15 = (_DWORD **)(v10 + 48);
    v16 = (_DWORD *)v10[48];
    v17 = 0xAAAAAAAAAAAAAAABLL * (v12 - v16) + 1;
    if (v17 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v16) >> 2);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0xAAAAAAAAAAAAAAALL)
      v19 = 0x1555555555555555;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = (char *)operator new(12 * v19);
      v15 = (_DWORD **)(v10 + 48);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[4 * (v12 - v16)];
    *(_QWORD *)v21 = *(_QWORD *)v27;
    *((_DWORD *)v21 + 2) = *(_DWORD *)&v27[8];
    v13 = v21 + 12;
    if (v12 != v16)
    {
      do
      {
        v22 = *(_QWORD *)(v12 - 3);
        v12 -= 3;
        v23 = v12[2];
        *(_QWORD *)(v21 - 12) = v22;
        v21 -= 12;
        *((_DWORD *)v21 + 2) = v23;
      }
      while (v12 != v16);
      v12 = *v15;
    }
    v10[48] = v21;
    v10[49] = v13;
    v10[50] = &v20[12 * v19];
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)v27;
    v12[2] = *(_DWORD *)&v27[8];
    v13 = v12 + 3;
  }
  v10[49] = v13;
  v24 = *(_QWORD *)(a1 + 72);
  v25 = operations_research::sat::AffineExpression::GreaterOrEqual(v7, a3);
  return operations_research::sat::SchedulingConstraintHelper::PushIntegerLiteral(v24, v25, v26);
}

uint64_t operations_research::sat::TimeTablingPerTask::SweepTask(operations_research::sat::TimeTablingPerTask *this, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;

  v3 = (_QWORD *)*((_QWORD *)this + 9);
  v4 = a2;
  v5 = 4 * a2;
  v6 = *(_DWORD *)(v3[4] + v5);
  v7 = *(_QWORD *)(v3[1] + 40);
  v8 = *(_DWORD *)(v3[10] + v5);
  if (v8 == -1)
    v9 = (uint64_t *)(v3[13] + 8 * a2);
  else
    v9 = (uint64_t *)(v7 + 12 * v8);
  v10 = 12 * (v6 ^ 1);
  v11 = *(_QWORD *)(v7 + 12 * v6);
  v12 = *(_DWORD *)(v3[7] + 4 * a2);
  v13 = (char *)*((_QWORD *)this + 10);
  v14 = (char *)*((_QWORD *)this + 11);
  if (v14 != v13)
  {
    v15 = (v14 - v13) >> 4;
    v14 = (char *)*((_QWORD *)this + 10);
    do
    {
      v16 = v15 >> 1;
      v17 = (uint64_t *)&v14[16 * (v15 >> 1)];
      v19 = *v17;
      v18 = (char *)(v17 + 2);
      v15 += ~(v15 >> 1);
      if (v19 > v11)
        v15 = v16;
      else
        v14 = v18;
    }
    while (v15);
  }
  v20 = 12 * v12;
  v21 = *(_QWORD *)(v7 + v10);
  v22 = *((_DWORD *)this + 10);
  v23 = *(_QWORD *)((char *)this + 52);
  if (v22 != -1)
    v23 -= *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 40) + 12 * (v22 ^ 1)) * *(_QWORD *)((char *)this + 44);
  v24 = *(_QWORD *)(v7 + v20);
  v25 = -v21;
  v26 = v14 - v13;
  v27 = (int *)(*((_QWORD *)this + 2) + 20 * a2);
  v28 = *(_QWORD *)(v27 + 3);
  if (*v27 != -1)
    v28 += *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 40) + 12 * *v27) * *(_QWORD *)(v27 + 1);
  if (v24 >= v25)
    v29 = -v21;
  else
    v29 = v24;
  v30 = ((v26 << 28) - 0x100000000) >> 32;
  v31 = *(_QWORD *)&v13[16 * v30];
  if (v31 >= v29)
    return 1;
  v32 = 0;
  v33 = *v9;
  v34 = v23 - v28;
  v35 = 1 - v21;
  v36 = (uint64_t *)&v13[16 * v30 + 16];
  v37 = 0x8000000000000002;
  v38 = v11;
  v39 = v24;
  do
  {
    v42 = *v36;
    if (*(v36 - 1) > v34)
    {
      v38 = *v36;
      if (v42 > v25)
      {
        if (*(_DWORD *)(*((_QWORD *)this + 26) + 4 * a2) >= *((_DWORD *)this + 58))
          v38 = v35;
        else
          v38 = v25;
      }
      if (v39 <= v38 + v33)
        v39 = v38 + v33;
      if (v39 >= v25)
        v29 = v25;
      else
        v29 = v39;
      if (v24 >= v38)
        v40 = v38;
      else
        v40 = v24;
      v41 = v40 - 1;
      if (v31 < v24)
        v37 = v41;
      v32 = 1;
    }
    v36 += 2;
    v31 = v42;
  }
  while (v42 < v29);
  if ((v32 & (v11 != v38)) != 1)
    return 1;
  result = operations_research::sat::TimeTablingPerTask::UpdateStartingTime((uint64_t)this, a2, v37, v38);
  if ((_DWORD)result)
  {
    result = 1;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 8) + 40)
                   + 12 * *(int *)(*(_QWORD *)(*((_QWORD *)this + 9) + 32) + 4 * v4)) != v11)
      *((_BYTE *)this + 120) = 1;
  }
  return result;
}

uint64_t operations_research::sat::TimeTablingPerTask::UpdateStartingTime(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8;
  _QWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD **v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[12];
  _BYTE v41[12];

  operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 72));
  operations_research::sat::TimeTablingPerTask::AddProfileReason(a1, a3, a4);
  v8 = *(_DWORD *)(a1 + 40);
  if (v8 != -1)
  {
    v9 = *(_QWORD **)(a1 + 72);
    *(_DWORD *)v40 = v8 ^ 1;
    *(_QWORD *)&v40[4] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40) + 12 * (v8 ^ 1));
    v11 = (_DWORD *)v9[49];
    v10 = v9[50];
    if ((unint64_t)v11 >= v10)
    {
      v38 = a4;
      v13 = (_DWORD **)(v9 + 48);
      v14 = (_DWORD *)v9[48];
      v15 = 0xAAAAAAAAAAAAAAABLL * (v11 - v14) + 1;
      if (v15 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v14) >> 2);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0xAAAAAAAAAAAAAAALL)
        v17 = 0x1555555555555555;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0x1555555555555555)
          goto LABEL_44;
        v18 = (char *)operator new(12 * v17);
        v13 = (_DWORD **)(v9 + 48);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[4 * (v11 - v14)];
      v20 = &v18[12 * v17];
      *(_QWORD *)v19 = *(_QWORD *)v40;
      *((_DWORD *)v19 + 2) = *(_DWORD *)&v40[8];
      v12 = v19 + 12;
      if (v11 == v14)
      {
        a4 = v38;
        v9[48] = v19;
        v9[49] = v12;
        v9[50] = v20;
        if (!v11)
          goto LABEL_19;
      }
      else
      {
        a4 = v38;
        do
        {
          v21 = *(_QWORD *)(v11 - 3);
          v11 -= 3;
          v22 = v11[2];
          *(_QWORD *)(v19 - 12) = v21;
          v19 -= 12;
          *((_DWORD *)v19 + 2) = v22;
        }
        while (v11 != v14);
        v11 = *v13;
        v9[48] = v19;
        v9[49] = v12;
        v9[50] = v20;
        if (!v11)
          goto LABEL_19;
      }
      operator delete(v11);
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)v40;
      v11[2] = *(_DWORD *)&v40[8];
      v12 = v11 + 3;
    }
LABEL_19:
    v9[49] = v12;
  }
  operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(*(_QWORD **)(a1 + 72), a2, a3 + 1);
  operations_research::sat::SchedulingConstraintHelper::AddDurationMinReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 72), a2, 1uLL);
  v23 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 20 * a2);
  if (v23 != -1)
  {
    v24 = *(_QWORD **)(a1 + 72);
    *(_DWORD *)v41 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 20 * a2);
    *(_QWORD *)&v41[4] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40) + 12 * v23);
    v26 = (char *)v24[49];
    v25 = v24[50];
    if ((unint64_t)v26 < v25)
    {
      *(_QWORD *)v26 = *(_QWORD *)v41;
      *((_DWORD *)v26 + 2) = *(_DWORD *)&v41[8];
      v27 = v26 + 12;
      goto LABEL_40;
    }
    v39 = a4;
    v28 = (_BYTE *)v24[48];
    v29 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v28) >> 2) + 1;
    if (v29 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v28) >> 2);
    if (2 * v30 > v29)
      v29 = 2 * v30;
    if (v30 >= 0xAAAAAAAAAAAAAAALL)
      v31 = 0x1555555555555555;
    else
      v31 = v29;
    if (!v31)
    {
      v32 = 0;
      goto LABEL_35;
    }
    if (v31 <= 0x1555555555555555)
    {
      v32 = (char *)operator new(12 * v31);
LABEL_35:
      v33 = &v32[4 * ((v26 - v28) >> 2)];
      v34 = &v32[12 * v31];
      *(_QWORD *)v33 = *(_QWORD *)v41;
      *((_DWORD *)v33 + 2) = *(_DWORD *)&v41[8];
      v27 = v33 + 12;
      if (v26 == v28)
      {
        a4 = v39;
        v24[48] = v33;
        v24[49] = v27;
        v24[50] = v34;
        if (!v26)
          goto LABEL_40;
      }
      else
      {
        a4 = v39;
        do
        {
          v35 = *(_QWORD *)(v26 - 12);
          v26 -= 12;
          v36 = *((_DWORD *)v26 + 2);
          *(_QWORD *)(v33 - 12) = v35;
          v33 -= 12;
          *((_DWORD *)v33 + 2) = v36;
        }
        while (v26 != v28);
        v26 = (char *)v24[48];
        v24[48] = v33;
        v24[49] = v27;
        v24[50] = v34;
        if (!v26)
          goto LABEL_40;
      }
      operator delete(v26);
LABEL_40:
      v24[49] = v27;
      return operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(_QWORD *)(a1 + 72), a2, a4);
    }
LABEL_44:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(_QWORD *)(a1 + 72), a2, a4);
}

void operations_research::sat::TimeTablingPerTask::AddProfileReason(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  operations_research::sat::SchedulingConstraintHelper *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void **v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  unint64_t v31;
  _BYTE v32[12];

  if (*(int *)(a1 + 232) >= 1)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v8 = *(int *)(*(_QWORD *)(a1 + 184) + 4 * v6);
      v9 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 72);
      v10 = *(_QWORD *)(*((_QWORD *)v9 + 1) + 40);
      v11 = -*(_QWORD *)(v10 + 12 * (*(_DWORD *)(*((_QWORD *)v9 + 4) + 4 * v8) ^ 1));
      if (v11 < a3)
      {
        v12 = *(_QWORD *)(v10 + 12 * *(int *)(*((_QWORD *)v9 + 7) + 4 * v8));
        if (v12 > v4)
        {
          operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(v9, *(_DWORD *)(*(_QWORD *)(a1 + 184) + 4 * v6));
          v13 = v11 <= v4 ? v4 : v11;
          operations_research::sat::SchedulingConstraintHelper::AddStartMaxReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 72), v8, v13);
          v14 = v12 >= a3 ? a3 : v12;
          operations_research::sat::SchedulingConstraintHelper::AddEndMinReason(*(_QWORD **)(a1 + 72), v8, v14);
          v15 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 20 * (int)v8);
          if (v15 != -1)
          {
            v16 = *(_QWORD **)(a1 + 72);
            *(_DWORD *)v32 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 20 * (int)v8);
            *(_QWORD *)&v32[4] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40) + 12 * v15);
            v17 = *(_QWORD *)v32;
            v19 = (char *)v16[49];
            v18 = v16[50];
            if ((unint64_t)v19 < v18)
            {
              *(_QWORD *)v19 = *(_QWORD *)v32;
              *((_DWORD *)v19 + 2) = *(_DWORD *)&v32[8];
              v7 = v19 + 12;
            }
            else
            {
              v20 = (void **)(v16 + 48);
              v21 = (_BYTE *)v16[48];
              v22 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v21) >> 2) + 1;
              if (v22 > 0x1555555555555555)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v21) >> 2);
              if (2 * v23 > v22)
                v22 = 2 * v23;
              if (v23 >= 0xAAAAAAAAAAAAAAALL)
                v24 = 0x1555555555555555;
              else
                v24 = v22;
              v31 = v24;
              if (v24)
              {
                if (v24 > 0x1555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v25 = (char *)operator new(12 * v24);
                v20 = (void **)(v16 + 48);
                v17 = *(_QWORD *)v32;
                v4 = a2;
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[4 * ((v19 - v21) >> 2)];
              *(_QWORD *)v26 = v17;
              *((_DWORD *)v26 + 2) = *(_DWORD *)&v32[8];
              v27 = v26;
              if (v19 != v21)
              {
                do
                {
                  v28 = *(_QWORD *)(v19 - 12);
                  v19 -= 12;
                  v29 = *((_DWORD *)v19 + 2);
                  *(_QWORD *)(v27 - 12) = v28;
                  v27 -= 12;
                  *((_DWORD *)v27 + 2) = v29;
                }
                while (v19 != v21);
                v19 = (char *)*v20;
              }
              v7 = v26 + 12;
              v16[48] = v27;
              v16[49] = v26 + 12;
              v16[50] = &v25[12 * v31];
              if (v19)
                operator delete(v19);
            }
            v16[49] = v7;
          }
        }
      }
      ++v6;
    }
    while (v6 < *(int *)(a1 + 232));
  }
}

void operations_research::sat::SchedulingConstraintHelper::AddDurationMinReason(operations_research::sat::SchedulingConstraintHelper *a1, int a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(a1, a2);
  if (*(_DWORD *)(*((_QWORD *)a1 + 10) + 4 * a2) != -1)
  {
    LODWORD(v18) = *(_DWORD *)(*((_QWORD *)a1 + 10) + 4 * a2);
    HIDWORD(v18) = a3;
    v6 = HIDWORD(a3);
    v8 = (_DWORD *)*((_QWORD *)a1 + 49);
    v7 = *((_QWORD *)a1 + 50);
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_DWORD *)*((_QWORD *)a1 + 48);
      v11 = 0xAAAAAAAAAAAAAAABLL * (v8 - v10) + 1;
      if (v11 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v10) >> 2);
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0xAAAAAAAAAAAAAAALL)
        v13 = 0x1555555555555555;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = (char *)operator new(12 * v13);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[4 * (v8 - v10)];
      *(_QWORD *)v15 = v18;
      *((_DWORD *)v15 + 2) = v6;
      v9 = v15 + 12;
      if (v8 != v10)
      {
        do
        {
          v16 = *(_QWORD *)(v8 - 3);
          v8 -= 3;
          v17 = v8[2];
          *(_QWORD *)(v15 - 12) = v16;
          v15 -= 12;
          *((_DWORD *)v15 + 2) = v17;
        }
        while (v8 != v10);
        v8 = (_DWORD *)*((_QWORD *)a1 + 48);
      }
      *((_QWORD *)a1 + 48) = v15;
      *((_QWORD *)a1 + 49) = v9;
      *((_QWORD *)a1 + 50) = &v14[12 * v13];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v8 = v18;
      v8[2] = v6;
      v9 = v8 + 3;
    }
    *((_QWORD *)a1 + 49) = v9;
  }
}

void operations_research::sat::TimeTablingPerTask::~TimeTablingPerTask(operations_research::sat::TimeTablingPerTask *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24F987B20;
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24F987B20;
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::sat::TimeTableEdgeFinding::TimeTableEdgeFinding(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v9 = *(_QWORD *)(a4 + 40);
  *(_QWORD *)a1 = &off_24F987B68;
  v10 = v9 - *(_QWORD *)(a4 + 32);
  v11 = v10 >> 2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v10 >> 2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v13 = *(const void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v14 = v12 - *(_QWORD *)a2;
  if (v12 != *(_QWORD *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v14 >> 2) >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v14);
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *(_QWORD *)(a1 + 32) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 24) = v16;
  }
  v17 = *a3;
  v18 = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 56) = v18;
  *(_OWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 72) = a5;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  if ((v10 >> 2))
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(a1 + 200, (int)((uint64_t)v10 >> 2));
    v19 = *(_QWORD *)(a1 + 176);
    v20 = *(int *)(a1 + 8);
    v23 = (*(_QWORD *)(a1 + 184) - v19) >> 3;
    v21 = v20 >= v23;
    v22 = v20 - v23;
    if (v20 > v23)
      goto LABEL_6;
  }
  else
  {
    v19 = 0;
    v20 = (int)v11;
    v21 = 1;
    v22 = (int)v11;
    if ((_DWORD)v11)
    {
LABEL_6:
      std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(a1 + 176, v22);
      v20 = *(int *)(a1 + 8);
      goto LABEL_10;
    }
  }
  if (!v21)
    *(_QWORD *)(a1 + 184) = v19 + 8 * v20;
LABEL_10:
  v24 = *(_QWORD *)(a1 + 128);
  v25 = (*(_QWORD *)(a1 + 136) - v24) >> 3;
  if (v20 <= v25)
  {
    if (v20 < v25)
      *(_QWORD *)(a1 + 136) = v24 + 8 * v20;
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(a1 + 128, v20 - v25);
    v20 = *(int *)(a1 + 8);
  }
  v26 = *(_QWORD *)(a1 + 152);
  v27 = (*(_QWORD *)(a1 + 160) - v26) >> 3;
  if (v20 <= v27)
  {
    if (v20 < v27)
      *(_QWORD *)(a1 + 160) = v26 + 8 * v20;
  }
  else
  {
    std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append(a1 + 152, v20 - v27);
  }
  return a1;
}

void sub_22DC212A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (!*v2)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 24) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::TimeTableEdgeFinding::RegisterWith(operations_research::sat::SchedulingConstraintHelper **this, operations_research::sat::GenericLiteralWatcher *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = operations_research::sat::GenericLiteralWatcher::Register((uint64_t)a2, (uint64_t)this);
  v5 = *((unsigned int *)this + 10);
  if ((_DWORD)v5 != -1)
    operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, v5 ^ 1, v4, 0xFFFFFFFFLL);
  operations_research::sat::SchedulingConstraintHelper::WatchAllTasks(this[8], v4, a2, 1, 1);
  if (*((int *)this + 2) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      operations_research::sat::GenericLiteralWatcher::WatchLowerBound((uint64_t)a2, *(unsigned int *)((char *)this[2] + v6), v4, 0xFFFFFFFFLL);
      ++v7;
      v6 += 20;
    }
    while (v7 < *((int *)this + 2));
  }
}

uint64_t operations_research::sat::TimeTableEdgeFinding::Propagate(operations_research::sat::TimeTableEdgeFinding *this)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;

  v2 = *(_QWORD *)(*((_QWORD *)this + 9) + 848);
  while (1)
  {
    operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*((operations_research::sat::SchedulingConstraintHelper **)this + 8), 1);
    result = operations_research::sat::TimeTableEdgeFinding::TimeTableEdgeFindingPass(this);
    if (!(_DWORD)result)
      break;
    operations_research::sat::SchedulingConstraintHelper::SetTimeDirection(*((operations_research::sat::SchedulingConstraintHelper **)this + 8), 0);
    result = operations_research::sat::TimeTableEdgeFinding::TimeTableEdgeFindingPass(this);
    if (!(_DWORD)result)
      break;
    v4 = v2 == *(_QWORD *)(*((_QWORD *)this + 9) + 848);
    v2 = *(_QWORD *)(*((_QWORD *)this + 9) + 848);
    if (v4)
      return 1;
  }
  return result;
}

uint64_t operations_research::sat::TimeTableEdgeFinding::TimeTableEdgeFindingPass(operations_research::sat::TimeTableEdgeFinding *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char *v23;
  int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  int *v66;
  char *started;

  v2 = *((unsigned int *)this + 2);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = (_QWORD *)*((_QWORD *)this + 8);
    v5 = (int *)v4[4];
    v6 = *(_QWORD *)(v4[1] + 40);
    v7 = (int *)v4[7];
    v8 = *((_QWORD *)this + 16);
    v9 = (int *)*((_QWORD *)this + 2);
    v10 = *((_QWORD *)this + 19);
    v11 = (int *)v4[10];
    v12 = 8 * v2;
    while (1)
    {
      v13 = *v5++;
      v14 = *(_QWORD *)(v6 + 12 * (v13 ^ 1));
      v15 = *v7++;
      v16 = *(_QWORD *)(v6 + 12 * v15);
      v18 = *v11++;
      v17 = v18;
      if (v16 > -v14)
        break;
      if (v17 != -1)
      {
        v20 = *(_QWORD *)(v6 + 12 * v17);
        *(_QWORD *)(v8 + v3) = v20;
        v21 = *v9;
        v22 = *(_QWORD *)(v9 + 3);
        if (*v9 == -1)
          goto LABEL_3;
        goto LABEL_14;
      }
      v20 = *(_QWORD *)(v4[13] + v3);
      *(_QWORD *)(v8 + v3) = v20;
      v21 = *v9;
      v22 = *(_QWORD *)(v9 + 3);
      if (*v9 != -1)
        goto LABEL_14;
LABEL_3:
      *(_QWORD *)(v10 + v3) = v22 * v20;
      v3 += 8;
      v9 += 5;
      if (v12 == v3)
        goto LABEL_15;
    }
    if (v17 == -1)
      v19 = (_QWORD *)(v4[13] + v3);
    else
      v19 = (_QWORD *)(v6 + 12 * v17);
    v20 = *v19 - v16 - v14;
    *(_QWORD *)(v8 + v3) = v20;
    v21 = *v9;
    v22 = *(_QWORD *)(v9 + 3);
    if (*v9 == -1)
      goto LABEL_3;
LABEL_14:
    v22 += *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 40) + 12 * v21) * *(_QWORD *)(v9 + 1);
    goto LABEL_3;
  }
LABEL_15:
  operations_research::sat::TimeTableEdgeFinding::BuildTimeTable(this);
  started = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingStartMin(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                           + 8));
  v23 = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingEndMax(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                     + 8));
  v25 = *(int **)v23;
  v24 = (int *)*((_QWORD *)v23 + 1);
  if (*(int **)v23 != v24)
  {
    v26 = 0x7FFFFFFFFFFFFFFELL;
    v66 = (int *)*((_QWORD *)v23 + 1);
    do
    {
      v27 = *v25;
      v28 = *(_QWORD *)(v25 + 1);
      v29 = (_QWORD *)*((_QWORD *)this + 8);
      v30 = *(int *)(v29[16] + 4 * v27);
      if (((_DWORD)v30 == -1
         || ((*(_QWORD *)(*(_QWORD *)(*v29 + 24) + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v29[16] + 4 * v27)) & 1) != 0)
        && *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v27)
        && v28 != v26)
      {
        v32 = *(_QWORD *)started;
        v33 = *((_QWORD *)started + 1);
        if (v33 == *(_QWORD *)started)
        {
          v26 = *(_QWORD *)(v25 + 1);
        }
        else
        {
          v34 = 0;
          v35 = 0;
          v36 = 0x8000000000000002;
          v37 = -1;
          do
          {
            v39 = *(int *)(v33 - 12);
            v33 -= 12;
            v38 = v39;
            v40 = *(_QWORD *)(v33 + 4);
            v41 = (_QWORD *)*((_QWORD *)this + 8);
            v42 = *(int *)(v41[16] + 4 * v39);
            if ((_DWORD)v42 == -1
              || ((*(_QWORD *)(*(_QWORD *)(*v41 + 24) + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
            {
              v43 = *(_QWORD *)(*((_QWORD *)this + 19) + 8 * v38);
              if (v43 && v28 > v40)
              {
                v45 = v41[7];
                v46 = *(_QWORD *)(v41[1] + 40);
                v47 = *(_QWORD *)(v46 + 12 * (*(_DWORD *)(v45 + 4 * v38) ^ 1));
                if (v28 < -v47)
                {
                  v48 = (int *)(*((_QWORD *)this + 2) + 20 * (int)v38);
                  v49 = *(_QWORD *)(v48 + 3);
                  if (*v48 != -1)
                    v49 += *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 40) + 12 * *v48) * *(_QWORD *)(v48 + 1);
                  v50 = v28 - v40;
                  v51 = *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v38);
                  if (v28 - v40 >= v51)
                    v50 = *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v38);
                  v52 = v50 * v49;
                  v53 = ((v47 + v28 + v51) & ~((v47 + v28 + v51) >> 63)) * v49;
                  v54 = v52 <= v36;
                  if (v52 <= v36)
                    v43 = v53;
                  else
                    v43 = v35;
                  if (v52 > v36)
                  {
                    v35 = v53;
                    v36 = v52;
                  }
                  if (!v54)
                    v37 = v38;
                }
                v34 += v43;
                if (v37 == -1)
                {
                  v37 = -1;
                }
                else
                {
                  v55 = *((_DWORD *)this + 10);
                  v56 = *(_QWORD *)((char *)this + 52);
                  if (v55 != -1)
                    v56 -= *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 40) + 12 * (v55 ^ 1))
                         * *(_QWORD *)((char *)this + 44);
                  v57 = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v38)
                      - *(_QWORD *)(*((_QWORD *)this + 25) + 8 * v27)
                      + v56 * (v28 - v40)
                      - v34;
                  if (v36 > v57)
                  {
                    v58 = *(_QWORD *)(v46 + 12 * *(int *)(v45 + 4 * v37));
                    if (v58 >= v28)
                      v58 = v28;
                    v59 = *(_DWORD *)(v41[4] + 4 * v37);
                    v60 = *(_QWORD *)(v46 + 12 * (v59 ^ 1));
                    v61 = v40 <= -v60 ? -v60 : *(_QWORD *)(v33 + 4);
                    v62 = (int *)(*((_QWORD *)this + 2) + 20 * v37);
                    v63 = *(_QWORD *)(v62 + 3);
                    if (*v62 != -1)
                      v63 += *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 40) + 12 * *v62) * *(_QWORD *)(v62 + 1);
                    v64 = v28 - ((v58 - v61) & ~((v58 - v61) >> 63)) - v57 / v63;
                    if (*(_QWORD *)(v46 + 12 * v59) < v64)
                    {
                      result = operations_research::sat::TimeTableEdgeFinding::IncreaseStartMin((uint64_t)this, v40, v28, v37, v64);
                      if (!(_DWORD)result)
                        return result;
                    }
                  }
                }
              }
            }
          }
          while (v33 != v32);
          v26 = v28;
          v24 = v66;
        }
      }
      v25 += 3;
    }
    while (v25 != v24);
  }
  return 1;
}

char *operations_research::sat::TimeTableEdgeFinding::BuildTimeTable(operations_research::sat::TimeTableEdgeFinding *this)
{
  void **v2;
  char *started;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  char *v24;
  int *v25;
  int *v26;
  char *v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  char *result;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  void **v76;

  v2 = (void **)((char *)this + 80);
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  v76 = (void **)((char *)this + 104);
  *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
  started = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingStartMax(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                           + 8));
  v5 = *(_QWORD *)started;
  v4 = *((_QWORD *)started + 1);
  if (v4 != *(_QWORD *)started)
  {
    do
    {
      v8 = *(_DWORD *)(v4 - 12);
      v4 -= 12;
      v7 = v8;
      v9 = *(_QWORD *)(v4 + 4);
      v10 = (_QWORD *)*((_QWORD *)this + 8);
      v11 = *(int *)(v10[16] + 4 * v8);
      if (((_DWORD)v11 == -1
         || ((*(_QWORD *)(*(_QWORD *)(*v10 + 24) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
        && v9 < *(_QWORD *)(*(_QWORD *)(v10[1] + 40) + 12 * *(int *)(v10[7] + 4 * v7)))
      {
        v13 = (char *)*((_QWORD *)this + 11);
        v12 = *((_QWORD *)this + 12);
        if ((unint64_t)v13 < v12)
        {
          *(_DWORD *)v13 = v7;
          *(_QWORD *)(v13 + 4) = v9;
          v6 = v13 + 12;
        }
        else
        {
          v14 = (char *)*v2;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*v2) >> 2);
          v16 = v15 + 1;
          if (v15 + 1 > 0x1555555555555555)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v14) >> 2);
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0xAAAAAAAAAAAAAAALL)
            v18 = 0x1555555555555555;
          else
            v18 = v16;
          if (v18)
          {
            if (v18 > 0x1555555555555555)
LABEL_94:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v19 = (char *)operator new(12 * v18);
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[12 * v15];
          *(_DWORD *)v20 = v7;
          *(_QWORD *)(v20 + 4) = v9;
          v21 = v20;
          if (v13 != v14)
          {
            do
            {
              v22 = *(_QWORD *)(v13 - 12);
              v13 -= 12;
              v23 = *((_DWORD *)v13 + 2);
              *(_QWORD *)(v21 - 12) = v22;
              v21 -= 12;
              *((_DWORD *)v21 + 2) = v23;
            }
            while (v13 != v14);
            v13 = (char *)*v2;
          }
          v6 = v20 + 12;
          *((_QWORD *)this + 10) = v21;
          *((_QWORD *)this + 11) = v20 + 12;
          *((_QWORD *)this + 12) = &v19[12 * v18];
          if (v13)
            operator delete(v13);
        }
        *((_QWORD *)this + 11) = v6;
      }
    }
    while (v4 != v5);
  }
  v24 = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingEndMin(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                     + 8));
  v25 = *(int **)v24;
  v26 = (int *)*((_QWORD *)v24 + 1);
  if (*(int **)v24 != v26)
  {
    while (1)
    {
      v28 = *v25;
      v29 = *(_QWORD *)(v25 + 1);
      v30 = (_QWORD *)*((_QWORD *)this + 8);
      v31 = *(int *)(v30[16] + 4 * *v25);
      if ((_DWORD)v31 != -1
        && ((*(_QWORD *)(*(_QWORD *)(*v30 + 24) + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) == 0
        || v29 <= -*(_QWORD *)(*(_QWORD *)(v30[1] + 40) + 12 * (*(_DWORD *)(v30[4] + 4 * v28) ^ 1)))
      {
        goto LABEL_30;
      }
      v33 = (char *)*((_QWORD *)this + 14);
      v32 = *((_QWORD *)this + 15);
      if ((unint64_t)v33 >= v32)
        break;
      *(_DWORD *)v33 = v28;
      *(_QWORD *)(v33 + 4) = v29;
      v27 = v33 + 12;
LABEL_29:
      *((_QWORD *)this + 14) = v27;
LABEL_30:
      v25 += 3;
      if (v25 == v26)
        goto LABEL_51;
    }
    v34 = (char *)*v76;
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)*v76) >> 2);
    v36 = v35 + 1;
    if (v35 + 1 > 0x1555555555555555)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)v34) >> 2);
    if (2 * v37 > v36)
      v36 = 2 * v37;
    if (v37 >= 0xAAAAAAAAAAAAAAALL)
      v38 = 0x1555555555555555;
    else
      v38 = v36;
    if (v38)
    {
      if (v38 > 0x1555555555555555)
        goto LABEL_94;
      v39 = (char *)operator new(12 * v38);
      v40 = (uint64_t)&v39[12 * v35];
      *(_DWORD *)v40 = v28;
      *(_QWORD *)(v40 + 4) = v29;
      v41 = v40;
      if (v33 == v34)
        goto LABEL_48;
    }
    else
    {
      v39 = 0;
      v40 = 4 * ((v33 - (_BYTE *)*v76) >> 2);
      *(_DWORD *)v40 = v28;
      *(_QWORD *)(v40 + 4) = v29;
      v41 = 12 * v35;
      if (v33 == v34)
        goto LABEL_48;
    }
    do
    {
      v42 = *(_QWORD *)(v33 - 12);
      v33 -= 12;
      v43 = *((_DWORD *)v33 + 2);
      *(_QWORD *)(v41 - 12) = v42;
      v41 -= 12;
      *(_DWORD *)(v41 + 8) = v43;
    }
    while (v33 != v34);
    v33 = (char *)*v76;
LABEL_48:
    v27 = (char *)(v40 + 12);
    *((_QWORD *)this + 13) = v41;
    *((_QWORD *)this + 14) = v40 + 12;
    *((_QWORD *)this + 15) = &v39[12 * v38];
    if (v33)
      operator delete(v33);
    goto LABEL_29;
  }
LABEL_51:
  v44 = operations_research::sat::SchedulingConstraintHelper::TaskByDecreasingEndMax(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                     + 8));
  result = operations_research::sat::SchedulingConstraintHelper::TaskByIncreasingStartMin(*((operations_research::sat::SchedulingConstraintHelper **)this
                                                                                          + 8));
  v46 = *((unsigned int *)this + 2);
  if ((int)v46 >= 1)
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = v46 - 1;
    v54 = *(_QWORD *)v44;
    v55 = *(_QWORD *)result;
    v56 = *((_QWORD *)this + 10);
    v57 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 11) - v56) >> 2);
    v58 = *((_QWORD *)this + 13);
    v59 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 14) - v58) >> 2);
    result = (char *)(*(_QWORD *)result + 4);
    do
    {
      v60 = *(_QWORD *)(v54 + 12 * v53 + 4);
      if (v49 < (int)v46)
      {
        if (*(_QWORD *)(v55 + 12 * v49 + 4) < v60)
          v60 = *(_QWORD *)(v55 + 12 * v49 + 4);
        v61 = v47;
        if (v57 <= v47)
        {
LABEL_57:
          v62 = v48;
          if (v59 <= v48)
            goto LABEL_58;
          goto LABEL_66;
        }
      }
      else
      {
        v61 = v47;
        if (v57 <= v47)
          goto LABEL_57;
      }
      if (*(_QWORD *)(v56 + 12 * (int)v61 + 4) < v60)
        v60 = *(_QWORD *)(v56 + 12 * (int)v61 + 4);
      v62 = v48;
      if (v59 <= v48)
      {
LABEL_58:
        v52 += (v60 - v51) * v50;
        if (v49 >= (int)v46)
          goto LABEL_75;
LABEL_69:
        v63 = v49;
        v64 = &result[12 * v49];
        while (*(_QWORD *)v64 == v60)
        {
          *(_QWORD *)(*((_QWORD *)this + 22) + 8 * *((int *)v64 - 1)) = v52;
          ++v63;
          v64 += 12;
          if (v46 == v63)
          {
            v49 = v46;
            if ((v53 & 0x80000000) == 0)
              goto LABEL_75;
            goto LABEL_79;
          }
        }
        v49 = v63;
        if ((v53 & 0x80000000) == 0)
          goto LABEL_75;
        goto LABEL_79;
      }
LABEL_66:
      if (*(_QWORD *)(v58 + 12 * (int)v62 + 4) < v60)
        v60 = *(_QWORD *)(v58 + 12 * (int)v62 + 4);
      v52 += (v60 - v51) * v50;
      if (v49 < (int)v46)
        goto LABEL_69;
LABEL_75:
      while (*(_QWORD *)(v54 + 12 * v53 + 4) == v60)
      {
        *(_QWORD *)(*((_QWORD *)this + 25) + 8 * *(int *)(v54 + 12 * v53)) = v52;
        if ((int)v53-- <= 0)
        {
          v53 = -1;
          break;
        }
      }
LABEL_79:
      if (v57 > v61)
      {
        v66 = v56 + 4 + 12 * (int)v61;
        v67 = (uint64_t *)v66;
        do
        {
          v68 = *v67;
          v67 = (uint64_t *)((char *)v67 + 12);
          if (v68 != v60)
            break;
          v69 = (int *)(*((_QWORD *)this + 2) + 20 * *(int *)(v66 - 4));
          v70 = *(_QWORD *)(v69 + 3);
          if (*v69 != -1)
            v70 += *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 40) + 12 * *v69) * *(_QWORD *)(v69 + 1);
          v50 += v70;
          ++v61;
          v66 = (uint64_t)v67;
        }
        while (v57 > v61);
        v47 = v61;
        if (v59 <= v62)
          goto LABEL_54;
LABEL_88:
        v71 = v58 + 4 + 12 * (int)v62;
        v72 = (uint64_t *)v71;
        do
        {
          v73 = *v72;
          v72 = (uint64_t *)((char *)v72 + 12);
          if (v73 != v60)
            break;
          v74 = (int *)(*((_QWORD *)this + 2) + 20 * *(int *)(v71 - 4));
          v75 = *(_QWORD *)(v74 + 3);
          if (*v74 != -1)
            v75 += *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 40) + 12 * *v74) * *(_QWORD *)(v74 + 1);
          v50 -= v75;
          ++v62;
          v71 = (uint64_t)v72;
        }
        while (v59 > v62);
        v48 = v62;
        goto LABEL_54;
      }
      if (v59 > v62)
        goto LABEL_88;
LABEL_54:
      v51 = v60;
    }
    while ((v53 & 0x80000000) == 0);
  }
  return result;
}

uint64_t operations_research::sat::TimeTableEdgeFinding::IncreaseStartMin(uint64_t a1, int64_t a2, int64_t a3, int a4, uint64_t a5)
{
  _QWORD *v10;
  int v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  operations_research::sat::SchedulingConstraintHelper *v46;
  int64_t v47;
  unint64_t v48;
  operations_research::sat::SchedulingConstraintHelper *v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  char *v56;
  int64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  char *v68;
  char *v69;
  int v71;
  uint64_t v72;
  int64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _BYTE v76[12];
  _BYTE v77[12];
  _BYTE v78[12];

  operations_research::sat::SchedulingConstraintHelper::ClearReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 64));
  v74 = *(_QWORD **)(a1 + 64);
  v10 = v74;
  v75 = v74 + 48;
  v11 = *(_DWORD *)(a1 + 40);
  v73 = a2;
  if (v11 != -1)
  {
    *(_DWORD *)v76 = v11 ^ 1;
    *(_QWORD *)&v76[4] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 40) + 12 * (v11 ^ 1));
    v13 = (char *)v74[49];
    v12 = v74[50];
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)*v75;
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*v75] >> 2);
      v17 = v16 + 1;
      if (v16 + 1 > 0x1555555555555555)
        goto LABEL_78;
      v18 = a3;
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v15) >> 2);
      if (2 * v19 > v17)
        v17 = 2 * v19;
      if (v19 >= 0xAAAAAAAAAAAAAAALL)
        v20 = 0x1555555555555555;
      else
        v20 = v17;
      if (v20)
      {
        if (v20 > 0x1555555555555555)
          goto LABEL_79;
        v21 = (char *)operator new(12 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[12 * v16];
      v23 = &v21[12 * v20];
      *(_QWORD *)v22 = *(_QWORD *)v76;
      *((_DWORD *)v22 + 2) = *(_DWORD *)&v76[8];
      v14 = v22 + 12;
      a3 = v18;
      if (v13 == v15)
      {
        a2 = v73;
        v10 = v74;
        v74[48] = v22;
        v74[49] = v14;
        v74[50] = v23;
        if (!v13)
          goto LABEL_19;
      }
      else
      {
        v10 = v74;
        do
        {
          v24 = *(_QWORD *)(v13 - 12);
          v13 -= 12;
          v25 = *((_DWORD *)v13 + 2);
          *(_QWORD *)(v22 - 12) = v24;
          v22 -= 12;
          *((_DWORD *)v22 + 2) = v25;
        }
        while (v13 != v15);
        v13 = (char *)*v75;
        v74[48] = v22;
        v74[49] = v14;
        v74[50] = v23;
        a2 = v73;
        if (!v13)
          goto LABEL_19;
      }
      operator delete(v13);
    }
    else
    {
      *(_QWORD *)v13 = *(_QWORD *)v76;
      *((_DWORD *)v13 + 2) = *(_DWORD *)&v76[8];
      v14 = v13 + 12;
    }
LABEL_19:
    v10[49] = v14;
  }
  v72 = a5;
  v26 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 20 * a4);
  if (v26 == -1)
    goto LABEL_41;
  *(_DWORD *)v77 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 20 * a4);
  *(_QWORD *)&v77[4] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 40) + 12 * v26);
  v28 = (char *)v10[49];
  v27 = v10[50];
  if ((unint64_t)v28 >= v27)
  {
    v30 = v10;
    v31 = (char *)*v75;
    v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v28[-*v75] >> 2);
    v33 = v32 + 1;
    if (v32 + 1 <= 0x1555555555555555)
    {
      v34 = a3;
      v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (_QWORD)v31) >> 2);
      if (2 * v35 > v33)
        v33 = 2 * v35;
      if (v35 >= 0xAAAAAAAAAAAAAAALL)
        v36 = 0x1555555555555555;
      else
        v36 = v33;
      if (!v36)
      {
        v37 = 0;
        goto LABEL_35;
      }
      if (v36 <= 0x1555555555555555)
      {
        v37 = (char *)operator new(12 * v36);
LABEL_35:
        v38 = &v37[12 * v32];
        v39 = &v37[12 * v36];
        *(_QWORD *)v38 = *(_QWORD *)v77;
        *((_DWORD *)v38 + 2) = *(_DWORD *)&v77[8];
        v29 = v38 + 12;
        a3 = v34;
        v10 = v30;
        if (v28 != v31)
        {
          do
          {
            v40 = *(_QWORD *)(v28 - 12);
            v28 -= 12;
            v41 = *((_DWORD *)v28 + 2);
            *(_QWORD *)(v38 - 12) = v40;
            v38 -= 12;
            *((_DWORD *)v38 + 2) = v41;
          }
          while (v28 != v31);
          v28 = (char *)*v75;
        }
        v30[48] = v38;
        v30[49] = v29;
        v30[50] = v39;
        a2 = v73;
        if (v28)
          operator delete(v28);
        goto LABEL_40;
      }
LABEL_79:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_78:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  *(_QWORD *)v28 = *(_QWORD *)v77;
  *((_DWORD *)v28 + 2) = *(_DWORD *)&v77[8];
  v29 = v28 + 12;
LABEL_40:
  v10[49] = v29;
LABEL_41:
  operations_research::sat::SchedulingConstraintHelper::AddStartMinReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 64), a4, a2);
  operations_research::sat::SchedulingConstraintHelper::AddDurationMinReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 64), a4);
  v42 = *(_DWORD *)(a1 + 8);
  if (v42 >= 1)
  {
    v43 = 0;
    v44 = a4;
    v71 = a4;
    while (1)
    {
      if (v43 == v44)
        goto LABEL_52;
      v46 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 64);
      v52 = *(int *)(*((_QWORD *)v46 + 16) + 4 * v43);
      if ((_DWORD)v52 != -1
        && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v46 + 24) + ((v52 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v52) & 1) == 0)
      {
        goto LABEL_52;
      }
      v53 = *(_QWORD *)(*((_QWORD *)v46 + 1) + 40);
      if (-*(_QWORD *)(v53 + 12 * (*(_DWORD *)(*((_QWORD *)v46 + 7) + 4 * v43) ^ 1)) <= a2)
        goto LABEL_52;
      v47 = *(_QWORD *)(v53 + 12 * *(int *)(*((_QWORD *)v46 + 4) + 4 * v43));
      if (v47 >= a3)
        goto LABEL_52;
      v54 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 20 * v43);
      if (v54 != -1)
        break;
LABEL_45:
      if (v47 >= a2)
        v48 = a2;
      else
        v48 = v47;
      operations_research::sat::SchedulingConstraintHelper::AddStartMinReason(v46, v43, v48);
      v49 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 64);
      v50 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v49 + 1) + 40)
                      + 12 * (*(_DWORD *)(*((_QWORD *)v49 + 7) + 4 * v43) ^ 1));
      if (-v50 > a3)
        v51 = -v50;
      else
        v51 = a3;
      operations_research::sat::SchedulingConstraintHelper::AddEndMaxReason(v49, v43, v51);
      operations_research::sat::SchedulingConstraintHelper::AddDurationMinReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 64), v43);
      operations_research::sat::SchedulingConstraintHelper::AddPresenceReason(*(operations_research::sat::SchedulingConstraintHelper **)(a1 + 64), v43);
      v42 = *(_DWORD *)(a1 + 8);
LABEL_52:
      if (++v43 >= v42)
        return operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(_QWORD *)(a1 + 64), a4, v72);
    }
    *(_DWORD *)v78 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 20 * v43);
    *(_QWORD *)&v78[4] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 40) + 12 * v54);
    v56 = (char *)v10[49];
    v55 = v10[50];
    if ((unint64_t)v56 < v55)
    {
      *(_QWORD *)v56 = *(_QWORD *)v78;
      *((_DWORD *)v56 + 2) = *(_DWORD *)&v78[8];
      v45 = v56 + 12;
      a4 = v71;
      v10 = v74;
    }
    else
    {
      v57 = a3;
      v58 = (char *)*v75;
      v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v56[-*v75] >> 2);
      v60 = v59 + 1;
      if (v59 + 1 > 0x1555555555555555)
        goto LABEL_78;
      v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (_QWORD)v58) >> 2);
      if (2 * v61 > v60)
        v60 = 2 * v61;
      if (v61 >= 0xAAAAAAAAAAAAAAALL)
        v62 = 0x1555555555555555;
      else
        v62 = v60;
      if (v62)
      {
        if (v62 > 0x1555555555555555)
          goto LABEL_79;
        v63 = (char *)operator new(12 * v62);
      }
      else
      {
        v63 = 0;
      }
      v64 = &v63[12 * v59];
      *(_QWORD *)v64 = *(_QWORD *)v78;
      *((_DWORD *)v64 + 2) = *(_DWORD *)&v78[8];
      v65 = v64;
      if (v56 != v58)
      {
        a4 = v71;
        a3 = v57;
        v10 = v74;
        do
        {
          v66 = *(_QWORD *)(v56 - 12);
          v56 -= 12;
          v67 = *((_DWORD *)v56 + 2);
          *(_QWORD *)(v65 - 12) = v66;
          v65 -= 12;
          *((_DWORD *)v65 + 2) = v67;
        }
        while (v56 != v58);
        v56 = (char *)*v75;
        a2 = v73;
        v68 = &v63[12 * v62];
        v45 = v64 + 12;
        v74[48] = v65;
        v74[49] = v64 + 12;
        v74[50] = v68;
        if (!v56)
          goto LABEL_44;
        goto LABEL_76;
      }
      a4 = v71;
      a3 = v57;
      a2 = v73;
      v10 = v74;
      v69 = &v63[12 * v62];
      v45 = v64 + 12;
      v74[48] = v64;
      v74[49] = v64 + 12;
      v74[50] = v69;
      if (v56)
LABEL_76:
        operator delete(v56);
    }
LABEL_44:
    v10[49] = v45;
    v46 = *(operations_research::sat::SchedulingConstraintHelper **)(a1 + 64);
    v47 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v46 + 1) + 40) + 12 * *(int *)(*((_QWORD *)v46 + 4) + 4 * v43));
    goto LABEL_45;
  }
  return operations_research::sat::SchedulingConstraintHelper::IncreaseStartMin(*(_QWORD *)(a1 + 64), a4, v72);
}

void operations_research::sat::SchedulingConstraintHelper::AddDurationMinReason(operations_research::sat::SchedulingConstraintHelper *this, int a2)
{
  int v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[12];

  operations_research::sat::SchedulingConstraintHelper::AddOtherReason(this, a2);
  v4 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * a2);
  if (v4 != -1)
  {
    *(_DWORD *)v16 = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * a2);
    *(_QWORD *)&v16[4] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 12 * v4);
    v6 = (_DWORD *)*((_QWORD *)this + 49);
    v5 = *((_QWORD *)this + 50);
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_DWORD *)*((_QWORD *)this + 48);
      v9 = 0xAAAAAAAAAAAAAAABLL * (v6 - v8) + 1;
      if (v9 > 0x1555555555555555)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v8) >> 2);
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0xAAAAAAAAAAAAAAALL)
        v11 = 0x1555555555555555;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v12 = (char *)operator new(12 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[4 * (v6 - v8)];
      *(_QWORD *)v13 = *(_QWORD *)v16;
      *((_DWORD *)v13 + 2) = *(_DWORD *)&v16[8];
      v7 = v13 + 12;
      if (v6 != v8)
      {
        do
        {
          v14 = *(_QWORD *)(v6 - 3);
          v6 -= 3;
          v15 = v6[2];
          *(_QWORD *)(v13 - 12) = v14;
          v13 -= 12;
          *((_DWORD *)v13 + 2) = v15;
        }
        while (v6 != v8);
        v6 = (_DWORD *)*((_QWORD *)this + 48);
      }
      *((_QWORD *)this + 48) = v13;
      *((_QWORD *)this + 49) = v7;
      *((_QWORD *)this + 50) = &v12[12 * v11];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_QWORD *)v6 = *(_QWORD *)v16;
      v6[2] = *(_DWORD *)&v16[8];
      v7 = v6 + 3;
    }
    *((_QWORD *)this + 49) = v7;
  }
}

void operations_research::sat::TimeTableEdgeFinding::~TimeTableEdgeFinding(operations_research::sat::TimeTableEdgeFinding *this)
{
  operations_research::sat::TimeTableEdgeFinding::~TimeTableEdgeFinding(this);
  JUMPOUT(0x22E31DF78);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_24F987B68;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 11) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 3) = v8;
    operator delete(v8);
  }
}

uint64_t operations_research::sat::MoveOneUnprocessedLiteralLast(uint64_t a1, int a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  unint64_t v13;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  int32x2_t *v26;
  __int32 v27;
  uint64_t v28;
  uint64_t v29;
  __int32 v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t *v38;
  unint64_t v39;
  const std::nothrow_t *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 == v4)
    return 0xFFFFFFFFLL;
  v5 = a1 + 8;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *((_DWORD *)v4 - 1);
    v8 = a1 + 8;
    v9 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_DWORD *)(v9 + 25);
      v11 = v10 < v7;
      if (v10 >= v7)
        v12 = (uint64_t *)v9;
      else
        v12 = (uint64_t *)(v9 + 8);
      if (!v11)
        v8 = v9;
      v9 = *v12;
    }
    while (*v12);
    if (v8 != v5 && v7 >= *(_DWORD *)(v8 + 25))
    {
      v15 = 0;
      v16 = 0;
      v17 = (unint64_t)(v4 - v3) >> 2;
      v18 = v17 - 1;
      while (1)
      {
        LODWORD(v17) = v17 - 1;
        if ((v17 & 0x80000000) != 0)
          break;
        v19 = *(_DWORD *)&v3[4 * v17];
        v20 = a1 + 8;
        v21 = *(_QWORD *)(a1 + 8);
        do
        {
          v22 = *(_DWORD *)(v21 + 25);
          v23 = v22 < v19;
          if (v22 >= v19)
            v24 = (uint64_t *)v21;
          else
            v24 = (uint64_t *)(v21 + 8);
          if (!v23)
            v20 = v21;
          v21 = *v24;
        }
        while (*v24);
        if (v20 == v5 || v19 < *(_DWORD *)(v20 + 25))
        {
          ++v15;
          v18 = v17;
          if (v15 >= v16)
            break;
        }
        else if (v15 >= ++v16)
        {
          break;
        }
      }
      if (v15)
      {
        if (v18 >= a2)
          v25 = a2;
        else
          v25 = v18;
        v26 = (int32x2_t *)&v3[4 * (int)v25];
        v43 = a1;
        if (v26 != (int32x2_t *)v4)
        {
          while (1)
          {
            v27 = v26->i32[0];
            v28 = a1 + 8;
            v29 = v6;
            do
            {
              v30 = *(_DWORD *)(v29 + 25);
              v31 = v30 < v27;
              if (v30 >= v27)
                v32 = (uint64_t *)v29;
              else
                v32 = (uint64_t *)(v29 + 8);
              if (!v31)
                v28 = v29;
              v29 = *v32;
            }
            while (*v32);
            if (v28 == v5 || *(_DWORD *)(v28 + 25) > v27)
              break;
            v26 = (int32x2_t *)((char *)v26 + 4);
            if (v26 == (int32x2_t *)v4)
              return v25;
          }
          while (1)
          {
            v4 -= 4;
            if (v26 == (int32x2_t *)v4)
              break;
            v34 = *(_DWORD *)v4;
            v33 = a1 + 8;
            v35 = v6;
            do
            {
              v36 = *(_DWORD *)(v35 + 25);
              v37 = v36 < v34;
              if (v36 >= v34)
                v38 = (uint64_t *)v35;
              else
                v38 = (uint64_t *)(v35 + 8);
              if (!v37)
                v33 = v35;
              v35 = *v38;
            }
            while (*v38);
            if (v33 == v5 || *(_DWORD *)(v33 + 25) > v34)
              v33 = a1 + 8;
            if (v33 != v5)
            {
              if (v4 - (unsigned __int8 *)v26 < 9)
              {
LABEL_67:
                v42 = 0;
                v39 = 0;
              }
              else
              {
                if (((v4 - (unsigned __int8 *)v26) >> 2) + 1 >= 0x1FFFFFFFFFFFFFFFLL)
                  v39 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v39 = ((v4 - (unsigned __int8 *)v26) >> 2) + 1;
                v40 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
                while (1)
                {
                  v41 = operator new(4 * v39, v40);
                  if (v41)
                    break;
                  v11 = v39 > 1;
                  v39 >>= 1;
                  if (!v11)
                    goto LABEL_67;
                }
                v42 = v41;
              }
              std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::MoveOneUnprocessedLiteralLast(std::set<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>> const&,int,std::vector<operations_research::sat::Literal> *)::$_0 &,std::__wrap_iter<operations_research::sat::Literal*>,long,std::pair<operations_research::sat::Literal*,long>>(v26, v4, &v43, ((v4 - (unsigned __int8 *)v26) >> 2) + 1, (unint64_t)v42, v39);
              if (v42)
                operator delete(v42);
              return v25;
            }
          }
        }
        return v25;
      }
      return 0xFFFFFFFFLL;
    }
  }
  v13 = (unint64_t)(v4 - v3) >> 2;
  if ((int)v13 >= a2)
    return a2;
  else
    return v13;
}

uint64_t operations_research::sat::IncrementalAverage::Reset(uint64_t this, double a2)
{
  *(_QWORD *)(this + 8) = 0;
  *(double *)this = a2;
  return this;
}

double operations_research::sat::IncrementalAverage::AddData(operations_research::sat::IncrementalAverage *this, double a2)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1) + 1;
  *((_QWORD *)this + 1) = v2;
  result = *(double *)this + (a2 - *(double *)this) / (double)v2;
  *(double *)this = result;
  return result;
}

void operations_research::sat::CompressTuples(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  absl::lts_2020_02_25::hash_internal *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  absl::lts_2020_02_25::hash_internal *v17;
  unint64_t v18;
  unint64_t v19;
  _UNKNOWN **v20;
  _UNKNOWN **v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t *v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  int64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _DWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int *v71;
  int *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  _BYTE *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  int64_t v99;
  char *v100;
  char *v101;
  size_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  _OWORD *v113;
  uint64_t v114;
  __int128 v115;
  int v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  int v124;
  int64_t v125;
  _BYTE *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  int v134;
  uint64_t v135;
  char *v136;
  int v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  void *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  char *v149;
  size_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  void **v161;
  uint64_t v162;
  char *v163;
  char *v164;
  size_t v165;
  unint64_t v166;
  _BYTE *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  void *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *__dst;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  unint64_t v193;
  uint64_t *v194;
  char *v195;
  absl::lts_2020_02_25::hash_internal *v196;
  void *__p;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  absl::lts_2020_02_25::hash_internal *v201;
  absl::lts_2020_02_25::hash_internal *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char v207[9];

  if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8))
    return;
  gtl::STLSortAndRemoveDuplicates<std::vector<std::vector<long long>>>((const void ***)a4);
  v192 = (uint64_t *)a4;
  v5 = *(_QWORD *)(*(_QWORD *)a4 + 8) - **(_QWORD **)a4;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  v6 = (v5 << 29) - 0x100000000;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  if (v5 << 29 == 0x100000000)
  {
    v7 = 0;
    v196 = 0;
    v8 = v192;
    if ((int)(v5 >> 3) >= 1)
      goto LABEL_5;
LABEL_178:
    v175 = 0;
    if (v7)
      goto LABEL_173;
    goto LABEL_174;
  }
  if ((v6 & 0x8000000000000000) != 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v7 = (absl::lts_2020_02_25::hash_internal *)operator new(v6 >> 29);
  v201 = v7;
  v203 = (char *)v7 + 8 * ((uint64_t)v6 >> 32);
  bzero(v7, v6 >> 29);
  v196 = (absl::lts_2020_02_25::hash_internal *)((char *)v7 + (v6 >> 29));
  v202 = v196;
  v8 = v192;
  if ((int)(v5 >> 3) < 1)
    goto LABEL_178;
LABEL_5:
  __dst = 0;
  v9 = 0;
  v191 = (v5 >> 3);
  while (2)
  {
    if (*(_DWORD *)(a1 + 8 * v9) == 1)
      goto LABEL_10;
    v179 = *(_DWORD *)(a1 + 8 * v9);
    __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v198 = 0u;
    v199 = 0u;
    v200 = 0;
    v10 = *v8;
    v190 = v9;
    if (v8[1] == *v8)
    {
      v65 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v66 = 0;
      v205 = __dst;
      v67 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      if ((char)absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group <= -2)
        goto LABEL_69;
      goto LABEL_70;
    }
    v11 = 0;
    do
    {
      v14 = 0;
      v15 = 0;
      v16 = (_QWORD *)(v10 + 24 * v11);
      v17 = v201;
      do
      {
        if (v9 != v14)
          *((_QWORD *)v17 + v15++) = *(_QWORD *)(*v16 + 8 * v14);
        ++v14;
      }
      while (v191 != v14);
      v18 = v196 - v17;
      v193 = v11;
      if ((unint64_t)(v196 - v17) < 0x11)
      {
        if (v18 < 9)
        {
          if (v18 < 4)
          {
            if (v196 == v17)
            {
              v21 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
              goto LABEL_31;
            }
            v19 = (*((unsigned __int8 *)v17 + (v18 >> 1)) << ((4 * v18) & 0xF8)) | *(unsigned __int8 *)v17 | (*((unsigned __int8 *)v196 - 1) << (8 * (v18 - 1)));
          }
          else
          {
            v19 = ((unint64_t)*((unsigned int *)v196 - 1) << (8 * (v196 - v17)
                                                                   - 32)) | *(unsigned int *)v17;
          }
          v20 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
        }
        else
        {
          v19 = *((_QWORD *)v196 - 1) >> (-8 * (v196 - v17));
          v20 = (_UNKNOWN **)(((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                               + *(_QWORD *)v17)
                              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                 * ((_QWORD)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                  + *(_QWORD *)v17)));
        }
      }
      else
      {
        if (v18 >= 0x401)
        {
          v21 = (_UNKNOWN **)absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, v17, (char *)v18);
          goto LABEL_31;
        }
        v19 = absl::lts_2020_02_25::hash_internal::CityHash64(v17, v196 - v17);
        v20 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
      }
      v21 = (_UNKNOWN **)(((((unint64_t)v20 + v19) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)v20 + v19)));
LABEL_31:
      v22 = 0;
      v23 = (char *)__p;
      v24 = v196 - v17;
      v25 = ((((unint64_t)v21 + ((v196 - v17) >> 3)) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((_QWORD)v21 + ((v196 - v17) >> 3)));
      v26 = v198;
      v27 = (v25 >> 7) ^ ((unint64_t)__p >> 12);
      v28 = v199;
      v29 = 0x101010101010101 * (v25 & 0x7F);
      while (1)
      {
        v30 = v27 & v28;
        v31 = *(_QWORD *)&v23[v27 & v28];
        v32 = ((v31 ^ v29) - 0x101010101010101) & ~(v31 ^ v29) & 0x8080808080808080;
        if (v32)
          break;
LABEL_37:
        if ((v31 & (~v31 << 6) & 0x8080808080808080) != 0)
        {
          v8 = v192;
          v41 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::vector<long long> const,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<std::vector<long long> const>,std::equal_to<std::vector<long long> const>,std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>::prepare_insert((uint64_t *)&__p, v25);
          v42 = (_QWORD *)(v198 + 48 * v41);
          *v42 = 0;
          v42[1] = 0;
          v42[2] = 0;
          v43 = v196 - v17;
          if (v196 != v17)
          {
            if (v43 < 0)
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            v44 = (char *)operator new(v196 - v17);
            *v42 = v44;
            v42[1] = v44;
            v45 = &v44[8 * (v43 >> 3)];
            v42[2] = v45;
            memcpy(v44, v17, v43);
            v42[1] = v45;
          }
          v42[3] = 0;
          v42[4] = 0;
          v42[5] = 0;
          v46 = v198 + 48 * v41;
          v47 = *(_QWORD *)(v46 + 40);
          v37 = (_QWORD *)(v46 + 40);
          v36 = v47;
          v39 = v37 - 1;
          v40 = (char *)*(v37 - 1);
          if ((unint64_t)v40 >= v47)
            goto LABEL_45;
LABEL_14:
          v12 = v193;
          *(_DWORD *)v40 = v193;
          v13 = (uint64_t)(v40 + 4);
          v9 = v190;
          goto LABEL_15;
        }
        v22 += 8;
        v27 = v22 + v30;
      }
      v183 = v29;
      v186 = v22;
      while (1)
      {
        v33 = (v30 + (__clz(__rbit64(v32)) >> 3)) & v28;
        v34 = v26 + 48 * v33;
        if (*(_QWORD *)(v34 + 8) - *(_QWORD *)v34 == v24 && !memcmp(*(const void **)v34, v17, v24))
          break;
        v32 &= v32 - 1;
        v29 = v183;
        v22 = v186;
        if (!v32)
          goto LABEL_37;
      }
      v8 = v192;
      v35 = v26 + 48 * v33;
      v38 = *(_QWORD *)(v35 + 40);
      v37 = (_QWORD *)(v35 + 40);
      v36 = v38;
      v39 = v37 - 1;
      v40 = (char *)*(v37 - 1);
      if ((unint64_t)v40 < v38)
        goto LABEL_14;
LABEL_45:
      v48 = (char *)*(v37 - 2);
      v49 = (v40 - v48) >> 2;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v51 = v36 - (_QWORD)v48;
      if (v51 >> 1 > v50)
        v50 = v51 >> 1;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
        v52 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        if (v52 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v53 = v52;
        v54 = operator new(4 * v52);
        v52 = v53;
        v55 = &v54[4 * v49];
        *v55 = v193;
        v13 = (uint64_t)(v55 + 1);
        if (v40 == v48)
        {
LABEL_57:
          v9 = v190;
          goto LABEL_63;
        }
      }
      else
      {
        v54 = 0;
        v55 = (_DWORD *)(4 * v49);
        *(_DWORD *)(4 * v49) = v193;
        v13 = 4 * v49 + 4;
        if (v40 == v48)
          goto LABEL_57;
      }
      v56 = v40 - 4 - v48;
      if (v56 >= 0x2C)
      {
        v9 = v190;
        if ((unint64_t)(v48 - v54) >= 0x20)
        {
          v57 = (v56 >> 2) + 1;
          v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
          v59 = &v40[-v58];
          v55 = (_DWORD *)((char *)v55 - v58);
          v60 = &v54[4 * v49 - 16];
          v61 = v40 - 16;
          v62 = v57 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v63 = *(_OWORD *)v61;
            *(v60 - 1) = *((_OWORD *)v61 - 1);
            *v60 = v63;
            v60 -= 2;
            v61 -= 32;
            v62 -= 8;
          }
          while (v62);
          v40 = v59;
          if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_63;
        }
      }
      else
      {
        v9 = v190;
      }
      do
      {
        v64 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *--v55 = v64;
      }
      while (v40 != v48);
LABEL_63:
      *(v37 - 2) = v55;
      *v39 = v13;
      *v37 = &v54[4 * v52];
      if (v48)
        operator delete(v48);
      v12 = v193;
LABEL_15:
      *v39 = v13;
      v11 = v12 + 1;
      v10 = *v8;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 3) > v11);
    v65 = (uint64_t *)__p;
    v66 = v198;
    v205 = __dst;
    v67 = (uint64_t *)__p;
    if (*(char *)__p <= -2)
    {
      do
      {
LABEL_69:
        v68 = (__clz(__rbit64((((unint64_t)*v67 >> 7) & ~*v67 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v67 = (uint64_t *)((char *)v67 + v68);
        v66 += 48 * v68;
      }
      while (*(char *)v67 < -1);
    }
LABEL_70:
    v69 = (uint64_t *)((char *)v65 + v199);
    if (v67 != (uint64_t *)((char *)v65 + v199))
    {
      v70 = v179;
      v194 = (uint64_t *)((char *)v65 + v199);
      v187 = v179;
      while (1)
      {
        v72 = *(int **)(v66 + 24);
        v71 = *(int **)(v66 + 32);
        if (v70 != v71 - v72
          || (v73 = v72 + 1,
              *(_QWORD *)(*(_QWORD *)(*v8 + 24 * *v72) + 8 * v9) = a3,
              v74 = (char *)v71 - (char *)(v72 + 1),
              v74 < 1))
        {
          v93 = *((char *)v67 + 1);
          v67 = (uint64_t *)((char *)v67 + 1);
          v66 += 48;
          if (v93 <= -2)
            goto LABEL_86;
          goto LABEL_72;
        }
        v75 = v74 >> 2;
        v76 = v204;
        v77 = __dst;
        v78 = __dst - v204;
        v79 = (__dst - v204) >> 2;
        v80 = &v76[(__dst - v76) & 0xFFFFFFFFFFFFFFFCLL];
        if (v74 >> 2 <= (v206 - __dst) >> 2)
        {
          v95 = __dst - v80;
          v96 = (__dst - v80) >> 2;
          if (v96 >= v75)
          {
            v97 = v75 + 1;
            v100 = __dst;
            v8 = v192;
LABEL_94:
            v101 = &v80[4 * v75];
            v102 = v100 - v101;
            v103 = (v100 - v101) >> 2;
            v104 = &v100[-4 * v75];
            v105 = v100;
            if (v104 < v77)
            {
              v106 = (v78 & 0xFFFFFFFFFFFFFFFCLL) + v102;
              v107 = (unint64_t)&v76[v106 + 4];
              if ((unint64_t)v77 > v107)
                v107 = (unint64_t)v77;
              v108 = v107 + ~(unint64_t)v76 - v106;
              if (v108 < 0x2C)
              {
                v105 = v100;
                v109 = __dst;
                goto LABEL_123;
              }
              v105 = v100;
              v109 = __dst;
              if ((unint64_t)(v101 - &v76[v78 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
                goto LABEL_189;
              v128 = (v108 >> 2) + 1;
              v129 = 4 * (v128 & 0x7FFFFFFFFFFFFFF8);
              v104 += v129;
              v105 = &v100[v129];
              v130 = v100 + 16;
              v131 = &v76[4 * v103 + 16 + 4 * v79];
              v132 = v128 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v133 = *(_OWORD *)v131;
                *(v130 - 1) = *((_OWORD *)v131 - 1);
                *v130 = v133;
                v130 += 2;
                v131 += 32;
                v132 -= 8;
              }
              while (v132);
              v109 = __dst;
              if (v128 != (v128 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_189:
                do
                {
LABEL_123:
                  v134 = *(_DWORD *)v104;
                  v104 += 4;
                  *(_DWORD *)v105 = v134;
                  v105 += 4;
                }
                while (v104 < v109);
              }
            }
            v205 = v105;
            if (v100 != v101)
            {
              v135 = v97;
              v136 = v80;
              memmove(&v100[-4 * v103], v80, v102);
              v97 = v135;
              v69 = v194;
              v80 = v136;
            }
            memmove(v80, v73, 4 * v97 - 4);
            __dst = v105;
            v70 = v187;
            v137 = *((char *)v67 + 1);
            v67 = (uint64_t *)((char *)v67 + 1);
            v66 += 48;
            if (v137 > -2)
              goto LABEL_72;
            do
            {
LABEL_86:
              v94 = (__clz(__rbit64((((unint64_t)*v67 >> 7) & ~*v67 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v67 = (uint64_t *)((char *)v67 + v94);
              v66 += 48 * v94;
            }
            while (*(char *)v67 < -1);
            goto LABEL_72;
          }
          v97 = v96 + 1;
          v98 = &v72[v96 + 1];
          v99 = (char *)v71 - (char *)v98;
          if (v71 != v98)
          {
            v176 = v96 + 1;
            v177 = (__dst - v204) >> 2;
            v185 = &v204[(__dst - v204) & 0xFFFFFFFFFFFFFFFCLL];
            v181 = __dst - v204;
            memmove(__dst, v98, (char *)v71 - (char *)v98);
            v97 = v176;
            v79 = v177;
            v78 = v181;
            v80 = v185;
          }
          v100 = &__dst[v99];
          v205 = &__dst[v99];
          if (v95 >= 1)
          {
            v8 = v192;
            v69 = v194;
            v77 = __dst;
            goto LABEL_94;
          }
          __dst += v99;
          v8 = v192;
          goto LABEL_117;
        }
        v81 = v79 + v75;
        if ((unint64_t)(v79 + v75) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v82 = v206 - v204;
        if ((v206 - v204) >> 1 > v81)
          v81 = v82 >> 1;
        v83 = (unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL;
        v84 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v83)
          v84 = v81;
        v184 = v84;
        if (v84)
        {
          v180 = __dst - v204;
          if (v84 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v85 = (__dst - v204) >> 2;
          v86 = &v204[(__dst - v204) & 0xFFFFFFFFFFFFFFFCLL];
          v87 = operator new(4 * v84);
          v80 = v86;
          v79 = v85;
          v8 = v192;
          v78 = v180;
          v88 = &v87[4 * v79];
          v89 = &v88[4 * v75];
          v90 = v74 - 4;
          if ((unint64_t)(v74 - 4) < 0x1C)
          {
LABEL_84:
            v91 = v88;
            v92 = __dst;
            do
            {
LABEL_104:
              v116 = *v73++;
              *(_DWORD *)v91 = v116;
              v91 += 4;
            }
            while (v91 != v89);
            goto LABEL_105;
          }
        }
        else
        {
          v87 = 0;
          v88 = (char *)(4 * v79);
          v89 = (char *)(4 * v79 + 4 * v75);
          v90 = v74 - 4;
          if ((unint64_t)(v74 - 4) < 0x1C)
            goto LABEL_84;
        }
        v91 = v88;
        v92 = __dst;
        if ((unint64_t)(&v87[v78 & 0xFFFFFFFFFFFFFFFCLL] - (_BYTE *)v73) < 0x20)
          goto LABEL_104;
        v110 = (v90 >> 2) + 1;
        v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
        v91 = &v88[v111];
        v73 = (int *)((char *)v73 + v111);
        v112 = (__int128 *)(v72 + 5);
        v113 = &v87[4 * v79 + 16];
        v114 = v110 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v115 = *v112;
          *(v113 - 1) = *(v112 - 1);
          *v113 = v115;
          v112 += 2;
          v113 += 2;
          v114 -= 8;
        }
        while (v114);
        if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_104;
LABEL_105:
        if (v76 != v92)
        {
          if ((unint64_t)(v78 - 4) >= 0x3C)
          {
            v117 = v80;
            if ((unint64_t)(&v76[v78 & 0xFFFFFFFFFFFFFFFCLL] - &v87[v78 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
            {
              v118 = ((unint64_t)(v78 - 4) >> 2) + 1;
              v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
              v117 = &v80[-v119];
              v88 -= v119;
              v120 = &v87[4 * v79 - 16];
              v121 = &v76[4 * v79 - 16];
              v122 = v118 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v123 = *(_OWORD *)v121;
                *(v120 - 1) = *((_OWORD *)v121 - 1);
                *v120 = v123;
                v120 -= 2;
                v121 -= 32;
                v122 -= 8;
              }
              while (v122);
              if (v118 == (v118 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_113;
            }
          }
          else
          {
            v117 = v80;
          }
          do
          {
            v124 = *((_DWORD *)v117 - 1);
            v117 -= 4;
            *((_DWORD *)v88 - 1) = v124;
            v88 -= 4;
          }
          while (v117 != v76);
        }
LABEL_113:
        v125 = v92 - v80;
        if (v92 != v80)
        {
          v126 = v87;
          memmove(v89, v80, v92 - v80);
          v87 = v126;
        }
        v204 = v88;
        v205 = &v89[v125];
        __dst = &v89[v125];
        v206 = &v87[4 * v184];
        if (v76)
          operator delete(v76);
LABEL_117:
        v69 = v194;
        v70 = v187;
        v127 = *((char *)v67 + 1);
        v67 = (uint64_t *)((char *)v67 + 1);
        v66 += 48;
        if (v127 <= -2)
          goto LABEL_86;
LABEL_72:
        if (v67 == v69)
        {
          v138 = v205;
          goto LABEL_133;
        }
      }
    }
    v138 = __dst;
LABEL_133:
    v139 = 126 - 2 * __clz((v138 - v204) >> 2);
    if (v138 == v204)
      v140 = 0;
    else
      v140 = v139;
    std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v204, v138, (uint64_t)v207, v140, 1);
    __dst = v204;
    v195 = v205;
    if (v204 != v205)
    {
      v141 = v8[1];
      v142 = v204;
      while (1)
      {
        v145 = *(_DWORD *)v142;
        v146 = *v8;
        v147 = *v8 + 24 * *(int *)v142;
        if (v147 != v141 - 24)
          break;
        v144 = v141 - 24;
        v143 = *(void **)(v141 - 24);
        if (v143)
          goto LABEL_139;
LABEL_140:
        v8[1] = v144;
        v142 += 4;
        v141 = v144;
        if (v142 == v195)
          goto LABEL_164;
      }
      v149 = *(char **)(v141 - 24);
      v148 = *(_BYTE **)(v141 - 16);
      v150 = v148 - v149;
      v151 = (v148 - v149) >> 3;
      v152 = v146 + 24 * v145;
      v155 = *(_QWORD *)(v152 + 16);
      v154 = (_QWORD *)(v152 + 16);
      v153 = v155;
      v156 = *(char **)v147;
      if (v151 <= (v155 - *(_QWORD *)v147) >> 3)
      {
        v162 = v146 + 24 * v145;
        v164 = *(char **)(v162 + 8);
        v161 = (void **)(v162 + 8);
        v163 = v164;
        v165 = v164 - v156;
        v166 = (v164 - v156) >> 3;
        if (v166 >= v151)
        {
          if (v148 != v149)
            memmove(*(void **)v147, v149, v148 - v149);
        }
        else
        {
          if (v163 != v156)
          {
            v167 = v148;
            memmove(*(void **)v147, v149, v165);
            v148 = v167;
            v156 = (char *)*v161;
          }
          v168 = &v149[8 * v166];
          v150 = v148 - v168;
          if (v148 != v168)
            memmove(v156, v168, v148 - v168);
        }
      }
      else
      {
        v188 = v148;
        if (v156)
        {
          *(_QWORD *)(v146 + 24 * v145 + 8) = v156;
          operator delete(v156);
          v153 = 0;
          *(_QWORD *)v147 = 0;
          *(_QWORD *)(v147 + 8) = 0;
          *(_QWORD *)(v147 + 16) = 0;
        }
        if ((v150 & 0x8000000000000000) != 0)
          goto LABEL_180;
        v157 = v153 >> 2;
        if (v153 >> 2 <= v151)
          v157 = v151;
        v158 = (unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v157;
        if (v158 >> 61)
LABEL_180:
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v159 = (char *)operator new(8 * v158);
        v156 = v159;
        *(_QWORD *)v147 = v159;
        v160 = v146 + 24 * v145;
        *(_QWORD *)(v160 + 8) = v159;
        v161 = (void **)(v160 + 8);
        *v154 = &v159[8 * v158];
        if (v188 != v149)
          memcpy(v159, v149, v150);
        v8 = v192;
      }
      *v161 = &v156[v150];
      v141 = v8[1];
      v144 = v141 - 24;
      v143 = *(void **)(v141 - 24);
      if (!v143)
        goto LABEL_140;
LABEL_139:
      *(_QWORD *)(v141 - 16) = v143;
      operator delete(v143);
      goto LABEL_140;
    }
LABEL_164:
    if ((_QWORD)v199)
    {
      v169 = 0;
      v170 = 0;
      do
      {
        if ((*((char *)__p + v170) & 0x80000000) == 0)
        {
          v171 = v198;
          v172 = v198 + v169;
          v173 = *(void **)(v198 + v169 + 24);
          if (v173)
          {
            *(_QWORD *)(v172 + 32) = v173;
            operator delete(v173);
          }
          v174 = *(void **)v172;
          if (*(_QWORD *)v172)
          {
            *(_QWORD *)(v171 + v169 + 8) = v174;
            operator delete(v174);
          }
        }
        ++v170;
        v169 += 48;
      }
      while (v170 != (_QWORD)v199);
      operator delete(__p);
      __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      v200 = 0;
      *(_QWORD *)&v199 = 0;
      v198 = 0uLL;
      v8 = v192;
    }
    if (*((_QWORD *)&v199 + 1))
      absl::lts_2020_02_25::container_internal::UnsampleSlow(*((_QWORD **)&v199 + 1));
    v9 = v190;
LABEL_10:
    if (++v9 != v191)
      continue;
    break;
  }
  v7 = v201;
  v175 = __dst;
  if (v201)
  {
LABEL_173:
    v202 = v7;
    operator delete(v7);
    v175 = v204;
  }
LABEL_174:
  if (v175)
  {
    v205 = v175;
    operator delete(v175);
  }
}

void sub_22DC237E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;
  void *v28;

  v27 = *(void **)(v25 - 144);
  if (v27)
  {
    *(_QWORD *)(v25 - 136) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v25 - 120);
  if (v28)
  {
    *(_QWORD *)(v25 - 112) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::vector<long long> const,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<std::vector<long long> const>,std::equal_to<std::vector<long long> const>,std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>::~raw_hash_set(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD *v9;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = 0;
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v3) & 0x80000000) == 0)
      {
        v5 = *v4;
        v6 = *v4 + v2;
        v7 = *(void **)(v6 + 24);
        if (v7)
        {
          *(_QWORD *)(v6 + 32) = v7;
          operator delete(v7);
        }
        v8 = *(void **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)(v5 + v2 + 8) = v8;
          operator delete(v8);
        }
      }
      ++v3;
      v2 += 48;
    }
    while (v3 != *(_QWORD *)(a1 + 24));
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *v4 = 0;
  }
  v9 = *(_QWORD **)(a1 + 32);
  if (v9)
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v9);
  return a1;
}

int32x2_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::MoveOneUnprocessedLiteralLast(std::set<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>> const&,int,std::vector<operations_research::sat::Literal> *)::$_0 &,std::__wrap_iter<operations_research::sat::Literal*>,long,std::pair<operations_research::sat::Literal*,long>>(int32x2_t *a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  int32x2_t *v8;
  __int32 v10;
  char *v11;
  __int32 v12;
  uint64_t v13;
  uint64_t v14;
  __int32 v15;
  char v16;
  uint64_t *v17;
  uint64_t v20;
  uint64_t v21;
  int32x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  int32x2_t *v25;
  uint64_t i;
  __int32 v27;
  __int32 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  unsigned __int8 *v34;
  __int32 *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  __int128 v44;
  int v45;
  __int32 v46;
  _QWORD *v47;
  uint64_t v48;
  __int32 v49;
  BOOL v50;
  uint64_t *v51;
  __int32 *v52;
  unint64_t v53;
  __int32 *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  __int32 v63;
  int32x2_t *v64;
  uint64_t v65;
  uint64_t v66;
  int32x2_t *v67;
  __int32 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int32x2_t *v76;
  uint64_t v77;
  __int32 v78;
  BOOL v79;
  __int32 v80;
  int32x2_t *v81;
  __int32 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int32x2_t *v86;
  int v87;
  __int32 v88;
  int32x2_t *v89;
  int32x2_t *v90;
  int32x2_t *v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;

  v8 = a1;
  if (a4 == 3)
  {
    v11 = (char *)a1 + 4;
    v12 = a1->i32[1];
    v13 = *(_QWORD *)(*a3 + 8);
    if (!v13)
      goto LABEL_14;
    v14 = *a3 + 8;
    do
    {
      v15 = *(_DWORD *)(v13 + 25);
      v16 = v15 < v12;
      if (v15 >= v12)
        v17 = (uint64_t *)v13;
      else
        v17 = (uint64_t *)(v13 + 8);
      if (!v16)
        v14 = v13;
      v13 = *v17;
    }
    while (*v17);
    if (v14 != *a3 + 8 && *(_DWORD *)(v14 + 25) <= v12)
    {
      v63 = a1->i32[0];
      a1->i32[0] = v12;
      a1->i32[1] = v63;
      a1->i32[1] = *(_DWORD *)a2;
      *(_DWORD *)a2 = v63;
      return (int32x2_t *)a2;
    }
    else
    {
LABEL_14:
      a1->i32[1] = *(_DWORD *)a2;
      *(_DWORD *)a2 = v12;
      *a1 = vrev64_s32(*a1);
    }
  }
  else if (a4 == 2)
  {
    v10 = a1->i32[0];
    a1->i32[0] = *(_DWORD *)a2;
    *(_DWORD *)a2 = v10;
    return (int32x2_t *)a2;
  }
  else if (a6 >= a4)
  {
    v34 = (unsigned __int8 *)a1 + 4;
    *(_DWORD *)a5 = a1->i32[0];
    v35 = (__int32 *)(a5 + 4);
    if (&a1->u8[4] != a2)
    {
      v36 = (_QWORD *)(*a3 + 8);
      v37 = *v36;
      if (*v36)
      {
        do
        {
          while (1)
          {
            v46 = *(_DWORD *)v34;
            v47 = v36;
            v48 = v37;
            do
            {
              v49 = *(_DWORD *)(v48 + 25);
              v50 = v49 < v46;
              if (v49 >= v46)
                v51 = (uint64_t *)v48;
              else
                v51 = (uint64_t *)(v48 + 8);
              if (!v50)
                v47 = (_QWORD *)v48;
              v48 = *v51;
            }
            while (*v51);
            if (v47 != v36 && *(_DWORD *)((char *)v47 + 25) <= v46)
              break;
            *v35++ = v46;
            v34 += 4;
            if (v34 == a2)
              goto LABEL_52;
          }
          v8->i32[0] = v46;
          v8 = (int32x2_t *)((char *)v8 + 4);
          v34 += 4;
        }
        while (v34 != a2);
      }
      else
      {
        v38 = a2 - (unsigned __int8 *)a1 - 8;
        if (v38 < 0x1C)
          goto LABEL_108;
        if (a5 - (unint64_t)a1 < 0x20)
          goto LABEL_108;
        v39 = 0;
        v40 = (v38 >> 2) + 1;
        v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
        v34 += v41;
        v35 = (__int32 *)((char *)v35 + v41);
        v42 = v40 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v43 = (_DWORD *)(a5 + v39 * 8);
          v44 = *(_OWORD *)&a1[v39 + 2].u8[4];
          *(_OWORD *)(v43 + 1) = *(_OWORD *)&a1[v39].u8[4];
          *(_OWORD *)(v43 + 5) = v44;
          v39 += 4;
          v42 -= 8;
        }
        while (v42);
        if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_108:
          do
          {
            v45 = *(_DWORD *)v34;
            v34 += 4;
            *v35++ = v45;
          }
          while (v34 != a2);
        }
      }
    }
LABEL_52:
    v8->i32[0] = *(_DWORD *)a2;
    v11 = (char *)v8 + 4;
    if ((unint64_t)v35 > a5)
    {
      v52 = (__int32 *)(a5 + 4);
      if ((unint64_t)v35 > a5 + 4)
        v52 = v35;
      v53 = (unint64_t)v52 + ~a5;
      v54 = (__int32 *)a5;
      v55 = (char *)v8 + 4;
      if (v53 < 0x1C)
        goto LABEL_109;
      v54 = (__int32 *)a5;
      v55 = (char *)v8 + 4;
      if ((unint64_t)v8 - a5 + 4 < 0x20)
        goto LABEL_109;
      v56 = (v53 >> 2) + 1;
      v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      v54 = (__int32 *)(a5 + v57);
      v55 = &v11[v57];
      v58 = (_OWORD *)((char *)&v8[2] + 4);
      v59 = (__int128 *)(a5 + 16);
      v60 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v61 = *v59;
        *(v58 - 1) = *(v59 - 1);
        *v58 = v61;
        v58 += 2;
        v59 += 2;
        v60 -= 8;
      }
      while (v60);
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_109:
        do
        {
          v62 = *v54++;
          *(_DWORD *)v55 = v62;
          v55 += 4;
        }
        while (v54 < v35);
      }
    }
  }
  else
  {
    if (a4 >= 0)
      v20 = a4;
    else
      v20 = a4 + 1;
    v21 = v20 >> 1;
    v22 = (int32x2_t *)((char *)a1 + 4 * (v20 >> 1));
    v23 = *a3;
    v24 = *(_QWORD *)(*a3 + 8);
    if (v24)
    {
      v25 = v22;
      for (i = v21; ; --i)
      {
        v28 = v25[-1].i32[1];
        v25 = (int32x2_t *)((char *)v25 - 4);
        v27 = v28;
        v29 = *a3 + 8;
        v30 = *(_QWORD *)v29;
        do
        {
          v31 = *(_DWORD *)(v30 + 25);
          v32 = v31 < v27;
          if (v31 >= v27)
            v33 = (uint64_t *)v30;
          else
            v33 = (uint64_t *)(v30 + 8);
          if (!v32)
            v29 = v30;
          v30 = *v33;
        }
        while (*v33);
        if (v29 != *a3 + 8 && *(_DWORD *)(v29 + 25) <= v27)
          break;
        if (v25 == a1)
        {
          v64 = a1;
          v65 = a4 - v21;
          goto LABEL_66;
        }
      }
      v64 = (int32x2_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::MoveOneUnprocessedLiteralLast(std::set<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>> const&,int,std::vector<operations_research::sat::Literal> *)::$_0 &,std::__wrap_iter<operations_research::sat::Literal*>,long,std::pair<operations_research::sat::Literal*,long>>(a1, v25, a3, i, a5, a6);
      v23 = *a3;
      v24 = *(_QWORD *)(*a3 + 8);
      v65 = a4 - v21;
      if (!v24)
        goto LABEL_78;
LABEL_66:
      v11 = (char *)(a2 + 4);
      v66 = v23 + 8;
      v67 = v22;
      while (1)
      {
        v68 = v67->i32[0];
        v69 = v66;
        v70 = v24;
        do
        {
          v71 = *(_DWORD *)(v70 + 25);
          v72 = v71 < v68;
          if (v71 >= v68)
            v73 = (uint64_t *)v70;
          else
            v73 = (uint64_t *)(v70 + 8);
          if (!v72)
            v69 = v70;
          v70 = *v73;
        }
        while (*v73);
        if (v69 == v66 || *(_DWORD *)(v69 + 25) > v68)
          break;
        v67 = (int32x2_t *)((char *)v67 + 4);
        if (v67 == (int32x2_t *)a2)
          goto LABEL_80;
        --v65;
      }
    }
    else
    {
      v65 = a4 - v21;
      v64 = a1;
LABEL_78:
      v67 = v22;
    }
    v11 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,operations_research::sat::MoveOneUnprocessedLiteralLast(std::set<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>> const&,int,std::vector<operations_research::sat::Literal> *)::$_0 &,std::__wrap_iter<operations_research::sat::Literal*>,long,std::pair<operations_research::sat::Literal*,long>>(v67, a2, a3, v65, a5, a6);
LABEL_80:
    if (v64 != v22)
    {
      if (v22 == (int32x2_t *)v11)
      {
        return v64;
      }
      else if (&v64->u8[4] == (unsigned __int8 *)v22)
      {
        v80 = v64->i32[0];
        memmove(v64, v22, v11 - (char *)v22);
        v11 = (char *)v64 + v11 - (char *)v22;
        *(_DWORD *)v11 = v80;
      }
      else if (&v22->u8[4] == (unsigned __int8 *)v11)
      {
        v81 = (int32x2_t *)(v11 - 4);
        v82 = *((_DWORD *)v11 - 1);
        v11 = (char *)v64 + 4;
        if (v81 != v64)
          memmove((char *)v64 + 4, v64, (char *)v81 - (char *)v64);
        v64->i32[0] = v82;
      }
      else
      {
        v74 = ((char *)v22 - (char *)v64) >> 2;
        v75 = (v11 - (char *)v22) >> 2;
        if (v74 == v75)
        {
          v76 = (int32x2_t *)((char *)v64 + 4);
          v77 = (uint64_t)v8 + 4 * v21 + 4;
          do
          {
            v78 = v76[-1].i32[1];
            v76[-1].i32[1] = *(_DWORD *)(v77 - 4);
            *(_DWORD *)(v77 - 4) = v78;
            if (v76 == v22)
              break;
            v76 = (int32x2_t *)((char *)v76 + 4);
            v79 = v77 == (_QWORD)v11;
            v77 += 4;
          }
          while (!v79);
          return v22;
        }
        else
        {
          v83 = (v11 - (char *)v22) >> 2;
          v84 = ((char *)v22 - (char *)v64) >> 2;
          do
          {
            v85 = v84;
            v84 = v83;
            v83 = v85 % v83;
          }
          while (v83);
          if (v84)
          {
            v86 = (int32x2_t *)((char *)v64 + 4 * v84);
            do
            {
              v88 = v86[-1].i32[1];
              v86 = (int32x2_t *)((char *)v86 - 4);
              v87 = v88;
              v89 = (int32x2_t *)((char *)v86 + 4 * v74);
              v90 = v86;
              do
              {
                v91 = v89;
                v90->i32[0] = v89->i32[0];
                v92 = (v11 - (char *)v89) >> 2;
                v93 = __OFSUB__(v74, v92);
                v94 = v74 - v92;
                v16 = (v94 < 0) ^ v93;
                v89 = (int32x2_t *)((char *)v64 + 4 * v94);
                if (v16)
                  v89 = (int32x2_t *)((char *)v91 + 4 * v74);
                v90 = v91;
              }
              while (v89 != v86);
              v91->i32[0] = v87;
            }
            while (v86 != v64);
          }
          return (int32x2_t *)((char *)v64 + 4 * v75);
        }
      }
    }
  }
  return (int32x2_t *)v11;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::vector<long long> const,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<std::vector<long long> const>,std::equal_to<std::vector<long long> const>,std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  unint64_t first_non_full;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[3];
  v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  v7 = 0;
  for (i = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        i = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    v6 = (v7 + v6) & v5;
  }
  first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::vector<long long> const,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<std::vector<long long> const>,std::equal_to<std::vector<long long> const>,std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      v7 = v13;
      v4 = *a1;
      v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(_BYTE *)(v4 + first_non_full) = a2 & 0x7F;
  *(_BYTE *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  v11 = (unint64_t *)a1[4];
  if (v11)
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::vector<long long> const,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<std::vector<long long> const>,std::equal_to<std::vector<long long> const>,std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::vector<long long> const,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<std::vector<long long> const>,std::equal_to<std::vector<long long> const>,std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::vector<long long> const,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<std::vector<long long> const>,std::equal_to<std::vector<long long> const>,std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::vector<long long> const,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<std::vector<long long> const>,std::equal_to<std::vector<long long> const>,std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;

  v2 = (unint64_t)a2;
  v5 = *a1;
  v4 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v26 = v4;
  if (!v4)
  {
    v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  v9 = (char *)operator new(v8 + 48 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  v10 = v2 - (v2 >> 3);
  if (v2 == 7)
    v10 = 6;
  v11 = a1[2];
  a1[5] = (char *)(v10 - (_QWORD)v11);
  v12 = a1[4];
  if (v12)
  {
    *((_QWORD *)v12 + 1) = v11;
    *(_QWORD *)v12 = v2;
    if (!v11)
    {
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    v14 = 0;
    v25 = a1[4];
    if (!v25)
      return;
LABEL_21:
    *((_QWORD *)v25 + 4) = v14 >> 3;
    *((_QWORD *)v25 + 2) = 0;
    return;
  }
  v13 = 0;
  v14 = 0;
  do
  {
    if ((v13[(_QWORD)v5] & 0x80000000) == 0)
    {
      v18 = (uint64_t)&v26[48 * (_QWORD)v13];
      v19 = (unint64_t)absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v18, *(_QWORD *)(v18 + 8) - *(_QWORD *)v18)+ ((uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3);
      v20 = ((v19 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v19);
      v21 = *a1;
      v22 = a1[3];
      v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      v24 = *(_QWORD *)&(*a1)[v23] & (~*(_QWORD *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v15 += 8;
          v23 = (v15 + v23) & (unint64_t)v22;
          v24 = *(_QWORD *)&v21[v23] & (~*(_QWORD *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      v16 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v15;
      v17 = v20 & 0x7F;
      v21[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      absl::lts_2020_02_25::container_internal::map_slot_policy<std::vector<long long> const,std::vector<int>>::transfer<std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>((uint64_t)(a1 + 5), &a1[1][48 * v16], v18);
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v5);
  v25 = a1[4];
  if (v25)
    goto LABEL_21;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::vector<long long> const,std::vector<int>>,absl::lts_2020_02_25::hash_internal::Hash<std::vector<long long> const>,std::equal_to<std::vector<long long> const>,std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>::drop_deletes_without_resize(uint64_t a1)
{
  int8x16_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[7];

  v32[6] = *MEMORY[0x24BDAC8D0];
  v2 = *(int8x16_t **)a1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1 + v3;
  if (v4 + 1 != *(_QWORD *)a1)
  {
    v5 = v3 - 7;
    v6 = *(unint64_t **)a1;
    if (v5 < 0x18)
      goto LABEL_29;
    v7 = (v5 >> 3) + 1;
    v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v12 = vandq_s8(v8[-1], v9);
      v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(_QWORD *)(v4 + 1) = v2->i64[0];
  *(_BYTE *)v4 = -1;
  if (!*(_QWORD *)(a1 + 24))
  {
    v15 = 0;
    *(_QWORD *)(a1 + 40) = -*(_QWORD *)(a1 + 16);
    v31 = *(_QWORD *)(a1 + 32);
    if (!v31)
      return;
LABEL_26:
    *(_QWORD *)(v31 + 32) = v15 >> 3;
    *(_QWORD *)(v31 + 16) = 0;
    return;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + v14) == 254)
    {
      v20 = *(_QWORD *)(a1 + 8) + 48 * v14;
      v21 = (unint64_t)absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, *(absl::lts_2020_02_25::hash_internal **)v20, *(_QWORD *)(v20 + 8) - *(_QWORD *)v20)+ ((uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 3);
      v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      v23 = *(int8x16_t **)a1;
      v24 = *(_QWORD *)(a1 + 24);
      v25 = ((v22 >> 7) ^ (*(_QWORD *)a1 >> 12)) & v24;
      v26 = *(_QWORD *)(*(_QWORD *)a1 + v25) & (~*(_QWORD *)(*(_QWORD *)a1 + v25) << 7) & 0x8080808080808080;
      if (v26)
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ (*(_QWORD *)a1 >> 12)) & v24;
      }
      else
      {
        v16 = 0;
        v17 = ((v22 >> 7) ^ (*(_QWORD *)a1 >> 12)) & v24;
        do
        {
          v16 += 8;
          v17 = (v16 + v17) & v24;
          v26 = *(uint64_t *)((_BYTE *)v23->i64 + v17) & (~*(uint64_t *)((char *)v23->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      v18 = (v17 + (__clz(__rbit64(v26)) >> 3)) & v24;
      v15 += v16;
      if ((((v18 - v25) ^ (v14 - v25)) & v24) > 7)
      {
        v27 = v23->u8[v18];
        v28 = v22 & 0x7F;
        v23->i8[v18] = v28;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v18 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v28;
        v29 = *(_QWORD *)(a1 + 8);
        if (v27 == 128)
        {
          absl::lts_2020_02_25::container_internal::map_slot_policy<std::vector<long long> const,std::vector<int>>::transfer<std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>(a1 + 40, (_QWORD *)(v29 + 48 * v18), v29 + 48 * v14);
          *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
          *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v14 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::map_slot_policy<std::vector<long long> const,std::vector<int>>::transfer<std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>(a1 + 40, v32, v29 + 48 * v14);
          absl::lts_2020_02_25::container_internal::map_slot_policy<std::vector<long long> const,std::vector<int>>::transfer<std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>(a1 + 40, (_QWORD *)(*(_QWORD *)(a1 + 8) + 48 * v14), *(_QWORD *)(a1 + 8) + 48 * v18);
          absl::lts_2020_02_25::container_internal::map_slot_policy<std::vector<long long> const,std::vector<int>>::transfer<std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>(a1 + 40, (_QWORD *)(*(_QWORD *)(a1 + 8) + 48 * v18), (uint64_t)v32);
          --v14;
        }
      }
      else
      {
        v19 = v22 & 0x7F;
        v23->i8[v14] = v19;
        *(_BYTE *)((*(_QWORD *)(a1 + 24) & (v14 - 8)) + (*(_QWORD *)(a1 + 24) & 7) + *(_QWORD *)a1 + 1) = v19;
      }
    }
    ++v14;
  }
  while (v14 != *(_QWORD *)(a1 + 24));
  v30 = v14 - (v14 >> 3);
  if (v14 == 7)
    v30 = 6;
  *(_QWORD *)(a1 + 40) = v30 - *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 32);
  if (v31)
    goto LABEL_26;
}

void absl::lts_2020_02_25::container_internal::map_slot_policy<std::vector<long long> const,std::vector<int>>::transfer<std::allocator<std::pair<std::vector<long long> const,std::vector<int>>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  void *v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = *(const void **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v7 = v5 - *(_QWORD *)a3;
  if (v5 != *(_QWORD *)a3)
  {
    if (v7 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a3);
    *a2 = v8;
    a2[1] = v8;
    v9 = &v8[8 * (v7 >> 3)];
    a2[2] = v9;
    memcpy(v8, v6, v7);
    a2[1] = v9;
  }
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v10 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v10;
    operator delete(v10);
  }
}

void sub_22DC2461C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(char *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  char *v53;
  int v54;
  int v55;
  int *v56;
  BOOL v57;
  int v58;
  unint64_t v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  char *v108;
  BOOL v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD *v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;

  v9 = result;
LABEL_2:
  v10 = (unint64_t)v9;
  while (2)
  {
    v9 = (_DWORD *)v10;
    v11 = (uint64_t)&a2[-v10];
    v12 = (uint64_t)&a2[-v10] >> 2;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v67 = *((_DWORD *)a2 - 1);
        v68 = *(_DWORD *)v10;
        if (v67 > *(_DWORD *)v10)
        {
          *(_DWORD *)v10 = v67;
          *((_DWORD *)a2 - 1) = v68;
        }
        return result;
      case 3uLL:
        v69 = *(_DWORD *)(v10 + 4);
        v70 = *((_DWORD *)a2 - 1);
        if (v69 <= v70)
          v71 = *((_DWORD *)a2 - 1);
        else
          v71 = *(_DWORD *)(v10 + 4);
        if (v69 >= v70)
          v69 = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v69;
        *(_DWORD *)(v10 + 4) = v71;
        v72 = *((_DWORD *)a2 - 1);
        if (v72 <= *(_DWORD *)v10)
          v73 = *(_DWORD *)v10;
        else
          v73 = *((_DWORD *)a2 - 1);
        if (v72 >= *(_DWORD *)v10)
          v72 = *(_DWORD *)v10;
        *((_DWORD *)a2 - 1) = v72;
        v75 = *(_DWORD *)v10;
        v74 = *(_DWORD *)(v10 + 4);
        if (v73 <= v74)
          v75 = *(_DWORD *)(v10 + 4);
        if (v73 < v74)
          v74 = v73;
        *(_DWORD *)v10 = v75;
        *(_DWORD *)(v10 + 4) = v74;
        return result;
      case 4uLL:
        v77 = *(_DWORD *)(v10 + 4);
        v76 = *(_DWORD *)(v10 + 8);
        if (*(_DWORD *)v10 <= v76)
          v78 = *(_DWORD *)(v10 + 8);
        else
          v78 = *(_DWORD *)v10;
        if (*(_DWORD *)v10 < v76)
          v76 = *(_DWORD *)v10;
        *(_DWORD *)(v10 + 8) = v76;
        *(_DWORD *)v10 = v78;
        v79 = *((_DWORD *)a2 - 1);
        if (v77 <= v79)
          v80 = *((_DWORD *)a2 - 1);
        else
          v80 = v77;
        if (v77 < v79)
          v79 = v77;
        *((_DWORD *)a2 - 1) = v79;
        v81 = *(_DWORD *)v10;
        if (*(_DWORD *)v10 <= v80)
          v82 = v80;
        else
          v82 = *(_DWORD *)v10;
        if (v81 >= v80)
          v81 = v80;
        *(_DWORD *)v10 = v82;
        *(_DWORD *)(v10 + 4) = v81;
        v83 = *(_DWORD *)(v10 + 8);
        v84 = *((_DWORD *)a2 - 1);
        if (v83 <= v84)
          v85 = *((_DWORD *)a2 - 1);
        else
          v85 = *(_DWORD *)(v10 + 8);
        if (v83 >= v84)
          v83 = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v83;
        v86 = *(_DWORD *)(v10 + 4);
        if (v86 <= v85)
          v87 = v85;
        else
          v87 = *(_DWORD *)(v10 + 4);
        if (v86 >= v85)
          v86 = v85;
        *(_DWORD *)(v10 + 4) = v87;
        *(_DWORD *)(v10 + 8) = v86;
        return result;
      case 5uLL:
        v88 = *(_DWORD *)v10;
        v89 = *(_DWORD *)(v10 + 4);
        if (*(_DWORD *)v10 <= v89)
          v90 = *(_DWORD *)(v10 + 4);
        else
          v90 = *(_DWORD *)v10;
        if (v88 >= v89)
          v88 = *(_DWORD *)(v10 + 4);
        *(_DWORD *)v10 = v90;
        *(_DWORD *)(v10 + 4) = v88;
        v91 = *(_DWORD *)(v10 + 12);
        v92 = *((_DWORD *)a2 - 1);
        if (v91 <= v92)
          v93 = *((_DWORD *)a2 - 1);
        else
          v93 = *(_DWORD *)(v10 + 12);
        if (v91 >= v92)
          v91 = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v91;
        *(_DWORD *)(v10 + 12) = v93;
        v94 = *((_DWORD *)a2 - 1);
        v95 = *(_DWORD *)(v10 + 8);
        if (v94 <= v95)
          v96 = *(_DWORD *)(v10 + 8);
        else
          v96 = *((_DWORD *)a2 - 1);
        if (v94 >= v95)
          v94 = *(_DWORD *)(v10 + 8);
        *((_DWORD *)a2 - 1) = v94;
        v98 = *(_DWORD *)(v10 + 8);
        v97 = *(_DWORD *)(v10 + 12);
        v99 = *(_DWORD *)(v10 + 4);
        if (v96 <= v97)
          v98 = *(_DWORD *)(v10 + 12);
        if (v96 < v97)
          v97 = v96;
        *(_DWORD *)(v10 + 8) = v98;
        *(_DWORD *)(v10 + 12) = v97;
        v100 = *((_DWORD *)a2 - 1);
        if (v99 <= v100)
          v101 = *((_DWORD *)a2 - 1);
        else
          v101 = v99;
        if (v99 < v100)
          v100 = v99;
        *((_DWORD *)a2 - 1) = v100;
        v102 = *(_DWORD *)v10;
        v104 = *(_DWORD *)(v10 + 8);
        v103 = *(_DWORD *)(v10 + 12);
        if (v103 <= *(_DWORD *)v10)
          v105 = *(_DWORD *)v10;
        else
          v105 = *(_DWORD *)(v10 + 12);
        if (v103 >= v102)
          v103 = *(_DWORD *)v10;
        if (v105 <= v104)
          v102 = *(_DWORD *)(v10 + 8);
        if (v105 < v104)
          v104 = v105;
        if (v103 <= v101)
          v106 = v101;
        else
          v106 = v103;
        if (v103 >= v101)
          v103 = v101;
        if (v106 <= v104)
          v101 = v104;
        *(_DWORD *)v10 = v102;
        *(_DWORD *)(v10 + 4) = v101;
        if (v106 >= v104)
          v107 = v104;
        else
          v107 = v106;
        *(_DWORD *)(v10 + 8) = v107;
        *(_DWORD *)(v10 + 12) = v103;
        return result;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if ((char *)v10 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *,int *>((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = (int *)(v10 + 4 * (v12 >> 1));
          v15 = *((_DWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x201)
          {
            v18 = *(_DWORD *)v10;
            v19 = *v14;
            if (*(_DWORD *)v10 <= *v14)
            {
              if (v15 > v18)
              {
                *(_DWORD *)v10 = v15;
                *((_DWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*(_DWORD *)v10 > *v14)
                {
                  *v14 = *(_DWORD *)v10;
                  *(_DWORD *)v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v15 <= v18)
            {
              *v14 = v18;
              *(_DWORD *)v10 = v19;
              v31 = *((_DWORD *)a2 - 1);
              if (v31 <= v19)
                goto LABEL_32;
              *(_DWORD *)v10 = v31;
            }
            else
            {
              *v14 = v15;
            }
            *((_DWORD *)a2 - 1) = v19;
LABEL_32:
            --a4;
            v22 = *(_DWORD *)v10;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v16 = *v14;
          v17 = *(_DWORD *)v10;
          if (*v14 <= *(_DWORD *)v10)
          {
            if (v15 > v16)
            {
              *v14 = v15;
              *((_DWORD *)a2 - 1) = v16;
              v20 = *(_DWORD *)v10;
              if (*v14 > *(_DWORD *)v10)
              {
                *(_DWORD *)v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 <= v16)
            {
              *(_DWORD *)v10 = v16;
              *v14 = v17;
              v23 = *((_DWORD *)a2 - 1);
              if (v23 <= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *(_DWORD *)v10 = v15;
            }
            *((_DWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = v10 + 4 * v13;
          v27 = *(_DWORD *)(v24 - 4);
          v25 = (int *)(v24 - 4);
          v26 = v27;
          v28 = *(_DWORD *)(v10 + 4);
          v29 = *((_DWORD *)a2 - 2);
          if (v27 <= v28)
          {
            if (v29 > v26)
            {
              *v25 = v29;
              *((_DWORD *)a2 - 2) = v26;
              v30 = *(_DWORD *)(v10 + 4);
              if (*v25 > v30)
              {
                *(_DWORD *)(v10 + 4) = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 <= v26)
            {
              *(_DWORD *)(v10 + 4) = v26;
              *v25 = v28;
              v32 = *((_DWORD *)a2 - 2);
              if (v32 <= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              *(_DWORD *)(v10 + 4) = v29;
            }
            *((_DWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = v10 + 4 * v13;
          v36 = *(_DWORD *)(v33 + 4);
          v34 = (int *)(v33 + 4);
          v35 = v36;
          v37 = *(_DWORD *)(v10 + 8);
          v38 = *((_DWORD *)a2 - 3);
          if (v36 <= v37)
          {
            if (v38 > v35)
            {
              *v34 = v38;
              *((_DWORD *)a2 - 3) = v35;
              v39 = *(_DWORD *)(v10 + 8);
              if (*v34 > v39)
              {
                *(_DWORD *)(v10 + 8) = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              *(_DWORD *)(v10 + 8) = v35;
              *v34 = v37;
              v40 = *((_DWORD *)a2 - 3);
              if (v40 <= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              *(_DWORD *)(v10 + 8) = v38;
            }
            *((_DWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 > *v25)
          {
            if (v43 <= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 <= v42)
              {
                v41 = v42;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v25 = v43;
            *v34 = v42;
            goto LABEL_53;
          }
          if (v43 <= v41)
            goto LABEL_53;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 > v42)
            goto LABEL_52;
          v41 = v43;
LABEL_53:
          v44 = *(_DWORD *)v10;
          *(_DWORD *)v10 = v41;
          *v14 = v44;
          --a4;
          v22 = *(_DWORD *)v10;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(_DWORD *)(v10 - 4) <= v22)
          {
            if (v22 <= *((_DWORD *)a2 - 1))
            {
              v59 = v10 + 4;
              do
              {
                v10 = v59;
                if (v59 >= (unint64_t)a2)
                  break;
                v59 += 4;
              }
              while (v22 <= *(_DWORD *)v10);
            }
            else
            {
              do
              {
                v58 = *(_DWORD *)(v10 + 4);
                v10 += 4;
              }
              while (v22 <= v58);
            }
            v60 = a2;
            if (v10 < (unint64_t)a2)
            {
              v60 = a2;
              do
              {
                v61 = *((_DWORD *)v60 - 1);
                v60 -= 4;
              }
              while (v22 > v61);
            }
            if (v10 < (unint64_t)v60)
            {
              v62 = *(_DWORD *)v10;
              v63 = *(_DWORD *)v60;
              do
              {
                *(_DWORD *)v10 = v63;
                *(_DWORD *)v60 = v62;
                do
                {
                  v64 = *(_DWORD *)(v10 + 4);
                  v10 += 4;
                  v62 = v64;
                }
                while (v22 <= v64);
                do
                {
                  v65 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  v63 = v65;
                }
                while (v22 > v65);
              }
              while (v10 < (unint64_t)v60);
            }
            v66 = (int *)(v10 - 4);
            if ((_DWORD *)(v10 - 4) != v9)
              *v9 = *v66;
            a5 = 0;
            *v66 = v22;
            continue;
          }
LABEL_55:
          v45 = 0;
          do
          {
            v46 = *(_DWORD *)(v10 + v45 + 4);
            v45 += 4;
          }
          while (v46 > v22);
          v47 = v10 + v45;
          v48 = a2;
          if (v45 == 4)
          {
            v48 = a2;
            do
            {
              if (v47 >= (unint64_t)v48)
                break;
              v50 = *((_DWORD *)v48 - 1);
              v48 -= 4;
            }
            while (v50 <= v22);
          }
          else
          {
            do
            {
              v49 = *((_DWORD *)v48 - 1);
              v48 -= 4;
            }
            while (v49 <= v22);
          }
          if (v47 < (unint64_t)v48)
          {
            v51 = *(_DWORD *)v48;
            v52 = (char *)(v10 + v45);
            v53 = v48;
            do
            {
              *(_DWORD *)v52 = v51;
              *(_DWORD *)v53 = v46;
              do
              {
                v54 = *((_DWORD *)v52 + 1);
                v52 += 4;
                v46 = v54;
              }
              while (v54 > v22);
              do
              {
                v55 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                v51 = v55;
              }
              while (v55 <= v22);
            }
            while (v52 < v53);
            v56 = (int *)(v52 - 4);
            if (v52 - 4 == (char *)v10)
              goto LABEL_73;
LABEL_72:
            *(_DWORD *)v10 = *v56;
            goto LABEL_73;
          }
          v56 = (int *)(v47 - 4);
          if (v47 - 4 != v10)
            goto LABEL_72;
LABEL_73:
          *v56 = v22;
          if (v47 < (unint64_t)v48)
            goto LABEL_76;
          v57 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>((int *)v10, v56);
          v10 = (unint64_t)(v56 + 1);
          result = (char *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v56 + 1, (int *)a2);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
LABEL_76:
            result = (char *)std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v9, v56, a3, a4, a5 & 1);
            a5 = 0;
            v10 = (unint64_t)(v56 + 1);
            continue;
          }
          a2 = (char *)v56;
          if (v57)
            return result;
          goto LABEL_2;
        }
        v108 = (char *)(v10 + 4);
        v110 = (char *)v10 == a2 || v108 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v110)
          {
            v111 = 0;
            v112 = (_DWORD *)v10;
            do
            {
              v115 = *v112;
              v114 = v112[1];
              v112 = v108;
              if (v114 > v115)
              {
                v116 = v111;
                do
                {
                  *(_DWORD *)(v10 + v116 + 4) = v115;
                  if (!v116)
                  {
                    v113 = (_DWORD *)v10;
                    goto LABEL_197;
                  }
                  v115 = *(_DWORD *)(v10 + v116 - 4);
                  v116 -= 4;
                }
                while (v114 > v115);
                v113 = (_DWORD *)(v10 + v116 + 4);
LABEL_197:
                *v113 = v114;
              }
              v108 = (char *)(v112 + 1);
              v111 += 4;
            }
            while (v112 + 1 != (_DWORD *)a2);
          }
        }
        else if (!v110)
        {
          do
          {
            v118 = *v9;
            v117 = v9[1];
            v9 = v108;
            if (v117 > v118)
            {
              do
              {
                *(_DWORD *)v108 = v118;
                v118 = *((_DWORD *)v108 - 2);
                v108 -= 4;
              }
              while (v117 > v118);
              *(_DWORD *)v108 = v117;
            }
            v108 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (_DWORD *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(int *a1, int *a2)
{
  _BOOL8 result;
  int v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      result = 1;
      break;
    case 2:
      v17 = *(a2 - 1);
      v18 = *a1;
      if (v17 <= *a1)
        goto LABEL_28;
      *a1 = v17;
      *(a2 - 1) = v18;
      result = 1;
      break;
    case 3:
      v19 = a1[1];
      v20 = *(a2 - 1);
      if (v19 <= v20)
        v21 = *(a2 - 1);
      else
        v21 = a1[1];
      if (v19 >= v20)
        v19 = *(a2 - 1);
      *(a2 - 1) = v19;
      a1[1] = v21;
      v22 = *(a2 - 1);
      if (v22 <= *a1)
        v23 = *a1;
      else
        v23 = *(a2 - 1);
      if (v22 >= *a1)
        v22 = *a1;
      *(a2 - 1) = v22;
      v25 = *a1;
      v24 = a1[1];
      if (v23 <= v24)
        v25 = a1[1];
      if (v23 < v24)
        v24 = v23;
      *a1 = v25;
      a1[1] = v24;
      result = 1;
      break;
    case 4:
      v47 = a1[1];
      v46 = a1[2];
      if (*a1 <= v46)
        v48 = a1[2];
      else
        v48 = *a1;
      if (*a1 < v46)
        v46 = *a1;
      a1[2] = v46;
      *a1 = v48;
      v49 = *(a2 - 1);
      if (v47 <= v49)
        v50 = *(a2 - 1);
      else
        v50 = v47;
      if (v47 < v49)
        v49 = v47;
      *(a2 - 1) = v49;
      v51 = *a1;
      if (*a1 <= v50)
        v52 = v50;
      else
        v52 = *a1;
      if (v51 >= v50)
        v51 = v50;
      *a1 = v52;
      a1[1] = v51;
      v53 = a1[2];
      v54 = *(a2 - 1);
      if (v53 <= v54)
        v55 = *(a2 - 1);
      else
        v55 = a1[2];
      if (v53 >= v54)
        v53 = *(a2 - 1);
      *(a2 - 1) = v53;
      v56 = a1[1];
      if (v56 <= v55)
        v57 = v55;
      else
        v57 = a1[1];
      if (v56 >= v55)
        v56 = v55;
      a1[1] = v57;
      a1[2] = v56;
      result = 1;
      break;
    case 5:
      v26 = *a1;
      v27 = a1[1];
      if (*a1 <= v27)
        v28 = a1[1];
      else
        v28 = *a1;
      if (v26 >= v27)
        v26 = a1[1];
      *a1 = v28;
      a1[1] = v26;
      v29 = a1[3];
      v30 = *(a2 - 1);
      if (v29 <= v30)
        v31 = *(a2 - 1);
      else
        v31 = a1[3];
      if (v29 >= v30)
        v29 = *(a2 - 1);
      *(a2 - 1) = v29;
      a1[3] = v31;
      v32 = *(a2 - 1);
      v33 = a1[2];
      if (v32 <= v33)
        v34 = a1[2];
      else
        v34 = *(a2 - 1);
      if (v32 >= v33)
        v32 = a1[2];
      *(a2 - 1) = v32;
      v36 = a1[2];
      v35 = a1[3];
      v37 = a1[1];
      if (v34 <= v35)
        v36 = a1[3];
      if (v34 < v35)
        v35 = v34;
      a1[2] = v36;
      a1[3] = v35;
      v38 = *(a2 - 1);
      if (v37 <= v38)
        v39 = *(a2 - 1);
      else
        v39 = v37;
      if (v37 < v38)
        v38 = v37;
      *(a2 - 1) = v38;
      v40 = *a1;
      v42 = a1[2];
      v41 = a1[3];
      if (v41 <= *a1)
        v43 = *a1;
      else
        v43 = a1[3];
      if (v41 >= v40)
        v41 = *a1;
      if (v43 <= v42)
        v40 = a1[2];
      if (v43 < v42)
        v42 = v43;
      if (v41 <= v39)
        v44 = v39;
      else
        v44 = v41;
      if (v41 >= v39)
        v41 = v39;
      if (v44 <= v42)
        v39 = v42;
      *a1 = v40;
      a1[1] = v39;
      if (v44 >= v42)
        v45 = v42;
      else
        v45 = v44;
      a1[2] = v45;
      a1[3] = v41;
      result = 1;
      break;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v6 = *a1;
      v5 = a1[1];
      if (v5 <= v3)
        v7 = a1[2];
      else
        v7 = a1[1];
      if (v5 < v3)
        v3 = a1[1];
      if (v3 <= v6)
        v8 = *a1;
      else
        v8 = v3;
      if (v3 >= v6)
        v3 = *a1;
      *v4 = v3;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v6;
      if (v8 >= v7)
        v8 = v7;
      *a1 = v9;
      a1[1] = v8;
      v10 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_28:
        result = 1;
      }
      else
      {
        v11 = 0;
        v12 = 12;
        while (1)
        {
          v13 = *v10;
          v14 = *v4;
          if (*v10 > v14)
            break;
LABEL_27:
          v4 = v10;
          v12 += 4;
          if (++v10 == a2)
            goto LABEL_28;
        }
        v15 = v12;
        do
        {
          *(int *)((char *)a1 + v15) = v14;
          v16 = v15 - 4;
          if (v15 == 4)
          {
            *a1 = v13;
            if (++v11 != 8)
              goto LABEL_27;
            goto LABEL_116;
          }
          v14 = *(int *)((char *)a1 + v15 - 8);
          v15 -= 4;
        }
        while (v13 > v14);
        *(int *)((char *)a1 + v16) = v13;
        if (++v11 != 8)
          goto LABEL_27;
LABEL_116:
        result = v10 + 1 == a2;
      }
      break;
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *,int *>(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int64_t v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  int v32;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  BOOL v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 2;
  if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
  {
    v34 = (unint64_t)(v4 - 2) >> 1;
    v35 = v34;
    do
    {
      if (v34 >= v35)
      {
        v36 = (2 * v35) | 1;
        v37 = &a1[4 * v36];
        if (2 * v35 + 2 >= v4)
        {
          v38 = *(_DWORD *)v37;
          v40 = &a1[4 * v35];
          v41 = *(_DWORD *)v40;
          if (*(_DWORD *)v37 <= *(_DWORD *)v40)
            goto LABEL_78;
        }
        else
        {
          v38 = *((_DWORD *)v37 + 1);
          v39 = *(_DWORD *)v37 <= v38;
          if (*(_DWORD *)v37 < v38)
            v38 = *(_DWORD *)v37;
          if (!v39)
          {
            v37 += 4;
            v36 = 2 * v35 + 2;
          }
          v40 = &a1[4 * v35];
          v41 = *(_DWORD *)v40;
          if (v38 <= *(_DWORD *)v40)
          {
LABEL_78:
            while (1)
            {
              *(_DWORD *)v40 = v38;
              v40 = v37;
              if (v34 < v36)
                break;
              v43 = (2 * v36) | 1;
              v37 = &a1[4 * v43];
              v36 = 2 * v36 + 2;
              if (v36 < v4)
              {
                v38 = *(_DWORD *)v37;
                v42 = *((_DWORD *)v37 + 1);
                if (*(_DWORD *)v37 >= v42)
                  v38 = *((_DWORD *)v37 + 1);
                if (*(_DWORD *)v37 <= v42)
                  v36 = v43;
                else
                  v37 += 4;
                if (v38 > v41)
                  break;
              }
              else
              {
                v38 = *(_DWORD *)v37;
                v36 = v43;
                if (*(_DWORD *)v37 > v41)
                  break;
              }
            }
            *(_DWORD *)v40 = v41;
          }
        }
      }
      v15 = v35-- <= 0;
    }
    while (!v15);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      v6 = *(_DWORD *)a1;
      v7 = a2;
      do
      {
        v8 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 > v6)
        {
          *(_DWORD *)v7 = v6;
          *(_DWORD *)a1 = v8;
          v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != a3);
LABEL_37:
      v5 = a3;
      goto LABEL_38;
    }
    v9 = a2;
    while (1)
    {
      v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 > *(_DWORD *)a1)
      {
        *(_DWORD *)v9 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v10;
        v11 = *((_DWORD *)a1 + 1);
        if (v3 == 8)
        {
          v12 = a1 + 4;
          v13 = 1;
          if (v11 <= v10)
            goto LABEL_26;
        }
        else
        {
          v14 = *((_DWORD *)a1 + 2);
          v15 = v11 <= v14;
          if (v11 >= v14)
            v11 = *((_DWORD *)a1 + 2);
          if (v15)
            v12 = a1 + 4;
          else
            v12 = a1 + 8;
          if (v15)
            v13 = 1;
          else
            v13 = 2;
          if (v11 <= v10)
          {
LABEL_26:
            v16 = a1;
            while (1)
            {
              *(_DWORD *)v16 = v11;
              v16 = v12;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13)
                break;
              v18 = (2 * v13) | 1;
              v12 = &a1[4 * v18];
              v13 = 2 * v13 + 2;
              if (v13 < v4)
              {
                v11 = *(_DWORD *)v12;
                v17 = *((_DWORD *)v12 + 1);
                if (*(_DWORD *)v12 >= v17)
                  v11 = *((_DWORD *)v12 + 1);
                if (*(_DWORD *)v12 <= v17)
                  v13 = v18;
                else
                  v12 += 4;
                if (v11 > v10)
                  break;
              }
              else
              {
                v11 = *(_DWORD *)v12;
                v13 = v18;
                if (*(_DWORD *)v12 > v10)
                  break;
              }
            }
            *(_DWORD *)v16 = v10;
          }
        }
      }
      v9 += 4;
      if (v9 == a3)
        goto LABEL_37;
    }
  }
LABEL_38:
  if (v3 >= 5)
  {
    v19 = (unint64_t)v3 >> 2;
    do
    {
      v20 = 0;
      v21 = *(_DWORD *)a1;
      v22 = (unint64_t)(v19 - 2) >> 1;
      v23 = a1;
      do
      {
        while (1)
        {
          v26 = &v23[4 * v20 + 4];
          v27 = (2 * v20) | 1;
          v20 = 2 * v20 + 2;
          if (v20 < v19)
            break;
          v20 = v27;
          *(_DWORD *)v23 = *(_DWORD *)v26;
          v23 = v26;
          if (v27 > v22)
            goto LABEL_51;
        }
        v24 = *(_DWORD *)v26;
        v25 = *((_DWORD *)v26 + 1);
        if (*(_DWORD *)v26 >= v25)
          v24 = *((_DWORD *)v26 + 1);
        if (*(_DWORD *)v26 <= v25)
          v20 = v27;
        else
          v26 += 4;
        *(_DWORD *)v23 = v24;
        v23 = v26;
      }
      while (v20 <= v22);
LABEL_51:
      a2 -= 4;
      if (v26 == a2)
      {
        *(_DWORD *)v26 = v21;
      }
      else
      {
        *(_DWORD *)v26 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v21;
        v28 = v26 - a1 + 4;
        if (v28 >= 5)
        {
          v29 = (((unint64_t)v28 >> 2) - 2) >> 1;
          v30 = &a1[4 * v29];
          v31 = *(_DWORD *)v30;
          v32 = *(_DWORD *)v26;
          if (*(_DWORD *)v30 > *(_DWORD *)v26)
          {
            do
            {
              *(_DWORD *)v26 = v31;
              v26 = v30;
              if (!v29)
                break;
              v29 = (v29 - 1) >> 1;
              v30 = &a1[4 * v29];
              v31 = *(_DWORD *)v30;
            }
            while (*(_DWORD *)v30 > v32);
            *(_DWORD *)v26 = v32;
          }
        }
      }
      v15 = v19-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

uint64_t operations_research::RationalApproximation(operations_research *this, double a2, double a3)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;

  v3 = fabs(a2);
  v4 = vcvtmd_s64_f64(v3);
  if (v4 < 0)
  {
    if (a2 >= 0.0)
      return 1;
    else
      return -1;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    v7 = v4;
    v8 = 1;
    v9 = v3;
    do
    {
      v10 = v4;
      v11 = v6;
      if (vabdd_f64(v3 * (double)v6, (double)v4) <= v3 * (double)v6 * a3)
        break;
      v9 = 1.0 / (v9 - (double)v7);
      v7 = vcvtmd_s64_f64(v9);
      v4 = v8 + v4 * v7;
      if (v4 < 0)
        break;
      v6 = v5 + v6 * v7;
      v8 = v10;
      v5 = v11;
    }
    while ((v6 & 0x8000000000000000) == 0);
    if (a2 >= 0.0)
      return v10;
    else
      return -v10;
  }
}

BOOL operations_research::IntervalsAreSortedAndNonAdjacent(uint64_t *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;

  if (a2 < 2)
  {
    return !a2 || a1[2 * a2 - 2] <= a1[2 * a2 - 1];
  }
  else
  {
    v2 = a1 + 2;
    v3 = *a1;
    v4 = a2 - 1;
    while (1)
    {
      v5 = *(v2 - 1);
      if (v3 > v5)
        return 0;
      v3 = *v2;
      v6 = v5 + 1;
      if (v5 < *v2)
      {
        v8 = __OFSUB__(v6, v3);
        v7 = v6 - v3 < 0;
      }
      else
      {
        v8 = 0;
        v7 = 0;
      }
      if (v7 == v8)
        return 0;
      v2 += 2;
      if (!--v4)
        return !a2 || a1[2 * a2 - 2] <= a1[2 * a2 - 1];
    }
  }
}

_QWORD *operations_research::operator<<(_QWORD *a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t v16;
  _QWORD *v17;
  std::string v19;
  void *__p[2];
  unsigned __int8 v21;
  uint64_t v22;
  BOOL (*v23)(uint64_t, uint64_t, unsigned int, char *);
  uint64_t v24;
  BOOL (*v25)(uint64_t, uint64_t, unsigned int, char *);
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  memset(&v19, 0, sizeof(v19));
  v3 = *a2;
  v6 = (uint64_t *)a2[1];
  v4 = (uint64_t *)(a2 + 1);
  v5 = v6;
  if ((v3 & 1) != 0)
    v7 = v5;
  else
    v7 = v4;
  if (v3 >= 2)
  {
    v11 = &v7[2 * (v3 >> 1)];
    do
    {
      v12 = v7[1];
      if (*v7 == v12)
      {
        v22 = *v7;
        v23 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
        absl::lts_2020_02_25::str_format_internal::FormatPack("[%d]", 4, (uint64_t)&v22, 1, (uint64_t)__p);
      }
      else
      {
        v22 = *v7;
        v23 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
        v24 = v12;
        v25 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
        absl::lts_2020_02_25::str_format_internal::FormatPack("[%d,%d]", 7, (uint64_t)&v22, 2, (uint64_t)__p);
      }
      if ((v21 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((v21 & 0x80u) == 0)
        v14 = v21;
      else
        v14 = (std::string::size_type)__p[1];
      std::string::append(&v19, (const std::string::value_type *)v13, v14);
      if ((char)v21 < 0)
        operator delete(__p[0]);
      v7 += 2;
    }
    while (v7 != v11);
    v10 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    size = v19.__r_.__value_.__l.__size_;
    v9 = v19.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = 0;
    v9 = 0;
    v10 = 0;
  }
  if ((v10 & 0x80u) == 0)
    v15 = &v19;
  else
    v15 = (std::string *)v9;
  if ((v10 & 0x80u) == 0)
    v16 = v10;
  else
    v16 = size;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v15, v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v17;
}

void sub_22DC25684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a15 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *operations_research::Domain::Domain(_QWORD *this, uint64_t a2)
{
  this[1] = a2;
  this[2] = a2;
  *this = 2;
  return this;
}

_QWORD *operations_research::Domain::Domain(_QWORD *this, uint64_t a2, uint64_t a3)
{
  this[1] = a2;
  this[2] = a3;
  *this = 2 * (a2 <= a3);
  return this;
}

double operations_research::Domain::AllValues@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)&result = 2;
  *(_OWORD *)a1 = xmmword_22DCF8F10;
  return result;
}

void operations_research::Domain::FromValues(int64_t **a1@<X0>, unint64_t *a2@<X8>)
{
  int64_t *v4;
  int64_t *v5;
  unint64_t v6;
  int64x2_t *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  unint64_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  unint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t *v19;
  void *__p;

  std::__sort<std::__less<long long,long long> &,long long *>();
  *a2 = 0;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = 0;
    v7 = (int64x2_t *)(a2 + 1);
    do
    {
      while (1)
      {
        v8 = *v4;
        if (v6 >= 2)
          break;
        v9 = 0;
        v10 = v6;
LABEL_6:
        v11 = a2[2];
        if (v10)
          v12 = (int64x2_t *)a2[1];
        else
          v12 = v7;
        if (!v10)
          v11 = 1;
        if (v9 == v11)
        {
          __p = (void *)a2[1];
          if (v9 >> 59)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v13 = a2;
          v14 = (int64x2_t *)operator new(32 * v9);
          v14[v9] = vdupq_n_s64(v8);
          v15 = v14;
          v16 = v9;
          if (v6 >= 2)
          {
            do
            {
              v17 = *v12++;
              *v15++ = v17;
              --v16;
            }
            while (v16);
          }
          if (v10)
            operator delete(__p);
          v13[1] = (unint64_t)v14;
          v13[2] = 2 * v9;
          a2 = v13;
          v6 = (v6 | 1) + 2;
          *v13 = v6;
          if (++v4 == v5)
            return;
        }
        else
        {
          v12[v9] = vdupq_n_s64(v8);
          v6 += 2;
          *a2 = v6;
          if (++v4 == v5)
            return;
        }
      }
      v9 = v6 >> 1;
      if ((v6 & 1) != 0)
      {
        v19 = (uint64_t *)v7->i64[0];
        v18 = v9 - 1;
        if (v8 > *(_QWORD *)(v7->i64[0] + 16 * (v9 - 1) + 8) + 1)
        {
          v10 = 1;
          goto LABEL_6;
        }
      }
      else
      {
        v18 = v9 - 1;
        v19 = (uint64_t *)v7;
        if (v8 > v7[v9 - 1].i64[1] + 1)
        {
          v10 = 0;
          goto LABEL_6;
        }
      }
      v19[2 * v18 + 1] = v8;
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_22DC258C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  uint64_t v9;

  if (v9)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::`anonymous namespace'::UnionOfSortedIntervals(unint64_t *a1)
{
  unint64_t v2;
  unint64_t **v3;
  unint64_t *v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  int64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t **v21;
  unint64_t v22;
  uint64_t v23;

  v3 = (unint64_t **)(a1 + 1);
  v2 = *a1;
  v4 = a1 + 1;
  if ((*a1 & 1) != 0)
    v4 = *v3;
  if (v2 >= 2)
  {
    v5 = 0;
    v6 = 16 * (v2 >> 1);
    while (1)
    {
      while (v5 <= 0)
      {
        v11 = *a1 & 1;
LABEL_19:
        v15 = a1 + 1;
        if (v11)
          v15 = *v3;
        v16 = v5++;
        v17 = *(_OWORD *)v4;
        v4 += 2;
        *(_OWORD *)&v15[2 * v16] = v17;
        v6 -= 16;
        if (!v6)
          goto LABEL_22;
      }
      v9 = a1 + 1;
      if ((*a1 & 1) != 0)
        v9 = *v3;
      v10 = (v5 - 1);
      v11 = *a1 & 1;
      v12 = v9[2 * v10 + 1];
      if (((v12 + 1) & ~v12 & 0x8000000000000000) == 0)
        v13 = v12 + 1;
      else
        v13 = (v12 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)*v4 > v13)
        goto LABEL_19;
      v14 = a1 + 1;
      if (v11)
        v14 = *v3;
      v7 = &v14[2 * v10];
      v8 = v4[1];
      if (v8 <= (uint64_t)v7[1])
        v8 = v7[1];
      v7[1] = v8;
      v4 += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_22;
    }
  }
  v5 = 0;
LABEL_22:
  absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Resize<absl::lts_2020_02_25::inlined_vector_internal::DefaultValueAdapter<std::allocator<operations_research::ClosedInterval>>>(a1, v5);
  v18 = *a1;
  if ((*a1 & 1) != 0)
  {
    v19 = v18 >> 1;
    if (v18 >> 1 != a1[2])
    {
      v20 = (char *)a1[1];
      if (v18 < 4)
      {
        if (v18 <= 1)
        {
          operator delete((void *)a1[1]);
          goto LABEL_35;
        }
        v21 = 0;
        v22 = 0;
      }
      else
      {
        if (v18 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v3 = (unint64_t **)operator new(16 * v19);
        v21 = v3;
        v22 = v19;
      }
      v23 = 0;
      do
      {
        *(_OWORD *)&v3[v23] = *(_OWORD *)&v20[v23 * 8];
        v23 += 2;
        --v19;
      }
      while (v19);
      operator delete(v20);
      if (v21)
      {
        a1[1] = (unint64_t)v21;
        a1[2] = v22;
        return;
      }
LABEL_35:
      *a1 &= ~1uLL;
    }
  }
}

void operations_research::Domain::FromFlatSpanOfIntervals(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  __n128 **v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  __n128 *v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t *v18;
  __n128 *v19;
  unint64_t v20;
  __n128 v21;
  __n128 *v22;
  unint64_t v23;
  uint64_t v24;
  __n128 **v25;
  unint64_t v26;
  char v28;

  v26 = a2;
  *a3 = 0;
  v5 = (__n128 **)(a3 + 1);
  v25 = (__n128 **)(a3 + 1);
  if (a2 < 4)
  {
    v7 = 0;
    v9 = 0;
    if (!a2)
      goto LABEL_20;
  }
  else
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v6 = a2 >> 1;
    a3[1] = (unint64_t)operator new(16 * (a2 >> 1));
    a3[2] = v6;
    v7 = 1;
    *a3 = 1;
    a2 = v26;
  }
  v8 = 0;
  v9 = v7;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(a1 + 8 * v8);
      v12 = *(_QWORD *)(a1 + ((8 * v8) | 8));
      v13 = (void *)a3[1];
      v14 = (v9 & 1) != 0 ? (__n128 *)a3[1] : (__n128 *)v5;
      v15 = (v9 & 1) != 0 ? a3[2] : 1;
      if (v9 >> 1 == v15)
        break;
      v10 = &v14[v9 >> 1];
      v10->n128_u64[0] = v11;
      v10->n128_u64[1] = v12;
      v9 += 2;
      *a3 = v9;
      v8 += 2;
      if (a2 <= v8)
        goto LABEL_20;
    }
    if (((v15 >> 59) & 0xF) != 0)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = operator new(32 * v15);
    v17 = v16;
    v18 = (unint64_t *)&v16[v15];
    *v18 = v11;
    v18[1] = v12;
    if (v9 >= 2)
    {
      v19 = (__n128 *)v16;
      v20 = v15;
      do
      {
        v21 = *v14++;
        a4 = v21;
        *v19++ = v21;
        --v20;
      }
      while (v20);
    }
    if ((v9 & 1) != 0)
      operator delete(v13);
    a3[1] = (unint64_t)v17;
    a3[2] = 2 * v15;
    v5 = v25;
    a2 = v26;
    v9 = (v9 | 1) + 2;
    *a3 = v9;
    v8 += 2;
  }
  while (v26 > v8);
LABEL_20:
  if ((v9 & 1) != 0)
    v22 = *v5;
  else
    v22 = (__n128 *)v5;
  v23 = 126 - 2 * __clz(v9 >> 1);
  if (v9 >= 2)
    v24 = v23;
  else
    v24 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *,false>(v22, &v22[v9 >> 1], (uint64_t)&v28, v24, 1, a4);
}

void sub_22DC25C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  _QWORD *v9;

  if ((*v9 & 1) != 0)
    operator delete(*a9);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::Domain::IsEmpty(operations_research::Domain *this)
{
  return *(_QWORD *)this < 2uLL;
}

BOOL operations_research::Domain::IsFixed(operations_research::Domain *this, const char *a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this <= 1uLL)
  v3 = (_QWORD *)((char *)this + 8);
  if ((v2 & 1) != 0)
    v3 = (_QWORD *)*v3;
  return *v3 == v3[2 * (v2 >> 1) - 1];
}

uint64_t operations_research::Domain::Min(operations_research::Domain *this, const char *a2)
{
  char *v2;

  if (*(_QWORD *)this <= 1uLL)
  v2 = (char *)this + 8;
  if ((*(_QWORD *)this & 1) != 0)
    v2 = *(char **)v2;
  return *(_QWORD *)v2;
}

uint64_t operations_research::Domain::Max(operations_research::Domain *this, const char *a2)
{
  unint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this <= 1uLL)
  v3 = (_QWORD *)((char *)this + 8);
  if ((v2 & 1) != 0)
    v3 = (_QWORD *)*v3;
  return v3[2 * (v2 >> 1) - 1];
}

unint64_t operations_research::Domain::Size(operations_research::Domain *this)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)this;
  v1 = (unint64_t *)((char *)this + 8);
  v2 = v3;
  if ((v3 & 1) != 0)
    v1 = (unint64_t *)*v1;
  v4 = v2 >> 1;
  v5 = __OFSUB__(v2, 2);
  if (v2 >= 2)
  {
    v7 = 0;
    v8 = &v1[2 * v4];
    do
    {
      v9 = *v1;
      v10 = v1[1];
      v1 += 2;
      v11 = v10 - v9;
      v12 = (v10 - v9) ^ v10;
      v13 = v10 ^ v9;
      v14 = (v10 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if (((v12 & v13 & 0x8000000000000000) != 0) != v5)
        v15 = v14;
      else
        v15 = v11;
      v16 = v15 + v7;
      v17 = (v15 + v7) ^ v7;
      v18 = (v15 + v7) ^ v15;
      v7 = (v7 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
      if (((v17 & v18 & 0x8000000000000000) != 0) == v5)
        v7 = v16;
      v5 = __OFSUB__(v1, v8);
    }
    while (v1 != v8);
    v19 = v7 + v4;
    if (((v19 & ~v7 & 0x8000000000000000) != 0) != __OFSUB__(v1, v8))
      return (v7 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    else
      return v19;
  }
  else if (__OFSUB__(v2, 2))
  {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    return v2 >> 1;
  }
}

BOOL operations_research::Domain::Contains(operations_research::Domain *this, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = *(_QWORD *)this;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  v5 = v2;
  if ((v4 & 1) != 0)
    v5 = (_QWORD *)*v2;
  v6 = v3 >> 1;
  if (v3 >= 2)
  {
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[2 * (v6 >> 1)];
      v10 = *v8;
      v9 = v8 + 2;
      v6 += ~(v6 >> 1);
      if (v10 > a2)
        v6 = v7;
      else
        v5 = v9;
    }
    while (v6);
  }
  else
  {
    v5 += 2 * v6;
  }
  if ((v3 & 1) != 0)
    v2 = (_QWORD *)*v2;
  return v5 != v2 && *(v5 - 1) >= a2;
}

uint64_t operations_research::Domain::IsIncludedIn(operations_research::Domain *this, const operations_research::Domain *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;

  v4 = *(_QWORD *)this;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  if ((v4 & 1) != 0)
    v2 = (_QWORD *)*v2;
  if (v3 < 2)
    return 1;
  v6 = 0;
  v7 = &v2[2 * (v3 >> 1)];
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)a2 >> 1;
  v12 = (char *)*((_QWORD *)a2 + 1);
  v10 = (char *)a2 + 8;
  v11 = v12;
  if ((v8 & 1) != 0)
    v13 = v11;
  else
    v13 = v10;
  while (1)
  {
    v14 = v6;
    if (v9 > v6)
    {
      v15 = &v13[16 * v6 + 8];
      do
      {
        v16 = *(_QWORD *)v15;
        v15 += 16;
        if (v2[1] <= v16)
          break;
        ++v14;
      }
      while (v9 > v14);
      v6 = v14;
    }
    if (v9 == v14 || *v2 < *(_QWORD *)&v13[16 * v14])
      break;
    v2 += 2;
    if (v2 == v7)
      return 1;
  }
  return 0;
}

void operations_research::Domain::Complement(operations_research::Domain *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  __int128 *v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  unint64_t *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t *v20;
  uint64_t v21;
  void *v22;
  __int128 *v23;
  unint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  unint64_t *v27;
  _OWORD *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t *v31;
  __int128 *v32;

  *a2 = 0;
  v32 = (__int128 *)(a2 + 1);
  v4 = *(_QWORD *)this;
  v5 = *(_QWORD *)this >> 1;
  if (*(_QWORD *)this < 2uLL)
  {
    v6 = 0;
    v7 = (_QWORD *)((char *)this + 8);
    if ((v4 & 1) != 0)
LABEL_4:
      v7 = (_QWORD *)*v7;
  }
  else
  {
    if (v4 >= 0x1FFFFFFFFFFFFFFELL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    a2[1] = (unint64_t)operator new(16 * (v5 + 1));
    a2[2] = v5 + 1;
    v6 = 1;
    *a2 = 1;
    v7 = (_QWORD *)((char *)this + 8);
    if ((v4 & 1) != 0)
      goto LABEL_4;
  }
  if (v4 >= 2)
  {
    v9 = &v7[2 * v5];
    v8 = 0x8000000000000000;
    while (1)
    {
      if (*v7 != 0x8000000000000000)
      {
        v10 = *v7 - 1;
        v11 = (void *)a2[1];
        if ((v6 & 1) != 0)
          v12 = (__int128 *)a2[1];
        else
          v12 = v32;
        if ((v6 & 1) != 0)
          v13 = a2[2];
        else
          v13 = 1;
        if (v6 >> 1 == v13)
        {
          if (((v13 >> 59) & 0xF) != 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v14 = operator new(32 * v13);
          v15 = v14;
          v16 = (unint64_t *)&v14[v13];
          *v16 = v8;
          v16[1] = v10;
          if (v6 >= 2)
          {
            v17 = v14;
            v18 = v13;
            do
            {
              v19 = *v12++;
              *v17++ = v19;
              --v18;
            }
            while (v18);
          }
          if ((v6 & 1) != 0)
            operator delete(v11);
          a2[1] = (unint64_t)v15;
          a2[2] = 2 * v13;
          v6 |= 1uLL;
        }
        else
        {
          v20 = (unint64_t *)&v12[v6 >> 1];
          *v20 = v8;
          v20[1] = v10;
        }
        v6 += 2;
        *a2 = v6;
      }
      v21 = v7[1];
      if (v21 == 0x7FFFFFFFFFFFFFFFLL)
        break;
      v8 = v21 + 1;
      v7 += 2;
      if (v7 == v9)
        goto LABEL_27;
    }
  }
  else
  {
    v8 = 0x8000000000000000;
LABEL_27:
    v22 = (void *)a2[1];
    if ((v6 & 1) != 0)
      v23 = (__int128 *)a2[1];
    else
      v23 = v32;
    if ((v6 & 1) != 0)
      v24 = a2[2];
    else
      v24 = 1;
    if (v6 >> 1 == v24)
    {
      if (((v24 >> 59) & 0xF) != 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(32 * v24);
      v26 = v25;
      v27 = (unint64_t *)&v25[v24];
      *v27 = v8;
      v27[1] = 0x7FFFFFFFFFFFFFFFLL;
      if (v6 >= 2)
      {
        v28 = v25;
        v29 = v24;
        do
        {
          v30 = *v23++;
          *v28++ = v30;
          --v29;
        }
        while (v29);
      }
      if ((v6 & 1) != 0)
        operator delete(v22);
      a2[1] = (unint64_t)v26;
      a2[2] = 2 * v24;
      v6 |= 1uLL;
    }
    else
    {
      v31 = (unint64_t *)&v23[v6 >> 1];
      *v31 = v8;
      v31[1] = 0x7FFFFFFFFFFFFFFFLL;
    }
    *a2 = v6 + 2;
  }
}

void sub_22DC26108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  char v10;

  if ((v10 & 1) != 0)
    operator delete(*a10);
  _Unwind_Resume(exception_object);
}

unint64_t *operations_research::Domain::Negation@<X0>(operations_research::Domain *this@<X0>, const char *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  __int128 v9;

  *a3 = 0;
  v4 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v5 = (__int128 *)*((_QWORD *)this + 1);
    v6 = v4 >> 1;
    if (v4 < 4)
    {
      if (v4 < 2)
      {
        v8 = 0;
LABEL_11:
        *a3 = v8 + (v4 & 0xFFFFFFFFFFFFFFFELL);
        return operations_research::Domain::NegateInPlace(a3, a2);
      }
      v7 = a3 + 1;
    }
    else
    {
      if (v4 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v7 = operator new(16 * v6);
      a3[1] = (unint64_t)v7;
      a3[2] = v6;
      *a3 = 1;
    }
    do
    {
      v9 = *v5++;
      *v7++ = v9;
      --v6;
    }
    while (v6);
    v8 = *a3;
    goto LABEL_11;
  }
  *a3 = v4;
  *(_OWORD *)(a3 + 1) = *(_OWORD *)((char *)this + 8);
  return operations_research::Domain::NegateInPlace(a3, a2);
}

void sub_22DC261DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(_BYTE *)v1 & 1) != 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

unint64_t *operations_research::Domain::NegateInPlace(unint64_t *this, const char *a2)
{
  unint64_t v2;
  int8x16_t *v3;
  int8x16_t *v4;
  int8x16_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  int64x2_t v14;
  int8x16_t v15;
  uint64_t v16;
  double *v17;
  int8x16_t *v18;
  int64x2_t v19;
  int8x16_t v20;
  int64x2_t v21;
  int8x16_t v22;
  float64x2x2_t v23;
  float64x2x2_t v24;

  v2 = *this;
  if (*this < 2)
    return this;
  v3 = (int8x16_t *)(this + 1);
  v4 = (int8x16_t *)(this + 1);
  if ((v2 & 1) != 0)
    v4 = (int8x16_t *)v3->i64[0];
  v5 = &v4[(v2 >> 1) - 1];
  if (v5 > v4)
  {
    v6 = (unint64_t)&v4[1];
    do
    {
      v22 = *(int8x16_t *)(v6 - 16);
      *(int8x16_t *)(v6 - 16) = *v5;
      *v5-- = v22;
      v7 = v6 >= (unint64_t)v5;
      v6 += 16;
    }
    while (!v7);
    v2 = *this;
    if (*this <= 1)
  }
  v8 = this + 1;
  if ((v2 & 1) != 0)
    v8 = (_QWORD *)v3->i64[0];
  v9 = v8[2 * (v2 >> 1) - 1];
  v10 = v2;
  if (v9 != 0x8000000000000000)
  {
    if ((v2 & 1) == 0)
      goto LABEL_13;
LABEL_16:
    v3 = (int8x16_t *)v3->i64[0];
    if (v10 < 2)
      return this;
    goto LABEL_17;
  }
  v10 = v2 - 2;
  *this = v2 - 2;
  if ((v2 & 1) != 0)
    goto LABEL_16;
LABEL_13:
  if (v10 < 2)
    return this;
LABEL_17:
  v11 = v10 >> 1;
  v12 = v3;
  if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_21;
  v13 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v14 = vdupq_n_s64(0x8000000000000000);
  v12 = &v3[v13 & 0x1FFFFFFFFFFFFFFELL];
  v15 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v16 = v13 & 0x1FFFFFFFFFFFFFFELL;
  v17 = (double *)v3;
  do
  {
    v23 = vld2q_f64(v17);
    v24.val[0] = (float64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v23.val[1], v14), v15, (int8x16_t)vnegq_s64((int64x2_t)v23.val[1]));
    v24.val[1] = (float64x2_t)vbslq_s8((int8x16_t)vceqq_s64((int64x2_t)v23.val[0], v14), v15, (int8x16_t)vnegq_s64((int64x2_t)v23.val[0]));
    vst2q_f64(v17, v24);
    v17 += 4;
    v16 -= 2;
  }
  while (v16);
  if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_21:
    v18 = &v3[v11];
    v19 = vdupq_n_s64(0x8000000000000000);
    v20 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    do
    {
      v21 = (int64x2_t)vextq_s8(*v12, *v12, 8uLL);
      *v12++ = vbslq_s8((int8x16_t)vceqq_s64(v21, v19), v20, (int8x16_t)vnegq_s64(v21));
    }
    while (v12 != v18);
  }
  return this;
}

_QWORD *operations_research::Domain::IntersectionWith@<X0>(_QWORD *this@<X0>, const operations_research::Domain *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  const operations_research::Domain *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  _QWORD *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  unint64_t v45;
  int v46;
  _OWORD *v47;
  _OWORD *v48;
  _QWORD *v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  _OWORD *v55;
  _QWORD *v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  _OWORD *v65;
  _QWORD *v66;
  _OWORD *v67;
  __int128 v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  _QWORD *v72;
  void *__p;
  void *__pa;
  void *__pb;
  const operations_research::Domain *v76;
  int v77;
  uint64_t v78;
  int v79;
  unint64_t v80;

  *a3 = 0;
  v3 = *this;
  if (*this >= 2uLL)
  {
    v4 = a2;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = this + 1;
    v11 = (_QWORD *)((char *)a2 + 8);
    v12 = (__int128 *)(a3 + 1);
    v72 = this;
    v76 = v4;
    do
    {
      v14 = *(_QWORD *)v4;
      if ((unint64_t)(int)v7 >= *(_QWORD *)v4 >> 1)
        return this;
      v15 = v10;
      if ((v3 & 1) != 0)
        v15 = (_QWORD *)*v10;
      v16 = v15[2 * v6];
      if ((v14 & 1) != 0)
      {
        v17 = (_QWORD *)*v11;
        if (v16 > *(_QWORD *)(*v11 + 16 * (int)v7))
        {
LABEL_40:
          v37 = v10;
          if ((v3 & 1) != 0)
            v37 = (_QWORD *)*v10;
          if (v17[2 * (int)v7 + 1] < v37[2 * v6])
          {
            v7 = (v7 + 1);
            goto LABEL_7;
          }
          if ((v14 & 1) != 0)
            v38 = (_QWORD *)*v11;
          else
            v38 = v11;
          v39 = v38[2 * (int)v7 + 1];
          if ((v3 & 1) != 0)
          {
            v41 = (_QWORD *)*v10;
            v40 = *(_QWORD *)(*v10 + 16 * v6 + 8);
            if (v39 <= v40)
            {
LABEL_49:
              v42 = v41[2 * v6];
              v43 = a3[2];
              if ((v9 & 1) != 0)
                v44 = (__int128 *)a3[1];
              else
                v44 = v12;
              if ((v9 & 1) == 0)
                v43 = 1;
              v45 = v9 >> 1;
              if (v9 >> 1 == v43)
              {
                v78 = v8;
                v80 = v9 & 1;
                __pa = (void *)a3[1];
                if (v9 >> 60)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v46 = v7;
                v47 = operator new(32 * v45);
                v48 = v47;
                v49 = &v47[v45];
                *v49 = v42;
                v49[1] = v39;
                if (v9 >= 2)
                {
                  v50 = v47;
                  do
                  {
                    v51 = *v44++;
                    *v50++ = v51;
                    --v45;
                  }
                  while (v45);
                }
LABEL_71:
                if (v80)
                  operator delete(__pa);
                a3[1] = (unint64_t)v48;
                a3[2] = v9 & 0xFFFFFFFFFFFFFFFELL;
                v9 |= 1uLL;
                v12 = (__int128 *)(a3 + 1);
                this = v72;
                LODWORD(v7) = v46;
                v4 = v76;
                v8 = v78;
              }
              else
              {
                v69 = &v44[v45];
                *(_QWORD *)v69 = v42;
                *((_QWORD *)v69 + 1) = v39;
              }
              goto LABEL_90;
            }
          }
          else
          {
            v40 = v10[2 * v6 + 1];
            v41 = v10;
            if (v39 <= v40)
              goto LABEL_49;
          }
          v59 = v41[2 * v6];
          v60 = a3[2];
          if ((v9 & 1) != 0)
            v61 = (__int128 *)a3[1];
          else
            v61 = v12;
          if ((v9 & 1) == 0)
            v60 = 1;
          v62 = v9 >> 1;
          if (v9 >> 1 == v60)
          {
            v79 = v8;
            __pb = (void *)a3[1];
            if (v9 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v63 = v7;
            v64 = operator new(32 * v62);
            v65 = v64;
            v66 = &v64[v62];
            *v66 = v59;
            v66[1] = v40;
            if (v9 >= 2)
            {
              v67 = v64;
              do
              {
                v68 = *v61++;
                *v67++ = v68;
                --v62;
              }
              while (v62);
            }
            if ((v9 & 1) != 0)
              operator delete(__pb);
            a3[1] = (unint64_t)v65;
            a3[2] = v9 & 0xFFFFFFFFFFFFFFFELL;
            v9 |= 1uLL;
            v12 = (__int128 *)(a3 + 1);
            this = v72;
            v7 = v63;
            v4 = v76;
            LODWORD(v8) = v79;
          }
          else
          {
            v71 = &v61[v62];
            *(_QWORD *)v71 = v59;
            *((_QWORD *)v71 + 1) = v40;
          }
          goto LABEL_5;
        }
      }
      else
      {
        v17 = v11;
        if (v16 > v11[2 * (int)v7])
          goto LABEL_40;
      }
      v18 = v10;
      if ((v3 & 1) != 0)
        v18 = (_QWORD *)*v10;
      v19 = (_QWORD *)*v11;
      if ((v14 & 1) != 0)
        v20 = (_QWORD *)*v11;
      else
        v20 = v11;
      if (v18[2 * v6 + 1] < v20[2 * (int)v7])
        goto LABEL_6;
      v21 = v10;
      if ((v3 & 1) != 0)
        v21 = (_QWORD *)*v10;
      v22 = v21[2 * v6 + 1];
      v23 = v9 >> 1;
      if ((v14 & 1) != 0)
      {
        v24 = v19[2 * (int)v7 + 1];
        if (v22 > v24)
        {
LABEL_61:
          v52 = v19[2 * (int)v7];
          v53 = a3[2];
          if ((v9 & 1) != 0)
            v54 = (__int128 *)a3[1];
          else
            v54 = v12;
          if ((v9 & 1) == 0)
            v53 = 1;
          if (v23 == v53)
          {
            v78 = v8;
            v80 = v9 & 1;
            __pa = (void *)a3[1];
            if (v9 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v46 = v7;
            v55 = operator new(32 * v23);
            v48 = v55;
            v56 = &v55[v23];
            *v56 = v52;
            v56[1] = v24;
            if (v9 >= 2)
            {
              v57 = v55;
              do
              {
                v58 = *v54++;
                *v57++ = v58;
                --v23;
              }
              while (v23);
            }
            goto LABEL_71;
          }
          v70 = &v54[v23];
          *(_QWORD *)v70 = v52;
          *((_QWORD *)v70 + 1) = v24;
LABEL_90:
          v9 += 2;
          *a3 = v9;
          v7 = (v7 + 1);
          goto LABEL_7;
        }
      }
      else
      {
        v24 = v11[2 * (int)v7 + 1];
        v19 = v11;
        if (v22 > v24)
          goto LABEL_61;
      }
      v25 = v10;
      if ((v3 & 1) != 0)
        v25 = (_QWORD *)*v10;
      v26 = v19[2 * (int)v7];
      v27 = v25[2 * v6 + 1];
      if ((v9 & 1) != 0)
        v28 = (__int128 *)a3[1];
      else
        v28 = v12;
      if ((v9 & 1) != 0)
        v29 = a3[2];
      else
        v29 = 1;
      if (v23 == v29)
      {
        v77 = v8;
        __p = (void *)a3[1];
        if (((v29 >> 59) & 0xF) != 0)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v30 = v7;
        v31 = operator new(32 * v29);
        v32 = v31;
        v33 = &v31[v29];
        *v33 = v26;
        v33[1] = v27;
        if (v9 >= 2)
        {
          v34 = v31;
          v35 = v29;
          do
          {
            v36 = *v28++;
            *v34++ = v36;
            --v35;
          }
          while (v35);
        }
        v4 = v76;
        if ((v9 & 1) != 0)
          operator delete(__p);
        a3[1] = (unint64_t)v32;
        a3[2] = 2 * v29;
        v9 |= 1uLL;
        v12 = (__int128 *)(a3 + 1);
        this = v72;
        v7 = v30;
        LODWORD(v8) = v77;
      }
      else
      {
        v13 = &v28[v23];
        *(_QWORD *)v13 = v26;
        *((_QWORD *)v13 + 1) = v27;
        v4 = v76;
      }
LABEL_5:
      v9 += 2;
      *a3 = v9;
LABEL_6:
      v8 = (v8 + 1);
LABEL_7:
      v6 = (int)v8;
      v3 = *this;
    }
    while ((unint64_t)(int)v8 < *this >> 1);
  }
  return this;
}

void sub_22DC267C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void operations_research::Domain::UnionWith(operations_research::Domain *this@<X0>, const operations_research::Domain *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  _OWORD *v15;
  size_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;

  *a3 = 0;
  absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Resize<absl::lts_2020_02_25::inlined_vector_internal::DefaultValueAdapter<std::allocator<operations_research::ClosedInterval>>>(a3, (*(_QWORD *)a2 >> 1) + (*(_QWORD *)this >> 1));
  v8 = *(_QWORD *)this;
  v7 = (char *)this + 8;
  v6 = v8;
  if ((v8 & 1) != 0)
    v7 = *(char **)v7;
  v9 = *(_QWORD *)a2;
  v12 = (char *)*((_QWORD *)a2 + 1);
  v11 = (char *)a2 + 8;
  v10 = v12;
  if ((v9 & 1) != 0)
    v13 = v10;
  else
    v13 = v11;
  v14 = &v13[16 * (v9 >> 1)];
  if ((*(_BYTE *)a3 & 1) != 0)
    v15 = (_OWORD *)a3[1];
  else
    v15 = a3 + 1;
  if (v6 >= 2)
  {
    v17 = &v7[16 * (v6 >> 1)];
    while (v13 != v14)
    {
      if (*(_QWORD *)v13 >= *(_QWORD *)v7)
      {
        v18 = *(_OWORD *)v7;
        v7 += 16;
        *v15++ = v18;
        if (v7 == v17)
          goto LABEL_10;
      }
      else
      {
        v19 = *(_OWORD *)v13;
        v13 += 16;
        *v15++ = v19;
        if (v7 == v17)
          goto LABEL_10;
      }
    }
    v16 = v17 - v7;
    v13 = v7;
    goto LABEL_19;
  }
LABEL_10:
  if (v13 != v14)
  {
    v16 = v14 - v13;
LABEL_19:
    memmove(v15, v13, v16);
  }
}

void sub_22DC268EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(_BYTE *)v1 & 1) != 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void operations_research::Domain::AdditionWith(operations_research::Domain *this@<X0>, const operations_research::Domain *a2@<X1>, _QWORD *a3@<X8>, int8x16_t a4@<Q0>)
{
  __n128 **v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  int64x2_t *v12;
  uint64x2_t v13;
  unint64_t v14;
  int64x2_t *v15;
  int64x2_t *v16;
  int8x16_t v17;
  void *v18;
  __n128 *v19;
  unint64_t v20;
  __n128 *v21;
  __n128 *v22;
  unint64_t v23;
  __n128 v24;
  __n128 *v26;
  unint64_t v27;
  uint64_t v28;
  operations_research::Domain *v29;
  int64x2_t *v30;
  uint64x2_t v32;
  __n128 v34;
  char v35;

  *a3 = 0;
  v5 = (__n128 **)(a3 + 1);
  v6 = *(_QWORD *)this;
  v7 = *(_QWORD *)this >> 1;
  v8 = (*(_QWORD *)a2 >> 1) * v7;
  if (v8 < 2)
  {
    v11 = 0;
    v10 = a3;
    v12 = (int64x2_t *)((char *)this + 8);
    if ((v6 & 1) != 0)
LABEL_4:
      v12 = (int64x2_t *)v12->i64[0];
  }
  else
  {
    if (v8 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = operator new(16 * v8);
    v10 = a3;
    a3[1] = v9;
    a3[2] = v8;
    v11 = 1;
    *a3 = 1;
    v12 = (int64x2_t *)((char *)this + 8);
    if ((v6 & 1) != 0)
      goto LABEL_4;
  }
  if (v6 >= 2)
  {
    v29 = this;
    v30 = &v12[v7];
    v13 = (uint64x2_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v32 = v13;
    do
    {
      v14 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 1) != 0)
        v15 = (int64x2_t *)*((_QWORD *)a2 + 1);
      else
        v15 = (int64x2_t *)((char *)a2 + 8);
      if (v14 >= 2)
      {
        v16 = &v15[v14 >> 1];
        do
        {
          while (1)
          {
            v17 = (int8x16_t)vaddq_s64(*v15, *v12);
            a4 = vbslq_s8((int8x16_t)vcltzq_s64((int64x2_t)vandq_s8(veorq_s8(v17, *(int8x16_t *)v12), veorq_s8(v17, *(int8x16_t *)v15))), (int8x16_t)vsraq_n_u64(v13, *(uint64x2_t *)v12, 0x3FuLL), v17);
            v18 = (void *)v10[1];
            v19 = (v11 & 1) != 0 ? (__n128 *)v10[1] : (__n128 *)v5;
            v20 = (v11 & 1) != 0 ? v10[2] : 1;
            if (v11 >> 1 == v20)
              break;
            v19[v11 >> 1] = (__n128)a4;
            v11 += 2;
            *v10 = v11;
            if (++v15 == v16)
              goto LABEL_7;
          }
          v34 = (__n128)a4;
          if (((v20 >> 59) & 0xF) != 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = (__n128 *)operator new(32 * v20);
          a4 = (int8x16_t)v34;
          v21[v20] = v34;
          v22 = v21;
          v23 = v20;
          v10 = a3;
          if (v11 >= 2)
          {
            do
            {
              v24 = *v19++;
              a4 = (int8x16_t)v24;
              *v22++ = v24;
              --v23;
            }
            while (v23);
          }
          if ((v11 & 1) != 0)
          {
            operator delete(v18);
            v10 = a3;
          }
          v10[1] = (unint64_t)v21;
          v10[2] = 2 * v20;
          v13 = v32;
          v11 = (v11 | 1) + 2;
          *v10 = v11;
          ++v15;
        }
        while (v15 != v16);
      }
LABEL_7:
      ++v12;
    }
    while (v12 != v30);
    if (*(_QWORD *)v29 >= 4uLL && *(_QWORD *)a2 > 3uLL)
    {
      if ((v11 & 1) != 0)
        v26 = *v5;
      else
        v26 = (__n128 *)v5;
      v27 = 126 - 2 * __clz(v11 >> 1);
      if (v11 >= 2)
        v28 = v27;
      else
        v28 = 0;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *,false>(v26, &v26[v11 >> 1], (uint64_t)&v35, v28, 1, (__n128)a4);
      v10 = a3;
    }
  }
}

void sub_22DC26B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  void **v16;

  if ((*a16 & 1) != 0)
    operator delete(*v16);
  _Unwind_Resume(exception_object);
}

unint64_t *operations_research::Domain::RelaxIfTooComplex@<X0>(unint64_t *this@<X0>, const char *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;

  v4 = *this;
  v5 = *this >> 1;
  if ((int)v5 < 101)
  {
    *a3 = 0;
    if ((v4 & 1) == 0)
    {
      *a3 = v4;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(this + 1);
      return this;
    }
    v9 = (__int128 *)this[1];
    if (v4 < 4)
    {
      if (v4 < 2)
      {
        v10 = 0;
LABEL_16:
        *a3 = v10 + (v4 & 0xFFFFFFFFFFFFFFFELL);
        return this;
      }
      this = a3 + 1;
    }
    else
    {
      if (v4 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      this = (unint64_t *)operator new(16 * v5);
      a3[1] = (unint64_t)this;
      a3[2] = v5;
      *a3 = 1;
    }
    do
    {
      v11 = *v9++;
      *(_OWORD *)this = v11;
      this += 2;
      --v5;
    }
    while (v5);
    v10 = *a3;
    goto LABEL_16;
  }
  if (v4 <= 1)
  v6 = this + 1;
  if ((v4 & 1) != 0)
    v6 = (_QWORD *)*v6;
  v7 = (_QWORD *)*v6;
  v8 = v6[2 * v5 - 1];
  a3[1] = (unint64_t)v7;
  a3[2] = v8;
  *a3 = 2 * ((uint64_t)v7 <= v8);
  return this;
}

void operations_research::Domain::MultiplicationBy(operations_research::Domain *this@<X0>, BOOL *a2@<X2>, uint64_t a3@<X1>, unint64_t *a4@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  unint64_t v28;
  int v29;
  uint64_t i;
  unint64_t v31;
  int v32;
  int v33;
  int64_t v34;
  unint64_t v35;
  void *v37;
  int64x2_t *v38;
  unint64_t v39;
  int64x2_t *v40;
  int64x2_t *v41;
  unint64_t v42;
  int64x2_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;

  if (a2)
    *a2 = 1;
  if (!a3 || (v5 = *(_QWORD *)this, *(_QWORD *)this <= 1uLL))
  {
    *a4 = 0;
    return;
  }
  if (a3 >= 0)
    v6 = a3;
  else
    v6 = -a3;
  v46 = v6;
  v7 = __OFSUB__(v6, 1);
  if (v6 <= 1)
  {
    v44 = a3;
    *a4 = 0;
    if (a4 != (unint64_t *)this)
    {
      v26 = (__int128 *)*((_QWORD *)this + 1);
      v24 = (__int128 *)((char *)this + 8);
      v25 = v26;
      if ((v5 & 1) != 0)
        v27 = v25;
      else
        v27 = v24;
      absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Assign<absl::lts_2020_02_25::inlined_vector_internal::IteratorValueAdapter<std::allocator<operations_research::ClosedInterval>,operations_research::ClosedInterval const*>>(a4, v27, v5 >> 1);
    }
    goto LABEL_31;
  }
  v8 = (uint64_t *)((char *)this + 8);
  v9 = (uint64_t *)((char *)this + 8);
  if ((v5 & 1) != 0)
    v9 = (uint64_t *)*v8;
  v10 = 0;
  v11 = (unint64_t)v5 >> 1;
  v12 = &v9[2 * ((unint64_t)v5 >> 1)];
  do
  {
    v13 = *v9;
    v14 = v9[1];
    v9 += 2;
    v15 = v14 - v13;
    v16 = (v14 - v13) ^ v14;
    v17 = v14 ^ v13;
    v18 = (v14 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if ((v16 & v17) < 0 != v7)
      v19 = v18;
    else
      v19 = v15;
    v20 = v19 + v10;
    v21 = (v19 + v10) ^ v10;
    v22 = (v19 + v10) ^ v19;
    v10 = (v10 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
    if (((v21 & v22 & 0x8000000000000000) != 0) == v7)
      v10 = v20;
    v7 = __OFSUB__(v9, v12);
  }
  while (v9 != v12);
  if ((((v10 + v11) & ~v10 & 0x8000000000000000) != 0) != __OFSUB__(v9, v12))
    v23 = (v10 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
  else
    v23 = v10 + v11;
  if (v23 >= 101)
  {
    if (a2)
      *a2 = 0;
    operations_research::Domain::ContinuousMultiplicationBy(this, a3, a4);
    return;
  }
  v44 = a3;
  *a4 = 0;
  if ((unint64_t)v23 >= 2)
  {
    if ((unint64_t)v23 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    a4[1] = (unint64_t)operator new(16 * v23);
    a4[2] = v23;
    v28 = 1;
    *a4 = 1;
    if ((v5 & 1) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
  v28 = 0;
  if ((v5 & 1) != 0)
LABEL_37:
    v8 = (uint64_t *)*v8;
LABEL_38:
  v45 = &v8[2 * v11];
  v29 = __clz(v46) ^ 0x3F;
  do
  {
    for (i = *(int *)v8; v8[1] >= i; ++i)
    {
      if (i >= 0)
        v31 = i;
      else
        v31 = -i;
      v32 = 63 - __clz(v31);
      if (!i)
        v32 = 0;
      v33 = v32 + v29;
      if (v33 > 61)
      {
        if (i)
        {
          v34 = ((unint64_t)i >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v35 = v31 * v46;
          if (v33 <= 0x3E && v35 < v34)
          {
            if (v34 >= 0)
              v34 = v35;
            else
              v34 = -(uint64_t)v35;
          }
        }
        else
        {
          v34 = 0;
        }
      }
      else
      {
        v34 = i * v46;
      }
      v37 = (void *)a4[1];
      if ((v28 & 1) != 0)
        v38 = (int64x2_t *)a4[1];
      else
        v38 = (int64x2_t *)(a4 + 1);
      if ((v28 & 1) != 0)
        v39 = a4[2];
      else
        v39 = 1;
      if (v28 >> 1 == v39)
      {
        if (((v39 >> 59) & 0xF) != 0)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v40 = (int64x2_t *)operator new(32 * v39);
        v40[v39] = vdupq_n_s64(v34);
        v41 = v40;
        v42 = v39;
        if (v28 >= 2)
        {
          do
          {
            v43 = *v38++;
            *v41++ = v43;
            --v42;
          }
          while (v42);
        }
        if ((v28 & 1) != 0)
        {
          operator delete(v37);
          v28 = *a4;
        }
        a4[1] = (unint64_t)v40;
        a4[2] = 2 * v39;
        v28 |= 1uLL;
      }
      else
      {
        v38[v28 >> 1] = vdupq_n_s64(v34);
      }
      v28 += 2;
      *a4 = v28;
    }
    v8 += 2;
  }
  while (v8 != v45);
LABEL_31:
  if (v44 < 0)
    operations_research::Domain::NegateInPlace(a4, (const char *)a3);
}

void sub_22DC26F80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(_BYTE *)v1 & 1) != 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void operations_research::Domain::ContinuousMultiplicationBy(operations_research::Domain *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64x2_t v34;
  uint64_t v39;
  uint64x2_t v40;
  int8x16_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  float64x2x2_t v49;

  *a3 = 0;
  v5 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) == 0)
  {
    *a3 = v5;
    v6 = (uint64_t *)(a3 + 1);
    *(_OWORD *)(a3 + 1) = *(_OWORD *)((char *)this + 8);
    if (a2 >= 0)
      v7 = a2;
    else
      v7 = -a2;
LABEL_17:
    v13 = v6;
    goto LABEL_18;
  }
  v8 = (__int128 *)*((_QWORD *)this + 1);
  v9 = v5 >> 1;
  if (v5 < 4)
  {
    if (v5 < 2)
    {
      v11 = 0;
      goto LABEL_13;
    }
    v10 = a3 + 1;
  }
  else
  {
    if (v5 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v10 = operator new(16 * v9);
    a3[1] = (unint64_t)v10;
    a3[2] = v9;
    *a3 = 1;
  }
  do
  {
    v12 = *v8++;
    *v10++ = v12;
    --v9;
  }
  while (v9);
  v11 = *a3;
LABEL_13:
  v5 = v11 + (v5 & 0xFFFFFFFFFFFFFFFELL);
  *a3 = v5;
  if (a2 >= 0)
    v7 = a2;
  else
    v7 = -a2;
  v6 = (uint64_t *)(a3 + 1);
  v13 = (uint64_t *)a3[1];
  if ((v11 & 1) == 0)
    goto LABEL_17;
LABEL_18:
  if (v5 >= 2)
  {
    v14 = &v13[2 * (v5 >> 1)];
    v15 = 63 - __clz(v7);
    if (a2)
    {
      do
      {
        v17 = *v13;
        if (*v13 >= 0)
          v18 = *v13;
        else
          v18 = -v17;
        v19 = 63 - __clz(v18);
        if (!v17)
          v19 = 0;
        v20 = v19 + v15;
        if (v20 > 61)
        {
          if (v17)
          {
            v17 = ((unint64_t)v17 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            v21 = v18 * v7;
            if (v20 <= 0x3E && v21 < v17)
            {
              if (v17 >= 0)
                v17 = v21;
              else
                v17 = -(uint64_t)v21;
            }
          }
        }
        else
        {
          v17 *= v7;
        }
        v23 = v13[1];
        if (v23 >= 0)
          v24 = v13[1];
        else
          v24 = -v23;
        v25 = 63 - __clz(v24);
        *v13 = v17;
        if (v23)
          v26 = v25;
        else
          v26 = 0;
        v27 = v26 + v15;
        if (v26 + v15 <= 61)
        {
          v16 = v23 * v7;
        }
        else if (v23)
        {
          v16 = ((unint64_t)v23 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          v28 = v24 * v7;
          if (v27 <= 0x3E && v28 < v16)
          {
            if (v16 >= 0)
              v16 = v24 * v7;
            else
              v16 = -(uint64_t)v28;
          }
        }
        else
        {
          v16 = 0;
        }
        v13[1] = v16;
        v13 += 2;
      }
      while (v13 != v14);
    }
    else
    {
      v30 = ((v5 >> 1) - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v30)
      {
        v31 = v30 + 1;
        v32 = (v30 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v33 = &v13[2 * v32];
        v34 = vdupq_n_s64(v7);
        __asm { FMOV            V1.2D, #2.0 }
        v39 = v32;
        do
        {
          v49 = vld2q_f64((const double *)v13);
          v40 = (uint64x2_t)vabsq_s64((int64x2_t)v49.val[0]);
          *(_QWORD *)&v49.val[0].f64[0] *= v34.i64[0];
          *(_QWORD *)&v49.val[0].f64[1] *= v34.i64[1];
          v49.val[0] = (float64x2_t)vandq_s8((int8x16_t)v49.val[0], (int8x16_t)vcgtq_u64(_Q1, v40));
          v41.i64[0] = *(_QWORD *)&v49.val[1].f64[0] * v34.i64[0];
          v41.i64[1] = *(_QWORD *)&v49.val[1].f64[1] * v34.i64[1];
          v49.val[1] = (float64x2_t)vandq_s8(v41, (int8x16_t)vcgtq_u64(_Q1, (uint64x2_t)vabsq_s64((int64x2_t)v49.val[1])));
          vst2q_f64((double *)v13, v49);
          v13 += 4;
          v39 -= 2;
        }
        while (v39);
        if (v31 == v32)
          goto LABEL_71;
      }
      else
      {
        v33 = v13;
      }
      do
      {
        v42 = *v33;
        v43 = v33[1];
        if (*v33 >= 0)
          v44 = *v33;
        else
          v44 = -v42;
        v45 = v42 * v7;
        if (v44 >> 62)
          v45 = 0;
        if (v43 >= 0)
          v46 = v33[1];
        else
          v46 = -v43;
        v47 = v43 * v7;
        if (v46 >> 62)
          v47 = 0;
        *v33 = v45;
        v33[1] = v47;
        v33 += 2;
      }
      while (v33 != v14);
    }
  }
LABEL_71:
  if (a2 < 0)
    operations_research::Domain::NegateInPlace(a3, v48);
}

void sub_22DC27250(_Unwind_Exception *exception_object)
{
  _BYTE *v1;
  void **v2;

  if ((*v1 & 1) != 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void operations_research::Domain::ContinuousMultiplicationBy(operations_research::Domain *this@<X0>, const operations_research::Domain *a2@<X1>, unint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  unint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  __n128 *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  __n128 *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t *v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t *v52;
  __n128 *v53;
  unint64_t v54;
  __n128 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t *v61;
  uint64_t *v62;
  char v63;

  v4 = a3;
  *a3 = 0;
  v7 = *(_QWORD *)this;
  v5 = (uint64_t *)((char *)this + 8);
  v6 = v7;
  if ((v7 & 1) != 0)
    v5 = (uint64_t *)*v5;
  if (v6 >= 2)
  {
    v8 = 0;
    v58 = &v5[2 * (v6 >> 1)];
    v59 = (uint64_t *)((char *)a2 + 8);
    v12 = v4 + 1;
    v61 = v4 + 1;
    do
    {
      v13 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 1) != 0)
        v14 = (uint64_t *)*((_QWORD *)a2 + 1);
      else
        v14 = v59;
      if (v13 >= 2)
      {
        v15 = &v14[2 * (v13 >> 1)];
        v62 = v15;
        do
        {
          while (1)
          {
            v17 = *v14;
            v18 = *v14 >= 0 ? *v14 : -v17;
            v19 = 63 - __clz(v18);
            v20 = *v5;
            v21 = v17 ? v19 : 0;
            v22 = v20 >= 0 ? *v5 : -v20;
            v23 = 63 - __clz(v22);
            v24 = v20 ? v23 : 0;
            if (v21 + v24 > 61)
            {
              v25 = 0;
              if (v20 && v17)
              {
                v25 = ((v17 ^ (unint64_t)v20) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                v26 = v18 * v22;
                if ((v21 + v24) <= 0x3E && v26 < v25)
                {
                  if (v25 >= 0)
                    v25 = v18 * v22;
                  else
                    v25 = -(uint64_t)v26;
                }
              }
            }
            else
            {
              v25 = v17 * v20;
            }
            v28 = v14[1];
            v29 = v28 >= 0 ? v14[1] : -v28;
            v30 = 63 - __clz(v29);
            v31 = v5[1];
            v32 = v28 ? v30 : 0;
            v33 = v31 >= 0 ? v5[1] : -v31;
            v34 = 63 - __clz(v33);
            v35 = v31 ? v34 : 0;
            if (v32 + v35 > 61)
            {
              v36 = 0;
              if (v31)
              {
                if (v28)
                {
                  v36 = ((v28 ^ (unint64_t)v31) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                  if ((v32 + v35) <= 0x3E && v29 * v33 < v36)
                  {
                    if (v36 >= 0)
                      v36 = v29 * v33;
                    else
                      v36 = -(uint64_t)(v29 * v33);
                  }
                }
              }
            }
            else
            {
              v36 = v28 * v31;
            }
            v37 = v32 + v24;
            if (v37 > 61)
            {
              v38 = 0;
              if (v20)
              {
                if (v28)
                {
                  v38 = ((v28 ^ (unint64_t)v20) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                  if (v37 <= 0x3E)
                  {
                    v56 = v29 * v22;
                    if (v56 < v38)
                    {
                      if (v38 >= 0)
                        v38 = v56;
                      else
                        v38 = -(uint64_t)v56;
                    }
                  }
                }
              }
            }
            else
            {
              v38 = v28 * v20;
            }
            v39 = v35 + v21;
            if (v35 + v21 > 61)
            {
              v40 = 0;
              if (v17)
              {
                if (v31)
                {
                  v40 = ((v31 ^ (unint64_t)v17) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                  if (v39 <= 0x3E)
                  {
                    v57 = v33 * v18;
                    if (v57 < v40)
                    {
                      if (v40 >= 0)
                        v40 = v57;
                      else
                        v40 = -(uint64_t)v57;
                    }
                  }
                }
              }
            }
            else
            {
              v40 = v31 * v17;
            }
            if (v36 >= v25)
              v41 = v25;
            else
              v41 = v36;
            if (v38 < v41)
              v41 = v38;
            if (v40 >= v41)
              v42 = v41;
            else
              v42 = v40;
            if (v25 <= v36)
              v25 = v36;
            if (v25 <= v38)
              v43 = v38;
            else
              v43 = v25;
            if (v25 < v38)
              v25 = v38;
            v44 = v43 >= v40 ? v25 : v40;
            v45 = (void *)v4[1];
            v46 = (v8 & 1) != 0 ? (__n128 *)v4[1] : (__n128 *)v12;
            v47 = (v8 & 1) != 0 ? v4[2] : 1;
            if (v8 >> 1 == v47)
              break;
            v16 = &v46[v8 >> 1];
            v16->n128_u64[0] = v42;
            v16->n128_u64[1] = v44;
            v8 += 2;
            *v4 = v8;
            v14 += 2;
            if (v14 == v15)
              goto LABEL_13;
          }
          if (((v47 >> 59) & 0xF) != 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v48 = v5;
          v49 = v4;
          v50 = operator new(32 * v47);
          v51 = v50;
          v52 = (uint64_t *)&v50[v47];
          *v52 = v42;
          v52[1] = v44;
          if (v8 >= 2)
          {
            v53 = (__n128 *)v50;
            v54 = v47;
            do
            {
              v55 = *v46++;
              a4 = v55;
              *v53++ = v55;
              --v54;
            }
            while (v54);
          }
          if ((v8 & 1) != 0)
            operator delete(v45);
          v49[1] = (unint64_t)v51;
          v49[2] = 2 * v47;
          v4 = v49;
          v5 = v48;
          v12 = v61;
          v15 = v62;
          v8 = (v8 | 1) + 2;
          *v4 = v8;
          v14 += 2;
        }
        while (v14 != v62);
      }
LABEL_13:
      v5 += 2;
    }
    while (v5 != v58);
  }
  else
  {
    v8 = 0;
  }
  if ((v8 & 1) != 0)
    v9 = (__n128 *)v4[1];
  else
    v9 = (__n128 *)(v4 + 1);
  v10 = 126 - 2 * __clz(v8 >> 1);
  if (v8 >= 2)
    v11 = v10;
  else
    v11 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *,false>(v9, &v9[v8 >> 1], (uint64_t)&v63, v11, 1, a4);
}

void sub_22DC275F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if ((*(_QWORD *)v15 & 1) != 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(exception_object);
}

void operations_research::Domain::DivisionBy(operations_research::Domain *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18[2];
  int v19;
  uint64_t *v20;

  v18[0] = a2;
  v19 = 0;
  if (!a2)
  {
    v20 = (uint64_t *)google::MakeCheckOpString<long long,int>((int)v18, (int)&v19, "coeff != 0");
    if (v20)
    {
      google::LogMessageFatal::LogMessageFatal(v18, (google::glog_internal_namespace_ *)"./ortools/util/sorted_interval_list.cc", 421, &v20);
      google::LogMessage::stream((google::LogMessage *)v18);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v18);
    }
  }
  *a3 = 0;
  v6 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) == 0)
  {
    *a3 = v6;
    v7 = (uint64_t *)(a3 + 1);
    *(_OWORD *)(a3 + 1) = *(_OWORD *)((char *)this + 8);
    if (a2 >= 0)
      v8 = a2;
    else
      v8 = -a2;
LABEL_18:
    v14 = v7;
    goto LABEL_19;
  }
  v9 = (__int128 *)*((_QWORD *)this + 1);
  v10 = v6 >> 1;
  if (v6 < 4)
  {
    if (v6 < 2)
    {
      v12 = 0;
      goto LABEL_14;
    }
    v11 = a3 + 1;
  }
  else
  {
    if (v6 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = operator new(16 * v10);
    a3[1] = (unint64_t)v11;
    a3[2] = v10;
    *a3 = 1;
  }
  do
  {
    v13 = *v9++;
    *v11++ = v13;
    --v10;
  }
  while (v10);
  v12 = *a3;
LABEL_14:
  v6 = v12 + (v6 & 0xFFFFFFFFFFFFFFFELL);
  *a3 = v6;
  if (a2 >= 0)
    v8 = a2;
  else
    v8 = -a2;
  v7 = (uint64_t *)(a3 + 1);
  v14 = (uint64_t *)a3[1];
  if ((v12 & 1) == 0)
    goto LABEL_18;
LABEL_19:
  if (v6 >= 2)
  {
    v15 = &v14[2 * (v6 >> 1)];
    do
    {
      v16 = v14[1] / v8;
      *v14 /= v8;
      v14[1] = v16;
      v14 += 2;
    }
    while (v14 != v15);
  }
  if (a2 < 0)
    operations_research::Domain::NegateInPlace(a3, v17);
}

void sub_22DC2779C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&a9);
}

void sub_22DC277A4(_Unwind_Exception *exception_object)
{
  _BYTE *v1;
  void **v2;

  if ((*v1 & 1) != 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void operations_research::Domain::InverseMultiplicationBy(operations_research::Domain *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t **v22;
  _QWORD *v23;
  int v24;
  const char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a2)
  {
    *a3 = 0;
    v5 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 1) == 0)
    {
      *a3 = v5;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)((char *)this + 8);
LABEL_28:
      if (a2 >= 0)
        v21 = a2;
      else
        v21 = -a2;
      v22 = (unint64_t **)(a3 + 1);
      if ((v5 & 1) != 0)
        v23 = (_QWORD *)a3[1];
      else
        v23 = a3 + 1;
      if (v5 < 2)
      {
        v24 = 0;
LABEL_36:
        absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Resize<absl::lts_2020_02_25::inlined_vector_internal::DefaultValueAdapter<std::allocator<operations_research::ClosedInterval>>>(a3, v24);
        v26 = *a3;
        if ((*a3 & 1) == 0 || (v27 = v26 >> 1, v26 >> 1 == a3[2]))
        {
LABEL_64:
          if ((a2 & 0x8000000000000000) == 0)
            return;
LABEL_67:
          operations_research::Domain::NegateInPlace(a3, v25);
          return;
        }
        v28 = (char *)a3[1];
        if (v26 < 4)
        {
          if (v26 <= 1)
          {
            operator delete((void *)a3[1]);
            goto LABEL_66;
          }
          v30 = 0;
          v31 = 0;
          v29 = (char *)(a3 + 1);
        }
        else
        {
          if (v26 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v29 = (char *)operator new(16 * v27);
          v30 = v29;
          v31 = v27;
        }
        v40 = 0;
        do
        {
          *(_OWORD *)&v29[v40] = *(_OWORD *)&v28[v40];
          v40 += 16;
          --v27;
        }
        while (v27);
        operator delete(v28);
        if (v30)
        {
          a3[1] = (unint64_t)v30;
          a3[2] = v31;
          goto LABEL_64;
        }
LABEL_66:
        *a3 &= ~1uLL;
        if ((a2 & 0x8000000000000000) == 0)
          return;
        goto LABEL_67;
      }
      v24 = 0;
      v32 = &v23[2 * (v5 >> 1)];
      while (1)
      {
        v37 = *v23 / v21;
        if (v37 * v21 < *v23)
          ++v37;
        v38 = v23[1] / v21 - (v23[1] / v21 * v21 > v23[1]);
        if (v37 > v38)
          goto LABEL_46;
        v39 = (v24 - 1);
        if (v24 < 1)
        {
          v33 = v24;
          v34 = *v22;
          if ((v5 & 1) == 0)
            v34 = a3 + 1;
        }
        else if ((v5 & 1) != 0)
        {
          v34 = *v22;
          if (v37 == (*v22)[2 * v39 + 1] + 1)
          {
LABEL_55:
            v36 = (uint64_t *)&v34[2 * v39 + 1];
            goto LABEL_45;
          }
          v33 = v24;
        }
        else
        {
          v34 = a3 + 1;
          if ((unint64_t *)v37 == (unint64_t *)((char *)v22[2 * v39 + 1] + 1))
            goto LABEL_55;
          v33 = v24;
          v34 = a3 + 1;
        }
        ++v24;
        v35 = (uint64_t *)&v34[2 * v33];
        *v35 = v37;
        v36 = v35 + 1;
LABEL_45:
        *v36 = v38;
LABEL_46:
        v23 += 2;
        if (v23 == v32)
          goto LABEL_36;
      }
    }
    v16 = (__int128 *)*((_QWORD *)this + 1);
    v17 = v5 >> 1;
    if (v5 < 4)
    {
      if (v5 < 2)
      {
        v19 = 0;
LABEL_27:
        v5 = v19 + (v5 & 0xFFFFFFFFFFFFFFFELL);
        *a3 = v5;
        goto LABEL_28;
      }
      v18 = a3 + 1;
    }
    else
    {
      if (v5 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(16 * v17);
      a3[1] = (unint64_t)v18;
      a3[2] = v17;
      *a3 = 1;
    }
    do
    {
      v20 = *v16++;
      *v18++ = v20;
      --v17;
    }
    while (v17);
    v19 = *a3;
    goto LABEL_27;
  }
  v8 = *(_QWORD *)this;
  v6 = (_QWORD *)((char *)this + 8);
  v7 = v8;
  v9 = v6;
  if ((v8 & 1) != 0)
    v9 = (_QWORD *)*v6;
  v10 = v7 >> 1;
  if (v7 >= 2)
  {
    do
    {
      v11 = v10 >> 1;
      v12 = &v9[2 * (v10 >> 1)];
      v14 = *v12;
      v13 = v12 + 2;
      v10 += ~(v10 >> 1);
      if (v14 > 0)
        v10 = v11;
      else
        v9 = v13;
    }
    while (v10);
  }
  else
  {
    v9 += 2 * v10;
  }
  if ((v7 & 1) != 0)
    v6 = (_QWORD *)*v6;
  if (v9 == v6 || (*(v9 - 1) & 0x8000000000000000) != 0)
  {
    v15 = 0;
  }
  else
  {
    *(_OWORD *)(a3 + 1) = xmmword_22DCF8AD0;
    v15 = 2;
  }
  *a3 = v15;
}

void sub_22DC27AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(_BYTE *)v1 & 1) != 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void operations_research::Domain::SimplifyUsingImpliedDomain(operations_research::Domain *this@<X0>, const operations_research::Domain *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 *v19;
  unint64_t v20;
  _OWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  BOOL v36;
  unint64_t v37;
  void *v38;
  __int128 *v39;
  unint64_t v40;
  unint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  _OWORD *v46;
  unint64_t v47;
  __int128 v48;
  __int128 *v49;
  _QWORD *v51;
  _QWORD *v52;
  __int128 *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  void *__p;
  unint64_t v58;

  *a3 = 0;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= 2uLL)
  {
    v4 = a3;
    v6 = (_QWORD *)((char *)this + 8);
    v5 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 1) != 0)
      v6 = (_QWORD *)*v6;
    if (v5 >= 2)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = (_QWORD *)((char *)a2 + 8);
      v13 = (__int128 *)(v4 + 1);
      v14 = &v6[2 * (v5 >> 1)];
      v53 = (__int128 *)(v4 + 1);
      v54 = v4;
      v51 = v14;
      v52 = v12;
      while (1)
      {
        v16 = (_QWORD *)*v6;
        v15 = v6[1];
        v17 = v10;
        if ((v7 & 1) != 0)
        {
          v18 = (_QWORD *)*v12;
          if ((v3 & 1) == 0)
            v18 = v12;
          if (v18[2 * v10] < (uint64_t)v16)
          {
            __p = (void *)v4[1];
            v58 = v11 & 1;
            if ((v11 & 1) != 0)
              v19 = (__int128 *)v4[1];
            else
              v19 = v13;
            if ((v11 & 1) != 0)
              v20 = v4[2];
            else
              v20 = 1;
            if (v11 >> 1 == v20)
            {
              v55 = v3;
              v56 = v11;
              if (((v20 >> 59) & 0xF) != 0)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v21 = operator new(32 * v20);
              v22 = &v21[v20];
              *v22 = v9;
              v22[1] = v8;
              v3 = v55;
              v23 = v56;
              v4 = v54;
              if (v56 >= 2)
              {
                v24 = v21;
                v25 = v20;
                do
                {
                  v26 = *v19++;
                  *v24++ = v26;
                  --v25;
                }
                while (v25);
              }
              if (v58)
              {
                v27 = v21;
                operator delete(__p);
                v21 = v27;
                v23 = v56;
                v4 = v54;
                v3 = *(_QWORD *)a2;
              }
              v4[1] = (unint64_t)v21;
              v4[2] = 2 * v20;
              v11 = v23 | 1;
              v12 = v52;
              v13 = v53;
              v14 = v51;
            }
            else
            {
              v29 = &v19[v11 >> 1];
              *(_QWORD *)v29 = v9;
              *((_QWORD *)v29 + 1) = v8;
            }
            v7 = 0;
            v11 += 2;
            *v4 = v11;
            v28 = v3 >> 1;
            if (v3 >> 1 <= v10)
              goto LABEL_55;
LABEL_30:
            v30 = (_QWORD *)*v12;
            if ((v3 & 1) == 0)
              v30 = v12;
            v31 = &v30[2 * v10 + 1];
            do
            {
              v32 = *(v31 - 1);
              v33 = *v31;
              if (*v31 >= v15)
                v34 = v15;
              else
                v34 = *v31;
              if ((uint64_t)v16 <= v32)
                v35 = (_QWORD *)*(v31 - 1);
              else
                v35 = v16;
              if ((v7 & 1) != 0)
                v35 = v9;
              v36 = v33 >= (uint64_t)v16 && v32 <= v15;
              if (v36)
                v9 = v35;
              if (v36)
                v8 = v34;
              if (v36)
                v7 = 1;
              if (v33 > v15)
                break;
              v31 += 2;
              ++v17;
              ++v10;
            }
            while (v28 > v17);
            goto LABEL_55;
          }
          v7 = 1;
          v28 = v3 >> 1;
          if (v3 >> 1 > v10)
            goto LABEL_30;
        }
        else
        {
          v7 = 0;
          v28 = v3 >> 1;
          if (v3 >> 1 > v10)
            goto LABEL_30;
        }
LABEL_55:
        if (v28 != v17)
        {
          v6 += 2;
          if (v6 != v14)
            continue;
        }
        if ((v7 & 1) != 0)
        {
          v37 = v11 & 1;
          v38 = (void *)v4[1];
          if ((v11 & 1) != 0)
            v39 = (__int128 *)v4[1];
          else
            v39 = v13;
          if ((v11 & 1) != 0)
            v40 = v4[2];
          else
            v40 = 1;
          if (v11 >> 1 == v40)
          {
            if (((v40 >> 59) & 0xF) != 0)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v41 = v11;
            v42 = operator new(32 * v40);
            v43 = v42;
            v44 = &v42[v40];
            *v44 = v9;
            v44[1] = v8;
            v45 = v41;
            v4 = v54;
            if (v41 >= 2)
            {
              v46 = v42;
              v47 = v40;
              do
              {
                v48 = *v39++;
                *v46++ = v48;
                --v47;
              }
              while (v47);
            }
            if (v37)
            {
              operator delete(v38);
              v45 = v41;
              v4 = v54;
            }
            v4[1] = (unint64_t)v43;
            v4[2] = 2 * v40;
            v11 = v45 | 1;
          }
          else
          {
            v49 = &v39[v11 >> 1];
            *(_QWORD *)v49 = v9;
            *((_QWORD *)v49 + 1) = v8;
          }
          *v4 = v11 + 2;
        }
        return;
      }
    }
  }
}

void sub_22DC27DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;
  uint64_t v19;

  if (v19)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::Domain::operator<(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *j;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *i;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1 >> 1;
  v3 = *a2;
  v4 = (unint64_t)*a2 >> 1;
  if (v4 >= v2)
    v5 = *a1 >> 1;
  else
    v5 = (unint64_t)*a2 >> 1;
  if ((int)v5 < 1)
    return v2 < v4;
  v8 = (_QWORD *)a2[1];
  v6 = a2 + 1;
  v7 = v8;
  if ((v3 & 1) != 0)
    v9 = v7;
  else
    v9 = v6;
  if ((*a1 & 1) != 0)
  {
    v5 = v5;
    v14 = (_QWORD *)(a1[1] + 8);
    for (i = v9 + 1; ; i += 2)
    {
      v16 = *(v14 - 1);
      v17 = *(i - 1);
      if (v16 < v17)
        break;
      if (v16 > v17)
        return 0;
      if (*v14 < *i)
        return 1;
      if (*v14 > *i)
        return 0;
      v14 += 2;
      if (!--v5)
        return v2 < v4;
    }
  }
  else
  {
    v5 = v5;
    v10 = a1 + 2;
    for (j = v9 + 1; ; j += 2)
    {
      v12 = *(v10 - 1);
      v13 = *(j - 1);
      if (v12 < v13)
        break;
      if (v12 > v13)
        return 0;
      if (*v10 < *j)
        break;
      if (*v10 > *j)
        return 0;
      v10 += 2;
      if (!--v5)
        return v2 < v4;
    }
  }
  return 1;
}

void operations_research::Domain::ToString(operations_research::Domain *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void **v10;
  std::string::size_type v11;
  void *__p[2];
  unsigned __int8 v13;
  uint64_t v14;
  BOOL (*v15)(uint64_t, uint64_t, unsigned int, char *);
  uint64_t v16;
  BOOL (*v17)(uint64_t, uint64_t, unsigned int, char *);
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(_QWORD *)this;
  v6 = (uint64_t *)*((_QWORD *)this + 1);
  v4 = (char *)this + 8;
  v5 = v6;
  if ((v3 & 1) != 0)
    v7 = v5;
  else
    v7 = (uint64_t *)v4;
  if (v3 >= 2)
  {
    v8 = &v7[2 * (v3 >> 1)];
    do
    {
      v9 = v7[1];
      if (*v7 == v9)
      {
        v14 = *v7;
        v15 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
        absl::lts_2020_02_25::str_format_internal::FormatPack("[%d]", 4, (uint64_t)&v14, 1, (uint64_t)__p);
      }
      else
      {
        v14 = *v7;
        v15 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
        v16 = v9;
        v17 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
        absl::lts_2020_02_25::str_format_internal::FormatPack("[%d,%d]", 7, (uint64_t)&v14, 2, (uint64_t)__p);
      }
      if ((v13 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if ((v13 & 0x80u) == 0)
        v11 = v13;
      else
        v11 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v10, v11);
      if ((char)v13 < 0)
        operator delete(__p[0]);
      v7 += 2;
    }
    while (v7 != v8);
  }
}

void sub_22DC28004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::SumOfKMinValueInDomain(operations_research *this, const operations_research::Domain *a2)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)this;
  v5 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 8;
  v4 = v5;
  if ((v2 & 1) != 0)
    v6 = v4;
  else
    v6 = v3;
  if (v2 < 2)
    return 0;
  result = 0;
  v8 = 0;
  v9 = 16 * (v2 >> 1);
  v10 = (uint64_t *)(v6 + 8);
  do
  {
    if (v8 >= (int)a2)
      break;
    v11 = v10 + 2;
    v12 = *v10;
    v13 = *(v10 - 1);
    v14 = (int)v13;
    if (v12 >= (int)v13)
    {
      v15 = ((v13 << 32) + 0x100000000) >> 32;
      if (v12 <= v15 - 1)
        v12 = v15 - 1;
      v16 = v12 - v15;
      if (v16 + 1 < (unint64_t)(~v8 + (_DWORD)a2))
        v17 = v16 + 1;
      else
        v17 = (~v8 + (_DWORD)a2);
      v8 += v17 + 1;
      result += v14
              + v17
              + v17 * v14
              + ((__int128)((unint64_t)v17 * (unsigned __int128)(unint64_t)(v17 - 1)) >> 1);
    }
    v10 = v11;
    v9 -= 16;
  }
  while (v9);
  return result;
}

uint64_t operations_research::SumOfKMaxValueInDomain(operations_research *this, const operations_research::Domain *a2)
{
  int v2;
  void **v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void **v16;

  v2 = (int)a2;
  operations_research::Domain::Negation(this, (const char *)a2, &v15);
  if ((v15 & 1) != 0)
    v3 = v16;
  else
    v3 = (void **)&v16;
  if (v15 >= 2)
  {
    v4 = 0;
    v6 = 0;
    v7 = 16 * (v15 >> 1);
    v8 = (uint64_t *)(v3 + 1);
    do
    {
      if (v6 >= v2)
        break;
      v10 = *(v8 - 1);
      v9 = *v8;
      v11 = (int)v10;
      if (*v8 >= (int)v10)
      {
        v12 = ((v10 << 32) + 0x100000000) >> 32;
        if (v9 <= v12 - 1)
          v9 = v12 - 1;
        v13 = v9 - v12;
        if (v13 + 1 < (unint64_t)(~v6 + v2))
          v14 = v13 + 1;
        else
          v14 = (~v6 + v2);
        v6 += v14 + 1;
        v4 += v11
            + v14
            + v14 * v11
            + ((__int128)((unint64_t)v14 * (unsigned __int128)(unint64_t)(v14 - 1)) >> 1);
      }
      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  else
  {
    v4 = 0;
  }
  if ((v15 & 1) != 0)
    operator delete(v16);
  return -v4;
}

void absl::lts_2020_02_25::inlined_vector_internal::Storage<operations_research::ClosedInterval,1ul,std::allocator<operations_research::ClosedInterval>>::Resize<absl::lts_2020_02_25::inlined_vector_internal::DefaultValueAdapter<std::allocator<operations_research::ClosedInterval>>>(unint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;

  v5 = (__int128 *)(a1 + 1);
  v4 = *a1;
  if ((*a1 & 1) == 0)
  {
    v6 = 1;
    v7 = v4 >> 1;
    if (a2 <= 1)
      goto LABEL_3;
LABEL_7:
    if (2 * v6 <= a2)
      v10 = a2;
    else
      v10 = 2 * v6;
    if (v10 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v8 = (__int128 *)operator new(16 * v10);
    v9 = v7;
    v11 = v8;
    v12 = a2 - v7;
    if (a2 == v7)
      goto LABEL_13;
    goto LABEL_12;
  }
  v5 = (__int128 *)a1[1];
  v6 = a1[2];
  v7 = v4 >> 1;
  if (v6 < a2)
    goto LABEL_7;
LABEL_3:
  if (a2 <= v7)
    goto LABEL_21;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = v5;
  v12 = a2 - v7;
  if (a2 != v7)
LABEL_12:
    bzero(&v11[v7], 16 * v12);
LABEL_13:
  if (v9)
  {
    v13 = v8;
    do
    {
      v14 = *v5++;
      *v13++ = v14;
      --v9;
    }
    while (v9);
    v4 = *a1;
  }
  else
  {
    v4 = *a1;
    if (!v8)
      goto LABEL_21;
  }
  if ((v4 & 1) != 0)
  {
    operator delete((void *)a1[1]);
    v4 = *a1;
  }
  a1[1] = (unint64_t)v8;
  a1[2] = v10;
  LOBYTE(v4) = v4 | 1;
LABEL_21:
  *a1 = v4 & 1 | (2 * a2);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *,false>(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 *v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  int64_t v25;
  int64_t v26;
  int64_t v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 *v31;
  __n128 *v32;
  __n128 *v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  __n128 *v45;
  __n128 *v46;
  int64_t v47;
  int64_t v48;
  __n128 *v49;
  int64_t v50;
  int64_t v51;
  __n128 *v52;
  BOOL v53;
  __n128 v54;
  int64_t v55;
  unint64_t n128_u64;
  __n128 *v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  int64_t v61;
  __n128 *v62;
  __n128 *v63;
  int64_t v64;
  __n128 *v65;
  int64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  __n128 *v70;
  int64_t v71;
  __n128 *v72;
  BOOL v74;
  uint64_t v75;
  __n128 *v76;
  __n128 *v77;
  __n128 *v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 *v83;
  int64_t v84;
  unint64_t v85;
  __n128 *v86;
  int64_t v87;
  __n128 *v88;
  __n128 v89;
  __n128 v90;
  __n128 v91;
  __n128 v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  __n128 v107;
  __n128 v108;
  __n128 v109;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  int64_t v8;
  __n128 v9;
  __n128 *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __n128 *v29;
  uint64_t v30;
  int v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v11 = a2[-1].n128_i64[0];
      v10 = a2 - 1;
      if (v11 < (int64_t)a1->n128_u64[0])
        goto LABEL_10;
      return 1;
    case 3:
      v12 = (__int128 *)&a1[1];
      v13 = a1[1].n128_i64[0];
      v15 = a2[-1].n128_i64[0];
      v10 = a2 - 1;
      v14 = v15;
      if (v13 >= (int64_t)a1->n128_u64[0])
      {
        if (v14 < v13)
        {
          v25 = *v12;
          *v12 = (__int128)*v10;
          *v10 = (__n128)v25;
          if ((int64_t)a1[1].n128_u64[0] < (int64_t)a1->n128_u64[0])
          {
LABEL_46:
            v41 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v41;
            return 1;
          }
        }
      }
      else
      {
        if (v14 < v13)
        {
LABEL_10:
          v16 = *a1;
          *a1 = *v10;
LABEL_11:
          *v10 = v16;
          return 1;
        }
        v37 = (__int128)*a1;
        *a1 = (__n128)*v12;
        *v12 = v37;
        if ((int64_t)v10->n128_u64[0] < (int64_t)a1[1].n128_u64[0])
        {
          v16 = (__n128)*v12;
          *v12 = (__int128)*v10;
          goto LABEL_11;
        }
      }
      return 1;
    case 4:
      v12 = (__int128 *)&a1[1];
      v17 = a1[1].n128_i64[0];
      v18 = (__int128 *)&a1[2];
      v19 = a1[2].n128_i64[0];
      v20 = a2 - 1;
      v21 = a1->n128_u64[0];
      if (v17 >= (int64_t)a1->n128_u64[0])
      {
        if (v19 < v17)
        {
          v26 = *v12;
          *v12 = *v18;
          *v18 = v26;
          if (*(_QWORD *)v12 < v21)
          {
            v27 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v27;
          }
        }
      }
      else
      {
        if (v19 >= v17)
        {
          v38 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *v12 = v38;
          if (v19 >= (int64_t)a1[1].n128_u64[0])
            goto LABEL_43;
          v22 = *v12;
          *v12 = *v18;
        }
        else
        {
          v22 = (__int128)*a1;
          *a1 = (__n128)*v18;
        }
        *v18 = v22;
      }
LABEL_43:
      if ((int64_t)v20->n128_u64[0] < *(_QWORD *)v18)
      {
        v39 = (__n128)*v18;
        *v18 = (__int128)*v20;
        *v20 = v39;
        if (*(_QWORD *)v18 < *(_QWORD *)v12)
        {
          v40 = *v12;
          *v12 = *v18;
          *v18 = v40;
          if ((int64_t)a1[1].n128_u64[0] < (int64_t)a1->n128_u64[0])
            goto LABEL_46;
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *>(a1, a1 + 1, (uint64_t *)&a1[2], (__n128 *)a1[3].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    default:
      v4 = a1 + 2;
      v5 = a1[2].n128_i64[0];
      v6 = a1 + 1;
      v7 = a1[1].n128_i64[0];
      v8 = a1->n128_u64[0];
      if (v7 >= (int64_t)a1->n128_u64[0])
      {
        if (v5 < v7)
        {
          v23 = *v6;
          *v6 = *v4;
          *v4 = v23;
          if ((int64_t)v6->n128_u64[0] < v8)
          {
            v24 = *a1;
            *a1 = *v6;
            *v6 = v24;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          v28 = *a1;
          *a1 = *v6;
          *v6 = v28;
          if (v5 >= (int64_t)a1[1].n128_u64[0])
            goto LABEL_28;
          v9 = *v6;
          *v6 = *v4;
        }
        else
        {
          v9 = *a1;
          *a1 = *v4;
        }
        *v4 = v9;
      }
LABEL_28:
      v29 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v30 = 0;
      v31 = 0;
      while (1)
      {
        v32 = v29->n128_u64[0];
        if ((int64_t)v29->n128_u64[0] < (int64_t)v4->n128_u64[0])
          break;
LABEL_31:
        v4 = v29;
        v30 += 16;
        if (++v29 == a2)
          return 1;
      }
      v33 = v29->n128_i64[1];
      v34 = v30;
      do
      {
        *(__n128 *)((char *)a1 + v34 + 48) = *(__n128 *)((char *)a1 + v34 + 32);
        if (v34 == -32)
        {
          a1->n128_u64[0] = v32;
          a1->n128_u64[1] = v33;
          if (++v31 != 8)
            goto LABEL_31;
          return &v29[1] == a2;
        }
        v35 = *(uint64_t *)((char *)a1[1].n128_i64 + v34);
        v34 -= 16;
      }
      while (v32 < v35);
      v36 = (uint64_t)a1 + v34;
      *(_QWORD *)(v36 + 48) = v32;
      *(_QWORD *)(v36 + 56) = v33;
      if (++v31 != 8)
        goto LABEL_31;
      return &v29[1] == a2;
  }
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *>(__n128 *a1, __n128 *a2, uint64_t *a3, _OWORD *a4, _OWORD *a5, __n128 result)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2->n128_u64[0];
  v7 = *a3;
  if ((int64_t)a2->n128_u64[0] >= (int64_t)a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if ((int64_t)a2->n128_u64[0] < (int64_t)a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < (int64_t)a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < (int64_t)a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if ((int64_t)a2->n128_u64[0] < (int64_t)a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    result = *(__n128 *)a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_QWORD *)a4 < *a3)
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      if (*a3 < (int64_t)a2->n128_u64[0])
      {
        result = *a2;
        *a2 = *(__n128 *)a3;
        *(__n128 *)a3 = result;
        if ((int64_t)a2->n128_u64[0] < (int64_t)a1->n128_u64[0])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::ClosedInterval *,operations_research::ClosedInterval *>(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;

  if (a1 == a2)
    return a3;
  v3 = a2 - a1;
  v4 = (a2 - a1) >> 4;
  if (a2 - a1 >= 17 && (unint64_t)v3 >= 0x20)
  {
    v35 = (unint64_t)(v4 - 2) >> 1;
    v36 = v35;
    do
    {
      if (v35 >= v36)
      {
        v37 = (2 * v36) | 1;
        v38 = (uint64_t *)&a1[16 * v37];
        if (2 * v36 + 2 >= v4)
        {
          v41 = (uint64_t *)&a1[16 * v36];
          v42 = *v41;
          if (*v38 >= *v41)
            goto LABEL_69;
        }
        else
        {
          v39 = v38[2];
          v40 = *v38 < v39;
          if (*v38 > v39)
            v39 = *v38;
          if (v40)
          {
            v38 += 2;
            v37 = 2 * v36 + 2;
          }
          v41 = (uint64_t *)&a1[16 * v36];
          v42 = *v41;
          if (v39 >= *v41)
          {
LABEL_69:
            v43 = v41[1];
            while (1)
            {
              v46 = v41;
              v41 = v38;
              *(_OWORD *)v46 = *(_OWORD *)v38;
              if (v35 < v37)
                break;
              v47 = (2 * v37) | 1;
              v38 = (uint64_t *)&a1[16 * v47];
              v37 = 2 * v37 + 2;
              if (v37 < v4)
              {
                v44 = *v38;
                v45 = v38[2];
                if (*v38 <= v45)
                  v44 = v38[2];
                if (*v38 >= v45)
                  v37 = v47;
                else
                  v38 += 2;
                if (v44 < v42)
                  break;
              }
              else
              {
                v37 = v47;
                if (*v38 < v42)
                  break;
              }
            }
            *v41 = v42;
            v41[1] = v43;
          }
        }
      }
      v15 = v36-- <= 0;
    }
    while (!v15);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 32)
    {
      v6 = (__int128 *)a2;
      do
      {
        if (*(_QWORD *)v6 < *(_QWORD *)a1)
        {
          v7 = *v6;
          *v6 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v7;
        }
        ++v6;
      }
      while (v6 != (__int128 *)a3);
LABEL_37:
      v5 = a3;
      goto LABEL_38;
    }
    v8 = (uint64_t *)(a1 + 32);
    v9 = (__int128 *)a2;
    while (1)
    {
      if (*(_QWORD *)v9 < *(_QWORD *)a1)
      {
        v10 = *v9;
        *v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = v10;
        v11 = *((_QWORD *)a1 + 2);
        if (v3 == 32)
        {
          v12 = (uint64_t *)(a1 + 16);
          v13 = 1;
          v14 = *(_QWORD *)a1;
          if (v11 >= *(_QWORD *)a1)
            goto LABEL_26;
        }
        else
        {
          v15 = v11 < *v8;
          if (v11 <= *v8)
            v11 = *v8;
          if (v15)
            v12 = (uint64_t *)(a1 + 32);
          else
            v12 = (uint64_t *)(a1 + 16);
          if (v15)
            v13 = 2;
          else
            v13 = 1;
          v14 = *(_QWORD *)a1;
          if (v11 >= *(_QWORD *)a1)
          {
LABEL_26:
            v16 = *((_QWORD *)a1 + 1);
            v17 = a1;
            while (1)
            {
              v20 = v17;
              v17 = v12;
              *v20 = *(_OWORD *)v12;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13)
                break;
              v21 = (2 * v13) | 1;
              v12 = (uint64_t *)&a1[16 * v21];
              v13 = 2 * v13 + 2;
              if (v13 < v4)
              {
                v18 = *v12;
                v19 = v12[2];
                if (*v12 <= v19)
                  v18 = v12[2];
                if (*v12 >= v19)
                  v13 = v21;
                else
                  v12 += 2;
                if (v18 < v14)
                  break;
              }
              else
              {
                v13 = v21;
                if (*v12 < v14)
                  break;
              }
            }
            *v17 = v14;
            v17[1] = v16;
          }
        }
      }
      if (++v9 == (__int128 *)a3)
        goto LABEL_37;
    }
  }
LABEL_38:
  if (v3 >= 17)
  {
    v22 = (unint64_t)v3 >> 4;
    do
    {
      v23 = 0;
      v48 = *(_OWORD *)a1;
      v24 = a1;
      do
      {
        v25 = (uint64_t *)&v24[16 * v23 + 16];
        v26 = (2 * v23) | 1;
        v27 = 2 * v23 + 2;
        if (v27 < v22 && *v25 < v25[2])
        {
          v25 += 2;
          v26 = v27;
        }
        *(_OWORD *)v24 = *(_OWORD *)v25;
        v24 = (char *)v25;
        v23 = v26;
      }
      while (v26 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
      a2 -= 16;
      if (v25 == (uint64_t *)a2)
      {
        *(_OWORD *)v25 = v48;
      }
      else
      {
        *(_OWORD *)v25 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v48;
        v28 = (char *)v25 - a1 + 16;
        if (v28 >= 17)
        {
          v29 = (((unint64_t)v28 >> 4) - 2) >> 1;
          v30 = (uint64_t *)&a1[16 * v29];
          v31 = *v25;
          if (*v30 < *v25)
          {
            v32 = v25[1];
            do
            {
              v33 = v25;
              v25 = v30;
              *(_OWORD *)v33 = *(_OWORD *)v30;
              if (!v29)
                break;
              v29 = (v29 - 1) >> 1;
              v30 = (uint64_t *)&a1[16 * v29];
            }
            while (*v30 < v31);
            *v25 = v31;
            v25[1] = v32;
          }
        }
      }
      v15 = v22-- <= 2;
    }
    while (!v15);
  }
  return v5;
}

unint64_t operations_research::MemoryUsage@<X0>(operations_research *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = operations_research::sysinfo::MemoryUsageProcess(this);
  if (v3 < 2147483649)
  {
    if (v3 <= 0x200000)
    {
      if (v3 < 2049)
      {
        v5 = *(double *)&v3;
        v6 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
        return absl::lts_2020_02_25::str_format_internal::FormatPack("%d", 2, (uint64_t)&v5, 1, a2);
      }
      else
      {
        v5 = (double)v3 * 0.0009765625;
        v6 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
        return absl::lts_2020_02_25::str_format_internal::FormatPack("%2lf KB", 7, (uint64_t)&v5, 1, a2);
      }
    }
    else
    {
      v5 = (double)v3 * 0.000000953674316;
      v6 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
      return absl::lts_2020_02_25::str_format_internal::FormatPack("%.2lf MB", 8, (uint64_t)&v5, 1, a2);
    }
  }
  else
  {
    v5 = (double)v3 * 9.31322575e-10;
    v6 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    return absl::lts_2020_02_25::str_format_internal::FormatPack("%.2lf GB", 8, (uint64_t)&v5, 1, a2);
  }
}

void operations_research::StatsGroup::Register(operations_research::StatsGroup *this, operations_research::Stat *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)*((_QWORD *)this + 5);
  v4 = *((_QWORD *)this + 6);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (void **)((char *)this + 32);
  v9 = (char *)*((_QWORD *)this + 4);
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v12 = v4 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v5 - v9);
  if (v5 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v9);
    }
    v6 = (char *)*v8;
  }
LABEL_21:
  *((_QWORD *)this + 4) = v15;
  *((_QWORD *)this + 5) = v7;
  *((_QWORD *)this + 6) = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  *((_QWORD *)this + 5) = v7;
}

void operations_research::StatsGroup::~StatsGroup(operations_research::StatsGroup *this)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  uint64_t v10;

  v3 = (char *)this + 56;
  v2 = (char *)*((_QWORD *)this + 7);
  v4 = (char *)this + 64;
  if (v2 != (char *)this + 64)
  {
    do
    {
      v6 = (char *)*((_QWORD *)v2 + 1);
      v7 = v2;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v7 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      v10 = *((_QWORD *)v2 + 7);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v2 = v8;
    }
    while (v8 != v4);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)v3, *((char **)this + 8));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = v4;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)v3, 0);
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void operations_research::StatsGroup::StatString(size_t *this@<X0>, std::string *a2@<X8>)
{
  operations_research::StatsGroup *v2;
  size_t v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  std::string *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int8x16_t *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  int8x16_t *v24;
  unint64_t v25;
  int8x16_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  int8x16_t *v31;
  uint64_t v32;
  int8x16_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  const void **v41;
  int v42;
  size_t v43;
  unint64_t v44;
  char *v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type v55;
  uint64_t v56;
  __int128 v57;
  std::string *v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  std::string::size_type v66;
  _QWORD *v67;
  int v70;
  std::string v71;
  std::string v72;
  std::string __p;
  std::string v74;
  int8x16_t *v75;
  int8x16_t *v76;
  int8x16_t *v77;

  v2 = (operations_research::StatsGroup *)this;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v3 = this[4];
  v4 = 0;
  if (this[5] != v3)
  {
    v5 = 0;
    v70 = 0;
    while (1)
    {
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v5) + 40))(*(_QWORD *)(v3 + 8 * v5));
      v3 = *((_QWORD *)v2 + 4);
      if ((v7 & 1) == 0)
        goto LABEL_5;
      v8 = *(_QWORD *)(v3 + 8 * v5);
      if (*(char *)(v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v74.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v9;
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v10 = (std::string *)v74.__r_.__value_.__r.__words[0];
        v2 = (operations_research::StatsGroup *)this;
        if (!v74.__r_.__value_.__l.__size_)
        {
          v12 = 0;
          goto LABEL_31;
        }
      }
      else
      {
        v2 = (operations_research::StatsGroup *)this;
        if (!*((_BYTE *)&v74.__r_.__value_.__s + 23))
        {
          v12 = 0;
          goto LABEL_32;
        }
        v10 = &v74;
      }
      v11 = v10->__r_.__value_.__s.__data_[0];
      if (!v10->__r_.__value_.__s.__data_[0])
      {
        v12 = 0;
        if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_32;
LABEL_29:
        v10 = (std::string *)v74.__r_.__value_.__r.__words[0];
LABEL_31:
        operator delete(v10);
        goto LABEL_32;
      }
      v12 = 0;
      do
      {
        if (v11 < 0xF0)
          v13 = 3;
        else
          v13 = 4;
        if (v11 < 0xE0)
          v13 = 2;
        if (v11 >= 0xC0)
          v14 = v13;
        else
          v14 = 1;
        v10 = (std::string *)((char *)v10 + v14);
        v11 = v10->__r_.__value_.__s.__data_[0];
        ++v12;
      }
      while (v10->__r_.__value_.__s.__data_[0]);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_29;
LABEL_32:
      v15 = v70;
      if (v70 <= v12)
        v15 = v12;
      v70 = v15;
      v16 = *((_QWORD *)v2 + 4);
      if (v4 < v77)
      {
        v4->i64[0] = *(_QWORD *)(v16 + 8 * v5);
        v6 = (uint64_t)&v4->i64[1];
      }
      else
      {
        v17 = v75;
        v18 = (char *)v4 - (char *)v75;
        v19 = ((char *)v4 - (char *)v75) >> 3;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v21 = (char *)v77 - (char *)v75;
        if (((char *)v77 - (char *)v75) >> 2 > v20)
          v20 = v21 >> 2;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * v22);
          v24 = (int8x16_t *)&v23[8 * v19];
          v24->i64[0] = *(_QWORD *)(v16 + 8 * v5);
          v6 = (uint64_t)&v24->i64[1];
          if (v4 != v17)
          {
LABEL_44:
            v25 = (char *)&v4[-1].u64[1] - (char *)v17;
            if (v25 < 0x168)
            {
              v26 = v4;
              goto LABEL_46;
            }
            if (&v23[v18 - 8 - (v25 & 0xFFFFFFFFFFFFFFF8)] > &v23[v18 - 8])
            {
              v26 = v4;
              goto LABEL_46;
            }
            if ((unint64_t *)((char *)&v4[-1].u64[1] - (v25 & 0xFFFFFFFFFFFFFFF8)) > &v4[-1].u64[1])
            {
              v26 = v4;
              goto LABEL_46;
            }
            if ((unint64_t)((char *)v17 - v23) < 0x20)
            {
              v26 = v4;
              goto LABEL_46;
            }
            v28 = (v25 >> 3) + 1;
            v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            v26 = (int8x16_t *)((char *)v4 - v29);
            v24 = (int8x16_t *)((char *)v24 - v29);
            v30 = (int8x16_t *)&v23[8 * v19 - 16];
            v31 = v4 - 1;
            v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v33 = *v31;
              v30[-1] = v31[-1];
              *v30 = v33;
              v30 -= 2;
              v31 -= 2;
              v32 -= 4;
            }
            while (v32);
            if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_46:
                v27 = v26[-1].i64[1];
                v26 = (int8x16_t *)((char *)v26 - 8);
                v24[-1].i64[1] = v27;
                v24 = (int8x16_t *)((char *)v24 - 8);
              }
              while (v26 != v17);
            }
            v4 = v75;
            v75 = v24;
            v76 = (int8x16_t *)v6;
            v77 = (int8x16_t *)&v23[8 * v22];
            v2 = (operations_research::StatsGroup *)this;
            if (!v4)
              goto LABEL_4;
LABEL_51:
            operator delete(v4);
            goto LABEL_4;
          }
        }
        else
        {
          v23 = 0;
          v24 = (int8x16_t *)(8 * v19);
          *(_QWORD *)(8 * v19) = *(_QWORD *)(v16 + 8 * v5);
          v6 = 8 * v19 + 8;
          if (v4 != v17)
            goto LABEL_44;
        }
        v75 = v24;
        v76 = (int8x16_t *)v6;
        v77 = (int8x16_t *)&v23[8 * v22];
        v2 = (operations_research::StatsGroup *)this;
        if (v4)
          goto LABEL_51;
      }
LABEL_4:
      v76 = (int8x16_t *)v6;
      v3 = *((_QWORD *)v2 + 4);
      v4 = (int8x16_t *)v6;
LABEL_5:
      if (++v5 >= (unint64_t)((uint64_t)(*((_QWORD *)v2 + 5) - v3) >> 3))
        goto LABEL_63;
    }
  }
  v70 = 0;
LABEL_63:
  v34 = *((_DWORD *)v2 + 6);
  if (v34)
  {
    if (v34 != 1)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__p, (google::glog_internal_namespace_ *)"./ortools/util/stats.cc", 94);
      v67 = (_QWORD *)google::LogMessage::stream((google::LogMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Unknown print order: ", 21);
      std::ostream::operator<<();
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__p);
    }
    v35 = 126 - 2 * __clz(((char *)v4 - (char *)v75) >> 3);
    if (v4 == v75)
      v36 = 0;
    else
      v36 = v35;
    std::__introsort<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **,false>(v75, v4, v36, 1);
  }
  else
  {
    v37 = 126 - 2 * __clz(((char *)v4 - (char *)v75) >> 3);
    if (v4 == v75)
      v38 = 0;
    else
      v38 = v37;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**,false>((uint64_t)v75, v4, (unsigned int (**)(uint64_t))&__p, v38, 1);
  }
  v40 = v75;
  v39 = v76;
  if (v75 == v76)
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
    if (v40)
      goto LABEL_137;
    return;
  }
  v41 = (const void **)this;
  v42 = *((char *)this + 23);
  if (v42 >= 0)
    v43 = *((unsigned __int8 *)this + 23);
  else
    v43 = this[1];
  v44 = v43 + 3;
  if (v43 + 3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v45 = (char *)operator new(v47 + 1);
    v41 = (const void **)this;
    a2->__r_.__value_.__l.__size_ = v44;
    a2->__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
    v46 = a2;
    goto LABEL_86;
  }
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v45 = (char *)a2;
  *((_BYTE *)&a2->__r_.__value_.__s + 23) = v44;
  v46 = a2;
  if (v43)
  {
LABEL_86:
    if (v42 >= 0)
      v49 = v41;
    else
      v49 = *v41;
    memmove(v45, v49, v43);
  }
  v50 = 0;
  *(_DWORD *)&v45[v43] = 686880;
  v51 = ((char *)v39 - (char *)v40) >> 3;
  do
  {
    while (1)
    {
      std::string::append(v46, "  ");
      v52 = v40->i64[v50];
      if (*(char *)(v52 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v52 + 8), *(_QWORD *)(v52 + 16));
      }
      else
      {
        v53 = *(_OWORD *)(v52 + 8);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v53;
      }
      v54 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      v55 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__p.__r_.__value_.__r.__words[2])
          : __p.__r_.__value_.__l.__size_;
      std::string::append(v46, (const std::string::value_type *)v54, v55);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v56 = v40->i64[v50];
        if ((*(char *)(v56 + 31) & 0x80000000) == 0)
        {
LABEL_104:
          v57 = *(_OWORD *)(v56 + 8);
          v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(v56 + 24);
          *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v57;
          goto LABEL_107;
        }
      }
      else
      {
        v56 = v40->i64[v50];
        if ((*(char *)(v56 + 31) & 0x80000000) == 0)
          goto LABEL_104;
      }
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(v56 + 8), *(_QWORD *)(v56 + 16));
LABEL_107:
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v72.__r_.__value_.__l.__size_
          || (v58 = (std::string *)v72.__r_.__value_.__r.__words[0],
              v59 = *v72.__r_.__value_.__l.__data_,
              !*v72.__r_.__value_.__l.__data_))
        {
LABEL_124:
          v60 = 0;
          goto LABEL_125;
        }
      }
      else
      {
        if (!*((_BYTE *)&v72.__r_.__value_.__s + 23))
          goto LABEL_124;
        v58 = &v72;
        v59 = v72.__r_.__value_.__s.__data_[0];
        if (!v72.__r_.__value_.__s.__data_[0])
          goto LABEL_124;
      }
      v60 = 0;
      do
      {
        if (v59 < 0xF0)
          v61 = 3;
        else
          v61 = 4;
        if (v59 < 0xE0)
          v61 = 2;
        if (v59 >= 0xC0)
          v62 = v61;
        else
          v62 = 1;
        v58 = (std::string *)((char *)v58 + v62);
        v59 = v58->__r_.__value_.__s.__data_[0];
        ++v60;
      }
      while (v58->__r_.__value_.__s.__data_[0]);
LABEL_125:
      std::string::append(v46, v70 - v60, 32);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v40->i64[v50] + 32))(&v71);
      v63 = std::string::insert(&v71, 0, " : ");
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      v65 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      v66 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__p.__r_.__value_.__r.__words[2])
          : __p.__r_.__value_.__l.__size_;
      std::string::append(v46, (const std::string::value_type *)v65, v66);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_135;
LABEL_92:
      if (v51 <= ++v50)
        goto LABEL_136;
    }
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_92;
LABEL_135:
    operator delete(v71.__r_.__value_.__l.__data_);
    ++v50;
  }
  while (v51 > v50);
LABEL_136:
  std::string::append(v46, "}\n");
LABEL_137:
  operator delete(v40);
}

void sub_22DC2A030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_22DC2A038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v32;

  v32 = *(void **)(v30 - 112);
  if (v32)
  {
    *(_QWORD *)(v30 - 104) = v32;
    operator delete(v32);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::`anonymous namespace'::CompareStatPointers(const std::string::value_type **this, const std::string::value_type **a2, const operations_research::Stat *a3)
{
  int v5;
  int v6;
  const std::string::value_type *v7;
  double v8;
  int v9;
  BOOL v10;
  double v11;
  _BOOL8 v12;
  int v13;
  void *v14;
  char v15;
  std::string::size_type size;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  size_t v20;
  int v21;
  std::string v23;
  std::string v24;

  v5 = (*((uint64_t (**)(const std::string::value_type **, const std::string::value_type **, const operations_research::Stat *))*this
        + 2))(this, a2, a3);
  v6 = (*((uint64_t (**)(const std::string::value_type **))*a2 + 2))(a2);
  v7 = *this;
  if (v5 == v6)
  {
    v8 = (*((double (**)(const std::string::value_type **))v7 + 3))(this);
    if (v8 == (*((double (**)(const std::string::value_type **))*a2 + 3))(a2))
    {
      if (*((char *)this + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v24, this[1], (std::string::size_type)this[2]);
        if ((*((char *)a2 + 31) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else
      {
        v24 = *(std::string *)(this + 1);
        if ((*((char *)a2 + 31) & 0x80000000) == 0)
        {
LABEL_5:
          v23 = *(std::string *)(a2 + 1);
          goto LABEL_13;
        }
      }
      std::string::__init_copy_ctor_external(&v23, a2[1], (std::string::size_type)a2[2]);
LABEL_13:
      v13 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
      v14 = (void *)v23.__r_.__value_.__r.__words[0];
      v15 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      else
        size = v24.__r_.__value_.__l.__size_;
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v24;
      else
        v17 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        v18 = v23.__r_.__value_.__l.__size_;
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v23;
      else
        v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if (v18 >= size)
        v20 = size;
      else
        v20 = v18;
      v21 = memcmp(v17, v19, v20);
      if (v21)
        v12 = v21 < 0;
      else
        v12 = size < v18;
      if (v13 < 0)
      {
        operator delete(v14);
        if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) == 0)
          return v12;
      }
      else if ((v15 & 0x80) == 0)
      {
        return v12;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      return v12;
    }
    v11 = (*((double (**)(const std::string::value_type **))*this + 3))(this);
    v10 = v11 <= (*((double (**)(const std::string::value_type **))*a2 + 3))(a2);
  }
  else
  {
    v9 = (*((uint64_t (**)(const std::string::value_type **))v7 + 2))(this);
    v10 = v9 <= (*((int (**)(const std::string::value_type **))*a2 + 2))(a2);
  }
  return !v10;
}

void sub_22DC2A2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

operations_research::Stat *operations_research::DistributionStat::DistributionStat(operations_research::Stat *a1, __int128 *a2, operations_research::StatsGroup *this)
{
  __int128 v5;

  *(_QWORD *)a1 = off_24F97FEB0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 2);
    *(_OWORD *)((char *)a1 + 8) = v5;
  }
  operations_research::StatsGroup::Register(this, a1);
  *(_QWORD *)a1 = off_24F987BB0;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  return a1;
}

void sub_22DC2A384(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

double operations_research::DistributionStat::Reset(operations_research::DistributionStat *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  return result;
}

unint64_t operations_research::TimeDistribution::PrintCyclesAsTime@<X0>(double a1@<D0>, uint64_t a2@<X8>)
{
  double v3;
  double v4;
  double v6;
  BOOL (*v7)(uint64_t, uint64_t, int, char *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = a1 * 0.000000001;
  v4 = v3 * 1.001;
  if (v3 * 1.001 >= 3600.0)
  {
    v6 = v3 / 3600.0;
    v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    return absl::lts_2020_02_25::str_format_internal::FormatPack("%.2fh", 5, (uint64_t)&v6, 1, a2);
  }
  else if (v4 >= 60.0)
  {
    v6 = v3 / 60.0;
    v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    return absl::lts_2020_02_25::str_format_internal::FormatPack("%.2fm", 5, (uint64_t)&v6, 1, a2);
  }
  else if (v4 >= 1.0)
  {
    v6 = v3;
    v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    return absl::lts_2020_02_25::str_format_internal::FormatPack("%.2fs", 5, (uint64_t)&v6, 1, a2);
  }
  else if (v4 >= 0.001)
  {
    v6 = v3 * 1000.0;
    v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    return absl::lts_2020_02_25::str_format_internal::FormatPack("%.2fms", 6, (uint64_t)&v6, 1, a2);
  }
  else if (v4 >= 0.000001)
  {
    v6 = v3 * 1000000.0;
    v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    return absl::lts_2020_02_25::str_format_internal::FormatPack("%.2fus", 6, (uint64_t)&v6, 1, a2);
  }
  else
  {
    v6 = v3 * 1000000000.0;
    v7 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
    return absl::lts_2020_02_25::str_format_internal::FormatPack("%.2fns", 6, (uint64_t)&v6, 1, a2);
  }
}

void operations_research::TimeDistribution::ValueAsString(operations_research::TimeDistribution *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  _QWORD v16[13];

  v16[12] = *MEMORY[0x24BDAC8D0];
  operations_research::TimeDistribution::PrintCyclesAsTime(*((double *)this + 7), (uint64_t)v14);
  operations_research::TimeDistribution::PrintCyclesAsTime(*((double *)this + 8), (uint64_t)v12);
  operations_research::TimeDistribution::PrintCyclesAsTime(*((double *)this + 5), (uint64_t)v10);
  v4 = *((_QWORD *)this + 9);
  if (v4)
    v5 = sqrt(*((double *)this + 6) / (double)v4);
  else
    v5 = 0.0;
  operations_research::TimeDistribution::PrintCyclesAsTime(v5, (uint64_t)v8);
  operations_research::TimeDistribution::PrintCyclesAsTime(*((double *)this + 4), (uint64_t)__p);
  v16[0] = *((_QWORD *)this + 9);
  v16[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v16[2] = v14;
  v16[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v16[4] = v12;
  v16[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v16[6] = v10;
  v16[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v16[8] = v8;
  v16[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v16[10] = __p;
  v16[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("%8u [%8s, %8s] %8s %8s %8s\n", 27, (uint64_t)v16, 6, a2);
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_6:
      if ((v11 & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_12;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v8[0]);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v10[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v14[0]);
    return;
  }
LABEL_13:
  operator delete(v12[0]);
  if (v15 < 0)
    goto LABEL_14;
}

void sub_22DC2A73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a38 & 0x80000000) == 0)
LABEL_12:
      _Unwind_Resume(exception_object);
LABEL_11:
    operator delete(a33);
    _Unwind_Resume(exception_object);
  }
LABEL_10:
  operator delete(a27);
  if ((a38 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

uint64_t operations_research::RatioDistribution::Add(uint64_t this, double a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(this + 72);
  if (v2)
  {
    v4 = *(double *)(this + 48);
    v3 = *(double *)(this + 56);
    if (v3 > a2)
      v3 = a2;
    v5 = *(double *)(this + 64);
    if (v5 < a2)
      v5 = a2;
    *(double *)(this + 56) = v3;
    *(double *)(this + 64) = v5;
    v6 = *(double *)(this + 32) + a2;
    v7 = v2 + 1;
    v8 = a2 - *(double *)(this + 40);
    v9 = v6 / (double)v7;
    *(double *)(this + 32) = v6;
    *(double *)(this + 40) = v9;
    *(double *)(this + 48) = v4 + v8 * (a2 - v9);
    *(_QWORD *)(this + 72) = v7;
  }
  else
  {
    *(double *)(this + 56) = a2;
    *(double *)(this + 64) = a2;
    *(double *)(this + 32) = a2;
    *(double *)(this + 40) = a2;
    *(_QWORD *)(this + 72) = 1;
  }
  return this;
}

unint64_t operations_research::RatioDistribution::ValueAsString@<X0>(operations_research::RatioDistribution *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  _QWORD v8[11];

  v8[10] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 9);
  if (v2)
    v3 = sqrt(*((double *)this + 6) / (double)v2) * 100.0;
  else
    v3 = 0.0;
  v4 = *((double *)this + 5) * 100.0;
  v5 = *((double *)this + 8) * 100.0;
  v6 = *((double *)this + 7) * 100.0;
  v8[0] = *((_QWORD *)this + 9);
  v8[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  *(double *)&v8[2] = v6;
  v8[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v8[4] = v5;
  v8[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v8[6] = v4;
  v8[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v8[8] = v3;
  v8[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  return absl::lts_2020_02_25::str_format_internal::FormatPack("%8u [%7.2f%%, %7.2f%%] %7.2f%% %7.2f%%\n", 39, (uint64_t)v8, 5, a2);
}

unint64_t operations_research::DoubleDistribution::ValueAsString@<X0>(operations_research::DoubleDistribution *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  _QWORD v7[11];

  v7[10] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 9);
  if (v3)
    v4 = sqrt(*((double *)this + 6) / (double)v3);
  else
    v4 = 0.0;
  v7[0] = *((_QWORD *)this + 9);
  v7[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v5 = *((_QWORD *)this + 8);
  v7[2] = *((_QWORD *)this + 7);
  v7[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v7[4] = v5;
  v7[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v7[6] = v2;
  v7[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v7[8] = v4;
  v7[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  return absl::lts_2020_02_25::str_format_internal::FormatPack("%8u [%8.1e, %8.1e] %8.1e %8.1e\n", 31, (uint64_t)v7, 5, a2);
}

uint64_t operations_research::IntegerDistribution::Add(uint64_t this, uint64_t a2)
{
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;

  v2 = (double)a2;
  v3 = *(_QWORD *)(this + 72);
  if (v3)
  {
    v5 = *(double *)(this + 48);
    v4 = *(double *)(this + 56);
    if (v4 > v2)
      v4 = (double)a2;
    v6 = *(double *)(this + 64);
    if (v6 < v2)
      v6 = (double)a2;
    *(double *)(this + 56) = v4;
    *(double *)(this + 64) = v6;
    v7 = *(double *)(this + 32) + v2;
    v8 = v3 + 1;
    v9 = v2 - *(double *)(this + 40);
    v10 = v7 / (double)v8;
    *(double *)(this + 32) = v7;
    *(double *)(this + 40) = v10;
    *(double *)(this + 48) = v5 + v9 * (v2 - v10);
    *(_QWORD *)(this + 72) = v8;
  }
  else
  {
    *(double *)(this + 56) = v2;
    *(double *)(this + 64) = v2;
    *(double *)(this + 32) = v2;
    *(double *)(this + 40) = v2;
    *(_QWORD *)(this + 72) = 1;
  }
  return this;
}

unint64_t operations_research::IntegerDistribution::ValueAsString@<X0>(operations_research::IntegerDistribution *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  _QWORD v7[13];

  v7[12] = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 9);
  if (v3)
    v4 = sqrt(*((double *)this + 6) / (double)v3);
  else
    v4 = 0.0;
  v7[0] = *((_QWORD *)this + 9);
  v7[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v5 = *((_QWORD *)this + 8);
  v7[2] = *((_QWORD *)this + 7);
  v7[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v7[4] = v5;
  v7[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v7[6] = v2;
  v7[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(double *)&v7[8] = v4;
  v7[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v7[10] = *((_QWORD *)this + 4);
  v7[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  return absl::lts_2020_02_25::str_format_internal::FormatPack("%8u [%8.f, %8.f] %8.2f %8.2f %8.f\n", 34, (uint64_t)v7, 6, a2);
}

double operations_research::DistributionStat::Sum(operations_research::DistributionStat *this)
{
  return *((double *)this + 4);
}

BOOL operations_research::DistributionStat::WorthPrinting(operations_research::DistributionStat *this)
{
  return *((_QWORD *)this + 9) != 0;
}

void operations_research::TimeDistribution::~TimeDistribution(void **this)
{
  *this = off_24F97FEB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24F97FEB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x22E31DF78);
}

uint64_t operations_research::TimeDistribution::Priority(operations_research::TimeDistribution *this)
{
  return 100;
}

void operations_research::RatioDistribution::~RatioDistribution(void **this)
{
  *this = off_24F97FEB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24F97FEB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x22E31DF78);
}

void operations_research::DoubleDistribution::~DoubleDistribution(void **this)
{
  *this = off_24F97FEB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24F97FEB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x22E31DF78);
}

void operations_research::IntegerDistribution::~IntegerDistribution(void **this)
{
  *this = off_24F97FEB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24F97FEB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x22E31DF78);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**,false>(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, int a5)
{
  int8x16_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int (*v14)(uint64_t);
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  int8x16_t *v55;
  int8x16_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  BOOL v65;
  uint64_t v66;
  int8x16_t *v67;
  int8x16_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int8x16_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x16_t *v84;
  BOOL v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;

  v9 = (int8x16_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v101 = a5;
LABEL_4:
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v10->i64[0]);
        if ((_DWORD)result)
        {
          v74 = v10->i64[0];
          v10->i64[0] = a2[-1].i64[1];
          goto LABEL_140;
        }
        return result;
      case 3uLL:
        v75 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v10->i64[1]);
        if ((v75 & 1) != 0)
        {
          v76 = v10->i64[0];
          if ((_DWORD)result)
          {
            v10->i64[0] = a2[-1].i64[1];
            a2[-1].i64[1] = v76;
          }
          else
          {
            v10->i64[0] = v10->i64[1];
            v10->i64[1] = v76;
            result = ((uint64_t (*)(uint64_t))*a3)(a2[-1].i64[1]);
            if ((_DWORD)result)
            {
              v74 = v10->i64[1];
              v10->i64[1] = a2[-1].i64[1];
LABEL_140:
              a2[-1].i64[1] = v74;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v94 = v10->i64[1];
          v10->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v94;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
          goto LABEL_129;
        }
        return result;
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, &a2[-1].i64[1], a3);
      case 5uLL:
        v77 = v10 + 1;
        v78 = &v10[1].i64[1];
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, &v10[1].i64[1], a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v10[1].i64[1]);
        if ((_DWORD)result)
        {
          v79 = *v78;
          *v78 = a2[-1].i64[1];
          a2[-1].i64[1] = v79;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v78, v77->i64[0]);
          if ((_DWORD)result)
          {
            v80 = v77->i64[0];
            v77->i64[0] = *v78;
            *v78 = v80;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v82 = v10->i64[1];
              v81 = v10[1].i64[0];
              v83 = v10->i64[0];
              v10->i64[1] = v81;
              v10[1].i64[0] = v82;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v81, v83);
LABEL_129:
              if ((_DWORD)result)
                *v10 = vextq_s8(*v10, *v10, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**,operations_research::Stat**>(v10, a2, a2, (unsigned int (**)(_QWORD, uint64_t))a3);
            return result;
          }
          v13 = v12 >> 1;
          v14 = *a3;
          if ((unint64_t)v11 >= 0x401)
          {
            v15 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v9->i64[v13], v9->i64[0]);
            v16 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v9->i64[v13]);
            v102 = a4;
            if ((v15 & 1) != 0)
            {
              v17 = v9->i64[0];
              if (v16)
              {
                v9->i64[0] = a2[-1].i64[1];
                a2[-1].i64[1] = v17;
              }
              else
              {
                v9->i64[0] = v9->i64[v13];
                v9->i64[v13] = v17;
                if ((*a3)(a2[-1].i64[1]))
                {
                  v26 = v9->i64[v13];
                  v9->i64[v13] = a2[-1].i64[1];
                  a2[-1].i64[1] = v26;
                }
              }
            }
            else if (v16)
            {
              v22 = v9->i64[v13];
              v9->i64[v13] = a2[-1].i64[1];
              a2[-1].i64[1] = v22;
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v9->i64[v13], v9->i64[0]))
              {
                v23 = v9->i64[0];
                v9->i64[0] = v9->i64[v13];
                v9->i64[v13] = v23;
              }
            }
            v27 = v13 - 1;
            v28 = v13 - 1;
            v29 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v9->i64[v28], v9->i64[1]);
            v30 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[0], v9->i64[v28]);
            if ((v29 & 1) != 0)
            {
              v31 = v9->i64[1];
              if (v30)
              {
                v9->i64[1] = a2[-1].i64[0];
                a2[-1].i64[0] = v31;
              }
              else
              {
                v9->i64[1] = v9->i64[v28];
                v9->i64[v28] = v31;
                if ((*a3)(a2[-1].i64[0]))
                {
                  v35 = v9->i64[v28];
                  v9->i64[v28] = a2[-1].i64[0];
                  a2[-1].i64[0] = v35;
                }
              }
            }
            else if (v30)
            {
              v32 = v9->i64[v28];
              v9->i64[v28] = a2[-1].i64[0];
              a2[-1].i64[0] = v32;
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v9->i64[v28], v9->i64[1]))
              {
                v33 = v9->i64[1];
                v9->i64[1] = v9->i64[v28];
                v9->i64[v28] = v33;
              }
            }
            v36 = v13 + 1;
            v37 = v13 + 1;
            v38 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v9->i64[v37], v9[1].i64[0]);
            v39 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-2].i64[1], v9->i64[v37]);
            if ((v38 & 1) != 0)
            {
              v40 = v9[1].i64[0];
              if (v39)
              {
                v9[1].i64[0] = a2[-2].i64[1];
                a2[-2].i64[1] = v40;
              }
              else
              {
                v9[1].i64[0] = v9->i64[v37];
                v9->i64[v37] = v40;
                if ((*a3)(a2[-2].i64[1]))
                {
                  v43 = v9->i64[v37];
                  v9->i64[v37] = a2[-2].i64[1];
                  a2[-2].i64[1] = v43;
                }
              }
            }
            else if (v39)
            {
              v41 = v9->i64[v37];
              v9->i64[v37] = a2[-2].i64[1];
              a2[-2].i64[1] = v41;
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v9->i64[v37], v9[1].i64[0]))
              {
                v42 = v9[1].i64[0];
                v9[1].i64[0] = v9->i64[v37];
                v9->i64[v37] = v42;
              }
            }
            v44 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v9->i64[v13], v9->i64[v27]);
            v45 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v9->i64[v36], v9->i64[v13]);
            if ((v44 & 1) != 0)
            {
              v46 = v9->i64[v27];
              if (v45)
              {
                v9->i64[v27] = v9->i64[v37];
                v9->i64[v37] = v46;
                v47 = v9->i64[v13];
                goto LABEL_53;
              }
              v9->i64[v27] = v9->i64[v13];
              v9->i64[v13] = v46;
              v50 = (*a3)(v9->i64[v36]);
              v47 = v9->i64[v13];
              if (v50)
              {
                v49 = v9->i64[v37];
                v9->i64[v13] = v49;
                v9->i64[v37] = v47;
                goto LABEL_52;
              }
            }
            else
            {
              v47 = v9->i64[v13];
              if (v45)
              {
                v9->i64[v13] = v9->i64[v37];
                v9->i64[v37] = v47;
                v48 = ((uint64_t (*)(void))*a3)();
                v47 = v9->i64[v13];
                if (v48)
                {
                  v49 = v9->i64[v28];
                  v9->i64[v28] = v47;
                  v9->i64[v13] = v49;
LABEL_52:
                  v47 = v49;
                }
              }
            }
LABEL_53:
            a5 = v101;
            v51 = v9->i64[0];
            v9->i64[0] = v47;
            v9->i64[v13] = v51;
            a4 = v102 - 1;
            v21 = v9->i64[0];
            if ((v101 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v9->i64[0], v9->i64[v13]);
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v9->i64[0]);
          if ((v18 & 1) != 0)
          {
            v20 = v9->i64[v13];
            if (v19)
            {
              v9->i64[v13] = a2[-1].i64[1];
              a2[-1].i64[1] = v20;
              --a4;
              v21 = v9->i64[0];
              if ((a5 & 1) != 0)
                goto LABEL_55;
              goto LABEL_54;
            }
            v9->i64[v13] = v9->i64[0];
            v9->i64[0] = v20;
            if ((*a3)(a2[-1].i64[1]))
            {
              v34 = v9->i64[0];
              v9->i64[0] = a2[-1].i64[1];
              a2[-1].i64[1] = v34;
            }
          }
          else if (v19)
          {
            v24 = v9->i64[0];
            v9->i64[0] = a2[-1].i64[1];
            a2[-1].i64[1] = v24;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v9->i64[0], v9->i64[v13]))
            {
              v25 = v9->i64[v13];
              v9->i64[v13] = v9->i64[0];
              v9->i64[0] = v25;
              --a4;
              v21 = v25;
              if ((a5 & 1) != 0)
                goto LABEL_55;
              goto LABEL_54;
            }
          }
          --a4;
          v21 = v9->i64[0];
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          v52 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v9[-1].i64[1], v21);
          v21 = v9->i64[0];
          if ((v52 & 1) == 0)
          {
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v9->i64[0], a2[-1].i64[1]);
            if ((result & 1) != 0)
            {
              v10 = v9;
              do
              {
                v66 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v66);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v67 = (int8x16_t *)&v9->u64[1];
              do
              {
                v10 = v67;
                if (v67 >= a2)
                  break;
                v67 = (int8x16_t *)((char *)v67 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v10->i64[0]);
              }
              while (!(_DWORD)result);
            }
            v68 = a2;
            if (v10 < a2)
            {
              v68 = a2;
              do
              {
                v69 = v68[-1].i64[1];
                v68 = (int8x16_t *)((char *)v68 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v69);
              }
              while ((result & 1) != 0);
            }
            while (v10 < v68)
            {
              v70 = v10->i64[0];
              v10->i64[0] = v68->i64[0];
              v68->i64[0] = v70;
              do
              {
                v71 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
              }
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v21, v71));
              do
              {
                v72 = v68[-1].i64[1];
                v68 = (int8x16_t *)((char *)v68 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v72);
              }
              while ((result & 1) != 0);
            }
            v73 = &v10[-1].i64[1];
            if (&v10[-1].u64[1] != (unint64_t *)v9)
              v9->i64[0] = *v73;
            a5 = 0;
            *v73 = v21;
            continue;
          }
LABEL_55:
          v53 = 0;
          do
            v54 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v9->i64[++v53], v21);
          while ((v54 & 1) != 0);
          v55 = (int8x16_t *)((char *)v9 + v53 * 8);
          v56 = a2;
          if (v53 == 1)
          {
            v56 = a2;
            do
            {
              if (v55 >= v56)
                break;
              v58 = v56[-1].i64[1];
              v56 = (int8x16_t *)((char *)v56 - 8);
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v58, v21) & 1) == 0);
          }
          else
          {
            do
            {
              v57 = v56[-1].i64[1];
              v56 = (int8x16_t *)((char *)v56 - 8);
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v57, v21));
          }
          if (v55 < v56)
          {
            v59 = &v9->i64[v53];
            v60 = (uint64_t *)v56;
            do
            {
              v61 = *v59;
              *v59 = *v60;
              *v60 = v61;
              do
              {
                v62 = v59[1];
                ++v59;
              }
              while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v62, v21) & 1) != 0);
              do
                v63 = *--v60;
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v63, v21));
            }
            while (v59 < v60);
            v64 = v59 - 1;
            if (v59 - 1 == (uint64_t *)v9)
              goto LABEL_73;
LABEL_72:
            v9->i64[0] = *v64;
            goto LABEL_73;
          }
          v64 = &v55[-1].i64[1];
          if (&v55[-1].u64[1] != (unint64_t *)v9)
            goto LABEL_72;
LABEL_73:
          *v64 = v21;
          if (v55 < v56)
            goto LABEL_76;
          v65 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**>(v9, v64, a3);
          v10 = (int8x16_t *)(v64 + 1);
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**>(v64 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v65)
              goto LABEL_4;
LABEL_76:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**,false>(v9, v64, a3, a4, a5 & 1);
            a5 = 0;
            v10 = (int8x16_t *)(v64 + 1);
            continue;
          }
          a2 = (int8x16_t *)v64;
          if (v65)
            return result;
          goto LABEL_2;
        }
        v84 = (int8x16_t *)&v10->u64[1];
        v86 = v10 == a2 || v84 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v86)
          {
            v87 = 0;
            v88 = (uint64_t *)v10;
            do
            {
              v91 = *v88;
              v90 = v88[1];
              v88 = (uint64_t *)v84;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v90, v91);
              if ((_DWORD)result)
              {
                v92 = *v88;
                v93 = v87;
                do
                {
                  *(uint64_t *)((char *)&v9->i64[1] + v93) = *(uint64_t *)((char *)v9->i64 + v93);
                  if (!v93)
                  {
                    v89 = (uint64_t *)v9;
                    goto LABEL_118;
                  }
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v92, *(uint64_t *)((char *)&v9->i64[-1] + v93));
                  v93 -= 8;
                }
                while ((result & 1) != 0);
                v89 = (uint64_t *)((char *)&v9->i64[1] + v93);
LABEL_118:
                *v89 = v92;
              }
              v84 = (int8x16_t *)(v88 + 1);
              v87 += 8;
            }
            while (v88 + 1 != (uint64_t *)a2);
          }
        }
        else if (!v86)
        {
          do
          {
            v96 = v9->i64[0];
            v95 = v9->i64[1];
            v9 = v84;
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v95, v96);
            if ((_DWORD)result)
            {
              v97 = v9->i64[0];
              v98 = (uint64_t *)v9;
              do
              {
                v99 = v98;
                v100 = *--v98;
                *v99 = v100;
                result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v97, *(v99 - 2));
              }
              while ((result & 1) != 0);
              *v98 = v97;
            }
            v84 = (int8x16_t *)&v9->u64[1];
          }
          while (&v9->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      v9 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v10 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[1]);
      if ((v9 & 1) != 0)
      {
        v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        v19 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v12 = a1 + 2;
      v13 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[3]))
        return 1;
      v14 = *v13;
      *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v13, *v12))
        return 1;
      v15 = *v12;
      *v12 = *v13;
      *v13 = v15;
      if (!((unsigned int (*)(void))*a3)())
        return 1;
      v17 = a1[1];
      v16 = a1[2];
      v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      v20 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v21 = a1 + 2;
      v22 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[2], a1[1]);
      if ((v20 & 1) != 0)
      {
        v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v22)
      {
        v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)())
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      v30 = 0;
      break;
  }
  while (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v28, *v21))
  {
LABEL_35:
    v21 = v28;
    v29 += 8;
    if (++v28 == a2)
      return 1;
  }
  v31 = *v28;
  v32 = v29;
  do
  {
    v33 = (char *)a1 + v32;
    *(_QWORD *)((char *)a1 + v32 + 24) = *(_QWORD *)((char *)a1 + v32 + 16);
    if (v32 == -16)
    {
      *a1 = v31;
      if (++v30 != 8)
        goto LABEL_35;
      return v28 + 1 == a2;
    }
    v32 -= 8;
  }
  while ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v31, *((_QWORD *)v33 + 1)) & 1) != 0);
  *(_QWORD *)((char *)a1 + v32 + 24) = v31;
  if (++v30 != 8)
    goto LABEL_35;
  return v28 + 1 == a2;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
  v11 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
  if ((v10 & 1) != 0)
  {
    v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
      *a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      if ((*a5)(*a3))
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else if (v11)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((unsigned int (*)(_QWORD, _QWORD))*a5)(*a2, *a1))
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

_QWORD *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(operations_research::Stat const*,operations_research::Stat const*),operations_research::Stat**,operations_research::Stat**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD, uint64_t))
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;

  if (a1 != a2)
  {
    v47 = a2;
    v48 = a2 - a1;
    v45 = a3;
    v46 = (char *)a2 - (char *)a1;
    if ((char *)a2 - (char *)a1 >= 9 && (unint64_t)v46 >= 0x10)
    {
      v37 = (unint64_t)(v48 - 2) >> 1;
      v38 = v37;
      do
      {
        if (v37 >= v38)
        {
          v39 = (2 * v38) | 1;
          v40 = &a1[v39];
          if (2 * v38 + 2 < v48 && (*a4)(*v40, v40[1]))
          {
            ++v40;
            v39 = 2 * v38 + 2;
          }
          v41 = &a1[v38];
          if ((((uint64_t (*)(_QWORD, _QWORD))*a4)(*v40, *v41) & 1) == 0)
          {
            v42 = *v41;
            do
            {
              v43 = v40;
              *v41 = *v40;
              if (v37 < v39)
                break;
              v44 = (2 * v39) | 1;
              v40 = &a1[v44];
              if (2 * v39 + 2 < v48 && (*a4)(*v40, v40[1]))
              {
                ++v40;
                v44 = 2 * v39 + 2;
              }
              v41 = v43;
              v39 = v44;
            }
            while (!(*a4)(*v40, v42));
            *v43 = v42;
          }
        }
        v22 = v38-- <= 0;
      }
      while (!v22);
    }
    v7 = v46;
    v6 = v47;
    a3 = v47;
    v8 = v45;
    if (v47 != v45)
    {
      if (v46 >= 16)
      {
        v9 = a1 + 1;
        while (1)
        {
          if (((unsigned int (*)(_QWORD, _QWORD, _QWORD *))*a4)(*v6, *a1, a3))
          {
            v11 = *v6;
            *v6 = *a1;
            *a1 = v11;
            if (v7 == 16)
            {
              v12 = v9;
              v13 = 1;
              if ((((uint64_t (*)(_QWORD))*a4)(*v9) & 1) == 0)
                goto LABEL_23;
            }
            else
            {
              v14 = (*a4)(a1[1], a1[2]);
              if (v14)
                v12 = a1 + 2;
              else
                v12 = v9;
              if (v14)
                v13 = 2;
              else
                v13 = 1;
              if ((((uint64_t (*)(_QWORD, _QWORD))*a4)(*v12, *a1) & 1) == 0)
              {
LABEL_23:
                v15 = *a1;
                v16 = a1;
                do
                {
                  v18 = v12;
                  *v16 = *v12;
                  if ((uint64_t)((unint64_t)(v48 - 2) >> 1) < v13)
                    break;
                  v19 = (2 * v13) | 1;
                  v12 = &a1[v19];
                  v20 = 2 * v13 + 2;
                  if (v20 < v48 && (*a4)(*v12, v12[1]))
                  {
                    ++v12;
                    v19 = v20;
                  }
                  v17 = (*a4)(*v12, v15);
                  v16 = v18;
                  v13 = v19;
                }
                while (!v17);
                *v18 = v15;
                v8 = v45;
                v7 = v46;
                v9 = a1 + 1;
              }
            }
          }
          if (++v6 == v8)
            goto LABEL_30;
        }
      }
      do
      {
        if (((unsigned int (*)(_QWORD, _QWORD, _QWORD *))*a4)(*v6, *a1, a3))
        {
          v10 = *v6;
          *v6 = *a1;
          *a1 = v10;
        }
        ++v6;
      }
      while (v6 != v45);
LABEL_30:
      a3 = v8;
    }
    if (v7 >= 9)
    {
      v49 = a3;
      v21 = (unint64_t)v7 >> 3;
      do
      {
        v23 = 0;
        v24 = *a1;
        v25 = a1;
        do
        {
          v26 = &v25[v23 + 1];
          v27 = (2 * v23) | 1;
          v28 = 2 * v23 + 2;
          if (v28 < v21 && (*a4)(v25[v23 + 1], v25[v23 + 2]))
          {
            ++v26;
            v27 = v28;
          }
          *v25 = *v26;
          v25 = v26;
          v23 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
        v29 = v47 - 1;
        if (v26 == --v47)
        {
          *v26 = v24;
        }
        else
        {
          *v26 = *v29;
          *v29 = v24;
          v31 = (char *)v26 - (char *)a1 + 8;
          if (v31 >= 9)
          {
            v32 = (((unint64_t)v31 >> 3) - 2) >> 1;
            v33 = &a1[v32];
            if ((*a4)(*v33, *v26))
            {
              v34 = *v26;
              do
              {
                v35 = v33;
                *v26 = *v33;
                if (!v32)
                  break;
                v32 = (v32 - 1) >> 1;
                v33 = &a1[v32];
                v26 = v35;
              }
              while ((((uint64_t (*)(_QWORD, uint64_t))*a4)(*v33, v34) & 1) != 0);
              *v35 = v34;
            }
          }
        }
        v22 = v21-- <= 2;
      }
      while (!v22);
      return v49;
    }
  }
  return a3;
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **,false>(int8x16_t *a1, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  void *v22;
  char v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  size_t v28;
  int v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  int v41;
  void *v42;
  char v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  void *v56;
  char v57;
  std::string::size_type v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  size_t v62;
  int v63;
  int8x16_t *v64;
  uint64_t *v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t *v69;
  int8x16_t *v70;
  uint64_t v71;
  __int128 *v72;
  uint64_t v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  int v79;
  void *v80;
  char v81;
  std::string::size_type v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  size_t v86;
  int v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  int v93;
  void *v94;
  char v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  std::string *v99;
  size_t v100;
  int v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x16_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  int v120;
  void *v121;
  char v122;
  std::string::size_type size;
  std::string *v124;
  std::string::size_type v125;
  std::string *v126;
  size_t v127;
  int v128;
  int64_t v129;
  int64_t v130;
  int64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int8x16_t *v140;
  uint64_t *v141;
  BOOL v142;
  uint64_t v143;
  int64_t v144;
  _BOOL4 v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  int v153;
  void *v154;
  char v155;
  std::string::size_type v156;
  std::string *v157;
  std::string::size_type v158;
  std::string *v159;
  size_t v160;
  int v161;
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  BOOL v167;
  uint64_t *v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  int v172;
  void *v173;
  char v174;
  std::string::size_type v175;
  std::string *v176;
  std::string::size_type v177;
  std::string *v178;
  size_t v179;
  int v180;
  int8x16_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  BOOL v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  int v190;
  void *v191;
  char v192;
  std::string::size_type v193;
  std::string *v194;
  std::string::size_type v195;
  std::string *v196;
  size_t v197;
  int v198;
  uint64_t *v199;
  uint64_t *i64;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  int8x16_t *v204;
  int8x16_t *v205;
  int8x16_t *v206;
  uint64_t *v207;
  int64_t v208;
  uint64_t v210;
  int8x16_t *v212;
  uint64_t *v213;
  uint64_t v214;
  int8x16_t *v215;
  int8x16_t *v216;
  std::string v217;
  std::string v218;

void sub_22DC2CEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::StatsGroup::StatString(void)const::$_0::operator()(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;
  char v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  size_t v10;
  int v11;
  std::string v13;
  std::string v14;

  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    if ((*(char *)(a2 + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v14 = *(std::string *)(a1 + 8);
    if ((*(char *)(a2 + 31) & 0x80000000) == 0)
    {
LABEL_3:
      v13 = *(std::string *)(a2 + 8);
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
LABEL_6:
  v3 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
  v4 = (void *)v13.__r_.__value_.__r.__words[0];
  v5 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v14;
  else
    v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v13;
  else
    v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (v8 >= size)
    v10 = size;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  if (v3 < 0)
  {
    operator delete(v4);
    if ((*((_BYTE *)&v14.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_23;
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
LABEL_23:
  if (v11)
    return v11 < 0;
  else
    return size < v8;
}

void sub_22DC2D014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(a1, a2, a3);
  if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a4, *a3))
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a3, *a2))
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a2, *a1))
      {
        v12 = *a1;
        *a1 = *a2;
        *a2 = v12;
      }
    }
  }
  result = operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a5, *a4);
  if (result)
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    result = operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a4, *a3);
    if (result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      result = operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a3, *a2);
      if (result)
      {
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        result = operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a2, *a1);
        if (result)
        {
          v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a2, *a1);
  result = operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a3, *a2);
  if (v6)
  {
    v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      result = operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a3, v8);
      if (result)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    result = operations_research::StatsGroup::StatString(void)const::$_0::operator()(*a2, *a1);
    if (result)
    {
      v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int8 *v12;
  uint64_t v13;
  uint64_t *i64;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(a2[-1].i64[1], a1->i64[0]))
      {
        v13 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v13;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(a1->i64, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      i64 = a1[1].i64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(a1->i64, &a1->i64[1], a1[1].i64);
      if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(a2[-1].i64[1], a1[1].i64[0]))
      {
        v15 = *i64;
        *i64 = a2[-1].i64[1];
        a2[-1].i64[1] = v15;
        if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(*i64, a1->i64[1]))
        {
          v17 = a1->i64[1];
          v16 = a1[1].i64[0];
          v18 = a1->i64[0];
          a1->i64[1] = v16;
          a1[1].i64[0] = v17;
          if (operations_research::StatsGroup::StatString(void)const::$_0::operator()(v16, v18))
            *a1 = vextq_s8(*a1, *a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **,0>(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      v6 = a1[1].i64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::StatsGroup::StatString(void)::$_0 &,operations_research::Stat **>(a1->i64, &a1->i64[1], a1[1].i64);
      v7 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (!operations_research::StatsGroup::StatString(void)const::$_0::operator()(*v7, *v6))
  {
LABEL_11:
    v6 = v7;
    v8 += 8;
    if (++v7 == (uint64_t *)a2)
      return 1;
  }
  v10 = *v7;
  v11 = v8;
  do
  {
    v12 = &a1->i8[v11];
    *(uint64_t *)((char *)&a1[1].i64[1] + v11) = *(uint64_t *)((char *)a1[1].i64 + v11);
    if (v11 == -16)
    {
      a1->i64[0] = v10;
      if (++v9 != 8)
        goto LABEL_11;
      return v7 + 1 == (uint64_t *)a2;
    }
    v11 -= 8;
  }
  while (operations_research::StatsGroup::StatString(void)const::$_0::operator()(v10, *((_QWORD *)v12 + 1)));
  *(uint64_t *)((char *)&a1[1].i64[1] + v11) = v10;
  if (++v9 != 8)
    goto LABEL_11;
  return v7 + 1 == (uint64_t *)a2;
}

BOOL google::protobuf::internal::GetAnyFieldDescriptors(google::protobuf::internal *this, const google::protobuf::Message *a2, const google::protobuf::FieldDescriptor **a3, const google::protobuf::FieldDescriptor **a4)
{
  google::protobuf::Descriptor *v6;
  const void **v7;
  size_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t (*v17)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (***v18)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v19)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t *v20;

  v6 = (google::protobuf::Descriptor *)(*(uint64_t (**)(google::protobuf::internal *, const google::protobuf::Message *, const google::protobuf::FieldDescriptor **, const google::protobuf::FieldDescriptor **))(*(_QWORD *)this + 152))(this, a2, a3, a4);
  v7 = (const void **)*((_QWORD *)v6 + 1);
  v8 = strlen("google.protobuf.Any");
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
  {
    if (v8 != *((unsigned __int8 *)v7 + 23))
      return 0;
    if (v8 != -1)
    {
      if (!memcmp(v7, "google.protobuf.Any", v8))
        goto LABEL_9;
      return 0;
    }
LABEL_20:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if ((const void *)v8 != v7[1])
    return 0;
  if (v8 == -1)
    goto LABEL_20;
  if (memcmp(*v7, "google.protobuf.Any", v8))
    return 0;
LABEL_9:
  *(_QWORD *)a2 = google::protobuf::Descriptor::FindFieldByNumber(v6, 1);
  *a3 = (const google::protobuf::FieldDescriptor *)google::protobuf::Descriptor::FindFieldByNumber(v6, 2);
  v9 = *(_QWORD *)a2;
  if (!v9)
    return 0;
  v10 = *(unint64_t **)(v9 + 48);
  if (v10)
  {
    v16 = v9;
    v17 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v11 = atomic_load(v10);
    if (v11 != -1)
    {
      v19 = &v17;
      v20 = &v16;
      v18 = &v19;
      std::__call_once(v10, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  if (*(_DWORD *)(v9 + 56) != 9)
    return 0;
  v12 = (uint64_t)*a3;
  if (!v12)
    return 0;
  v13 = *(unint64_t **)(v12 + 48);
  if (v13)
  {
    v16 = v12;
    v17 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v14 = atomic_load(v13);
    if (v14 != -1)
    {
      v19 = &v17;
      v20 = &v16;
      v18 = &v19;
      std::__call_once(v13, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  return *(_DWORD *)(v12 + 56) == 12;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))a1)(**(_QWORD **)(*(_QWORD *)a1 + 8));
}

uint64_t google::protobuf::internal::ParseAnyTypeUrl(char **a1, uint64_t a2, uint64_t a3)
{
  char **v5;
  uint64_t v6;
  int v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  size_t v13;
  __int128 *p_dst;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 __dst;
  unint64_t v24;

  v5 = a1;
  v6 = 0;
  v7 = *((char *)a1 + 23);
  if (v7 >= 0)
    v8 = (char *)a1;
  else
    v8 = *a1;
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)a1 + 23);
  else
    v9 = (unint64_t)a1[1];
  v10 = -1;
  do
  {
    if (-(uint64_t)v9 == v6)
      return 0;
    v11 = v8[v9 - 1 + v6--];
    ++v10;
  }
  while (v11 != 47);
  v12 = v9 + v6;
  if (v9 + v6 == -1 || v6 == -1)
    return 0;
  if (a2)
  {
    if (v9 >= v12 + 1)
      v13 = v12 + 1;
    else
      v13 = v9;
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_43;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v22 = v16 + 1;
      p_dst = (__int128 *)operator new(v16 + 1);
      *((_QWORD *)&__dst + 1) = v13;
      v24 = v22 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v24) = v13;
      p_dst = &__dst;
      if (!v13)
        goto LABEL_25;
    }
    memmove(p_dst, v8, v13);
LABEL_25:
    *((_BYTE *)p_dst + v13) = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = __dst;
    *(_QWORD *)(a2 + 16) = v24;
    LOBYTE(v7) = *((_BYTE *)v5 + 23);
  }
  if ((v7 & 0x80) == 0)
  {
    v17 = v7;
    if (v12 < v7)
    {
      v18 = ~v6 + v7 - v9;
      if (v18 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_31;
LABEL_43:
      std::string::__throw_length_error[abi:ne180100]();
    }
LABEL_44:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v17 = (unint64_t)v5[1];
  if (v17 <= v12)
    goto LABEL_44;
  v5 = (char **)*v5;
  v18 = ~v6 + v17 - v9;
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_43;
LABEL_31:
  if (v18 >= 0x17)
  {
    v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v20 = v18 | 7;
    v21 = v20 + 1;
    v19 = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__dst + 1) = v18;
    v24 = v21 | 0x8000000000000000;
    *(_QWORD *)&__dst = v19;
  }
  else
  {
    HIBYTE(v24) = v18;
    v19 = &__dst;
    if (v9 - v17 + v6 == -1)
      goto LABEL_38;
  }
  memmove(v19, (char *)v5 + v9 + v6 + 1, v18);
LABEL_38:
  *((_BYTE *)v19 + v17 - v9 + v10) = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = __dst;
  *(_QWORD *)(a3 + 16) = v24;
  return 1;
}

_QWORD *google::protobuf::internal::ArenaImpl::thread_cache(google::protobuf::internal::ArenaImpl *this)
{
  unsigned __int8 v1;
  pthread_key_t *v2;
  _QWORD *result;
  _QWORD *v4;
  pthread_key_t *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25407B4C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25407B4C8))
  {
    v5 = (pthread_key_t *)operator new();
    pthread_key_create(v5, (void (__cdecl *)(void *))google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete);
    _MergedGlobals_30 = (uint64_t)v5;
    __cxa_guard_release(&qword_25407B4C8);
  }
  v2 = (pthread_key_t *)_MergedGlobals_30;
  result = pthread_getspecific(*(_QWORD *)_MergedGlobals_30);
  if (!result)
  {
    v4 = (_QWORD *)operator new();
    *v4 = -1;
    v4[1] = 0;
    pthread_setspecific(*v2, v4);
    return v4;
  }
  return result;
}

void sub_22DC2D930(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1000C4000313F17);
  __cxa_guard_abort(&qword_25407B4C8);
  _Unwind_Resume(a1);
}

void sub_22DC2D960(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25407B4C8);
  _Unwind_Resume(a1);
}

google::protobuf::internal::ArenaImpl **google::protobuf::internal::ArenaImpl::Init(google::protobuf::internal::ArenaImpl **this)
{
  google::protobuf::internal::ArenaImpl **v1;
  unint64_t v2;
  google::protobuf::internal::ArenaImpl *v3;
  google::protobuf::internal::ArenaImpl *v4;
  _QWORD *v5;
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::ArenaImpl *v7;
  google::protobuf::internal::ArenaImpl *v8;

  v1 = this;
  do
    v2 = __ldxr(&google::protobuf::internal::ArenaImpl::lifecycle_id_generator_);
  while (__stxr(v2 + 1, &google::protobuf::internal::ArenaImpl::lifecycle_id_generator_));
  this[4] = (google::protobuf::internal::ArenaImpl *)v2;
  this[1] = 0;
  *this = 0;
  v3 = this[3];
  if (v3)
  {
    v4 = this[8];
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 24;
    *((_QWORD *)v3 + 2) = v4;
    v5 = google::protobuf::internal::ArenaImpl::thread_cache((google::protobuf::internal::ArenaImpl *)this);
    v6 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::SerialArena::New(v3, (uint64_t)v5, (uint64_t)v1);
    *((_QWORD *)v6 + 4) = 0;
    *v1 = v6;
    v1[2] = v1[8];
    v7 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(v6);
    *((_QWORD *)v7 + 1) = v6;
    v8 = v1[4];
    this = (google::protobuf::internal::ArenaImpl **)google::protobuf::internal::ArenaImpl::thread_cache(v7);
    *this = v8;
    atomic_store((unint64_t)v6, (unint64_t *)v1 + 1);
  }
  else
  {
    this[2] = 0;
  }
  return this;
}

_QWORD *google::protobuf::internal::ArenaImpl::SerialArena::New(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  char v12;
  std::string v13[2];

  if (a1[1] != 24)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/arena.cc", 317);
    v6 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (b->pos()) == (kBlockHeaderSize): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v7 = a1[2];
  if (v7 <= 0x5F)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/arena.cc", 318);
    v8 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (kBlockHeaderSize + kSerialArenaSize) <= (b->size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, v8);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v7 = a1[2];
    if (v7 <= 0x17)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/arena_impl.h", 260);
      v9 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: n <= size_: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, v9);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v7 = a1[2];
    }
  }
  a1[3] = a3;
  a1[1] = 96;
  a1[4] = a2;
  a1[5] = a1;
  if (v7 <= 0x5F)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/arena_impl.h", 260);
    v10 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: n <= size_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, v10);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v7 = a1[2];
  }
  a1[8] = a1 + 12;
  a1[9] = (char *)a1 + v7;
  a1[6] = 0;
  a1[10] = 0;
  a1[11] = 0;
  return a1 + 3;
}

void sub_22DC2DBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2DBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2DBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2DC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2DC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2DC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2DC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void google::protobuf::internal::ArenaImpl::~ArenaImpl(google::protobuf::internal::ArenaImpl *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void (*v6)(_QWORD *, _QWORD);
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    do
    {
      v8 = (uint64_t *)v2[3];
      if (v8)
      {
        v9 = (v2[7] - (_QWORD)v8 - 16) >> 4;
        if (!v9)
          goto LABEL_15;
LABEL_13:
        v10 = &v8[2 * v9 + 1];
        do
        {
          ((void (*)(_QWORD))*v10)(*(v10 - 1));
          v10 -= 2;
          --v9;
        }
        while (v9);
LABEL_15:
        while (1)
        {
          v8 = (uint64_t *)v8[1];
          if (!v8)
            break;
          v9 = *v8;
          if (*v8)
            goto LABEL_13;
        }
      }
      v2 = (_QWORD *)v2[4];
    }
    while (v2);
  }
  v3 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    do
    {
      v4 = (_QWORD *)v3[2];
      v3 = (_QWORD *)v3[4];
      if (v4)
      {
        v5 = (_QWORD *)*((_QWORD *)this + 3);
        v6 = (void (*)(_QWORD *, _QWORD))*((_QWORD *)this + 10);
        do
        {
          v7 = (_QWORD *)*v4;
          if (v4 != v5)
            v6(v4, v4[2]);
          v4 = v7;
        }
        while (v7);
      }
    }
    while (v3);
  }
}

_QWORD *google::protobuf::internal::ArenaImpl::NewBlock(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  _QWORD *result;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  std::string v13[2];

  if (!a2)
  {
    v6 = *(_QWORD *)(a1 + 40);
    if (a3 < 0xFFFFFFFFFFFFFFE8)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_QWORD *)(a1 + 48) >= (unint64_t)(2 * *(_QWORD *)(a2 + 16)))
    v6 = 2 * *(_QWORD *)(a2 + 16);
  else
    v6 = *(_QWORD *)(a1 + 48);
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
LABEL_8:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/arena.cc", 118);
    v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
LABEL_9:
  if (v6 <= a3 + 24)
    v8 = a3 + 24;
  else
    v8 = v6;
  result = (_QWORD *)(*(uint64_t (**)(unint64_t))(a1 + 72))(v8);
  *result = a2;
  result[1] = 24;
  result[2] = v8;
  v10 = (unint64_t *)(a1 + 16);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + v8, v10));
  return result;
}

void sub_22DC2DE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2DE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::ArenaImpl::SerialArena::AddCleanupFallback(google::protobuf::internal::ArenaImpl::SerialArena *this, void *a2, void (*a3)(void *))
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  result = (_QWORD *)*((_QWORD *)this + 3);
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40)
        v7 = 64;
      else
        v7 = 2 * *result;
    }
    else
    {
      v7 = 8;
    }
    result = (_QWORD *)google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(this, (16 * (_WORD)v7 + 23) & 0xFF0);
    v8 = *((_QWORD *)this + 3);
    *result = v7;
    result[1] = v8;
    *((_QWORD *)this + 3) = result;
    *((_QWORD *)this + 7) = result + 2;
    *((_QWORD *)this + 8) = &result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  *((_QWORD *)this + 7) = result + 4;
  return result;
}

unint64_t google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(google::protobuf::internal::ArenaImpl::SerialArena *this, unint64_t a2)
{
  unsigned int *v4;
  unint64_t result;
  unint64_t v6;
  unsigned int *v7;
  char v8;
  std::string v9[2];

  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/arena_impl.h", 184);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  result = *((_QWORD *)this + 5);
  v6 = *((_QWORD *)this + 6);
  if (v6 < result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/arena_impl.h", 185);
    v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (limit_) >= (ptr_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
    result = *((_QWORD *)this + 5);
    v6 = *((_QWORD *)this + 6);
  }
  if (v6 - result < a2)
    return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAlignedFallback(this, a2);
  *((_QWORD *)this + 5) = result + a2;
  return result;
}

void sub_22DC2E028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2E03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2E050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2E064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(google::protobuf::internal::ArenaImpl *this, unint64_t a2, void (*a3)(void *))
{
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::ArenaImpl::SerialArena *v7;
  void *result;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;

  v6 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*(_QWORD *)v6 == *((_QWORD *)this + 4))
  {
    v7 = (google::protobuf::internal::ArenaImpl::SerialArena *)*((_QWORD *)v6 + 1);
  }
  else
  {
    v11 = google::protobuf::internal::ArenaImpl::thread_cache(v6);
    v7 = (google::protobuf::internal::ArenaImpl::SerialArena *)atomic_load((unint64_t *)this + 1);
    if (!v7 || *((_QWORD **)v7 + 1) != v11)
      return google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(this, a2, a3);
  }
  result = (void *)google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(v7, a2);
  v9 = result;
  v10 = (_QWORD *)*((_QWORD *)v7 + 7);
  if (v10 == *((_QWORD **)v7 + 8))
  {
    google::protobuf::internal::ArenaImpl::SerialArena::AddCleanupFallback(v7, result, a3);
    return v9;
  }
  else
  {
    *v10 = result;
    v10[1] = a3;
    *((_QWORD *)v7 + 7) = v10 + 2;
  }
  return result;
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(google::protobuf::internal::ArenaImpl *this, unint64_t a2, void (*a3)(void *))
{
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::ArenaImpl *SerialArenaFallback;
  void *result;
  void *v9;
  _QWORD *v10;
  google::protobuf::internal::ArenaImpl *v11;
  _QWORD *v12;

  v6 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*(_QWORD *)v6 == *((_QWORD *)this + 4))
  {
    SerialArenaFallback = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v6 + 1);
  }
  else
  {
    v11 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(v6);
    SerialArenaFallback = (google::protobuf::internal::ArenaImpl *)atomic_load((unint64_t *)this + 1);
    if (!SerialArenaFallback || *((google::protobuf::internal::ArenaImpl **)SerialArenaFallback + 1) != v11)
    {
      v12 = google::protobuf::internal::ArenaImpl::thread_cache(v11);
      SerialArenaFallback = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v12);
    }
  }
  result = (void *)google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(SerialArenaFallback, a2);
  v9 = result;
  v10 = (_QWORD *)*((_QWORD *)SerialArenaFallback + 7);
  if (v10 == *((_QWORD **)SerialArenaFallback + 8))
  {
    google::protobuf::internal::ArenaImpl::SerialArena::AddCleanupFallback(SerialArenaFallback, result, a3);
    return v9;
  }
  else
  {
    *v10 = result;
    v10[1] = a3;
    *((_QWORD *)SerialArenaFallback + 7) = v10 + 2;
  }
  return result;
}

google::protobuf::internal::ArenaImpl *google::protobuf::internal::ArenaImpl::AddCleanup(google::protobuf::internal::ArenaImpl *this, void *a2, void (*a3)(void *))
{
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::ArenaImpl *result;
  _QWORD *v8;
  _QWORD *v9;

  v6 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*(_QWORD *)v6 == *((_QWORD *)this + 4))
  {
    result = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v6 + 1);
  }
  else
  {
    v9 = google::protobuf::internal::ArenaImpl::thread_cache(v6);
    result = (google::protobuf::internal::ArenaImpl *)atomic_load((unint64_t *)this + 1);
    if (!result || *((_QWORD **)result + 1) != v9)
      return google::protobuf::internal::ArenaImpl::AddCleanupFallback(this, a2, a3);
  }
  v8 = (_QWORD *)*((_QWORD *)result + 7);
  if (v8 == *((_QWORD **)result + 8))
    return (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::SerialArena::AddCleanupFallback(result, a2, a3);
  *v8 = a2;
  v8[1] = a3;
  *((_QWORD *)result + 7) = v8 + 2;
  return result;
}

google::protobuf::internal::ArenaImpl *google::protobuf::internal::ArenaImpl::AddCleanupFallback(google::protobuf::internal::ArenaImpl *this, void *a2, void (*a3)(void *))
{
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::ArenaImpl *result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*(_QWORD *)v6 == *((_QWORD *)this + 4))
  {
    result = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v6 + 1);
  }
  else
  {
    v9 = google::protobuf::internal::ArenaImpl::thread_cache(v6);
    result = (google::protobuf::internal::ArenaImpl *)atomic_load((unint64_t *)this + 1);
    if (!result || *((_QWORD **)result + 1) != v9)
    {
      v10 = google::protobuf::internal::ArenaImpl::thread_cache(result);
      result = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v10);
    }
  }
  v8 = (_QWORD *)*((_QWORD *)result + 7);
  if (v8 == *((_QWORD **)result + 8))
    return (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::SerialArena::AddCleanupFallback(result, a2, a3);
  *v8 = a2;
  v8[1] = a3;
  *((_QWORD *)result + 7) = v8 + 2;
  return result;
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(google::protobuf::internal::ArenaImpl *this, unint64_t a2)
{
  google::protobuf::internal::ArenaImpl *v4;
  google::protobuf::internal::ArenaImpl *SerialArenaFallback;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*(_QWORD *)v4 == *((_QWORD *)this + 4))
  {
    SerialArenaFallback = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v4 + 1);
  }
  else
  {
    v7 = google::protobuf::internal::ArenaImpl::thread_cache(v4);
    SerialArenaFallback = (google::protobuf::internal::ArenaImpl *)atomic_load((unint64_t *)this + 1);
    if (!SerialArenaFallback || *((_QWORD **)SerialArenaFallback + 1) != v7)
    {
      v8 = google::protobuf::internal::ArenaImpl::thread_cache(SerialArenaFallback);
      SerialArenaFallback = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v8);
      v6 = a2;
      return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(SerialArenaFallback, v6);
    }
  }
  v6 = a2;
  return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(SerialArenaFallback, v6);
}

google::protobuf::internal::ArenaImpl *google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(google::protobuf::internal::ArenaImpl *this, void *a2)
{
  unint64_t *v3;
  google::protobuf::internal::ArenaImpl *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  google::protobuf::internal::ArenaImpl *v11;
  unint64_t v12;
  unint64_t v14;

  v3 = (unint64_t *)this;
  v4 = (google::protobuf::internal::ArenaImpl *)atomic_load((unint64_t *)this);
  if (v4)
  {
    while (*((void **)v4 + 1) != a2)
    {
      v4 = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v4 + 4);
      if (!v4)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    if (*((_QWORD *)this + 5) <= 0x60uLL)
      v5 = 96;
    else
      v5 = *((_QWORD *)this + 5);
    v6 = (_QWORD *)(*((uint64_t (**)(uint64_t))this + 9))(v5);
    *v6 = 0;
    v6[1] = 24;
    v6[2] = v5;
    v7 = v3 + 2;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + v5, v7));
    this = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::SerialArena::New(v6, (uint64_t)a2, (uint64_t)v3);
    v4 = this;
    v9 = *v3;
    *((_QWORD *)this + 4) = *v3;
    v10 = __ldxr(v3);
    if (v10 != v9)
    {
      __clrex();
      while (1)
      {
LABEL_17:
        *((_QWORD *)this + 4) = v10;
        v14 = __ldxr(v3);
        if (v14 == v10)
        {
          if (!__stlxr((unint64_t)this, v3))
            goto LABEL_14;
        }
        else
        {
          __clrex();
        }
        v10 = v14;
      }
    }
    if (__stlxr((unint64_t)this, v3))
      goto LABEL_17;
  }
LABEL_14:
  v11 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  *((_QWORD *)v11 + 1) = v4;
  v12 = v3[4];
  *google::protobuf::internal::ArenaImpl::thread_cache(v11) = v12;
  atomic_store((unint64_t)v4, v3 + 1);
  return v4;
}

uint64_t google::protobuf::internal::ArenaImpl::SerialArena::AllocateAlignedFallback(google::protobuf::internal::ArenaImpl::SerialArena *this, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  _QWORD *v10;
  char v12;
  std::string v13[2];

  v4 = *((_QWORD *)this + 2);
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 16) - *((_QWORD *)this + 6) + *((_QWORD *)this + 5);
  v5 = google::protobuf::internal::ArenaImpl::NewBlock(*(_QWORD *)this, v4, a2);
  v6 = v5;
  *((_QWORD *)this + 2) = v5;
  v8 = v5[1];
  v7 = v5[2];
  if (v7 >= v8)
  {
    v10 = v5;
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/arena_impl.h", 260);
    v9 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: n <= size_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, v9);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v10 = (_QWORD *)*((_QWORD *)this + 2);
    v7 = v10[2];
  }
  *((_QWORD *)this + 5) = (char *)v6 + v8;
  *((_QWORD *)this + 6) = (char *)v10 + v7;
  return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(this, a2);
}

void sub_22DC2E5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2E5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ArenaImpl::SpaceAllocated(google::protobuf::internal::ArenaImpl *this)
{
  return *((_QWORD *)this + 2);
}

unint64_t google::protobuf::Arena::AllocateAlignedNoHook(google::protobuf::Arena *this, unint64_t a2)
{
  google::protobuf::internal::ArenaImpl *v4;
  google::protobuf::internal::ArenaImpl::SerialArena *v5;
  _QWORD *v7;

  v4 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*(_QWORD *)v4 == *((_QWORD *)this + 4))
  {
    v5 = (google::protobuf::internal::ArenaImpl::SerialArena *)*((_QWORD *)v4 + 1);
    return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(v5, a2);
  }
  v7 = google::protobuf::internal::ArenaImpl::thread_cache(v4);
  v5 = (google::protobuf::internal::ArenaImpl::SerialArena *)atomic_load((unint64_t *)this + 1);
  if (v5 && *((_QWORD **)v5 + 1) == v7)
    return google::protobuf::internal::ArenaImpl::SerialArena::AllocateAligned(v5, a2);
  return google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(this, a2);
}

_QWORD *google::protobuf::Arena::CallDestructorHooks(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD, _QWORD);
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t);

  v1 = this;
  v2 = this[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))this[12];
  if (v3)
    this = (_QWORD *)v3(this, this[14], this[2]);
  v4 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t))v1[13];
  if (v4)
    return (_QWORD *)v4(v1, v1[14], v2);
  return this;
}

uint64_t google::protobuf::Arena::OnArenaAllocation(uint64_t this, const std::type_info *a2, uint64_t a3)
{
  uint64_t (*v3)(const std::type_info *, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(const std::type_info *, uint64_t, _QWORD))(this + 88);
  if (v3)
    return v3(a2, a3, *(_QWORD *)(this + 112));
  return this;
}

uint64_t google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete(uint64_t result)
{
  if (result)
    JUMPOUT(0x22E31DF78);
  return result;
}

void google::protobuf::io::CodedInputStream::~CodedInputStream(google::protobuf::io::CodedInputStream *this)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (*((_DWORD *)this + 7) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this >= 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
      v3 = *((_DWORD *)this + 6) - *((_DWORD *)this + 11) + *(_QWORD *)this - *((_DWORD *)this + 2);
      *((_QWORD *)this + 1) = *(_QWORD *)this;
      *((_DWORD *)this + 11) = 0;
      *((_QWORD *)this + 3) = v3;
    }
  }
}

void google::protobuf::io::CodedInputStream::PrintTotalBytesLimitError(google::protobuf::io::CodedInputStream *this)
{
  std::string *v2;
  std::string *v3;
  unsigned int *v4;
  char v5;
  std::string v6[2];

  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 193);
  v2 = google::protobuf::internal::LogMessage::operator<<(v6, "A protocol message was rejected because it was too big (more than ");
  v3 = google::protobuf::internal::LogMessage::operator<<(v2, *((_DWORD *)this + 12));
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v3, " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in third_party/protobuf/src/google/protobuf/io/coded_stream.h.");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v5, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
}

void sub_22DC2E7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::SkipFallback(google::protobuf::io::CodedInputStream *this, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  if (*((int *)this + 11) < 1)
  {
    v5 = (a2 - a3);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v6 = *((_DWORD *)this + 12);
    if (v6 >= *((_DWORD *)this + 10))
      v6 = *((_DWORD *)this + 10);
    v7 = v6 - *((_DWORD *)this + 6);
    if (v7 >= (int)v5)
    {
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), v5) & 1) != 0)
      {
        *((_DWORD *)this + 6) += v5;
        return 1;
      }
      else
      {
        v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
        result = 0;
        *((_DWORD *)this + 6) = v8;
      }
    }
    else
    {
      if (v7 >= 1)
      {
        *((_DWORD *)this + 6) = v6;
        (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
      }
      return 0;
    }
  }
  else
  {
    result = 0;
    *(_QWORD *)this += a3;
  }
  return result;
}

uint64_t google::protobuf::io::CodedInputStream::Refresh(google::protobuf::io::CodedInputStream *this)
{
  unsigned int *v2;
  int v3;
  int v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  std::string v24[2];

  if (*((_DWORD *)this + 2) != *(_DWORD *)this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 617);
    v2 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (0) == (BufferSize()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, v2);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  v3 = *((_DWORD *)this + 11);
  if (v3 > 0 || *((int *)this + 7) > 0 || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
  {
    v4 = *((_DWORD *)this + 6) - v3;
    v5 = *((_DWORD *)this + 12);
    if (v4 >= v5 && v5 != *((_DWORD *)this + 10))
      google::protobuf::io::CodedInputStream::PrintTotalBytesLimitError(this);
    return 0;
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v7 = *((_QWORD *)this + 2);
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 16))(v7, &v23, &v22);
      v8 = result;
      if (!(_DWORD)result)
      {
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        return result;
      }
      v9 = v22;
    }
    while (!v22);
    v10 = v23 + v22;
    *(_QWORD *)this = v23;
    *((_QWORD *)this + 1) = v10;
    if (v9 < 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 638);
      v11 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (buffer_size) >= (0): ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v21, v11);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
      v9 = v22;
    }
    v12 = *((_DWORD *)this + 6);
    v13 = v12 - (v9 ^ 0x7FFFFFFF);
    if (v12 <= (v9 ^ 0x7FFFFFFF))
    {
      v15 = v9 + v12;
      v14 = *((_QWORD *)this + 1);
    }
    else
    {
      *((_DWORD *)this + 7) = v13;
      v14 = *((_QWORD *)this + 1) - v13;
      *((_QWORD *)this + 1) = v14;
      v15 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 6) = v15;
    v16 = *((_DWORD *)this + 10);
    v17 = v14 + *((int *)this + 11);
    *((_QWORD *)this + 1) = v17;
    v18 = *((_DWORD *)this + 12);
    if (v18 >= v16)
      v18 = v16;
    v19 = __OFSUB__(v15, v18);
    v20 = v15 - v18;
    if ((v20 < 0) ^ v19 | (v20 == 0))
    {
      *((_DWORD *)this + 11) = 0;
    }
    else
    {
      *((_QWORD *)this + 1) = v17 - v20;
      *((_DWORD *)this + 11) = v20;
    }
    return v8;
  }
}

void sub_22DC2EB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2EB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2EB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2EB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::io::CodedInputStream::ReadString(google::protobuf::io::CodedInputStream *this, std::string *a2, std::string::size_type __n)
{
  std::string *v3;
  size_t v6;
  unsigned int *v7;
  char v8;
  std::string v9[2];

  if ((__n & 0x80000000) != 0)
    return 0;
  v3 = a2;
  if (*((_DWORD *)this + 2) - *(_DWORD *)this < (int)__n)
    return google::protobuf::io::CodedInputStream::ReadStringFallback(this, a2, __n);
  v6 = __n;
  std::string::resize(a2, __n, 0);
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (std::string *)v3->__r_.__value_.__r.__words[0];
    if (!v3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 267);
      v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: z.first != NULL: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v7);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
      v3 = 0;
    }
  }
  memcpy(v3, *(const void **)this, v6);
  *(_QWORD *)this += v6;
  return 1;
}

void sub_22DC2EC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2EC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::io::CodedInputStream::ReadStringFallback(google::protobuf::io::CodedInputStream *this, std::string *a2, std::string::size_type __requested_capacity)
{
  int v3;
  int v6;
  int v7;
  BOOL v8;
  int v10;
  const std::string::value_type *v11;
  uint64_t v12;

  v3 = __requested_capacity;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    if (a2->__r_.__value_.__l.__size_)
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0;
    }
  }
  else if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
  }
  v6 = *((_DWORD *)this + 12);
  if (v6 >= *((_DWORD *)this + 10))
    v6 = *((_DWORD *)this + 10);
  if (v6 != 0x7FFFFFFF)
  {
    v7 = v6 - *((_DWORD *)this + 6) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this;
    v8 = v7 < (int)__requested_capacity || (int)__requested_capacity < 1;
    if (!v8 && v7 >= 1)
      std::string::reserve(a2, __requested_capacity);
  }
  while (1)
  {
    v10 = v3;
    v11 = *(const std::string::value_type **)this;
    v12 = *((_QWORD *)this + 1) - *(_QWORD *)this;
    if (v3 <= (int)v12)
      break;
    if ((_DWORD)v12)
    {
      std::string::append(a2, v11, (int)v12);
      *(_QWORD *)this += (int)v12;
      v3 -= v12;
    }
    if ((google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0)
      return v10 <= (int)v12;
  }
  std::string::append(a2, v11, v3);
  *(_QWORD *)this += v3;
  return v10 <= (int)v12;
}

uint64_t google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(unsigned int **this, unsigned int *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  int v6;
  _BYTE *v7;
  unsigned int *v8;
  int64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  _BYTE __dst[4];

  v4 = *this;
  if (((*((_DWORD *)this + 2) - *this) & 0xFFFFFFFC) != 0)
  {
    v5 = v4 + 1;
  }
  else
  {
    v6 = 4;
    v7 = __dst;
    while (1)
    {
      v8 = *this;
      v9 = (char *)this[1] - (char *)*this;
      v10 = v6 - v9;
      if (v6 <= (int)v9)
        break;
      v11 = (int)v9;
      memcpy(v7, *this, (int)v9);
      v7 += v11;
      *this = (unsigned int *)((char *)v8 + v11);
      v12 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
      v6 = v10;
      if ((v12 & 1) == 0)
        return 0;
    }
    v14 = v6;
    memcpy(v7, *this, v6);
    v5 = (unsigned int *)((char *)v8 + v14);
    v4 = (unsigned int *)__dst;
  }
  *this = v5;
  *a2 = *v4;
  return 1;
}

uint64_t google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(unint64_t **this, unint64_t *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  int v6;
  _QWORD *v7;
  unint64_t *v8;
  int64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v4 = *this;
  if (((*((_DWORD *)this + 2) - *this) & 0xFFFFFFF8) != 0)
  {
    v5 = v4 + 1;
  }
  else
  {
    v6 = 8;
    v7 = v15;
    while (1)
    {
      v8 = *this;
      v9 = (char *)this[1] - (char *)*this;
      v10 = v6 - v9;
      if (v6 <= (int)v9)
        break;
      v11 = (int)v9;
      memcpy(v7, *this, (int)v9);
      v7 = (_QWORD *)((char *)v7 + v11);
      *this = (unint64_t *)((char *)v8 + v11);
      v12 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
      v6 = v10;
      if ((v12 & 1) == 0)
        return 0;
    }
    v14 = v6;
    memcpy(v7, *this, v6);
    v5 = (unint64_t *)((char *)v8 + v14);
    v4 = v15;
  }
  *this = v5;
  *a2 = *v4;
  return 1;
}

std::string::size_type google::protobuf::io::CodedInputStream::ReadVarint64Fallback(google::protobuf::io::CodedInputStream *this, uint8x8_t a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  unsigned int *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  char v21;
  std::string v22[2];

  v4 = *(unsigned __int8 **)this;
  v3 = *((_QWORD *)this + 1);
  if ((int)(v3 - *(_QWORD *)this) <= 9 && (v3 <= (unint64_t)v4 || *(char *)(v3 - 1) < 0))
  {
    v22[0].__r_.__value_.__r.__words[0] = 0;
    google::protobuf::io::CodedInputStream::ReadVarint64Slow((char **)this, (unint64_t *)v22);
    return v22[0].__r_.__value_.__r.__words[0];
  }
  v20 = 0;
  if (((char)*v4 & 0x80000000) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 417);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (buffer[0]) >= (128): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v21, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  v6 = v4[1];
  if (((char)v4[1] & 0x80000000) == 0)
  {
    v8 = *v4;
    v7 = (char *)(v4 + 2);
    v9 = v8 + (v6 << 7) - 128;
LABEL_16:
    v20 = v9;
LABEL_17:
    *(_QWORD *)this = v7;
    return v20;
  }
  v11 = v4[2];
  if (((char)v4[2] & 0x80000000) == 0)
  {
    v12 = *v4;
    v7 = (char *)(v4 + 3);
    v13 = (v6 << 7) + (v11 << 14);
    v14 = v12 - 16512;
LABEL_15:
    v9 = v13 + v14;
    goto LABEL_16;
  }
  v15 = v4[3];
  if (((char)v4[3] & 0x80000000) == 0)
  {
    v16 = *v4;
    v7 = (char *)(v4 + 4);
    v13 = (v6 << 7) + (v11 << 14) + (v15 << 21);
    v14 = v16 - 2113664;
    goto LABEL_15;
  }
  v17 = (char)v4[4];
  if ((v17 & 0x80000000) == 0)
  {
    v18 = *v4;
    v7 = (char *)(v4 + 5);
    v13 = (v6 << 7) + (v11 << 14) + (v15 << 21) + ((unint64_t)v17 << 28);
    v14 = v18 - 270549120;
    goto LABEL_15;
  }
  if (((char)v4[5] & 0x80000000) == 0)
  {
LABEL_28:
    v7 = (char *)v19;
    goto LABEL_17;
  }
  if (((char)v4[6] & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  if (((char)v4[7] & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  if (((char)v4[8] & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  if (((char)v4[9] & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  return 0;
}

void sub_22DC2F1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::ReadVarint32Fallback(google::protobuf::io::CodedInputStream *this, int a2, uint8x8_t a3)
{
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t result;
  char v10;
  std::string *v11;
  unsigned int *v12;
  unsigned int *v13;
  std::string *v14;
  unsigned int *v15;
  int v16;
  char v17;
  std::string v18[2];

  v6 = *(unsigned __int8 **)this;
  v5 = *((_QWORD *)this + 1);
  if ((int)(v5 - *(_QWORD *)this) <= 9 && (v5 <= (unint64_t)v6 || *(char *)(v5 - 1) < 0))
  {
    LODWORD(result) = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, a3);
    if ((v10 & 1) != 0)
      return result;
    else
      return -1;
  }
  if (a2)
  {
    if (*v6 == a2)
      goto LABEL_6;
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 462);
    v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (first_byte_or_zero) != (0): ");
    v12 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v11, "Caller should provide us with *buffer_ when buffer is non-empty");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, v12);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    v6 = *(unsigned __int8 **)this;
    if (!**(_BYTE **)this)
    {
LABEL_6:
      if ((a2 & 0x80) != 0)
        goto LABEL_7;
      goto LABEL_15;
    }
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 373);
  v13 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (*buffer) == (first_byte): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, v13);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  if ((a2 & 0x80) != 0)
  {
LABEL_7:
    v7 = a2 + (v6[1] << 7) - 128;
    if (((char)v6[1] & 0x80000000) == 0)
    {
LABEL_8:
      v8 = v6 + 2;
LABEL_32:
      *(_QWORD *)this = v8;
      return v7;
    }
    goto LABEL_16;
  }
LABEL_15:
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 374);
  v14 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (first_byte & 0x80) == (0x80): ");
  v15 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v14, a2);
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, v15);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  v7 = a2 + (v6[1] << 7) - 128;
  if (((char)v6[1] & 0x80000000) == 0)
    goto LABEL_8;
LABEL_16:
  v7 = v7 + (v6[2] << 14) - 0x4000;
  if (((char)v6[2] & 0x80000000) == 0)
  {
    v8 = v6 + 3;
    goto LABEL_32;
  }
  v7 = v7 + (v6[3] << 21) - 0x200000;
  if (((char)v6[3] & 0x80000000) == 0)
  {
    v8 = v6 + 4;
    goto LABEL_32;
  }
  v16 = (char)v6[4];
  v7 = v7 + (v16 << 28) - 0x10000000;
  if ((v16 & 0x80000000) == 0)
  {
    v8 = v6 + 5;
    goto LABEL_32;
  }
  if (((char)v6[5] & 0x80000000) == 0)
  {
    v8 = v6 + 6;
    goto LABEL_32;
  }
  if (((char)v6[6] & 0x80000000) == 0)
  {
    v8 = v6 + 7;
    goto LABEL_32;
  }
  if (((char)v6[7] & 0x80000000) == 0)
  {
    v8 = v6 + 8;
    goto LABEL_32;
  }
  if (((char)v6[8] & 0x80000000) == 0)
  {
    v8 = v6 + 9;
    goto LABEL_32;
  }
  if (((char)v6[9] & 0x80000000) == 0)
  {
    v8 = v6 + 10;
    goto LABEL_32;
  }
  return -1;
}

void sub_22DC2F420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string::size_type google::protobuf::io::CodedInputStream::ReadTagFallback(google::protobuf::io::CodedInputStream *this, int a2, uint8x8_t a3)
{
  char *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int *v8;
  char *v9;
  unsigned int *v10;
  std::string *v11;
  unsigned int *v12;
  std::string::size_type result;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  std::string v20[2];

  v5 = *(char **)this;
  v6 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v7 = (_DWORD)v6 - *(_QWORD *)this;
  if (v7 > 9)
    goto LABEL_4;
  if (v7 < 1)
  {
    if (!v7)
    {
      v15 = *((_DWORD *)this + 11);
      v16 = *((_DWORD *)this + 6);
      if ((v15 > 0 || v16 == *((_DWORD *)this + 10)) && v16 - v15 < *((_DWORD *)this + 12))
        goto LABEL_33;
    }
  }
  else if (((char)*(v6 - 1) & 0x80000000) == 0)
  {
LABEL_4:
    if (*v5 != a2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 537);
      v8 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (first_byte_or_zero) == (buffer_[0]): ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v19, v8);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    v9 = *(char **)this;
    if (!a2)
    {
      result = 0;
      *(_QWORD *)this = v9 + 1;
      return result;
    }
    if (*v9 != a2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 373);
      v10 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (*buffer) == (first_byte): ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v19, v10);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    if ((a2 & 0x80) == 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 374);
      v11 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (first_byte & 0x80) == (0x80): ");
      v12 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v11, a2);
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v19, v12);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    result = a2 + (v9[1] << 7) - 128;
    if ((v9[1] & 0x80000000) == 0)
    {
      *(_QWORD *)this = v9 + 2;
      return result;
    }
    result = result + (v9[2] << 14) - 0x4000;
    if ((v9[2] & 0x80000000) == 0)
    {
      *(_QWORD *)this = v9 + 3;
      return result;
    }
    result = result + (v9[3] << 21) - 0x200000;
    if ((v9[3] & 0x80000000) == 0)
    {
      *(_QWORD *)this = v9 + 4;
      return result;
    }
    v18 = v9[4];
    result = (result + (v18 << 28) - 0x10000000);
    if ((v18 & 0x80000000) == 0)
    {
      *(_QWORD *)this = v9 + 5;
      return result;
    }
    if ((v9[5] & 0x80000000) == 0)
    {
      *(_QWORD *)this = v9 + 6;
      return result;
    }
    if ((v9[6] & 0x80000000) == 0)
    {
      *(_QWORD *)this = v9 + 7;
      return result;
    }
    if ((v9[7] & 0x80000000) == 0)
    {
      *(_QWORD *)this = v9 + 8;
      return result;
    }
    if ((v9[8] & 0x80000000) == 0)
    {
      *(_QWORD *)this = v9 + 9;
      return result;
    }
    if ((v9[9] & 0x80000000) == 0)
    {
      *(_QWORD *)this = v9 + 10;
      return result;
    }
    return 0;
  }
  if (v5 == (char *)v6)
  {
    if (google::protobuf::io::CodedInputStream::Refresh(this))
    {
      v5 = *(char **)this;
      v6 = (unsigned __int8 *)*((_QWORD *)this + 1);
      goto LABEL_19;
    }
    v17 = *((_DWORD *)this + 12);
    if (*((_DWORD *)this + 6) - *((_DWORD *)this + 11) >= v17)
    {
      result = 0;
      *((_BYTE *)this + 36) = *((_DWORD *)this + 10) == v17;
      return result;
    }
LABEL_33:
    result = 0;
    *((_BYTE *)this + 36) = 1;
    return result;
  }
LABEL_19:
  if (v5 < (char *)v6 && (*v5 & 0x80000000) == 0)
  {
    result = *v5;
    *(_QWORD *)this = v5 + 1;
    return result;
  }
  result = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, a3);
  if ((v14 & 1) == 0)
    return 0;
  return result;
}

void sub_22DC2F844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2F8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::ReadVarint64Slow(char **this, unint64_t *a2)
{
  char *v4;
  uint64_t result;
  char v6;
  unint64_t v7;
  char *v8;
  int v9;
  unint64_t v10;
  char v11;
  char *v12;
  int v13;
  unint64_t v14;
  char v15;
  char *v16;
  int v17;
  unint64_t v18;
  char v19;
  char *v20;
  int v21;
  unint64_t v22;
  char v23;
  char *v24;
  int v25;
  unint64_t v26;
  char v27;
  char *v28;
  int v29;
  unint64_t v30;
  char v31;
  char *v32;
  int v33;
  unint64_t v34;
  char v35;
  char *v36;
  int v37;
  unint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  char v42;

  while (1)
  {
    v4 = *this;
    if (*this != this[1])
      break;
    if ((google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this) & 1) == 0)
      goto LABEL_3;
  }
  v6 = *v4;
  v7 = *v4 & 0x7F;
  *this = v4 + 1;
  if ((v6 & 0x80) == 0)
    goto LABEL_6;
  while (1)
  {
    v8 = *this;
    if (*this != this[1])
      break;
    if ((google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this) & 1) == 0)
      goto LABEL_3;
  }
  v9 = *v8;
  v10 = v7 | ((unint64_t)(v9 & 0x7F) << 7);
  *this = v8 + 1;
  v7 = v10;
  if ((v9 & 0x80000000) == 0)
    goto LABEL_6;
  while (1)
  {
    v12 = *this;
    if (*this != this[1])
      break;
    v11 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
    result = 0;
    if ((v11 & 1) == 0)
      goto LABEL_4;
  }
  v13 = *v12;
  v14 = v10 | ((unint64_t)(v13 & 0x7F) << 14);
  *this = v12 + 1;
  v7 = v14;
  if ((v13 & 0x80000000) == 0)
    goto LABEL_6;
  while (1)
  {
    v16 = *this;
    if (*this != this[1])
      break;
    v15 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
    result = 0;
    if ((v15 & 1) == 0)
      goto LABEL_4;
  }
  v17 = *v16;
  v18 = v14 | ((unint64_t)(v17 & 0x7F) << 21);
  *this = v16 + 1;
  v7 = v18;
  if ((v17 & 0x80000000) == 0)
    goto LABEL_6;
  while (1)
  {
    v20 = *this;
    if (*this != this[1])
      break;
    v19 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
    result = 0;
    if ((v19 & 1) == 0)
      goto LABEL_4;
  }
  v21 = *v20;
  v22 = v18 | ((unint64_t)(v21 & 0x7F) << 28);
  *this = v20 + 1;
  v7 = v22;
  if ((v21 & 0x80000000) == 0)
    goto LABEL_6;
  while (1)
  {
    v24 = *this;
    if (*this != this[1])
      break;
    v23 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
    result = 0;
    if ((v23 & 1) == 0)
      goto LABEL_4;
  }
  v25 = *v24;
  v26 = v22 | ((unint64_t)(v25 & 0x7F) << 35);
  *this = v24 + 1;
  v7 = v26;
  if ((v25 & 0x80000000) == 0)
    goto LABEL_6;
  while (1)
  {
    v28 = *this;
    if (*this != this[1])
      break;
    v27 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
    result = 0;
    if ((v27 & 1) == 0)
      goto LABEL_4;
  }
  v29 = *v28;
  v30 = v26 | ((unint64_t)(v29 & 0x7F) << 42);
  *this = v28 + 1;
  v7 = v30;
  if ((v29 & 0x80000000) == 0)
    goto LABEL_6;
  while (1)
  {
    v32 = *this;
    if (*this != this[1])
      break;
    v31 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
    result = 0;
    if ((v31 & 1) == 0)
      goto LABEL_4;
  }
  v33 = *v32;
  v34 = v30 | ((unint64_t)(v33 & 0x7F) << 49);
  *this = v32 + 1;
  v7 = v34;
  if ((v33 & 0x80000000) == 0)
    goto LABEL_6;
  while (1)
  {
    v36 = *this;
    if (*this != this[1])
      break;
    v35 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
    result = 0;
    if ((v35 & 1) == 0)
      goto LABEL_4;
  }
  v37 = *v36;
  v38 = v34 | ((unint64_t)(v37 & 0x7F) << 56);
  *this = v36 + 1;
  v7 = v38;
  if ((v37 & 0x80000000) == 0)
  {
LABEL_6:
    result = 1;
    *a2 = v7;
    return result;
  }
  while (1)
  {
    v39 = *this;
    if (*this != this[1])
      break;
    v40 = google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)this);
    result = 0;
    if ((v40 & 1) == 0)
      goto LABEL_4;
  }
  v42 = *v39;
  v41 = *v39;
  *this = v39 + 1;
  if ((v42 & 0x80) == 0)
  {
    result = 1;
    *a2 = v38 | (v41 << 63);
    return result;
  }
LABEL_3:
  result = 0;
LABEL_4:
  *a2 = 0;
  return result;
}

unint64_t google::protobuf::io::EpsCopyOutputStream::Flush(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  void *v4;
  unint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  char v14;
  std::string v15[2];

  do
  {
    v5 = *(_QWORD *)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (!v4)
    {
      v9 = v5 - (_QWORD)a2;
      v10 = v9 + 16;
      *((_QWORD *)this + 1) = a2;
      if ((((_DWORD)v9 + 16) & 0x80000000) == 0)
        return v10;
LABEL_12:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 700);
      v12 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: s >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, v12);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
      return v10;
    }
    v6 = (_DWORD)a2 - v5;
    if ((unint64_t)a2 <= v5)
    {
      memcpy(v4, (char *)this + 16, a2 - ((char *)this + 16));
      v11 = *(_QWORD *)this;
      *((_QWORD *)this + 1) += a2 - ((char *)this + 16);
      v10 = v11 - (_QWORD)a2;
      if ((((_DWORD)v11 - (_DWORD)a2) & 0x80000000) == 0)
        return v10;
      goto LABEL_12;
    }
    if (*((_BYTE *)this + 56))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 685);
      v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: !had_error_: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, v7);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    if (v6 >= 17)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 686);
      v8 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, v8);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[v6];
  }
  while (!*((_BYTE *)this + 56));
  return 0;
}

void sub_22DC2FCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2FCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2FD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2FD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2FD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2FD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Next(google::protobuf::io::EpsCopyOutputStream *this)
{
  unsigned int *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  std::string::size_type v7;
  unsigned int *v9;
  std::string::size_type v10;
  char v11;
  int v12;
  std::string v13[2];

  if (*((_BYTE *)this + 56))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 788);
    v2 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !had_error_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, v2);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)this + 6))
  {
    v3 = (char *)this + 16;
    v5 = *(char **)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (v4)
    {
      memcpy(v4, (char *)this + 16, v5 - v3);
      v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(_QWORD, std::string *, int *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), v13, &v12) & 1) == 0)
        {
          *((_BYTE *)this + 56) = 1;
          goto LABEL_12;
        }
        v6 = v12;
      }
      while (!v12);
      v7 = v13[0].__r_.__value_.__r.__words[0];
      if (v12 < 17)
      {
        if (v12 <= 0)
        {
          v10 = v13[0].__r_.__value_.__r.__words[0];
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 810);
          v9 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: size > 0: ");
          google::protobuf::internal::LogFinisher::operator=((uint64_t)&v11, v9);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
          LODWORD(v6) = v12;
          v7 = v10;
        }
        *(_OWORD *)v3 = *(_OWORD *)*(_QWORD *)this;
        *(_QWORD *)this = &v3[(int)v6];
        *((_QWORD *)this + 1) = v7;
        return (char *)this + 16;
      }
      else
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)this;
        *(_QWORD *)this = v7 + v6 - 16;
        *((_QWORD *)this + 1) = 0;
        return (char *)v7;
      }
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)v5;
      *(_QWORD *)this = (char *)this + 32;
      *((_QWORD *)this + 1) = v5;
      return (char *)this + 16;
    }
  }
  else
  {
    *((_BYTE *)this + 56) = 1;
    v3 = (char *)this + 16;
LABEL_12:
    *(_QWORD *)this = (char *)this + 32;
    return v3;
  }
}

void sub_22DC2FF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2FF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2FF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC2FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::EpsCopyOutputStream::FlushAndResetBuffer(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  uint64_t result;
  int v4;
  char *v5;
  uint64_t v6;

  if (*((_BYTE *)this + 56))
    return (uint64_t)this + 16;
  v4 = google::protobuf::io::EpsCopyOutputStream::Flush(this, a2);
  if (*((_BYTE *)this + 56))
    return (uint64_t)this + 16;
  v5 = (char *)(*((_QWORD *)this + 1) + v4 - 16);
  if (v4 > 16)
  {
    v6 = 0;
  }
  else
  {
    v5 = (char *)this + v4 + 16;
    v6 = *((_QWORD *)this + 1);
  }
  if (v4 <= 16)
    result = (uint64_t)this + 16;
  else
    result = *((_QWORD *)this + 1);
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = v6;
  return result;
}

char *google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  char *v3;
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  while (!*((_BYTE *)this + 56))
  {
    v3 = &a2[-*(_QWORD *)this];
    if ((v3 & 0x80000000) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 829);
      v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    }
    else
    {
      if (v3 <= 0x10)
        goto LABEL_3;
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.cc", 830);
      v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
    }
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
LABEL_3:
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[(int)v3];
    if ((unint64_t)a2 < *(_QWORD *)this)
      return a2;
  }
  return (char *)this + 16;
}

void sub_22DC300CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC300E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC300F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC30108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(google::protobuf::io::EpsCopyOutputStream *this, char *__src, int a3, char *__dst)
{
  char *v4;
  uint64_t v8;
  unsigned int *v9;
  int i;
  uint64_t v11;
  unsigned int *v12;
  char v14;
  std::string v15[2];

  v4 = __dst;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this + 16 < (unint64_t)__dst)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.h", 838);
    v9 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, v9);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)this;
  }
  for (i = v8 - (_DWORD)v4 + 16; a3 > i; i = v11 - (_DWORD)v4 + 16)
  {
    memcpy(v4, __src, i);
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, &v4[i]);
    v11 = *(_QWORD *)this;
    if (*(_QWORD *)this + 16 < (unint64_t)v4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.h", 838);
      v12 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: ptr <= end_ + kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, v12);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
      v11 = *(_QWORD *)this;
    }
    a3 -= i;
    __src += i;
  }
  memcpy(v4, __src, a3);
  return &v4[a3];
}

void sub_22DC30278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC3028C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC302A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC302B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(google::protobuf::io::EpsCopyOutputStream *this, char *__src, uint64_t a3, char *a4)
{
  char *v4;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  char v13;
  std::string v14[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this + 16 < (unint64_t)a4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.h", 838);
    v9 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, v9);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    v8 = *(_QWORD *)this;
  }
  v10 = v8 - (_QWORD)v4;
  if (v10 + 16 <= (int)a3)
  {
    if (!*((_BYTE *)this + 56))
    {
      v11 = google::protobuf::io::EpsCopyOutputStream::Flush(this, v4);
      if ((_DWORD)v11)
        (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v11);
      v4 = (char *)this + 16;
      *(_QWORD *)this = (char *)this + 16;
      *((_QWORD *)this + 1) = (char *)this + 16;
    }
    if (((*(uint64_t (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), __src, a3) & 1) == 0)
    {
      *((_BYTE *)this + 56) = 1;
      v4 = (char *)this + 16;
      *(_QWORD *)this = (char *)this + 32;
    }
  }
  else if (v10 < (int)a3)
  {
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, __src, a3, v4);
  }
  else
  {
    memcpy(v4, __src, (int)a3);
    v4 += (int)a3;
  }
  return v4;
}

void sub_22DC30410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC30424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, uint64_t a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  char *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*(char *)(a3 + 23) >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.h", 858);
    v10 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v22, v10);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*((_BYTE *)this + 57))
    return google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(this, v18, v9, v17);
  if (*(_QWORD *)this - (_QWORD)v17 < (int)v9)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, v18, v9, v17);
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_22DC30610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC30624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, uint64_t a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  char *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*(char *)(a3 + 23) >= 0)
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.h", 858);
    v10 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v22, v10);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*(_QWORD *)this - (_QWORD)v17 < (int)v9)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, v18, v9, v17);
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_22DC307E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC307F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedOutputStream::CodedOutputStream(uint64_t a1, uint64_t a2, int a3)
{
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;

  v6 = google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ & 1;
  v7 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 48) = a2;
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = v6;
  *(_QWORD *)(a1 + 64) = a1 + 16;
  *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (a3)
  {
    v14 = 0;
    v13 = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a2 + 16))(a2, &v14, &v13) && v13 != 0)
    {
      v9 = v14;
      if (v13 <= 16)
        v10 = v7 + v13;
      else
        v10 = v14 + v13 - 16;
      if (v13 <= 16)
        v11 = v14;
      else
        v11 = 0;
      if (v13 <= 16)
        v9 = v7;
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 64) = v9;
    }
  }
  return a1;
}

void google::protobuf::io::CodedOutputStream::~CodedOutputStream(google::protobuf::io::CodedOutputStream *this)
{
  char *v2;

  v2 = (char *)*((_QWORD *)this + 8);
  if (*((_BYTE *)this + 56))
  {
    *((_QWORD *)this + 8) = v2;
  }
  else
  {
    if (google::protobuf::io::EpsCopyOutputStream::Flush(this, v2))
      (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6));
    *(_QWORD *)this = (char *)this + 16;
    *((_QWORD *)this + 1) = (char *)this + 16;
    *((_QWORD *)this + 8) = (char *)this + 16;
  }
}

unsigned __int8 *google::protobuf::io::`anonymous namespace'::DecodeVarint64KnownSize<6ul>(unsigned __int8 *a1, _QWORD *a2, uint8x8_t a3)
{
  uint32x4_t v3;
  int8x16_t v4;
  int8x16_t v5;
  uint64x2_t v6;

  a3.i32[0] = *(_DWORD *)(a1 + 1);
  v3 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  v5.i64[0] = 255;
  v5.i64[1] = 255;
  v6 = (uint64x2_t)vandq_s8(v4, v5);
  v4.i64[0] = v3.u32[2];
  v4.i64[1] = v3.u32[3];
  *a2 = vaddvq_s64(vaddq_s64((int64x2_t)vshlq_u64(v6, (uint64x2_t)xmmword_22DCF9090), (int64x2_t)vshlq_u64((uint64x2_t)vandq_s8(v4, v5), (uint64x2_t)xmmword_22DCF9080)))+ ((unint64_t)a1[5] << 35)+ *a1- 0x810204080;
  return a1 + 6;
}

unsigned __int8 *google::protobuf::io::`anonymous namespace'::DecodeVarint64KnownSize<7ul>(unsigned __int8 *a1, _QWORD *a2, uint8x8_t a3)
{
  uint32x4_t v3;
  int8x16_t v4;
  int8x16_t v5;
  uint64x2_t v6;

  a3.i32[0] = *(_DWORD *)(a1 + 1);
  v3 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  v5.i64[0] = 255;
  v5.i64[1] = 255;
  v6 = (uint64x2_t)vandq_s8(v4, v5);
  v4.i64[0] = v3.u32[2];
  v4.i64[1] = v3.u32[3];
  *a2 = vaddvq_s64(vaddq_s64((int64x2_t)vshlq_u64(v6, (uint64x2_t)xmmword_22DCF9090), (int64x2_t)vshlq_u64((uint64x2_t)vandq_s8(v4, v5), (uint64x2_t)xmmword_22DCF9080)))+ ((unint64_t)a1[6] << 42)+ (*a1 | ((unint64_t)a1[5] << 35))- 0x40810204080;
  return a1 + 7;
}

unsigned __int8 *google::protobuf::io::`anonymous namespace'::DecodeVarint64KnownSize<8ul>(unsigned __int8 *a1, _QWORD *a2, uint8x8_t a3)
{
  uint32x4_t v3;
  int8x16_t v4;
  int8x16_t v5;
  uint64x2_t v6;

  a3.i32[0] = *(_DWORD *)(a1 + 1);
  v3 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  v5.i64[0] = 255;
  v5.i64[1] = 255;
  v6 = (uint64x2_t)vandq_s8(v4, v5);
  v4.i64[0] = v3.u32[2];
  v4.i64[1] = v3.u32[3];
  *a2 = vaddvq_s64(vaddq_s64((int64x2_t)vshlq_u64(v6, (uint64x2_t)xmmword_22DCF9090), (int64x2_t)vshlq_u64((uint64x2_t)vandq_s8(v4, v5), (uint64x2_t)xmmword_22DCF9080)))+ ((unint64_t)a1[7] << 49)+ ((unint64_t)a1[5] << 35)+ ((unint64_t)a1[6] << 42)+ *a1- 0x2040810204080;
  return a1 + 8;
}

unsigned __int8 *google::protobuf::io::`anonymous namespace'::DecodeVarint64KnownSize<9ul>(unsigned __int8 *a1, _QWORD *a2)
{
  uint16x8_t v2;
  uint32x4_t v3;
  uint64x2_t v4;
  uint64x2_t v5;
  uint32x4_t v6;
  uint64x2_t v7;
  uint64x2_t v8;

  v2 = vmovl_u8(*(uint8x8_t *)(a1 + 1));
  v3 = vmovl_u16(*(uint16x4_t *)v2.i8);
  v4.i64[0] = v3.u32[2];
  v4.i64[1] = v3.u32[3];
  v5 = v4;
  v6 = vmovl_high_u16(v2);
  v4.i64[0] = v6.u32[2];
  v4.i64[1] = v6.u32[3];
  v7 = v4;
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  v8 = v4;
  v4.i64[0] = v6.u32[0];
  v4.i64[1] = v6.u32[1];
  *a2 = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_u64(v8, (uint64x2_t)xmmword_22DCF9090), (int8x16_t)vshlq_u64(v4, (uint64x2_t)xmmword_22DCF90A0)), (int64x2_t)vorrq_s8((int8x16_t)vshlq_u64(v5, (uint64x2_t)xmmword_22DCF9080), (int8x16_t)vshlq_u64(v7, (uint64x2_t)xmmword_22DCF90B0))))+ *a1- 0x102040810204080;
  return a1 + 9;
}

unsigned __int8 *google::protobuf::io::`anonymous namespace'::DecodeVarint64KnownSize<10ul>(unsigned __int8 *a1, _QWORD *a2, uint8x8_t a3)
{
  uint32x4_t v3;
  int8x16_t v4;
  int8x16_t v5;
  uint64x2_t v6;

  a3.i32[0] = *(_DWORD *)(a1 + 1);
  v3 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a3));
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  v5.i64[0] = 255;
  v5.i64[1] = 255;
  v6 = (uint64x2_t)vandq_s8(v4, v5);
  v4.i64[0] = v3.u32[2];
  v4.i64[1] = v3.u32[3];
  *a2 = vaddvq_s64(vaddq_s64((int64x2_t)vshlq_u64(v6, (uint64x2_t)xmmword_22DCF9090), (int64x2_t)vshlq_u64((uint64x2_t)vandq_s8(v4, v5), (uint64x2_t)xmmword_22DCF9080)))+ ((unint64_t)a1[9] << 63)+ ((unint64_t)a1[5] << 35)+ ((unint64_t)a1[6] << 42)+ ((((unint64_t)a1[7] << 49) + ((unint64_t)a1[8] << 56)) | *a1)+ 0x7EFDFBF7EFDFBF80;
  return a1 + 10;
}

void google::protobuf::internal::VerifyVersion(google::protobuf::internal *this, google::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  const std::string::value_type *p_p;
  std::string::size_type v8;
  size_t v9;
  size_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  uint64_t v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  uint64_t v27;
  int v28;
  void *exception;
  void *v30;
  void **__dst;
  std::string::size_type v32;
  int64_t v33;
  void *__p;
  std::string::size_type v35;
  unsigned __int8 v36;
  unsigned int v37;
  const char *v38;
  int v39;
  std::string v40;
  char __str[127];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if ((int)a2 <= 3012002)
    goto LABEL_31;
  v37 = 3;
  v38 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/"
        "protobuf/stubs/common.cc";
  v39 = 76;
  memset(&v40, 0, sizeof(v40));
  std::string::append(&v40, "This program requires version ");
  google::protobuf::internal::VersionString(a2, &__p);
  if ((v36 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v36 & 0x80u) == 0)
    v8 = v36;
  else
    v8 = v35;
  std::string::append(&v40, p_p, v8);
  std::string::append(&v40, " of the Protocol Buffer runtime library, but the installed version is ");
  snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 12, 2);
  v42 = 0;
  v9 = strlen(__str);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    v32 = v10;
    v33 = v13 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_15;
  }
  HIBYTE(v33) = v9;
  p_dst = (void **)&__dst;
  if (v9)
LABEL_15:
    memcpy(p_dst, __str, v10);
  *((_BYTE *)p_dst + v10) = 0;
  if (v33 >= 0)
    v14 = (const std::string::value_type *)&__dst;
  else
    v14 = (const std::string::value_type *)__dst;
  if (v33 >= 0)
    v15 = HIBYTE(v33);
  else
    v15 = v32;
  std::string::append(&v40, v14, v15);
  std::string::append(&v40, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
  std::string::append(&v40, a3);
  std::string::append(&v40, "\".)");
  if (v37 == 3)
  {
    v16 = 3;
LABEL_26:
    google::protobuf::internal::log_handler_(v16, v38, v39, (uint64_t)&v40);
    goto LABEL_27;
  }
  v17 = atomic_load((unsigned int *)&google::protobuf::internal::log_silencer_count_);
  if (v17 <= 0)
  {
    v16 = v37;
    goto LABEL_26;
  }
LABEL_27:
  if (v37 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, (uint64_t)v38, v39, (__int128 *)&v40);
  }
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__dst);
    if (((char)v36 & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
LABEL_64:
      operator delete(v40.__r_.__value_.__l.__data_);
      if ((int)this >= 3012000)
        return;
      goto LABEL_32;
    }
  }
  else if (((char)v36 & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(__p);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_64;
LABEL_31:
  if ((int)this >= 3012000)
    return;
LABEL_32:
  v37 = 3;
  v38 = "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/"
        "protobuf/stubs/common.cc";
  v39 = 87;
  memset(&v40, 0, sizeof(v40));
  std::string::append(&v40, "This program was compiled against version ");
  google::protobuf::internal::VersionString(this, &__p);
  if ((v36 & 0x80u) == 0)
    v18 = (const std::string::value_type *)&__p;
  else
    v18 = (const std::string::value_type *)__p;
  if ((v36 & 0x80u) == 0)
    v19 = v36;
  else
    v19 = v35;
  std::string::append(&v40, v18, v19);
  std::string::append(&v40, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
  snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 12, 2);
  v42 = 0;
  v20 = strlen(__str);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v32 = v21;
    v33 = v24 | 0x8000000000000000;
    __dst = v22;
    goto LABEL_45;
  }
  HIBYTE(v33) = v20;
  v22 = (void **)&__dst;
  if (v20)
LABEL_45:
    memcpy(v22, __str, v21);
  *((_BYTE *)v22 + v21) = 0;
  if (v33 >= 0)
    v25 = (const std::string::value_type *)&__dst;
  else
    v25 = (const std::string::value_type *)__dst;
  if (v33 >= 0)
    v26 = HIBYTE(v33);
  else
    v26 = v32;
  std::string::append(&v40, v25, v26);
  std::string::append(&v40, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
  std::string::append(&v40, a3);
  std::string::append(&v40, "\".)");
  if (v37 == 3)
  {
    v27 = 3;
  }
  else
  {
    v28 = atomic_load((unsigned int *)&google::protobuf::internal::log_silencer_count_);
    if (v28 > 0)
      goto LABEL_57;
    v27 = v37;
  }
  google::protobuf::internal::log_handler_(v27, v38, v39, (uint64_t)&v40);
LABEL_57:
  if (v37 == 3)
  {
    v30 = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)v30, (uint64_t)v38, v39, (__int128 *)&v40);
  }
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    if (((char)v36 & 0x80000000) == 0)
      goto LABEL_60;
LABEL_67:
    operator delete(__p);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_68;
  }
  operator delete(__dst);
  if ((char)v36 < 0)
    goto LABEL_67;
LABEL_60:
  if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_68:
  operator delete(v40.__r_.__value_.__l.__data_);
}

void sub_22DC31100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  __cxa_free_exception(v32);
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a32 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(a27);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::LogMessage::LogMessage(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

unint64_t google::protobuf::internal::VersionString@<X0>(google::protobuf::internal *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t result;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char __str[128];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d.%d.%d", (int)this / 1000000, (int)this / 1000 % 1000, (int)this % 1000);
  __str[127] = 0;
  result = strlen(__str);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = result;
  if (result >= 0x17)
  {
    v5 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v5 = result | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    a2[1] = v4;
    a2[2] = v6 | 0x8000000000000000;
    *a2 = v7;
    a2 = v7;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_9;
  }
  result = (unint64_t)memcpy(a2, __str, v4);
LABEL_9:
  *((_BYTE *)a2 + v4) = 0;
  return result;
}

void google::protobuf::internal::LogFinisher::operator=(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  void *exception;

  if (*a2 == 3)
  {
    v3 = 3;
  }
  else
  {
    v4 = atomic_load((unsigned int *)&google::protobuf::internal::log_silencer_count_);
    if (v4 > 0)
      goto LABEL_6;
    v3 = *a2;
  }
  google::protobuf::internal::log_handler_(v3, *((const char **)a2 + 1), a2[4], (uint64_t)(a2 + 6));
LABEL_6:
  if (*a2 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException((uint64_t)exception, *((_QWORD *)a2 + 1), a2[4], (__int128 *)(a2 + 6));
  }
}

void sub_22DC31450(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::LogMessage::~LogMessage(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t google::protobuf::internal::DefaultLogHandler(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x24BDAC8D8];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[libprotobuf %s %s:%d] %s\n", google::protobuf::internal::DefaultLogHandler(google::protobuf::LogLevel,char const*,int,std::string const&)::level_names[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%u", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

uint64_t google::protobuf::FatalException::FatalException(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24F987DC8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_22DC316E8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::FatalException::~FatalException(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_24F987DC8;
  if (SHIBYTE(this[5].__vftable) < 0)
  {
    operator delete(this[3].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_24F987DC8;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t google::protobuf::ghtonl(google::protobuf *this)
{
  return bswap32(this);
}

uint64_t google::protobuf::FatalException::what(google::protobuf::FatalException *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

google::protobuf::DescriptorPool::Tables *google::protobuf::DescriptorPool::Tables::Tables(google::protobuf::DescriptorPool::Tables *this)
{
  char *v2;
  size_t prime;
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  size_t v27;
  unint64_t v28;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v37;
  __int128 v38;
  int v39;
  void *v40;
  __int128 v41;
  int v42;
  void *v43;
  __int128 v44;
  int v45;
  void *v46;
  __int128 v47;
  int v48;
  void *v49;
  __int128 v50;
  int v51;
  void *v52;
  __int128 v53;
  int v54;
  void *v55;
  __int128 v56;
  int v57;
  void *v58;
  __int128 v59;
  int v60;
  void *v61[2];
  unint64_t v62;
  int v63;
  void *v64[3];
  int v65;
  void *v66[2];
  unint64_t v67;
  int v68;
  void *v69[2];
  unint64_t v70;
  int v71;
  void *v72[2];
  unint64_t v73;
  int v74;
  void *v75[3];
  int v76;
  void *v77[2];
  unint64_t v78;
  int v79;
  char __p[23];
  char v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 24;
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  prime = std::__next_prime(3uLL);
  v4 = prime;
  v5 = *(int8x8_t *)((char *)this + 32);
  if (prime > *(_QWORD *)&v5)
    goto LABEL_2;
  if (prime < *(_QWORD *)&v5)
  {
    v6 = vcvtps_u32_f32((float)*((unint64_t *)this + 6) / *((float *)this + 14));
    if (*(_QWORD *)&v5 < 3uLL || (v7 = (uint8x8_t)vcnt_s8(v5), v7.i16[0] = vaddlv_u8(v7), v7.u32[0] > 1uLL))
    {
      v6 = std::__next_prime(v6);
    }
    else
    {
      v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2)
        v6 = v8;
    }
    if (v4 <= v6)
      v4 = v6;
    if (v4 < *(_QWORD *)&v5)
LABEL_2:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>((uint64_t)v2, v4);
  }
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  v9 = std::__next_prime(3uLL);
  v10 = v9;
  v11 = *(int8x8_t *)((char *)this + 72);
  if (v9 > *(_QWORD *)&v11)
    goto LABEL_14;
  if (v9 < *(_QWORD *)&v11)
  {
    v12 = vcvtps_u32_f32((float)*((unint64_t *)this + 11) / *((float *)this + 24));
    if (*(_QWORD *)&v11 < 3uLL || (v13 = (uint8x8_t)vcnt_s8(v11), v13.i16[0] = vaddlv_u8(v13), v13.u32[0] > 1uLL))
    {
      v12 = std::__next_prime(v12);
    }
    else
    {
      v14 = 1 << -(char)__clz(v12 - 1);
      if (v12 >= 2)
        v12 = v14;
    }
    if (v10 <= v12)
      v10 = v12;
    if (v10 < *(_QWORD *)&v11)
LABEL_14:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>((uint64_t)this + 64, v10);
  }
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  v15 = std::__next_prime(3uLL);
  v16 = v15;
  v17 = *(int8x8_t *)((char *)this + 112);
  if (v15 > *(_QWORD *)&v17)
    goto LABEL_26;
  if (v15 < *(_QWORD *)&v17)
  {
    v18 = vcvtps_u32_f32((float)*((unint64_t *)this + 16) / *((float *)this + 34));
    if (*(_QWORD *)&v17 < 3uLL || (v19 = (uint8x8_t)vcnt_s8(v17), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      v18 = std::__next_prime(v18);
    }
    else
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
    }
    if (v16 <= v18)
      v16 = v18;
    if (v16 < *(_QWORD *)&v17)
LABEL_26:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>((uint64_t)this + 104, v16);
  }
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_DWORD *)this + 84) = 1065353216;
  v21 = std::__next_prime(3uLL);
  v22 = v21;
  v23 = *(int8x8_t *)((char *)this + 312);
  if (v21 > *(_QWORD *)&v23)
    goto LABEL_38;
  if (v21 < *(_QWORD *)&v23)
  {
    v24 = vcvtps_u32_f32((float)*((unint64_t *)this + 41) / *((float *)this + 84));
    if (*(_QWORD *)&v23 < 3uLL || (v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      v24 = std::__next_prime(v24);
    }
    else
    {
      v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2)
        v24 = v26;
    }
    if (v22 <= v24)
      v22 = v24;
    if (v22 < *(_QWORD *)&v23)
LABEL_38:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>((uint64_t)this + 304, v22);
  }
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 94) = 1065353216;
  v27 = std::__next_prime(3uLL);
  v28 = v27;
  v29 = *(int8x8_t *)((char *)this + 352);
  if (v27 > *(_QWORD *)&v29)
    goto LABEL_50;
  if (v27 < *(_QWORD *)&v29)
  {
    v30 = vcvtps_u32_f32((float)*((unint64_t *)this + 46) / *((float *)this + 94));
    if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
    {
      v30 = std::__next_prime(v30);
    }
    else
    {
      v32 = 1 << -(char)__clz(v30 - 1);
      if (v30 >= 2)
        v30 = v32;
    }
    if (v28 <= v30)
      v28 = v30;
    if (v28 < *(_QWORD *)&v29)
LABEL_50:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>((uint64_t)this + 344, v28);
  }
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = (char *)this + 392;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  v37 = operator new(0x20uLL);
  v38 = xmmword_22DCE6520;
  strcpy((char *)v37, "google.protobuf.DoubleValue");
  v39 = 1;
  v40 = operator new(0x20uLL);
  v41 = xmmword_22DCE6010;
  strcpy((char *)v40, "google.protobuf.FloatValue");
  v42 = 2;
  v43 = operator new(0x20uLL);
  v44 = xmmword_22DCE6010;
  strcpy((char *)v43, "google.protobuf.Int64Value");
  v45 = 3;
  v46 = operator new(0x20uLL);
  v47 = xmmword_22DCE6520;
  strcpy((char *)v46, "google.protobuf.UInt64Value");
  v48 = 4;
  v49 = operator new(0x20uLL);
  v50 = xmmword_22DCE6010;
  strcpy((char *)v49, "google.protobuf.Int32Value");
  v51 = 5;
  v52 = operator new(0x20uLL);
  v53 = xmmword_22DCE6520;
  strcpy((char *)v52, "google.protobuf.UInt32Value");
  v54 = 6;
  v55 = operator new(0x20uLL);
  v56 = xmmword_22DCE6520;
  strcpy((char *)v55, "google.protobuf.StringValue");
  v57 = 7;
  v58 = operator new(0x20uLL);
  v59 = xmmword_22DCE6010;
  strcpy((char *)v58, "google.protobuf.BytesValue");
  v60 = 8;
  v61[0] = operator new(0x20uLL);
  v61[1] = (void *)25;
  v62 = 0x8000000000000020;
  strcpy((char *)v61[0], "google.protobuf.BoolValue");
  v63 = 9;
  HIBYTE(v64[2]) = 19;
  strcpy((char *)v64, "google.protobuf.Any");
  v65 = 10;
  v66[0] = operator new(0x20uLL);
  v66[1] = (void *)25;
  v67 = 0x8000000000000020;
  strcpy((char *)v66[0], "google.protobuf.FieldMask");
  v68 = 11;
  v33 = operator new(0x20uLL);
  v70 = 0x8000000000000020;
  v69[0] = v33;
  v69[1] = (void *)24;
  strcpy((char *)v33, "google.protobuf.Duration");
  v71 = 12;
  v34 = operator new(0x20uLL);
  v73 = 0x8000000000000020;
  v72[0] = v34;
  v72[1] = (void *)25;
  strcpy((char *)v34, "google.protobuf.Timestamp");
  v74 = 13;
  HIBYTE(v75[2]) = 21;
  strcpy((char *)v75, "google.protobuf.Value");
  v76 = 14;
  v35 = operator new(0x20uLL);
  v78 = 0x8000000000000020;
  v77[0] = v35;
  v77[1] = (void *)25;
  strcpy((char *)v35, "google.protobuf.ListValue");
  v79 = 15;
  strcpy(__p, "google.protobuf.Struct");
  v81 = 22;
  v82 = 16;
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)&v37, (uint64_t)&v37);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)&v40, (uint64_t)&v40);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)&v43, (uint64_t)&v43);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)&v46, (uint64_t)&v46);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)&v49, (uint64_t)&v49);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)&v52, (uint64_t)&v52);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)&v55, (uint64_t)&v55);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)&v58, (uint64_t)&v58);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)v61, (uint64_t)v61);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)v64, (uint64_t)v64);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)v66, (uint64_t)v66);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)v69, (uint64_t)v69);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)v72, (uint64_t)v72);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)v75, (uint64_t)v75);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)v77, (uint64_t)v77);
  std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>((uint64_t)this + 144, (uint64_t)__p, (uint64_t)__p);
  if (v81 < 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v78) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v75[2]) & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_80;
    }
  }
  else if ((SHIBYTE(v78) & 0x80000000) == 0)
  {
    goto LABEL_63;
  }
  operator delete(v77[0]);
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0)
  {
LABEL_64:
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_65;
    goto LABEL_81;
  }
LABEL_80:
  operator delete(v75[0]);
  if ((SHIBYTE(v73) & 0x80000000) == 0)
  {
LABEL_65:
    if ((SHIBYTE(v70) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v72[0]);
  if ((SHIBYTE(v70) & 0x80000000) == 0)
  {
LABEL_66:
    if ((SHIBYTE(v67) & 0x80000000) == 0)
      goto LABEL_67;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(v69[0]);
  if ((SHIBYTE(v67) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v66[0]);
  if ((SHIBYTE(v64[2]) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v62) & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_85;
  }
LABEL_84:
  operator delete(v64[0]);
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v59) & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_86;
  }
LABEL_85:
  operator delete(v61[0]);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_70:
    if ((SHIBYTE(v56) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_87;
  }
LABEL_86:
  operator delete(v58);
  if ((SHIBYTE(v56) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(v53) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_88;
  }
LABEL_87:
  operator delete(v55);
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v50) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_89;
  }
LABEL_88:
  operator delete(v52);
  if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_74:
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_91;
  }
LABEL_90:
  operator delete(v46);
  if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_76;
LABEL_92:
    operator delete(v40);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
      return this;
LABEL_93:
    operator delete(v37);
    return this;
  }
LABEL_91:
  operator delete(v43);
  if (SHIBYTE(v41) < 0)
    goto LABEL_92;
LABEL_76:
  if (SHIBYTE(v38) < 0)
    goto LABEL_93;
  return this;
}

void sub_22DC3228C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *exception_objecta, void **a10, _QWORD **a11, uint64_t a12, uint64_t a13, _QWORD *a14, _QWORD *a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void **v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;

  v32 = v31;
  do
  {
    if (*((char *)v32 - 9) < 0)
      operator delete(*(v32 - 4));
    v32 -= 4;
  }
  while (v32 != &__p);
  v33 = *(void **)(v29 + 480);
  if (v33)
  {
    *(_QWORD *)(v29 + 488) = v33;
    operator delete(v33);
    v34 = *(void **)(v29 + 456);
    if (!v34)
    {
LABEL_7:
      v35 = v29 + 384;
      v36 = *(void **)(v29 + 432);
      if (!v36)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else
  {
    v34 = *(void **)(v29 + 456);
    if (!v34)
      goto LABEL_7;
  }
  *(_QWORD *)(v29 + 464) = v34;
  operator delete(v34);
  v35 = v29 + 384;
  v36 = *(void **)(v29 + 432);
  if (!v36)
  {
LABEL_8:
    v37 = *a10;
    if (!*a10)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_13:
  *(_QWORD *)(v29 + 440) = v36;
  operator delete(v36);
  v37 = *a10;
  if (!*a10)
  {
LABEL_10:
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v35, *a11);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a12);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a13);
    std::vector<std::unique_ptr<google::protobuf::FileDescriptorTables>>::~vector[abi:ne180100](a14);
    std::vector<std::unique_ptr<std::once_flag>>::~vector[abi:ne180100]((_QWORD *)(v30 + 112));
    std::vector<std::unique_ptr<operations_research::sat::SubSolver>>::~vector[abi:ne180100](a15);
    std::vector<std::unique_ptr<std::string>>::~vector[abi:ne180100]((_QWORD *)(v30 + 64));
    std::vector<std::vector<int>>::~vector[abi:ne180100](a16);
    std::unordered_map<std::string,google::protobuf::Descriptor::WellKnownType>::~unordered_map[abi:ne180100](v30);
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a17);
    std::unordered_map<std::string,google::protobuf::Descriptor::WellKnownType>::~unordered_map[abi:ne180100](a18);
    std::unordered_map<std::string,google::protobuf::Descriptor::WellKnownType>::~unordered_map[abi:ne180100](a19);
    operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector((void **)v29);
    _Unwind_Resume(a1);
  }
LABEL_9:
  *(_QWORD *)(v29 + 416) = v37;
  operator delete(v37);
  goto LABEL_10;
}

_QWORD *std::vector<std::unique_ptr<google::protobuf::FileDescriptorTables>>::~vector[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::mutex *v5;
  std::mutex *v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (std::mutex *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          google::protobuf::FileDescriptorTables::~FileDescriptorTables(v5);
          MEMORY[0x22E31DF78]();
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::vector<std::unique_ptr<std::once_flag>>::~vector[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          MEMORY[0x22E31DF78](v5, 0x1000C4000313F17);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::vector<std::unique_ptr<std::string>>::~vector[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x22E31DF78](v5, 0x1012C40EC159624);
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unordered_map<std::string,google::protobuf::Descriptor::WellKnownType>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void google::protobuf::DescriptorPool::Tables::~Tables(google::protobuf::DescriptorPool::Tables *this)
{
  unsigned int *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  std::mutex *v16;
  std::mutex *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void **v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void **v44;
  void *v45;
  void **v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void **v51;
  void **v52;
  void **v53;
  char v54;
  std::string v55[2];

  if (*((_QWORD *)this + 51) != *((_QWORD *)this + 52))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v55, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 830);
    v2 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v55, "CHECK failed: checkpoints_.empty(): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v54, v2);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v55[0].__r_.__value_.__l.__data_);
  }
  v3 = (void *)*((_QWORD *)this + 60);
  if (v3)
  {
    *((_QWORD *)this + 61) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 57);
  if (v4)
  {
    *((_QWORD *)this + 58) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 54);
  if (v5)
  {
    *((_QWORD *)this + 55) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 51);
  if (v6)
  {
    *((_QWORD *)this + 52) = v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)this + 384, *((_QWORD **)this + 49));
  v7 = (_QWORD *)*((_QWORD *)this + 45);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v9)
    operator delete(v9);
  v10 = (_QWORD *)*((_QWORD *)this + 40);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v12)
    operator delete(v12);
  v13 = (_QWORD *)*((_QWORD *)this + 35);
  if (v13)
  {
    v14 = (_QWORD *)*((_QWORD *)this + 36);
    v15 = (void *)*((_QWORD *)this + 35);
    if (v14 != v13)
    {
      do
      {
        v17 = (std::mutex *)*--v14;
        v16 = v17;
        *v14 = 0;
        if (v17)
        {
          google::protobuf::FileDescriptorTables::~FileDescriptorTables(v16);
          MEMORY[0x22E31DF78]();
        }
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v13;
    operator delete(v15);
  }
  v18 = (_QWORD *)*((_QWORD *)this + 32);
  if (v18)
  {
    v19 = (_QWORD *)*((_QWORD *)this + 33);
    v20 = (void *)*((_QWORD *)this + 32);
    if (v19 != v18)
    {
      do
      {
        v22 = *--v19;
        v21 = v22;
        *v19 = 0;
        if (v22)
          MEMORY[0x22E31DF78](v21, 0x1000C4000313F17);
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v18;
    operator delete(v20);
  }
  v23 = (_QWORD *)*((_QWORD *)this + 29);
  if (v23)
  {
    v24 = (_QWORD *)*((_QWORD *)this + 30);
    v25 = (void *)*((_QWORD *)this + 29);
    if (v24 != v23)
    {
      do
      {
        v27 = *--v24;
        v26 = v27;
        *v24 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
      while (v24 != v23);
      v25 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v23;
    operator delete(v25);
  }
  v28 = (_QWORD *)*((_QWORD *)this + 26);
  if (v28)
  {
    v29 = (_QWORD *)*((_QWORD *)this + 27);
    v30 = (void *)*((_QWORD *)this + 26);
    if (v29 != v28)
    {
      do
      {
        v32 = *--v29;
        v31 = v32;
        *v29 = 0;
        if (v32)
        {
          if (*(char *)(v31 + 23) < 0)
            operator delete(*(void **)v31);
          MEMORY[0x22E31DF78](v31, 0x1012C40EC159624);
        }
      }
      while (v29 != v28);
      v30 = (void *)*((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 27) = v28;
    operator delete(v30);
  }
  v33 = *((_QWORD *)this + 23);
  if (v33)
  {
    v34 = *((_QWORD *)this + 24);
    v35 = (void *)*((_QWORD *)this + 23);
    if (v34 != v33)
    {
      v36 = *((_QWORD *)this + 24);
      do
      {
        v38 = *(void **)(v36 - 24);
        v36 -= 24;
        v37 = v38;
        if (v38)
        {
          *(_QWORD *)(v34 - 16) = v37;
          operator delete(v37);
        }
        v34 = v36;
      }
      while (v36 != v33);
      v35 = (void *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v33;
    operator delete(v35);
  }
  v39 = (void **)*((_QWORD *)this + 20);
  if (v39)
  {
    do
    {
      v51 = (void **)*v39;
      if (*((char *)v39 + 39) < 0)
        operator delete(v39[2]);
      operator delete(v39);
      v39 = v51;
    }
    while (v51);
  }
  v40 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v40)
    operator delete(v40);
  v41 = (_QWORD *)*((_QWORD *)this + 15);
  if (v41)
  {
    do
    {
      v42 = (_QWORD *)*v41;
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
  v43 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v43)
    operator delete(v43);
  v44 = (void **)*((_QWORD *)this + 10);
  if (v44)
  {
    do
    {
      v52 = (void **)*v44;
      if (*((char *)v44 + 39) < 0)
        operator delete(v44[2]);
      operator delete(v44);
      v44 = v52;
    }
    while (v52);
  }
  v45 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v45)
    operator delete(v45);
  v46 = (void **)*((_QWORD *)this + 5);
  if (v46)
  {
    do
    {
      v53 = (void **)*v46;
      if (*((char *)v46 + 39) < 0)
        operator delete(v46[2]);
      operator delete(v46);
      v46 = v53;
    }
    while (v53);
  }
  v47 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v47)
    operator delete(v47);
  v48 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v49 = *((_QWORD *)this + 1);
    v50 = *(void **)this;
    if (v49 != v48)
    {
      do
      {
        if (*(char *)(v49 - 1) < 0)
          operator delete(*(void **)(v49 - 24));
        v49 -= 24;
      }
      while (v49 != v48);
      v50 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v48;
    operator delete(v50);
  }
}

google::protobuf::FileDescriptorTables *google::protobuf::FileDescriptorTables::FileDescriptorTables(google::protobuf::FileDescriptorTables *this)
{
  uint64_t v2;
  uint64_t v3;
  size_t prime;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = 1065353216;
  *((_QWORD *)this + 10) = v2;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 1065353216;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  *((_QWORD *)this + 17) = v3;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1065353216;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 1065353216;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 66) = 1065353216;
  *((_QWORD *)this + 38) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 78) = 1065353216;
  prime = std::__next_prime(3uLL);
  v5 = prime;
  v6 = *(int8x8_t *)((char *)this + 288);
  if (prime > *(_QWORD *)&v6)
    goto LABEL_2;
  if (prime < *(_QWORD *)&v6)
  {
    v7 = vcvtps_u32_f32((float)*((unint64_t *)this + 38) / *((float *)this + 78));
    if (*(_QWORD *)&v6 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v6), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (v5 <= v7)
      v5 = v7;
    if (v5 < *(_QWORD *)&v6)
LABEL_2:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>((uint64_t)this + 280, v5);
  }
  *((_QWORD *)this + 40) = 850045863;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  return this;
}

void sub_22DC32E24(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v8 = (_QWORD *)v1[31];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *v6;
  *v6 = 0;
  if (v10)
    operator delete(v10);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v5);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v4);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::unordered_map<std::pair<void const*,char const*>,google::protobuf::FieldDescriptor const*,google::protobuf::`anonymous namespace'::PointerStringPairHash,google::protobuf::`anonymous namespace'::PointerStringPairEqual,std::allocator<std::pair<std::pair<void const*,char const*> const,google::protobuf::FieldDescriptor const*>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    MEMORY[0x22E31DF78](v2, 0x10A0C408EF24B1CLL);
  }
  return a1;
}

void google::protobuf::FileDescriptorTables::~FileDescriptorTables(std::mutex *this)
{
  void **v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *sig;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void **v30;

  std::mutex::~mutex(this + 5);
  v2 = *(void ***)&this[4].__m_.__opaque[32];
  if (v2)
  {
    do
    {
      v30 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v30;
    }
    while (v30);
  }
  v3 = *(void **)&this[4].__m_.__opaque[16];
  *(_QWORD *)&this[4].__m_.__opaque[16] = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)&this[3].__m_.__opaque[48];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)&this[3].__m_.__opaque[32];
  *(_QWORD *)&this[3].__m_.__opaque[32] = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD **)&this[3].__m_.__opaque[8];
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  sig = (void *)this[3].__m_.__sig;
  this[3].__m_.__sig = 0;
  if (sig)
    operator delete(sig);
  v10 = *(_QWORD **)&this[2].__m_.__opaque[32];
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = *(void **)&this[2].__m_.__opaque[16];
  *(_QWORD *)&this[2].__m_.__opaque[16] = 0;
  if (v12)
    operator delete(v12);
  v13 = *(_QWORD *)this[2].__m_.__opaque;
  *(_QWORD *)this[2].__m_.__opaque = 0;
  if (v13)
  {
    v14 = *(_QWORD **)(v13 + 16);
    if (v14)
    {
      do
      {
        v15 = (_QWORD *)*v14;
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
    v16 = *(void **)v13;
    *(_QWORD *)v13 = 0;
    if (v16)
      operator delete(v16);
    MEMORY[0x22E31DF78](v13, 0x10A0C408EF24B1CLL);
  }
  v17 = *(_QWORD **)&this[1].__m_.__opaque[40];
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = *(void **)&this[1].__m_.__opaque[24];
  *(_QWORD *)&this[1].__m_.__opaque[24] = 0;
  if (v19)
    operator delete(v19);
  v20 = *(_QWORD *)&this[1].__m_.__opaque[8];
  *(_QWORD *)&this[1].__m_.__opaque[8] = 0;
  if (v20)
  {
    v21 = *(_QWORD **)(v20 + 16);
    if (v21)
    {
      do
      {
        v22 = (_QWORD *)*v21;
        operator delete(v21);
        v21 = v22;
      }
      while (v22);
    }
    v23 = *(void **)v20;
    *(_QWORD *)v20 = 0;
    if (v23)
      operator delete(v23);
    MEMORY[0x22E31DF78](v20, 0x10A0C408EF24B1CLL);
  }
  v24 = *(_QWORD **)&this->__m_.__opaque[48];
  if (v24)
  {
    do
    {
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  v26 = *(void **)&this->__m_.__opaque[32];
  *(_QWORD *)&this->__m_.__opaque[32] = 0;
  if (v26)
    operator delete(v26);
  v27 = *(_QWORD **)&this->__m_.__opaque[8];
  if (v27)
  {
    do
    {
      v28 = (_QWORD *)*v27;
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
  v29 = (void *)this->__m_.__sig;
  this->__m_.__sig = 0;
  if (v29)
    operator delete(v29);
}

void google::protobuf::DescriptorPool::Tables::AddCheckpoint(google::protobuf::DescriptorPool::Tables *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char **v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = (*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 3;
  v3 = (*((_QWORD *)this + 30) - *((_QWORD *)this + 29)) >> 3;
  v4 = (*((_QWORD *)this + 33) - *((_QWORD *)this + 32)) >> 3;
  v5 = (*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 3;
  v6 = -1431655765 * ((*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3);
  v7 = (*((_QWORD *)this + 55) - *((_QWORD *)this + 54)) >> 3;
  v8 = (*((_QWORD *)this + 58) - *((_QWORD *)this + 57)) >> 3;
  v9 = (*((_QWORD *)this + 61) - *((_QWORD *)this + 60)) >> 4;
  v11 = (char *)*((_QWORD *)this + 52);
  v10 = *((_QWORD *)this + 53);
  if ((unint64_t)v11 >= v10)
  {
    v13 = (char **)((char *)this + 408);
    v14 = (char *)*((_QWORD *)this + 51);
    v15 = (v11 - v14) >> 5;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 59)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v22 = (char **)((char *)this + 408);
      v23 = (*((_QWORD *)this + 33) - *((_QWORD *)this + 32)) >> 3;
      v24 = (*((_QWORD *)this + 30) - *((_QWORD *)this + 29)) >> 3;
      v25 = (*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 3;
      if (v18 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (char *)operator new(32 * v18);
      LODWORD(v3) = v24;
      LODWORD(v2) = v25;
      v13 = v22;
      LODWORD(v4) = v23;
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[32 * v15];
    *(_DWORD *)v20 = v2;
    *((_DWORD *)v20 + 1) = v3;
    *((_DWORD *)v20 + 2) = v4;
    *((_DWORD *)v20 + 3) = v5;
    *((_DWORD *)v20 + 4) = v6;
    *((_DWORD *)v20 + 5) = v7;
    v12 = v20 + 32;
    *((_DWORD *)v20 + 6) = v8;
    *((_DWORD *)v20 + 7) = v9;
    if (v11 != v14)
    {
      do
      {
        v21 = *((_OWORD *)v11 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v11 - 2);
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 32;
        v11 -= 32;
      }
      while (v11 != v14);
      v11 = *v13;
    }
    *((_QWORD *)this + 51) = v20;
    *((_QWORD *)this + 52) = v12;
    *((_QWORD *)this + 53) = &v19[32 * v18];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_DWORD *)v11 = v2;
    *((_DWORD *)v11 + 1) = v3;
    *((_DWORD *)v11 + 2) = v4;
    *((_DWORD *)v11 + 3) = v5;
    *((_DWORD *)v11 + 4) = v6;
    *((_DWORD *)v11 + 5) = v7;
    v12 = v11 + 32;
    *((_DWORD *)v11 + 6) = v8;
    *((_DWORD *)v11 + 7) = v9;
  }
  *((_QWORD *)this + 52) = v12;
}

void google::protobuf::DescriptorPool::Tables::ClearLastCheckpoint(google::protobuf::DescriptorPool::Tables *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  std::string v9[2];

  v2 = *((_QWORD *)this + 51);
  v3 = *((_QWORD *)this + 52);
  if (v2 != v3)
  {
    v4 = v3 - 32;
    *((_QWORD *)this + 52) = v4;
    if (v2 != v4)
      return;
LABEL_5:
    *((_QWORD *)this + 55) = *((_QWORD *)this + 54);
    *((_QWORD *)this + 58) = *((_QWORD *)this + 57);
    *((_QWORD *)this + 61) = *((_QWORD *)this + 60);
    return;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 857);
  v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: !checkpoints_.empty(): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v5);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  v6 = *((_QWORD *)this + 51);
  v7 = *((_QWORD *)this + 52) - 32;
  *((_QWORD *)this + 52) = v7;
  if (v6 == v7)
    goto LABEL_5;
}

void sub_22DC33480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC33494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorPool::Tables::RollbackToLastCheckpoint(google::protobuf::DescriptorPool::Tables *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t **v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  std::mutex *v53;
  std::mutex *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  char v63;
  std::string __p[2];

  v2 = *((_QWORD *)this + 52);
  if (*((_QWORD *)this + 51) == v2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 869);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: !checkpoints_.empty(): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v63, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    v2 = *((_QWORD *)this + 52);
    v3 = *(int *)(v2 - 12);
    v4 = *((_QWORD *)this + 54);
    if (v3 >= (*((_QWORD *)this + 55) - v4) >> 3)
      goto LABEL_10;
  }
  else
  {
    v3 = *(int *)(v2 - 12);
    v4 = *((_QWORD *)this + 54);
    if (v3 >= (*((_QWORD *)this + 55) - v4) >> 3)
      goto LABEL_10;
  }
  v6 = 8 * v3;
  do
  {
    v7 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>((_QWORD *)this + 38, (const char **)(v4 + v6));
    if (v7)
    {
      std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::remove((_QWORD *)this + 38, v7, (uint64_t)__p);
      v8 = (void *)__p[0].__r_.__value_.__r.__words[0];
      __p[0].__r_.__value_.__r.__words[0] = 0;
      if (v8)
        operator delete(v8);
    }
    ++v3;
    v4 = *((_QWORD *)this + 54);
    v6 += 8;
  }
  while (v3 < (*((_QWORD *)this + 55) - v4) >> 3);
LABEL_10:
  v9 = *(int *)(v2 - 8);
  v10 = *((_QWORD *)this + 57);
  if (v9 < (*((_QWORD *)this + 58) - v10) >> 3)
  {
    v11 = 8 * v9;
    do
    {
      v12 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>((_QWORD *)this + 43, (const char **)(v10 + v11));
      if (v12)
      {
        std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::remove((_QWORD *)this + 43, v12, (uint64_t)__p);
        v13 = (void *)__p[0].__r_.__value_.__r.__words[0];
        __p[0].__r_.__value_.__r.__words[0] = 0;
        if (v13)
          operator delete(v13);
      }
      ++v9;
      v10 = *((_QWORD *)this + 57);
      v11 += 8;
    }
    while (v9 < (*((_QWORD *)this + 58) - v10) >> 3);
  }
  v14 = *(int *)(v2 - 4);
  v15 = *((_QWORD *)this + 60);
  if (v14 < (*((_QWORD *)this + 61) - v15) >> 4)
  {
    v16 = 16 * v14;
    do
    {
      std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::__erase_unique<std::pair<google::protobuf::Descriptor const*,int>>((uint64_t **)this + 48, (unint64_t *)(v15 + v16));
      ++v14;
      v15 = *((_QWORD *)this + 60);
      v16 += 16;
    }
    while (v14 < (*((_QWORD *)this + 61) - v15) >> 4);
  }
  v17 = *(int *)(v2 - 12);
  v18 = *((_QWORD *)this + 54);
  v19 = (*((_QWORD *)this + 55) - v18) >> 3;
  if (v17 <= v19)
  {
    if (v17 < v19)
      *((_QWORD *)this + 55) = v18 + 8 * v17;
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 54, v17 - v19);
  }
  v20 = *(int *)(v2 - 8);
  v21 = *((_QWORD *)this + 57);
  v22 = (*((_QWORD *)this + 58) - v21) >> 3;
  if (v20 <= v22)
  {
    if (v20 < v22)
      *((_QWORD *)this + 58) = v21 + 8 * v20;
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)this + 57, v20 - v22);
  }
  v23 = *(int *)(v2 - 4);
  v24 = *((_QWORD *)this + 60);
  v25 = (*((_QWORD *)this + 61) - v24) >> 4;
  if (v23 <= v25)
  {
    if (v23 < v25)
      *((_QWORD *)this + 61) = v24 + 16 * v23;
  }
  else
  {
    std::vector<std::pair<int *,int>>::__append((uint64_t *)this + 60, v23 - v25);
  }
  v26 = *((_QWORD *)this + 26);
  v27 = (_QWORD *)*((_QWORD *)this + 27);
  v28 = *(int *)(v2 - 32);
  v29 = ((uint64_t)v27 - v26) >> 3;
  if (v28 <= v29)
  {
    if (v28 < v29)
    {
      v30 = (_QWORD *)(v26 + 8 * v28);
      while (v27 != v30)
      {
        v32 = *--v27;
        v31 = v32;
        *v27 = 0;
        if (v32)
        {
          if (*(char *)(v31 + 23) < 0)
            operator delete(*(void **)v31);
          MEMORY[0x22E31DF78](v31, 0x1012C40EC159624);
        }
      }
      *((_QWORD *)this + 27) = v30;
    }
  }
  else
  {
    std::vector<std::unique_ptr<std::string>>::__append((_QWORD *)this + 26, v28 - v29);
  }
  v33 = *((_QWORD *)this + 29);
  v34 = (_QWORD *)*((_QWORD *)this + 30);
  v35 = *(int *)(v2 - 28);
  v36 = ((uint64_t)v34 - v33) >> 3;
  v37 = v35 - v36;
  if (v35 <= v36)
  {
    if (v35 < v36)
    {
      v38 = (_QWORD *)(v33 + 8 * v35);
      while (v34 != v38)
      {
        v40 = *--v34;
        v39 = v40;
        *v34 = 0;
        if (v40)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 8))(v39, v37);
      }
      *((_QWORD *)this + 30) = v38;
    }
  }
  else
  {
    std::vector<std::unique_ptr<operations_research::sat::IntegerSumLE>>::__append((_QWORD *)this + 29, v37);
  }
  v41 = *(int *)(v2 - 24);
  v42 = *((_QWORD *)this + 32);
  v43 = (_QWORD *)*((_QWORD *)this + 33);
  v44 = ((uint64_t)v43 - v42) >> 3;
  if (v41 <= v44)
  {
    if (v41 < v44)
    {
      v45 = (_QWORD *)(v42 + 8 * v41);
      while (v43 != v45)
      {
        v47 = *--v43;
        v46 = v47;
        *v43 = 0;
        if (v47)
          MEMORY[0x22E31DF78](v46, 0x1000C4000313F17);
      }
      *((_QWORD *)this + 33) = v45;
    }
  }
  else
  {
    std::vector<std::unique_ptr<std::once_flag>>::__append((_QWORD *)this + 32, v41 - v44);
  }
  v48 = *(int *)(v2 - 20);
  v49 = *((_QWORD *)this + 35);
  v50 = (_QWORD *)*((_QWORD *)this + 36);
  v51 = ((uint64_t)v50 - v49) >> 3;
  if (v48 <= v51)
  {
    if (v48 < v51)
    {
      v52 = (_QWORD *)(v49 + 8 * v48);
      while (v50 != v52)
      {
        v54 = (std::mutex *)*--v50;
        v53 = v54;
        *v50 = 0;
        if (v54)
        {
          google::protobuf::FileDescriptorTables::~FileDescriptorTables(v53);
          MEMORY[0x22E31DF78]();
        }
      }
      *((_QWORD *)this + 36) = v52;
    }
  }
  else
  {
    std::vector<std::unique_ptr<google::protobuf::FileDescriptorTables>>::__append((_QWORD *)this + 35, v48 - v51);
  }
  v56 = *((_QWORD *)this + 23);
  v55 = *((_QWORD *)this + 24);
  v57 = *(int *)(v2 - 16);
  v58 = 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 3);
  if (v57 <= v58)
  {
    if (v57 < v58)
    {
      v59 = v56 + 24 * (int)v57;
      if (v55 != v59)
      {
        v60 = *((_QWORD *)this + 24);
        do
        {
          v62 = *(void **)(v60 - 24);
          v60 -= 24;
          v61 = v62;
          if (v62)
          {
            *(_QWORD *)(v55 - 16) = v61;
            operator delete(v61);
          }
          v55 = v60;
        }
        while (v60 != v59);
      }
      *((_QWORD *)this + 24) = v59;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 184, v57 - v58);
  }
  *((_QWORD *)this + 52) -= 32;
}

void sub_22DC338E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC338FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unint64_t google::protobuf::DescriptorPool::Tables::FindByNameHelper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  char v7;
  void **v8;
  uint64_t v9;
  uint64_t i;
  void **v11;
  uint64_t v12;
  uint64_t j;
  const char *v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  void **v20;
  unint64_t v21;
  const char *v22;
  uint64_t **v23;
  const char *v25;
  uint64_t **v26;
  const char *v27;

  v6 = *(std::mutex **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_7;
  std::mutex::lock(*(std::mutex **)a2);
  if (!a1[11] && !a1[6])
  {
    v25 = *(char *)(a3 + 23) >= 0 ? (const char *)a3 : *(const char **)a3;
    v27 = v25;
    v26 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(a1 + 38, &v27);
    if (v26)
    {
      v17 = v26[3];
      if ((_DWORD)v17)
      {
        v16 = (unint64_t)v17 >> 32;
        goto LABEL_44;
      }
    }
  }
  std::mutex::unlock(v6);
  v6 = *(std::mutex **)a2;
  if (*(_QWORD *)a2)
  {
    std::mutex::lock(*(std::mutex **)a2);
    v7 = 0;
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_20;
  }
  else
  {
LABEL_7:
    v7 = 1;
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_20;
  }
  if (a1[11])
  {
    v8 = (void **)a1[10];
    if (v8)
    {
      do
      {
        v19 = (void **)*v8;
        if (*((char *)v8 + 39) < 0)
          operator delete(v8[2]);
        operator delete(v8);
        v8 = v19;
      }
      while (v19);
    }
    a1[10] = 0;
    v9 = a1[9];
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(a1[8] + 8 * i) = 0;
    }
    a1[11] = 0;
  }
  if (a1[6])
  {
    v11 = (void **)a1[5];
    if (v11)
    {
      do
      {
        v20 = (void **)*v11;
        if (*((char *)v11 + 39) < 0)
          operator delete(v11[2]);
        operator delete(v11);
        v11 = v20;
      }
      while (v20);
    }
    a1[5] = 0;
    v12 = a1[4];
    if (v12)
    {
      for (j = 0; j != v12; ++j)
        *(_QWORD *)(a1[3] + 8 * j) = 0;
    }
    a1[6] = 0;
  }
LABEL_20:
  if (*(char *)(a3 + 23) >= 0)
    v14 = (const char *)a3;
  else
    v14 = *(const char **)a3;
  v27 = v14;
  v15 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(a1 + 38, &v27);
  if (v15)
  {
    LODWORD(v17) = *((_DWORD *)v15 + 6);
    v16 = *((unsigned int *)v15 + 7);
    if ((_DWORD)v17)
      goto LABEL_43;
    v18 = *(_QWORD *)(a2 + 24);
    if (!v18)
      goto LABEL_35;
LABEL_34:
    v21 = google::protobuf::DescriptorPool::Tables::FindByNameHelper(*(_QWORD *)(v18 + 32), v18, a3);
    v16 = HIDWORD(v21);
    LODWORD(v17) = v21;
    if ((_DWORD)v21)
      goto LABEL_43;
    goto LABEL_35;
  }
  v16 = 0;
  v18 = *(_QWORD *)(a2 + 24);
  if (v18)
    goto LABEL_34;
LABEL_35:
  if (google::protobuf::DescriptorPool::TryFindSymbolInFallbackDatabase((google::protobuf::DescriptorPool *)a2, a3))
  {
    if (*(char *)(a3 + 23) >= 0)
      v22 = (const char *)a3;
    else
      v22 = *(const char **)a3;
    v27 = v22;
    v23 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(a1 + 38, &v27);
    if (v23)
    {
      v17 = v23[3];
      v16 = (unint64_t)v17 >> 32;
      if ((v7 & 1) != 0)
        return v17 | (v16 << 32);
    }
    else
    {
      LODWORD(v17) = 0;
      v16 = 0;
      if ((v7 & 1) != 0)
        return v17 | (v16 << 32);
    }
    goto LABEL_44;
  }
  LODWORD(v17) = 0;
LABEL_43:
  if ((v7 & 1) == 0)
LABEL_44:
    std::mutex::unlock(v6);
  return v17 | (v16 << 32);
}

void sub_22DC33B80(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorPool::TryFindSymbolInFallbackDatabase(google::protobuf::DescriptorPool *a1, uint64_t a2)
{
  _QWORD *v5;
  const char *v6;
  uint64_t **v7;
  uint64_t v8;
  _BYTE v9[176];
  uint64_t v10;
  const char *v11;

  if (!*((_QWORD *)a1 + 1)
    || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(*((_QWORD *)a1 + 4) + 64), a2))
  {
    return 0;
  }
  google::protobuf::FileDescriptorProto::FileDescriptorProto((google::protobuf::FileDescriptorProto *)v9, 0);
  if ((google::protobuf::DescriptorPool::IsSubSymbolOfBuiltType((uint64_t)a1, a2) & 1) != 0
    || !(*(unsigned int (**)(_QWORD, uint64_t, _BYTE *))(**((_QWORD **)a1 + 1) + 24))(*((_QWORD *)a1 + 1), a2, v9)|| ((v5 = (_QWORD *)(*((_QWORD *)a1 + 4) + 344), *(char *)(v10 + 23) >= 0)? (v6 = (const char *)v10): (v6 = *(const char **)v10), (v11 = v6, (v7 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v5, &v11)) != 0)&& v7[3]|| !google::protobuf::DescriptorPool::BuildFileFromDatabase(a1, (const google::protobuf::FileDescriptorProto *)v9)))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*((_QWORD *)a1 + 4) + 64, a2, a2);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)v9);
  return v8;
}

void sub_22DC33CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::FileDescriptorTables::FieldsByLowercaseNamesLazyInitStatic(uint64_t this, const google::protobuf::FileDescriptorTables *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];

  v2 = *(_QWORD **)(this + 168);
  if (v2)
  {
    v3 = this + 40;
    do
    {
      v4 = v2[4];
      if (*(_BYTE *)(v4 + 67))
      {
        v5 = *(_QWORD *)(v4 + 96);
        if (v5)
        {
          v6 = *(_QWORD *)(v4 + 16);
          if (*(char *)(v6 + 23) < 0)
            goto LABEL_11;
        }
        else
        {
          v5 = *(_QWORD *)(v4 + 40);
          v6 = *(_QWORD *)(v4 + 16);
          if (*(char *)(v6 + 23) < 0)
LABEL_11:
            v6 = *(_QWORD *)v6;
        }
      }
      else
      {
        v5 = *(_QWORD *)(v4 + 80);
        v6 = *(_QWORD *)(v4 + 16);
        if (*(char *)(v6 + 23) < 0)
          goto LABEL_11;
      }
      v7[0] = v5;
      v7[1] = v6;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return this;
}

uint64_t google::protobuf::InsertIfNotPresent<std::unordered_map<std::pair<void const*,char const*>,google::protobuf::FieldDescriptor const*,google::protobuf::`anonymous namespace'::PointerStringPairHash,google::protobuf::`anonymous namespace'::PointerStringPairEqual,std::allocator<std::pair<std::pair<void const*,char const*> const,google::protobuf::FieldDescriptor const*>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  const char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t result;
  uint64_t *v19;
  _QWORD *v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v7 = *a2;
  v6 = (const char *)a2[1];
  v8 = *v6;
  if (*v6)
  {
    v9 = 0;
    v10 = (unsigned __int8 *)(v6 + 1);
    do
    {
      v9 = 5 * v9 + v8;
      v11 = *v10++;
      v8 = v11;
    }
    while (v11);
    v12 = v9 ^ (16777619 * v7);
    v13 = *(_QWORD *)(a1 + 8);
    if (!v13)
      goto LABEL_29;
  }
  else
  {
    v12 = 16777619 * v7;
    v13 = *(_QWORD *)(a1 + 8);
    if (!v13)
      goto LABEL_29;
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v3 = v12;
    if (v12 >= v13)
      v3 = v12 % v13;
  }
  else
  {
    v3 = (v13 - 1) & v12;
  }
  v15 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
  if (v15)
  {
    v16 = *v15;
    if (*v15)
    {
      if (v14.u32[0] < 2uLL)
      {
        while (1)
        {
          v19 = v16[1];
          if (v19 == (uint64_t *)v12)
          {
            if (v16[2] == (uint64_t *)v7)
            {
              result = strcmp((const char *)v16[3], v6);
              if (!(_DWORD)result)
                return result;
            }
          }
          else if (((unint64_t)v19 & (v13 - 1)) != v3)
          {
            goto LABEL_29;
          }
          v16 = (uint64_t **)*v16;
          if (!v16)
            goto LABEL_29;
        }
      }
      do
      {
        v17 = (unint64_t)v16[1];
        if (v17 == v12)
        {
          if (v16[2] == (uint64_t *)v7)
          {
            result = strcmp((const char *)v16[3], v6);
            if (!(_DWORD)result)
              return result;
          }
        }
        else
        {
          if (v17 >= v13)
            v17 %= v13;
          if (v17 != v3)
            break;
        }
        v16 = (uint64_t **)*v16;
      }
      while (v16);
    }
  }
LABEL_29:
  v20 = operator new(0x28uLL);
  *v20 = 0;
  v20[1] = v12;
  v20[2] = v7;
  v20[3] = v6;
  v20[4] = a3;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v13 && (float)(v22 * (float)v13) >= v21)
    goto LABEL_41;
  v23 = 1;
  if (v13 >= 3)
    v23 = (v13 & (v13 - 1)) != 0;
  v24 = v23 | (2 * v13);
  v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25)
    v26 = v25;
  else
    v26 = v24;
  v13 = *(_QWORD *)(a1 + 8);
  v27 = v13 - 1;
  if ((v13 & (v13 - 1)) != 0)
  {
    if (v12 >= v13)
    {
      v3 = v12 % v13;
      v28 = *(_QWORD *)a1;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
      if (!v29)
        goto LABEL_44;
LABEL_42:
      *v20 = *v29;
LABEL_50:
      *v29 = v20;
      goto LABEL_51;
    }
    v3 = v12;
LABEL_41:
    v28 = *(_QWORD *)a1;
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v29)
      goto LABEL_44;
    goto LABEL_42;
  }
  v3 = v27 & v12;
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v12));
  if (v29)
    goto LABEL_42;
LABEL_44:
  *v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(v28 + 8 * v3) = a1 + 16;
  if (*v20)
  {
    v30 = *(_QWORD *)(*v20 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v30 >= v13)
        v30 %= v13;
    }
    else
    {
      v30 &= v13 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_50;
  }
LABEL_51:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_22DC34020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorPool::Tables::AddSymbol(_QWORD *a1, const char *a2, const char *a3, const char *a4)
{
  uint64_t v6;
  const char *v7;
  char v8;
  char v9;
  const char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  const char *v33[3];

  v6 = (uint64_t)(a1 + 38);
  if (a2[23] >= 0)
    v7 = a2;
  else
    v7 = *(const char **)a2;
  v33[0] = v7;
  v33[1] = a3;
  v33[2] = a4;
  std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::__emplace_unique_key_args<char const*,std::pair<char const* const,google::protobuf::Symbol> const&>(v6, v33, (uint64_t)v33);
  v9 = v8;
  if ((v8 & 1) != 0)
  {
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(const char **)a2;
    v12 = (char *)a1[55];
    v11 = a1[56];
    if ((unint64_t)v12 < v11)
    {
      *(_QWORD *)v12 = v10;
      v13 = (uint64_t)(v12 + 8);
LABEL_30:
      a1[55] = v13;
      return v9 & 1;
    }
    v14 = (char *)a1[54];
    v15 = (v12 - v14) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (char *)operator new(8 * v18);
      v20 = &v19[8 * v15];
      v21 = &v19[8 * v18];
      *(_QWORD *)v20 = v10;
      v13 = (uint64_t)(v20 + 8);
      v22 = (char *)(v12 - v14);
      if (v12 == v14)
        goto LABEL_28;
    }
    else
    {
      v19 = 0;
      v20 = (char *)(8 * v15);
      v21 = 0;
      *(_QWORD *)(8 * v15) = v10;
      v13 = 8 * v15 + 8;
      v22 = (char *)(v12 - v14);
      if (v12 == v14)
      {
LABEL_28:
        a1[54] = v20;
        a1[55] = v13;
        a1[56] = v21;
        if (v12)
          operator delete(v12);
        goto LABEL_30;
      }
    }
    v23 = (unint64_t)(v22 - 8);
    if (v23 < 0x58)
      goto LABEL_36;
    if ((unint64_t)(v14 - v19) < 0x20)
      goto LABEL_36;
    v24 = (v23 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v26 = &v12[-v25];
    v20 -= v25;
    v27 = &v19[8 * v15 - 16];
    v28 = v12 - 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *(_OWORD *)v28;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v28 - 1);
      *(_OWORD *)v27 = v30;
      v27 -= 32;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    v12 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_36:
      do
      {
        v31 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v20 - 1) = v31;
        v20 -= 8;
      }
      while (v12 != v14);
    }
    v12 = (char *)a1[54];
    goto LABEL_28;
  }
  return v9 & 1;
}

uint64_t google::protobuf::FileDescriptorTables::AddAliasUnderParent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  const char *v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t ***v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t result;
  uint64_t *v22;
  _QWORD *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  if (*(char *)(a3 + 23) >= 0)
    v10 = (const char *)a3;
  else
    v10 = *(const char **)a3;
  v11 = *v10;
  if (*v10)
  {
    v12 = 0;
    v13 = (unsigned __int8 *)(v10 + 1);
    do
    {
      v12 = 5 * v12 + v11;
      v14 = *v13++;
      v11 = v14;
    }
    while (v14);
    v15 = v12 ^ (16777619 * (_QWORD)a2);
    v16 = *(_QWORD *)(a1 + 8);
    if (!v16)
      goto LABEL_32;
  }
  else
  {
    v15 = 16777619 * (_QWORD)a2;
    v16 = *(_QWORD *)(a1 + 8);
    if (!v16)
      goto LABEL_32;
  }
  v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v5 = v15;
    if (v15 >= v16)
      v5 = v15 % v16;
  }
  else
  {
    v5 = (v16 - 1) & v15;
  }
  v18 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v5);
  if (v18)
  {
    v19 = *v18;
    if (*v18)
    {
      if (v17.u32[0] < 2uLL)
      {
        while (1)
        {
          v22 = v19[1];
          if (v22 == (uint64_t *)v15)
          {
            if (v19[2] == a2)
            {
              result = strcmp((const char *)v19[3], v10);
              if (!(_DWORD)result)
                return result;
            }
          }
          else if (((unint64_t)v22 & (v16 - 1)) != v5)
          {
            goto LABEL_32;
          }
          v19 = (uint64_t **)*v19;
          if (!v19)
            goto LABEL_32;
        }
      }
      do
      {
        v20 = (unint64_t)v19[1];
        if (v20 == v15)
        {
          if (v19[2] == a2)
          {
            result = strcmp((const char *)v19[3], v10);
            if (!(_DWORD)result)
              return result;
          }
        }
        else
        {
          if (v20 >= v16)
            v20 %= v16;
          if (v20 != v5)
            break;
        }
        v19 = (uint64_t **)*v19;
      }
      while (v19);
    }
  }
LABEL_32:
  v23 = operator new(0x30uLL);
  *v23 = 0;
  v23[1] = v15;
  v23[2] = a2;
  v23[3] = v10;
  v23[4] = a4;
  v23[5] = a5;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (v16 && (float)(v25 * (float)v16) >= v24)
    goto LABEL_44;
  v26 = 1;
  if (v16 >= 3)
    v26 = (v16 & (v16 - 1)) != 0;
  v27 = v26 | (2 * v16);
  v28 = vcvtps_u32_f32(v24 / v25);
  if (v27 <= v28)
    v29 = v28;
  else
    v29 = v27;
  v16 = *(_QWORD *)(a1 + 8);
  v30 = v16 - 1;
  if ((v16 & (v16 - 1)) != 0)
  {
    if (v15 >= v16)
    {
      v5 = v15 % v16;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v15 % v16));
      if (!v32)
        goto LABEL_47;
LABEL_45:
      *v23 = *v32;
LABEL_53:
      *v32 = v23;
      goto LABEL_54;
    }
    v5 = v15;
LABEL_44:
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (!v32)
      goto LABEL_47;
    goto LABEL_45;
  }
  v5 = v30 & v15;
  v31 = *(_QWORD *)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v15));
  if (v32)
    goto LABEL_45;
LABEL_47:
  *v23 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v23;
  *(_QWORD *)(v31 + 8 * v5) = a1 + 16;
  if (*v23)
  {
    v33 = *(_QWORD *)(*v23 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v33 >= v16)
        v33 %= v16;
    }
    else
    {
      v33 &= v16 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_53;
  }
LABEL_54:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_22DC344CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorPool::Tables::AddFile(_QWORD *a1, _QWORD **a2)
{
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v31;

  v4 = (uint64_t)(a1 + 43);
  if ((*((char *)*a2 + 23) & 0x80000000) == 0)
  {
    *(_QWORD *)&v31 = *a2;
    *((_QWORD *)&v31 + 1) = a2;
    std::__hash_table<std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>>>::__emplace_unique_key_args<char const*,std::pair<char const* const,google::protobuf::FileDescriptor const*> const&>(v4, (const char **)&v31, &v31);
    v6 = v5;
    if ((v5 & 1) == 0)
      return v6 & 1;
LABEL_5:
    v8 = *a2;
    if (*((char *)*a2 + 23) < 0)
    {
      v8 = (_QWORD *)*v8;
      v10 = (char *)a1[58];
      v9 = a1[59];
      if ((unint64_t)v10 < v9)
        goto LABEL_7;
    }
    else
    {
      v10 = (char *)a1[58];
      v9 = a1[59];
      if ((unint64_t)v10 < v9)
      {
LABEL_7:
        *(_QWORD *)v10 = v8;
        v11 = (uint64_t)(v10 + 8);
LABEL_29:
        a1[58] = v11;
        return v6 & 1;
      }
    }
    v12 = (char *)a1[57];
    v13 = (v10 - v12) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = v8;
      v11 = (uint64_t)(v18 + 8);
      v20 = (char *)(v10 - v12);
      if (v10 == v12)
        goto LABEL_27;
    }
    else
    {
      v17 = 0;
      v18 = (char *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v8;
      v11 = 8 * v13 + 8;
      v20 = (char *)(v10 - v12);
      if (v10 == v12)
      {
LABEL_27:
        a1[57] = v18;
        a1[58] = v11;
        a1[59] = v19;
        if (v10)
          operator delete(v10);
        goto LABEL_29;
      }
    }
    v21 = (unint64_t)(v20 - 8);
    if (v21 < 0x58)
      goto LABEL_35;
    if ((unint64_t)(v12 - v17) < 0x20)
      goto LABEL_35;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v24 = &v10[-v23];
    v18 -= v23;
    v25 = &v17[8 * v13 - 16];
    v26 = v10 - 16;
    v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
      *(_OWORD *)v25 = v28;
      v25 -= 32;
      v26 -= 32;
      v27 -= 4;
    }
    while (v27);
    v10 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        v29 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v18 - 1) = v29;
        v18 -= 8;
      }
      while (v10 != v12);
    }
    v10 = (char *)a1[57];
    goto LABEL_27;
  }
  *(_QWORD *)&v31 = **a2;
  *((_QWORD *)&v31 + 1) = a2;
  std::__hash_table<std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>>>::__emplace_unique_key_args<char const*,std::pair<char const* const,google::protobuf::FileDescriptor const*> const&>(v4, (const char **)&v31, &v31);
  v6 = v7;
  if ((v7 & 1) != 0)
    goto LABEL_5;
  return v6 & 1;
}

uint64_t google::protobuf::FileDescriptorTables::FinalizeTables(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  v1 = this;
  v2 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 16);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)v2;
    *(_QWORD *)v2 = 0;
    if (v5)
      operator delete(v5);
    this = MEMORY[0x22E31DF78](v2, 0x10A0C408EF24B1CLL);
  }
  v6 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0;
  if (v6)
  {
    v7 = *(_QWORD **)(v6 + 16);
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    v9 = *(void **)v6;
    *(_QWORD *)v6 = 0;
    if (v9)
      operator delete(v9);
    JUMPOUT(0x22E31DF78);
  }
  return this;
}

uint64_t google::protobuf::FileDescriptorTables::AddFieldByStylizedNames(google::protobuf::FileDescriptorTables *this, const google::protobuf::FieldDescriptor *a2)
{
  uint64_t *v4;
  char *v5;
  char *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t *v12;
  char *v13;

  if (!*((_BYTE *)a2 + 67))
  {
    v4 = (uint64_t *)*((_QWORD *)a2 + 10);
    v5 = (char *)*((_QWORD *)a2 + 2);
    if (v5[23] < 0)
      goto LABEL_11;
LABEL_4:
    v12 = v4;
    v13 = v5;
    goto LABEL_12;
  }
  v4 = (uint64_t *)*((_QWORD *)a2 + 12);
  if (!v4)
  {
    v4 = (uint64_t *)*((_QWORD *)a2 + 5);
    v5 = (char *)*((_QWORD *)a2 + 2);
    if (v5[23] < 0)
      goto LABEL_11;
    goto LABEL_4;
  }
  v5 = (char *)*((_QWORD *)a2 + 2);
  if ((v5[23] & 0x80000000) == 0)
    goto LABEL_4;
LABEL_11:
  v5 = *(char **)v5;
  v12 = v4;
  v13 = v5;
  {
LABEL_5:
    v6 = (char *)*((_QWORD *)a2 + 3);
    if ((v6[23] & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v6 = (char *)*((_QWORD *)a2 + 3);
  if ((v6[23] & 0x80000000) == 0)
  {
LABEL_6:
    v10 = v4;
    v11 = v6;
    if ((result & 1) != 0)
      return result;
LABEL_14:
  }
LABEL_13:
  v6 = *(char **)v6;
  v10 = v4;
  v11 = v6;
  if ((result & 1) == 0)
    goto LABEL_14;
  return result;
}

uint64_t *google::protobuf::FindPtrOrNull<std::unordered_map<std::pair<void const*,char const*>,google::protobuf::FieldDescriptor const*,google::protobuf::`anonymous namespace'::PointerStringPairHash,google::protobuf::`anonymous namespace'::PointerStringPairEqual,std::allocator<std::pair<std::pair<void const*,char const*> const,google::protobuf::FieldDescriptor const*>>>>(uint64_t a1, unint64_t a2, uint64_t *a3, char *__s2)
{
  char v7;
  uint64_t v8;
  char *v9;
  int v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;

  v7 = *__s2;
  if (*__s2)
  {
    v8 = 0;
    v9 = __s2 + 1;
    do
    {
      v8 = 5 * v8 + v7;
      v10 = *v9++;
      v7 = v10;
    }
    while (v10);
    if (!a2)
      return 0;
  }
  else
  {
    v8 = 0;
    if (!a2)
      return 0;
  }
  v11 = v8 ^ (16777619 * (_QWORD)a3);
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = v8 ^ (16777619 * (_QWORD)a3);
    if (v11 >= a2)
      v13 = v11 % a2;
  }
  else
  {
    v13 = v11 & (a2 - 1);
  }
  v14 = *(uint64_t ****)(a1 + 8 * v13);
  if (v14)
  {
    v15 = *v14;
    if (*v14)
    {
      if (v12.u32[0] < 2uLL)
      {
        v16 = a2 - 1;
        while (1)
        {
          v18 = v15[1];
          if (v18 == (uint64_t *)v11)
          {
            if (v15[2] == a3 && !strcmp((const char *)v15[3], __s2))
              return v15[4];
          }
          else if (((unint64_t)v18 & v16) != v13)
          {
            return 0;
          }
          v15 = (uint64_t **)*v15;
          if (!v15)
            return 0;
        }
      }
      do
      {
        v17 = (unint64_t)v15[1];
        if (v17 == v11)
        {
          if (v15[2] == a3 && !strcmp((const char *)v15[3], __s2))
            return v15[4];
        }
        else
        {
          if (v17 >= a2)
            v17 %= a2;
          if (v17 != v13)
            return 0;
        }
        v15 = (uint64_t **)*v15;
      }
      while (v15);
    }
  }
  return 0;
}

uint64_t google::protobuf::FileDescriptorTables::AddFieldByNumber(google::protobuf::FileDescriptorTables *this, const google::protobuf::FieldDescriptor *a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;

  v5 = *((_QWORD *)a2 + 10);
  v6 = *((_DWORD *)a2 + 17);
  v7 = (uint64_t *)((char *)this + 152);
  v8 = 16777619 * v6;
  v9 = v8 ^ (16777499 * v5);
  v10 = *((_QWORD *)this + 20);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v2 = v8 ^ (16777499 * v5);
      if (v9 >= v10)
        v2 = v9 % v10;
    }
    else
    {
      v2 = v9 & (v10 - 1);
    }
    v12 = *(uint64_t ***)(*v7 + 8 * v2);
    if (v12)
    {
      v13 = *v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v9)
            {
              if (v13[2] == v5 && *((_DWORD *)v13 + 6) == v6)
                return 0;
            }
            else if ((v16 & (v10 - 1)) != v2)
            {
              goto LABEL_31;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v5 && *((_DWORD *)v13 + 6) == v6)
              return 0;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v2)
              break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v19 = operator new(0x28uLL);
  *v19 = 0;
  v19[1] = v9;
  v19[2] = v5;
  *((_DWORD *)v19 + 6) = v6;
  v19[4] = a2;
  v20 = (float)(unint64_t)(*((_QWORD *)this + 22) + 1);
  v21 = *((float *)this + 46);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    v22 = *v7;
    v23 = *(_QWORD **)(*v7 + 8 * v2);
    if (v23)
    {
LABEL_34:
      *v19 = *v23;
LABEL_53:
      *v23 = v19;
      goto LABEL_54;
    }
  }
  else
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    v10 = *((_QWORD *)this + 20);
    v28 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v2 = v9 % v10;
        v22 = *v7;
        v23 = *(_QWORD **)(*v7 + 8 * (v9 % v10));
        if (v23)
          goto LABEL_34;
      }
      else
      {
        v2 = v9;
        v22 = *v7;
        v23 = *(_QWORD **)(*v7 + 8 * v9);
        if (v23)
          goto LABEL_34;
      }
    }
    else
    {
      v2 = v28 & v9;
      v22 = *v7;
      v23 = *(_QWORD **)(*v7 + 8 * (v28 & v9));
      if (v23)
        goto LABEL_34;
    }
  }
  *v19 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v19;
  *(_QWORD *)(v22 + 8 * v2) = (char *)this + 168;
  if (*v19)
  {
    v29 = *(_QWORD *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v29 >= v10)
        v29 %= v10;
    }
    else
    {
      v29 &= v10 - 1;
    }
    v23 = (_QWORD *)(*v7 + 8 * v29);
    goto LABEL_53;
  }
LABEL_54:
  ++*((_QWORD *)this + 22);
  return 1;
}

void sub_22DC34D08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::InsertIfNotPresent<std::unordered_map<std::pair<google::protobuf::EnumDescriptor const*,int>,google::protobuf::EnumValueDescriptor const*,google::protobuf::`anonymous namespace'::PointerIntegerPairHash<std::pair<google::protobuf::EnumDescriptor const*,int>>,std::equal_to<std::pair<google::protobuf::EnumDescriptor const*,int>>,std::allocator<std::pair<std::pair<google::protobuf::EnumDescriptor const*,int> const,google::protobuf::EnumValueDescriptor const*>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  v8 = (16777619 * (int)v7) ^ (16777499 * *a2);
  v9 = *(_QWORD *)(a1 + 8);
  v29 = v7;
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = (16777619 * (int)v7) ^ (16777499 * *a2);
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v8)
            {
              if (v12[2] == v6 && *((_DWORD *)v12 + 6) == (_DWORD)v7)
                return 0;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v6 && *((_DWORD *)v12 + 6) == (_DWORD)v7)
              return 0;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v18 = operator new(0x28uLL);
  *v18 = 0;
  v18[1] = v8;
  v18[2] = v6;
  v18[3] = v29;
  v18[4] = a3;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *v18 = *v22;
LABEL_53:
      *v22 = v18;
      goto LABEL_54;
    }
  }
  else
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    v9 = *(_QWORD *)(a1 + 8);
    v27 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v22)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v22)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v27 & v8;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v8));
      if (v22)
        goto LABEL_34;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    v28 = *(_QWORD *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v28 >= v9)
        v28 %= v9;
    }
    else
    {
      v28 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_53;
  }
LABEL_54:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_22DC34FB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorPool::Tables::AddExtension(google::protobuf::DescriptorPool::Tables *this, const google::protobuf::FieldDescriptor *a2)
{
  unint64_t v4;
  int v5;
  char *v6;
  uint64_t **v7;
  char *v8;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;

  v4 = *((_QWORD *)a2 + 10);
  v5 = *((_DWORD *)a2 + 17);
  v6 = (char *)*((_QWORD *)this + 49);
  if (v6)
  {
    while (1)
    {
      v8 = v6;
      v9 = *((_QWORD *)v6 + 4);
      if (v4 < v9)
        goto LABEL_3;
      if (v9 < v4)
        goto LABEL_8;
      v10 = *((_DWORD *)v8 + 10);
      if (v5 < v10)
      {
LABEL_3:
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_10;
      }
      else
      {
        if (v10 >= v5)
          return 0;
LABEL_8:
        v6 = (char *)*((_QWORD *)v8 + 1);
        if (!v6)
        {
          v7 = (uint64_t **)(v8 + 8);
          goto LABEL_10;
        }
      }
    }
  }
  v7 = (uint64_t **)((char *)this + 392);
  v8 = (char *)this + 392;
LABEL_10:
  v11 = operator new(0x38uLL);
  v11[4] = v4;
  *((_DWORD *)v11 + 10) = v5;
  v11[6] = a2;
  *v11 = 0;
  v11[1] = 0;
  v11[2] = v8;
  *v7 = v11;
  v12 = **((_QWORD **)this + 48);
  if (v12)
  {
    *((_QWORD *)this + 48) = v12;
    v13 = *v7;
  }
  else
  {
    v13 = v11;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 49), v13);
  ++*((_QWORD *)this + 50);
  v15 = (char *)*((_QWORD *)this + 61);
  v14 = *((_QWORD *)this + 62);
  if ((unint64_t)v15 >= v14)
  {
    v17 = (char *)*((_QWORD *)this + 60);
    v18 = (v15 - v17) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = (char *)operator new(16 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[16 * v18];
    *(_QWORD *)v23 = v4;
    *((_DWORD *)v23 + 2) = v5;
    v16 = v23 + 16;
    if (v15 != v17)
    {
      do
      {
        *((_OWORD *)v23 - 1) = *((_OWORD *)v15 - 1);
        v23 -= 16;
        v15 -= 16;
      }
      while (v15 != v17);
      v15 = (char *)*((_QWORD *)this + 60);
    }
    *((_QWORD *)this + 60) = v23;
    *((_QWORD *)this + 61) = v16;
    *((_QWORD *)this + 62) = &v22[16 * v21];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_QWORD *)v15 = v4;
    *((_DWORD *)v15 + 2) = v5;
    v16 = v15 + 16;
  }
  *((_QWORD *)this + 61) = v16;
  return 1;
}

std::string *google::protobuf::DescriptorPool::Tables::AllocateString(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  std::string **v6;
  char *v7;
  std::string *v9;

  v4 = (std::string *)operator new();
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v9 = v5;
  v6 = *(std::string ***)(a1 + 216);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 224))
  {
    v7 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(a1 + 208), &v9);
    v5 = v9;
  }
  else
  {
    *v6 = v5;
    v7 = (char *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 216) = v7;
  return v5;
}

void sub_22DC3524C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void google::protobuf::FileDescriptorTables::BuildLocationsByPath(_QWORD *a1)
{
  int v1;
  int i;
  std::string *v4;
  uint64_t v5;
  char *v6;
  std::string __p;
  std::string *p_p;

  v1 = *(_DWORD *)(a1[1] + 24);
  if (v1 >= 1)
  {
    for (i = 0; i != v1; ++i)
    {
      v4 = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::TypeHandler>(a1[1] + 16, i);
      v5 = *a1 + 280;
      google::protobuf::Join<google::protobuf::RepeatedField<int>>(v4 + 1, ",", v6, &__p);
      p_p = &__p;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 5) = v4;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22DC35344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Join<google::protobuf::RepeatedField<int>>@<X0>(std::string *result@<X0>, const std::string::value_type *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t data_low;
  unsigned int *size;
  google::protobuf *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf *v12;
  _BYTE *v13;
  int64_t v14;
  _BYTE v15[32];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  data_low = SLODWORD(result->__r_.__value_.__l.__data_);
  if ((_DWORD)data_low)
  {
    size = (unsigned int *)result->__r_.__value_.__l.__size_;
    v8 = (google::protobuf *)*size;
    v13 = v15;
    v14 = google::protobuf::FastInt32ToBufferLeft(v8, v15, a3) - v15;
    result = google::protobuf::StrAppend(a4, (uint64_t)&v13);
    if ((_DWORD)data_low != 1)
    {
      v10 = 4 * data_low;
      v11 = 4;
      do
      {
        if (v11)
          std::string::append(a4, a2);
        v12 = (google::protobuf *)size[(unint64_t)v11 / 4];
        v13 = v15;
        v14 = google::protobuf::FastInt32ToBufferLeft(v12, v15, v9) - v15;
        result = google::protobuf::StrAppend(a4, (uint64_t)&v13);
        v11 += 4;
      }
      while (v10 != v11);
    }
  }
  return result;
}

void sub_22DC35454(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::FileDescriptorTables::GetSourceLocation(uint64_t a1, std::string *a2, char *a3)
{
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::string __p;
  _QWORD *v11;
  _QWORD v12[2];
  std::string *p_p;

  v12[0] = a1;
  v12[1] = a3;
  v5 = (unint64_t *)(a1 + 272);
  v11 = v12;
  v6 = atomic_load(v5);
  if (v6 != -1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FileDescriptorTables::BuildLocationsByPath;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v11;
    p_p = &__p;
    std::__call_once(v5, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(std::pair<google::protobuf::FileDescriptorTables const*,google::protobuf::SourceCodeInfo const*> *),std::pair<google::protobuf::FileDescriptorTables const*,google::protobuf::SourceCodeInfo const*> *&&>>);
  }
  google::protobuf::Join<std::vector<int>>(a2, ",", a3, &__p);
  v7 = std::__hash_table<std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>>>::find<std::string>((_QWORD *)(a1 + 280), (uint64_t)&__p);
  if (v7)
  {
    v8 = v7[5];
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v8;
  }
  else
  {
    v8 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v8;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_22DC35540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Join<std::vector<int>>@<X0>(std::string *result@<X0>, const std::string::value_type *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  unsigned int *v5;
  unsigned int *size;
  google::protobuf *v8;
  char *v9;
  uint64_t v10;
  google::protobuf *v11;
  _BYTE *v12;
  int64_t v13;
  _BYTE v14[32];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v5 = (unsigned int *)result->__r_.__value_.__r.__words[0];
  size = (unsigned int *)result->__r_.__value_.__l.__size_;
  if ((unsigned int *)result->__r_.__value_.__l.__data_ != size)
  {
    v8 = (google::protobuf *)*v5;
    v12 = v14;
    v13 = google::protobuf::FastInt32ToBufferLeft(v8, v14, a3) - v14;
    result = google::protobuf::StrAppend(a4, (uint64_t)&v12);
    if (v5 + 1 != size)
    {
      v10 = 1;
      do
      {
        if (v10 * 4)
          std::string::append(a4, a2);
        v11 = (google::protobuf *)v5[v10];
        v12 = v14;
        v13 = google::protobuf::FastInt32ToBufferLeft(v11, v14, v9) - v14;
        result = google::protobuf::StrAppend(a4, (uint64_t)&v12);
        ++v10;
      }
      while (&v5[v10] != size);
    }
  }
  return result;
}

void sub_22DC35654(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::DescriptorPool::internal_generated_pool(google::protobuf::DescriptorPool *this)
{
  unsigned __int8 v1;
  google::protobuf::_anonymous_namespace_ *v3;
  void (*v4)(const void *);
  const void *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_25407B4D8);
  if ((v1 & 1) != 0)
    return _MergedGlobals_31;
  v3 = (google::protobuf::_anonymous_namespace_ *)__cxa_guard_acquire(&qword_25407B4D8);
  if (!(_DWORD)v3)
    return _MergedGlobals_31;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::OnShutdownDelete<google::protobuf::DescriptorPool>(google::protobuf::DescriptorPool *)::{lambda(void const*)#1}::__invoke, v4, v5);
  _MergedGlobals_31 = (uint64_t)v4;
  __cxa_guard_release(&qword_25407B4D8);
  return _MergedGlobals_31;
}

void sub_22DC356F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25407B4D8);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::`anonymous namespace'::NewGeneratedPool(google::protobuf::_anonymous_namespace_ *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::DescriptorPool::Tables *v4;

  v1 = operator new();
  v3 = operator new();
  *(_QWORD *)v3 = 850045863;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  v4 = (google::protobuf::DescriptorPool::Tables *)operator new();
  google::protobuf::DescriptorPool::Tables::Tables(v4);
  *(_QWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 41) = 1;
  *(_QWORD *)(v1 + 48) = v1 + 56;
  *(_BYTE *)(v1 + 40) = 0;
  return v1;
}

void sub_22DC357C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x22E31DF78](v3, 0x10A0C40292B2256);
  MEMORY[0x22E31DF78](v1, 0x1060C40AEB7C726);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorPool::generated_pool(google::protobuf::DescriptorPool *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  google::protobuf::_anonymous_namespace_ *v4;
  void (*v5)(const void *);
  const void *v6;

  v1 = atomic_load((unsigned __int8 *)&qword_25407B4D8);
  if ((v1 & 1) == 0)
  {
    v4 = (google::protobuf::_anonymous_namespace_ *)__cxa_guard_acquire(&qword_25407B4D8);
    if ((_DWORD)v4)
    {
      google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::OnShutdownDelete<google::protobuf::DescriptorPool>(google::protobuf::DescriptorPool *)::{lambda(void const*)#1}::__invoke, v5, v6);
      _MergedGlobals_31 = (uint64_t)v5;
      __cxa_guard_release(&qword_25407B4D8);
    }
  }
  v2 = _MergedGlobals_31;
  google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fdescriptor_2eproto, 0);
  return v2;
}

void sub_22DC35890(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25407B4D8);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorPool::InternalAddGeneratedFile(google::protobuf::DescriptorPool *this, const void *a2)
{
  unsigned int v2;
  uint64_t **v4;
  unsigned int *v5;
  char v6;
  std::string v7[2];

  v2 = a2;
  if ((google::protobuf::EncodedDescriptorDatabase::Add(v4, (char *)this, v2) & 1) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 1382);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GeneratedDatabase()->Add(encoded_file_descriptor, size): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
}

void sub_22DC35920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC35934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::`anonymous namespace'::GeneratedDatabase(google::protobuf::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  void (*v3)(const void *);
  const void *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_25407B4E8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25407B4E8))
    return qword_25407B4E0;
  v3 = (void (*)(const void *))operator new();
  google::protobuf::EncodedDescriptorDatabase::EncodedDescriptorDatabase(v3);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::OnShutdownDelete<google::protobuf::EncodedDescriptorDatabase>(google::protobuf::EncodedDescriptorDatabase *)::{lambda(void const*)#1}::__invoke, v3, v4);
  qword_25407B4E0 = (uint64_t)v3;
  __cxa_guard_release(&qword_25407B4E8);
  return qword_25407B4E0;
}

void sub_22DC359DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A1C40C1D13B9CLL);
  __cxa_guard_abort(&qword_25407B4E8);
  _Unwind_Resume(a1);
}

void sub_22DC35A0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25407B4E8);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorPool::FindFileByName(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  uint64_t i;
  void **v9;
  uint64_t v10;
  uint64_t j;
  _QWORD *v12;
  const char *v13;
  uint64_t **v14;
  uint64_t FileByName;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  uint64_t **v19;
  void **v21;
  void **v22;
  const char *v23;

  v4 = *(std::mutex **)a1;
  if (*(_QWORD *)a1)
    std::mutex::lock(*(std::mutex **)a1);
  if (*(_QWORD *)(a1 + 8))
  {
    v5 = *(_QWORD **)(a1 + 32);
    if (v5[11])
    {
      v6 = (void **)v5[10];
      if (v6)
      {
        do
        {
          v21 = (void **)*v6;
          if (*((char *)v6 + 39) < 0)
            operator delete(v6[2]);
          operator delete(v6);
          v6 = v21;
        }
        while (v21);
      }
      v5[10] = 0;
      v7 = v5[9];
      if (v7)
      {
        for (i = 0; i != v7; ++i)
          *(_QWORD *)(v5[8] + 8 * i) = 0;
      }
      v5[11] = 0;
      v5 = *(_QWORD **)(a1 + 32);
    }
    if (v5[6])
    {
      v9 = (void **)v5[5];
      if (v9)
      {
        do
        {
          v22 = (void **)*v9;
          if (*((char *)v9 + 39) < 0)
            operator delete(v9[2]);
          operator delete(v9);
          v9 = v22;
        }
        while (v22);
      }
      v5[5] = 0;
      v10 = v5[4];
      if (v10)
      {
        for (j = 0; j != v10; ++j)
          *(_QWORD *)(v5[3] + 8 * j) = 0;
      }
      v5[6] = 0;
    }
  }
  v12 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 344);
  if (*(char *)(a2 + 23) >= 0)
    v13 = (const char *)a2;
  else
    v13 = *(const char **)a2;
  v23 = v13;
  v14 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v12, &v23);
  if (!v14 || (FileByName = (uint64_t)v14[3]) == 0)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v16 || (FileByName = google::protobuf::DescriptorPool::FindFileByName(v16, a2)) == 0)
    {
      if (!google::protobuf::DescriptorPool::TryFindFileInFallbackDatabase((google::protobuf::DescriptorPool *)a1, a2)|| ((v17 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 344), *(char *)(a2 + 23) >= 0)? (v18 = (const char *)a2): (v18 = *(const char **)a2), (v23 = v18, (v19 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v17, &v23)) == 0)|| (FileByName = (uint64_t)v19[3]) == 0))
      {
        FileByName = 0;
      }
    }
  }
  if (v4)
    std::mutex::unlock(v4);
  return FileByName;
}

void sub_22DC35BD8(_Unwind_Exception *exception_object)
{
  std::mutex *v1;

  if (v1)
    std::mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::DescriptorPool::TryFindFileInFallbackDatabase(google::protobuf::DescriptorPool *a1, uint64_t a2)
{
  uint64_t v5;
  _BYTE v6[216];

  if (!*((_QWORD *)a1 + 1)
    || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(*((_QWORD *)a1 + 4) + 24), a2))
  {
    return 0;
  }
  google::protobuf::FileDescriptorProto::FileDescriptorProto((google::protobuf::FileDescriptorProto *)v6, 0);
  if ((*(unsigned int (**)(_QWORD, uint64_t, _BYTE *))(**((_QWORD **)a1 + 1) + 16))(*((_QWORD *)a1 + 1), a2, v6)&& google::protobuf::DescriptorPool::BuildFileFromDatabase(a1, (const google::protobuf::FileDescriptorProto *)v6))
  {
    v5 = 1;
  }
  else
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*((_QWORD *)a1 + 4) + 24, a2, a2);
    v5 = 0;
  }
  google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)v6);
  return v5;
}

void sub_22DC35CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorPool::FindMessageTypeByName(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (google::protobuf::DescriptorPool::Tables::FindByNameHelper(*(_QWORD **)(a1 + 32), a1, a2) == 1)
    return v2;
  else
    return 0;
}

uint64_t google::protobuf::DescriptorPool::FindExtensionByNumber(std::mutex **this, const google::protobuf::Descriptor *a2, uint64_t a3)
{
  std::mutex *v6;
  std::mutex *v7;
  char *v8;
  char *opaque;
  char *v10;
  unint64_t v11;
  uint64_t ExtensionByNumber;
  unint64_t v13;
  char v14;
  std::mutex *v15;
  void **v16;
  uint64_t v17;
  uint64_t i;
  void **v19;
  uint64_t v20;
  uint64_t j;
  std::mutex *v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  unint64_t v29;
  google::protobuf::DescriptorPool *v30;
  std::mutex *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;

  if (!*((_DWORD *)a2 + 31))
    return 0;
  v6 = *this;
  if (!*this)
    goto LABEL_22;
  std::mutex::lock(*this);
  v7 = this[4];
  v8 = *(char **)v7[6].__m_.__opaque;
  if (!v8)
    goto LABEL_18;
  opaque = v7[6].__m_.__opaque;
  v10 = v7[6].__m_.__opaque;
  do
  {
    v11 = *((_QWORD *)v8 + 4);
    if (v11 < (unint64_t)a2)
    {
      v8 += 8;
    }
    else if (v11 <= (unint64_t)a2)
    {
      if (*((_DWORD *)v8 + 10) < (int)a3)
        v8 += 8;
      else
        v10 = v8;
    }
    else
    {
      v10 = v8;
    }
    v8 = *(char **)v8;
  }
  while (v8);
  if (v10 != opaque
    && (v13 = *((_QWORD *)v10 + 4), v13 <= (unint64_t)a2)
    && (v13 < (unint64_t)a2 || *((_DWORD *)v10 + 10) <= (int)a3))
  {
    ExtensionByNumber = *((_QWORD *)v10 + 6);
    std::mutex::unlock(v6);
    if (ExtensionByNumber)
      return ExtensionByNumber;
  }
  else
  {
LABEL_18:
    std::mutex::unlock(v6);
  }
  v6 = *this;
  if (!*this)
  {
LABEL_22:
    v14 = 1;
    if (!this[1])
      goto LABEL_35;
LABEL_23:
    v15 = this[4];
    if (*(_QWORD *)&v15[1].__m_.__opaque[16])
    {
      v16 = *(void ***)&v15[1].__m_.__opaque[8];
      if (v16)
      {
        do
        {
          v27 = (void **)*v16;
          if (*((char *)v16 + 39) < 0)
            operator delete(v16[2]);
          operator delete(v16);
          v16 = v27;
        }
        while (v27);
      }
      *(_QWORD *)&v15[1].__m_.__opaque[8] = 0;
      v17 = *(_QWORD *)v15[1].__m_.__opaque;
      if (v17)
      {
        for (i = 0; i != v17; ++i)
          *(_QWORD *)(v15[1].__m_.__sig + 8 * i) = 0;
      }
      *(_QWORD *)&v15[1].__m_.__opaque[16] = 0;
      v15 = this[4];
    }
    if (*(_QWORD *)&v15->__m_.__opaque[40])
    {
      v19 = *(void ***)&v15->__m_.__opaque[32];
      if (v19)
      {
        do
        {
          v28 = (void **)*v19;
          if (*((char *)v19 + 39) < 0)
            operator delete(v19[2]);
          operator delete(v19);
          v19 = v28;
        }
        while (v28);
      }
      *(_QWORD *)&v15->__m_.__opaque[32] = 0;
      v20 = *(_QWORD *)&v15->__m_.__opaque[24];
      if (v20)
      {
        for (j = 0; j != v20; ++j)
          *(_QWORD *)(*(_QWORD *)&v15->__m_.__opaque[16] + 8 * j) = 0;
      }
      *(_QWORD *)&v15->__m_.__opaque[40] = 0;
    }
    goto LABEL_35;
  }
  std::mutex::lock(*this);
  v14 = 0;
  if (this[1])
    goto LABEL_23;
LABEL_35:
  v22 = this[4];
  v23 = *(char **)v22[6].__m_.__opaque;
  if (!v23)
    goto LABEL_56;
  v24 = v22[6].__m_.__opaque;
  v25 = v22[6].__m_.__opaque;
  do
  {
    v26 = *((_QWORD *)v23 + 4);
    if (v26 < (unint64_t)a2)
    {
      v23 += 8;
    }
    else if (v26 <= (unint64_t)a2)
    {
      if (*((_DWORD *)v23 + 10) < (int)a3)
        v23 += 8;
      else
        v25 = v23;
    }
    else
    {
      v25 = v23;
    }
    v23 = *(char **)v23;
  }
  while (v23);
  if (v25 == v24
    || (v29 = *((_QWORD *)v25 + 4), v29 > (unint64_t)a2)
    || v29 >= (unint64_t)a2 && *((_DWORD *)v25 + 10) > (int)a3
    || (ExtensionByNumber = *((_QWORD *)v25 + 6)) == 0)
  {
LABEL_56:
    v30 = (google::protobuf::DescriptorPool *)this[3];
    if (!v30 || (ExtensionByNumber = google::protobuf::DescriptorPool::FindExtensionByNumber(v30, a2, a3)) == 0)
    {
      if (!google::protobuf::DescriptorPool::TryFindExtensionInFallbackDatabase((google::protobuf::DescriptorPool *)this, a2, a3))goto LABEL_74;
      v31 = this[4];
      v32 = *(char **)v31[6].__m_.__opaque;
      if (!v32)
        goto LABEL_74;
      v33 = v31[6].__m_.__opaque;
      v34 = v31[6].__m_.__opaque;
      do
      {
        v35 = *((_QWORD *)v32 + 4);
        if (v35 < (unint64_t)a2)
        {
          v32 += 8;
        }
        else if (v35 <= (unint64_t)a2)
        {
          if (*((_DWORD *)v32 + 10) < (int)a3)
            v32 += 8;
          else
            v34 = v32;
        }
        else
        {
          v34 = v32;
        }
        v32 = *(char **)v32;
      }
      while (v32);
      if (v34 == v33
        || (v36 = *((_QWORD *)v34 + 4), v36 > (unint64_t)a2)
        || v36 >= (unint64_t)a2 && *((_DWORD *)v34 + 10) > (int)a3
        || (ExtensionByNumber = *((_QWORD *)v34 + 6)) == 0)
      {
LABEL_74:
        ExtensionByNumber = 0;
      }
    }
  }
  if ((v14 & 1) == 0)
    std::mutex::unlock(v6);
  return ExtensionByNumber;
}

void sub_22DC3601C(_Unwind_Exception *exception_object)
{
  std::mutex *v1;
  char v2;

  if ((v2 & 1) == 0)
    std::mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

BOOL google::protobuf::DescriptorPool::TryFindExtensionInFallbackDatabase(google::protobuf::DescriptorPool *this, const google::protobuf::Descriptor *a2, uint64_t a3)
{
  _QWORD *v6;
  const char *v7;
  uint64_t **v8;
  _BOOL8 v9;
  _BYTE v11[176];
  uint64_t v12;
  const char *v13;

  if (!*((_QWORD *)this + 1))
    return 0;
  google::protobuf::FileDescriptorProto::FileDescriptorProto((google::protobuf::FileDescriptorProto *)v11, 0);
  v9 = ((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _BYTE *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), *((_QWORD *)a2 + 1), a3, v11) & 1) != 0&& ((v6 = (_QWORD *)(*((_QWORD *)this + 4) + 344), *(char *)(v12 + 23) >= 0)? (v7 = (const char *)v12): (v7 = *(const char **)v12), (v13 = v7, (v8 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v6, &v13)) == 0)|| !v8[3])&& google::protobuf::DescriptorPool::BuildFileFromDatabase(this, (const google::protobuf::FileDescriptorProto *)v11) != 0;
  google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)v11);
  return v9;
}

void sub_22DC36114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)&a9);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t ExtensionByNumberNoLock;

  if (!*(_DWORD *)(a2 + 124))
    return 0;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(uint64_t **)(v3 + 392);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 392);
    v6 = (uint64_t *)(v3 + 392);
    do
    {
      v7 = v4[4];
      if (v7 < a2)
      {
        ++v4;
      }
      else if (v7 <= a2)
      {
        if (*((_DWORD *)v4 + 10) < a3)
          ++v4;
        else
          v6 = v4;
      }
      else
      {
        v6 = v4;
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    if (v6 != v5)
    {
      v8 = v6[4];
      if (v8 <= a2 && (v8 < a2 || *((_DWORD *)v6 + 10) <= a3))
      {
        ExtensionByNumberNoLock = v6[6];
        if (ExtensionByNumberNoLock)
          return ExtensionByNumberNoLock;
      }
    }
  }
  if (*(_QWORD *)(a1 + 24)
    && (ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock()) != 0)
  {
    return ExtensionByNumberNoLock;
  }
  else
  {
    return 0;
  }
}

uint64_t google::protobuf::DescriptorPool::FindExtensionByPrintableName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (***v22)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v23)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v24)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);

  if (!*(_DWORD *)(a2 + 124))
    return 0;
  if (google::protobuf::DescriptorPool::Tables::FindByNameHelper(*(_QWORD **)(a1 + 32), a1, a3) == 2)
  {
    result = v6;
    if (*(_BYTE *)(v6 + 67))
    {
      if (*(_QWORD *)(v6 + 80) == a2)
        return result;
    }
  }
  if (!*(_BYTE *)(*(_QWORD *)(a2 + 32) + 72))
    return 0;
  if (google::protobuf::DescriptorPool::Tables::FindByNameHelper(*(_QWORD **)(a1 + 32), a1, a3) != 1
    || v8 == 0)
  {
    return 0;
  }
  v10 = v8;
  v11 = *(_DWORD *)(v8 + 128);
  if (v11 < 1)
    return 0;
  v12 = 0;
  v13 = 152 * v11;
  while (1)
  {
    v14 = *(_QWORD *)(v10 + 80);
    v15 = v14 + v12;
    if (*(_QWORD *)(v14 + v12 + 80) == a2)
    {
      v16 = *(unint64_t **)(v15 + 48);
      if (v16)
      {
        v20 = v14 + v12;
        v21 = google::protobuf::FieldDescriptor::TypeOnceInit;
        v17 = atomic_load(v16);
        if (v17 != -1)
        {
          v23 = &v21;
          v24 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))&v20;
          v22 = &v23;
          std::__call_once(v16, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      if (*(_DWORD *)(v14 + v12 + 56) == 11 && *(_DWORD *)(v14 + v12 + 60) == 1)
      {
        v18 = *(unint64_t **)(v15 + 48);
        if (v18)
        {
          v21 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))(v14 + v12);
          v19 = atomic_load(v18);
          if (v19 != -1)
          {
            v23 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
            v24 = &v21;
            v22 = &v23;
            std::__call_once(v18, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
        }
        result = v14 + v12;
        if (*(_QWORD *)(v14 + v12 + 104) == v10)
          break;
      }
    }
    v12 += 152;
    if (v13 == v12)
      return 0;
  }
  return result;
}

uint64_t google::protobuf::FieldDescriptor::type(google::protobuf::FieldDescriptor *this)
{
  unint64_t *v2;
  unint64_t v3;
  google::protobuf::FieldDescriptor *v5;
  uint64_t (*v6)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  _QWORD *v7;
  _QWORD v8[2];

  v2 = (unint64_t *)*((_QWORD *)this + 6);
  if (v2)
  {
    v5 = this;
    v6 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v3 = atomic_load(v2);
    if (v3 != -1)
    {
      v8[0] = &v6;
      v8[1] = &v5;
      v7 = v8;
      std::__call_once(v2, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  return *((unsigned int *)this + 14);
}

uint64_t google::protobuf::FieldDescriptor::message_type(google::protobuf::FieldDescriptor *this)
{
  unint64_t *v2;
  unint64_t v3;
  google::protobuf::FieldDescriptor *v5;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (unint64_t *)*((_QWORD *)this + 6);
  if (v2)
  {
    v5 = this;
    v3 = atomic_load(v2);
    if (v3 != -1)
    {
      v7[0] = google::protobuf::FieldDescriptor::TypeOnceInit;
      v7[1] = &v5;
      v6 = v7;
      std::__call_once(v2, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  return *((_QWORD *)this + 13);
}

uint64_t google::protobuf::Descriptor::FindFieldByNumber(google::protobuf::Descriptor *this, int a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = *(int8x8_t **)(*((_QWORD *)this + 2) + 144);
  v3 = v2[20];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = v2[19];
  v5 = (16777619 * a2) ^ (16777499 * (_QWORD)this);
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = (16777619 * a2) ^ (16777499 * (_QWORD)this);
    if (v5 >= *(_QWORD *)&v3)
      v7 = v5 % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & v5;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)&v4 + 8 * v7);
  if (!v8)
    return 0;
  v9 = *v8;
  if (!v9)
    return 0;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v14 = v9[1];
      if (v5 == v14)
      {
        if ((google::protobuf::Descriptor *)v9[2] == this && *((_DWORD *)v9 + 6) == a2)
          goto LABEL_28;
      }
      else if ((v14 & v10) != v7)
      {
        return 0;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        return 0;
    }
  }
  while (1)
  {
    v12 = v9[1];
    if (v5 == v12)
      break;
    if (v12 >= *(_QWORD *)&v3)
      v12 %= *(_QWORD *)&v3;
    if (v12 != v7)
      return 0;
LABEL_14:
    v9 = (uint64_t *)*v9;
    if (!v9)
      return 0;
  }
  if ((google::protobuf::Descriptor *)v9[2] != this || *((_DWORD *)v9 + 6) != a2)
    goto LABEL_14;
LABEL_28:
  v15 = v9[4];
  if (!v15)
    return 0;
  if (*(_BYTE *)(v15 + 67))
    return 0;
  else
    return v9[4];
}

uint64_t *google::protobuf::Descriptor::FindFieldByLowercaseName(uint64_t *a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const google::protobuf::FileDescriptorTables *);
  _QWORD *v10;
  _QWORD v11[2];

  v4 = *(_QWORD *)(a1[2] + 144);
  v8 = v4;
  v9 = google::protobuf::FileDescriptorTables::FieldsByLowercaseNamesLazyInitStatic;
  v5 = atomic_load((unint64_t *)(v4 + 88));
  if (v5 != -1)
  {
    v11[0] = &v9;
    v11[1] = &v8;
    v10 = v11;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FileDescriptorTables const*),google::protobuf::FileDescriptorTables const*&&>>);
  }
  if (a2[23] >= 0)
    v6 = a2;
  else
    v6 = *(char **)a2;
  if (result)
  {
    if (*((_BYTE *)result + 67))
      return 0;
  }
  return result;
}

uint64_t google::protobuf::Descriptor::FindFieldByName(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (google::protobuf::FileDescriptorTables::FindNestedSymbol(*(_QWORD **)(a1[2] + 144), a1, a2) != 2)
    return 0;
  if (*(_BYTE *)(v2 + 67))
    return 0;
  return v2;
}

uint64_t google::protobuf::Descriptor::map_key(google::protobuf::Descriptor *this)
{
  unsigned int *v2;
  char v4;
  std::string v5[2];

  if (!*(_BYTE *)(*((_QWORD *)this + 4) + 75))
    return 0;
  if (*((_DWORD *)this + 26) != 2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 1725);
    v2 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (field_count()) == (2): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, v2);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *((_QWORD *)this + 5);
}

void sub_22DC366EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC36700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Descriptor::map_value(google::protobuf::Descriptor *this)
{
  unsigned int *v2;
  char v4;
  std::string v5[2];

  if (!*(_BYTE *)(*((_QWORD *)this + 4) + 75))
    return 0;
  if (*((_DWORD *)this + 26) != 2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 1731);
    v2 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: (field_count()) == (2): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, v2);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *((_QWORD *)this + 5) + 152;
}

void sub_22DC367A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC367BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::EnumDescriptor::FindValueByName(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (google::protobuf::FileDescriptorTables::FindNestedSymbol(*(_QWORD **)(a1[2] + 144), a1, a2) == 5)
    return v2;
  else
    return 0;
}

uint64_t google::protobuf::EnumDescriptor::FindValueByNumber(google::protobuf::EnumDescriptor *this, int a2)
{
  int8x8_t *v2;
  int8x8_t v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;

  v2 = *(int8x8_t **)(*((_QWORD *)this + 2) + 144);
  v3 = v2[25];
  if (!*(_QWORD *)&v3)
    return 0;
  v4 = v2[24];
  v5 = (16777619 * a2) ^ (16777499 * (_QWORD)this);
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = (16777619 * a2) ^ (16777499 * (_QWORD)this);
    if (v5 >= *(_QWORD *)&v3)
      v7 = v5 % *(_QWORD *)&v3;
  }
  else
  {
    v7 = (*(_QWORD *)&v3 - 1) & v5;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)&v4 + 8 * v7);
  if (!v8)
    return 0;
  v9 = *v8;
  if (!v9)
    return 0;
  if (v6.u32[0] < 2uLL)
  {
    v10 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v14 = v9[1];
      if (v5 == v14)
      {
        if ((google::protobuf::EnumDescriptor *)v9[2] == this && *((_DWORD *)v9 + 6) == a2)
          return v9[4];
      }
      else if ((v14 & v10) != v7)
      {
        return 0;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        return 0;
    }
  }
  while (1)
  {
    v12 = v9[1];
    if (v5 == v12)
      break;
    if (v12 >= *(_QWORD *)&v3)
      v12 %= *(_QWORD *)&v3;
    if (v12 != v7)
      return 0;
LABEL_14:
    v9 = (uint64_t *)*v9;
    if (!v9)
      return 0;
  }
  if ((google::protobuf::EnumDescriptor *)v9[2] != this || *((_DWORD *)v9 + 6) != a2)
    goto LABEL_14;
  return v9[4];
}

uint64_t google::protobuf::EnumDescriptor::FindValueByNumberCreatingIfUnknown(google::protobuf::EnumDescriptor *this, uint64_t a2)
{
  return google::protobuf::FileDescriptorTables::FindEnumValueByNumberCreatingIfUnknown(*(std::mutex **)(*((_QWORD *)this + 2) + 144), this, a2);
}

uint64_t google::protobuf::FileDescriptorTables::FindEnumValueByNumberCreatingIfUnknown(std::mutex *this, const google::protobuf::EnumDescriptor *a2, uint64_t a3)
{
  int8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  std::mutex *v19;
  int8x8_t v20;
  char *v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v30;
  int8x8_t v31;
  uint8x8_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v39;
  _QWORD *v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type *v49;
  char *v50;
  const void **v51;
  int v52;
  size_t v53;
  unint64_t v54;
  std::string *p_dst;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  std::string *p_p;
  std::string::size_type size;
  std::string *v61;
  std::string::value_type *v62;
  std::string::size_type v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  uint64_t v70;
  google::protobuf::_anonymous_namespace_ *v71;
  void (*v72)(const void *);
  const void *v73;
  uint64_t v74;
  std::mutex *v75;
  std::string __dst;
  _DWORD v77[2];
  std::string __p;
  uint64_t v79;

  v6 = *(int8x8_t *)this[3].__m_.__opaque;
  v7 = (16777619 * (int)a3) ^ (16777499 * (_QWORD)a2);
  v8 = v7;
  if (!*(_QWORD *)&v6)
    goto LABEL_29;
  v9 = (uint8x8_t)vcnt_s8(v6);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = (16777619 * (int)a3) ^ (16777499 * (_QWORD)a2);
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(uint64_t ***)(this[3].__m_.__sig + 8 * v10);
  if (!v11)
    goto LABEL_29;
  v12 = *v11;
  if (!v12)
    goto LABEL_29;
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v17 = v12[1];
      if (v7 == v17)
      {
        if ((const google::protobuf::EnumDescriptor *)v12[2] == a2 && *((_DWORD *)v12 + 6) == (_DWORD)a3)
          goto LABEL_28;
      }
      else if ((v17 & v13) != v10)
      {
        goto LABEL_29;
      }
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_29;
    }
  }
  while (1)
  {
    v15 = v12[1];
    if (v7 == v15)
      break;
    if (v15 >= *(_QWORD *)&v6)
      v15 %= *(_QWORD *)&v6;
    if (v15 != v10)
      goto LABEL_29;
LABEL_14:
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_29;
  }
  if ((const google::protobuf::EnumDescriptor *)v12[2] != a2 || *((_DWORD *)v12 + 6) != (_DWORD)a3)
    goto LABEL_14;
LABEL_28:
  v18 = v12[4];
  if (v18)
    return v18;
LABEL_29:
  v19 = this + 5;
  std::mutex::lock(this + 5);
  v20 = *(int8x8_t *)&this[3].__m_.__opaque[40];
  v21 = &this[3].__m_.__opaque[32];
  if (!*(_QWORD *)&v20)
    goto LABEL_55;
  v22 = (uint8x8_t)vcnt_s8(v20);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    v23 = v7;
    if (v7 >= *(_QWORD *)&v20)
      v23 = v7 % *(_QWORD *)&v20;
  }
  else
  {
    v23 = (*(_QWORD *)&v20 - 1) & v7;
  }
  v24 = *(uint64_t ***)(*(_QWORD *)&this[3].__m_.__opaque[32] + 8 * v23);
  if (!v24 || (v25 = *v24) == 0)
  {
LABEL_55:
    std::mutex::unlock(this + 5);
    goto LABEL_56;
  }
  if (v22.u32[0] < 2uLL)
  {
    v26 = *(_QWORD *)&v20 - 1;
    while (1)
    {
      v30 = v25[1];
      if (v30 == v7)
      {
        if ((const google::protobuf::EnumDescriptor *)v25[2] == a2 && *((_DWORD *)v25 + 6) == (_DWORD)a3)
          goto LABEL_83;
      }
      else if ((v30 & v26) != v23)
      {
        goto LABEL_55;
      }
      v25 = (uint64_t *)*v25;
      if (!v25)
        goto LABEL_55;
    }
  }
  while (2)
  {
    v28 = v25[1];
    if (v28 != v7)
    {
      if (v28 >= *(_QWORD *)&v20)
        v28 %= *(_QWORD *)&v20;
      if (v28 != v23)
        goto LABEL_55;
      goto LABEL_42;
    }
    if ((const google::protobuf::EnumDescriptor *)v25[2] != a2 || *((_DWORD *)v25 + 6) != (_DWORD)a3)
    {
LABEL_42:
      v25 = (uint64_t *)*v25;
      if (!v25)
        goto LABEL_55;
      continue;
    }
    break;
  }
LABEL_83:
  v18 = v25[4];
  std::mutex::unlock(this + 5);
  if (v18)
    return v18;
LABEL_56:
  std::mutex::lock(this + 5);
  v31 = *(int8x8_t *)&this[3].__m_.__opaque[40];
  if (!*(_QWORD *)&v31)
    goto LABEL_86;
  v32 = (uint8x8_t)vcnt_s8(v31);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    if (v7 >= *(_QWORD *)&v31)
      v8 = v7 % *(_QWORD *)&v31;
  }
  else
  {
    v8 = (*(_QWORD *)&v31 - 1) & v7;
  }
  v33 = *(uint64_t ***)(*(_QWORD *)&this[3].__m_.__opaque[32] + 8 * v8);
  if (!v33 || (v34 = *v33) == 0)
  {
LABEL_86:
    v40 = *(_QWORD **)a2;
    if (*(char *)(*(_QWORD *)a2 + 23) < 0)
      v40 = (_QWORD *)*v40;
    v75 = this + 5;
    google::protobuf::StringPrintf((google::protobuf *)"UNKNOWN_ENUM_VALUE_%s_%d", &__p, v40, a3);
    v41 = atomic_load((unsigned __int8 *)&qword_25407B4D8);
    if ((v41 & 1) == 0)
    {
      v71 = (google::protobuf::_anonymous_namespace_ *)__cxa_guard_acquire(&qword_25407B4D8);
      if ((_DWORD)v71)
      {
        google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::OnShutdownDelete<google::protobuf::DescriptorPool>(google::protobuf::DescriptorPool *)::{lambda(void const*)#1}::__invoke, v72, v73);
        _MergedGlobals_31 = (uint64_t)v72;
        __cxa_guard_release(&qword_25407B4D8);
      }
    }
    v42 = _MergedGlobals_31;
    google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_google_2fprotobuf_2fdescriptor_2eproto, 0);
    v43 = *(_QWORD *)(v42 + 32);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 40;
    v44 = *(_QWORD **)(v43 + 192);
    if ((unint64_t)v44 >= *(_QWORD *)(v43 + 200))
    {
      v46 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v43 + 184), (int *)&__dst);
    }
    else
    {
      *v44 = 0;
      v44[1] = 0;
      v44[2] = 0;
      v45 = operator new(0x28uLL);
      *v44 = v45;
      v44[2] = v45 + 5;
      v45[4] = 0;
      *(_OWORD *)v45 = 0u;
      *((_OWORD *)v45 + 1) = 0u;
      v44[1] = v45 + 5;
      v46 = (char *)(v44 + 3);
      *(_QWORD *)(v43 + 192) = v44 + 3;
    }
    *(_QWORD *)(v43 + 192) = v46;
    v18 = *((_QWORD *)v46 - 3);
    v47 = (std::string *)operator new();
    v48 = (std::string::size_type)v47;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      *v47 = __p;
    __dst.__r_.__value_.__r.__words[0] = v48;
    v49 = *(std::string::size_type **)(v43 + 216);
    v74 = (uint64_t)v21;
    if ((unint64_t)v49 >= *(_QWORD *)(v43 + 224))
    {
      v50 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v43 + 208), &__dst);
      v48 = __dst.__r_.__value_.__r.__words[0];
    }
    else
    {
      *v49 = v48;
      v50 = (char *)(v49 + 1);
    }
    *(_QWORD *)(v43 + 216) = v50;
    *(_QWORD *)v18 = v48;
    v51 = (const void **)*((_QWORD *)a2 + 1);
    v52 = *((char *)v51 + 23);
    if (v52 >= 0)
      v53 = *((unsigned __int8 *)v51 + 23);
    else
      v53 = (size_t)v51[1];
    v54 = v53 + 1;
    if (v53 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v54 >= 0x17)
    {
      v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v54 | 7) != 0x17)
        v56 = v54 | 7;
      v57 = v56 + 1;
      p_dst = (std::string *)operator new(v56 + 1);
      __dst.__r_.__value_.__l.__size_ = v53 + 1;
      __dst.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v53 + 1;
      if (!v53)
        goto LABEL_112;
    }
    if (v52 >= 0)
      v58 = v51;
    else
      v58 = *v51;
    memmove(p_dst, v58, v53);
LABEL_112:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v53) = 46;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v61 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
    v62 = (std::string::value_type *)v61->__r_.__value_.__r.__words[0];
    v63 = v61->__r_.__value_.__l.__size_;
    v77[0] = v61->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v77 + 3) = *(_DWORD *)((char *)&v61->__r_.__value_.__r.__words[2] + 3);
    v64 = SHIBYTE(v61->__r_.__value_.__r.__words[2]);
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    v65 = operator new();
    v66 = v65;
    if (v64 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v65, v62, v63);
    }
    else
    {
      *(_QWORD *)v65 = v62;
      *(_QWORD *)(v65 + 8) = v63;
      *(_DWORD *)(v65 + 16) = v77[0];
      *(_DWORD *)(v65 + 19) = *(_DWORD *)((char *)v77 + 3);
      *(_BYTE *)(v65 + 23) = v64;
    }
    v79 = v66;
    v67 = *(uint64_t **)(v43 + 216);
    if ((unint64_t)v67 >= *(_QWORD *)(v43 + 224))
    {
      v68 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v43 + 208), &v79);
      v70 = v79;
      *(_QWORD *)(v43 + 216) = v68;
      *(_QWORD *)(v18 + 8) = v70;
      if ((v64 & 0x80000000) == 0)
        goto LABEL_124;
    }
    else
    {
      *v67 = v66;
      v68 = (char *)(v67 + 1);
      *(_QWORD *)(v43 + 216) = v68;
      *(_QWORD *)(v18 + 8) = v66;
      if ((v64 & 0x80000000) == 0)
      {
LABEL_124:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        *(_DWORD *)(v18 + 16) = a3;
        *(_QWORD *)(v18 + 24) = a2;
        *(_QWORD *)(v18 + 32) = google::protobuf::EnumValueOptions::default_instance((google::protobuf::EnumValueOptions *)v68);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        __dst.__r_.__value_.__l.__size_ = a3;
        v19 = v75;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_128;
      }
    }
    operator delete(v62);
    goto LABEL_124;
  }
  if (v32.u32[0] < 2uLL)
  {
    v35 = *(_QWORD *)&v31 - 1;
    while (1)
    {
      v39 = v34[1];
      if (v39 == v7)
      {
        if ((const google::protobuf::EnumDescriptor *)v34[2] == a2 && *((_DWORD *)v34 + 6) == (_DWORD)a3)
          goto LABEL_85;
      }
      else if ((v39 & v35) != v8)
      {
        goto LABEL_86;
      }
      v34 = (uint64_t *)*v34;
      if (!v34)
        goto LABEL_86;
    }
  }
  while (1)
  {
    v37 = v34[1];
    if (v37 == v7)
      break;
    if (v37 >= *(_QWORD *)&v31)
      v37 %= *(_QWORD *)&v31;
    if (v37 != v8)
      goto LABEL_86;
LABEL_69:
    v34 = (uint64_t *)*v34;
    if (!v34)
      goto LABEL_86;
  }
  if ((const google::protobuf::EnumDescriptor *)v34[2] != a2 || *((_DWORD *)v34 + 6) != (_DWORD)a3)
    goto LABEL_69;
LABEL_85:
  v18 = v34[4];
  if (!v18)
    goto LABEL_86;
LABEL_128:
  std::mutex::unlock(v19);
  return v18;
}

void sub_22DC36F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __cxa_guard_abort(&qword_25407B4D8);
  if ((a25 & 0x80000000) == 0)
  {
    std::mutex::unlock(a12);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

_DWORD *google::protobuf::Descriptor::FindExtensionRangeContainingNumber(google::protobuf::Descriptor *this, int a2)
{
  uint64_t v2;
  _DWORD *result;

  v2 = *((unsigned int *)this + 31);
  if ((int)v2 < 1)
    return 0;
  for (result = (_DWORD *)*((_QWORD *)this + 9); *result > a2 || result[1] <= a2; result += 4)
  {
    if (!--v2)
      return 0;
  }
  return result;
}

_DWORD *google::protobuf::Descriptor::FindReservedRangeContainingNumber(google::protobuf::Descriptor *this, int a2)
{
  uint64_t v2;
  _DWORD *result;

  v2 = *((unsigned int *)this + 33);
  if ((int)v2 < 1)
    return 0;
  for (result = (_DWORD *)*((_QWORD *)this + 11); *result > a2 || result[1] <= a2; result += 2)
  {
    if (!--v2)
      return 0;
  }
  return result;
}

google::protobuf::FileDescriptor *google::protobuf::DescriptorPool::BuildFileFromDatabase(google::protobuf::DescriptorPool *this, const google::protobuf::FileDescriptorProto *a2)
{
  google::protobuf::FileDescriptor *v4;
  void *v6;
  void *v7;
  void *v8[6];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;

  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(*((_QWORD *)this + 4) + 24), *((_QWORD *)a2 + 22)))
  {
    return 0;
  }
  v6 = (void *)*((_QWORD *)this + 4);
  v7 = (void *)*((_QWORD *)this + 2);
  v8[0] = this;
  v8[1] = v6;
  v10 = 0;
  v11 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v8[2] = v7;
  memset(&v8[3], 0, 24);
  v9 = 0;
  v12 = 0;
  v13 = v14;
  v15[0] = 0;
  v15[1] = 0;
  v14[2] = v15;
  v19 = 0;
  v18 = 0;
  v17 = 0u;
  v16 = 0u;
  v4 = google::protobuf::DescriptorBuilder::BuildFile((google::protobuf::DescriptorBuilder *)v8, (const std::string **)a2);
  google::protobuf::DescriptorBuilder::~DescriptorBuilder(v8);
  if (v4)
    return v4;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*((_QWORD *)this + 4) + 24, *((_QWORD *)a2 + 22), *((_QWORD *)a2 + 22));
  return 0;
}

void sub_22DC37220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::DescriptorBuilder::~DescriptorBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorPool::IsSubSymbolOfBuiltType(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string *p_dst;
  _QWORD *v9;
  std::string *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t IsSubSymbolOfBuiltType;
  std::string __dst;
  std::string v18;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v18 = *(std::string *)a2;
  v4 = std::string::rfind(&v18, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 != -1)
  {
    while (1)
    {
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v6 = &v18;
      }
      else
      {
        size = v18.__r_.__value_.__l.__size_;
        v6 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      if (size >= v4)
        v7 = v4;
      else
        v7 = size;
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v7 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7;
      p_dst = &__dst;
      if (v7)
        goto LABEL_26;
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
LABEL_27:
      operator delete(v18.__r_.__value_.__l.__data_);
LABEL_17:
      v18 = __dst;
      v9 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 304);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v18;
      else
        v10 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      v11 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v9, (const char **)&__dst.__r_.__value_.__l.__data_);
      if (v11 && (*((_DWORD *)v11 + 6) | 8) != 8)
      {
        IsSubSymbolOfBuiltType = 1;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_32:
          operator delete(v18.__r_.__value_.__l.__data_);
        return IsSubSymbolOfBuiltType;
      }
      v4 = std::string::rfind(&v18, 46, 0xFFFFFFFFFFFFFFFFLL);
      if (v4 == -1)
        goto LABEL_28;
    }
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_26:
    memmove(p_dst, v6, v7);
    p_dst->__r_.__value_.__s.__data_[v7] = 0;
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_27;
  }
LABEL_28:
  v14 = *(_QWORD *)(a1 + 24);
  if (v14)
  {
    IsSubSymbolOfBuiltType = google::protobuf::DescriptorPool::IsSubSymbolOfBuiltType(v14, a2);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_32;
  }
  else
  {
    IsSubSymbolOfBuiltType = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_32;
  }
  return IsSubSymbolOfBuiltType;
}

void sub_22DC37414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::FieldDescriptor::is_map_message_type(google::protobuf::FieldDescriptor *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 13) + 32) + 75);
}

void google::protobuf::FieldDescriptor::DefaultValueAsString(google::protobuf::FieldDescriptor *this@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  int v4;
  unint64_t *v7;
  std::string *v8;
  unsigned int *v9;
  unint64_t v10;
  int v11;
  google::protobuf *v12;
  std::string *v13;
  size_t v14;
  const void *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  google::protobuf *v19;
  google::protobuf *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 *v23;
  __int128 v24;
  std::string::size_type v25;
  uint64_t v26;
  const char *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  std::string v37;
  google::protobuf::FieldDescriptor *v38;
  uint64_t (*v39)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  std::string v40;
  uint64_t v41;

  v4 = (int)a2;
  v41 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 64))
  {
    v7 = (unint64_t *)*((_QWORD *)this + 6);
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v40, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 1995);
    v8 = google::protobuf::internal::LogMessage::operator<<(&v40, "CHECK failed: has_default_value(): ");
    v9 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "No default value");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v37, v9);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v40.__r_.__value_.__l.__data_);
    v7 = (unint64_t *)*((_QWORD *)this + 6);
    if (!v7)
      goto LABEL_7;
  }
  v38 = this;
  v39 = google::protobuf::FieldDescriptor::TypeOnceInit;
  v10 = atomic_load(v7);
  if (v10 != -1)
  {
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
    v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v38;
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    std::__call_once(v7, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
  }
LABEL_7:
  v11 = *((_DWORD *)this + 14);
  switch(v11)
  {
    case 1:
      google::protobuf::SimpleDtoa(*((double *)this + 18), a2, a4);
      return;
    case 2:
      google::protobuf::SimpleFtoa(*((float *)this + 36), a2, a4);
      return;
    case 3:
    case 16:
    case 18:
      v26 = *((_QWORD *)this + 18);
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40.__r_.__value_.__r.__words[2];
      v13 = (std::string *)google::protobuf::FastInt64ToBufferLeft(v26, &v40.__r_.__value_.__s.__data_[16], a3);
      v14 = (char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2];
      v40.__r_.__value_.__l.__size_ = (char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2];
      if ((unint64_t)((char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2]) > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = (const void *)v40.__r_.__value_.__r.__words[0];
      if (v14 < 0x17)
        goto LABEL_34;
      v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v16 = v14 | 7;
      goto LABEL_57;
    case 4:
    case 6:
      v20 = (google::protobuf *)*((_QWORD *)this + 18);
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40.__r_.__value_.__r.__words[2];
      v13 = (std::string *)google::protobuf::FastUInt64ToBufferLeft(v20, &v40.__r_.__value_.__s.__data_[16], a3);
      v14 = (char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2];
      v40.__r_.__value_.__l.__size_ = (char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2];
      if ((unint64_t)((char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2]) > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = (const void *)v40.__r_.__value_.__r.__words[0];
      if (v14 < 0x17)
        goto LABEL_34;
      v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v16 = v14 | 7;
      goto LABEL_57;
    case 5:
    case 15:
    case 17:
      v12 = (google::protobuf *)*((unsigned int *)this + 36);
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40.__r_.__value_.__r.__words[2];
      v13 = (std::string *)google::protobuf::FastInt32ToBufferLeft(v12, &v40.__r_.__value_.__s.__data_[16], a3);
      v14 = (char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2];
      v40.__r_.__value_.__l.__size_ = (char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2];
      if ((unint64_t)((char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2]) > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = (const void *)v40.__r_.__value_.__r.__words[0];
      if (v14 < 0x17)
        goto LABEL_34;
      v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v16 = v14 | 7;
      goto LABEL_57;
    case 7:
    case 13:
      v19 = (google::protobuf *)*((unsigned int *)this + 36);
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40.__r_.__value_.__r.__words[2];
      v13 = (std::string *)google::protobuf::FastUInt32ToBufferLeft(v19, &v40.__r_.__value_.__s.__data_[16], a3);
      v14 = (char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2];
      v40.__r_.__value_.__l.__size_ = (char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2];
      if ((unint64_t)((char *)v13 - (char *)&v40.__r_.__value_.__r.__words[2]) > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = (const void *)v40.__r_.__value_.__r.__words[0];
      if (v14 < 0x17)
      {
LABEL_34:
        *((_BYTE *)&a4->__r_.__value_.__s + 23) = v14;
        if (v13 == (std::string *)&v40.__r_.__value_.__r.__words[2])
          goto LABEL_59;
      }
      else
      {
        v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v16 = v14 | 7;
LABEL_57:
        v35 = v16 + 1;
        v36 = (std::string *)operator new(v16 + 1);
        a4->__r_.__value_.__l.__size_ = v14;
        a4->__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
        a4->__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
        a4 = v36;
      }
      memmove(a4, v15, v14);
LABEL_59:
      a4->__r_.__value_.__s.__data_[v14] = 0;
      return;
    case 8:
      if (*((_BYTE *)this + 144))
        v27 = "true";
      else
        v27 = "false";
      if (*((_BYTE *)this + 144))
        v14 = 4;
      else
        v14 = 5;
      *((_BYTE *)&a4->__r_.__value_.__s + 23) = v14;
      memcpy(a4, v27, v14);
      goto LABEL_59;
    case 9:
    case 12:
      if (v4)
      {
        google::protobuf::CEscape(*((_QWORD *)this + 18), a3, &v37);
        v28 = std::string::insert(&v37, 0, "\"");
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v40, "\"");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        a4->__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
      }
      else
      {
        v32 = (unint64_t *)*((_QWORD *)this + 6);
        if (v32)
        {
          v38 = this;
          v39 = google::protobuf::FieldDescriptor::TypeOnceInit;
          v33 = atomic_load(v32);
          if (v33 != -1)
          {
            v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
            v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v38;
            v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
            std::__call_once(v32, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
          v11 = *((_DWORD *)this + 14);
        }
        v34 = *((_QWORD *)this + 18);
        if (v11 == 12)
        {
          google::protobuf::CEscape(v34, a3, a4);
          return;
        }
        if ((*(char *)(v34 + 23) & 0x80000000) == 0)
        {
          v24 = *(_OWORD *)v34;
          v25 = *(_QWORD *)(v34 + 16);
          goto LABEL_31;
        }
        std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)v34, *(_QWORD *)(v34 + 8));
      }
      break;
    case 10:
    case 11:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v40, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 2033);
      v17 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(&v40, "Messages can't have default values!");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v37, v17);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v40.__r_.__value_.__l.__data_);
      goto LABEL_15;
    case 14:
      v21 = (unint64_t *)*((_QWORD *)this + 6);
      if (v21)
      {
        v39 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
        v22 = atomic_load(v21);
        if (v22 != -1)
        {
          v40.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
          v40.__r_.__value_.__l.__size_ = (std::string::size_type)&v39;
          v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
          std::__call_once(v21, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      v23 = (__int128 *)**((_QWORD **)this + 18);
      if (*((char *)v23 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
      }
      else
      {
        v24 = *v23;
        v25 = *((_QWORD *)v23 + 2);
LABEL_31:
        a4->__r_.__value_.__r.__words[2] = v25;
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v24;
      }
      break;
    default:
LABEL_15:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v40, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 2036);
      v18 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(&v40, "Can't get here: failed to get default value as string");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v37, v18);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v40.__r_.__value_.__l.__data_);
      *((_BYTE *)&a4->__r_.__value_.__s + 23) = 0;
      a4->__r_.__value_.__s.__data_[0] = 0;
      return;
  }
}

void sub_22DC379CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::FieldDescriptor::default_value_enum(google::protobuf::FieldDescriptor *this)
{
  unint64_t *v2;
  unint64_t v3;
  google::protobuf::FieldDescriptor *v5;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (unint64_t *)*((_QWORD *)this + 6);
  if (v2)
  {
    v5 = this;
    v3 = atomic_load(v2);
    if (v3 != -1)
    {
      v7[0] = google::protobuf::FieldDescriptor::TypeOnceInit;
      v7[1] = &v5;
      v6 = v7;
      std::__call_once(v2, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  return *((_QWORD *)this + 18);
}

void google::protobuf::FileDescriptor::CopyTo(google::protobuf::FileDescriptor *this, google::protobuf::FileDescriptorProto *a2)
{
  std::string *v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  int v11;
  std::string **v12;
  uint64_t v13;
  google::protobuf::Arena *v14;
  std::string *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  google::protobuf::DescriptorProto *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  google::protobuf::EnumDescriptorProto *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  google::protobuf::ServiceDescriptorProto *v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  google::protobuf::FieldDescriptorProto *v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  google::protobuf::FileOptions *v66;
  uint64_t v67;
  google::protobuf::Arena *v68;
  google::protobuf::FileDescriptor *v69;
  std::string *v70;
  std::string v71[2];

  v4 = *(std::string **)this;
  *((_DWORD *)a2 + 4) |= 1u;
  v5 = (std::string **)((char *)a2 + 176);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    v7 = *(google::protobuf::Arena **)v7;
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      v9 = std::string::operator=(v8, v4);
      v10 = *((_QWORD *)this + 1);
      v11 = *(char *)(v10 + 23);
      if ((v11 & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      if (!*(_QWORD *)(v10 + 8))
        goto LABEL_12;
      goto LABEL_9;
    }
  }
  else
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (__int128 *)v4);
  v10 = *((_QWORD *)this + 1);
  v11 = *(char *)(v10 + 23);
  if (v11 < 0)
    goto LABEL_8;
LABEL_4:
  if (!(_BYTE)v11)
  {
LABEL_12:
    if (*((_DWORD *)this + 15) != 3)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_9:
  *((_DWORD *)a2 + 4) |= 2u;
  v12 = (std::string **)((char *)a2 + 184);
  v13 = *((_QWORD *)a2 + 1);
  v14 = (google::protobuf::Arena *)(v13 & 0xFFFFFFFFFFFFFFFELL);
  if ((v13 & 1) != 0)
  {
    v14 = *(google::protobuf::Arena **)v14;
    v15 = *v12;
    if (*v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_11;
  }
  else
  {
    v15 = *v12;
    if (*v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_11:
      v9 = std::string::operator=(v15, (const std::string *)v10);
      goto LABEL_12;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v12, v14, (__int128 *)v10);
  if (*((_DWORD *)this + 15) == 3)
LABEL_13:
    google::protobuf::FileDescriptorProto::set_syntax(a2, "proto3");
LABEL_14:
  if (*((int *)this + 8) >= 1)
  {
    v16 = 0;
    do
    {
      v17 = (unint64_t *)*((_QWORD *)this + 3);
      if (v17)
      {
        v69 = this;
        v18 = atomic_load(v17);
        if (v18 != -1)
        {
          v71[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FileDescriptor::DependenciesOnceInit;
          v71[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v69;
          v70 = v71;
          std::__call_once(v17, &v70, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FileDescriptor const*),google::protobuf::FileDescriptor const*&&>>);
        }
      }
      v9 = google::protobuf::FileDescriptorProto::add_dependency((uint64_t)a2, **(std::string ***)(*((_QWORD *)this + 9) + 8 * v16++));
    }
    while (v16 < *((int *)this + 8));
  }
  if (*((int *)this + 9) >= 1)
  {
    v19 = 0;
    v20 = *((_DWORD *)a2 + 36);
    do
    {
      v21 = *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v19);
      v22 = *((_DWORD *)a2 + 37);
      if (v20 + (_DWORD)v19 == v22)
      {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a2 + 36, v20 + v19 + 1);
        v22 = *((_DWORD *)a2 + 37);
      }
      if (v22 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v71, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 353);
        v23 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v71, "CHECK failed: (total_size_) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((uint64_t)&v70, v23);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v71[0].__r_.__value_.__l.__data_);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 19) + 4 * (v20 + v19)) = v21;
      *((_DWORD *)a2 + 36) = v20 + v19++ + 1;
    }
    while (v19 < *((int *)this + 9));
  }
  if (*((int *)this + 10) >= 1)
  {
    v24 = 0;
    v25 = *((_DWORD *)a2 + 40);
    do
    {
      v26 = *(_DWORD *)(*((_QWORD *)this + 12) + 4 * v24);
      v27 = *((_DWORD *)a2 + 41);
      if (v25 + (_DWORD)v24 == v27)
      {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)a2 + 40, v25 + v24 + 1);
        v27 = *((_DWORD *)a2 + 41);
      }
      if (v27 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v71, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 353);
        v28 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v71, "CHECK failed: (total_size_) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((uint64_t)&v70, v28);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v71[0].__r_.__value_.__l.__data_);
      }
      *(_DWORD *)(*((_QWORD *)a2 + 21) + 4 * (v25 + v24)) = v26;
      *((_DWORD *)a2 + 40) = v25 + v24++ + 1;
    }
    while (v24 < *((int *)this + 10));
  }
  if (*((int *)this + 11) >= 1)
  {
    v29 = 0;
    v30 = 0;
    while (1)
    {
      v32 = *((_QWORD *)this + 13);
      v33 = (int *)*((_QWORD *)a2 + 8);
      if (!v33)
        break;
      v34 = *((int *)a2 + 14);
      v35 = *v33;
      if ((int)v34 >= *v33)
      {
        if (v35 != *((_DWORD *)a2 + 15))
          goto LABEL_44;
        goto LABEL_43;
      }
      *((_DWORD *)a2 + 14) = v34 + 1;
      v31 = *(google::protobuf::DescriptorProto **)&v33[2 * v34 + 2];
LABEL_37:
      google::protobuf::Descriptor::CopyTo((google::protobuf::Descriptor *)(v32 + v29), v31);
      ++v30;
      v29 += 144;
      if (v30 >= *((int *)this + 11))
        goto LABEL_45;
    }
    v35 = *((_DWORD *)a2 + 15);
LABEL_43:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 12, v35 + 1);
    v33 = (int *)*((_QWORD *)a2 + 8);
    v35 = *v33;
LABEL_44:
    *v33 = v35 + 1;
    v31 = google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto>(*((google::protobuf::Arena **)a2
                                                                                         + 6));
    v36 = *((_QWORD *)a2 + 8);
    v37 = *((int *)a2 + 14);
    *((_DWORD *)a2 + 14) = v37 + 1;
    *(_QWORD *)(v36 + 8 * v37 + 8) = v31;
    goto LABEL_37;
  }
LABEL_45:
  if (*((int *)this + 12) >= 1)
  {
    v38 = 0;
    v39 = 0;
    while (1)
    {
      v41 = *((_QWORD *)this + 14);
      v42 = (int *)*((_QWORD *)a2 + 11);
      if (!v42)
        break;
      v43 = *((int *)a2 + 20);
      v44 = *v42;
      if ((int)v43 >= *v42)
      {
        if (v44 != *((_DWORD *)a2 + 21))
          goto LABEL_55;
        goto LABEL_54;
      }
      *((_DWORD *)a2 + 20) = v43 + 1;
      v40 = *(google::protobuf::EnumDescriptorProto **)&v42[2 * v43 + 2];
LABEL_48:
      google::protobuf::EnumDescriptor::CopyTo((google::protobuf::EnumDescriptor *)(v41 + v38), v40);
      ++v39;
      v38 += 80;
      if (v39 >= *((int *)this + 12))
        goto LABEL_56;
    }
    v44 = *((_DWORD *)a2 + 21);
LABEL_54:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 18, v44 + 1);
    v42 = (int *)*((_QWORD *)a2 + 11);
    v44 = *v42;
LABEL_55:
    *v42 = v44 + 1;
    v40 = (google::protobuf::EnumDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::EnumDescriptorProto>(*((google::protobuf::Arena **)a2 + 9));
    v45 = *((_QWORD *)a2 + 11);
    v46 = *((int *)a2 + 20);
    *((_DWORD *)a2 + 20) = v46 + 1;
    *(_QWORD *)(v45 + 8 * v46 + 8) = v40;
    goto LABEL_48;
  }
LABEL_56:
  if (*((int *)this + 13) >= 1)
  {
    v47 = 0;
    v48 = 0;
    while (1)
    {
      v50 = *((_QWORD *)this + 15);
      v51 = (int *)*((_QWORD *)a2 + 14);
      if (!v51)
        break;
      v52 = *((int *)a2 + 26);
      v53 = *v51;
      if ((int)v52 >= *v51)
      {
        if (v53 != *((_DWORD *)a2 + 27))
          goto LABEL_66;
        goto LABEL_65;
      }
      *((_DWORD *)a2 + 26) = v52 + 1;
      v49 = *(google::protobuf::ServiceDescriptorProto **)&v51[2 * v52 + 2];
LABEL_59:
      google::protobuf::ServiceDescriptor::CopyTo((google::protobuf::ServiceDescriptor *)(v50 + v47), v49);
      ++v48;
      v47 += 48;
      if (v48 >= *((int *)this + 13))
        goto LABEL_67;
    }
    v53 = *((_DWORD *)a2 + 27);
LABEL_65:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 24, v53 + 1);
    v51 = (int *)*((_QWORD *)a2 + 14);
    v53 = *v51;
LABEL_66:
    *v51 = v53 + 1;
    v49 = (google::protobuf::ServiceDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::ServiceDescriptorProto>(*((google::protobuf::Arena **)a2 + 12));
    v54 = *((_QWORD *)a2 + 14);
    v55 = *((int *)a2 + 26);
    *((_DWORD *)a2 + 26) = v55 + 1;
    *(_QWORD *)(v54 + 8 * v55 + 8) = v49;
    goto LABEL_59;
  }
LABEL_67:
  if (*((int *)this + 14) >= 1)
  {
    v56 = 0;
    v57 = 0;
    while (1)
    {
      v59 = *((_QWORD *)this + 16);
      v60 = (int *)*((_QWORD *)a2 + 17);
      if (!v60)
        break;
      v61 = *((int *)a2 + 32);
      v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 != *((_DWORD *)a2 + 33))
          goto LABEL_77;
        goto LABEL_76;
      }
      *((_DWORD *)a2 + 32) = v61 + 1;
      v58 = *(google::protobuf::FieldDescriptorProto **)&v60[2 * v61 + 2];
LABEL_70:
      google::protobuf::FieldDescriptor::CopyTo((google::protobuf::FieldDescriptor *)(v59 + v56), v58);
      ++v57;
      v56 += 152;
      if (v57 >= *((int *)this + 14))
        goto LABEL_78;
    }
    v62 = *((_DWORD *)a2 + 33);
LABEL_76:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 30, v62 + 1);
    v60 = (int *)*((_QWORD *)a2 + 17);
    v62 = *v60;
LABEL_77:
    *v60 = v62 + 1;
    v58 = (google::protobuf::FieldDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FieldDescriptorProto>(*((google::protobuf::Arena **)a2 + 15));
    v63 = *((_QWORD *)a2 + 17);
    v64 = *((int *)a2 + 32);
    *((_DWORD *)a2 + 32) = v64 + 1;
    *(_QWORD *)(v63 + 8 * v64 + 8) = v58;
    goto LABEL_70;
  }
LABEL_78:
  v65 = (uint64_t *)*((_QWORD *)this + 17);
  if (v65 != google::protobuf::FileOptions::default_instance((google::protobuf::FileOptions *)v9))
  {
    *((_DWORD *)a2 + 4) |= 8u;
    v66 = (google::protobuf::FileOptions *)*((_QWORD *)a2 + 25);
    if (!v66)
    {
      v67 = *((_QWORD *)a2 + 1);
      v68 = (google::protobuf::Arena *)(v67 & 0xFFFFFFFFFFFFFFFELL);
      if ((v67 & 1) != 0)
        v68 = *(google::protobuf::Arena **)v68;
      v66 = (google::protobuf::FileOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FileOptions>(v68);
      *((_QWORD *)a2 + 25) = v66;
    }
    google::protobuf::FileOptions::CopyFrom(v66, *((const google::protobuf::FileOptions **)this + 17));
  }
}

void sub_22DC38168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC3817C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC38190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC381A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::FileDescriptorProto::set_syntax(google::protobuf::FileDescriptorProto *this, const char *__s)
{
  unsigned int *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  std::string *v12;
  std::string **v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  std::string __dst[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__dst, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 7651);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__dst, "CHECK failed: value != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__dst[0].__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 4) |= 4u;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (std::string *)operator new(v8 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v6;
    __dst[0].__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v5;
  v7 = __dst;
  if (v5)
LABEL_10:
    memcpy(v7, __s, v6);
  v7->__r_.__value_.__s.__data_[v6] = 0;
  v10 = *((_QWORD *)this + 1);
  v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
  {
    v11 = *(google::protobuf::Arena **)v11;
    v15 = (uint64_t *)*((_QWORD *)this + 24);
    v13 = (std::string **)((char *)this + 192);
    v12 = (std::string *)v15;
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
  }
  else
  {
    v14 = (uint64_t *)*((_QWORD *)this + 24);
    v13 = (std::string **)((char *)this + 192);
    v12 = (std::string *)v14;
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_13:
      std::string::operator=(v12, __dst);
      goto LABEL_16;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v13, v11, (__int128 *)__dst);
LABEL_16:
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
}

void sub_22DC38330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC38344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC38358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::FileDescriptorProto::add_dependency(uint64_t a1, std::string *__str)
{
  std::string *v2;
  google::protobuf::internal::ArenaImpl **v4;
  int *v5;
  uint64_t v6;
  int v7;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = __str;
  v4 = (google::protobuf::internal::ArenaImpl **)(a1 + 24);
  v5 = *(int **)(a1 + 40);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 36);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v7 + 1);
    v5 = *(int **)(a1 + 40);
    v7 = *v5;
    goto LABEL_8;
  }
  v6 = *(int *)(a1 + 32);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 32) = v6 + 1;
    AlignedAndAddCleanup = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(AlignedAndAddCleanup, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 36))
    goto LABEL_7;
LABEL_8:
  *v5 = v7 + 1;
  v9 = *v4;
  if (v9)
  {
    if (*((_QWORD *)v9 + 14))
    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v9, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    AlignedAndAddCleanup = (std::string *)operator new();
  }
  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = AlignedAndAddCleanup;
  __str = v2;
  return std::string::operator=(AlignedAndAddCleanup, __str);
}

void google::protobuf::Descriptor::CopyTo(google::protobuf::Descriptor *this, google::protobuf::DescriptorProto *a2)
{
  __int128 *v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::FieldDescriptorProto *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::OneofDescriptorProto *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  google::protobuf::DescriptorProto *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  google::protobuf::EnumDescriptorProto *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  google::protobuf::ExtensionRangeOptions *data;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  int v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  int v57;
  int v58;
  int v59;
  std::string *v60;
  const google::protobuf::ExtensionRangeOptions *v61;
  std::string::size_type size;
  google::protobuf::Arena *v63;
  uint64_t v64;
  uint64_t v65;
  google::protobuf::FieldDescriptorProto *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  int v76;
  int v77;
  int *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  google::protobuf::MessageOptions *v85;
  uint64_t v86;
  google::protobuf::Arena *v87;

  v4 = *(__int128 **)this;
  *((_DWORD *)a2 + 4) |= 1u;
  v5 = (std::string **)((char *)a2 + 216);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) == 0)
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
LABEL_6:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, v4);
    if (*((int *)this + 26) < 1)
      goto LABEL_17;
    goto LABEL_7;
  }
  v7 = *(google::protobuf::Arena **)v7;
  v8 = *v5;
  if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_6;
LABEL_3:
  v9 = std::string::operator=(v8, (const std::string *)v4);
  if (*((int *)this + 26) >= 1)
  {
LABEL_7:
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *((_QWORD *)this + 5);
      v14 = (int *)*((_QWORD *)a2 + 5);
      if (!v14)
        break;
      v15 = *((int *)a2 + 8);
      v16 = *v14;
      if ((int)v15 >= *v14)
      {
        if (v16 != *((_DWORD *)a2 + 9))
          goto LABEL_16;
        goto LABEL_15;
      }
      *((_DWORD *)a2 + 8) = v15 + 1;
      v12 = *(google::protobuf::FieldDescriptorProto **)&v14[2 * v15 + 2];
LABEL_9:
      google::protobuf::FieldDescriptor::CopyTo((google::protobuf::FieldDescriptor *)(v13 + v10), v12);
      ++v11;
      v10 += 152;
      if (v11 >= *((int *)this + 26))
        goto LABEL_17;
    }
    v16 = *((_DWORD *)a2 + 9);
LABEL_15:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 6, v16 + 1);
    v14 = (int *)*((_QWORD *)a2 + 5);
    v16 = *v14;
LABEL_16:
    *v14 = v16 + 1;
    v12 = (google::protobuf::FieldDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FieldDescriptorProto>(*((google::protobuf::Arena **)a2 + 3));
    v17 = *((_QWORD *)a2 + 5);
    v18 = *((int *)a2 + 8);
    *((_DWORD *)a2 + 8) = v18 + 1;
    *(_QWORD *)(v17 + 8 * v18 + 8) = v12;
    goto LABEL_9;
  }
LABEL_17:
  if (*((int *)this + 27) >= 1)
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v22 = *((_QWORD *)this + 6);
      v23 = (int *)*((_QWORD *)a2 + 20);
      if (!v23)
        break;
      v24 = *((int *)a2 + 38);
      v25 = *v23;
      if ((int)v24 >= *v23)
      {
        if (v25 != *((_DWORD *)a2 + 39))
          goto LABEL_27;
        goto LABEL_26;
      }
      *((_DWORD *)a2 + 38) = v24 + 1;
      v21 = *(google::protobuf::OneofDescriptorProto **)&v23[2 * v24 + 2];
LABEL_20:
      google::protobuf::OneofDescriptor::CopyTo((google::protobuf::OneofDescriptor *)(v22 + v19), v21);
      ++v20;
      v19 += 48;
      if (v20 >= *((int *)this + 27))
        goto LABEL_28;
    }
    v25 = *((_DWORD *)a2 + 39);
LABEL_26:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 36, v25 + 1);
    v23 = (int *)*((_QWORD *)a2 + 20);
    v25 = *v23;
LABEL_27:
    *v23 = v25 + 1;
    v21 = (google::protobuf::OneofDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::OneofDescriptorProto>(*((google::protobuf::Arena **)a2 + 18));
    v26 = *((_QWORD *)a2 + 20);
    v27 = *((int *)a2 + 38);
    *((_DWORD *)a2 + 38) = v27 + 1;
    *(_QWORD *)(v26 + 8 * v27 + 8) = v21;
    goto LABEL_20;
  }
LABEL_28:
  if (*((int *)this + 29) >= 1)
  {
    v28 = 0;
    v29 = 0;
    while (1)
    {
      v31 = *((_QWORD *)this + 7);
      v32 = (int *)*((_QWORD *)a2 + 8);
      if (!v32)
        break;
      v33 = *((int *)a2 + 14);
      v34 = *v32;
      if ((int)v33 >= *v32)
      {
        if (v34 != *((_DWORD *)a2 + 15))
          goto LABEL_38;
        goto LABEL_37;
      }
      *((_DWORD *)a2 + 14) = v33 + 1;
      v30 = *(google::protobuf::DescriptorProto **)&v32[2 * v33 + 2];
LABEL_31:
      v9 = (std::string *)google::protobuf::Descriptor::CopyTo((google::protobuf::Descriptor *)(v31 + v28), v30);
      ++v29;
      v28 += 144;
      if (v29 >= *((int *)this + 29))
        goto LABEL_39;
    }
    v34 = *((_DWORD *)a2 + 15);
LABEL_37:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 12, v34 + 1);
    v32 = (int *)*((_QWORD *)a2 + 8);
    v34 = *v32;
LABEL_38:
    *v32 = v34 + 1;
    v30 = google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto>(*((google::protobuf::Arena **)a2
                                                                                         + 6));
    v35 = *((_QWORD *)a2 + 8);
    v36 = *((int *)a2 + 14);
    *((_DWORD *)a2 + 14) = v36 + 1;
    *(_QWORD *)(v35 + 8 * v36 + 8) = v30;
    goto LABEL_31;
  }
LABEL_39:
  if (*((int *)this + 30) >= 1)
  {
    v37 = 0;
    v38 = 0;
    while (1)
    {
      v40 = *((_QWORD *)this + 8);
      v41 = (int *)*((_QWORD *)a2 + 11);
      if (!v41)
        break;
      v42 = *((int *)a2 + 20);
      v43 = *v41;
      if ((int)v42 >= *v41)
      {
        if (v43 != *((_DWORD *)a2 + 21))
          goto LABEL_49;
        goto LABEL_48;
      }
      *((_DWORD *)a2 + 20) = v42 + 1;
      v39 = *(google::protobuf::EnumDescriptorProto **)&v41[2 * v42 + 2];
LABEL_42:
      google::protobuf::EnumDescriptor::CopyTo((google::protobuf::EnumDescriptor *)(v40 + v37), v39);
      ++v38;
      v37 += 80;
      if (v38 >= *((int *)this + 30))
        goto LABEL_50;
    }
    v43 = *((_DWORD *)a2 + 21);
LABEL_48:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 18, v43 + 1);
    v41 = (int *)*((_QWORD *)a2 + 11);
    v43 = *v41;
LABEL_49:
    *v41 = v43 + 1;
    v39 = (google::protobuf::EnumDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::EnumDescriptorProto>(*((google::protobuf::Arena **)a2 + 9));
    v44 = *((_QWORD *)a2 + 11);
    v45 = *((int *)a2 + 20);
    *((_DWORD *)a2 + 20) = v45 + 1;
    *(_QWORD *)(v44 + 8 * v45 + 8) = v39;
    goto LABEL_42;
  }
LABEL_50:
  if (*((int *)this + 31) >= 1)
  {
    v46 = 0;
    v47 = 0;
    while (1)
    {
      v49 = *((_QWORD *)this + 9);
      v50 = (int *)*((_QWORD *)a2 + 14);
      if (!v50)
        break;
      v51 = *((int *)a2 + 26);
      v52 = *v50;
      if ((int)v51 >= *v50)
      {
        if (v52 == *((_DWORD *)a2 + 27))
        {
LABEL_60:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 24, v52 + 1);
          v50 = (int *)*((_QWORD *)a2 + 14);
          v52 = *v50;
        }
        *v50 = v52 + 1;
        v9 = (std::string *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto_ExtensionRange>(*((google::protobuf::Arena **)a2 + 12));
        v53 = v9;
        v54 = *((_QWORD *)a2 + 14);
        v55 = *((int *)a2 + 26);
        *((_DWORD *)a2 + 26) = v55 + 1;
        *(_QWORD *)(v54 + 8 * v55 + 8) = v9;
        goto LABEL_62;
      }
      *((_DWORD *)a2 + 26) = v51 + 1;
      v53 = *(std::string **)&v50[2 * v51 + 2];
LABEL_62:
      v56 = (int *)(v49 + v46);
      v57 = *v56;
      v58 = v53->__r_.__value_.__r.__words[2];
      LODWORD(v53->__r_.__value_.__r.__words[2]) = v58 | 2;
      v59 = v56[1];
      LODWORD(v53->__r_.__value_.__r.__words[2]) = v58 | 6;
      LODWORD(v53[1].__r_.__value_.__r.__words[1]) = v57;
      HIDWORD(v53[1].__r_.__value_.__r.__words[1]) = v59;
      v60 = (std::string *)*((_QWORD *)v56 + 1);
      v9 = (std::string *)google::protobuf::ExtensionRangeOptions::default_instance((google::protobuf::ExtensionRangeOptions *)v9);
      if (v60 != v9)
      {
        v61 = (const google::protobuf::ExtensionRangeOptions *)*((_QWORD *)v56 + 1);
        LODWORD(v53->__r_.__value_.__r.__words[2]) |= 1u;
        data = (google::protobuf::ExtensionRangeOptions *)v53[1].__r_.__value_.__l.__data_;
        if (!data)
        {
          size = v53->__r_.__value_.__l.__size_;
          v63 = (google::protobuf::Arena *)(size & 0xFFFFFFFFFFFFFFFELL);
          if ((size & 1) != 0)
            v63 = *(google::protobuf::Arena **)v63;
          data = (google::protobuf::ExtensionRangeOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::ExtensionRangeOptions>(v63);
          v53[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        }
        google::protobuf::ExtensionRangeOptions::CopyFrom(data, v61);
      }
      ++v47;
      v46 += 16;
      if (v47 >= *((int *)this + 31))
        goto LABEL_66;
    }
    v52 = *((_DWORD *)a2 + 27);
    goto LABEL_60;
  }
LABEL_66:
  if (*((int *)this + 32) >= 1)
  {
    v64 = 0;
    v65 = 0;
    while (1)
    {
      v67 = *((_QWORD *)this + 10);
      v68 = (int *)*((_QWORD *)a2 + 17);
      if (!v68)
        break;
      v69 = *((int *)a2 + 32);
      v70 = *v68;
      if ((int)v69 >= *v68)
      {
        if (v70 != *((_DWORD *)a2 + 33))
          goto LABEL_76;
        goto LABEL_75;
      }
      *((_DWORD *)a2 + 32) = v69 + 1;
      v66 = *(google::protobuf::FieldDescriptorProto **)&v68[2 * v69 + 2];
LABEL_69:
      google::protobuf::FieldDescriptor::CopyTo((google::protobuf::FieldDescriptor *)(v67 + v64), v66);
      ++v65;
      v64 += 152;
      if (v65 >= *((int *)this + 32))
        goto LABEL_77;
    }
    v70 = *((_DWORD *)a2 + 33);
LABEL_75:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 30, v70 + 1);
    v68 = (int *)*((_QWORD *)a2 + 17);
    v70 = *v68;
LABEL_76:
    *v68 = v70 + 1;
    v66 = (google::protobuf::FieldDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FieldDescriptorProto>(*((google::protobuf::Arena **)a2 + 15));
    v71 = *((_QWORD *)a2 + 17);
    v72 = *((int *)a2 + 32);
    *((_DWORD *)a2 + 32) = v72 + 1;
    *(_QWORD *)(v71 + 8 * v72 + 8) = v66;
    goto LABEL_69;
  }
LABEL_77:
  if (*((int *)this + 33) >= 1)
  {
    v73 = 0;
    v74 = 0;
    while (1)
    {
      v78 = (int *)*((_QWORD *)a2 + 23);
      if (!v78)
        break;
      v79 = *((int *)a2 + 44);
      v80 = *v78;
      if ((int)v79 >= *v78)
      {
        if (v80 != *((_DWORD *)a2 + 45))
          goto LABEL_87;
        goto LABEL_86;
      }
      *((_DWORD *)a2 + 44) = v79 + 1;
      v9 = *(std::string **)&v78[2 * v79 + 2];
LABEL_80:
      v75 = (int *)(*((_QWORD *)this + 11) + v73);
      v76 = *v75;
      v77 = v9->__r_.__value_.__r.__words[2];
      LODWORD(v9->__r_.__value_.__r.__words[2]) = v77 | 1;
      LODWORD(v75) = v75[1];
      LODWORD(v9->__r_.__value_.__r.__words[2]) = v77 | 3;
      LODWORD(v9[1].__r_.__value_.__l.__data_) = v76;
      HIDWORD(v9[1].__r_.__value_.__r.__words[0]) = (_DWORD)v75;
      ++v74;
      v73 += 8;
      if (v74 >= *((int *)this + 33))
        goto LABEL_88;
    }
    v80 = *((_DWORD *)a2 + 45);
LABEL_86:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 42, v80 + 1);
    v78 = (int *)*((_QWORD *)a2 + 23);
    v80 = *v78;
LABEL_87:
    *v78 = v80 + 1;
    v9 = (std::string *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto_ReservedRange>(*((google::protobuf::Arena **)a2 + 21));
    v81 = *((_QWORD *)a2 + 23);
    v82 = *((int *)a2 + 44);
    *((_DWORD *)a2 + 44) = v82 + 1;
    *(_QWORD *)(v81 + 8 * v82 + 8) = v9;
    goto LABEL_80;
  }
LABEL_88:
  if (*((int *)this + 34) >= 1)
  {
    v83 = 0;
    do
      v9 = google::protobuf::DescriptorProto::add_reserved_name((uint64_t)a2, *(std::string **)(*((_QWORD *)this + 12) + 8 * v83++));
    while (v83 < *((int *)this + 34));
  }
  v84 = (uint64_t *)*((_QWORD *)this + 4);
  if (v84 != google::protobuf::MessageOptions::default_instance((google::protobuf::MessageOptions *)v9))
  {
    *((_DWORD *)a2 + 4) |= 2u;
    v85 = (google::protobuf::MessageOptions *)*((_QWORD *)a2 + 28);
    if (!v85)
    {
      v86 = *((_QWORD *)a2 + 1);
      v87 = (google::protobuf::Arena *)(v86 & 0xFFFFFFFFFFFFFFFELL);
      if ((v86 & 1) != 0)
        v87 = *(google::protobuf::Arena **)v87;
      v85 = (google::protobuf::MessageOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::MessageOptions>(v87);
      *((_QWORD *)a2 + 28) = v85;
    }
    google::protobuf::MessageOptions::CopyFrom(v85, *((const google::protobuf::MessageOptions **)this + 4));
  }
}

void google::protobuf::EnumDescriptor::CopyTo(google::protobuf::EnumDescriptor *this, google::protobuf::EnumDescriptorProto *a2)
{
  __int128 *v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::EnumValueDescriptorProto *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  int v23;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  google::protobuf::EnumOptions *v31;
  const google::protobuf::EnumOptions *v32;
  uint64_t v33;
  google::protobuf::Arena *v34;

  v4 = *(__int128 **)this;
  *((_DWORD *)a2 + 4) |= 1u;
  v5 = (std::string **)((char *)a2 + 96);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) == 0)
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
LABEL_6:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, v4);
    if (*((int *)this + 11) < 1)
      goto LABEL_17;
    goto LABEL_7;
  }
  v7 = *(google::protobuf::Arena **)v7;
  v8 = *v5;
  if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_6;
LABEL_3:
  v9 = std::string::operator=(v8, (const std::string *)v4);
  if (*((int *)this + 11) >= 1)
  {
LABEL_7:
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *((_QWORD *)this + 6);
      v14 = (int *)*((_QWORD *)a2 + 5);
      if (!v14)
        break;
      v15 = *((int *)a2 + 8);
      v16 = *v14;
      if ((int)v15 >= *v14)
      {
        if (v16 != *((_DWORD *)a2 + 9))
          goto LABEL_16;
        goto LABEL_15;
      }
      *((_DWORD *)a2 + 8) = v15 + 1;
      v12 = *(google::protobuf::EnumValueDescriptorProto **)&v14[2 * v15 + 2];
LABEL_9:
      google::protobuf::EnumValueDescriptor::CopyTo((google::protobuf::EnumValueDescriptor *)(v13 + v10), v12);
      ++v11;
      v10 += 40;
      if (v11 >= *((int *)this + 11))
        goto LABEL_17;
    }
    v16 = *((_DWORD *)a2 + 9);
LABEL_15:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 6, v16 + 1);
    v14 = (int *)*((_QWORD *)a2 + 5);
    v16 = *v14;
LABEL_16:
    *v14 = v16 + 1;
    v12 = (google::protobuf::EnumValueDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::EnumValueDescriptorProto>(*((google::protobuf::Arena **)a2 + 3));
    v17 = *((_QWORD *)a2 + 5);
    v18 = *((int *)a2 + 8);
    *((_DWORD *)a2 + 8) = v18 + 1;
    *(_QWORD *)(v17 + 8 * v18 + 8) = v12;
    goto LABEL_9;
  }
LABEL_17:
  if (*((int *)this + 14) >= 1)
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v24 = (int *)*((_QWORD *)a2 + 8);
      if (!v24)
        break;
      v25 = *((int *)a2 + 14);
      v26 = *v24;
      if ((int)v25 >= *v24)
      {
        if (v26 != *((_DWORD *)a2 + 15))
          goto LABEL_27;
        goto LABEL_26;
      }
      *((_DWORD *)a2 + 14) = v25 + 1;
      v9 = *(std::string **)&v24[2 * v25 + 2];
LABEL_20:
      v21 = (int *)(*((_QWORD *)this + 8) + v19);
      v22 = *v21;
      v23 = v9->__r_.__value_.__r.__words[2];
      LODWORD(v9->__r_.__value_.__r.__words[2]) = v23 | 1;
      LODWORD(v21) = v21[1];
      LODWORD(v9->__r_.__value_.__r.__words[2]) = v23 | 3;
      LODWORD(v9[1].__r_.__value_.__l.__data_) = v22;
      HIDWORD(v9[1].__r_.__value_.__r.__words[0]) = (_DWORD)v21;
      ++v20;
      v19 += 8;
      if (v20 >= *((int *)this + 14))
        goto LABEL_28;
    }
    v26 = *((_DWORD *)a2 + 15);
LABEL_26:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 12, v26 + 1);
    v24 = (int *)*((_QWORD *)a2 + 8);
    v26 = *v24;
LABEL_27:
    *v24 = v26 + 1;
    v9 = (std::string *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::EnumDescriptorProto_EnumReservedRange>(*((google::protobuf::Arena **)a2 + 6));
    v27 = *((_QWORD *)a2 + 8);
    v28 = *((int *)a2 + 14);
    *((_DWORD *)a2 + 14) = v28 + 1;
    *(_QWORD *)(v27 + 8 * v28 + 8) = v9;
    goto LABEL_20;
  }
LABEL_28:
  if (*((int *)this + 15) >= 1)
  {
    v29 = 0;
    do
      v9 = google::protobuf::EnumDescriptorProto::add_reserved_name((uint64_t)a2, *(std::string **)(*((_QWORD *)this + 9) + 8 * v29++));
    while (v29 < *((int *)this + 15));
  }
  v30 = (uint64_t *)*((_QWORD *)this + 4);
  if (v30 != google::protobuf::EnumOptions::default_instance((google::protobuf::EnumOptions *)v9))
  {
    *((_DWORD *)a2 + 4) |= 2u;
    v31 = (google::protobuf::EnumOptions *)*((_QWORD *)a2 + 13);
    if (v31)
    {
      v32 = (const google::protobuf::EnumOptions *)*((_QWORD *)this + 4);
    }
    else
    {
      v33 = *((_QWORD *)a2 + 1);
      v34 = (google::protobuf::Arena *)(v33 & 0xFFFFFFFFFFFFFFFELL);
      if ((v33 & 1) != 0)
        v34 = *(google::protobuf::Arena **)v34;
      v31 = (google::protobuf::EnumOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::EnumOptions>(v34);
      *((_QWORD *)a2 + 13) = v31;
      v32 = (const google::protobuf::EnumOptions *)*((_QWORD *)this + 4);
    }
    google::protobuf::EnumOptions::CopyFrom(v31, v32);
  }
}

void google::protobuf::ServiceDescriptor::CopyTo(google::protobuf::ServiceDescriptor *this, google::protobuf::ServiceDescriptorProto *a2)
{
  __int128 *v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::MethodDescriptorProto *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  google::protobuf::ServiceOptions *v20;
  const google::protobuf::ServiceOptions *v21;
  uint64_t v22;
  google::protobuf::Arena *v23;

  v4 = *(__int128 **)this;
  *((_DWORD *)a2 + 4) |= 1u;
  v5 = (std::string **)((char *)a2 + 48);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) == 0)
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
LABEL_6:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, v4);
    if (*((int *)this + 10) < 1)
      goto LABEL_17;
    goto LABEL_7;
  }
  v7 = *(google::protobuf::Arena **)v7;
  v8 = *v5;
  if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_6;
LABEL_3:
  v9 = std::string::operator=(v8, (const std::string *)v4);
  if (*((int *)this + 10) >= 1)
  {
LABEL_7:
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *((_QWORD *)this + 4);
      v14 = (int *)*((_QWORD *)a2 + 5);
      if (!v14)
        break;
      v15 = *((int *)a2 + 8);
      v16 = *v14;
      if ((int)v15 >= *v14)
      {
        if (v16 != *((_DWORD *)a2 + 9))
          goto LABEL_16;
        goto LABEL_15;
      }
      *((_DWORD *)a2 + 8) = v15 + 1;
      v12 = *(google::protobuf::MethodDescriptorProto **)&v14[2 * v15 + 2];
LABEL_9:
      google::protobuf::MethodDescriptor::CopyTo((google::protobuf::MethodDescriptor *)(v13 + v10), v12);
      ++v11;
      v10 += 104;
      if (v11 >= *((int *)this + 10))
        goto LABEL_17;
    }
    v16 = *((_DWORD *)a2 + 9);
LABEL_15:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 6, v16 + 1);
    v14 = (int *)*((_QWORD *)a2 + 5);
    v16 = *v14;
LABEL_16:
    *v14 = v16 + 1;
    v12 = (google::protobuf::MethodDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::MethodDescriptorProto>(*((google::protobuf::Arena **)a2 + 3));
    v17 = *((_QWORD *)a2 + 5);
    v18 = *((int *)a2 + 8);
    *((_DWORD *)a2 + 8) = v18 + 1;
    *(_QWORD *)(v17 + 8 * v18 + 8) = v12;
    goto LABEL_9;
  }
LABEL_17:
  v19 = (uint64_t *)*((_QWORD *)this + 3);
  if (v19 != google::protobuf::ServiceOptions::default_instance((google::protobuf::ServiceOptions *)v9))
  {
    *((_DWORD *)a2 + 4) |= 2u;
    v20 = (google::protobuf::ServiceOptions *)*((_QWORD *)a2 + 7);
    if (v20)
    {
      v21 = (const google::protobuf::ServiceOptions *)*((_QWORD *)this + 3);
    }
    else
    {
      v22 = *((_QWORD *)a2 + 1);
      v23 = (google::protobuf::Arena *)(v22 & 0xFFFFFFFFFFFFFFFELL);
      if ((v22 & 1) != 0)
        v23 = *(google::protobuf::Arena **)v23;
      v20 = (google::protobuf::ServiceOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::ServiceOptions>(v23);
      *((_QWORD *)a2 + 7) = v20;
      v21 = (const google::protobuf::ServiceOptions *)*((_QWORD *)this + 3);
    }
    google::protobuf::ServiceOptions::CopyFrom(v20, v21);
  }
}

void google::protobuf::FieldDescriptor::CopyTo(google::protobuf::FieldDescriptor *this, google::protobuf::FieldDescriptorProto *a2)
{
  std::string *v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;
  int v9;
  int v10;
  std::string *v11;
  std::string **v12;
  uint64_t v13;
  google::protobuf::Arena *v14;
  std::string *v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  char *v20;
  int v21;
  std::string **v22;
  uint64_t v23;
  google::protobuf::Arena *v24;
  std::string *v25;
  uint64_t v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::string *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::string **v38;
  uint64_t v39;
  google::protobuf::Arena *v40;
  std::string *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::string **v46;
  uint64_t v47;
  google::protobuf::Arena *v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  std::string **v58;
  uint64_t v59;
  google::protobuf::Arena *v60;
  std::string *v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  google::protobuf::FieldOptions *v65;
  uint64_t v66;
  google::protobuf::Arena *v67;
  std::string __p;
  google::protobuf::FieldDescriptor *v69;
  uint64_t (*v70)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  std::string *p_p;

  v4 = *(std::string **)this;
  *((_DWORD *)a2 + 4) |= 1u;
  v5 = (std::string **)((char *)a2 + 24);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    v7 = *(google::protobuf::Arena **)v7;
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
  }
  else
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v8, v4);
      goto LABEL_6;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (__int128 *)v4);
LABEL_6:
  v9 = *((_DWORD *)this + 17);
  v10 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v10 | 0x40;
  *((_DWORD *)a2 + 18) = v9;
  if (!*((_BYTE *)this + 66))
    goto LABEL_10;
  v11 = (std::string *)*((_QWORD *)this + 4);
  *((_DWORD *)a2 + 4) = v10 | 0x50;
  v12 = (std::string **)((char *)a2 + 56);
  v13 = *((_QWORD *)a2 + 1);
  v14 = (google::protobuf::Arena *)(v13 & 0xFFFFFFFFFFFFFFFELL);
  if ((v13 & 1) != 0)
  {
    v14 = *(google::protobuf::Arena **)v14;
    v15 = *v12;
    if (*v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_9;
  }
  else
  {
    v15 = *v12;
    if (*v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_9:
      std::string::operator=(v15, v11);
LABEL_10:
      if (!*((_BYTE *)this + 65))
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v12, v14, (__int128 *)v11);
  if (*((_BYTE *)this + 65))
  {
LABEL_11:
    *((_DWORD *)a2 + 4) |= 0x100u;
    *((_BYTE *)a2 + 80) = 1;
  }
LABEL_12:
  v16 = *((_DWORD *)this + 15);
  if (!google::protobuf::FieldDescriptorProto_Label_IsValid((google::protobuf *)v16))
    google::protobuf::FieldDescriptor::CopyTo();
  *((_DWORD *)a2 + 4) |= 0x200u;
  *((_DWORD *)a2 + 21) = v16;
  v17 = (unint64_t *)*((_QWORD *)this + 6);
  if (v17)
  {
    v69 = this;
    v70 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v18 = atomic_load(v17);
    if (v18 != -1)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v69;
      p_p = &__p;
      std::__call_once(v17, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  v19 = *((_DWORD *)this + 14);
  if (!google::protobuf::FieldDescriptorProto_Type_IsValid((google::protobuf *)v19))
    google::protobuf::FieldDescriptor::CopyTo();
  v21 = *((_DWORD *)a2 + 4) | 0x400;
  *((_DWORD *)a2 + 4) = v21;
  *((_DWORD *)a2 + 22) = v19;
  if (*((_BYTE *)this + 67))
  {
    if (*(_BYTE *)(*((_QWORD *)this + 10) + 141))
    {
      *((_DWORD *)a2 + 4) = v21 | 2;
      v22 = (std::string **)((char *)a2 + 32);
      v23 = *((_QWORD *)a2 + 1);
      v24 = (google::protobuf::Arena *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) == 0)
        goto LABEL_20;
    }
    else
    {
      google::protobuf::FieldDescriptorProto::set_extendee(a2, ".");
      *((_DWORD *)a2 + 4) |= 2u;
      v22 = (std::string **)((char *)a2 + 32);
      v50 = *((_QWORD *)a2 + 1);
      v24 = (google::protobuf::Arena *)(v50 & 0xFFFFFFFFFFFFFFFELL);
      if ((v50 & 1) == 0)
      {
LABEL_20:
        v25 = *v22;
        if (*v22 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
LABEL_22:
          v26 = *(_QWORD *)(*((_QWORD *)this + 10) + 8);
          v27 = *(char *)(v26 + 23);
          if (v27 >= 0)
            v28 = *(const std::string::value_type **)(*((_QWORD *)this + 10) + 8);
          else
            v28 = *(const std::string::value_type **)v26;
          if (v27 >= 0)
            v29 = *(unsigned __int8 *)(v26 + 23);
          else
            v29 = *(_QWORD *)(v26 + 8);
          std::string::append(v25, v28, v29);
          goto LABEL_29;
        }
LABEL_21:
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v22, v24, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
        v25 = *v22;
        goto LABEL_22;
      }
    }
    v24 = *(google::protobuf::Arena **)v24;
    v25 = *v22;
    if (*v22 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_29:
  v30 = (unint64_t *)*((_QWORD *)this + 6);
  if (v30)
  {
    v69 = this;
    v70 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v31 = atomic_load(v30);
    if (v31 != -1)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v69;
      p_p = &__p;
      std::__call_once(v30, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  v32 = *((_DWORD *)this + 14);
  v33 = (std::string *)*((_QWORD *)this + 6);
  if ((v32 & 0xFFFFFFFE) == 0xA)
  {
    if (v33)
    {
      v70 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
      v34 = atomic_load((unint64_t *)v33);
      if (v34 != -1)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
        p_p = &__p;
        std::__call_once((std::once_flag::_State_type *)v33, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    v35 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v35 + 140))
    {
      *((_DWORD *)a2 + 22) = 1;
      *((_DWORD *)a2 + 4) &= ~0x400u;
    }
    v36 = (unint64_t *)*((_QWORD *)this + 6);
    if (v36)
    {
      v70 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
      v37 = atomic_load(v36);
      if (v37 != -1)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
        p_p = &__p;
        std::__call_once(v36, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
      v35 = *((_QWORD *)this + 13);
    }
    if (!*(_BYTE *)(v35 + 141))
      google::protobuf::FieldDescriptorProto::set_type_name(a2, ".");
    *((_DWORD *)a2 + 4) |= 4u;
    v38 = (std::string **)((char *)a2 + 40);
    v39 = *((_QWORD *)a2 + 1);
    v40 = (google::protobuf::Arena *)(v39 & 0xFFFFFFFFFFFFFFFELL);
    if ((v39 & 1) != 0)
    {
      v40 = *(google::protobuf::Arena **)v40;
      v41 = *v38;
      if (*v38 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_46:
        v42 = (unint64_t *)*((_QWORD *)this + 6);
        if (!v42)
          goto LABEL_74;
        goto LABEL_72;
      }
    }
    else
    {
      v41 = *v38;
      if (*v38 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_46;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, v40, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v41 = *v38;
    v42 = (unint64_t *)*((_QWORD *)this + 6);
    if (!v42)
    {
LABEL_74:
      v52 = *((_QWORD *)this + 13);
LABEL_80:
      v54 = *(_QWORD *)(v52 + 8);
      v55 = *(char *)(v54 + 23);
      if (v55 >= 0)
        v56 = (const std::string::value_type *)v54;
      else
        v56 = *(const std::string::value_type **)v54;
      if (v55 >= 0)
        v57 = *(unsigned __int8 *)(v54 + 23);
      else
        v57 = *(_QWORD *)(v54 + 8);
      v33 = std::string::append(v41, v56, v57);
      goto LABEL_87;
    }
LABEL_72:
    v70 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
    v51 = atomic_load(v42);
    if (v51 != -1)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
      p_p = &__p;
      std::__call_once(v42, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
    goto LABEL_74;
  }
  if (v33)
  {
    v69 = this;
    v70 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v43 = atomic_load((unint64_t *)v33);
    if (v43 != -1)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v69;
      p_p = &__p;
      std::__call_once((std::once_flag::_State_type *)v33, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
    v32 = *((_DWORD *)this + 14);
  }
  if (v32 == 14)
  {
    v44 = (unint64_t *)*((_QWORD *)this + 6);
    if (v44)
    {
      v70 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
      v45 = atomic_load(v44);
      if (v45 != -1)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
        p_p = &__p;
        std::__call_once(v44, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    if (!*(_BYTE *)(*((_QWORD *)this + 14) + 41))
      google::protobuf::FieldDescriptorProto::set_type_name(a2, ".");
    *((_DWORD *)a2 + 4) |= 4u;
    v46 = (std::string **)((char *)a2 + 40);
    v47 = *((_QWORD *)a2 + 1);
    v48 = (google::protobuf::Arena *)(v47 & 0xFFFFFFFFFFFFFFFELL);
    if ((v47 & 1) != 0)
    {
      v48 = *(google::protobuf::Arena **)v48;
      v41 = *v46;
      if (*v46 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_60:
        v49 = (unint64_t *)*((_QWORD *)this + 6);
        if (!v49)
          goto LABEL_79;
        goto LABEL_77;
      }
    }
    else
    {
      v41 = *v46;
      if (*v46 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_60;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, v48, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v41 = *v46;
    v49 = (unint64_t *)*((_QWORD *)this + 6);
    if (!v49)
    {
LABEL_79:
      v52 = *((_QWORD *)this + 14);
      goto LABEL_80;
    }
LABEL_77:
    v70 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
    v53 = atomic_load(v49);
    if (v53 != -1)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
      p_p = &__p;
      std::__call_once(v49, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
    goto LABEL_79;
  }
LABEL_87:
  if (!*((_BYTE *)this + 64))
    goto LABEL_95;
  google::protobuf::FieldDescriptor::DefaultValueAsString(this, 0, v20, &__p);
  *((_DWORD *)a2 + 4) |= 8u;
  v58 = (std::string **)((char *)a2 + 48);
  v59 = *((_QWORD *)a2 + 1);
  v60 = (google::protobuf::Arena *)(v59 & 0xFFFFFFFFFFFFFFFELL);
  if ((v59 & 1) != 0)
  {
    v60 = *(google::protobuf::Arena **)v60;
    v61 = *v58;
    if (*v58 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_90;
  }
  else
  {
    v61 = *v58;
    if (*v58 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_90:
      v33 = std::string::operator=(v61, &__p);
      goto LABEL_93;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v58, v60, (__int128 *)&__p);
LABEL_93:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_95:
  v62 = *((_QWORD *)this + 11);
  if (v62 && !*((_BYTE *)this + 67))
  {
    v63 = -1431655765 * ((unint64_t)(v62 - *(_QWORD *)(*(_QWORD *)(v62 + 16) + 48)) >> 4);
    *((_DWORD *)a2 + 4) |= 0x80u;
    *((_DWORD *)a2 + 19) = v63;
  }
  v64 = (uint64_t *)*((_QWORD *)this + 15);
  if (v64 != google::protobuf::FieldOptions::default_instance((google::protobuf::FieldOptions *)v33))
  {
    *((_DWORD *)a2 + 4) |= 0x20u;
    v65 = (google::protobuf::FieldOptions *)*((_QWORD *)a2 + 8);
    if (!v65)
    {
      v66 = *((_QWORD *)a2 + 1);
      v67 = (google::protobuf::Arena *)(v66 & 0xFFFFFFFFFFFFFFFELL);
      if ((v66 & 1) != 0)
        v67 = *(google::protobuf::Arena **)v67;
      v65 = (google::protobuf::FieldOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FieldOptions>(v67);
      *((_QWORD *)a2 + 8) = v65;
    }
    google::protobuf::FieldOptions::CopyFrom(v65, *((const google::protobuf::FieldOptions **)this + 15));
  }
}

void sub_22DC39630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::OneofDescriptor::CopyTo(google::protobuf::OneofDescriptor *this, google::protobuf::OneofDescriptorProto *a2)
{
  __int128 *v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;
  std::string *v9;
  uint64_t *v10;
  google::protobuf::OneofOptions *v11;
  const google::protobuf::OneofOptions *v12;
  uint64_t v13;
  google::protobuf::Arena *v14;
  uint64_t *v15;
  google::protobuf::OneofOptions *v16;

  v4 = *(__int128 **)this;
  *((_DWORD *)a2 + 4) |= 1u;
  v5 = (std::string **)((char *)a2 + 24);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) == 0)
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
LABEL_11:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, v4);
    v15 = (uint64_t *)*((_QWORD *)this + 5);
    if (v15 == google::protobuf::OneofOptions::default_instance(v16))
      return;
    goto LABEL_4;
  }
  v7 = *(google::protobuf::Arena **)v7;
  v8 = *v5;
  if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_11;
LABEL_3:
  v9 = std::string::operator=(v8, (const std::string *)v4);
  v10 = (uint64_t *)*((_QWORD *)this + 5);
  if (v10 == google::protobuf::OneofOptions::default_instance((google::protobuf::OneofOptions *)v9))
    return;
LABEL_4:
  *((_DWORD *)a2 + 4) |= 2u;
  v11 = (google::protobuf::OneofOptions *)*((_QWORD *)a2 + 4);
  if (v11)
  {
    v12 = (const google::protobuf::OneofOptions *)*((_QWORD *)this + 5);
  }
  else
  {
    v13 = *((_QWORD *)a2 + 1);
    v14 = (google::protobuf::Arena *)(v13 & 0xFFFFFFFFFFFFFFFELL);
    if ((v13 & 1) != 0)
      v14 = *(google::protobuf::Arena **)v14;
    v11 = (google::protobuf::OneofOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::OneofOptions>(v14);
    *((_QWORD *)a2 + 4) = v11;
    v12 = (const google::protobuf::OneofOptions *)*((_QWORD *)this + 5);
  }
  google::protobuf::OneofOptions::CopyFrom(v11, v12);
}

std::string *google::protobuf::DescriptorProto::add_reserved_name(uint64_t a1, std::string *__str)
{
  std::string *v2;
  google::protobuf::internal::ArenaImpl **v4;
  int *v5;
  uint64_t v6;
  int v7;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = __str;
  v4 = (google::protobuf::internal::ArenaImpl **)(a1 + 192);
  v5 = *(int **)(a1 + 208);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 204);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 192), v7 + 1);
    v5 = *(int **)(a1 + 208);
    v7 = *v5;
    goto LABEL_8;
  }
  v6 = *(int *)(a1 + 200);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 200) = v6 + 1;
    AlignedAndAddCleanup = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(AlignedAndAddCleanup, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 204))
    goto LABEL_7;
LABEL_8:
  *v5 = v7 + 1;
  v9 = *v4;
  if (v9)
  {
    if (*((_QWORD *)v9 + 14))
    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v9, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    AlignedAndAddCleanup = (std::string *)operator new();
  }
  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
  v10 = *(_QWORD *)(a1 + 208);
  v11 = *(int *)(a1 + 200);
  *(_DWORD *)(a1 + 200) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = AlignedAndAddCleanup;
  __str = v2;
  return std::string::operator=(AlignedAndAddCleanup, __str);
}

void google::protobuf::FieldDescriptorProto::set_extendee(google::protobuf::FieldDescriptorProto *this, const char *__s)
{
  unsigned int *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  std::string *v12;
  std::string **v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  std::string __dst[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__dst, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 8789);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__dst, "CHECK failed: value != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__dst[0].__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 4) |= 2u;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (std::string *)operator new(v8 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v6;
    __dst[0].__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v5;
  v7 = __dst;
  if (v5)
LABEL_10:
    memcpy(v7, __s, v6);
  v7->__r_.__value_.__s.__data_[v6] = 0;
  v10 = *((_QWORD *)this + 1);
  v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
  {
    v11 = *(google::protobuf::Arena **)v11;
    v15 = (uint64_t *)*((_QWORD *)this + 4);
    v13 = (std::string **)((char *)this + 32);
    v12 = (std::string *)v15;
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
  }
  else
  {
    v14 = (uint64_t *)*((_QWORD *)this + 4);
    v13 = (std::string **)((char *)this + 32);
    v12 = (std::string *)v14;
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_13:
      std::string::operator=(v12, __dst);
      goto LABEL_16;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v13, v11, (__int128 *)__dst);
LABEL_16:
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
}

void sub_22DC399D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC399E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC399FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::FieldDescriptorProto::set_type_name(google::protobuf::FieldDescriptorProto *this, const char *__s)
{
  unsigned int *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  std::string *v12;
  std::string **v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  std::string __dst[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__dst, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 8696);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__dst, "CHECK failed: value != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__dst[0].__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 4) |= 4u;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (std::string *)operator new(v8 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v6;
    __dst[0].__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v5;
  v7 = __dst;
  if (v5)
LABEL_10:
    memcpy(v7, __s, v6);
  v7->__r_.__value_.__s.__data_[v6] = 0;
  v10 = *((_QWORD *)this + 1);
  v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
  {
    v11 = *(google::protobuf::Arena **)v11;
    v15 = (uint64_t *)*((_QWORD *)this + 5);
    v13 = (std::string **)((char *)this + 40);
    v12 = (std::string *)v15;
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
  }
  else
  {
    v14 = (uint64_t *)*((_QWORD *)this + 5);
    v13 = (std::string **)((char *)this + 40);
    v12 = (std::string *)v14;
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_13:
      std::string::operator=(v12, __dst);
      goto LABEL_16;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v13, v11, (__int128 *)__dst);
LABEL_16:
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
}

void sub_22DC39B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC39BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC39BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::FieldDescriptor::enum_type(google::protobuf::FieldDescriptor *this)
{
  unint64_t *v2;
  unint64_t v3;
  google::protobuf::FieldDescriptor *v5;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (unint64_t *)*((_QWORD *)this + 6);
  if (v2)
  {
    v5 = this;
    v3 = atomic_load(v2);
    if (v3 != -1)
    {
      v7[0] = google::protobuf::FieldDescriptor::TypeOnceInit;
      v7[1] = &v5;
      v6 = v7;
      std::__call_once(v2, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  return *((_QWORD *)this + 14);
}

void google::protobuf::EnumValueDescriptor::CopyTo(google::protobuf::EnumValueDescriptor *this, google::protobuf::EnumValueDescriptorProto *a2)
{
  std::string *v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;
  std::string *v9;
  int v10;
  uint64_t *v11;
  google::protobuf::EnumValueOptions *v12;
  const google::protobuf::EnumValueOptions *v13;
  uint64_t v14;
  google::protobuf::Arena *v15;

  v4 = *(std::string **)this;
  *((_DWORD *)a2 + 4) |= 1u;
  v5 = (std::string **)((char *)a2 + 24);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    v7 = *(google::protobuf::Arena **)v7;
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
  }
  else
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      v9 = std::string::operator=(v8, v4);
      goto LABEL_6;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (__int128 *)v4);
LABEL_6:
  v10 = *((_DWORD *)this + 4);
  *((_DWORD *)a2 + 4) |= 4u;
  *((_DWORD *)a2 + 10) = v10;
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  if (v11 != google::protobuf::EnumValueOptions::default_instance((google::protobuf::EnumValueOptions *)v9))
  {
    *((_DWORD *)a2 + 4) |= 2u;
    v12 = (google::protobuf::EnumValueOptions *)*((_QWORD *)a2 + 4);
    if (v12)
    {
      v13 = (const google::protobuf::EnumValueOptions *)*((_QWORD *)this + 4);
    }
    else
    {
      v14 = *((_QWORD *)a2 + 1);
      v15 = (google::protobuf::Arena *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      if ((v14 & 1) != 0)
        v15 = *(google::protobuf::Arena **)v15;
      v12 = (google::protobuf::EnumValueOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::EnumValueOptions>(v15);
      *((_QWORD *)a2 + 4) = v12;
      v13 = (const google::protobuf::EnumValueOptions *)*((_QWORD *)this + 4);
    }
    google::protobuf::EnumValueOptions::CopyFrom(v12, v13);
  }
}

std::string *google::protobuf::EnumDescriptorProto::add_reserved_name(uint64_t a1, std::string *__str)
{
  std::string *v2;
  google::protobuf::internal::ArenaImpl **v4;
  int *v5;
  uint64_t v6;
  int v7;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = __str;
  v4 = (google::protobuf::internal::ArenaImpl **)(a1 + 72);
  v5 = *(int **)(a1 + 88);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 84);
LABEL_7:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 72), v7 + 1);
    v5 = *(int **)(a1 + 88);
    v7 = *v5;
    goto LABEL_8;
  }
  v6 = *(int *)(a1 + 80);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 80) = v6 + 1;
    AlignedAndAddCleanup = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(AlignedAndAddCleanup, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 84))
    goto LABEL_7;
LABEL_8:
  *v5 = v7 + 1;
  v9 = *v4;
  if (v9)
  {
    if (*((_QWORD *)v9 + 14))
    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v9, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    AlignedAndAddCleanup = (std::string *)operator new();
  }
  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(int *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = AlignedAndAddCleanup;
  __str = v2;
  return std::string::operator=(AlignedAndAddCleanup, __str);
}

void google::protobuf::MethodDescriptor::CopyTo(google::protobuf::MethodDescriptor *this, google::protobuf::MethodDescriptorProto *a2)
{
  std::string *v4;
  std::string **v5;
  uint64_t v6;
  google::protobuf::Arena *v7;
  std::string *v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string **v12;
  uint64_t v13;
  google::protobuf::Arena *v14;
  std::string *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  unint64_t *v22;
  unint64_t v23;
  std::string **v24;
  uint64_t v25;
  google::protobuf::Arena *v26;
  std::string *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  uint64_t *v35;
  google::protobuf::MethodOptions *v36;
  uint64_t v37;
  google::protobuf::Arena *v38;
  char *v39;
  uint64_t (**v40)(google::protobuf::internal::LazyDescriptor *__hidden, google::protobuf::internal::LazyDescriptor *);
  uint64_t (*v41)(google::protobuf::internal::LazyDescriptor *__hidden, google::protobuf::internal::LazyDescriptor *);
  char **v42;

  v4 = *(std::string **)this;
  *((_DWORD *)a2 + 4) |= 1u;
  v5 = (std::string **)((char *)a2 + 24);
  v6 = *((_QWORD *)a2 + 1);
  v7 = (google::protobuf::Arena *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) != 0)
  {
    v7 = *(google::protobuf::Arena **)v7;
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_3:
      std::string::operator=(v8, v4);
      v9 = (char *)this + 24;
      v10 = (unint64_t *)*((_QWORD *)this + 5);
      if (!v10)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = *v5;
    if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_3;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, v7, (__int128 *)v4);
  v9 = (char *)this + 24;
  v10 = (unint64_t *)*((_QWORD *)this + 5);
  if (!v10)
    goto LABEL_9;
LABEL_7:
  v39 = v9;
  v11 = atomic_load(v10);
  if (v11 != -1)
  {
    v41 = google::protobuf::internal::LazyDescriptor::OnceStatic;
    v42 = &v39;
    v40 = &v41;
    std::__call_once(v10, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::internal::LazyDescriptor *),google::protobuf::internal::LazyDescriptor *&&>>);
  }
LABEL_9:
  if (!*(_BYTE *)(*(_QWORD *)v9 + 141))
    google::protobuf::MethodDescriptorProto::set_input_type(a2, ".");
  *((_DWORD *)a2 + 4) |= 2u;
  v12 = (std::string **)((char *)a2 + 32);
  v13 = *((_QWORD *)a2 + 1);
  v14 = (google::protobuf::Arena *)(v13 & 0xFFFFFFFFFFFFFFFELL);
  if ((v13 & 1) != 0)
  {
    v14 = *(google::protobuf::Arena **)v14;
    v15 = *v12;
    if (*v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_13:
      v16 = (unint64_t *)*((_QWORD *)this + 5);
      if (!v16)
        goto LABEL_19;
      goto LABEL_17;
    }
  }
  else
  {
    v15 = *v12;
    if (*v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, v14, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
  v15 = *v12;
  v16 = (unint64_t *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_19;
LABEL_17:
  v39 = v9;
  v17 = atomic_load(v16);
  if (v17 != -1)
  {
    v41 = google::protobuf::internal::LazyDescriptor::OnceStatic;
    v42 = &v39;
    v40 = &v41;
    std::__call_once(v16, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::internal::LazyDescriptor *),google::protobuf::internal::LazyDescriptor *&&>>);
  }
LABEL_19:
  v18 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v19 = *(char *)(v18 + 23);
  if (v19 >= 0)
    v20 = *(const std::string::value_type **)(*((_QWORD *)this + 3) + 8);
  else
    v20 = *(const std::string::value_type **)v18;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(v18 + 23);
  else
    v21 = *(_QWORD *)(v18 + 8);
  std::string::append(v15, v20, v21);
  v22 = (unint64_t *)*((_QWORD *)this + 9);
  if (v22)
  {
    v39 = (char *)this + 56;
    v23 = atomic_load(v22);
    if (v23 != -1)
    {
      v41 = google::protobuf::internal::LazyDescriptor::OnceStatic;
      v42 = &v39;
      v40 = &v41;
      std::__call_once(v22, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::internal::LazyDescriptor *),google::protobuf::internal::LazyDescriptor *&&>>);
    }
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 7) + 141))
    google::protobuf::MethodDescriptorProto::set_output_type(a2, ".");
  *((_DWORD *)a2 + 4) |= 4u;
  v24 = (std::string **)((char *)a2 + 40);
  v25 = *((_QWORD *)a2 + 1);
  v26 = (google::protobuf::Arena *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if ((v25 & 1) != 0)
  {
    v26 = *(google::protobuf::Arena **)v26;
    v27 = *v24;
    if (*v24 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_32:
      v28 = (unint64_t *)*((_QWORD *)this + 9);
      if (!v28)
        goto LABEL_38;
      goto LABEL_36;
    }
  }
  else
  {
    v27 = *v24;
    if (*v24 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, v26, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
  v27 = *v24;
  v28 = (unint64_t *)*((_QWORD *)this + 9);
  if (!v28)
    goto LABEL_38;
LABEL_36:
  v39 = (char *)this + 56;
  v29 = atomic_load(v28);
  if (v29 != -1)
  {
    v41 = google::protobuf::internal::LazyDescriptor::OnceStatic;
    v42 = &v39;
    v40 = &v41;
    std::__call_once(v28, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::internal::LazyDescriptor *),google::protobuf::internal::LazyDescriptor *&&>>);
  }
LABEL_38:
  v30 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  v31 = *(char *)(v30 + 23);
  if (v31 >= 0)
    v32 = *(const std::string::value_type **)(*((_QWORD *)this + 7) + 8);
  else
    v32 = *(const std::string::value_type **)v30;
  if (v31 >= 0)
    v33 = *(unsigned __int8 *)(v30 + 23);
  else
    v33 = *(_QWORD *)(v30 + 8);
  v34 = std::string::append(v27, v32, v33);
  v35 = (uint64_t *)*((_QWORD *)this + 11);
  if (v35 != google::protobuf::MethodOptions::default_instance((google::protobuf::MethodOptions *)v34))
  {
    *((_DWORD *)a2 + 4) |= 8u;
    v36 = (google::protobuf::MethodOptions *)*((_QWORD *)a2 + 6);
    if (!v36)
    {
      v37 = *((_QWORD *)a2 + 1);
      v38 = (google::protobuf::Arena *)(v37 & 0xFFFFFFFFFFFFFFFELL);
      if ((v37 & 1) != 0)
        v38 = *(google::protobuf::Arena **)v38;
      v36 = (google::protobuf::MethodOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::MethodOptions>(v38);
      *((_QWORD *)a2 + 6) = v36;
    }
    google::protobuf::MethodOptions::CopyFrom(v36, *((const google::protobuf::MethodOptions **)this + 11));
  }
  if (*((_BYTE *)this + 96))
  {
    *((_DWORD *)a2 + 4) |= 0x10u;
    *((_BYTE *)a2 + 56) = 1;
  }
  if (*((_BYTE *)this + 97))
  {
    *((_DWORD *)a2 + 4) |= 0x20u;
    *((_BYTE *)a2 + 57) = 1;
  }
}

void google::protobuf::MethodDescriptorProto::set_input_type(google::protobuf::MethodDescriptorProto *this, const char *__s)
{
  unsigned int *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  std::string *v12;
  std::string **v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  std::string __dst[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__dst, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 10293);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__dst, "CHECK failed: value != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__dst[0].__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 4) |= 2u;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (std::string *)operator new(v8 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v6;
    __dst[0].__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v5;
  v7 = __dst;
  if (v5)
LABEL_10:
    memcpy(v7, __s, v6);
  v7->__r_.__value_.__s.__data_[v6] = 0;
  v10 = *((_QWORD *)this + 1);
  v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
  {
    v11 = *(google::protobuf::Arena **)v11;
    v15 = (uint64_t *)*((_QWORD *)this + 4);
    v13 = (std::string **)((char *)this + 32);
    v12 = (std::string *)v15;
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
  }
  else
  {
    v14 = (uint64_t *)*((_QWORD *)this + 4);
    v13 = (std::string **)((char *)this + 32);
    v12 = (std::string *)v14;
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_13:
      std::string::operator=(v12, __dst);
      goto LABEL_16;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v13, v11, (__int128 *)__dst);
LABEL_16:
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
}

void sub_22DC3A330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC3A344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC3A358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::MethodDescriptorProto::set_output_type(google::protobuf::MethodDescriptorProto *this, const char *__s)
{
  unsigned int *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::Arena *v11;
  std::string *v12;
  std::string **v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  std::string __dst[2];

  if (!__s)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__dst, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 10386);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__dst, "CHECK failed: value != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__dst[0].__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 4) |= 4u;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (std::string *)operator new(v8 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v6;
    __dst[0].__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v5;
  v7 = __dst;
  if (v5)
LABEL_10:
    memcpy(v7, __s, v6);
  v7->__r_.__value_.__s.__data_[v6] = 0;
  v10 = *((_QWORD *)this + 1);
  v11 = (google::protobuf::Arena *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  if ((v10 & 1) != 0)
  {
    v11 = *(google::protobuf::Arena **)v11;
    v15 = (uint64_t *)*((_QWORD *)this + 5);
    v13 = (std::string **)((char *)this + 40);
    v12 = (std::string *)v15;
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
  }
  else
  {
    v14 = (uint64_t *)*((_QWORD *)this + 5);
    v13 = (std::string **)((char *)this + 40);
    v12 = (std::string *)v14;
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_13:
      std::string::operator=(v12, __dst);
      goto LABEL_16;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v13, v11, (__int128 *)__dst);
LABEL_16:
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
}

void sub_22DC3A4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC3A500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC3A514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::`anonymous namespace'::SourceLocationCommentPrinter::AddPreComment(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string __p;

  if (*(_BYTE *)a1)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (*(_QWORD *)(a1 + 80) != v4)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::string::append(a2, "\n");
        ++v6;
        v4 = *(_QWORD *)(a1 + 72);
        v5 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v4) >> 3) > v6);
    }
    if (*(char *)(a1 + 47) < 0)
    {
      if (!*(_QWORD *)(a1 + 32))
        return;
    }
    else if (!*(_BYTE *)(a1 + 47))
    {
      return;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &__p;
    else
      v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v10 = __p.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v9, v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22DC3A674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::`anonymous namespace'::SourceLocationCommentPrinter::AddPostComment(uint64_t a1, std::string *a2)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  if (*(_BYTE *)a1)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      if (!*(_QWORD *)(a1 + 56))
        return;
    }
    else if (!*(_BYTE *)(a1 + 71))
    {
      return;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22DC3A72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::`anonymous namespace'::SourceLocationCommentPrinter::~SourceLocationCommentPrinter(google::protobuf::_anonymous_namespace_::SourceLocationCommentPrinter *this)
{
  void **v2;
  void **v3;
  void *v4;

  if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    v2 = (void **)*((_QWORD *)this + 9);
    if (!v2)
      goto LABEL_3;
LABEL_7:
    v3 = (void **)*((_QWORD *)this + 10);
    if (v3 == v2)
    {
      *((_QWORD *)this + 10) = v2;
      operator delete(v2);
      if (*((char *)this + 71) < 0)
        goto LABEL_14;
    }
    else
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 10) = v2;
      operator delete(v4);
      if (*((char *)this + 71) < 0)
        goto LABEL_14;
    }
LABEL_4:
    if ((*((char *)this + 47) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(*((void **)this + 3));
    return;
  }
  operator delete(*((void **)this + 13));
  v2 = (void **)*((_QWORD *)this + 9);
  if (v2)
    goto LABEL_7;
LABEL_3:
  if ((*((char *)this + 71) & 0x80000000) == 0)
    goto LABEL_4;
LABEL_14:
  operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    goto LABEL_15;
}

BOOL google::protobuf::`anonymous namespace'::FormatLineOptions(int a1, google::protobuf::Message *a2, uint64_t a3, std::string *a4)
{
  size_t v8;
  void **p_b;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 Options;
  void **v13;
  void **v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  void **v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  void *v23;
  void **v24;
  __int128 v26;
  void *__p;
  void **v28;
  uint64_t v29;
  void **__b;
  size_t v31;
  int64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  char *v49;
  int v50;
  void **v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (a1 < 0)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = 2 * a1;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_b = (void **)operator new(v10 + 1);
    v31 = v8;
    v32 = v11 | 0x8000000000000000;
    __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v32) = 2 * a1;
  p_b = (void **)&__b;
  if (a1)
LABEL_8:
    memset(p_b, 32, v8);
  *((_BYTE *)p_b + v8) = 0;
  __p = 0;
  v28 = 0;
  v29 = 0;
  v13 = (void **)__p;
  v14 = v28;
  if (Options)
  {
    if (v28 == __p)
    {
      v14 = (void **)__p;
      if (!__p)
        goto LABEL_30;
      goto LABEL_23;
    }
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = HIBYTE(v32);
      v18 = __b;
      if (v32 >= 0)
        v18 = (void **)&__b;
      v51 = v18;
      if (v32 < 0)
        v17 = v31;
      v52 = v17;
      v19 = (char *)&v13[v15];
      if (SHIBYTE(v13[v15 + 2]) >= 0)
        v20 = (char *)&v13[v15];
      else
        v20 = (char *)v13[v15];
      v49 = v20;
      v21 = v19[23];
      v22 = *((_QWORD *)v19 + 1);
      if ((v21 & 0x80u) == 0)
        LODWORD(v22) = v21;
      v50 = v22;
      v47 = 0;
      v48 = -1;
      v45 = 0;
      v46 = -1;
      v43 = 0;
      v44 = -1;
      v41 = 0;
      v42 = -1;
      v39 = 0;
      v40 = -1;
      v37 = 0;
      v38 = -1;
      v35 = 0;
      v36 = -1;
      v33 = 0;
      v34 = -1;
      *((_QWORD *)&v26 + 1) = &v37;
      *(_QWORD *)&v26 = &v39;
      google::protobuf::strings::SubstituteAndAppend(a4, "$0option $1;\n",
        (uint64_t)&v51,
        (uint64_t)&v49,
        (uint64_t)&v47,
        (uint64_t)&v45,
        (uint64_t)&v43,
        (uint64_t)&v41,
        v26,
        (uint64_t)&v35,
        (uint64_t)&v33);
      ++v16;
      v13 = (void **)__p;
      v14 = v28;
      v15 += 3;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (_BYTE *)__p) >> 3) > v16);
  }
  if (!v13)
    goto LABEL_30;
LABEL_23:
  v23 = v14;
  if (v13 != v14)
  {
    v24 = v14;
    do
    {
      if (*((char *)v24 - 1) < 0)
        operator delete(*(v24 - 3));
      v24 -= 3;
    }
    while (v24 != v13);
    v23 = __p;
  }
  v28 = v13;
  operator delete(v23);
LABEL_30:
  if (SHIBYTE(v32) < 0)
    operator delete(__b);
  return v13 != v14;
}

void sub_22DC3AAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(&a13);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void google::protobuf::EnumDescriptor::DebugString(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  std::string::size_type v8;
  std::string *p_b;
  uint64_t v10;
  uint64_t v11;
  char SourceLocation;
  int v13;
  std::string *v14;
  const char *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  std::string *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  google::protobuf *v28;
  char *v29;
  uint64_t v30;
  int v31;
  std::string *v32;
  const char *v33;
  uint64_t v34;
  std::string *p_p;
  int v36;
  uint64_t v37;
  int v38;
  std::string *v39;
  void **v40;
  void **v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::string __p;
  char v51[8];
  uint64_t v52;
  void *v53[2];
  void *v54[2];
  __int128 v55;
  void *v56[2];
  uint64_t v57;
  __int16 v58;
  char v59;
  std::string v60;
  std::string __b;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  const char *v78;
  int v79;
  char v80[36];
  std::string v81[2];
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = 2 * a2;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_b = (std::string *)operator new(v10 + 1);
    __b.__r_.__value_.__l.__size_ = v8;
    __b.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_8;
  }
  *((_BYTE *)&__b.__r_.__value_.__s + 23) = 2 * a2;
  p_b = &__b;
  if (a2)
LABEL_8:
    memset(p_b, 32, v8);
  p_b->__r_.__value_.__s.__data_[v8] = 0;
  v57 = 0;
  v55 = 0u;
  *(_OWORD *)v56 = 0u;
  *(_OWORD *)v53 = 0u;
  *(_OWORD *)v54 = 0u;
  v58 = *(_WORD *)a4;
  v59 = *(_BYTE *)(a4 + 2);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v60, __b.__r_.__value_.__l.__data_, __b.__r_.__value_.__l.__size_);
  else
    v60 = __b;
  if (*(_BYTE *)a4)
  {
    memset(v81, 0, 24);
    google::protobuf::EnumDescriptor::GetLocationPath((uint64_t)a1, &v81[0].__r_.__value_.__l.__data_);
    SourceLocation = google::protobuf::FileDescriptor::GetSourceLocation(a1[2], v81, (uint64_t)&v52);
    if (v81[0].__r_.__value_.__r.__words[0])
    {
      v81[0].__r_.__value_.__l.__size_ = v81[0].__r_.__value_.__r.__words[0];
      operator delete(v81[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    SourceLocation = 0;
  }
  v51[0] = SourceLocation;
  v13 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  v14 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v81[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = __b.__r_.__value_.__r.__words[1];
  LODWORD(v81[0].__r_.__value_.__r.__words[1]) = v13;
  v15 = (const char *)*a1;
  v16 = *(char *)(*a1 + 23);
  v17 = *(_QWORD *)(*a1 + 8);
  if (v16 < 0)
    v15 = *(const char **)*a1;
  v78 = v15;
  v18 = v16;
  if (v16 < 0)
    v18 = v17;
  v79 = v18;
  v76 = 0;
  v77 = -1;
  v74 = 0;
  v75 = -1;
  v72 = 0;
  v73 = -1;
  v70 = 0;
  v71 = -1;
  v68 = 0;
  v69 = -1;
  v66 = 0;
  v67 = -1;
  v64 = 0;
  v65 = -1;
  v62 = 0;
  v63 = -1;
  *(_QWORD *)&v43 = &v68;
  *((_QWORD *)&v43 + 1) = &v66;
  google::protobuf::strings::SubstituteAndAppend((std::string *)a3, "$0enum $1 {\n", (uint64_t)v81, (uint64_t)&v78, (uint64_t)&v76, (uint64_t)&v74, (uint64_t)&v72, (uint64_t)&v70, v43, (uint64_t)&v64, (uint64_t)&v62);
  v19 = a2 + 1;
  if (*((int *)a1 + 11) >= 1)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      google::protobuf::EnumValueDescriptor::DebugString((uint64_t ***)(a1[6] + v20), v19, (std::string *)a3, (__int16 *)a4);
      ++v21;
      v20 += 40;
    }
    while (v21 < *((int *)a1 + 11));
  }
  if (*((int *)a1 + 14) > 0)
  {
    v22 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    v23 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = (std::string *)__b.__r_.__value_.__r.__words[0];
    v81[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = __b.__r_.__value_.__r.__words[1];
    LODWORD(v81[0].__r_.__value_.__r.__words[1]) = v22;
    v78 = 0;
    v79 = -1;
    v76 = 0;
    v77 = -1;
    v74 = 0;
    v75 = -1;
    v72 = 0;
    v73 = -1;
    v70 = 0;
    v71 = -1;
    v68 = 0;
    v69 = -1;
    v66 = 0;
    v67 = -1;
    v64 = 0;
    v65 = -1;
    v62 = 0;
    v63 = -1;
    *(_QWORD *)&v44 = &v68;
    *((_QWORD *)&v44 + 1) = &v66;
    google::protobuf::strings::SubstituteAndAppend((std::string *)a3, "$0  reserved ", (uint64_t)v81, (uint64_t)&v78, (uint64_t)&v76, (uint64_t)&v74, (uint64_t)&v72, (uint64_t)&v70, v44, (uint64_t)&v64, (uint64_t)&v62);
    if (*((int *)a1 + 14) >= 1)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = (unsigned int *)(a1[8] + v25);
        v28 = (google::protobuf *)v27[1];
        if ((_DWORD)v28 == *v27)
        {
          v81[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer(v28, &v81[0].__r_.__value_.__s.__data_[12], v24);
          LODWORD(v81[0].__r_.__value_.__r.__words[1]) = strlen(v81[0].__r_.__value_.__l.__data_);
          v78 = 0;
          v79 = -1;
          v76 = 0;
          v77 = -1;
          v74 = 0;
          v75 = -1;
          v72 = 0;
          v73 = -1;
          v70 = 0;
          v71 = -1;
          v68 = 0;
          v69 = -1;
          v66 = 0;
          v67 = -1;
          v64 = 0;
          v65 = -1;
          v62 = 0;
          v63 = -1;
          *((_QWORD *)&v45 + 1) = &v66;
          *(_QWORD *)&v45 = &v68;
          google::protobuf::strings::SubstituteAndAppend((std::string *)a3, "$0, ", (uint64_t)v81, (uint64_t)&v78, (uint64_t)&v76, (uint64_t)&v74, (uint64_t)&v72, (uint64_t)&v70, v45, (uint64_t)&v64, (uint64_t)&v62);
        }
        else
        {
          v81[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer((google::protobuf *)*v27, &v81[0].__r_.__value_.__s.__data_[12], v24);
          LODWORD(v81[0].__r_.__value_.__r.__words[1]) = strlen(v81[0].__r_.__value_.__l.__data_);
          v78 = google::protobuf::FastInt32ToBuffer((google::protobuf *)v27[1], v80, v29);
          v79 = strlen(v78);
          v76 = 0;
          v77 = -1;
          v74 = 0;
          v75 = -1;
          v72 = 0;
          v73 = -1;
          v70 = 0;
          v71 = -1;
          v68 = 0;
          v69 = -1;
          v66 = 0;
          v67 = -1;
          v64 = 0;
          v65 = -1;
          v62 = 0;
          v63 = -1;
          *((_QWORD *)&v46 + 1) = &v66;
          *(_QWORD *)&v46 = &v68;
          google::protobuf::strings::SubstituteAndAppend((std::string *)a3, "$0 to $1, ", (uint64_t)v81, (uint64_t)&v78, (uint64_t)&v76, (uint64_t)&v74, (uint64_t)&v72, (uint64_t)&v70, v46, (uint64_t)&v64, (uint64_t)&v62);
        }
        ++v26;
        v25 += 8;
      }
      while (v26 < *((int *)a1 + 14));
    }
    if (*(char *)(a3 + 23) < 0)
      v30 = *(_QWORD *)(a3 + 8);
    else
      v30 = *(unsigned __int8 *)(a3 + 23);
    std::string::replace((std::string *)a3, v30 - 2, 2uLL, ";\n");
  }
  if (*((int *)a1 + 15) >= 1)
  {
    v31 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    v32 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)__b.__r_.__value_.__r.__words[0];
    v81[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = __b.__r_.__value_.__r.__words[1];
    LODWORD(v81[0].__r_.__value_.__r.__words[1]) = v31;
    v78 = 0;
    v79 = -1;
    v76 = 0;
    v77 = -1;
    v74 = 0;
    v75 = -1;
    v72 = 0;
    v73 = -1;
    v70 = 0;
    v71 = -1;
    v68 = 0;
    v69 = -1;
    v66 = 0;
    v67 = -1;
    v64 = 0;
    v65 = -1;
    v62 = 0;
    v63 = -1;
    *(_QWORD *)&v47 = &v68;
    *((_QWORD *)&v47 + 1) = &v66;
    google::protobuf::strings::SubstituteAndAppend((std::string *)a3, "$0  reserved ", (uint64_t)v81, (uint64_t)&v78, (uint64_t)&v76, (uint64_t)&v74, (uint64_t)&v72, (uint64_t)&v70, v47, (uint64_t)&v64, (uint64_t)&v62);
    if (*((int *)a1 + 15) >= 1)
    {
      v34 = 0;
      do
      {
        google::protobuf::CEscape(*(_QWORD *)(a1[9] + 8 * v34), v33, &__p);
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        v81[0].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = __p.__r_.__value_.__r.__words[1];
        LODWORD(v81[0].__r_.__value_.__r.__words[1]) = v36;
        v78 = 0;
        v79 = -1;
        v76 = 0;
        v77 = -1;
        v74 = 0;
        v75 = -1;
        v72 = 0;
        v73 = -1;
        v70 = 0;
        v71 = -1;
        v68 = 0;
        v69 = -1;
        v66 = 0;
        v67 = -1;
        v64 = 0;
        v65 = -1;
        v62 = 0;
        v63 = -1;
        *(_QWORD *)&v48 = &v68;
        *((_QWORD *)&v48 + 1) = &v66;
        google::protobuf::strings::SubstituteAndAppend((std::string *)a3, "\"$0\", ", (uint64_t)v81, (uint64_t)&v78, (uint64_t)&v76, (uint64_t)&v74, (uint64_t)&v72, (uint64_t)&v70, v48, (uint64_t)&v64, (uint64_t)&v62);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v34;
      }
      while (v34 < *((int *)a1 + 15));
    }
    if (*(char *)(a3 + 23) < 0)
      v37 = *(_QWORD *)(a3 + 8);
    else
      v37 = *(unsigned __int8 *)(a3 + 23);
    std::string::replace((std::string *)a3, v37 - 2, 2uLL, ";\n");
  }
  v38 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  v39 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v39 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v81[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v38 = __b.__r_.__value_.__r.__words[1];
  LODWORD(v81[0].__r_.__value_.__r.__words[1]) = v38;
  v78 = 0;
  v79 = -1;
  v76 = 0;
  v77 = -1;
  v74 = 0;
  v75 = -1;
  v72 = 0;
  v73 = -1;
  v70 = 0;
  v71 = -1;
  v68 = 0;
  v69 = -1;
  v66 = 0;
  v67 = -1;
  v64 = 0;
  v65 = -1;
  v62 = 0;
  v63 = -1;
  *(_QWORD *)&v49 = &v68;
  *((_QWORD *)&v49 + 1) = &v66;
  google::protobuf::strings::SubstituteAndAppend((std::string *)a3, "$0}\n", (uint64_t)v81, (uint64_t)&v78, (uint64_t)&v76, (uint64_t)&v74, (uint64_t)&v72, (uint64_t)&v70, v49, (uint64_t)&v64, (uint64_t)&v62);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v40 = (void **)v56[0];
  if (v56[0])
  {
    v41 = (void **)v56[1];
    v42 = v56[0];
    if (v56[1] != v56[0])
    {
      do
      {
        if (*((char *)v41 - 1) < 0)
          operator delete(*(v41 - 3));
        v41 -= 3;
      }
      while (v41 != v40);
      v42 = v56[0];
    }
    v56[1] = v40;
    operator delete(v42);
  }
  if (SHIBYTE(v55) < 0)
  {
    operator delete(v54[1]);
    if ((SHIBYTE(v54[0]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_80:
      operator delete(__b.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v54[0]) & 0x80000000) == 0)
  {
    goto LABEL_76;
  }
  operator delete(v53[0]);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_80;
}

void sub_22DC3B378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void **a34,void **a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void **v50;
  void **v51;

  if (a34)
  {
    v50 = a35;
    v51 = a34;
    if (a35 != a34)
    {
      do
      {
        if (*((char *)v50 - 1) < 0)
          operator delete(*(v50 - 3));
        v50 -= 3;
      }
      while (v50 != a34);
      v51 = a34;
    }
    operator delete(v51);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if (a49 < 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a22);
  if (a49 < 0)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_15:
  _Unwind_Resume(exception_object);
}

void google::protobuf::Descriptor::DebugString(uint64_t *a1, int a2, std::string *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  std::string *p_b;
  uint64_t v12;
  uint64_t v13;
  char SourceLocation;
  int v15;
  std::string *v16;
  const char *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t **v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  unint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t i;
  unint64_t v51;
  uint64_t *j;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  std::string *v63;
  char *v64;
  std::string *v65;
  google::protobuf::FieldDescriptor *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  std::string *v71;
  const char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  std::string *v80;
  std::string *v81;
  int v82;
  int v83;
  std::string *v84;
  std::string::size_type size;
  int v86;
  int v87;
  std::string *v88;
  int v89;
  std::string *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  google::protobuf *v95;
  char *v96;
  std::string::size_type v97;
  int v98;
  std::string *v99;
  const char *v100;
  uint64_t v101;
  std::string *p_p;
  int v103;
  std::string::size_type v104;
  int v105;
  std::string *v106;
  void **v107;
  void **v108;
  void *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  std::string *v122;
  std::string __p;
  uint64_t **v124;
  uint64_t *v125;
  uint64_t v126;
  char v127[8];
  uint64_t v128;
  void *v129[2];
  void *v130[2];
  __int128 v131;
  void *v132[2];
  uint64_t v133;
  __int16 v134;
  char v135;
  std::string v136;
  std::string __b;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  const char *v152;
  int v153;
  char v154[36];
  std::string *v155;
  int v156;
  _BYTE v157[36];
  std::string v158[2];
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1[4] + 75))
    return;
  if (a2 < 0)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = 2 * a2;
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    p_b = (std::string *)operator new(v12 + 1);
    __b.__r_.__value_.__l.__size_ = 2 * a2;
    __b.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
  }
  else
  {
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 2 * a2;
    p_b = &__b;
    if (!a2)
      goto LABEL_10;
  }
  memset(p_b, 32, 2 * a2);
LABEL_10:
  p_b->__r_.__value_.__s.__data_[2 * a2] = 0;
  v133 = 0;
  v131 = 0u;
  *(_OWORD *)v132 = 0u;
  *(_OWORD *)v129 = 0u;
  *(_OWORD *)v130 = 0u;
  v134 = *(_WORD *)a4;
  v135 = *(_BYTE *)(a4 + 2);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v136, __b.__r_.__value_.__l.__data_, __b.__r_.__value_.__l.__size_);
  else
    v136 = __b;
  if (*(_BYTE *)a4)
  {
    memset(v158, 0, 24);
    google::protobuf::Descriptor::GetLocationPath((uint64_t)a1, (uint64_t)v158);
    SourceLocation = google::protobuf::FileDescriptor::GetSourceLocation(a1[2], v158, (uint64_t)&v128);
    if (v158[0].__r_.__value_.__r.__words[0])
    {
      v158[0].__r_.__value_.__l.__size_ = v158[0].__r_.__value_.__r.__words[0];
      operator delete(v158[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    SourceLocation = 0;
  }
  v127[0] = SourceLocation;
  if (a5)
  {
    v15 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    v16 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = (std::string *)__b.__r_.__value_.__r.__words[0];
    v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = __b.__r_.__value_.__r.__words[1];
    LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v15;
    v17 = (const char *)*a1;
    v18 = *(char *)(*a1 + 23);
    v19 = *(_QWORD *)(*a1 + 8);
    if (v18 < 0)
      v17 = *(const char **)*a1;
    v155 = (std::string *)v17;
    v20 = v18;
    if (v18 < 0)
      v20 = v19;
    v156 = v20;
    v152 = 0;
    v153 = -1;
    v150 = 0;
    v151 = -1;
    v148 = 0;
    v149 = -1;
    v146 = 0;
    v147 = -1;
    v144 = 0;
    v145 = -1;
    v142 = 0;
    v143 = -1;
    v140 = 0;
    v141 = -1;
    v138 = 0;
    v139 = -1;
    *(_QWORD *)&v110 = &v144;
    *((_QWORD *)&v110 + 1) = &v142;
    google::protobuf::strings::SubstituteAndAppend(a3, "$0message $1", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v110, (uint64_t)&v140, (uint64_t)&v138);
  }
  std::string::append(a3, " {\n");
  v21 = a2 + 1;
  v122 = a3;
  v125 = 0;
  v126 = 0;
  v124 = &v125;
  if (*((int *)a1 + 26) >= 1)
  {
    v23 = 0;
    do
    {
      v24 = a1[5];
      v25 = *(unint64_t **)(v24 + 152 * v23 + 48);
      if (v25)
      {
        v152 = (const char *)google::protobuf::FieldDescriptor::TypeOnceInit;
        v150 = v24 + 152 * v23;
        v26 = atomic_load(v25);
        if (v26 != -1)
        {
          v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
          v158[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v150;
          v155 = v158;
          std::__call_once(v25, &v155, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      if (*(_DWORD *)(v24 + 152 * v23 + 56) == 10)
      {
        v27 = a1[5];
        v28 = *(unint64_t **)(v27 + 152 * v23 + 48);
        if (v28)
        {
          v152 = (const char *)(v27 + 152 * v23);
          v29 = atomic_load(v28);
          if (v29 != -1)
          {
            v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
            v158[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v152;
            v155 = v158;
            std::__call_once(v28, &v155, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
        }
        v30 = *(_QWORD *)(v27 + 152 * v23 + 104);
        v31 = v125;
        v32 = &v125;
        v33 = &v125;
        if (v125)
        {
          while (1)
          {
            while (1)
            {
              v33 = (uint64_t **)v31;
              v34 = v31[4];
              if (v30 >= v34)
                break;
              v31 = *v33;
              v32 = v33;
              if (!*v33)
                goto LABEL_45;
            }
            if (v34 >= v30)
              break;
            v31 = v33[1];
            if (!v31)
            {
              v32 = v33 + 1;
              goto LABEL_45;
            }
          }
        }
        else
        {
LABEL_45:
          v35 = (uint64_t *)operator new(0x28uLL);
          v35[4] = v30;
          *v35 = 0;
          v35[1] = 0;
          v35[2] = (uint64_t)v33;
          *v32 = v35;
          if (*v124)
          {
            v124 = (uint64_t **)*v124;
            v35 = *v32;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v125, v35);
          ++v126;
        }
      }
      ++v23;
    }
    while (v23 < *((int *)a1 + 26));
  }
  if (*((int *)a1 + 32) >= 1)
  {
    v36 = 0;
    do
    {
      v37 = a1[10];
      v38 = *(unint64_t **)(v37 + 152 * v36 + 48);
      if (v38)
      {
        v152 = (const char *)google::protobuf::FieldDescriptor::TypeOnceInit;
        v150 = v37 + 152 * v36;
        v39 = atomic_load(v38);
        if (v39 != -1)
        {
          v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
          v158[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v150;
          v155 = v158;
          std::__call_once(v38, &v155, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      if (*(_DWORD *)(v37 + 152 * v36 + 56) == 10)
      {
        v40 = a1[10];
        v41 = *(unint64_t **)(v40 + 152 * v36 + 48);
        if (v41)
        {
          v152 = (const char *)(v40 + 152 * v36);
          v42 = atomic_load(v41);
          if (v42 != -1)
          {
            v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
            v158[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v152;
            v155 = v158;
            std::__call_once(v41, &v155, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
        }
        v43 = *(_QWORD *)(v40 + 152 * v36 + 104);
        v44 = v125;
        v45 = &v125;
        v46 = &v125;
        if (v125)
        {
          while (1)
          {
            while (1)
            {
              v46 = (uint64_t **)v44;
              v47 = v44[4];
              if (v43 >= v47)
                break;
              v44 = *v46;
              v45 = v46;
              if (!*v46)
                goto LABEL_65;
            }
            if (v47 >= v43)
              break;
            v44 = v46[1];
            if (!v44)
            {
              v45 = v46 + 1;
              goto LABEL_65;
            }
          }
        }
        else
        {
LABEL_65:
          v48 = (uint64_t *)operator new(0x28uLL);
          v48[4] = v43;
          *v48 = 0;
          v48[1] = 0;
          v48[2] = (uint64_t)v46;
          *v45 = v48;
          if (*v124)
          {
            v124 = (uint64_t **)*v124;
            v48 = *v45;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v125, v48);
          ++v126;
        }
      }
      ++v36;
    }
    while (v36 < *((int *)a1 + 32));
  }
  v49 = *((_DWORD *)a1 + 29);
  if (v49 >= 1)
  {
    for (i = 0; i < v49; ++i)
    {
      v51 = a1[7] + 144 * i;
      for (j = v125; j; j = (uint64_t *)*j)
      {
        v53 = j[4];
        if (v51 >= v53)
        {
          if (v53 >= v51)
            goto LABEL_70;
          ++j;
        }
      }
      google::protobuf::Descriptor::DebugString();
      v49 = *((_DWORD *)a1 + 29);
LABEL_70:
      ;
    }
  }
  if (*((int *)a1 + 30) >= 1)
  {
    v54 = 0;
    v55 = 0;
    do
    {
      google::protobuf::EnumDescriptor::DebugString((uint64_t *)(a1[8] + v54), v21, (uint64_t)v122, a4);
      ++v55;
      v54 += 80;
    }
    while (v55 < *((int *)a1 + 30));
  }
  if (*((int *)a1 + 26) >= 1)
  {
    v56 = 0;
    v57 = 0;
    do
    {
      v58 = a1[5] + v56;
      v59 = *(_QWORD *)(v58 + 88);
      if (v59)
      {
        if (v58 == **(_QWORD **)(v59 + 32))
          google::protobuf::OneofDescriptor::DebugString((int *)v59, v21, v122, (__int16 *)a4);
      }
      else
      {
        google::protobuf::FieldDescriptor::DebugString((google::protobuf::FieldDescriptor *)(a1[5] + v56));
      }
      ++v57;
      v56 += 152;
    }
    while (v57 < *((int *)a1 + 26));
  }
  if (*((int *)a1 + 31) >= 1)
  {
    v60 = 0;
    v61 = 0;
    do
    {
      v62 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      v63 = (std::string *)__b.__r_.__value_.__r.__words[0];
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &__b;
      v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v62 = __b.__r_.__value_.__r.__words[1];
      LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v62;
      v155 = (std::string *)google::protobuf::FastInt32ToBuffer((google::protobuf *)*(unsigned int *)(a1[9] + v60), v157, v22);
      v156 = strlen((const char *)v155);
      v152 = google::protobuf::FastInt32ToBuffer((google::protobuf *)(*(_DWORD *)(a1[9] + v60 + 4) - 1), v154, v64);
      v153 = strlen(v152);
      v150 = 0;
      v151 = -1;
      v148 = 0;
      v149 = -1;
      v146 = 0;
      v147 = -1;
      v144 = 0;
      v145 = -1;
      v142 = 0;
      v143 = -1;
      v140 = 0;
      v141 = -1;
      v138 = 0;
      v139 = -1;
      *(_QWORD *)&v111 = &v144;
      *((_QWORD *)&v111 + 1) = &v142;
      google::protobuf::strings::SubstituteAndAppend(v122, "$0  extensions $1 to $2;\n",
        (uint64_t)v158,
        (uint64_t)&v155,
        (uint64_t)&v152,
        (uint64_t)&v150,
        (uint64_t)&v148,
        (uint64_t)&v146,
        v111,
        (uint64_t)&v140,
        (uint64_t)&v138);
      ++v61;
      v60 += 16;
    }
    while (v61 < *((int *)a1 + 31));
  }
  v65 = v122;
  if (*((int *)a1 + 32) >= 1)
  {
    v66 = (google::protobuf::FieldDescriptor *)a1[10];
    v67 = *((_QWORD *)v66 + 10);
    if (v67)
    {
      v68 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      v69 = *(_QWORD *)(v67 + 8);
      v70 = *(char *)(v69 + 23);
      v71 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v71 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v68 = __b.__r_.__value_.__r.__words[1];
      LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v68;
      v72 = *(const char **)v69;
      v73 = *(_QWORD *)(v69 + 8);
      if (v70 >= 0)
        v72 = (const char *)v69;
      v155 = (std::string *)v72;
      v74 = v70;
      if (v70 < 0)
        v74 = v73;
      v156 = v74;
      v152 = 0;
      v153 = -1;
      v150 = 0;
      v151 = -1;
      v148 = 0;
      v149 = -1;
      v146 = 0;
      v147 = -1;
      v144 = 0;
      v145 = -1;
      v142 = 0;
      v143 = -1;
      v140 = 0;
      v141 = -1;
      v138 = 0;
      v139 = -1;
      *(_QWORD *)&v112 = &v144;
      *((_QWORD *)&v112 + 1) = &v142;
      google::protobuf::strings::SubstituteAndAppend(v122, "$0  extend .$1 {\n", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v112, (uint64_t)&v140, (uint64_t)&v138);
      v66 = (google::protobuf::FieldDescriptor *)a1[10];
    }
    google::protobuf::FieldDescriptor::DebugString(v66);
    LODWORD(v75) = *((_DWORD *)a1 + 32);
    if ((int)v75 > 1)
    {
      v76 = 1;
      v77 = 232;
      do
      {
        v78 = a1[10];
        if (*(_QWORD *)(v78 + v77) != v67)
        {
          v79 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
          v80 = (std::string *)__b.__r_.__value_.__r.__words[0];
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v80 = &__b;
          v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v79 = __b.__r_.__value_.__r.__words[1];
          LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v79;
          v155 = 0;
          v156 = -1;
          v152 = 0;
          v153 = -1;
          v150 = 0;
          v151 = -1;
          v148 = 0;
          v149 = -1;
          v146 = 0;
          v147 = -1;
          v144 = 0;
          v145 = -1;
          v142 = 0;
          v143 = -1;
          v140 = 0;
          v141 = -1;
          v138 = 0;
          v139 = -1;
          *(_QWORD *)&v113 = &v144;
          *((_QWORD *)&v113 + 1) = &v142;
          google::protobuf::strings::SubstituteAndAppend(v122, "$0  }\n", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v113, (uint64_t)&v140, (uint64_t)&v138);
          v67 = *(_QWORD *)(a1[10] + v77);
          v81 = *(std::string **)(v67 + 8);
          v82 = SHIBYTE(v81->__r_.__value_.__r.__words[2]);
          v83 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
          v84 = (std::string *)__b.__r_.__value_.__r.__words[0];
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v84 = &__b;
          v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v83 = __b.__r_.__value_.__r.__words[1];
          LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v83;
          size = v81->__r_.__value_.__l.__size_;
          if (v82 < 0)
            v81 = (std::string *)v81->__r_.__value_.__r.__words[0];
          v155 = v81;
          v86 = v82;
          if (v82 < 0)
            v86 = size;
          v156 = v86;
          v152 = 0;
          v153 = -1;
          v150 = 0;
          v151 = -1;
          v148 = 0;
          v149 = -1;
          v146 = 0;
          v147 = -1;
          v144 = 0;
          v145 = -1;
          v142 = 0;
          v143 = -1;
          v140 = 0;
          v141 = -1;
          v138 = 0;
          v139 = -1;
          *(_QWORD *)&v114 = &v144;
          *((_QWORD *)&v114 + 1) = &v142;
          google::protobuf::strings::SubstituteAndAppend(v122, "$0  extend .$1 {\n", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v114, (uint64_t)&v140, (uint64_t)&v138);
          v78 = a1[10];
        }
        google::protobuf::FieldDescriptor::DebugString((google::protobuf::FieldDescriptor *)(v78 + v77 - 80));
        ++v76;
        v75 = *((int *)a1 + 32);
        v77 += 152;
      }
      while (v76 < v75);
      v65 = v122;
    }
    if ((int)v75 >= 1)
    {
      v87 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      v88 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v88 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v87 = __b.__r_.__value_.__r.__words[1];
      LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v87;
      v155 = 0;
      v156 = -1;
      v152 = 0;
      v153 = -1;
      v150 = 0;
      v151 = -1;
      v148 = 0;
      v149 = -1;
      v146 = 0;
      v147 = -1;
      v144 = 0;
      v145 = -1;
      v142 = 0;
      v143 = -1;
      v140 = 0;
      v141 = -1;
      v138 = 0;
      v139 = -1;
      *(_QWORD *)&v115 = &v144;
      *((_QWORD *)&v115 + 1) = &v142;
      google::protobuf::strings::SubstituteAndAppend(v65, "$0  }\n", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v115, (uint64_t)&v140, (uint64_t)&v138);
    }
  }
  if (*((int *)a1 + 33) >= 1)
  {
    v89 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    v90 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v90 = (std::string *)__b.__r_.__value_.__r.__words[0];
    v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v89 = __b.__r_.__value_.__r.__words[1];
    LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v89;
    v155 = 0;
    v156 = -1;
    v152 = 0;
    v153 = -1;
    v150 = 0;
    v151 = -1;
    v148 = 0;
    v149 = -1;
    v146 = 0;
    v147 = -1;
    v144 = 0;
    v145 = -1;
    v142 = 0;
    v143 = -1;
    v140 = 0;
    v141 = -1;
    v138 = 0;
    v139 = -1;
    *(_QWORD *)&v116 = &v144;
    *((_QWORD *)&v116 + 1) = &v142;
    google::protobuf::strings::SubstituteAndAppend(v65, "$0  reserved ", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v116, (uint64_t)&v140, (uint64_t)&v138);
    if (*((int *)a1 + 33) >= 1)
    {
      v92 = 0;
      v93 = 0;
      do
      {
        v94 = (unsigned int *)(a1[11] + v92);
        v95 = (google::protobuf *)*v94;
        if (v94[1] == (_DWORD)v95 + 1)
        {
          v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer(v95, &v158[0].__r_.__value_.__s.__data_[12], v91);
          LODWORD(v158[0].__r_.__value_.__r.__words[1]) = strlen(v158[0].__r_.__value_.__l.__data_);
          v155 = 0;
          v156 = -1;
          v152 = 0;
          v153 = -1;
          v150 = 0;
          v151 = -1;
          v148 = 0;
          v149 = -1;
          v146 = 0;
          v147 = -1;
          v144 = 0;
          v145 = -1;
          v142 = 0;
          v143 = -1;
          v140 = 0;
          v141 = -1;
          v138 = 0;
          v139 = -1;
          *(_QWORD *)&v117 = &v144;
          *((_QWORD *)&v117 + 1) = &v142;
          google::protobuf::strings::SubstituteAndAppend(v122, "$0, ", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v117, (uint64_t)&v140, (uint64_t)&v138);
        }
        else
        {
          v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer(v95, &v158[0].__r_.__value_.__s.__data_[12], v91);
          LODWORD(v158[0].__r_.__value_.__r.__words[1]) = strlen(v158[0].__r_.__value_.__l.__data_);
          v155 = (std::string *)google::protobuf::FastInt32ToBuffer((google::protobuf *)(v94[1] - 1), v157, v96);
          v156 = strlen((const char *)v155);
          v152 = 0;
          v153 = -1;
          v150 = 0;
          v151 = -1;
          v148 = 0;
          v149 = -1;
          v146 = 0;
          v147 = -1;
          v144 = 0;
          v145 = -1;
          v142 = 0;
          v143 = -1;
          v140 = 0;
          v141 = -1;
          v138 = 0;
          v139 = -1;
          *(_QWORD *)&v118 = &v144;
          *((_QWORD *)&v118 + 1) = &v142;
          google::protobuf::strings::SubstituteAndAppend(v122, "$0 to $1, ", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v118, (uint64_t)&v140, (uint64_t)&v138);
        }
        ++v93;
        v92 += 8;
      }
      while (v93 < *((int *)a1 + 33));
    }
    v65 = v122;
    if (SHIBYTE(v122->__r_.__value_.__r.__words[2]) < 0)
      v97 = v122->__r_.__value_.__l.__size_;
    else
      v97 = HIBYTE(v122->__r_.__value_.__r.__words[2]);
    std::string::replace(v122, v97 - 2, 2uLL, ";\n");
  }
  if (*((int *)a1 + 34) >= 1)
  {
    v98 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    v99 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v99 = (std::string *)__b.__r_.__value_.__r.__words[0];
    v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v98 = __b.__r_.__value_.__r.__words[1];
    LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v98;
    v155 = 0;
    v156 = -1;
    v152 = 0;
    v153 = -1;
    v150 = 0;
    v151 = -1;
    v148 = 0;
    v149 = -1;
    v146 = 0;
    v147 = -1;
    v144 = 0;
    v145 = -1;
    v142 = 0;
    v143 = -1;
    v140 = 0;
    v141 = -1;
    v138 = 0;
    v139 = -1;
    *(_QWORD *)&v119 = &v144;
    *((_QWORD *)&v119 + 1) = &v142;
    google::protobuf::strings::SubstituteAndAppend(v65, "$0  reserved ", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v119, (uint64_t)&v140, (uint64_t)&v138);
    if (*((int *)a1 + 34) >= 1)
    {
      v101 = 0;
      do
      {
        google::protobuf::CEscape(*(_QWORD *)(a1[12] + 8 * v101), v100, &__p);
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v103 = __p.__r_.__value_.__r.__words[1];
        LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v103;
        v155 = 0;
        v156 = -1;
        v152 = 0;
        v153 = -1;
        v150 = 0;
        v151 = -1;
        v148 = 0;
        v149 = -1;
        v146 = 0;
        v147 = -1;
        v144 = 0;
        v145 = -1;
        v142 = 0;
        v143 = -1;
        v140 = 0;
        v141 = -1;
        v138 = 0;
        v139 = -1;
        *(_QWORD *)&v120 = &v144;
        *((_QWORD *)&v120 + 1) = &v142;
        google::protobuf::strings::SubstituteAndAppend(v65, "\"$0\", ", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v120, (uint64_t)&v140, (uint64_t)&v138);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v101;
      }
      while (v101 < *((int *)a1 + 34));
    }
    if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
      v104 = v65->__r_.__value_.__l.__size_;
    else
      v104 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
    std::string::replace(v65, v104 - 2, 2uLL, ";\n");
  }
  v105 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  v106 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v106 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v158[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v105 = __b.__r_.__value_.__r.__words[1];
  LODWORD(v158[0].__r_.__value_.__r.__words[1]) = v105;
  v155 = 0;
  v156 = -1;
  v152 = 0;
  v153 = -1;
  v150 = 0;
  v151 = -1;
  v148 = 0;
  v149 = -1;
  v146 = 0;
  v147 = -1;
  v144 = 0;
  v145 = -1;
  v142 = 0;
  v143 = -1;
  v140 = 0;
  v141 = -1;
  v138 = 0;
  v139 = -1;
  *(_QWORD *)&v121 = &v144;
  *((_QWORD *)&v121 + 1) = &v142;
  google::protobuf::strings::SubstituteAndAppend(v65, "$0}\n", (uint64_t)v158, (uint64_t)&v155, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)&v146, v121, (uint64_t)&v140, (uint64_t)&v138);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v124, v125);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  v107 = (void **)v132[0];
  if (v132[0])
  {
    v108 = (void **)v132[1];
    v109 = v132[0];
    if (v132[1] != v132[0])
    {
      do
      {
        if (*((char *)v108 - 1) < 0)
          operator delete(*(v108 - 3));
        v108 -= 3;
      }
      while (v108 != v107);
      v109 = v132[0];
    }
    v132[1] = v107;
    operator delete(v109);
  }
  if (SHIBYTE(v131) < 0)
  {
    operator delete(v130[1]);
    if ((SHIBYTE(v130[0]) & 0x80000000) == 0)
    {
LABEL_178:
      if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_182:
      operator delete(__b.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v130[0]) & 0x80000000) == 0)
  {
    goto LABEL_178;
  }
  operator delete(v129[0]);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_182;
}

void sub_22DC3C610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void **a40,void **a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void **v56;
  void **v57;

  if (a40)
  {
    v56 = a41;
    v57 = a40;
    if (a41 != a40)
    {
      do
      {
        if (*((char *)v56 - 1) < 0)
          operator delete(*(v56 - 3));
        v56 -= 3;
      }
      while (v56 != a40);
      v57 = a40;
    }
    operator delete(v57);
    if ((a39 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a34);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if (a55 < 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a28);
  if (a55 < 0)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_15:
  _Unwind_Resume(exception_object);
}

void google::protobuf::FieldDescriptor::DebugString(google::protobuf::FieldDescriptor *this, int a2, std::string *a3, uint64_t a4)
{
  std::string::size_type v8;
  std::string *p_b;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  std::string::value_type SourceLocation;
  char *v26;
  int v27;
  std::string *v28;
  int v29;
  std::string *v30;
  int v31;
  std::string *p_p;
  unint64_t *v33;
  unint64_t v34;
  google::protobuf::FieldDescriptor *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t (*v38)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  int v39;
  uint64_t v40;
  int v41;
  char *v42;
  std::string *v43;
  int v44;
  const std::string::value_type *v45;
  const char *v46;
  std::string *v47;
  std::string::size_type size;
  int v49;
  const std::string::value_type *v50;
  std::string *v51;
  std::string::size_type v52;
  unint64_t *v53;
  unint64_t v54;
  const std::string::value_type *v55;
  void **v56;
  void **v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  std::string v63;
  std::string v64;
  std::string __p;
  std::string __b;
  void *v67;
  uint64_t v68;
  unsigned __int8 v69;
  std::string v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int16 v76;
  char v77;
  std::string v78;
  uint64_t v79;
  int v80;
  google::protobuf::FieldDescriptor *v81;
  int v82;
  uint64_t (*v83)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  int v84;
  const char **v85;
  int v86;
  const char *v87;
  uint64_t (**v88)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (*v89)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  int v90;
  uint64_t (***v91)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  int v92;
  uint64_t (**v93)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v94)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  std::string v95[2];
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = 2 * a2;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_b = (std::string *)operator new(v10 + 1);
    __b.__r_.__value_.__l.__size_ = v8;
    __b.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
  }
  else
  {
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 2 * a2;
    p_b = &__b;
    if (!a2)
      goto LABEL_9;
  }
  memset(p_b, 32, v8);
LABEL_9:
  p_b->__r_.__value_.__s.__data_[v8] = 0;
  memset(&__p, 0, sizeof(__p));
  v12 = (unint64_t *)*((_QWORD *)this + 6);
  if (v12)
  {
    v93 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
    v91 = (uint64_t (***)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
    v13 = atomic_load(v12);
    if (v13 != -1)
    {
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
      v70.__r_.__value_.__l.__size_ = (std::string::size_type)&v91;
      v95[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      std::__call_once(v12, v95, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  if (*((_DWORD *)this + 14) == 11 && (v14 = *((_QWORD *)this + 13), *(_BYTE *)(*(_QWORD *)(v14 + 32) + 75)))
  {
    v15 = (unint64_t *)*((_QWORD *)this + 6);
    if (v15)
    {
      v91 = (uint64_t (***)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
      v16 = atomic_load(v15);
      if (v16 != -1)
      {
        v95[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v95[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v91;
        v93 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))v95;
        std::__call_once(v15, &v93, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
      v14 = *((_QWORD *)this + 13);
    }
    google::protobuf::FieldDescriptor::FieldTypeNameDebugString(*(google::protobuf::FieldDescriptor **)(v14 + 40), &v67);
    v17 = v67;
    if ((v69 & 0x80u) == 0)
      v17 = &v67;
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    v18 = v69;
    if ((v69 & 0x80u) != 0)
      v18 = v68;
    LODWORD(v70.__r_.__value_.__r.__words[1]) = v18;
    v19 = (unint64_t *)*((_QWORD *)this + 6);
    if (v19)
    {
      v89 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
      v20 = atomic_load(v19);
      if (v20 != -1)
      {
        v93 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
        v94 = &v89;
        v91 = &v93;
        std::__call_once(v19, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    google::protobuf::FieldDescriptor::FieldTypeNameDebugString((google::protobuf::FieldDescriptor *)(*(_QWORD *)(*((_QWORD *)this + 13) + 40) + 152), &v64);
    v21 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v64;
    v95[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v22 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = v64.__r_.__value_.__r.__words[1];
    LODWORD(v95[0].__r_.__value_.__r.__words[1]) = v22;
    v93 = 0;
    LODWORD(v94) = -1;
    v91 = 0;
    v92 = -1;
    v89 = 0;
    v90 = -1;
    v87 = 0;
    LODWORD(v88) = -1;
    v85 = 0;
    v86 = -1;
    v83 = 0;
    v84 = -1;
    v81 = 0;
    v82 = -1;
    v79 = 0;
    v80 = -1;
    *(_QWORD *)&v60 = &v85;
    *((_QWORD *)&v60 + 1) = &v83;
    google::protobuf::strings::SubstituteAndAppend(&__p, "map<$0, $1>", (uint64_t)&v70, (uint64_t)v95, (uint64_t)&v93, (uint64_t)&v91, (uint64_t)&v89, (uint64_t)&v87, v60, (uint64_t)&v81, (uint64_t)&v79);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      if ((char)v69 < 0)
LABEL_150:
        operator delete(v67);
    }
    else if ((char)v69 < 0)
    {
      goto LABEL_150;
    }
  }
  else
  {
    google::protobuf::FieldDescriptor::FieldTypeNameDebugString(this, &v70);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v70;
  }
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::kLabelToName[*((unsigned int *)this + 15)];
  v70.__r_.__value_.__l.__size_ = strlen(v70.__r_.__value_.__l.__data_);
  v95[0].__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
  v95[0].__r_.__value_.__l.__size_ = 1;
  google::protobuf::StrCat((uint64_t)&v70, (uint64_t)v95, &v64);
  v23 = (unint64_t *)*((_QWORD *)this + 6);
  if (v23)
  {
    v93 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
    v91 = (uint64_t (***)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
    v24 = atomic_load(v23);
    if (v24 != -1)
    {
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
      v70.__r_.__value_.__l.__size_ = (std::string::size_type)&v91;
      v95[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
      std::__call_once(v23, v95, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  if (*((_DWORD *)this + 14) == 11 && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 13) + 32) + 75)
    || *((_QWORD *)this + 11)
    || *((_DWORD *)this + 15) == 1 && !*((_BYTE *)this + 65) && *(_DWORD *)(*((_QWORD *)this + 5) + 60) != 2)
  {
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      *v64.__r_.__value_.__l.__data_ = 0;
      v64.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v64.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v64.__r_.__value_.__s + 23) = 0;
    }
  }
  v75 = 0;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v76 = *(_WORD *)a4;
  v77 = *(_BYTE *)(a4 + 2);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v78, __b.__r_.__value_.__l.__data_, __b.__r_.__value_.__l.__size_);
  else
    v78 = __b;
  if (*(_BYTE *)a4)
  {
    memset(v95, 0, 24);
    google::protobuf::FieldDescriptor::GetLocationPath((uint64_t)this, &v95[0].__r_.__value_.__l.__data_);
    SourceLocation = google::protobuf::FileDescriptor::GetSourceLocation(*((_QWORD *)this + 5), v95, (uint64_t)&v70.__r_.__value_.__l.__size_);
    if (v95[0].__r_.__value_.__r.__words[0])
    {
      v95[0].__r_.__value_.__l.__size_ = v95[0].__r_.__value_.__r.__words[0];
      operator delete(v95[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    SourceLocation = 0;
  }
  v70.__r_.__value_.__s.__data_[0] = SourceLocation;
  v27 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  v28 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v28 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v95[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = __b.__r_.__value_.__r.__words[1];
  LODWORD(v95[0].__r_.__value_.__r.__words[1]) = v27;
  v29 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  v30 = &v64;
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v30 = (std::string *)v64.__r_.__value_.__r.__words[0];
  v93 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))v30;
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = v64.__r_.__value_.__r.__words[1];
  LODWORD(v94) = v29;
  v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v91 = (uint64_t (***)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))p_p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v31 = __p.__r_.__value_.__r.__words[1];
  v92 = v31;
  v33 = (unint64_t *)*((_QWORD *)this + 6);
  if (v33)
  {
    v83 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v81 = this;
    v34 = atomic_load(v33);
    if (v34 != -1)
    {
      v87 = (const char *)&v83;
      v88 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))&v81;
      v85 = &v87;
      std::__call_once(v33, &v85, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  v35 = this;
  if (*((_DWORD *)this + 14) == 10)
  {
    v36 = (unint64_t *)*((_QWORD *)this + 6);
    if (v36)
    {
      v83 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
      v37 = atomic_load(v36);
      if (v37 != -1)
      {
        v87 = (const char *)google::protobuf::FieldDescriptor::TypeOnceInit;
        v88 = &v83;
        v85 = &v87;
        std::__call_once(v36, &v85, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    v35 = (google::protobuf::FieldDescriptor *)*((_QWORD *)this + 13);
  }
  v38 = *(uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))v35;
  v39 = *((char *)v38 + 23);
  v40 = *((_QWORD *)v38 + 1);
  if (v39 < 0)
    v38 = *(uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))v38;
  v89 = v38;
  v41 = v39;
  if (v39 < 0)
    v41 = v40;
  v90 = v41;
  v87 = google::protobuf::FastInt32ToBuffer((google::protobuf *)*((unsigned int *)this + 17), (_BYTE *)&v88 + 4, v26);
  LODWORD(v88) = strlen(v87);
  v85 = 0;
  v86 = -1;
  v83 = 0;
  v84 = -1;
  v81 = 0;
  v82 = -1;
  v79 = 0;
  v80 = -1;
  v67 = 0;
  LODWORD(v68) = -1;
  *(_QWORD *)&v61 = &v83;
  *((_QWORD *)&v61 + 1) = &v81;
  google::protobuf::strings::SubstituteAndAppend(a3, "$0$1$2 $3 = $4", (uint64_t)v95, (uint64_t)&v93, (uint64_t)&v91, (uint64_t)&v89, (uint64_t)&v87, (uint64_t)&v85, v61, (uint64_t)&v79, (uint64_t)&v67);
  if (*((_BYTE *)this + 64))
  {
    google::protobuf::FieldDescriptor::DefaultValueAsString(this, (char *)1, v42, &v63);
    v43 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &v63;
    v95[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    v44 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v44 = v63.__r_.__value_.__r.__words[1];
    LODWORD(v95[0].__r_.__value_.__r.__words[1]) = v44;
    v93 = 0;
    LODWORD(v94) = -1;
    v91 = 0;
    v92 = -1;
    v89 = 0;
    v90 = -1;
    v87 = 0;
    LODWORD(v88) = -1;
    v85 = 0;
    v86 = -1;
    v83 = 0;
    v84 = -1;
    v81 = 0;
    v82 = -1;
    v79 = 0;
    v80 = -1;
    v67 = 0;
    LODWORD(v68) = -1;
    *(_QWORD *)&v62 = &v83;
    *((_QWORD *)&v62 + 1) = &v81;
    google::protobuf::strings::SubstituteAndAppend(a3, " [default = $0", (uint64_t)v95, (uint64_t)&v93, (uint64_t)&v91, (uint64_t)&v89, (uint64_t)&v87, (uint64_t)&v85, v62, (uint64_t)&v79, (uint64_t)&v67);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v63.__r_.__value_.__l.__data_);
      if (!*((_BYTE *)this + 66))
      {
LABEL_99:
        v49 = 1;
        goto LABEL_100;
      }
    }
    else if (!*((_BYTE *)this + 66))
    {
      goto LABEL_99;
    }
    v45 = ", ";
LABEL_90:
    std::string::append(a3, v45);
    std::string::append(a3, "json_name = \"");
    google::protobuf::CEscape(*((_QWORD *)this + 4), v46, v95);
    if ((v95[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = v95;
    else
      v47 = (std::string *)v95[0].__r_.__value_.__r.__words[0];
    if ((v95[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v95[0].__r_.__value_.__r.__words[2]);
    else
      size = v95[0].__r_.__value_.__l.__size_;
    std::string::append(a3, (const std::string::value_type *)v47, size);
    if (SHIBYTE(v95[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95[0].__r_.__value_.__l.__data_);
    std::string::append(a3, "\"");
    goto LABEL_99;
  }
  if (*((_BYTE *)this + 66))
  {
    v45 = "[";
    goto LABEL_90;
  }
  v49 = 0;
LABEL_100:
  memset(v95, 0, 24);
  {
    if (v49)
      v50 = ", ";
    else
      v50 = " [";
    std::string::append(a3, v50);
    if ((v95[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = v95;
    else
      v51 = (std::string *)v95[0].__r_.__value_.__r.__words[0];
    if ((v95[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v95[0].__r_.__value_.__r.__words[2]);
    else
      v52 = v95[0].__r_.__value_.__l.__size_;
    std::string::append(a3, (const std::string::value_type *)v51, v52);
    goto LABEL_112;
  }
  if (v49)
LABEL_112:
    std::string::append(a3, "]");
  v53 = (unint64_t *)*((_QWORD *)this + 6);
  if (v53)
  {
    v89 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v87 = (const char *)this;
    v54 = atomic_load(v53);
    if (v54 != -1)
    {
      v93 = &v89;
      v94 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))&v87;
      v91 = &v93;
      std::__call_once(v53, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  if (*((_DWORD *)this + 14) != 10)
  {
    v55 = ";\n";
    goto LABEL_120;
  }
  if (*(_BYTE *)(a4 + 1))
  {
    v55 = " { ... };\n";
LABEL_120:
    std::string::append(a3, v55);
    goto LABEL_121;
  }
  v58 = (unint64_t *)*((_QWORD *)this + 6);
  if (v58)
  {
    v89 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
    v59 = atomic_load(v58);
    if (v59 != -1)
    {
      v93 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
      v94 = &v89;
      v91 = &v93;
      std::__call_once(v58, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  google::protobuf::Descriptor::DebugString(*((uint64_t **)this + 13), a2, a3, a4, 0);
LABEL_121:
  if (SHIBYTE(v95[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v95[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_123:
      v56 = (void **)v74;
      if ((_QWORD)v74)
        goto LABEL_124;
LABEL_138:
      if ((SHIBYTE(v73) & 0x80000000) == 0)
        goto LABEL_139;
      goto LABEL_126;
    }
  }
  else if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_123;
  }
  operator delete(v78.__r_.__value_.__l.__data_);
  v56 = (void **)v74;
  if (!(_QWORD)v74)
    goto LABEL_138;
LABEL_124:
  v57 = (void **)*((_QWORD *)&v74 + 1);
  if (*((void ***)&v74 + 1) != v56)
  {
    do
    {
      if (*((char *)v57 - 1) < 0)
        operator delete(*(v57 - 3));
      v57 -= 3;
    }
    while (v57 != v56);
    *((_QWORD *)&v74 + 1) = v56;
    operator delete((void *)v74);
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_139;
LABEL_126:
    operator delete(*((void **)&v72 + 1));
    if (SBYTE7(v72) < 0)
      goto LABEL_127;
    goto LABEL_140;
  }
  *((_QWORD *)&v74 + 1) = v56;
  operator delete(v56);
  if (SHIBYTE(v73) < 0)
    goto LABEL_126;
LABEL_139:
  if (SBYTE7(v72) < 0)
  {
LABEL_127:
    operator delete((void *)v71);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_128;
    goto LABEL_141;
  }
LABEL_140:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_128:
    operator delete(v64.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_129;
LABEL_142:
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_130;
    return;
  }
LABEL_141:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_142;
LABEL_129:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
LABEL_130:
    operator delete(__b.__r_.__value_.__l.__data_);
}

void sub_22DC3D1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (a27 < 0)
    operator delete(a22);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void google::protobuf::OneofDescriptor::DebugString(int *a1, int a2, std::string *a3, __int16 *a4)
{
  std::string::size_type v8;
  std::string *p_b;
  uint64_t v10;
  uint64_t v11;
  char SourceLocation;
  int v13;
  std::string *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  std::string *v21;
  void **v22;
  void **v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  char v27[8];
  uint64_t v28;
  void *v29[2];
  void *v30[2];
  __int128 v31;
  void *v32[2];
  uint64_t v33;
  __int16 v34;
  char v35;
  std::string __p;
  std::string __b;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  int v55;
  std::string v56[2];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = 2 * a2;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_b = (std::string *)operator new(v10 + 1);
    __b.__r_.__value_.__l.__size_ = v8;
    __b.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_8;
  }
  *((_BYTE *)&__b.__r_.__value_.__s + 23) = 2 * a2;
  p_b = &__b;
  if (a2)
LABEL_8:
    memset(p_b, 32, v8);
  p_b->__r_.__value_.__s.__data_[v8] = 0;
  v33 = 0;
  *(_OWORD *)v32 = 0u;
  v31 = 0u;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)v29 = 0u;
  v34 = *a4;
  v35 = *((_BYTE *)a4 + 2);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, __b.__r_.__value_.__l.__data_, __b.__r_.__value_.__l.__size_);
  else
    __p = __b;
  if (*(_BYTE *)a4)
  {
    memset(v56, 0, 24);
    google::protobuf::OneofDescriptor::GetLocationPath((uint64_t)a1, &v56[0].__r_.__value_.__l.__data_);
    SourceLocation = google::protobuf::FileDescriptor::GetSourceLocation(*(_QWORD *)(*((_QWORD *)a1 + 2) + 16), v56, (uint64_t)&v28);
    if (v56[0].__r_.__value_.__r.__words[0])
    {
      v56[0].__r_.__value_.__l.__size_ = v56[0].__r_.__value_.__r.__words[0];
      operator delete(v56[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    SourceLocation = 0;
  }
  v27[0] = SourceLocation;
  v13 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  v14 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = __b.__r_.__value_.__r.__words[1];
  LODWORD(v56[0].__r_.__value_.__r.__words[1]) = v13;
  v15 = *(uint64_t **)a1;
  v16 = *(char *)(*(_QWORD *)a1 + 23);
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v16 < 0)
    v15 = **(uint64_t ***)a1;
  v54 = v15;
  v18 = v16;
  if (v16 < 0)
    v18 = v17;
  v55 = v18;
  v52 = 0;
  v53 = -1;
  v50 = 0;
  v51 = -1;
  v48 = 0;
  v49 = -1;
  v46 = 0;
  v47 = -1;
  v44 = 0;
  v45 = -1;
  v42 = 0;
  v43 = -1;
  v40 = 0;
  v41 = -1;
  v38 = 0;
  v39 = -1;
  *(_QWORD *)&v25 = &v44;
  *((_QWORD *)&v25 + 1) = &v42;
  google::protobuf::strings::SubstituteAndAppend(a3, "$0oneof $1 {", (uint64_t)v56, (uint64_t)&v54, (uint64_t)&v52, (uint64_t)&v50, (uint64_t)&v48, (uint64_t)&v46, v25, (uint64_t)&v40, (uint64_t)&v38);
  if (*((_BYTE *)a4 + 2))
  {
    std::string::append(a3, " ... }\n");
  }
  else
  {
    std::string::append(a3, "\n");
    if (a1[6] >= 1)
    {
      v19 = 0;
      do
        google::protobuf::FieldDescriptor::DebugString(*(google::protobuf::FieldDescriptor **)(*((_QWORD *)a1 + 4)
                                                                                             + 8 * v19++));
      while (v19 < a1[6]);
    }
    v20 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    v21 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)__b.__r_.__value_.__r.__words[0];
    v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = __b.__r_.__value_.__r.__words[1];
    LODWORD(v56[0].__r_.__value_.__r.__words[1]) = v20;
    v54 = 0;
    v55 = -1;
    v52 = 0;
    v53 = -1;
    v50 = 0;
    v51 = -1;
    v48 = 0;
    v49 = -1;
    v46 = 0;
    v47 = -1;
    v44 = 0;
    v45 = -1;
    v42 = 0;
    v43 = -1;
    v40 = 0;
    v41 = -1;
    v38 = 0;
    v39 = -1;
    *(_QWORD *)&v26 = &v44;
    *((_QWORD *)&v26 + 1) = &v42;
    google::protobuf::strings::SubstituteAndAppend(a3, "$0}\n", (uint64_t)v56, (uint64_t)&v54, (uint64_t)&v52, (uint64_t)&v50, (uint64_t)&v48, (uint64_t)&v46, v26, (uint64_t)&v40, (uint64_t)&v38);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v22 = (void **)v32[0];
  if (v32[0])
  {
    v23 = (void **)v32[1];
    v24 = v32[0];
    if (v32[1] != v32[0])
    {
      do
      {
        if (*((char *)v23 - 1) < 0)
          operator delete(*(v23 - 3));
        v23 -= 3;
      }
      while (v23 != v22);
      v24 = v32[0];
    }
    v32[1] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v30[1]);
    if ((SHIBYTE(v30[0]) & 0x80000000) == 0)
    {
LABEL_46:
      if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_50:
      operator delete(__b.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v30[0]) & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
  operator delete(v29[0]);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_50;
}

void sub_22DC3D7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if ((a43 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void google::protobuf::FieldDescriptor::DebugStringWithOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*(_BYTE *)(a1 + 67))
  {
    v6 = *(uint64_t **)(*(_QWORD *)(a1 + 80) + 8);
    v7 = *((char *)v6 + 23);
    v8 = v6[1];
    if (v7 < 0)
      v6 = (uint64_t *)*v6;
    v30 = v6;
    v9 = v7;
    if (v7 < 0)
      v9 = v8;
    v31 = v9;
    v28 = 0;
    v29 = -1;
    v26 = 0;
    v27 = -1;
    v24 = 0;
    v25 = -1;
    v22 = 0;
    v23 = -1;
    v20 = 0;
    v21 = -1;
    v18 = 0;
    v19 = -1;
    v16 = 0;
    v17 = -1;
    v14 = 0;
    v15 = -1;
    v12 = 0;
    v13 = -1;
    *(_QWORD *)&v11 = &v18;
    *((_QWORD *)&v11 + 1) = &v16;
    google::protobuf::strings::SubstituteAndAppend(a3, "extend .$0 {\n", (uint64_t)&v30, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)&v24, (uint64_t)&v22, (uint64_t)&v20, v11, (uint64_t)&v14, (uint64_t)&v12);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  google::protobuf::FieldDescriptor::DebugString((google::protobuf::FieldDescriptor *)a1, v10, a3, a2);
  if (*(_BYTE *)(a1 + 67))
    std::string::append(a3, "}\n");
}

void sub_22DC3DA48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t google::protobuf::FieldDescriptor::FieldTypeNameDebugString@<X0>(google::protobuf::FieldDescriptor *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  int v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t result;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  google::protobuf::FieldDescriptor *v19;
  uint64_t (*v20)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (***v21)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v22)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v23)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);

  v4 = (unint64_t *)*((_QWORD *)this + 6);
  if (v4)
  {
    v19 = this;
    v20 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v5 = atomic_load(v4);
    if (v5 != -1)
    {
      v22 = &v20;
      v23 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))&v19;
      v21 = &v22;
      std::__call_once(v4, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  v6 = *((_DWORD *)this + 14);
  if (v6 == 14)
  {
    v9 = (unint64_t *)*((_QWORD *)this + 6);
    if (v9)
    {
      v20 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
      v10 = atomic_load(v9);
      if (v10 != -1)
      {
        v22 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
        v23 = &v20;
        v21 = &v22;
        std::__call_once(v9, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    return std::operator+<char>();
  }
  if (v6 == 11)
  {
    v7 = (unint64_t *)*((_QWORD *)this + 6);
    if (v7)
    {
      v20 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
      v8 = atomic_load(v7);
      if (v8 != -1)
      {
        v22 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
        v23 = &v20;
        v21 = &v22;
        std::__call_once(v7, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    return std::operator+<char>();
  }
  v12 = (unint64_t *)*((_QWORD *)this + 6);
  if (v12)
  {
    v19 = this;
    v20 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v13 = atomic_load(v12);
    if (v13 != -1)
    {
      v22 = &v20;
      v23 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))&v19;
      v21 = &v22;
      std::__call_once(v12, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
    v6 = *((_DWORD *)this + 14);
  }
  v14 = google::protobuf::FieldDescriptor::kTypeToName[v6];
  result = strlen(v14);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = result;
  if (result >= 0x17)
  {
    v16 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v16 = result | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    a2[1] = v15;
    a2[2] = v17 | 0x8000000000000000;
    *a2 = v18;
    a2 = v18;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (unint64_t)memmove(a2, v14, v15);
  *((_BYTE *)a2 + v15) = 0;
  return result;
}

BOOL google::protobuf::`anonymous namespace'::FormatBracketedOptions(int a1, google::protobuf::Message *a2, uint64_t a3, std::string *a4)
{
  std::string *v5;
  std::string::size_type v6;
  __int128 v7;
  void *v8;
  std::string::size_type size;
  std::string __p;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  {
    google::protobuf::Join<std::vector<std::string>>(&v12, ", ", &__p);
    v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(__p.__r_.__value_.__r.__words[2])
       : __p.__r_.__value_.__l.__size_;
    std::string::append(a4, (const std::string::value_type *)v5, v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v7 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  if (v12.__r_.__value_.__r.__words[0])
  {
    v8 = (void *)v12.__r_.__value_.__r.__words[0];
    if (v12.__r_.__value_.__r.__words[0] != v12.__r_.__value_.__l.__size_)
    {
      size = v12.__r_.__value_.__l.__size_;
      do
      {
        if (*(char *)(size - 1) < 0)
          operator delete(*(void **)(size - 24));
        size -= 24;
      }
      while (size != (_QWORD)v7);
      v8 = (void *)v12.__r_.__value_.__r.__words[0];
    }
    v12.__r_.__value_.__l.__size_ = v7;
    operator delete(v8);
  }
  return (_QWORD)v7 != *((_QWORD *)&v7 + 1);
}

void sub_22DC3DD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(&a15);
    _Unwind_Resume(a1);
  }
  operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(&a15);
  _Unwind_Resume(a1);
}

void google::protobuf::EnumValueDescriptor::DebugString(uint64_t ***a1, int a2, std::string *a3, __int16 *a4)
{
  std::string::size_type v8;
  std::string *p_b;
  uint64_t v10;
  uint64_t v11;
  char SourceLocation;
  char *v13;
  int v14;
  std::string *v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  int v19;
  int v20;
  std::string *p_p;
  void **v22;
  void **v23;
  __int128 v24;
  __int128 v25;
  std::string __p;
  char v27[8];
  uint64_t v28;
  void *v29[2];
  void *v30[2];
  __int128 v31;
  void *v32[2];
  uint64_t v33;
  __int16 v34;
  char v35;
  std::string v36;
  std::string __b;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  const char *v52;
  int v53;
  char v54[36];
  uint64_t *v55;
  int v56;
  std::string v57[2];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = 2 * a2;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_b = (std::string *)operator new(v10 + 1);
    __b.__r_.__value_.__l.__size_ = v8;
    __b.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_8;
  }
  *((_BYTE *)&__b.__r_.__value_.__s + 23) = 2 * a2;
  p_b = &__b;
  if (a2)
LABEL_8:
    memset(p_b, 32, v8);
  p_b->__r_.__value_.__s.__data_[v8] = 0;
  v33 = 0;
  *(_OWORD *)v32 = 0u;
  v31 = 0u;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)v29 = 0u;
  v34 = *a4;
  v35 = *((_BYTE *)a4 + 2);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, __b.__r_.__value_.__l.__data_, __b.__r_.__value_.__l.__size_);
  else
    v36 = __b;
  if (*(_BYTE *)a4)
  {
    memset(v57, 0, 24);
    google::protobuf::EnumValueDescriptor::GetLocationPath((uint64_t)a1, &v57[0].__r_.__value_.__l.__data_);
    SourceLocation = google::protobuf::FileDescriptor::GetSourceLocation((uint64_t)a1[3][2], v57, (uint64_t)&v28);
    if (v57[0].__r_.__value_.__r.__words[0])
    {
      v57[0].__r_.__value_.__l.__size_ = v57[0].__r_.__value_.__r.__words[0];
      operator delete(v57[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    SourceLocation = 0;
  }
  v27[0] = SourceLocation;
  v14 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  v15 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v57[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = __b.__r_.__value_.__r.__words[1];
  LODWORD(v57[0].__r_.__value_.__r.__words[1]) = v14;
  v16 = (uint64_t *)*a1;
  v17 = *((char *)*a1 + 23);
  v18 = (*a1)[1];
  if (v17 < 0)
    v16 = **a1;
  v55 = v16;
  v19 = v17;
  if (v17 < 0)
    v19 = (int)v18;
  v56 = v19;
  v52 = google::protobuf::FastInt32ToBuffer((google::protobuf *)*((unsigned int *)a1 + 4), v54, v13);
  v53 = strlen(v52);
  v50 = 0;
  v51 = -1;
  v48 = 0;
  v49 = -1;
  v46 = 0;
  v47 = -1;
  v44 = 0;
  v45 = -1;
  v42 = 0;
  v43 = -1;
  v40 = 0;
  v41 = -1;
  v38 = 0;
  v39 = -1;
  *(_QWORD *)&v24 = &v44;
  *((_QWORD *)&v24 + 1) = &v42;
  google::protobuf::strings::SubstituteAndAppend(a3, "$0$1 = $2", (uint64_t)v57, (uint64_t)&v55, (uint64_t)&v52, (uint64_t)&v50, (uint64_t)&v48, (uint64_t)&v46, v24, (uint64_t)&v40, (uint64_t)&v38);
  memset(&__p, 0, sizeof(__p));
  {
    v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v57[0].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = __p.__r_.__value_.__r.__words[1];
    LODWORD(v57[0].__r_.__value_.__r.__words[1]) = v20;
    v55 = 0;
    v56 = -1;
    v52 = 0;
    v53 = -1;
    v50 = 0;
    v51 = -1;
    v48 = 0;
    v49 = -1;
    v46 = 0;
    v47 = -1;
    v44 = 0;
    v45 = -1;
    v42 = 0;
    v43 = -1;
    v40 = 0;
    v41 = -1;
    v38 = 0;
    v39 = -1;
    *(_QWORD *)&v25 = &v44;
    *((_QWORD *)&v25 + 1) = &v42;
    google::protobuf::strings::SubstituteAndAppend(a3, " [$0]", (uint64_t)v57, (uint64_t)&v55, (uint64_t)&v52, (uint64_t)&v50, (uint64_t)&v48, (uint64_t)&v46, v25, (uint64_t)&v40, (uint64_t)&v38);
  }
  std::string::append(a3, ";\n");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_32:
      v22 = (void **)v32[0];
      if (!v32[0])
        goto LABEL_33;
LABEL_39:
      v23 = (void **)v32[1];
      if (v32[1] == v22)
      {
        v32[1] = v22;
        operator delete(v22);
        if (SHIBYTE(v31) < 0)
          goto LABEL_46;
      }
      else
      {
        do
        {
          if (*((char *)v23 - 1) < 0)
            operator delete(*(v23 - 3));
          v23 -= 3;
        }
        while (v23 != v22);
        v32[1] = v22;
        operator delete(v32[0]);
        if (SHIBYTE(v31) < 0)
          goto LABEL_46;
      }
LABEL_34:
      if ((SHIBYTE(v30[0]) & 0x80000000) == 0)
        goto LABEL_35;
      goto LABEL_47;
    }
  }
  else if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
  v22 = (void **)v32[0];
  if (v32[0])
    goto LABEL_39;
LABEL_33:
  if ((SHIBYTE(v31) & 0x80000000) == 0)
    goto LABEL_34;
LABEL_46:
  operator delete(v30[1]);
  if ((SHIBYTE(v30[0]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_48:
    operator delete(__b.__r_.__value_.__l.__data_);
    return;
  }
LABEL_47:
  operator delete(v29[0]);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_48;
}

void sub_22DC3E1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void **a35,void **a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void **v51;
  void **v52;

  if (a35)
  {
    v51 = a36;
    v52 = a35;
    if (a36 != a35)
    {
      do
      {
        if (*((char *)v51 - 1) < 0)
          operator delete(*(v51 - 3));
        v51 -= 3;
      }
      while (v51 != a35);
      v52 = a35;
    }
    operator delete(v52);
    if ((a34 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((a34 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a29);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if (a50 < 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a23);
  if (a50 < 0)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_15:
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::FileDescriptor::GetSourceLocation(uint64_t a1, std::string *a2, uint64_t a3)
{
  char *v6;
  unsigned int *v7;
  uint64_t SourceLocation;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const std::string **v12;
  char v14;
  std::string v15[2];

  if (a3)
  {
    v6 = *(char **)(a1 + 152);
    if (!v6)
      return 0;
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 2977);
    v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: out_location != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    v6 = *(char **)(a1 + 152);
    if (!v6)
      return 0;
  }
  SourceLocation = google::protobuf::FileDescriptorTables::GetSourceLocation(*(_QWORD *)(a1 + 144), a2, v6);
  if (!SourceLocation)
    return 0;
  v9 = SourceLocation;
  v10 = SourceLocation + 48;
  if ((*(_DWORD *)(SourceLocation + 48) - 3) >= 2)
    return 0;
  *(_DWORD *)a3 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(SourceLocation + 48, 0);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v10, 1);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v10, 2 * (*(_DWORD *)(v9 + 48) != 3));
  *(_DWORD *)(a3 + 12) = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v10, *(_DWORD *)(v9 + 48) - 1);
  std::string::operator=((std::string *)(a3 + 16), *(const std::string **)(v9 + 96));
  std::string::operator=((std::string *)(a3 + 40), *(const std::string **)(v9 + 104));
  v11 = *(_QWORD *)(v9 + 88);
  if (v11)
    v12 = (const std::string **)(v11 + 8);
  else
    v12 = 0;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<google::protobuf::internal::RepeatedPtrIterator<std::string const>,google::protobuf::internal::RepeatedPtrIterator<std::string const>>(a3 + 64, v12, &v12[*(int *)(v9 + 80)], *(int *)(v9 + 80));
  return 1;
}

void sub_22DC3E47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC3E490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::FieldDescriptor::is_packed(google::protobuf::FieldDescriptor *this)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  google::protobuf::FieldDescriptor *v6;
  uint64_t (*v7)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  _QWORD *v8;
  _QWORD v9[2];

  if (*((_DWORD *)this + 15) != 3)
    return 0;
  v2 = (unint64_t *)*((_QWORD *)this + 6);
  if (v2)
  {
    v6 = this;
    v7 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v3 = atomic_load(v2);
    if (v3 != -1)
    {
      v9[0] = &v7;
      v9[1] = &v6;
      v8 = v9;
      std::__call_once(v2, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  if ((*((_DWORD *)this + 14) - 13) > 0xFFFFFFFB)
    return 0;
  v4 = *((_QWORD *)this + 15);
  if (*(_DWORD *)(*((_QWORD *)this + 5) + 60) == 2)
  {
    if (!v4)
      return 0;
  }
  else if (!v4 || (*(_BYTE *)(v4 + 40) & 2) == 0)
  {
    return 1;
  }
  return *(_BYTE *)(v4 + 76) != 0;
}

void google::protobuf::Descriptor::GetLocationPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  int64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  int v88;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v9 = *(char **)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v9 >= v8)
    {
      v17 = *(char **)a2;
      v18 = (uint64_t)&v9[-*(_QWORD *)a2];
      v19 = v18 >> 2;
      v20 = (v18 >> 2) + 1;
      if (v20 >> 62)
        goto LABEL_95;
      v21 = v8 - (_QWORD)v17;
      if (v21 >> 1 > v20)
        v20 = v21 >> 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 >> 62)
          goto LABEL_96;
        v23 = operator new(4 * v22);
      }
      else
      {
        v23 = 0;
      }
      v52 = &v23[4 * v19];
      v53 = &v23[4 * v22];
      *v52 = 4;
      v7 = (char *)(v52 + 1);
      if (v9 != v17)
      {
        v54 = v9 - v17 - 4;
        if (v54 < 0x2C)
          goto LABEL_99;
        if ((unint64_t)(v9 - &v23[v18]) < 0x20)
          goto LABEL_99;
        v55 = (v54 >> 2) + 1;
        v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
        v57 = &v9[-v56];
        v52 = (_DWORD *)((char *)v52 - v56);
        v58 = &v23[4 * v19 - 16];
        v59 = v9 - 16;
        v60 = v55 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v61 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          *v58 = v61;
          v58 -= 2;
          v59 -= 32;
          v60 -= 8;
        }
        while (v60);
        v9 = v57;
        if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_99:
          do
          {
            v62 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *--v52 = v62;
          }
          while (v9 != v17);
        }
      }
      *(_QWORD *)a2 = v52;
      *(_QWORD *)(a2 + 8) = v7;
      *(_QWORD *)(a2 + 16) = v53;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v9 = 4;
      v7 = v9 + 4;
    }
    *(_QWORD *)(a2 + 8) = v7;
    v63 = *(_QWORD *)(a1 + 24);
    if (v63)
      v64 = (_QWORD *)(v63 + 56);
    else
      v64 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
    v37 = 954437177 * ((unint64_t)(a1 - *v64) >> 4);
    v65 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v7 >= v65)
    {
      v39 = *(char **)a2;
      v66 = (uint64_t)&v7[-*(_QWORD *)a2];
      v67 = v66 >> 2;
      v68 = (v66 >> 2) + 1;
      if (!(v68 >> 62))
      {
        v69 = v65 - (_QWORD)v39;
        if (v69 >> 1 > v68)
          v68 = v69 >> 1;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
          v70 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 >> 62)
            goto LABEL_96;
          v71 = operator new(4 * v70);
          v46 = &v71[4 * v67];
          v47 = &v71[4 * v70];
          *v46 = v37;
          v48 = (uint64_t)(v46 + 1);
          v72 = v7 - v39;
          if (v7 == v39)
            goto LABEL_92;
        }
        else
        {
          v71 = 0;
          v46 = (_DWORD *)(4 * v67);
          v47 = 0;
          *(_DWORD *)(4 * v67) = v37;
          v48 = 4 * v67 + 4;
          v72 = v7 - v39;
          if (v7 == v39)
            goto LABEL_92;
        }
        v73 = v72 - 4;
        if (v73 >= 0x2C)
        {
          if ((unint64_t)(v7 - v71 - v66) >= 0x20)
          {
            v82 = (v73 >> 2) + 1;
            v83 = 4 * (v82 & 0x7FFFFFFFFFFFFFF8);
            v74 = &v7[-v83];
            v46 = (_DWORD *)((char *)v46 - v83);
            v84 = &v71[4 * v67 - 16];
            v85 = v7 - 16;
            v86 = v82 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v87 = *(_OWORD *)v85;
              *(v84 - 1) = *((_OWORD *)v85 - 1);
              *v84 = v87;
              v84 -= 2;
              v85 -= 32;
              v86 -= 8;
            }
            while (v86);
            if (v82 == (v82 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_92;
          }
          else
          {
            v74 = v7;
          }
        }
        else
        {
          v74 = v7;
        }
        do
        {
          v88 = *((_DWORD *)v74 - 1);
          v74 -= 4;
          *--v46 = v88;
        }
        while (v74 != v39);
        goto LABEL_92;
      }
LABEL_95:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
LABEL_67:
    *(_DWORD *)v7 = v37;
    v48 = (uint64_t)(v7 + 4);
    goto LABEL_94;
  }
  google::protobuf::Descriptor::GetLocationPath(v4, a2);
  v6 = *(char **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v6 >= v5)
  {
    v10 = *(char **)a2;
    v11 = (uint64_t)&v6[-*(_QWORD *)a2];
    v12 = v11 >> 2;
    v13 = (v11 >> 2) + 1;
    if (v13 >> 62)
      goto LABEL_95;
    v14 = v5 - (_QWORD)v10;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        goto LABEL_96;
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v24 = &v16[4 * v12];
    v25 = &v16[4 * v15];
    *v24 = 3;
    v7 = (char *)(v24 + 1);
    if (v6 != v10)
    {
      v26 = v6 - v10 - 4;
      if (v26 < 0x2C)
        goto LABEL_100;
      if ((unint64_t)(v6 - v16 - v11) < 0x20)
        goto LABEL_100;
      v27 = (v26 >> 2) + 1;
      v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
      v29 = &v6[-v28];
      v24 = (_DWORD *)((char *)v24 - v28);
      v30 = &v16[4 * v12 - 16];
      v31 = v6 - 16;
      v32 = v27 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *v30 = v33;
        v30 -= 2;
        v31 -= 32;
        v32 -= 8;
      }
      while (v32);
      v6 = v29;
      if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_100:
        do
        {
          v34 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v24 = v34;
        }
        while (v6 != v10);
      }
    }
    *(_QWORD *)a2 = v24;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v25;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v6 = 3;
    v7 = v6 + 4;
  }
  *(_QWORD *)(a2 + 8) = v7;
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
    v36 = (_QWORD *)(v35 + 56);
  else
    v36 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 104);
  v37 = 954437177 * ((unint64_t)(a1 - *v36) >> 4);
  v38 = *(_QWORD *)(a2 + 16);
  if ((unint64_t)v7 < v38)
    goto LABEL_67;
  v39 = *(char **)a2;
  v40 = (uint64_t)&v7[-*(_QWORD *)a2];
  v41 = v40 >> 2;
  v42 = (v40 >> 2) + 1;
  if (v42 >> 62)
    goto LABEL_95;
  v43 = v38 - (_QWORD)v39;
  if (v43 >> 1 > v42)
    v42 = v43 >> 1;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
    v44 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
  {
    if (!(v44 >> 62))
    {
      v45 = operator new(4 * v44);
      v46 = &v45[4 * v41];
      v47 = &v45[4 * v44];
      *v46 = v37;
      v48 = (uint64_t)(v46 + 1);
      v49 = v7 - v39;
      if (v7 == v39)
        goto LABEL_92;
      goto LABEL_49;
    }
LABEL_96:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v45 = 0;
  v46 = (_DWORD *)(4 * v41);
  v47 = 0;
  *(_DWORD *)(4 * v41) = v37;
  v48 = 4 * v41 + 4;
  v49 = v7 - v39;
  if (v7 == v39)
    goto LABEL_92;
LABEL_49:
  v50 = v49 - 4;
  if (v50 < 0x2C)
  {
    v51 = v7;
    goto LABEL_86;
  }
  if ((unint64_t)(v7 - v45 - v40) < 0x20)
  {
    v51 = v7;
    do
    {
LABEL_86:
      v81 = *((_DWORD *)v51 - 1);
      v51 -= 4;
      *--v46 = v81;
    }
    while (v51 != v39);
    goto LABEL_92;
  }
  v75 = (v50 >> 2) + 1;
  v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
  v51 = &v7[-v76];
  v46 = (_DWORD *)((char *)v46 - v76);
  v77 = &v45[4 * v41 - 16];
  v78 = v7 - 16;
  v79 = v75 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v80 = *(_OWORD *)v78;
    *(v77 - 1) = *((_OWORD *)v78 - 1);
    *v77 = v80;
    v77 -= 2;
    v78 -= 32;
    v79 -= 8;
  }
  while (v79);
  if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_86;
LABEL_92:
  *(_QWORD *)a2 = v46;
  *(_QWORD *)(a2 + 8) = v48;
  *(_QWORD *)(a2 + 16) = v47;
  if (v39)
    operator delete(v39);
LABEL_94:
  *(_QWORD *)(a2 + 8) = v48;
}

void google::protobuf::FieldDescriptor::GetLocationPath(uint64_t a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  int64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _OWORD *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  int64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  int v130;

  if (!*(_BYTE *)(a1 + 67))
  {
    google::protobuf::Descriptor::GetLocationPath(*(_QWORD *)(a1 + 80), (uint64_t)a2);
    v9 = a2[1];
    v8 = (unint64_t)a2[2];
    if ((unint64_t)v9 >= v8)
    {
      v20 = *a2;
      v21 = v9 - *a2;
      v22 = v21 >> 2;
      v23 = (v21 >> 2) + 1;
      if (v23 >> 62)
        goto LABEL_148;
      v24 = v8 - (_QWORD)v20;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 62)
          goto LABEL_149;
        v26 = operator new(4 * v25);
      }
      else
      {
        v26 = 0;
      }
      v62 = &v26[4 * v22];
      v63 = &v26[4 * v25];
      *(_DWORD *)v62 = 2;
      v7 = v62 + 4;
      if (v9 != v20)
      {
        v64 = v9 - v20 - 4;
        if (v64 < 0x2C)
          goto LABEL_152;
        if ((unint64_t)(v9 - v26 - v21) < 0x20)
          goto LABEL_152;
        v65 = (v64 >> 2) + 1;
        v66 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
        v67 = &v9[-v66];
        v62 -= v66;
        v68 = &v26[4 * v22 - 16];
        v69 = v9 - 16;
        v70 = v65 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 8;
        }
        while (v70);
        v9 = v67;
        if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_152:
          do
          {
            v72 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v62 - 1) = v72;
            v62 -= 4;
          }
          while (v9 != v20);
        }
      }
      *a2 = v62;
      a2[1] = v7;
      a2[2] = v63;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_DWORD *)v9 = 2;
      v7 = v9 + 4;
    }
    a2[1] = v7;
    if (*(_BYTE *)(a1 + 67))
    {
      v73 = *(_QWORD *)(a1 + 96);
      if (v73)
        v74 = (_QWORD *)(v73 + 80);
      else
        v74 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 128);
    }
    else
    {
      v74 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 40);
    }
    v47 = 678152731 * ((unint64_t)(a1 - *v74) >> 3);
    v75 = (unint64_t)a2[2];
    if ((unint64_t)v7 < v75)
    {
LABEL_81:
      *(_DWORD *)v7 = v47;
      v58 = (uint64_t)(v7 + 4);
      goto LABEL_147;
    }
    v49 = *a2;
    v76 = v7 - *a2;
    v77 = v76 >> 2;
    v78 = (v76 >> 2) + 1;
    if (!(v78 >> 62))
    {
      v79 = v75 - (_QWORD)v49;
      if (v79 >> 1 > v78)
        v78 = v79 >> 1;
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
        v80 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v80 = v78;
      if (v80)
      {
        if (v80 >> 62)
          goto LABEL_149;
        v81 = operator new(4 * v80);
        v56 = &v81[4 * v77];
        v57 = &v81[4 * v80];
        *(_DWORD *)v56 = v47;
        v58 = (uint64_t)(v56 + 4);
        v82 = v7 - v49;
        if (v7 == v49)
          goto LABEL_145;
      }
      else
      {
        v81 = 0;
        v56 = (char *)(4 * v77);
        v57 = 0;
        *(_DWORD *)(4 * v77) = v47;
        v58 = 4 * v77 + 4;
        v82 = v7 - v49;
        if (v7 == v49)
          goto LABEL_145;
      }
      v83 = v82 - 4;
      if (v83 >= 0x2C)
      {
        if ((unint64_t)(v7 - &v81[v76]) >= 0x20)
        {
          v117 = (v83 >> 2) + 1;
          v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
          v84 = &v7[-v118];
          v56 -= v118;
          v119 = &v81[4 * v77 - 16];
          v120 = v7 - 16;
          v121 = v117 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v122 = *(_OWORD *)v120;
            *(v119 - 1) = *((_OWORD *)v120 - 1);
            *v119 = v122;
            v119 -= 2;
            v120 -= 32;
            v121 -= 8;
          }
          while (v121);
          if (v117 == (v117 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_145;
        }
        else
        {
          v84 = v7;
        }
      }
      else
      {
        v84 = v7;
      }
      do
      {
        v123 = *((_DWORD *)v84 - 1);
        v84 -= 4;
        *((_DWORD *)v56 - 1) = v123;
        v56 -= 4;
      }
      while (v84 != v49);
      goto LABEL_145;
    }
LABEL_148:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  v4 = *(_QWORD *)(a1 + 96);
  if (!v4)
  {
    v11 = a2[1];
    v10 = (unint64_t)a2[2];
    if ((unint64_t)v11 >= v10)
    {
      v27 = *a2;
      v28 = v11 - *a2;
      v29 = v28 >> 2;
      v30 = (v28 >> 2) + 1;
      if (v30 >> 62)
        goto LABEL_148;
      v31 = v10 - (_QWORD)v27;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 >> 62)
          goto LABEL_149;
        v33 = operator new(4 * v32);
      }
      else
      {
        v33 = 0;
      }
      v85 = &v33[4 * v29];
      v86 = &v33[4 * v32];
      *(_DWORD *)v85 = 7;
      v12 = v85 + 4;
      if (v11 != v27)
      {
        v87 = v11 - v27 - 4;
        if (v87 < 0x2C)
          goto LABEL_153;
        if ((unint64_t)(v11 - v33 - v28) < 0x20)
          goto LABEL_153;
        v88 = (v87 >> 2) + 1;
        v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
        v90 = &v11[-v89];
        v85 -= v89;
        v91 = &v33[4 * v29 - 16];
        v92 = v11 - 16;
        v93 = v88 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v94 = *(_OWORD *)v92;
          *(v91 - 1) = *((_OWORD *)v92 - 1);
          *v91 = v94;
          v91 -= 2;
          v92 -= 32;
          v93 -= 8;
        }
        while (v93);
        v11 = v90;
        if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_153:
          do
          {
            v95 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v85 - 1) = v95;
            v85 -= 4;
          }
          while (v11 != v27);
        }
      }
      *a2 = v85;
      a2[1] = v12;
      a2[2] = v86;
      if (v27)
      {
        operator delete(v27);
        v96 = *(unsigned __int8 *)(a1 + 67);
        a2[1] = v12;
        if (!v96)
        {
          v97 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 40);
          goto LABEL_114;
        }
LABEL_111:
        v98 = *(_QWORD *)(a1 + 96);
        if (v98)
          v97 = (_QWORD *)(v98 + 80);
        else
          v97 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 128);
LABEL_114:
        v99 = 678152731 * ((unint64_t)(a1 - *v97) >> 3);
        v100 = (unint64_t)a2[2];
        if ((unint64_t)v12 < v100)
        {
          *(_DWORD *)v12 = v99;
          v58 = (uint64_t)(v12 + 4);
          goto LABEL_147;
        }
        v49 = *a2;
        v101 = v12 - *a2;
        v102 = v101 >> 2;
        v103 = (v101 >> 2) + 1;
        if (!(v103 >> 62))
        {
          v104 = v100 - (_QWORD)v49;
          if (v104 >> 1 > v103)
            v103 = v104 >> 1;
          if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
            v105 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v105 = v103;
          if (v105)
          {
            if (v105 >> 62)
              goto LABEL_149;
            v106 = operator new(4 * v105);
            v56 = &v106[4 * v102];
            v57 = &v106[4 * v105];
            *(_DWORD *)v56 = v99;
            v58 = (uint64_t)(v56 + 4);
            v107 = v12 - v49;
            if (v12 == v49)
              goto LABEL_145;
          }
          else
          {
            v106 = 0;
            v56 = (char *)(4 * v102);
            v57 = 0;
            *(_DWORD *)(4 * v102) = v99;
            v58 = 4 * v102 + 4;
            v107 = v12 - v49;
            if (v12 == v49)
              goto LABEL_145;
          }
          v108 = v107 - 4;
          if (v108 >= 0x2C)
          {
            if ((unint64_t)(v12 - v106 - v101) >= 0x20)
            {
              v124 = (v108 >> 2) + 1;
              v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
              v109 = &v12[-v125];
              v56 -= v125;
              v126 = &v106[4 * v102 - 16];
              v127 = v12 - 16;
              v128 = v124 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v129 = *(_OWORD *)v127;
                *(v126 - 1) = *((_OWORD *)v127 - 1);
                *v126 = v129;
                v126 -= 2;
                v127 -= 32;
                v128 -= 8;
              }
              while (v128);
              if (v124 == (v124 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_145;
            }
            else
            {
              v109 = v12;
            }
          }
          else
          {
            v109 = v12;
          }
          do
          {
            v130 = *((_DWORD *)v109 - 1);
            v109 -= 4;
            *((_DWORD *)v56 - 1) = v130;
            v56 -= 4;
          }
          while (v109 != v49);
          goto LABEL_145;
        }
        goto LABEL_148;
      }
    }
    else
    {
      *(_DWORD *)v11 = 7;
      v12 = v11 + 4;
    }
    a2[1] = v12;
    goto LABEL_111;
  }
  google::protobuf::Descriptor::GetLocationPath(v4, (uint64_t)a2);
  v6 = a2[1];
  v5 = (unint64_t)a2[2];
  if ((unint64_t)v6 >= v5)
  {
    v13 = *a2;
    v14 = v6 - *a2;
    v15 = v14 >> 2;
    v16 = (v14 >> 2) + 1;
    if (v16 >> 62)
      goto LABEL_148;
    v17 = v5 - (_QWORD)v13;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        goto LABEL_149;
      v19 = operator new(4 * v18);
    }
    else
    {
      v19 = 0;
    }
    v34 = &v19[4 * v15];
    v35 = &v19[4 * v18];
    *(_DWORD *)v34 = 6;
    v7 = v34 + 4;
    if (v6 != v13)
    {
      v36 = v6 - v13 - 4;
      if (v36 < 0x2C)
        goto LABEL_154;
      if ((unint64_t)(v6 - v19 - v14) < 0x20)
        goto LABEL_154;
      v37 = (v36 >> 2) + 1;
      v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      v39 = &v6[-v38];
      v34 -= v38;
      v40 = &v19[4 * v15 - 16];
      v41 = v6 - 16;
      v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *(_OWORD *)v41;
        *(v40 - 1) = *((_OWORD *)v41 - 1);
        *v40 = v43;
        v40 -= 2;
        v41 -= 32;
        v42 -= 8;
      }
      while (v42);
      v6 = v39;
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_154:
        do
        {
          v44 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v34 - 1) = v44;
          v34 -= 4;
        }
        while (v6 != v13);
      }
    }
    *a2 = v34;
    a2[1] = v7;
    a2[2] = v35;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *(_DWORD *)v6 = 6;
    v7 = v6 + 4;
  }
  a2[1] = v7;
  if (*(_BYTE *)(a1 + 67))
  {
    v45 = *(_QWORD *)(a1 + 96);
    if (v45)
      v46 = (_QWORD *)(v45 + 80);
    else
      v46 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 128);
  }
  else
  {
    v46 = (_QWORD *)(*(_QWORD *)(a1 + 80) + 40);
  }
  v47 = 678152731 * ((unint64_t)(a1 - *v46) >> 3);
  v48 = (unint64_t)a2[2];
  if ((unint64_t)v7 < v48)
    goto LABEL_81;
  v49 = *a2;
  v50 = v7 - *a2;
  v51 = v50 >> 2;
  v52 = (v50 >> 2) + 1;
  if (v52 >> 62)
    goto LABEL_148;
  v53 = v48 - (_QWORD)v49;
  if (v53 >> 1 > v52)
    v52 = v53 >> 1;
  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
    v54 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v54 = v52;
  if (v54)
  {
    if (!(v54 >> 62))
    {
      v55 = operator new(4 * v54);
      v56 = &v55[4 * v51];
      v57 = &v55[4 * v54];
      *(_DWORD *)v56 = v47;
      v58 = (uint64_t)(v56 + 4);
      v59 = v7 - v49;
      if (v7 == v49)
        goto LABEL_145;
      goto LABEL_63;
    }
LABEL_149:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v55 = 0;
  v56 = (char *)(4 * v51);
  v57 = 0;
  *(_DWORD *)(4 * v51) = v47;
  v58 = 4 * v51 + 4;
  v59 = v7 - v49;
  if (v7 == v49)
    goto LABEL_145;
LABEL_63:
  v60 = v59 - 4;
  if (v60 < 0x2C)
  {
    v61 = v7;
    goto LABEL_134;
  }
  if ((unint64_t)(v7 - &v55[v50]) < 0x20)
  {
    v61 = v7;
    do
    {
LABEL_134:
      v116 = *((_DWORD *)v61 - 1);
      v61 -= 4;
      *((_DWORD *)v56 - 1) = v116;
      v56 -= 4;
    }
    while (v61 != v49);
    goto LABEL_145;
  }
  v110 = (v60 >> 2) + 1;
  v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
  v61 = &v7[-v111];
  v56 -= v111;
  v112 = &v55[4 * v51 - 16];
  v113 = v7 - 16;
  v114 = v110 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v115 = *(_OWORD *)v113;
    *(v112 - 1) = *((_OWORD *)v113 - 1);
    *v112 = v115;
    v112 -= 2;
    v113 -= 32;
    v114 -= 8;
  }
  while (v114);
  if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_134;
LABEL_145:
  *a2 = v56;
  a2[1] = (char *)v58;
  a2[2] = v57;
  if (v49)
    operator delete(v49);
LABEL_147:
  a2[1] = (char *)v58;
}

void google::protobuf::OneofDescriptor::GetLocationPath(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;

  google::protobuf::Descriptor::GetLocationPath(*(_QWORD *)(a1 + 16), (uint64_t)a2);
  v5 = a2[1];
  v4 = a2[2];
  v6 = v5;
  if (v5 >= v4)
  {
    v8 = *a2;
    v9 = v5 - *a2;
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      goto LABEL_46;
    v12 = v4 - v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        goto LABEL_47;
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v4 = &v14[4 * v13];
    *(_DWORD *)v15 = 8;
    v7 = v15 + 4;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_50;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_50;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 -= v18;
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v15 - 1) = v23;
          v15 -= 4;
        }
        while (v6 != v8);
      }
    }
    *a2 = v15;
    a2[1] = v7;
    a2[2] = v4;
    if (v8)
    {
      operator delete(v8);
      v4 = a2[2];
    }
  }
  else
  {
    *(_DWORD *)v5 = 8;
    v7 = v5 + 4;
  }
  a2[1] = v7;
  v24 = -1431655765 * ((unint64_t)(a1 - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48)) >> 4);
  if (v7 < v4)
  {
    *(_DWORD *)v7 = v24;
    v25 = (uint64_t)(v7 + 4);
    goto LABEL_45;
  }
  v26 = *a2;
  v27 = v7 - *a2;
  v28 = v27 >> 2;
  v29 = (v27 >> 2) + 1;
  if (v29 >> 62)
LABEL_46:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v30 = v4 - v26;
  if (v30 >> 1 > v29)
    v29 = v30 >> 1;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
    v31 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (!v31)
  {
    v32 = 0;
    v33 = (char *)(4 * v28);
    v34 = 0;
    *(_DWORD *)(4 * v28) = v24;
    v25 = 4 * v28 + 4;
    v35 = v7 - v26;
    if (v7 == v26)
      goto LABEL_43;
    goto LABEL_35;
  }
  if (v31 >> 62)
LABEL_47:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v32 = operator new(4 * v31);
  v33 = &v32[4 * v28];
  v34 = &v32[4 * v31];
  *(_DWORD *)v33 = v24;
  v25 = (uint64_t)(v33 + 4);
  v35 = v7 - v26;
  if (v7 == v26)
    goto LABEL_43;
LABEL_35:
  v36 = v35 - 4;
  if (v36 < 0x2C)
  {
    v37 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - &v32[v27]) < 0x20)
  {
    v37 = v7;
    do
    {
LABEL_42:
      v44 = *((_DWORD *)v37 - 1);
      v37 -= 4;
      *((_DWORD *)v33 - 1) = v44;
      v33 -= 4;
    }
    while (v37 != v26);
    goto LABEL_43;
  }
  v38 = (v36 >> 2) + 1;
  v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
  v37 = &v7[-v39];
  v33 -= v39;
  v40 = &v32[4 * v28 - 16];
  v41 = v7 - 16;
  v42 = v38 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v43 = *(_OWORD *)v41;
    *(v40 - 1) = *((_OWORD *)v41 - 1);
    *v40 = v43;
    v40 -= 2;
    v41 -= 32;
    v42 -= 8;
  }
  while (v42);
  if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_42;
LABEL_43:
  *a2 = v33;
  a2[1] = (char *)v25;
  a2[2] = v34;
  if (v26)
    operator delete(v26);
LABEL_45:
  a2[1] = (char *)v25;
}

void google::protobuf::EnumDescriptor::GetLocationPath(uint64_t a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  int64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  int v88;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v9 = a2[1];
    v8 = (unint64_t)a2[2];
    if ((unint64_t)v9 >= v8)
    {
      v17 = *a2;
      v18 = v9 - *a2;
      v19 = v18 >> 2;
      v20 = (v18 >> 2) + 1;
      if (v20 >> 62)
        goto LABEL_95;
      v21 = v8 - (_QWORD)v17;
      if (v21 >> 1 > v20)
        v20 = v21 >> 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 >> 62)
          goto LABEL_96;
        v23 = operator new(4 * v22);
      }
      else
      {
        v23 = 0;
      }
      v52 = &v23[4 * v19];
      v53 = &v23[4 * v22];
      *(_DWORD *)v52 = 5;
      v7 = v52 + 4;
      if (v9 != v17)
      {
        v54 = v9 - v17 - 4;
        if (v54 < 0x2C)
          goto LABEL_99;
        if ((unint64_t)(v9 - &v23[v18]) < 0x20)
          goto LABEL_99;
        v55 = (v54 >> 2) + 1;
        v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
        v57 = &v9[-v56];
        v52 -= v56;
        v58 = &v23[4 * v19 - 16];
        v59 = v9 - 16;
        v60 = v55 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v61 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          *v58 = v61;
          v58 -= 2;
          v59 -= 32;
          v60 -= 8;
        }
        while (v60);
        v9 = v57;
        if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_99:
          do
          {
            v62 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v52 - 1) = v62;
            v52 -= 4;
          }
          while (v9 != v17);
        }
      }
      *a2 = v52;
      a2[1] = v7;
      a2[2] = v53;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v9 = 5;
      v7 = v9 + 4;
    }
    a2[1] = v7;
    v63 = *(_QWORD *)(a1 + 24);
    if (v63)
      v64 = (_QWORD *)(v63 + 64);
    else
      v64 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 112);
    v37 = -858993459 * ((unint64_t)(a1 - *v64) >> 4);
    v65 = (unint64_t)a2[2];
    if ((unint64_t)v7 >= v65)
    {
      v39 = *a2;
      v66 = v7 - *a2;
      v67 = v66 >> 2;
      v68 = (v66 >> 2) + 1;
      if (!(v68 >> 62))
      {
        v69 = v65 - (_QWORD)v39;
        if (v69 >> 1 > v68)
          v68 = v69 >> 1;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
          v70 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 >> 62)
            goto LABEL_96;
          v71 = operator new(4 * v70);
          v46 = &v71[4 * v67];
          v47 = &v71[4 * v70];
          *(_DWORD *)v46 = v37;
          v48 = (uint64_t)(v46 + 4);
          v72 = v7 - v39;
          if (v7 == v39)
            goto LABEL_92;
        }
        else
        {
          v71 = 0;
          v46 = (char *)(4 * v67);
          v47 = 0;
          *(_DWORD *)(4 * v67) = v37;
          v48 = 4 * v67 + 4;
          v72 = v7 - v39;
          if (v7 == v39)
            goto LABEL_92;
        }
        v73 = v72 - 4;
        if (v73 >= 0x2C)
        {
          if ((unint64_t)(v7 - v71 - v66) >= 0x20)
          {
            v82 = (v73 >> 2) + 1;
            v83 = 4 * (v82 & 0x7FFFFFFFFFFFFFF8);
            v74 = &v7[-v83];
            v46 -= v83;
            v84 = &v71[4 * v67 - 16];
            v85 = v7 - 16;
            v86 = v82 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v87 = *(_OWORD *)v85;
              *(v84 - 1) = *((_OWORD *)v85 - 1);
              *v84 = v87;
              v84 -= 2;
              v85 -= 32;
              v86 -= 8;
            }
            while (v86);
            if (v82 == (v82 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_92;
          }
          else
          {
            v74 = v7;
          }
        }
        else
        {
          v74 = v7;
        }
        do
        {
          v88 = *((_DWORD *)v74 - 1);
          v74 -= 4;
          *((_DWORD *)v46 - 1) = v88;
          v46 -= 4;
        }
        while (v74 != v39);
        goto LABEL_92;
      }
LABEL_95:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
LABEL_67:
    *(_DWORD *)v7 = v37;
    v48 = (uint64_t)(v7 + 4);
    goto LABEL_94;
  }
  google::protobuf::Descriptor::GetLocationPath(v4, (uint64_t)a2);
  v6 = a2[1];
  v5 = (unint64_t)a2[2];
  if ((unint64_t)v6 >= v5)
  {
    v10 = *a2;
    v11 = v6 - *a2;
    v12 = v11 >> 2;
    v13 = (v11 >> 2) + 1;
    if (v13 >> 62)
      goto LABEL_95;
    v14 = v5 - (_QWORD)v10;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        goto LABEL_96;
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v24 = &v16[4 * v12];
    v25 = &v16[4 * v15];
    *(_DWORD *)v24 = 4;
    v7 = v24 + 4;
    if (v6 != v10)
    {
      v26 = v6 - v10 - 4;
      if (v26 < 0x2C)
        goto LABEL_100;
      if ((unint64_t)(v6 - v16 - v11) < 0x20)
        goto LABEL_100;
      v27 = (v26 >> 2) + 1;
      v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
      v29 = &v6[-v28];
      v24 -= v28;
      v30 = &v16[4 * v12 - 16];
      v31 = v6 - 16;
      v32 = v27 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *v30 = v33;
        v30 -= 2;
        v31 -= 32;
        v32 -= 8;
      }
      while (v32);
      v6 = v29;
      if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_100:
        do
        {
          v34 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v24 - 1) = v34;
          v24 -= 4;
        }
        while (v6 != v10);
      }
    }
    *a2 = v24;
    a2[1] = v7;
    a2[2] = v25;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v6 = 4;
    v7 = v6 + 4;
  }
  a2[1] = v7;
  v35 = *(_QWORD *)(a1 + 24);
  if (v35)
    v36 = (_QWORD *)(v35 + 64);
  else
    v36 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 112);
  v37 = -858993459 * ((unint64_t)(a1 - *v36) >> 4);
  v38 = (unint64_t)a2[2];
  if ((unint64_t)v7 < v38)
    goto LABEL_67;
  v39 = *a2;
  v40 = v7 - *a2;
  v41 = v40 >> 2;
  v42 = (v40 >> 2) + 1;
  if (v42 >> 62)
    goto LABEL_95;
  v43 = v38 - (_QWORD)v39;
  if (v43 >> 1 > v42)
    v42 = v43 >> 1;
  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
    v44 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v44 = v42;
  if (v44)
  {
    if (!(v44 >> 62))
    {
      v45 = operator new(4 * v44);
      v46 = &v45[4 * v41];
      v47 = &v45[4 * v44];
      *(_DWORD *)v46 = v37;
      v48 = (uint64_t)(v46 + 4);
      v49 = v7 - v39;
      if (v7 == v39)
        goto LABEL_92;
      goto LABEL_49;
    }
LABEL_96:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v45 = 0;
  v46 = (char *)(4 * v41);
  v47 = 0;
  *(_DWORD *)(4 * v41) = v37;
  v48 = 4 * v41 + 4;
  v49 = v7 - v39;
  if (v7 == v39)
    goto LABEL_92;
LABEL_49:
  v50 = v49 - 4;
  if (v50 < 0x2C)
  {
    v51 = v7;
    goto LABEL_86;
  }
  if ((unint64_t)(v7 - v45 - v40) < 0x20)
  {
    v51 = v7;
    do
    {
LABEL_86:
      v81 = *((_DWORD *)v51 - 1);
      v51 -= 4;
      *((_DWORD *)v46 - 1) = v81;
      v46 -= 4;
    }
    while (v51 != v39);
    goto LABEL_92;
  }
  v75 = (v50 >> 2) + 1;
  v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
  v51 = &v7[-v76];
  v46 -= v76;
  v77 = &v45[4 * v41 - 16];
  v78 = v7 - 16;
  v79 = v75 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v80 = *(_OWORD *)v78;
    *(v77 - 1) = *((_OWORD *)v78 - 1);
    *v77 = v80;
    v77 -= 2;
    v78 -= 32;
    v79 -= 8;
  }
  while (v79);
  if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_86;
LABEL_92:
  *a2 = v46;
  a2[1] = (char *)v48;
  a2[2] = v47;
  if (v39)
    operator delete(v39);
LABEL_94:
  a2[1] = (char *)v48;
}

void google::protobuf::MethodDescriptor::GetLocationPath(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;

  google::protobuf::ServiceDescriptor::GetLocationPath(*(_QWORD *)(a1 + 16), a2);
  v5 = a2[1];
  v4 = a2[2];
  v6 = v5;
  if (v5 >= v4)
  {
    v8 = *a2;
    v9 = v5 - *a2;
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      goto LABEL_46;
    v12 = v4 - v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        goto LABEL_47;
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v4 = &v14[4 * v13];
    *(_DWORD *)v15 = 2;
    v7 = v15 + 4;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_50;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_50;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 -= v18;
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v15 - 1) = v23;
          v15 -= 4;
        }
        while (v6 != v8);
      }
    }
    *a2 = v15;
    a2[1] = v7;
    a2[2] = v4;
    if (v8)
    {
      operator delete(v8);
      v4 = a2[2];
    }
  }
  else
  {
    *(_DWORD *)v5 = 2;
    v7 = v5 + 4;
  }
  a2[1] = v7;
  v24 = -991146299 * ((unint64_t)(a1 - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32)) >> 3);
  if (v7 < v4)
  {
    *(_DWORD *)v7 = v24;
    v25 = (uint64_t)(v7 + 4);
    goto LABEL_45;
  }
  v26 = *a2;
  v27 = v7 - *a2;
  v28 = v27 >> 2;
  v29 = (v27 >> 2) + 1;
  if (v29 >> 62)
LABEL_46:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v30 = v4 - v26;
  if (v30 >> 1 > v29)
    v29 = v30 >> 1;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
    v31 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (!v31)
  {
    v32 = 0;
    v33 = (char *)(4 * v28);
    v34 = 0;
    *(_DWORD *)(4 * v28) = v24;
    v25 = 4 * v28 + 4;
    v35 = v7 - v26;
    if (v7 == v26)
      goto LABEL_43;
    goto LABEL_35;
  }
  if (v31 >> 62)
LABEL_47:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v32 = operator new(4 * v31);
  v33 = &v32[4 * v28];
  v34 = &v32[4 * v31];
  *(_DWORD *)v33 = v24;
  v25 = (uint64_t)(v33 + 4);
  v35 = v7 - v26;
  if (v7 == v26)
    goto LABEL_43;
LABEL_35:
  v36 = v35 - 4;
  if (v36 < 0x2C)
  {
    v37 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - &v32[v27]) < 0x20)
  {
    v37 = v7;
    do
    {
LABEL_42:
      v44 = *((_DWORD *)v37 - 1);
      v37 -= 4;
      *((_DWORD *)v33 - 1) = v44;
      v33 -= 4;
    }
    while (v37 != v26);
    goto LABEL_43;
  }
  v38 = (v36 >> 2) + 1;
  v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
  v37 = &v7[-v39];
  v33 -= v39;
  v40 = &v32[4 * v28 - 16];
  v41 = v7 - 16;
  v42 = v38 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v43 = *(_OWORD *)v41;
    *(v40 - 1) = *((_OWORD *)v41 - 1);
    *v40 = v43;
    v40 -= 2;
    v41 -= 32;
    v42 -= 8;
  }
  while (v42);
  if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_42;
LABEL_43:
  *a2 = v33;
  a2[1] = (char *)v25;
  a2[2] = v34;
  if (v26)
    operator delete(v26);
LABEL_45:
  a2[1] = (char *)v25;
}

void google::protobuf::ServiceDescriptor::GetLocationPath(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;

  v5 = a2[1];
  v4 = a2[2];
  v6 = v5;
  if (v5 >= v4)
  {
    v8 = *a2;
    v9 = v5 - *a2;
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      goto LABEL_46;
    v12 = v4 - v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        goto LABEL_47;
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v4 = &v14[4 * v13];
    *(_DWORD *)v15 = 6;
    v7 = v15 + 4;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_50;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_50;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 -= v18;
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v15 - 1) = v23;
          v15 -= 4;
        }
        while (v6 != v8);
      }
    }
    *a2 = v15;
    a2[1] = v7;
    a2[2] = v4;
    if (v8)
    {
      operator delete(v8);
      v4 = a2[2];
    }
  }
  else
  {
    *(_DWORD *)v5 = 6;
    v7 = v5 + 4;
  }
  a2[1] = v7;
  v24 = -1431655765 * ((unint64_t)(a1 - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120)) >> 4);
  if (v7 < v4)
  {
    *(_DWORD *)v7 = v24;
    v25 = (uint64_t)(v7 + 4);
    goto LABEL_45;
  }
  v26 = *a2;
  v27 = v7 - *a2;
  v28 = v27 >> 2;
  v29 = (v27 >> 2) + 1;
  if (v29 >> 62)
LABEL_46:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v30 = v4 - v26;
  if (v30 >> 1 > v29)
    v29 = v30 >> 1;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
    v31 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (!v31)
  {
    v32 = 0;
    v33 = (char *)(4 * v28);
    v34 = 0;
    *(_DWORD *)(4 * v28) = v24;
    v25 = 4 * v28 + 4;
    v35 = v7 - v26;
    if (v7 == v26)
      goto LABEL_43;
    goto LABEL_35;
  }
  if (v31 >> 62)
LABEL_47:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v32 = operator new(4 * v31);
  v33 = &v32[4 * v28];
  v34 = &v32[4 * v31];
  *(_DWORD *)v33 = v24;
  v25 = (uint64_t)(v33 + 4);
  v35 = v7 - v26;
  if (v7 == v26)
    goto LABEL_43;
LABEL_35:
  v36 = v35 - 4;
  if (v36 < 0x2C)
  {
    v37 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - &v32[v27]) < 0x20)
  {
    v37 = v7;
    do
    {
LABEL_42:
      v44 = *((_DWORD *)v37 - 1);
      v37 -= 4;
      *((_DWORD *)v33 - 1) = v44;
      v33 -= 4;
    }
    while (v37 != v26);
    goto LABEL_43;
  }
  v38 = (v36 >> 2) + 1;
  v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
  v37 = &v7[-v39];
  v33 -= v39;
  v40 = &v32[4 * v28 - 16];
  v41 = v7 - 16;
  v42 = v38 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v43 = *(_OWORD *)v41;
    *(v40 - 1) = *((_OWORD *)v41 - 1);
    *v40 = v43;
    v40 -= 2;
    v41 -= 32;
    v42 -= 8;
  }
  while (v42);
  if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_42;
LABEL_43:
  *a2 = v33;
  a2[1] = (char *)v25;
  a2[2] = v34;
  if (v26)
    operator delete(v26);
LABEL_45:
  a2[1] = (char *)v25;
}

void google::protobuf::EnumValueDescriptor::GetLocationPath(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;

  google::protobuf::EnumDescriptor::GetLocationPath(*(_QWORD *)(a1 + 24), a2);
  v5 = a2[1];
  v4 = a2[2];
  v6 = v5;
  if (v5 >= v4)
  {
    v8 = *a2;
    v9 = v5 - *a2;
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      goto LABEL_46;
    v12 = v4 - v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        goto LABEL_47;
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v4 = &v14[4 * v13];
    *(_DWORD *)v15 = 2;
    v7 = v15 + 4;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 4;
      if (v16 < 0x2C)
        goto LABEL_50;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_50;
      v17 = (v16 >> 2) + 1;
      v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v18];
      v15 -= v18;
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v15 - 1) = v23;
          v15 -= 4;
        }
        while (v6 != v8);
      }
    }
    *a2 = v15;
    a2[1] = v7;
    a2[2] = v4;
    if (v8)
    {
      operator delete(v8);
      v4 = a2[2];
    }
  }
  else
  {
    *(_DWORD *)v5 = 2;
    v7 = v5 + 4;
  }
  a2[1] = v7;
  v24 = -858993459 * ((unint64_t)(a1 - *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48)) >> 3);
  if (v7 < v4)
  {
    *(_DWORD *)v7 = v24;
    v25 = (uint64_t)(v7 + 4);
    goto LABEL_45;
  }
  v26 = *a2;
  v27 = v7 - *a2;
  v28 = v27 >> 2;
  v29 = (v27 >> 2) + 1;
  if (v29 >> 62)
LABEL_46:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v30 = v4 - v26;
  if (v30 >> 1 > v29)
    v29 = v30 >> 1;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
    v31 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (!v31)
  {
    v32 = 0;
    v33 = (char *)(4 * v28);
    v34 = 0;
    *(_DWORD *)(4 * v28) = v24;
    v25 = 4 * v28 + 4;
    v35 = v7 - v26;
    if (v7 == v26)
      goto LABEL_43;
    goto LABEL_35;
  }
  if (v31 >> 62)
LABEL_47:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v32 = operator new(4 * v31);
  v33 = &v32[4 * v28];
  v34 = &v32[4 * v31];
  *(_DWORD *)v33 = v24;
  v25 = (uint64_t)(v33 + 4);
  v35 = v7 - v26;
  if (v7 == v26)
    goto LABEL_43;
LABEL_35:
  v36 = v35 - 4;
  if (v36 < 0x2C)
  {
    v37 = v7;
    goto LABEL_42;
  }
  if ((unint64_t)(v7 - &v32[v27]) < 0x20)
  {
    v37 = v7;
    do
    {
LABEL_42:
      v44 = *((_DWORD *)v37 - 1);
      v37 -= 4;
      *((_DWORD *)v33 - 1) = v44;
      v33 -= 4;
    }
    while (v37 != v26);
    goto LABEL_43;
  }
  v38 = (v36 >> 2) + 1;
  v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
  v37 = &v7[-v39];
  v33 -= v39;
  v40 = &v32[4 * v28 - 16];
  v41 = v7 - 16;
  v42 = v38 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v43 = *(_OWORD *)v41;
    *(v40 - 1) = *((_OWORD *)v41 - 1);
    *v40 = v43;
    v40 -= 2;
    v41 -= 32;
    v42 -= 8;
  }
  while (v42);
  if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_42;
LABEL_43:
  *a2 = v33;
  a2[1] = (char *)v25;
  a2[2] = v34;
  if (v26)
    operator delete(v26);
LABEL_45:
  a2[1] = (char *)v25;
}

google::protobuf::FileDescriptor *google::protobuf::DescriptorBuilder::BuildFile(google::protobuf::DescriptorBuilder *this, const std::string **a2)
{
  const char *v4;
  _QWORD *v5;
  const char *v6;
  uint64_t **v7;
  google::protobuf::FileDescriptor *v8;
  unsigned __int8 v9;
  size_t v10;
  unint64_t v11;
  int v12;
  void **v13;
  uint64_t v14;
  void **p_s1;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  std::string *v24;
  char *v25;
  const std::string *v26;
  std::string::size_type size;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  const std::string *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int128 v39;
  std::string *v40;
  int i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  google::protobuf::DescriptorPool::Tables *v53;
  void *__p[2];
  unsigned __int8 v56;
  void *__s1;
  size_t __n;
  unsigned __int8 v59;
  const char *v60[28];

  v4 = (char *)this + 56;
  std::string::operator=((std::string *)((char *)this + 56), a2[22]);
  v5 = (_QWORD *)(*((_QWORD *)this + 1) + 344);
  if (*((char *)this + 79) >= 0)
    v6 = v4;
  else
    v6 = (const char *)*((_QWORD *)this + 7);
  v60[0] = v6;
  v7 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v5, v60);
  if (v7)
  {
    v8 = (google::protobuf::FileDescriptor *)v7[3];
    if (v8)
    {
      google::protobuf::FileDescriptorProto::FileDescriptorProto((google::protobuf::FileDescriptorProto *)v60, 0);
      google::protobuf::FileDescriptor::CopyTo(v8, (google::protobuf::FileDescriptorProto *)v60);
      if (*((_DWORD *)v8 + 15) == 2 && ((_BYTE)a2[2] & 4) != 0)
        google::protobuf::FileDescriptorProto::set_syntax((google::protobuf::FileDescriptorProto *)v60, "proto2");
      google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)v60, (uint64_t)&__s1);
      google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)a2, (uint64_t)__p);
      v9 = v59;
      if ((v59 & 0x80u) == 0)
        v10 = v59;
      else
        v10 = __n;
      v11 = v56;
      v12 = (char)v56;
      if ((v56 & 0x80u) != 0)
        v11 = (unint64_t)__p[1];
      if (v10 != v11)
      {
        v22 = 0;
        if (((char)v56 & 0x80000000) == 0)
          goto LABEL_31;
        goto LABEL_35;
      }
      if ((v56 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((char)v59 < 0)
      {
        v22 = memcmp(__s1, v13, __n) == 0;
      }
      else
      {
        if (!v59)
        {
          v22 = 1;
          if (((char)v56 & 0x80000000) == 0)
          {
LABEL_31:
            if ((v9 & 0x80) == 0)
              goto LABEL_32;
            goto LABEL_36;
          }
LABEL_35:
          operator delete(__p[0]);
          if ((v59 & 0x80) == 0)
          {
LABEL_32:
            google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)v60);
            if (v22)
              return v8;
            goto LABEL_37;
          }
LABEL_36:
          operator delete(__s1);
          google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)v60);
          if (v22)
            return v8;
          goto LABEL_37;
        }
        v14 = v59 - 1;
        p_s1 = &__s1;
        do
        {
          v17 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v16 = v17;
          v19 = *(unsigned __int8 *)v13;
          v13 = (void **)((char *)v13 + 1);
          v18 = v19;
          v21 = v14-- != 0;
          v22 = v16 == v18;
        }
        while (v16 == v18 && v21);
      }
      if ((v12 & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_35;
    }
  }
LABEL_37:
  v23 = *((_QWORD *)this + 1);
  v25 = *(char **)v23;
  v24 = *(std::string **)(v23 + 8);
  if (v24 != *(std::string **)v23)
  {
    v26 = a2[22];
    if ((v26->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    else
      size = v26->__r_.__value_.__l.__size_;
    if ((unint64_t)(((uint64_t)v24 - *(_QWORD *)v23) / 24) <= 1)
      v28 = 1;
    else
      v28 = ((uint64_t)v24 - *(_QWORD *)v23) / 24;
    v29 = 0;
    if ((*((_BYTE *)&v26->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      while (1)
      {
        v34 = &v25[24 * v29];
        v35 = v34[23];
        if ((v35 & 0x80u) == 0)
          v36 = v34[23];
        else
          v36 = *((_QWORD *)v34 + 1);
        if (v36 == size)
        {
          v37 = (unsigned __int8 *)v26->__r_.__value_.__r.__words[0];
          if ((v35 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v34, v37, *((_QWORD *)v34 + 1)))
              goto LABEL_68;
          }
          else
          {
            if (!v34[23])
              goto LABEL_68;
            while (*v34 == *v37)
            {
              ++v34;
              ++v37;
              if (!--v35)
                goto LABEL_68;
            }
          }
        }
        if (++v29 == v28)
          goto LABEL_69;
      }
    }
    do
    {
      v30 = &v25[24 * v29];
      v31 = v30[23];
      if ((v31 & 0x80u) == 0)
        v32 = v30[23];
      else
        v32 = *((_QWORD *)v30 + 1);
      if (v32 == size)
      {
        if ((v31 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v30, v26, *((_QWORD *)v30 + 1)))
            goto LABEL_68;
        }
        else
        {
          if (!v30[23])
          {
LABEL_68:
            google::protobuf::DescriptorBuilder::AddRecursiveImportError(this, (const google::protobuf::FileDescriptorProto *)a2, v29);
            return 0;
          }
          v33 = v26;
          while (*v30 == v33->__r_.__value_.__s.__data_[0])
          {
            ++v30;
            v33 = (const std::string *)((char *)v33 + 1);
            if (!--v31)
              goto LABEL_68;
          }
        }
      }
      ++v29;
    }
    while (v29 != v28);
  }
LABEL_69:
  if (!*(_BYTE *)(*(_QWORD *)this + 41) && *(_QWORD *)(*(_QWORD *)this + 8))
  {
    v38 = (uint64_t)a2[22];
    if ((unint64_t)v24 >= *(_QWORD *)(v23 + 16))
    {
      v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v23, v38);
    }
    else
    {
      if (*(char *)(v38 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v38, *(_QWORD *)(v38 + 8));
      }
      else
      {
        v39 = *(_OWORD *)v38;
        v24->__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 16);
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v39;
      }
      v40 = v24 + 1;
      *(_QWORD *)(v23 + 8) = v24 + 1;
    }
    *(_QWORD *)(v23 + 8) = v40;
    if (*((int *)a2 + 8) >= 1)
    {
      for (i = 0; i < *((_DWORD *)a2 + 8); ++i)
      {
        v43 = *((_QWORD *)this + 1);
        v44 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)(a2 + 3), i);
        if (*(char *)(v44 + 23) >= 0)
          v45 = (const char *)v44;
        else
          v45 = *(const char **)v44;
        v60[0] = v45;
        v46 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>((_QWORD *)(v43 + 344), v60);
        if (v46 && v46[3])
          continue;
        v47 = *(_QWORD *)this;
        v48 = *(_QWORD *)(*(_QWORD *)this + 24);
        if (v48)
        {
          v49 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)(a2 + 3), i);
          if (google::protobuf::DescriptorPool::FindFileByName(v48, v49))
            continue;
          v47 = *(_QWORD *)this;
        }
        v42 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)(a2 + 3), i);
        google::protobuf::DescriptorPool::TryFindFileInFallbackDatabase(v47, v42);
      }
    }
    v50 = *((_QWORD *)this + 1);
    v51 = *(_QWORD *)(v50 + 8);
    v52 = (void **)(v51 - 24);
    v23 = v50;
    if (*(char *)(v51 - 1) < 0)
    {
      operator delete(*v52);
      v23 = *((_QWORD *)this + 1);
    }
    *(_QWORD *)(v50 + 8) = v52;
  }
  google::protobuf::DescriptorPool::Tables::AddCheckpoint((google::protobuf::DescriptorPool::Tables *)v23);
  v8 = google::protobuf::DescriptorBuilder::BuildFileImpl(this, (const google::protobuf::FileDescriptorProto *)a2);
  google::protobuf::FileDescriptorTables::FinalizeTables(*((_QWORD *)this + 11));
  v53 = (google::protobuf::DescriptorPool::Tables *)*((_QWORD *)this + 1);
  if (v8)
  {
    google::protobuf::DescriptorPool::Tables::ClearLastCheckpoint(v53);
    *((_BYTE *)v8 + 65) = 1;
  }
  else
  {
    google::protobuf::DescriptorPool::Tables::RollbackToLastCheckpoint(v53);
  }
  return v8;
}

void sub_22DC40754(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22DC4075C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)&a18);
    _Unwind_Resume(a1);
  }
  google::protobuf::FileDescriptorProto::~FileDescriptorProto((google::protobuf::FileDescriptorProto *)&a18);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::~DescriptorBuilder(void **this)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;

  if (*((char *)this + 199) < 0)
  {
    operator delete(this[22]);
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*((char *)this + 175) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[19]);
LABEL_3:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(this + 15), this[16]);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(this + 12), this[13]);
  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    v2 = (char *)this[3];
    if (!v2)
      return;
    goto LABEL_9;
  }
  operator delete(this[7]);
  v2 = (char *)this[3];
  if (v2)
  {
LABEL_9:
    v3 = (char *)this[4];
    v4 = v2;
    if (v3 == v2)
    {
LABEL_20:
      this[4] = v2;
      operator delete(v4);
      return;
    }
    while (1)
    {
      v5 = (void *)*((_QWORD *)v3 - 5);
      if (v5)
      {
        *((_QWORD *)v3 - 4) = v5;
        operator delete(v5);
      }
      if (*(v3 - 41) < 0)
      {
        operator delete(*((void **)v3 - 8));
        if (*(v3 - 65) < 0)
LABEL_18:
          operator delete(*((void **)v3 - 11));
      }
      else if (*(v3 - 65) < 0)
      {
        goto LABEL_18;
      }
      v3 -= 88;
      if (v3 == v2)
      {
        v4 = (char *)this[3];
        goto LABEL_20;
      }
    }
  }
}

void google::protobuf::DescriptorBuilder::AddError(uint64_t a1, const std::string::value_type *a2, uint64_t a3, uint64_t a4, const std::string::value_type *a5)
{
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  unsigned int *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  unsigned int *v15;
  char v16;
  std::string v17[2];

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t, const std::string::value_type *, uint64_t, uint64_t, const std::string::value_type *))(*(_QWORD *)v8 + 16))(v8, a1 + 56, a2, a3, a4, a5);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 3635);
      v9 = google::protobuf::internal::LogMessage::operator<<(v17, "Invalid proto descriptor for file \"");
      v10 = google::protobuf::internal::LogMessage::operator<<(v9, (const std::string::value_type *)(a1 + 56));
      v11 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v10, "\":");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, v11);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
    }
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 3638);
    v12 = google::protobuf::internal::LogMessage::operator<<(v17, "  ");
    v13 = google::protobuf::internal::LogMessage::operator<<(v12, a2);
    v14 = google::protobuf::internal::LogMessage::operator<<(v13, ": ");
    v15 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v14, a5);
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, v15);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  *(_BYTE *)(a1 + 48) = 1;
}

void sub_22DC409BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC409D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC409E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC409F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::AddError(uint64_t a1, const std::string::value_type *a2, uint64_t a3, uint64_t a4, char *__s)
{
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  void *__dst[2];
  unint64_t v16;

  v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v16 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_8;
  }
  HIBYTE(v16) = v10;
  v12 = __dst;
  if (v10)
LABEL_8:
    memcpy(v12, __s, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, a2, a3, a4, (const std::string::value_type *)__dst);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
}

void sub_22DC40AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AddNotDefinedError(uint64_t a1, const std::string::value_type *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  int v27;
  std::string *v28;
  __int128 v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  int v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  void *v44;
  std::string *v45;
  __int128 v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  __int128 v52;
  std::string::size_type v53;

  if (*(_QWORD *)(a1 + 144))
  {
    std::operator+<char>();
    v10 = std::string::append(&v47, "\" seems to be defined in \"");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = **(_QWORD **)(a1 + 144);
    v13 = *(char *)(v12 + 23);
    if (v13 >= 0)
      v14 = **(const std::string::value_type ***)(a1 + 144);
    else
      v14 = *(const std::string::value_type **)v12;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v12 + 23);
    else
      v15 = *(_QWORD *)(v12 + 8);
    v16 = std::string::append(&v48, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v49, "\", which is not imported by \"");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 79);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 56);
    else
      v21 = *(const std::string::value_type **)(a1 + 56);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 79);
    else
      v22 = *(_QWORD *)(a1 + 64);
    v23 = std::string::append(&v50, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v51, "\".  To use it here, please add the necessary import.");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v53 = v25->__r_.__value_.__r.__words[2];
    v52 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError(a1, a2, a3, a4, (const std::string::value_type *)&v52);
    if (SHIBYTE(v53) < 0)
    {
      operator delete((void *)v52);
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_16:
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_17;
        goto LABEL_48;
      }
    }
    else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v50.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_20:
        LOBYTE(v27) = *(_BYTE *)(a1 + 199);
        goto LABEL_23;
      }
LABEL_51:
      operator delete(v47.__r_.__value_.__l.__data_);
      goto LABEL_20;
    }
LABEL_50:
    operator delete(v48.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
  v27 = *(char *)(a1 + 199);
  if (v27 < 0)
  {
    if (*(_QWORD *)(a1 + 184))
    {
LABEL_23:
      if ((v27 & 0x80) != 0)
      {
        if (!*(_QWORD *)(a1 + 184))
          return;
      }
      else if (!(_BYTE)v27)
      {
        return;
      }
      std::operator+<char>();
      v28 = std::string::append(&v47, "\" is resolved to \"");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = *(char *)(a1 + 199);
      if (v30 >= 0)
        v31 = (const std::string::value_type *)(a1 + 176);
      else
        v31 = *(const std::string::value_type **)(a1 + 176);
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(a1 + 199);
      else
        v32 = *(_QWORD *)(a1 + 184);
      v33 = std::string::append(&v48, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v49, "\", which is not defined. The innermost scope is searched first in name resolution. Consider using a leading '.'(i.e., \".");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = *(char *)(a5 + 23);
      if (v37 >= 0)
        v38 = (const std::string::value_type *)a5;
      else
        v38 = *(const std::string::value_type **)a5;
      if (v37 >= 0)
        v39 = *(unsigned __int8 *)(a5 + 23);
      else
        v39 = *(_QWORD *)(a5 + 8);
      v40 = std::string::append(&v50, v38, v39);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      v42 = std::string::append(&v51, "\") to start from the outermost scope.");
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v53 = v42->__r_.__value_.__r.__words[2];
      v52 = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::DescriptorBuilder::AddError(a1, a2, a3, a4, (const std::string::value_type *)&v52);
      if (SHIBYTE(v53) < 0)
      {
        operator delete((void *)v52);
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_41:
          if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_42;
          goto LABEL_54;
        }
      }
      else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_41;
      }
      operator delete(v51.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_42:
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_43;
        goto LABEL_55;
      }
LABEL_54:
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_43:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_44;
        goto LABEL_56;
      }
LABEL_55:
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_44:
        if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
LABEL_57:
        v44 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_63:
        operator delete(v44);
        return;
      }
LABEL_56:
      operator delete(v48.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_57;
    }
  }
  else if (*(_BYTE *)(a1 + 199))
  {
    goto LABEL_23;
  }
  std::operator+<char>();
  v45 = std::string::append(&v51, "\" is not defined.");
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v53 = v45->__r_.__value_.__r.__words[2];
  v52 = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, a2, a3, a4, (const std::string::value_type *)&v52);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    v44 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_63;
  }
}

void sub_22DC40F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DC410C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0)
    JUMPOUT(0x22DC410C0);
  JUMPOUT(0x22DC410B8);
}

void google::protobuf::DescriptorBuilder::AddWarning(uint64_t a1, const std::string::value_type *a2, uint64_t a3, uint64_t a4, const std::string::value_type *a5)
{
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  unsigned int *v13;
  char v14;
  std::string v15[2];

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t, const std::string::value_type *, uint64_t, uint64_t, const std::string::value_type *))(*(_QWORD *)v8 + 24))(v8, a1 + 56, a2, a3, a4, a5);
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 3689);
    v9 = google::protobuf::internal::LogMessage::operator<<(v15, (const std::string::value_type *)(a1 + 56));
    v10 = google::protobuf::internal::LogMessage::operator<<(v9, " ");
    v11 = google::protobuf::internal::LogMessage::operator<<(v10, a2);
    v12 = google::protobuf::internal::LogMessage::operator<<(v11, ": ");
    v13 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v12, a5);
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, v13);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
}

void sub_22DC411A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC411B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::DescriptorBuilder::RecordPublicDependencies(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];

  if (a2)
  {
    v3 = result;
    v5 = (uint64_t **)(result + 13);
    v4 = (uint64_t *)result[13];
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v4;
          v7 = v4[4];
          if (v7 <= a2)
            break;
          v4 = *v6;
          v5 = v6;
          if (!*v6)
            goto LABEL_9;
        }
        if (v7 >= a2)
          break;
        v4 = v6[1];
        if (!v4)
        {
          v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v6 = (uint64_t **)(result + 13);
LABEL_9:
      v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = a2;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = (uint64_t)v6;
      *v5 = v8;
      v9 = *(_QWORD *)v3[12];
      if (v9)
      {
        v3[12] = v9;
        v10 = *v5;
      }
      else
      {
        v10 = v8;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[13], v10);
      ++v3[14];
      if (*(int *)(a2 + 36) >= 1)
      {
        v11 = 0;
        do
        {
          v12 = *(int *)(*(_QWORD *)(a2 + 88) + 4 * v11);
          v13 = *(unint64_t **)(a2 + 24);
          if (v13)
          {
            v15 = a2;
            v14 = atomic_load(v13);
            if (v14 != -1)
            {
              v17[0] = google::protobuf::FileDescriptor::DependenciesOnceInit;
              v17[1] = &v15;
              v16 = v17;
              std::__call_once(v13, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FileDescriptor const*),google::protobuf::FileDescriptor const*&&>>);
            }
          }
          result = (uint64_t *)google::protobuf::DescriptorBuilder::RecordPublicDependencies((google::protobuf::DescriptorBuilder *)v3, *(const google::protobuf::FileDescriptor **)(*(_QWORD *)(a2 + 72) + 8 * v12));
          ++v11;
        }
        while (v11 < *(int *)(a2 + 36));
      }
    }
  }
  return result;
}

unint64_t google::protobuf::DescriptorBuilder::FindSymbolNotEnforcingDepsHelper(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  std::mutex *v8;
  char v9;
  _QWORD *v10;
  const char *v11;
  uint64_t **v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t SymbolNotEnforcingDepsHelper;
  _QWORD *v17;
  const char *v18;
  uint64_t **v19;
  const char *v21;

  if (*a1 == a2)
  {
    v8 = 0;
  }
  else
  {
    v8 = *(std::mutex **)a2;
    if (*(_QWORD *)a2)
    {
      std::mutex::lock(*(std::mutex **)a2);
      v9 = 0;
      goto LABEL_6;
    }
  }
  v9 = 1;
LABEL_6:
  v10 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 304);
  if (*(char *)(a3 + 23) >= 0)
    v11 = (const char *)a3;
  else
    v11 = *(const char **)a3;
  v21 = v11;
  v12 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v10, &v21);
  if (v12)
  {
    LODWORD(v14) = *((_DWORD *)v12 + 6);
    v13 = *((unsigned int *)v12 + 7);
    if ((_DWORD)v14)
      goto LABEL_25;
    v15 = *(_QWORD *)(a2 + 24);
    if (v15)
    {
LABEL_12:
      SymbolNotEnforcingDepsHelper = google::protobuf::DescriptorBuilder::FindSymbolNotEnforcingDepsHelper(a1, v15, a3, 1);
      v13 = HIDWORD(SymbolNotEnforcingDepsHelper);
      LODWORD(v14) = SymbolNotEnforcingDepsHelper;
      if ((_DWORD)SymbolNotEnforcingDepsHelper)
        goto LABEL_25;
      goto LABEL_16;
    }
  }
  else
  {
    v13 = 0;
    v15 = *(_QWORD *)(a2 + 24);
    if (v15)
      goto LABEL_12;
  }
  LODWORD(v14) = 0;
LABEL_16:
  if (a4)
  {
    if (google::protobuf::DescriptorPool::TryFindSymbolInFallbackDatabase((google::protobuf::DescriptorPool *)a2, a3))
    {
      v17 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 304);
      if (*(char *)(a3 + 23) >= 0)
        v18 = (const char *)a3;
      else
        v18 = *(const char **)a3;
      v21 = v18;
      v19 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v17, &v21);
      if (v19)
      {
        v14 = (unint64_t)v19[3];
        v13 = HIDWORD(v14);
        if ((v9 & 1) != 0)
          return v14 | (v13 << 32);
      }
      else
      {
        LODWORD(v14) = 0;
        v13 = 0;
        if ((v9 & 1) != 0)
          return v14 | (v13 << 32);
      }
      goto LABEL_26;
    }
    LODWORD(v14) = 0;
  }
LABEL_25:
  if ((v9 & 1) == 0)
LABEL_26:
    std::mutex::unlock(v8);
  return v14 | (v13 << 32);
}

void sub_22DC4148C(_Unwind_Exception *exception_object)
{
  std::mutex *v1;
  char v2;

  if ((v2 & 1) == 0)
    std::mutex::unlock(v1);
  _Unwind_Resume(exception_object);
}

unint64_t google::protobuf::DescriptorBuilder::FindSymbol(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  unint64_t SymbolNotEnforcingDepsHelper;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string::size_type size;
  unint64_t v29;
  size_t v30;
  _QWORD *v31;
  std::string *v32;
  int v33;
  BOOL v34;
  std::string::size_type v35;
  _QWORD *v36;
  std::string *v37;
  uint64_t v38;
  _QWORD *v39;
  size_t v40;
  std::string::size_type v41;
  size_t v42;
  size_t v43;
  _QWORD *v44;
  int v45;
  BOOL v46;
  std::string::size_type v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v51;
  std::string::size_type v52;
  std::string *__s2;
  std::string *__str;

  SymbolNotEnforcingDepsHelper = google::protobuf::DescriptorBuilder::FindSymbolNotEnforcingDepsHelper((_QWORD *)a1, *(_QWORD *)a1, a2, a3);
  v7 = v5;
  v8 = v5;
  switch((int)SymbolNotEnforcingDepsHelper)
  {
    case 1:
    case 4:
    case 6:
      v8 = (_QWORD *)v5[2];
      if (v8 != *(_QWORD **)(a1 + 80))
        goto LABEL_8;
      goto LABEL_18;
    case 2:
      v8 = (_QWORD *)v5[5];
      if (v8 == *(_QWORD **)(a1 + 80))
        goto LABEL_18;
      goto LABEL_8;
    case 3:
    case 7:
      v8 = *(_QWORD **)(v5[2] + 16);
      if (v8 == *(_QWORD **)(a1 + 80))
        goto LABEL_18;
      goto LABEL_8;
    case 5:
      v8 = *(_QWORD **)(v5[3] + 16);
      if (v8 == *(_QWORD **)(a1 + 80))
        goto LABEL_18;
      goto LABEL_8;
    case 8:
      goto LABEL_7;
    default:
      v8 = 0;
LABEL_7:
      if (v8 == *(_QWORD **)(a1 + 80))
        goto LABEL_18;
LABEL_8:
      v9 = *(_QWORD **)(a1 + 104);
      if (!v9)
        goto LABEL_38;
      break;
  }
  while (1)
  {
    v10 = v9[4];
    if ((unint64_t)v8 < v10)
      goto LABEL_11;
    if (v10 >= (unint64_t)v8)
      break;
    ++v9;
LABEL_11:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_38;
  }
LABEL_18:
  v11 = *(uint64_t **)(a1 + 128);
  if (v11)
  {
    v12 = (uint64_t *)(a1 + 128);
    v13 = *(_QWORD **)(a1 + 128);
    do
    {
      v14 = v13[4];
      v15 = v14 >= (unint64_t)v8;
      if (v14 >= (unint64_t)v8)
        v16 = v13;
      else
        v16 = v13 + 1;
      if (v15)
        v12 = v13;
      v13 = (_QWORD *)*v16;
    }
    while (*v16);
    if (v12 != (uint64_t *)(a1 + 128) && (unint64_t)v8 >= v12[4])
    {
      v17 = (uint64_t *)v12[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        v19 = v12;
        do
        {
          v18 = (uint64_t *)v19[2];
          v34 = *v18 == (_QWORD)v19;
          v19 = v18;
        }
        while (!v34);
      }
      if (*(uint64_t **)(a1 + 120) == v12)
        *(_QWORD *)(a1 + 120) = v18;
      --*(_QWORD *)(a1 + 136);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v12);
      operator delete(v12);
    }
  }
LABEL_38:
  if (!(_DWORD)SymbolNotEnforcingDepsHelper || !*(_BYTE *)(*(_QWORD *)a1 + 40))
    return SymbolNotEnforcingDepsHelper;
  v20 = v7;
  switch((int)SymbolNotEnforcingDepsHelper)
  {
    case 1:
    case 4:
    case 6:
      v20 = (_QWORD *)v7[2];
      v21 = *(_QWORD **)(a1 + 80);
      if (v20 == v21)
        return SymbolNotEnforcingDepsHelper;
      goto LABEL_47;
    case 2:
      v20 = (_QWORD *)v7[5];
      v21 = *(_QWORD **)(a1 + 80);
      if (v20 == v21)
        return SymbolNotEnforcingDepsHelper;
      goto LABEL_47;
    case 3:
    case 7:
      v20 = *(_QWORD **)(v7[2] + 16);
      v21 = *(_QWORD **)(a1 + 80);
      if (v20 == v21)
        return SymbolNotEnforcingDepsHelper;
      goto LABEL_47;
    case 5:
      v20 = *(_QWORD **)(v7[3] + 16);
      v21 = *(_QWORD **)(a1 + 80);
      if (v20 == v21)
        return SymbolNotEnforcingDepsHelper;
      goto LABEL_47;
    case 8:
      goto LABEL_46;
    default:
      v20 = 0;
LABEL_46:
      v21 = *(_QWORD **)(a1 + 80);
      if (v20 == v21)
        return SymbolNotEnforcingDepsHelper;
LABEL_47:
      v23 = (_QWORD *)(a1 + 104);
      v22 = *(_QWORD **)(a1 + 104);
      if (!v22)
        goto LABEL_48;
      break;
  }
  do
  {
    v29 = v22[4];
    if ((unint64_t)v20 >= v29)
    {
      if (v29 >= (unint64_t)v20)
        return SymbolNotEnforcingDepsHelper;
      ++v22;
    }
    v22 = (_QWORD *)*v22;
  }
  while (v22);
LABEL_48:
  __str = (std::string *)a2;
  v51 = SymbolNotEnforcingDepsHelper;
  if ((_DWORD)SymbolNotEnforcingDepsHelper != 8)
    goto LABEL_134;
  v24 = (_QWORD *)v21[1];
  v25 = *((unsigned __int8 *)v24 + 23);
  if ((v25 & 0x80u) == 0)
    v26 = *((unsigned __int8 *)v24 + 23);
  else
    v26 = v24[1];
  v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (v26 < size)
      goto LABEL_91;
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v26 < v27)
      goto LABEL_91;
  }
  if ((v25 & 0x80) == 0)
  {
    if (size != -1)
    {
      if (v25 >= size)
        v30 = size;
      else
        v30 = *((unsigned __int8 *)v24 + 23);
      v31 = (_QWORD *)v21[1];
      goto LABEL_75;
    }
LABEL_137:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (size == -1)
    goto LABEL_137;
  if (v24[1] >= size)
    v30 = size;
  else
    v30 = v24[1];
  v31 = (_QWORD *)*v24;
LABEL_75:
  if ((v27 & 0x80u) == 0)
    v32 = __str;
  else
    v32 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v33 = memcmp(v31, v32, v30);
  v34 = v30 == size && v33 == 0;
  v23 = (_QWORD *)(a1 + 104);
  if (v34)
  {
    if ((v27 & 0x80) != 0)
    {
      v35 = __str->__r_.__value_.__l.__size_;
      if (v26 != v35)
        goto LABEL_87;
    }
    else
    {
      v35 = v27;
      if (v26 != v27)
      {
LABEL_87:
        if ((v25 & 0x80) != 0)
          v24 = (_QWORD *)*v24;
        if (*((_BYTE *)v24 + v35) != 46)
          goto LABEL_91;
      }
    }
    return v51;
  }
LABEL_91:
  v36 = *(_QWORD **)(a1 + 96);
  if (v36 != v23)
  {
    v52 = __str->__r_.__value_.__l.__size_;
    if ((v27 & 0x80u) == 0)
      v37 = __str;
    else
      v37 = (std::string *)__str->__r_.__value_.__r.__words[0];
    __s2 = v37;
    do
    {
      v38 = v36[4];
      if (v38)
      {
        v39 = *(_QWORD **)(v38 + 8);
        v40 = *((unsigned __int8 *)v39 + 23);
        if ((v40 & 0x80u) == 0)
          v41 = *((unsigned __int8 *)v39 + 23);
        else
          v41 = v39[1];
        if ((v27 & 0x80) != 0)
        {
          v42 = v52;
          if (v41 < v52)
            goto LABEL_128;
        }
        else
        {
          v42 = v27;
          if (v41 < v27)
            goto LABEL_128;
        }
        if ((v40 & 0x80) != 0)
        {
          if (v42 == -1)
LABEL_136:
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v39[1] >= v42)
            v43 = v42;
          else
            v43 = v39[1];
          v44 = (_QWORD *)*v39;
        }
        else
        {
          if (v42 == -1)
            goto LABEL_136;
          if (v40 >= v42)
            v43 = v42;
          else
            v43 = *((unsigned __int8 *)v39 + 23);
          v44 = *(_QWORD **)(v38 + 8);
        }
        v45 = memcmp(v44, __s2, v43);
        v46 = v43 == v42 && v45 == 0;
        v23 = (_QWORD *)(a1 + 104);
        if (v46)
        {
          if ((v27 & 0x80) != 0)
          {
            v47 = v52;
            if (v41 == v52)
              return v51;
          }
          else
          {
            v47 = v27;
            if (v41 == v27)
              return v51;
          }
          if ((v40 & 0x80) != 0)
            v39 = (_QWORD *)*v39;
          if (*((_BYTE *)v39 + v47) == 46)
            return v51;
        }
      }
LABEL_128:
      v48 = (_QWORD *)v36[1];
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (_QWORD *)v36[2];
          v34 = *v49 == (_QWORD)v36;
          v36 = v49;
        }
        while (!v34);
      }
      v36 = v49;
    }
    while (v49 != v23);
  }
LABEL_134:
  *(_QWORD *)(a1 + 144) = v20;
  std::string::operator=((std::string *)(a1 + 152), __str);
  return 0;
}

unint64_t google::protobuf::DescriptorBuilder::LookupSymbolNoPlaceholder(uint64_t a1, std::string *this, uint64_t a3, int a4, int a5)
{
  std::string *v8;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v15;
  int v16;
  std::string *v17;
  std::string::size_type v18;
  void *p_str;
  uint64_t v20;
  uint64_t v21;
  unint64_t Symbol;
  unsigned int v23;
  std::string::size_type v24;
  std::string::size_type size;
  std::string *p_dst;
  std::string::size_type v27;
  unint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  std::string __str;
  std::string __dst;

  v8 = this;
  *(_QWORD *)(a1 + 144) = 0;
  if (*(char *)(a1 + 199) < 0)
  {
    **(_BYTE **)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    v10 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_BYTE *)(a1 + 176) = 0;
    *(_BYTE *)(a1 + 199) = 0;
    v10 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((_BYTE)v10 && this->__r_.__value_.__s.__data_[0] == 46)
      {
        v11 = v10 - 1;
        if (v11 <= 0x7FFFFFFFFFFFFFF7)
          goto LABEL_6;
LABEL_13:
        std::string::__throw_length_error[abi:ne180100]();
      }
LABEL_14:
      v14 = std::string::find(this, 46, 0);
      memset(&__dst, 0, sizeof(__dst));
      if (v14 == -1)
      {
        std::string::operator=(&__dst, v8);
LABEL_36:
        if (*(char *)(a3 + 23) < 0)
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        else
          __str = *(std::string *)a3;
        while (1)
        {
          v24 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
          if (v24 == -1)
          {
            Symbol = google::protobuf::DescriptorBuilder::FindSymbol(a1, (uint64_t)v8, a5);
            goto LABEL_67;
          }
          std::string::erase(&__str, v24, 0xFFFFFFFFFFFFFFFFLL);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          else
            size = __str.__r_.__value_.__l.__size_;
          std::string::append(&__str, 1uLL, 46);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v27 = __dst.__r_.__value_.__l.__size_;
          std::string::append(&__str, (const std::string::value_type *)p_dst, v27);
          v28 = google::protobuf::DescriptorBuilder::FindSymbol(a1, (uint64_t)&__str, a5);
          Symbol = v28;
          if ((_DWORD)v28)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v29 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v29 = __dst.__r_.__value_.__l.__size_;
            v30 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
            if ((v30 & 0x80u) != 0)
              v30 = v8->__r_.__value_.__l.__size_;
            if (v30 <= v29)
            {
              if (a4 != 1)
                goto LABEL_67;
              v23 = v28;
              if ((_DWORD)v28 == 1 || (_DWORD)v28 == 4)
                goto LABEL_68;
            }
            else if (v28 <= 8 && ((1 << v28) & 0x152) != 0)
            {
              std::string::append(&__str, v8, v29, v30 - v29);
              v31 = google::protobuf::DescriptorBuilder::FindSymbol(a1, (uint64_t)&__str, a5);
              Symbol = v31;
              if (!(_DWORD)v31)
              {
                std::string::operator=((std::string *)(a1 + 176), &__str);
                v23 = 0;
                goto LABEL_68;
              }
LABEL_67:
              v23 = Symbol;
LABEL_68:
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__str.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return Symbol & 0xFFFFFFFF00000000 | v23;
              }
              else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                return Symbol & 0xFFFFFFFF00000000 | v23;
              }
              operator delete(__dst.__r_.__value_.__l.__data_);
              return Symbol & 0xFFFFFFFF00000000 | v23;
            }
          }
          std::string::erase(&__str, size, 0xFFFFFFFFFFFFFFFFLL);
        }
      }
      v15 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      v16 = (char)v15;
      if ((v15 & 0x80u) != 0)
        v15 = v8->__r_.__value_.__l.__size_;
      if (v16 >= 0)
        v17 = v8;
      else
        v17 = (std::string *)v8->__r_.__value_.__r.__words[0];
      if (v15 >= v14)
        v18 = v14;
      else
        v18 = v15;
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v18 >= 0x17)
      {
        v33 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v33 = v18 | 7;
        v34 = v33 + 1;
        p_str = operator new(v33 + 1);
        __str.__r_.__value_.__l.__size_ = v18;
        __str.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
      }
      else
      {
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v18;
        p_str = &__str;
        if (!v18)
        {
          __str.__r_.__value_.__s.__data_[0] = 0;
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_27:
            __dst = __str;
            goto LABEL_36;
          }
LABEL_77:
          operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_27;
        }
      }
      memmove(p_str, v17, v18);
      *((_BYTE *)p_str + v18) = 0;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_77;
    }
  }
  v13 = this->__r_.__value_.__l.__size_;
  if (!v13 || *this->__r_.__value_.__l.__data_ != 46)
    goto LABEL_14;
  v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  v11 = v13 - 1;
  if (v13 - 1 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_13;
LABEL_6:
  if (v11 >= 0x17)
  {
    v20 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v20 = v11 | 7;
    v21 = v20 + 1;
    v12 = (std::string *)operator new(v20 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11;
    v12 = &__dst;
    if (!v11)
      goto LABEL_32;
  }
  memmove(v12, (char *)&v8->__r_.__value_.__l.__data_ + 1, v11);
LABEL_32:
  v12->__r_.__value_.__s.__data_[v11] = 0;
  Symbol = google::protobuf::DescriptorBuilder::FindSymbol(a1, (uint64_t)&__dst, a5);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v23 = Symbol;
  return Symbol & 0xFFFFFFFF00000000 | v23;
}

void sub_22DC41DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::DescriptorPool::NewPlaceholderWithMutexHeld(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  const std::string::value_type *v10;
  const std::string::value_type *v11;
  char v12;
  int v13;
  BOOL v15;
  uint64_t v16;
  size_t v17;
  uint64_t result;
  __int128 *p_dst;
  uint64_t v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  char v26;
  std::string **v27;
  char *v28;
  std::string **v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string *v32;
  size_t size;
  uint64_t *v34;
  std::string *v35;
  char *v36;
  char v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  int v43;
  uint64_t **v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  size_t v49;
  char *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  std::string *v54;
  std::string **v55;
  int v56;
  size_t v57;
  unint64_t v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  _OWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  const std::string::value_type *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  const std::string::value_type *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char **v90;
  unint64_t v91;
  size_t v92;
  size_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  const void *v100;
  std::string *v101;
  std::string *v102;
  int v103;
  _QWORD *v104;
  std::string **v105;
  uint64_t *v106;
  int v107;
  __int128 __dst;
  unint64_t v109;
  uint64_t *v110;

  v6 = 0;
  v7 = 0;
  v8 = *(unsigned __int8 *)(a2 + 23);
  v10 = *(const std::string::value_type **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  while ((v8 & 0x80) == 0)
  {
    v11 = (const std::string::value_type *)a2;
    if (v6 >= v8)
    {
      if (((_DWORD)v8 == 0) | v7 & 1)
        return 0;
      if (*(_QWORD *)a2 == 46)
      {
        v16 = *(_QWORD *)(a1 + 32);
        v10 = (const std::string::value_type *)a2;
        v17 = v8 - 1;
        if (v8 - 1 <= 0x7FFFFFFFFFFFFFF7)
          goto LABEL_26;
        goto LABEL_163;
      }
LABEL_29:
      v20 = *(_QWORD *)(a1 + 32);
      v21 = (std::string *)operator new();
      v22 = v21;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v21->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      *(_QWORD *)&__dst = v22;
      v27 = *(std::string ***)(v20 + 216);
      if ((unint64_t)v27 >= *(_QWORD *)(v20 + 224))
      {
        v28 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v20 + 208), &__dst);
        v22 = (std::string *)__dst;
      }
      else
      {
        *v27 = v22;
        v28 = (char *)(v27 + 1);
      }
      *(_QWORD *)(v20 + 216) = v28;
      goto LABEL_46;
    }
LABEL_7:
    v12 = 0;
    v13 = v11[v6];
    v15 = (v13 - 97) >= 0x1A && (v13 - 65) >= 0x1A && (v13 - 48) >= 0xA;
    if (v15 && v13 != 95)
    {
      if (v7 & 1 | (v13 != 46))
        return 0;
      v12 = 1;
    }
    ++v6;
    v7 = v12;
  }
  v11 = *(const std::string::value_type **)a2;
  if (v9 > v6)
    goto LABEL_7;
  if ((v9 == 0) | v7 & 1)
    return 0;
  if (*v10 != 46)
    goto LABEL_29;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = v9 - 1;
  if (v9 - 1 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_163;
LABEL_26:
  if (v17 >= 0x17)
  {
    v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v23 = v17 | 7;
    v24 = v23 + 1;
    p_dst = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&__dst + 1) = v17;
    v109 = v24 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_34;
  }
  HIBYTE(v109) = v17;
  p_dst = &__dst;
  if (v17)
LABEL_34:
    memmove(p_dst, v10 + 1, v17);
  *((_BYTE *)p_dst + v17) = 0;
  v25 = (std::string *)operator new();
  v22 = v25;
  v26 = HIBYTE(v109);
  if (SHIBYTE(v109) < 0)
  {
    std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = __dst;
    v25->__r_.__value_.__r.__words[2] = v109;
  }
  v110 = (uint64_t *)v22;
  v29 = *(std::string ***)(v16 + 216);
  if ((unint64_t)v29 >= *(_QWORD *)(v16 + 224))
  {
    v36 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v16 + 208), &v110);
    v22 = (std::string *)v110;
    v37 = HIBYTE(v109);
    *(_QWORD *)(v16 + 216) = v36;
    if (v37 < 0)
LABEL_45:
      operator delete((void *)__dst);
  }
  else
  {
    *v29 = v22;
    *(_QWORD *)(v16 + 216) = v29 + 1;
    if (v26 < 0)
      goto LABEL_45;
  }
LABEL_46:
  v30 = std::string::rfind(v22, 46, 0xFFFFFFFFFFFFFFFFLL);
  v107 = a3;
  if (v30 == -1)
  {
    google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)0xFFFFFFFFFFFFFFFFLL);
    v34 = &google::protobuf::internal::fixed_address_empty_string;
    v35 = v22;
    goto LABEL_94;
  }
  v31 = v30;
  if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = (std::string *)v22->__r_.__value_.__r.__words[0];
    if (v22->__r_.__value_.__l.__size_ >= v30)
      size = v30;
    else
      size = v22->__r_.__value_.__l.__size_;
    if (size <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_60;
LABEL_163:
    std::string::__throw_length_error[abi:ne180100]();
  }
  v32 = v22;
  if (HIBYTE(v22->__r_.__value_.__r.__words[2]) >= v30)
    size = v30;
  else
    size = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  if (size > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_163;
LABEL_60:
  v38 = *(_QWORD *)(a1 + 32);
  if (size >= 0x17)
  {
    v40 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v40 = size | 7;
    v41 = v40 + 1;
    v39 = (__int128 *)operator new(v40 + 1);
    *((_QWORD *)&__dst + 1) = size;
    v109 = v41 | 0x8000000000000000;
    *(_QWORD *)&__dst = v39;
    goto LABEL_66;
  }
  HIBYTE(v109) = size;
  v39 = &__dst;
  if (size)
LABEL_66:
    memmove(v39, v32, size);
  *((_BYTE *)v39 + size) = 0;
  v42 = (std::string *)operator new();
  v34 = (uint64_t *)v42;
  v43 = SHIBYTE(v109);
  if (SHIBYTE(v109) < 0)
  {
    std::string::__init_copy_ctor_external(v42, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = __dst;
    v42->__r_.__value_.__r.__words[2] = v109;
  }
  v110 = v34;
  v44 = *(uint64_t ***)(v38 + 216);
  if ((unint64_t)v44 >= *(_QWORD *)(v38 + 224))
  {
    v50 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v38 + 208), &v110);
    v34 = v110;
    *(_QWORD *)(v38 + 216) = v50;
    if (v43 < 0)
LABEL_72:
      operator delete((void *)__dst);
  }
  else
  {
    *v44 = v34;
    *(_QWORD *)(v38 + 216) = v44 + 1;
    if (v43 < 0)
      goto LABEL_72;
  }
  v45 = *(_QWORD *)(a1 + 32);
  if (SHIBYTE(v22->__r_.__value_.__r.__words[2]) < 0)
  {
    v46 = v22->__r_.__value_.__l.__size_;
    if (v46 > v31)
    {
      v47 = (std::string *)v22->__r_.__value_.__r.__words[0];
      v48 = v31 + 1;
      v49 = v46 - (v31 + 1);
      if (v49 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_163;
      goto LABEL_81;
    }
LABEL_164:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v46 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v47 = v22;
  if (v31 >= v46)
    goto LABEL_164;
  v48 = v31 + 1;
  v49 = v46 - (v31 + 1);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_163;
LABEL_81:
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = (__int128 *)operator new(v52 + 1);
    *((_QWORD *)&__dst + 1) = v49;
    v109 = v53 | 0x8000000000000000;
    *(_QWORD *)&__dst = v51;
    goto LABEL_87;
  }
  HIBYTE(v109) = v49;
  v51 = &__dst;
  if (v46 != v48)
LABEL_87:
    memmove(v51, (char *)v47 + v48, v49);
  *((_BYTE *)v51 + v49) = 0;
  v54 = (std::string *)operator new();
  v35 = v54;
  if (SHIBYTE(v109) < 0)
  {
    std::string::__init_copy_ctor_external(v54, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v54->__r_.__value_.__l.__data_ = __dst;
    v54->__r_.__value_.__r.__words[2] = v109;
  }
  v110 = (uint64_t *)v35;
  v55 = *(std::string ***)(v45 + 216);
  if ((unint64_t)v55 >= *(_QWORD *)(v45 + 224))
  {
    v74 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v45 + 208), &v110);
    v35 = (std::string *)v110;
    *(_QWORD *)(v45 + 216) = v74;
    if (SHIBYTE(v109) < 0)
LABEL_93:
      operator delete((void *)__dst);
  }
  else
  {
    *v55 = v35;
    *(_QWORD *)(v45 + 216) = v55 + 1;
    if (SHIBYTE(v109) < 0)
      goto LABEL_93;
  }
LABEL_94:
  v56 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
  if (v56 >= 0)
    v57 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  else
    v57 = v22->__r_.__value_.__l.__size_;
  v58 = v57 + 18;
  if (v57 + 18 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_163;
  if (v58 >= 0x17)
  {
    v60 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v60 = v58 | 7;
    v61 = v60 + 1;
    v59 = (__int128 *)operator new(v60 + 1);
    *((_QWORD *)&__dst + 1) = v57 + 18;
    v109 = v61 | 0x8000000000000000;
    *(_QWORD *)&__dst = v59;
  }
  else
  {
    v109 = 0;
    __dst = 0uLL;
    v59 = &__dst;
    HIBYTE(v109) = v57 + 18;
    if (!v57)
      goto LABEL_108;
  }
  if (v56 >= 0)
    v62 = v22;
  else
    v62 = (std::string *)v22->__r_.__value_.__r.__words[0];
  memmove(v59, v62, v57);
LABEL_108:
  v63 = v107;
  strcpy((char *)v59 + v57, ".placeholder.proto");
  v64 = google::protobuf::DescriptorPool::NewPlaceholderFileWithMutexHeld(a1, (uint64_t)&__dst);
  v65 = v64;
  if (SHIBYTE(v109) < 0)
  {
    operator delete((void *)__dst);
    *(_QWORD *)(v65 + 8) = v34;
    if (v63 != 1)
      goto LABEL_113;
LABEL_110:
    *(_DWORD *)(v65 + 48) = 1;
    v66 = *(_QWORD *)(a1 + 32);
    LODWORD(__dst) = 80;
    v67 = *(_QWORD **)(v66 + 192);
    if ((unint64_t)v67 >= *(_QWORD *)(v66 + 200))
    {
      v69 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v66 + 184), (int *)&__dst);
    }
    else
    {
      *v67 = 0;
      v67[1] = 0;
      v67[2] = 0;
      v68 = operator new(0x50uLL);
      *v67 = v68;
      v67[2] = v68 + 5;
      v68[3] = 0u;
      v68[4] = 0u;
      v68[1] = 0u;
      v68[2] = 0u;
      *v68 = 0u;
      v67[1] = v68 + 5;
      v69 = (char *)(v67 + 3);
      *(_QWORD *)(v66 + 192) = v67 + 3;
    }
    *(_QWORD *)(v66 + 192) = v69;
    v75 = *((_QWORD *)v69 - 3);
    *(_QWORD *)(v65 + 112) = v75;
    *(_QWORD *)(v75 + 72) = 0;
    *(_OWORD *)(v75 + 56) = 0u;
    *(_OWORD *)(v75 + 40) = 0u;
    *(_OWORD *)(v75 + 24) = 0u;
    *(_QWORD *)v75 = v35;
    *(_QWORD *)(v75 + 8) = v22;
    *(_QWORD *)(v75 + 16) = v65;
    *(_QWORD *)(v75 + 32) = google::protobuf::EnumOptions::default_instance((google::protobuf::EnumOptions *)v69);
    *(_BYTE *)(v75 + 40) = 1;
    if (*(char *)(a2 + 23) >= 0)
      v76 = (const std::string::value_type *)a2;
    else
      v76 = *(const std::string::value_type **)a2;
    *(_BYTE *)(v75 + 41) = *v76 != 46;
    *(_DWORD *)(v75 + 44) = 1;
    v77 = *(_QWORD *)(a1 + 32);
    LODWORD(__dst) = 40;
    v78 = *(_QWORD **)(v77 + 192);
    if ((unint64_t)v78 >= *(_QWORD *)(v77 + 200))
    {
      v80 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v77 + 184), (int *)&__dst);
    }
    else
    {
      *v78 = 0;
      v78[1] = 0;
      v78[2] = 0;
      v79 = operator new(0x28uLL);
      *v78 = v79;
      v78[2] = v79 + 5;
      v79[4] = 0;
      *(_OWORD *)v79 = 0u;
      *((_OWORD *)v79 + 1) = 0u;
      v78[1] = v79 + 5;
      v80 = (char *)(v78 + 3);
      *(_QWORD *)(v77 + 192) = v78 + 3;
    }
    *(_QWORD *)(v77 + 192) = v80;
    v87 = *((_QWORD *)v80 - 3);
    *(_QWORD *)(v75 + 48) = v87;
    *(_QWORD *)(v87 + 32) = 0;
    *(_OWORD *)v87 = 0u;
    *(_OWORD *)(v87 + 16) = 0u;
    v88 = *(_QWORD *)(a1 + 32);
    v89 = (char *)operator new();
    strcpy(v89, "PLACEHOLDER_VALUE");
    v89[23] = 17;
    v90 = *(char ***)(v88 + 216);
    v91 = *(_QWORD *)(v88 + 224);
    *(_QWORD *)&__dst = v89;
    if ((unint64_t)v90 >= v91)
    {
      v97 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v88 + 208), &__dst);
      v89 = (char *)__dst;
      *(_QWORD *)(v88 + 216) = v97;
      *(_QWORD *)v87 = v89;
      v92 = *((unsigned __int8 *)v34 + 23);
      if ((*((char *)v34 + 23) & 0x80000000) == 0)
      {
LABEL_133:
        if (v92)
          goto LABEL_134;
        goto LABEL_143;
      }
    }
    else
    {
      *v90 = v89;
      *(_QWORD *)(v88 + 216) = v90 + 1;
      *(_QWORD *)v87 = v89;
      v92 = *((unsigned __int8 *)v34 + 23);
      if ((*((char *)v34 + 23) & 0x80000000) == 0)
        goto LABEL_133;
    }
    if (v34[1])
    {
LABEL_134:
      if ((v92 & 0x80u) == 0)
        v93 = v92;
      else
        v93 = v34[1];
      v94 = v93 + 18;
      if (v93 + 18 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_163;
      v95 = *(_QWORD *)(a1 + 32);
      if (v94 >= 0x17)
      {
        v98 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v94 | 7) != 0x17)
          v98 = v94 | 7;
        v99 = v98 + 1;
        v96 = (char *)operator new(v98 + 1);
        *((_QWORD *)&__dst + 1) = v93 + 18;
        v109 = v99 | 0x8000000000000000;
        *(_QWORD *)&__dst = v96;
      }
      else
      {
        v109 = 0;
        __dst = 0uLL;
        v96 = (char *)&__dst;
        HIBYTE(v109) = v93 + 18;
        if (!v93)
        {
LABEL_151:
          strcpy(&v96[v93], ".PLACEHOLDER_VALUE");
          v101 = (std::string *)operator new();
          v102 = v101;
          v103 = SHIBYTE(v109);
          if (SHIBYTE(v109) < 0)
          {
            std::string::__init_copy_ctor_external(v101, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
          }
          else
          {
            *(_OWORD *)&v101->__r_.__value_.__l.__data_ = __dst;
            v101->__r_.__value_.__r.__words[2] = v109;
          }
          v110 = (uint64_t *)v102;
          v105 = *(std::string ***)(v95 + 216);
          if ((unint64_t)v105 >= *(_QWORD *)(v95 + 224))
          {
            v89 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v95 + 208), &v110);
            v106 = v110;
            *(_QWORD *)(v95 + 216) = v89;
            *(_QWORD *)(v87 + 8) = v106;
            if ((v103 & 0x80000000) == 0)
              goto LABEL_159;
            goto LABEL_158;
          }
          *v105 = v102;
          v89 = (char *)(v105 + 1);
          *(_QWORD *)(v95 + 216) = v89;
          *(_QWORD *)(v87 + 8) = v102;
          if (v103 < 0)
LABEL_158:
            operator delete((void *)__dst);
LABEL_159:
          *(_DWORD *)(v87 + 16) = 0;
          *(_QWORD *)(v87 + 24) = v75;
          *(_QWORD *)(v87 + 32) = google::protobuf::EnumValueOptions::default_instance((google::protobuf::EnumValueOptions *)v89);
          return 4;
        }
      }
      if ((v92 & 0x80u) == 0)
        v100 = v34;
      else
        v100 = (const void *)*v34;
      memmove(v96, v100, v93);
      goto LABEL_151;
    }
LABEL_143:
    *(_QWORD *)(v87 + 8) = v89;
    goto LABEL_159;
  }
  *(_QWORD *)(v64 + 8) = v34;
  if (v63 == 1)
    goto LABEL_110;
LABEL_113:
  *(_DWORD *)(v65 + 44) = 1;
  v70 = *(_QWORD *)(a1 + 32);
  LODWORD(__dst) = 144;
  v71 = *(_QWORD **)(v70 + 192);
  if ((unint64_t)v71 >= *(_QWORD *)(v70 + 200))
  {
    v73 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v70 + 184), (int *)&__dst);
  }
  else
  {
    *v71 = 0;
    v71[1] = 0;
    v71[2] = 0;
    v72 = operator new(0x90uLL);
    *v71 = v72;
    v71[2] = v72 + 9;
    v72[7] = 0u;
    v72[8] = 0u;
    v72[5] = 0u;
    v72[6] = 0u;
    v72[3] = 0u;
    v72[4] = 0u;
    v72[1] = 0u;
    v72[2] = 0u;
    *v72 = 0u;
    v71[1] = v72 + 9;
    v73 = (char *)(v71 + 3);
    *(_QWORD *)(v70 + 192) = v71 + 3;
  }
  *(_QWORD *)(v70 + 192) = v73;
  v81 = *((_QWORD *)v73 - 3);
  *(_QWORD *)(v65 + 104) = v81;
  *(_QWORD *)(v81 + 136) = 0;
  *(_OWORD *)(v81 + 120) = 0u;
  *(_OWORD *)(v81 + 104) = 0u;
  *(_OWORD *)(v81 + 88) = 0u;
  *(_OWORD *)(v81 + 72) = 0u;
  *(_OWORD *)(v81 + 56) = 0u;
  *(_OWORD *)(v81 + 40) = 0u;
  *(_OWORD *)(v81 + 24) = 0u;
  *(_QWORD *)v81 = v35;
  *(_QWORD *)(v81 + 8) = v22;
  *(_QWORD *)(v81 + 16) = v65;
  *(_QWORD *)(v81 + 32) = google::protobuf::MessageOptions::default_instance((google::protobuf::MessageOptions *)v73);
  result = 1;
  *(_BYTE *)(v81 + 140) = 1;
  if (*(char *)(a2 + 23) >= 0)
    v82 = (const std::string::value_type *)a2;
  else
    v82 = *(const std::string::value_type **)a2;
  *(_BYTE *)(v81 + 141) = *v82 != 46;
  if (v63 == 2)
  {
    *(_DWORD *)(v81 + 124) = 1;
    v83 = *(_QWORD *)(a1 + 32);
    LODWORD(__dst) = 16;
    v84 = *(_QWORD **)(v83 + 192);
    if ((unint64_t)v84 >= *(_QWORD *)(v83 + 200))
    {
      v86 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v83 + 184), (int *)&__dst);
    }
    else
    {
      *v84 = 0;
      v84[1] = 0;
      v84[2] = 0;
      v85 = operator new(0x10uLL);
      *v84 = v85;
      v84[2] = v85 + 2;
      *v85 = 0;
      v85[1] = 0;
      v84[1] = v85 + 2;
      v86 = (char *)(v84 + 3);
      *(_QWORD *)(v83 + 192) = v84 + 3;
    }
    *(_QWORD *)(v83 + 192) = v86;
    v104 = (_QWORD *)*((_QWORD *)v86 - 3);
    *(_QWORD *)(v81 + 72) = v104;
    *v104 = 0x2000000000000001;
    return 1;
  }
  return result;
}

void sub_22DC42910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x22E31DF78](v16, 0x1012C40EC159624);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22DC429A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 192) = v2;
  _Unwind_Resume(exception_object);
}

void sub_22DC429C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 192) = v2;
  _Unwind_Resume(a1);
}

void sub_22DC429C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 192) = v2;
  _Unwind_Resume(exception_object);
}

void sub_22DC429E8()
{
  JUMPOUT(0x22DC429FCLL);
}

uint64_t google::protobuf::DescriptorPool::NewPlaceholderFileWithMutexHeld(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string **v12;
  char *v13;
  google::protobuf::FileOptions *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  google::protobuf::FileDescriptorTables *v18;
  const void *v19;
  int v20;
  std::string *v21;

  v4 = *(_QWORD *)(a1 + 32);
  v20 = 160;
  v5 = *(_QWORD **)(v4 + 192);
  if ((unint64_t)v5 >= *(_QWORD *)(v4 + 200))
  {
    v7 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v4 + 184), &v20);
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = operator new(0xA0uLL);
    *v5 = v6;
    v5[2] = v6 + 10;
    v6[8] = 0u;
    v6[9] = 0u;
    v6[6] = 0u;
    v6[7] = 0u;
    v6[4] = 0u;
    v6[5] = 0u;
    v6[2] = 0u;
    v6[3] = 0u;
    *v6 = 0u;
    v6[1] = 0u;
    v5[1] = v6 + 10;
    v7 = (char *)(v5 + 3);
    *(_QWORD *)(v4 + 192) = v5 + 3;
  }
  *(_QWORD *)(v4 + 192) = v7;
  v8 = *((_QWORD *)v7 - 3);
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = (std::string *)operator new();
  v11 = v10;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v21 = v11;
  v12 = *(std::string ***)(v9 + 216);
  if ((unint64_t)v12 >= *(_QWORD *)(v9 + 224))
  {
    v13 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v9 + 208), &v21);
    v11 = v21;
  }
  else
  {
    *v12 = v11;
    v13 = (char *)(v12 + 1);
  }
  *(_QWORD *)(v9 + 216) = v13;
  *(_QWORD *)v8 = v11;
  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v13);
  *(_QWORD *)(v8 + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(v8 + 16) = a1;
  v15 = google::protobuf::FileOptions::default_instance(v14);
  *(_QWORD *)(v8 + 136) = v15;
  if ((v16 & 1) == 0)
  {
    if ((_DWORD)v15)
    {
      v18 = (google::protobuf::FileDescriptorTables *)operator new();
      google::protobuf::FileDescriptorTables::FileDescriptorTables(v18);
      google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::OnShutdownDelete<google::protobuf::FileDescriptorTables>(google::protobuf::FileDescriptorTables *)::{lambda(void const*)#1}::__invoke, (void (*)(const void *))v18, v19);
      google::protobuf::FileDescriptorTables::GetEmptyInstance(void)::file_descriptor_tables = (uint64_t)v18;
    }
  }
  *(_QWORD *)(v8 + 144) = google::protobuf::FileDescriptorTables::GetEmptyInstance(void)::file_descriptor_tables;
  *(_QWORD *)(v8 + 152) = google::protobuf::SourceCodeInfo::default_instance((google::protobuf::SourceCodeInfo *)v15);
  *(_WORD *)(v8 + 64) = 257;
  *(_DWORD *)(v8 + 60) = 0;
  return v8;
}

void sub_22DC42BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x10A0C40C644375CLL);
  _Unwind_Resume(a1);
}

void sub_22DC42C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22DC42C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_22DC42C58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 192) = v2;
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorBuilder::AddSymbol(uint64_t a1, std::string::size_type a2, uint64_t *a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  uint64_t *v11;
  _QWORD *v15;
  std::string::size_type v16;
  uint64_t **v17;
  const std::string::value_type ***v18;
  const std::string::value_type ****v19;
  std::string *v20;
  std::string *v21;
  unsigned int *v22;
  std::string::size_type v23;
  size_t v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *p_dst;
  std::string *v30;
  __int128 v31;
  void *v32;
  const std::string::value_type **v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  size_t v40;
  int v41;
  const void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  int v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  void *v61;
  std::string::size_type v62;
  int64_t v63;
  std::string __dst;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string __p[2];

  v11 = a3;
  if (!a3)
  {
    v11 = *(uint64_t **)(a1 + 80);
    if (google::protobuf::DescriptorPool::Tables::AddSymbol(*(_QWORD **)(a1 + 8), (const char *)a2, a6, a7))goto LABEL_3;
LABEL_6:
    v15 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
    if (*(char *)(a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = *(_QWORD *)a2;
    __p[0].__r_.__value_.__r.__words[0] = v16;
    v17 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v15, (const char **)&__p[0].__r_.__value_.__l.__data_);
    if (v17)
    {
      v18 = (const std::string::value_type ***)v17[4];
      switch(*((_DWORD *)v17 + 6))
      {
        case 1:
        case 4:
        case 6:
          v19 = (const std::string::value_type ****)(v18 + 2);
          goto LABEL_71;
        case 2:
          v19 = (const std::string::value_type ****)(v18 + 5);
          goto LABEL_71;
        case 3:
        case 7:
          v33 = v18[2];
          goto LABEL_69;
        case 5:
          v33 = v18[3];
LABEL_69:
          v19 = (const std::string::value_type ****)(v33 + 2);
LABEL_71:
          v18 = *v19;
          goto LABEL_72;
        case 8:
LABEL_72:
          if (v18 != *(const std::string::value_type ****)(a1 + 80))
            goto LABEL_73;
          goto LABEL_15;
        default:
          break;
      }
    }
    v18 = 0;
    if (!*(_QWORD *)(a1 + 80))
    {
LABEL_15:
      v23 = std::string::rfind((const std::string *)a2, 46, 0xFFFFFFFFFFFFFFFFLL);
      if (v23 == -1)
      {
        std::operator+<char>();
        v30 = std::string::append(&v67, "\" is already defined.");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __p[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)a2, a5, 0, (const std::string::value_type *)__p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return 0;
        v32 = (void *)v67.__r_.__value_.__r.__words[0];
        goto LABEL_88;
      }
      v24 = v23;
      if (*(char *)(a2 + 23) < 0)
      {
        v25 = *(_QWORD *)(a2 + 8);
        if (v25 > v23)
        {
          v26 = *(_QWORD *)a2;
          v27 = v23 + 1;
          v28 = v25 - (v23 + 1);
          if (v28 <= 0x7FFFFFFFFFFFFFF7)
          {
LABEL_19:
            if (v28 >= 0x17)
            {
              v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v28 | 7) != 0x17)
                v34 = v28 | 7;
              v35 = v34 + 1;
              p_dst = (std::string *)operator new(v34 + 1);
              __dst.__r_.__value_.__l.__size_ = v28;
              __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
              p_dst = &__dst;
              if (v25 == v27)
              {
LABEL_31:
                p_dst->__r_.__value_.__s.__data_[v28] = 0;
                v36 = std::string::insert(&__dst, 0, "\"");
                v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
                v65.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v37;
                v36->__r_.__value_.__l.__size_ = 0;
                v36->__r_.__value_.__r.__words[2] = 0;
                v36->__r_.__value_.__r.__words[0] = 0;
                v38 = std::string::append(&v65, "\" is already defined in \"");
                v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
                v66.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v39;
                v38->__r_.__value_.__l.__size_ = 0;
                v38->__r_.__value_.__r.__words[2] = 0;
                v38->__r_.__value_.__r.__words[0] = 0;
                v40 = *(unsigned __int8 *)(a2 + 23);
                v41 = (char)v40;
                if ((v40 & 0x80u) != 0)
                  v40 = *(_QWORD *)(a2 + 8);
                if (v41 >= 0)
                  v42 = (const void *)a2;
                else
                  v42 = *(const void **)a2;
                if (v40 < v24)
                  v24 = v40;
                if (v24 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                if (v24 >= 0x17)
                {
                  v44 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v24 | 7) != 0x17)
                    v44 = v24 | 7;
                  v45 = v44 + 1;
                  v43 = operator new(v44 + 1);
                  v62 = v24;
                  v63 = v45 | 0x8000000000000000;
                  v61 = v43;
                }
                else
                {
                  HIBYTE(v63) = v24;
                  v43 = &v61;
                  if (!v24)
                  {
LABEL_46:
                    *((_BYTE *)v43 + v24) = 0;
                    if (v63 >= 0)
                      v46 = (const std::string::value_type *)&v61;
                    else
                      v46 = (const std::string::value_type *)v61;
                    if (v63 >= 0)
                      v47 = HIBYTE(v63);
                    else
                      v47 = v62;
                    v48 = std::string::append(&v66, v46, v47);
                    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
                    v67.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v49;
                    v48->__r_.__value_.__l.__size_ = 0;
                    v48->__r_.__value_.__r.__words[2] = 0;
                    v48->__r_.__value_.__r.__words[0] = 0;
                    v50 = std::string::append(&v67, "\".");
                    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
                    __p[0].__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v51;
                    v50->__r_.__value_.__l.__size_ = 0;
                    v50->__r_.__value_.__r.__words[2] = 0;
                    v50->__r_.__value_.__r.__words[0] = 0;
                    google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)a2, a5, 0, (const std::string::value_type *)__p);
                    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(__p[0].__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_54:
                        if ((SHIBYTE(v63) & 0x80000000) == 0)
                          goto LABEL_55;
                        goto LABEL_64;
                      }
                    }
                    else if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_54;
                    }
                    operator delete(v67.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v63) & 0x80000000) == 0)
                    {
LABEL_55:
                      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_56;
                      goto LABEL_65;
                    }
LABEL_64:
                    operator delete(v61);
                    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_56:
                      if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_57;
                      goto LABEL_66;
                    }
LABEL_65:
                    operator delete(v66.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_57:
                      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        return 0;
                      goto LABEL_67;
                    }
LABEL_66:
                    operator delete(v65.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      return 0;
LABEL_67:
                    v32 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_88:
                    operator delete(v32);
                    return 0;
                  }
                }
                memmove(v43, v42, v24);
                goto LABEL_46;
              }
            }
            memmove(p_dst, (const void *)(v26 + v27), v28);
            goto LABEL_31;
          }
LABEL_61:
          std::string::__throw_length_error[abi:ne180100]();
        }
      }
      else
      {
        v25 = *(unsigned __int8 *)(a2 + 23);
        v26 = a2;
        if (v23 < v25)
        {
          v27 = v23 + 1;
          v28 = v25 - (v23 + 1);
          if (v28 <= 0x7FFFFFFFFFFFFFF7)
            goto LABEL_19;
          goto LABEL_61;
        }
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
LABEL_73:
    std::operator+<char>();
    v52 = std::string::append(&v65, "\" is already defined in file \"");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = *((char *)*v18 + 23);
    if (v54 >= 0)
      v55 = (const std::string::value_type *)*v18;
    else
      v55 = **v18;
    if (v54 >= 0)
      v56 = *((unsigned __int8 *)*v18 + 23);
    else
      v56 = (std::string::size_type)(*v18)[1];
    v57 = std::string::append(&v66, v55, v56);
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    v59 = std::string::append(&v67, "\".");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)a2, a5, 0, (const std::string::value_type *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_81:
        if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_82;
        goto LABEL_86;
      }
    }
    else if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_81;
    }
    operator delete(v67.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
      goto LABEL_87;
    }
LABEL_86:
    operator delete(v66.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
LABEL_87:
    v32 = (void *)v65.__r_.__value_.__r.__words[0];
    goto LABEL_88;
  }
  if (!google::protobuf::DescriptorPool::Tables::AddSymbol(*(_QWORD **)(a1 + 8), (const char *)a2, a6, a7))goto LABEL_6;
LABEL_3:
  if ((google::protobuf::FileDescriptorTables::AddAliasUnderParent(*(_QWORD *)(a1 + 88), v11, a4, (uint64_t)a6, (uint64_t)a7) & 1) != 0)return 1;
  if (!*(_BYTE *)(a1 + 48))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 4042);
    v20 = google::protobuf::internal::LogMessage::operator<<(__p, "\"");
    v21 = google::protobuf::internal::LogMessage::operator<<(v20, (const std::string::value_type *)a2);
    v22 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v21, "\" not previously defined in symbols_by_name_, but was defined in symbols_by_parent_; this s"
                            "houldn't be possible.");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v67, v22);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_22DC43264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AddPackage(uint64_t a1, std::string *a2, uint64_t a3, const char *a4)
{
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type size;
  int v11;
  std::string *v12;
  size_t v13;
  uint64_t v14;
  __int128 *p_dst;
  _QWORD *v16;
  std::string *v17;
  uint64_t **v18;
  int v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  std::string::size_type v25;
  int v26;
  std::string::size_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  size_t v31;
  __int128 *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 __dst;
  unint64_t v40;

  if (!google::protobuf::DescriptorPool::Tables::AddSymbol(*(_QWORD **)(a1 + 8), (const char *)a2, (const char *)8, a4))
  {
    v16 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = a2;
    else
      v17 = (std::string *)a2->__r_.__value_.__r.__words[0];
    *(_QWORD *)&__dst = v17;
    v18 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v16, (const char **)&__dst);
    if (v18)
    {
      v19 = *((_DWORD *)v18 + 6);
      if (v19 == 8)
        return;
    }
    else
    {
      v19 = 0;
    }
    std::operator+<char>();
    v20 = std::string::append(&v36, "\" is already defined (as something other than a package) in file \"");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    __asm { BR              X10 }
  }
  v8 = std::string::rfind(a2, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v8 == -1)
  {
    google::protobuf::DescriptorBuilder::ValidateSymbolName(a1, (uint64_t *)a2, (const std::string::value_type *)a2, a3);
    return;
  }
  v9 = v8;
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v11 = (char)size;
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (size >= v8)
    v13 = v8;
  else
    v13 = size;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_50;
  v14 = *(_QWORD *)(a1 + 8);
  if (v13 >= 0x17)
  {
    v22 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v22 = v13 | 7;
    v23 = v22 + 1;
    p_dst = (__int128 *)operator new(v22 + 1);
    *((_QWORD *)&__dst + 1) = v13;
    v40 = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_27;
  }
  HIBYTE(v40) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_27:
    memmove(p_dst, v12, v13);
  *((_BYTE *)p_dst + v13) = 0;
  v24 = (std::string *)operator new();
  v25 = (std::string::size_type)v24;
  v26 = SHIBYTE(v40);
  if (SHIBYTE(v40) < 0)
  {
    std::string::__init_copy_ctor_external(v24, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = __dst;
    v24->__r_.__value_.__r.__words[2] = v40;
  }
  v38.__r_.__value_.__r.__words[0] = v25;
  v27 = *(std::string::size_type **)(v14 + 216);
  if ((unint64_t)v27 < *(_QWORD *)(v14 + 224))
  {
    *v27 = v25;
    *(_QWORD *)(v14 + 216) = v27 + 1;
    if ((v26 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  v33 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v14 + 208), &v38);
  v25 = v38.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 216) = v33;
  if (v26 < 0)
LABEL_33:
    operator delete((void *)__dst);
LABEL_34:
  google::protobuf::DescriptorBuilder::AddPackage(a1, v25, a3, a4);
  if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v28 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v29 = a2;
    if (v9 < v28)
    {
      v30 = v9 + 1;
      v31 = v28 - (v9 + 1);
      if (v31 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_37;
LABEL_50:
      std::string::__throw_length_error[abi:ne180100]();
    }
LABEL_52:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v28 = a2->__r_.__value_.__l.__size_;
  if (v28 <= v9)
    goto LABEL_52;
  v29 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v30 = v9 + 1;
  v31 = v28 - (v9 + 1);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_50;
LABEL_37:
  if (v31 >= 0x17)
  {
    v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v34 = v31 | 7;
    v35 = v34 + 1;
    v32 = (__int128 *)operator new(v34 + 1);
    *((_QWORD *)&__dst + 1) = v31;
    v40 = v35 | 0x8000000000000000;
    *(_QWORD *)&__dst = v32;
    goto LABEL_45;
  }
  HIBYTE(v40) = v31;
  v32 = &__dst;
  if (v28 != v30)
LABEL_45:
    memmove(v32, (char *)v29 + v30, v31);
  *((_BYTE *)v32 + v31) = 0;
  google::protobuf::DescriptorBuilder::ValidateSymbolName(a1, (uint64_t *)&__dst, (const std::string::value_type *)a2, a3);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)__dst);
}

void sub_22DC43880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  MEMORY[0x22E31DF78](v35, 0x1012C40EC159624);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::ValidateSymbolName(uint64_t a1, uint64_t *a2, const std::string::value_type *a3, uint64_t a4)
{
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v17;
  std::string *v18;
  __int128 v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;

  v7 = *((unsigned __int8 *)a2 + 23);
  v8 = *((char *)a2 + 23) < 0;
  v9 = a2[1];
  if (*((char *)a2 + 23) >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = a2[1];
  if (v10)
  {
    v12 = 0;
    while (1)
    {
      if (v8)
        v14 = (uint64_t *)*a2;
      else
        v14 = a2;
      v15 = *((unsigned __int8 *)v14 + v12);
      v17 = (v15 - 123) > 0xFFFFFFE5
         || (v15 - 91) > 0xFFFFFFE5
         || (v15 - 58) > 0xFFFFFFF5;
      if (v17 || v15 == 95)
        goto LABEL_7;
      std::operator+<char>();
      v18 = std::string::append(&v20, "\" is not a valid identifier.");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v22 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::DescriptorBuilder::AddError(a1, a3, a4, 0, (const std::string::value_type *)__p);
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
LABEL_26:
          operator delete(v20.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_26;
      }
      v7 = *((unsigned __int8 *)a2 + 23);
      v9 = a2[1];
LABEL_7:
      ++v12;
      v8 = (v7 & 0x80u) != 0;
      if ((v7 & 0x80u) == 0)
        v13 = v7;
      else
        v13 = v9;
      if (v13 <= v12)
        return;
    }
  }
  google::protobuf::DescriptorBuilder::AddError(a1, a3, a4, 0, "Missing name.");
}

void sub_22DC43AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptions(uint64_t a1, google::protobuf::FileOptions *a2, uint64_t *a3)
{
  _DWORD *v6;
  const void **v7;
  int v8;
  size_t v9;
  unint64_t v10;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  _DWORD *v16;
  void *v17;
  __int128 v18;
  void **__dst;
  size_t v20;
  unint64_t v21;
  void *__p;
  _DWORD *v23;
  _DWORD *v24;

  v6 = operator new(4uLL);
  *v6 = 8;
  __p = v6;
  v23 = v6 + 1;
  v24 = v6 + 1;
  v7 = (const void **)a3[1];
  v8 = *((char *)v7 + 23);
  if (v8 >= 0)
    v9 = *((unsigned __int8 *)v7 + 23);
  else
    v9 = (size_t)v7[1];
  v10 = v9 + 6;
  if (v9 + 6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    v20 = v9 + 6;
    v21 = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v21) = v9 + 6;
    if (!v9)
      goto LABEL_15;
  }
  if (v8 >= 0)
    v14 = v7;
  else
    v14 = *v7;
  memmove(p_dst, v14, v9);
LABEL_15:
  strcpy((char *)p_dst + v9, ".dummy");
  v15 = *a3;
  v17 = operator new(0x20uLL);
  v18 = xmmword_22DCE6520;
  strcpy((char *)v17, "google.protobuf.FileOptions");
  google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::FileDescriptor>(a1, (uint64_t)&__dst, v15, a2, (uint64_t)a3, (uint64_t)&__p, (std::string::size_type)&v17);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(v17);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_17:
      v16 = __p;
      if (!__p)
        return;
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst);
  v16 = __p;
  if (__p)
  {
LABEL_18:
    v23 = v16;
    operator delete(v16);
  }
}

void sub_22DC43CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  void *v24;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      v24 = a22;
      if (!a22)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  v24 = a22;
  if (!a22)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::FileDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3, google::protobuf::FileOptions *a4, uint64_t a5, uint64_t a6, std::string::size_type a7)
{
  uint64_t v14;
  int *v15;
  int **v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  char *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t ExtensionByNumberNoLock;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  std::string __p;
  void *v55;
  char v56;
  void *v57;
  void *v58;
  std::string __dst;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = (int *)operator new();
  google::protobuf::FileOptions::FileOptions((google::protobuf::FileOptions *)v15, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v16 = *(int ***)(v14 + 240);
  if ((unint64_t)v16 < *(_QWORD *)(v14 + 248))
  {
    *v16 = v15;
    *(_QWORD *)(v14 + 240) = v16 + 1;
    if ((google::protobuf::FileOptions::IsInitialized(a4) & 1) == 0)
      goto LABEL_3;
LABEL_11:
    google::protobuf::MessageLite::SerializeAsString(a4, (uint64_t)&__p);
    v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::MessageLite::ParseFromString(v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a5 + 136) = v15;
      if (v15[14] < 1)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a5 + 136) = v15;
      if (v15[14] < 1)
      {
LABEL_35:
        v31 = *((_QWORD *)a4 + 1);
        if ((v31 & 1) == 0)
          goto LABEL_36;
        goto LABEL_70;
      }
    }
    v22 = (google::protobuf::UnknownFieldSet *)v57;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v56 < 0)
    {
      operator delete(v55);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)a4 + 1);
    if ((v31 & 1) == 0)
    {
LABEL_36:
      v32 = (uint64_t *)google::protobuf::UnknownFieldSet::default_instance(v22);
      if (*v32 == v32[1])
        return;
LABEL_37:
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
      if (*(char *)(a7 + 23) >= 0)
        v34 = a7;
      else
        v34 = *(_QWORD *)a7;
      __p.__r_.__value_.__r.__words[0] = v34;
      v35 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v33, (const char **)&__p.__r_.__value_.__l.__data_);
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          v37 = *v32;
          v36 = v32[1];
          if ((int)((unint64_t)(v36 - *v32) >> 4) >= 1)
          {
            v38 = 0;
            v39 = (unint64_t)v35[4];
            v40 = (uint64_t **)(a1 + 128);
            do
            {
              ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(*(_QWORD *)a1, v39, *(_DWORD *)(v37 + 16 * v38));
              if (ExtensionByNumberNoLock)
              {
                v42 = ExtensionByNumberNoLock;
                v43 = *v40;
                if (*v40)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  v45 = (uint64_t *)(a1 + 128);
                  v46 = *v40;
                  do
                  {
                    v47 = v46[4];
                    v48 = v47 >= v44;
                    if (v47 >= v44)
                      v49 = (uint64_t **)v46;
                    else
                      v49 = (uint64_t **)(v46 + 1);
                    if (v48)
                      v45 = v46;
                    v46 = *v49;
                  }
                  while (*v49);
                  if (v45 != (uint64_t *)v40 && v44 >= v45[4])
                  {
                    v50 = (uint64_t *)v45[1];
                    v51 = v45;
                    if (v50)
                    {
                      do
                      {
                        v52 = v50;
                        v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        v52 = (uint64_t *)v51[2];
                        v53 = *v52 == (_QWORD)v51;
                        v51 = v52;
                      }
                      while (!v53);
                    }
                    if (*(uint64_t **)(a1 + 120) == v45)
                      *(_QWORD *)(a1 + 120) = v52;
                    --*(_QWORD *)(a1 + 136);
                    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v45);
                    operator delete(v45);
                    v37 = *v32;
                    v36 = v32[1];
                  }
                }
              }
              ++v38;
            }
            while (v38 < (int)((unint64_t)(v36 - v37) >> 4));
          }
        }
      }
      return;
    }
LABEL_70:
    v32 = (uint64_t *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v32 == *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 16))
      return;
    goto LABEL_37;
  }
  v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v14 + 232), &__p);
  v15 = (int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 240) = v21;
  if ((google::protobuf::FileOptions::IsInitialized(a4) & 1) != 0)
    goto LABEL_11;
LABEL_3:
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  if (v18 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v18 + 1;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
  if (v18)
  {
LABEL_17:
    if (v17 >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(p_dst, v25, v18);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 46;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)&__p, (uint64_t)a4, 7, "Uninterpreted option is missing name or value.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22DC44150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_22DC44164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AddRecursiveImportError(google::protobuf::DescriptorBuilder *this, const google::protobuf::FileDescriptorProto *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v18;
  const std::string::value_type *v19;
  const std::string::value_type *v20;
  std::string v21;

  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = xmmword_22DCED9C0;
  strcpy(v21.__r_.__value_.__l.__data_, "File recursively imports itself: ");
  v6 = **((_QWORD **)this + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)this + 1) + 8) - v6) >> 3) > a3)
  {
    v7 = 24 * a3;
    v8 = a3;
    do
    {
      v9 = v6 + v7;
      v10 = *(char *)(v9 + 23);
      if (v10 >= 0)
        v11 = (const std::string::value_type *)v9;
      else
        v11 = *(const std::string::value_type **)v9;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v9 + 23);
      else
        v12 = *(_QWORD *)(v9 + 8);
      std::string::append(&v21, v11, v12);
      std::string::append(&v21, " -> ");
      ++v8;
      v6 = **((_QWORD **)this + 1);
      v7 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)this + 1) + 8) - v6) >> 3) > v8);
  }
  v13 = *((_QWORD *)a2 + 22);
  v14 = *(char *)(v13 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)*((_QWORD *)a2 + 22);
  else
    v15 = *(const std::string::value_type **)v13;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v13 + 23);
  else
    v16 = *(_QWORD *)(v13 + 8);
  std::string::append(&v21, v15, v16);
  v17 = **((_QWORD **)this + 1);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)this + 1) + 8) - v17) >> 3) - 1;
  v19 = (const std::string::value_type *)(v17 + 24 * (a3 + 1));
  if (v18 <= a3)
    v20 = (const std::string::value_type *)*((_QWORD *)a2 + 22);
  else
    v20 = v19;
  google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v20, (uint64_t)a2, 9, (const std::string::value_type *)&v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_22DC4435C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AddTwiceListedError(google::protobuf::DescriptorBuilder *this, const google::protobuf::FileDescriptorProto *a2, int a3)
{
  char *v6;
  const std::string::value_type *v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;

  v6 = (char *)a2 + 24;
  v7 = (const std::string::value_type *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)a2 + 24, a3);
  google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v6, a3);
  std::operator+<char>();
  v8 = std::string::append(&v10, "\" was listed twice.");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v12 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v7, (uint64_t)a2, 9, (const std::string::value_type *)__p);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_22DC4446C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AddImportError(google::protobuf::DescriptorBuilder *this, const google::protobuf::FileDescriptorProto *a2, int a3)
{
  char *v6;
  std::string *v7;
  void *v8;
  char v9;
  const std::string::value_type *v10;
  std::string v11;
  void *__p;
  __int128 v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v13 = 0uLL;
  __p = 0;
  v6 = (char *)a2 + 24;
  if (*(_QWORD *)(*(_QWORD *)this + 8))
  {
    google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)a2 + 24, a3);
    std::operator+<char>();
    v7 = std::string::append(&v11, "\" was not found or had errors.");
  }
  else
  {
    google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)a2 + 24, a3);
    std::operator+<char>();
    v7 = std::string::append(&v11, "\" has not been loaded.");
  }
  v8 = (void *)v7->__r_.__value_.__r.__words[0];
  v14[0] = v7->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)((char *)&v13 + 7) = *(_QWORD *)((char *)v14 + 7);
  __p = v8;
  *(_QWORD *)&v13 = v14[0];
  HIBYTE(v13) = v9;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v10 = (const std::string::value_type *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v6, a3);
  google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v10, (uint64_t)a2, 9, (const std::string::value_type *)&__p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
}

void sub_22DC44608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

google::protobuf::FileDescriptor *google::protobuf::DescriptorBuilder::BuildFileImpl(google::protobuf::DescriptorBuilder *this, const google::protobuf::FileDescriptorProto *a2)
{
  google::protobuf::DescriptorBuilder *v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;
  char *v7;
  google::protobuf::FileDescriptor *v8;
  google::protobuf::SourceCodeInfo *v9;
  unsigned int *v10;
  uint64_t v11;
  google::protobuf::SourceCodeInfo **v12;
  char *v13;
  const google::protobuf::SourceCodeInfo *v14;
  uint64_t v15;
  google::protobuf::FileDescriptorTables *v16;
  google::protobuf::FileDescriptorTables **v17;
  char *v18;
  std::string::size_type v19;
  uint64_t *v20;
  int v21;
  BOOL v22;
  int *v23;
  uint64_t v24;
  int v26;
  int v27;
  const std::string::value_type *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 *v33;
  std::string *v34;
  std::string::size_type v35;
  __int128 v36;
  std::string::size_type *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  std::string::size_type v44;
  __int128 *v45;
  std::string *v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  size_t v54;
  char *v55;
  char *v56;
  char *v57;
  google::protobuf::FileDescriptor *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  int v64;
  int v65;
  _QWORD *v66;
  size_t v67;
  char *v68;
  char *v69;
  char *v70;
  void *v71;
  int *v72;
  int v73;
  int v74;
  uint64_t *v75;
  uint64_t **v76;
  uint64_t **v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  const void **v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  std::string::size_type v87;
  uint64_t **v88;
  unint64_t FileByName;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  size_t v98;
  const void *v99;
  uint64_t v100;
  int v101;
  size_t v102;
  const void *v103;
  size_t v104;
  int v105;
  _BOOL4 v106;
  BOOL v107;
  uint64_t *v108;
  const void *v109;
  uint64_t v110;
  const void *v111;
  int v112;
  size_t v113;
  const void *v114;
  size_t v115;
  int v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t **v121;
  uint64_t *v122;
  uint64_t **v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  std::string *v128;
  std::string::size_type v129;
  __int128 v130;
  std::string::size_type *v131;
  uint64_t **v132;
  uint64_t *v133;
  uint64_t **v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  int v139;
  int *v140;
  int v141;
  _QWORD *v142;
  size_t v143;
  char *v144;
  char *v145;
  char *v146;
  int v147;
  google::protobuf::FileDescriptor *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  _QWORD *v156;
  size_t v157;
  char *v158;
  char *v159;
  char *v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t *v167;
  unint64_t v168;
  uint64_t *v169;
  _QWORD *v170;
  unint64_t v171;
  BOOL v172;
  _QWORD *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  int v178;
  int v179;
  int v180;
  int v181;
  uint64_t v182;
  int v183;
  _QWORD *v184;
  size_t v185;
  char *v186;
  char *v187;
  char *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  const google::protobuf::DescriptorProto *v192;
  int v193;
  uint64_t v194;
  int v195;
  _QWORD *v196;
  size_t v197;
  char *v198;
  char *v199;
  char *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  const google::protobuf::EnumDescriptorProto *v204;
  int v205;
  uint64_t v206;
  int v207;
  _QWORD *v208;
  size_t v209;
  char *v210;
  char *v211;
  char *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  _QWORD *v221;
  size_t v222;
  char *v223;
  char *v224;
  char *v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  const google::protobuf::FieldDescriptorProto *v229;
  google::protobuf::FileOptions *v230;
  unsigned int *v231;
  google::protobuf::FileOptions *v232;
  int v233;
  _QWORD *v234;
  google::protobuf::Message *v235;
  const google::protobuf::Message *v236;
  uint64_t *v237;
  const google::protobuf::FieldDescriptor *v238;
  const google::protobuf::FieldDescriptor *v239;
  std::string *v240;
  unsigned int *v241;
  const std::string::value_type ***v242;
  uint64_t v243;
  const char *v244;
  _BYTE *v245;
  _BYTE *v246;
  int64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  int v253;
  unint64_t v254;
  char *v255;
  char *v256;
  int *v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  _DWORD *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  __int128 v267;
  int v268;
  uint64_t *v269;
  const google::protobuf::FieldDescriptor *v270;
  const google::protobuf::FieldDescriptor *v271;
  std::string *v272;
  unsigned int *v273;
  const std::string::value_type ***v274;
  uint64_t v275;
  const char *v276;
  int v277;
  int v278;
  int *v279;
  int *v280;
  int *v281;
  int64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  _BYTE *v287;
  int *v288;
  int *v289;
  unint64_t v290;
  int *v291;
  uint64_t v292;
  uint64_t v293;
  _OWORD *v294;
  int *v295;
  uint64_t v296;
  __int128 v297;
  int v298;
  const std::string::value_type ***v299;
  const char *v300;
  void (***RepeatedMessage)(google::protobuf::UninterpretedOption *__hidden);
  google::protobuf::Message *v302;
  unsigned int *v303;
  uint64_t v304;
  std::string *v305;
  __int128 v306;
  std::string *v307;
  __int128 v308;
  void **v309;
  std::string::size_type v310;
  std::string *v311;
  __int128 v312;
  unsigned int *v313;
  _QWORD *v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  const google::protobuf::DescriptorProto *v319;
  google::protobuf::SourceCodeInfo *v321;
  google::protobuf::DescriptorBuilder *v322;
  uint64_t **v323;
  _QWORD *v324;
  char *v325;
  uint64_t *v326;
  uint64_t v327;
  google::protobuf::FileDescriptorProto *v328;
  google::protobuf::FileDescriptor *v329;
  uint64_t **v330;
  uint64_t *v331;
  uint64_t v332;
  char **v333;
  char *v334[2];
  void *v335[2];
  unsigned __int8 v336;
  std::string v337;
  std::string v338;
  std::string v339;
  void *v340[2];
  std::string::size_type v341;
  void *v342;
  int *v343;
  int *v344;
  std::string v345[2];
  std::string __p;
  _QWORD *v347[3];
  _QWORD *v348[3];
  _QWORD v349[14];

  v3 = this;
  v349[12] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  LODWORD(__p.__r_.__value_.__l.__data_) = 160;
  v5 = *(_QWORD **)(v4 + 192);
  if ((unint64_t)v5 >= *(_QWORD *)(v4 + 200))
  {
    v7 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v4 + 184), (int *)&__p);
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = operator new(0xA0uLL);
    *v5 = v6;
    v5[2] = v6 + 10;
    v6[8] = 0u;
    v6[9] = 0u;
    v6[6] = 0u;
    v6[7] = 0u;
    v6[4] = 0u;
    v6[5] = 0u;
    v6[2] = 0u;
    v6[3] = 0u;
    *v6 = 0u;
    v6[1] = 0u;
    v5[1] = v6 + 10;
    v7 = (char *)(v5 + 3);
    *(_QWORD *)(v4 + 192) = v5 + 3;
  }
  *(_QWORD *)(v4 + 192) = v7;
  v8 = (google::protobuf::FileDescriptor *)*((_QWORD *)v7 - 3);
  *((_QWORD *)v3 + 10) = v8;
  v329 = v8;
  *((_WORD *)v8 + 32) = 0;
  if ((*((_DWORD *)a2 + 4) & 0x10) != 0)
  {
    if (!*((_QWORD *)a2 + 26))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 7535);
      v10 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || source_code_info_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)v345, v10);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
    }
    v11 = *((_QWORD *)v3 + 1);
    v9 = (google::protobuf::SourceCodeInfo *)operator new();
    google::protobuf::SourceCodeInfo::SourceCodeInfo(v9, 0);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v12 = *(google::protobuf::SourceCodeInfo ***)(v11 + 240);
    if ((unint64_t)v12 >= *(_QWORD *)(v11 + 248))
    {
      v13 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v11 + 232), &__p);
      v9 = (google::protobuf::SourceCodeInfo *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      *v12 = v9;
      v13 = (char *)(v12 + 1);
    }
    *(_QWORD *)(v11 + 240) = v13;
    if (*((_QWORD *)a2 + 26))
      v14 = (const google::protobuf::SourceCodeInfo *)*((_QWORD *)a2 + 26);
    else
      v14 = (const google::protobuf::SourceCodeInfo *)&google::protobuf::_SourceCodeInfo_default_instance_;
    google::protobuf::SourceCodeInfo::CopyFrom(v9, v14);
    v321 = v9;
  }
  else
  {
    v9 = (google::protobuf::SourceCodeInfo *)google::protobuf::SourceCodeInfo::default_instance((google::protobuf::SourceCodeInfo *)v7);
    v321 = 0;
  }
  *((_QWORD *)v329 + 19) = v9;
  v15 = *((_QWORD *)v3 + 1);
  v16 = (google::protobuf::FileDescriptorTables *)operator new();
  google::protobuf::FileDescriptorTables::FileDescriptorTables(v16);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  v17 = *(google::protobuf::FileDescriptorTables ***)(v15 + 288);
  if ((unint64_t)v17 >= *(_QWORD *)(v15 + 296))
  {
    v18 = std::vector<std::unique_ptr<google::protobuf::FileDescriptorTables>>::__emplace_back_slow_path<google::protobuf::FileDescriptorTables*&>((char **)(v15 + 280), &__p);
    v19 = __p.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v15 + 288) = v18;
    *((_QWORD *)v3 + 11) = v19;
    *(_QWORD *)(*((_QWORD *)v3 + 10) + 144) = v19;
    if ((*((_BYTE *)a2 + 16) & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    *v17 = v16;
    *(_QWORD *)(v15 + 288) = v17 + 1;
    *((_QWORD *)v3 + 11) = v16;
    *(_QWORD *)(*((_QWORD *)v3 + 10) + 144) = v16;
    if ((*((_BYTE *)a2 + 16) & 1) != 0)
      goto LABEL_20;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  google::protobuf::DescriptorBuilder::AddError((uint64_t)v3, (const std::string::value_type *)&__p, (uint64_t)a2, 10, "Missing field: FileDescriptorProto.name.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v20 = (uint64_t *)*((_QWORD *)a2 + 24);
    v21 = *((char *)v20 + 23);
    if ((v21 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_30;
  }
LABEL_20:
  v20 = (uint64_t *)*((_QWORD *)a2 + 24);
  v21 = *((char *)v20 + 23);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_21:
    if ((_BYTE)v21)
    {
      if (v21 != 6)
        goto LABEL_40;
      v22 = *(_DWORD *)v20 == 1953460848 && *((_WORD *)v20 + 2) == 12911;
      v23 = (int *)v20;
      if (!v22)
        goto LABEL_36;
    }
LABEL_42:
    v30 = *((_QWORD *)v3 + 10);
    v31 = 2;
LABEL_43:
    *(_DWORD *)(v30 + 60) = v31;
    goto LABEL_44;
  }
LABEL_30:
  v24 = v20[1];
  if (!v24)
    goto LABEL_42;
  if (v24 != 6)
    goto LABEL_40;
  v23 = (int *)*v20;
  if (*(_DWORD *)*v20 == 1953460848 && *(_WORD *)(*v20 + 4) == 12911)
    goto LABEL_42;
LABEL_36:
  v26 = *v23;
  v27 = *((unsigned __int16 *)v23 + 2);
  if (v26 == 1953460848 && v27 == 13167)
  {
    v30 = *((_QWORD *)v3 + 10);
    v31 = 3;
    goto LABEL_43;
  }
LABEL_40:
  *(_DWORD *)(*((_QWORD *)v3 + 10) + 60) = 0;
  v29 = (const std::string::value_type *)*((_QWORD *)a2 + 22);
  std::operator+<char>();
  google::protobuf::DescriptorBuilder::AddError((uint64_t)v3, v29, (uint64_t)a2, 10, (const std::string::value_type *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  v32 = *((_QWORD *)v3 + 1);
  v33 = (__int128 *)*((_QWORD *)a2 + 22);
  v34 = (std::string *)operator new();
  v35 = (std::string::size_type)v34;
  if (*((char *)v33 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
  }
  else
  {
    v36 = *v33;
    v34->__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v36;
  }
  __p.__r_.__value_.__r.__words[0] = v35;
  v37 = *(std::string::size_type **)(v32 + 216);
  if ((unint64_t)v37 < *(_QWORD *)(v32 + 224))
  {
    *v37 = v35;
    *(_QWORD *)(v32 + 216) = v37 + 1;
    *(_QWORD *)v329 = v35;
    v38 = *((_QWORD *)v3 + 1);
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      goto LABEL_49;
LABEL_52:
    v45 = (__int128 *)*((_QWORD *)a2 + 23);
    v46 = (std::string *)operator new();
    v39 = (uint64_t)v46;
    if (*((char *)v45 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)v45, *((_QWORD *)v45 + 1));
    }
    else
    {
      v47 = *v45;
      v46->__r_.__value_.__r.__words[2] = *((_QWORD *)v45 + 2);
      *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
    }
    __p.__r_.__value_.__r.__words[0] = v39;
    v48 = *(uint64_t **)(v38 + 216);
    if ((unint64_t)v48 < *(_QWORD *)(v38 + 224))
    {
      *v48 = v39;
      *(_QWORD *)(v38 + 216) = v48 + 1;
      goto LABEL_60;
    }
    goto LABEL_58;
  }
  v43 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v32 + 208), &__p);
  v44 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v32 + 216) = v43;
  *(_QWORD *)v329 = v44;
  v38 = *((_QWORD *)v3 + 1);
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
    goto LABEL_52;
LABEL_49:
  v39 = operator new();
  *(_QWORD *)v39 = 0;
  *(_BYTE *)(v39 + 23) = 0;
  v40 = *(uint64_t **)(v38 + 216);
  v41 = *(_QWORD *)(v38 + 224);
  __p.__r_.__value_.__r.__words[0] = v39;
  if ((unint64_t)v40 >= v41)
  {
LABEL_58:
    v42 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v38 + 208), &__p);
    v39 = __p.__r_.__value_.__r.__words[0];
    goto LABEL_59;
  }
  *v40 = v39;
  v42 = (char *)(v40 + 1);
LABEL_59:
  *(_QWORD *)(v38 + 216) = v42;
LABEL_60:
  *((_QWORD *)v329 + 1) = v39;
  *((_QWORD *)v329 + 2) = *(_QWORD *)v3;
  if ((google::protobuf::DescriptorPool::Tables::AddFile(*((_QWORD **)v3 + 1), (_QWORD **)v329) & 1) != 0)
  {
    v49 = *((_QWORD *)v329 + 1);
    if (*(char *)(v49 + 23) < 0)
    {
      if (!*(_QWORD *)(v49 + 8))
        goto LABEL_67;
    }
    else if (!*(_BYTE *)(v49 + 23))
    {
LABEL_67:
      v334[0] = 0;
      v334[1] = 0;
      v333 = v334;
      v50 = *((_DWORD *)a2 + 8);
      *((_DWORD *)v329 + 8) = v50;
      v51 = *((_QWORD *)v3 + 1);
      v52 = 8 * v50;
      LODWORD(__p.__r_.__value_.__l.__data_) = v52;
      if (v52)
      {
        v53 = *(_QWORD **)(v51 + 192);
        if ((unint64_t)v53 >= *(_QWORD *)(v51 + 200))
        {
          v57 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v51 + 184), (int *)&__p);
        }
        else
        {
          *v53 = 0;
          v53[1] = 0;
          v53[2] = 0;
          if (v52 < 0)
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          v54 = v52;
          v55 = (char *)operator new(v52);
          *v53 = v55;
          v56 = &v55[v54];
          v53[2] = &v55[v54];
          bzero(v55, v54);
          v53[1] = v56;
          v57 = (char *)(v53 + 3);
          *(_QWORD *)(v51 + 192) = v53 + 3;
        }
        *(_QWORD *)(v51 + 192) = v57;
        v58 = v329;
        *((_QWORD *)v329 + 9) = *((_QWORD *)v57 - 3);
        if (*(_BYTE *)(*(_QWORD *)v3 + 41))
        {
LABEL_75:
          v59 = *((_QWORD *)v3 + 1);
          v60 = (_QWORD *)operator new();
          *v60 = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
          v61 = *(_QWORD **)(v59 + 264);
          if ((unint64_t)v61 >= *(_QWORD *)(v59 + 272))
          {
            v62 = std::vector<std::unique_ptr<std::once_flag>>::__emplace_back_slow_path<std::once_flag*&>((char **)(v59 + 256), &__p);
            v60 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            *v61 = v60;
            v62 = (char *)(v61 + 1);
          }
          *(_QWORD *)(v59 + 264) = v62;
          *((_QWORD *)v329 + 3) = v60;
          v63 = *((_QWORD *)v3 + 1);
          v64 = *((_DWORD *)a2 + 8);
          v65 = 8 * v64;
          LODWORD(__p.__r_.__value_.__l.__data_) = 8 * v64;
          if (8 * v64)
          {
            v66 = *(_QWORD **)(v63 + 192);
            if ((unint64_t)v66 >= *(_QWORD *)(v63 + 200))
            {
              v70 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v63 + 184), (int *)&__p);
            }
            else
            {
              *v66 = 0;
              v66[1] = 0;
              v66[2] = 0;
              if (v65 < 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v67 = v65;
              v68 = (char *)operator new(v65);
              *v66 = v68;
              v69 = &v68[v67];
              v66[2] = &v68[v67];
              bzero(v68, v67);
              v66[1] = v69;
              v70 = (char *)(v66 + 3);
              *(_QWORD *)(v63 + 192) = v66 + 3;
            }
            *(_QWORD *)(v63 + 192) = v70;
            v71 = (void *)*((_QWORD *)v70 - 3);
            v64 = *((_DWORD *)a2 + 8);
            *((_QWORD *)v329 + 10) = v71;
            if (v64 >= 1)
              goto LABEL_86;
          }
          else
          {
            v71 = 0;
            *((_QWORD *)v329 + 10) = 0;
            if (v64 >= 1)
LABEL_86:
              bzero(v71, 8 * v64);
          }
LABEL_87:
          v323 = (uint64_t **)((char *)v3 + 120);
          std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v3 + 120, *((_QWORD **)v3 + 16));
          *((_QWORD *)v3 + 15) = (char *)v3 + 128;
          *((_QWORD *)v3 + 16) = 0;
          *((_QWORD *)v3 + 17) = 0;
          v326 = (uint64_t *)((char *)v3 + 128);
          v331 = 0;
          v332 = 0;
          v330 = &v331;
          v72 = (int *)((char *)a2 + 160);
          if (*((int *)a2 + 40) >= 1)
          {
            v73 = 0;
            do
            {
              v74 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get((uint64_t)a2 + 160, v73);
              v75 = v331;
              v76 = &v331;
              v77 = &v331;
              if (v331)
              {
                do
                {
                  while (1)
                  {
                    v77 = (uint64_t **)v75;
                    v78 = *((_DWORD *)v75 + 7);
                    if (v74 >= v78)
                      break;
                    v75 = *v77;
                    v76 = v77;
                    if (!*v77)
                      goto LABEL_98;
                  }
                  if (v78 >= v74)
                    goto LABEL_90;
                  v75 = v77[1];
                }
                while (v75);
                v76 = v77 + 1;
              }
LABEL_98:
              v79 = operator new(0x20uLL);
              v79[7] = v74;
              *(_QWORD *)v79 = 0;
              *((_QWORD *)v79 + 1) = 0;
              *((_QWORD *)v79 + 2) = v77;
              *v76 = (uint64_t *)v79;
              if (*v330)
              {
                v330 = (uint64_t **)*v330;
                v79 = *v76;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v331, (uint64_t *)v79);
              ++v332;
LABEL_90:
              ++v73;
            }
            while (v73 < *v72);
          }
          v322 = v3;
          v328 = a2;
          if (*((int *)a2 + 8) >= 1)
          {
            v80 = 0;
            v81 = (char *)a2 + 24;
            v325 = (char *)a2 + 24;
            do
            {
              v83 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v81, v80);
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v333, v83, (uint64_t)v83);
              if ((v84 & 1) == 0)
                google::protobuf::DescriptorBuilder::AddTwiceListedError(v3, a2, v80);
              v85 = *((_QWORD *)v3 + 1);
              v86 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v81, v80);
              if (*(char *)(v86 + 23) >= 0)
                v87 = v86;
              else
                v87 = *(_QWORD *)v86;
              __p.__r_.__value_.__r.__words[0] = v87;
              v88 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>((_QWORD *)(v85 + 344), (const char **)&__p.__r_.__value_.__l.__data_);
              if (!v88 || (FileByName = (unint64_t)v88[3]) == 0)
              {
                v90 = *(_QWORD *)(*(_QWORD *)v3 + 24);
                if (!v90)
                {
                  if (!v329)
                    goto LABEL_425;
                  goto LABEL_159;
                }
                v91 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v81, v80);
                FileByName = google::protobuf::DescriptorPool::FindFileByName(v90, v91);
              }
              if ((google::protobuf::FileDescriptor *)FileByName == v329)
                goto LABEL_425;
              if (FileByName)
              {
                v92 = *(_QWORD *)v3;
                if (*(_BYTE *)(*(_QWORD *)v3 + 40))
                {
                  v95 = *(_QWORD *)(v92 + 56);
                  v93 = v92 + 56;
                  v94 = v95;
                  if (v95)
                  {
                    v96 = *((_QWORD *)a2 + 22);
                    v97 = *(char *)(v96 + 23);
                    if (v97 >= 0)
                      v98 = *(unsigned __int8 *)(v96 + 23);
                    else
                      v98 = *(_QWORD *)(v96 + 8);
                    if (v97 >= 0)
                      v99 = (const void *)*((_QWORD *)a2 + 22);
                    else
                      v99 = *(const void **)v96;
                    v100 = v93;
                    do
                    {
                      v101 = *(char *)(v94 + 55);
                      if (v101 >= 0)
                        v102 = *(unsigned __int8 *)(v94 + 55);
                      else
                        v102 = *(_QWORD *)(v94 + 40);
                      if (v101 >= 0)
                        v103 = (const void *)(v94 + 32);
                      else
                        v103 = *(const void **)(v94 + 32);
                      if (v98 >= v102)
                        v104 = v102;
                      else
                        v104 = v98;
                      v105 = memcmp(v103, v99, v104);
                      v106 = v102 < v98;
                      if (v105)
                        v106 = v105 < 0;
                      v107 = !v106;
                      if (v106)
                        v108 = (uint64_t *)(v94 + 8);
                      else
                        v108 = (uint64_t *)v94;
                      if (v107)
                        v100 = v94;
                      v94 = *v108;
                    }
                    while (*v108);
                    if (v100 == v93)
                    {
                      v3 = v322;
                    }
                    else
                    {
                      v111 = *(const void **)(v100 + 32);
                      v110 = v100 + 32;
                      v109 = v111;
                      v112 = *(char *)(v110 + 23);
                      if (v112 >= 0)
                        v113 = *(unsigned __int8 *)(v110 + 23);
                      else
                        v113 = *(_QWORD *)(v110 + 8);
                      if (v112 >= 0)
                        v114 = (const void *)v110;
                      else
                        v114 = v109;
                      if (v113 >= v98)
                        v115 = v98;
                      else
                        v115 = v113;
                      v116 = memcmp(v99, v114, v115);
                      v117 = v98 >= v113;
                      if (v116)
                        v117 = v116 >= 0;
                      v3 = v322;
                      if (v117)
                      {
                        v81 = v325;
                        if (*(_DWORD *)(FileByName + 36))
                        {
                          a2 = v328;
                        }
                        else
                        {
                          v132 = (uint64_t **)v326;
                          a2 = v328;
                          v133 = (uint64_t *)*v326;
                          v134 = (uint64_t **)v326;
                          if (*v326)
                          {
                            do
                            {
                              while (1)
                              {
                                v132 = (uint64_t **)v133;
                                v135 = v133[4];
                                if (FileByName >= v135)
                                  break;
                                v133 = *v132;
                                v134 = v132;
                                if (!*v132)
                                  goto LABEL_195;
                              }
                              if (v135 >= FileByName)
                                goto LABEL_178;
                              v133 = v132[1];
                            }
                            while (v133);
                            v134 = v132 + 1;
                          }
LABEL_195:
                          v136 = (uint64_t *)operator new(0x28uLL);
                          v136[4] = FileByName;
                          *v136 = 0;
                          v136[1] = 0;
                          v136[2] = (uint64_t)v132;
                          *v134 = v136;
                          v137 = (uint64_t *)**v323;
                          if (v137)
                          {
                            *v323 = v137;
                            v136 = *v134;
                          }
                          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v322 + 16), v136);
                          ++*((_QWORD *)v322 + 17);
                        }
                        goto LABEL_178;
                      }
                    }
                    a2 = v328;
                    v81 = v325;
                  }
                  else
                  {
                    v3 = v322;
                  }
                }
                goto LABEL_178;
              }
LABEL_159:
              v118 = *(_QWORD *)v3;
              if (!*(_BYTE *)(*(_QWORD *)v3 + 41))
              {
                if (*(_BYTE *)(v118 + 42))
                  goto LABEL_162;
                if (!*(_BYTE *)(v118 + 43))
                {
                  v120 = v331;
                  if (v331)
                  {
                    v121 = &v331;
                    do
                    {
                      v122 = v120;
                      v123 = v121;
                      v124 = *((int *)v120 + 7);
                      if (v80 <= v124)
                        v121 = (uint64_t **)v120;
                      else
                        ++v120;
                      v120 = (uint64_t *)*v120;
                    }
                    while (v120);
                    if (v121 != &v331)
                    {
                      if (v80 > v124)
                        v122 = (uint64_t *)v123;
                      if (v80 >= *((int *)v122 + 7))
                      {
LABEL_162:
                        v119 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v81, v80);
                        FileByName = google::protobuf::DescriptorPool::NewPlaceholderFileWithMutexHeld(v118, v119);
                        goto LABEL_178;
                      }
                    }
                  }
                }
                google::protobuf::DescriptorBuilder::AddImportError(v3, a2, v80);
              }
              FileByName = 0;
LABEL_178:
              *(_QWORD *)(*((_QWORD *)v329 + 9) + 8 * v80) = FileByName;
              if (*(_BYTE *)(*(_QWORD *)v3 + 41))
                v125 = FileByName == 0;
              else
                v125 = 0;
              if (v125)
              {
                v126 = *((_QWORD *)v3 + 1);
                v127 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v81, v80);
                v128 = (std::string *)operator new();
                v129 = (std::string::size_type)v128;
                if (*(char *)(v127 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v128, *(const std::string::value_type **)v127, *(_QWORD *)(v127 + 8));
                }
                else
                {
                  v130 = *(_OWORD *)v127;
                  v128->__r_.__value_.__r.__words[2] = *(_QWORD *)(v127 + 16);
                  *(_OWORD *)&v128->__r_.__value_.__l.__data_ = v130;
                }
                __p.__r_.__value_.__r.__words[0] = v129;
                v131 = *(std::string::size_type **)(v126 + 216);
                if ((unint64_t)v131 < *(_QWORD *)(v126 + 224))
                {
                  *v131 = v129;
                  v82 = (char *)(v131 + 1);
                }
                else
                {
                  v82 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v126 + 208), &__p);
                  v129 = __p.__r_.__value_.__r.__words[0];
                }
                *(_QWORD *)(v126 + 216) = v82;
                *(_QWORD *)(*((_QWORD *)v329 + 10) + 8 * v80) = v129;
              }
              ++v80;
            }
            while (v80 < *((int *)a2 + 8));
          }
          v138 = *((_QWORD *)v3 + 1);
          v140 = (int *)((char *)a2 + 144);
          v139 = *((_DWORD *)a2 + 36);
          v141 = 4 * v139;
          LODWORD(__p.__r_.__value_.__l.__data_) = 4 * v139;
          if (4 * v139)
          {
            v142 = *(_QWORD **)(v138 + 192);
            if ((unint64_t)v142 >= *(_QWORD *)(v138 + 200))
            {
              v146 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v138 + 184), (int *)&__p);
            }
            else
            {
              *v142 = 0;
              v142[1] = 0;
              v142[2] = 0;
              if (v141 < 0)
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              v143 = v141;
              v144 = (char *)operator new(v141);
              *v142 = v144;
              v145 = &v144[v143];
              v142[2] = &v144[v143];
              bzero(v144, v143);
              v142[1] = v145;
              v146 = (char *)(v142 + 3);
              *(_QWORD *)(v138 + 192) = v142 + 3;
            }
            *(_QWORD *)(v138 + 192) = v146;
            v162 = *v140;
            *((_QWORD *)v329 + 11) = *((_QWORD *)v146 - 3);
            if (v162 >= 1)
              goto LABEL_220;
          }
          else
          {
            *((_QWORD *)v329 + 11) = 0;
            if (v139 >= 1)
            {
LABEL_220:
              v163 = 0;
              v147 = 0;
              do
              {
                v164 = *(unsigned int *)google::protobuf::RepeatedField<int>::Get((uint64_t)v140, v163);
                if ((v164 & 0x80000000) != 0 || (int)v164 >= *((_DWORD *)v328 + 8))
                {
                  google::protobuf::DescriptorBuilder::AddError((uint64_t)v3, *((const std::string::value_type **)v328 + 22), (uint64_t)v328, 10, "Invalid public dependency index.");
                }
                else
                {
                  *(_DWORD *)(*((_QWORD *)v329 + 11) + 4 * v147) = v164;
                  if (*(_BYTE *)(*(_QWORD *)v3 + 41))
                    goto LABEL_226;
                  v165 = (unint64_t *)*((_QWORD *)v329 + 3);
                  if (v165)
                  {
                    v342 = v329;
                    v166 = atomic_load(v165);
                    if (v166 != -1)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FileDescriptor::DependenciesOnceInit;
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v342;
                      v345[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                      std::__call_once(v165, v345, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FileDescriptor const*),google::protobuf::FileDescriptor const*&&>>);
                    }
                  }
                  v167 = (uint64_t *)*v326;
                  if (!*v326)
                  {
LABEL_226:
                    ++v147;
                  }
                  else
                  {
                    v168 = *(_QWORD *)(*((_QWORD *)v329 + 9) + 8 * v164);
                    v169 = v326;
                    v170 = (_QWORD *)*v326;
                    do
                    {
                      v171 = v170[4];
                      v172 = v171 >= v168;
                      if (v171 >= v168)
                        v173 = v170;
                      else
                        v173 = v170 + 1;
                      if (v172)
                        v169 = v170;
                      v170 = (_QWORD *)*v173;
                    }
                    while (*v173);
                    if (v169 == v326 || v168 < v169[4])
                    {
                      ++v147;
                      v3 = v322;
                    }
                    else
                    {
                      v174 = (uint64_t *)v169[1];
                      v175 = v169;
                      if (v174)
                      {
                        do
                        {
                          v176 = v174;
                          v174 = (uint64_t *)*v174;
                        }
                        while (v174);
                      }
                      else
                      {
                        do
                        {
                          v176 = (uint64_t *)v175[2];
                          v22 = *v176 == (_QWORD)v175;
                          v175 = v176;
                        }
                        while (!v22);
                      }
                      if (*v323 == v169)
                        *v323 = v176;
                      --*((_QWORD *)v322 + 17);
                      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v167, v169);
                      v177 = v169;
                      v3 = v322;
                      operator delete(v177);
                      ++v147;
                    }
                  }
                }
                ++v163;
              }
              while (v163 < *v140);
LABEL_204:
              v148 = v329;
              *((_DWORD *)v329 + 9) = v147;
              std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v3 + 96, *((_QWORD **)v3 + 13));
              *((_QWORD *)v3 + 12) = (char *)v3 + 104;
              *((_QWORD *)v3 + 14) = 0;
              *((_QWORD *)v3 + 13) = 0;
              v149 = (uint64_t)v328;
              if (!*(_BYTE *)(*(_QWORD *)v3 + 41) && *((int *)v329 + 8) >= 1)
              {
                v150 = 0;
                do
                {
                  v151 = (unint64_t *)*((_QWORD *)v148 + 3);
                  if (v151)
                  {
                    v342 = v148;
                    v152 = atomic_load(v151);
                    if (v152 != -1)
                    {
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FileDescriptor::DependenciesOnceInit;
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v342;
                      v345[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                      std::__call_once(v151, v345, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FileDescriptor const*),google::protobuf::FileDescriptor const*&&>>);
                    }
                    v148 = v329;
                  }
                  google::protobuf::DescriptorBuilder::RecordPublicDependencies((uint64_t *)v3, *(_QWORD *)(*((_QWORD *)v148 + 9) + 8 * v150++));
                }
                while (v150 < *((int *)v148 + 8));
              }
              v153 = *((_QWORD *)v3 + 1);
              v154 = *v72;
              v155 = 4 * *v72;
              LODWORD(__p.__r_.__value_.__l.__data_) = v155;
              if (v155)
              {
                v156 = *(_QWORD **)(v153 + 192);
                if ((unint64_t)v156 >= *(_QWORD *)(v153 + 200))
                {
                  v160 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v153 + 184), (int *)&__p);
                }
                else
                {
                  *v156 = 0;
                  v156[1] = 0;
                  v156[2] = 0;
                  if (v155 < 0)
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  v157 = v155;
                  v158 = (char *)operator new(v155);
                  *v156 = v158;
                  v159 = &v158[v157];
                  v156[2] = &v158[v157];
                  bzero(v158, v157);
                  v156[1] = v159;
                  v160 = (char *)(v156 + 3);
                  *(_QWORD *)(v153 + 192) = v156 + 3;
                }
                *(_QWORD *)(v153 + 192) = v160;
                v178 = *v72;
                *((_QWORD *)v329 + 12) = *((_QWORD *)v160 - 3);
                if (v178 >= 1)
                {
LABEL_252:
                  v179 = 0;
                  v161 = 0;
                  do
                  {
                    while (1)
                    {
                      v180 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get((uint64_t)v72, v179);
                      if ((v180 & 0x80000000) == 0 && v180 < *((_DWORD *)v328 + 8))
                        break;
                      google::protobuf::DescriptorBuilder::AddError((uint64_t)v3, *((const std::string::value_type **)v328 + 22), (uint64_t)v328, 10, "Invalid weak dependency index.");
                      if (++v179 >= *v72)
                        goto LABEL_257;
                    }
                    *(_DWORD *)(*((_QWORD *)v329 + 12) + 4 * v161++) = v180;
                    ++v179;
                  }
                  while (v179 < *v72);
LABEL_257:
                  *((_DWORD *)v329 + 10) = v161;
                  v181 = *((_DWORD *)v328 + 14);
                  *((_DWORD *)v329 + 11) = v181;
                  v182 = *((_QWORD *)v3 + 1);
                  v183 = 144 * v181;
                  LODWORD(__p.__r_.__value_.__l.__data_) = 144 * v181;
                  if (144 * v181)
                  {
                    v184 = *(_QWORD **)(v182 + 192);
                    if ((unint64_t)v184 >= *(_QWORD *)(v182 + 200))
                    {
                      v188 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v182 + 184), (int *)&__p);
                    }
                    else
                    {
                      *v184 = 0;
                      v184[1] = 0;
                      v184[2] = 0;
                      if (v183 < 0)
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      v185 = v183;
                      v186 = (char *)operator new(v183);
                      *v184 = v186;
                      v187 = &v186[v185];
                      v184[2] = &v186[v185];
                      bzero(v186, v185);
                      v184[1] = v187;
                      v188 = (char *)(v184 + 3);
                      *(_QWORD *)(v182 + 192) = v184 + 3;
                    }
                    *(_QWORD *)(v182 + 192) = v188;
                    v189 = *((_DWORD *)v328 + 14);
                    *((_QWORD *)v329 + 13) = *((_QWORD *)v188 - 3);
                    if (v189 < 1)
                    {
LABEL_267:
                      v193 = *((_DWORD *)v328 + 20);
                      *((_DWORD *)v329 + 12) = v193;
                      v194 = *((_QWORD *)v3 + 1);
                      v195 = 80 * v193;
                      LODWORD(__p.__r_.__value_.__l.__data_) = 80 * v193;
                      if (80 * v193)
                      {
                        v196 = *(_QWORD **)(v194 + 192);
                        if ((unint64_t)v196 >= *(_QWORD *)(v194 + 200))
                        {
                          v200 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v194 + 184), (int *)&__p);
                        }
                        else
                        {
                          *v196 = 0;
                          v196[1] = 0;
                          v196[2] = 0;
                          if (v195 < 0)
                            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                          v197 = v195;
                          v198 = (char *)operator new(v195);
                          *v196 = v198;
                          v199 = &v198[v197];
                          v196[2] = &v198[v197];
                          bzero(v198, v197);
                          v196[1] = v199;
                          v200 = (char *)(v196 + 3);
                          *(_QWORD *)(v194 + 192) = v196 + 3;
                        }
                        *(_QWORD *)(v194 + 192) = v200;
                        v201 = *((_DWORD *)v328 + 20);
                        *((_QWORD *)v329 + 14) = *((_QWORD *)v200 - 3);
                        if (v201 < 1)
                        {
LABEL_277:
                          v205 = *((_DWORD *)v328 + 26);
                          *((_DWORD *)v329 + 13) = v205;
                          v206 = *((_QWORD *)v3 + 1);
                          v207 = 48 * v205;
                          LODWORD(__p.__r_.__value_.__l.__data_) = 48 * v205;
                          if (48 * v205)
                          {
                            v208 = *(_QWORD **)(v206 + 192);
                            if ((unint64_t)v208 >= *(_QWORD *)(v206 + 200))
                            {
                              v212 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v206 + 184), (int *)&__p);
                            }
                            else
                            {
                              *v208 = 0;
                              v208[1] = 0;
                              v208[2] = 0;
                              if (v207 < 0)
                                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                              v209 = v207;
                              v210 = (char *)operator new(v207);
                              *v208 = v210;
                              v211 = &v210[v209];
                              v208[2] = &v210[v209];
                              bzero(v210, v209);
                              v208[1] = v211;
                              v212 = (char *)(v208 + 3);
                              *(_QWORD *)(v206 + 192) = v208 + 3;
                            }
                            *(_QWORD *)(v206 + 192) = v212;
                            v213 = *((_DWORD *)v328 + 26);
                            *((_QWORD *)v329 + 15) = *((_QWORD *)v212 - 3);
                            if (v213 < 1)
                            {
LABEL_287:
                              v218 = *((_DWORD *)v328 + 32);
                              *((_DWORD *)v329 + 14) = v218;
                              v219 = *((_QWORD *)v3 + 1);
                              v220 = 152 * v218;
                              LODWORD(__p.__r_.__value_.__l.__data_) = 152 * v218;
                              if (152 * v218)
                              {
                                v221 = *(_QWORD **)(v219 + 192);
                                if ((unint64_t)v221 >= *(_QWORD *)(v219 + 200))
                                {
                                  v225 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v219 + 184), (int *)&__p);
                                }
                                else
                                {
                                  *v221 = 0;
                                  v221[1] = 0;
                                  v221[2] = 0;
                                  if (v220 < 0)
                                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                  v222 = v220;
                                  v223 = (char *)operator new(v220);
                                  *v221 = v223;
                                  v224 = &v223[v222];
                                  v221[2] = &v223[v222];
                                  bzero(v223, v222);
                                  v221[1] = v224;
                                  v225 = (char *)(v221 + 3);
                                  *(_QWORD *)(v219 + 192) = v221 + 3;
                                }
                                *(_QWORD *)(v219 + 192) = v225;
                                v226 = *((_DWORD *)v328 + 32);
                                *((_QWORD *)v329 + 16) = *((_QWORD *)v225 - 3);
                                if (v226 < 1)
                                  goto LABEL_297;
                              }
                              else
                              {
                                *((_QWORD *)v329 + 16) = 0;
                                if (v218 < 1)
                                {
LABEL_297:
                                  *((_QWORD *)v329 + 17) = 0;
                                  if ((*((_DWORD *)v328 + 4) & 8) != 0)
                                  {
                                    v230 = (google::protobuf::FileOptions *)*((_QWORD *)v328 + 25);
                                    if (!v230)
                                    {
                                      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 7454);
                                      v231 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || options_ != nullptr: ");
                                      google::protobuf::internal::LogFinisher::operator=((uint64_t)v345, v231);
                                      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
                                      v230 = (google::protobuf::FileOptions *)*((_QWORD *)v328 + 25);
                                    }
                                    if (v230)
                                      v232 = v230;
                                    else
                                      v232 = (google::protobuf::FileOptions *)&google::protobuf::_FileOptions_default_instance_;
                                    google::protobuf::DescriptorBuilder::AllocateOptions((uint64_t)v3, v232, (uint64_t *)v329);
                                  }
                                  google::protobuf::DescriptorBuilder::CrossLinkFile(v3, v329, v328);
                                  if (*((_BYTE *)v3 + 48))
                                  {
                                    v233 = 1;
                                    goto LABEL_420;
                                  }
                                  google::protobuf::DescriptorBuilder::OptionInterpreter::OptionInterpreter((google::protobuf::DescriptorBuilder::OptionInterpreter *)&__p, v3);
                                  v234 = (_QWORD *)*((_QWORD *)v3 + 3);
                                  if (v234 == *((_QWORD **)v3 + 4))
                                    goto LABEL_417;
                                  while (1)
                                  {
                                    v236 = (const google::protobuf::Message *)v234[9];
                                    v235 = (google::protobuf::Message *)v234[10];
                                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v234;
                                    v237 = (uint64_t *)(*(uint64_t (**)(google::protobuf::Message *))(*(_QWORD *)v235 + 152))(v235);
                                    *((_BYTE *)&v345[0].__r_.__value_.__s + 23) = 20;
                                    strcpy((char *)v345, "uninterpreted_option");
                                    if (google::protobuf::FileDescriptorTables::FindNestedSymbol(*(_QWORD **)(v237[2] + 144), v237, (uint64_t)v345) == 2)
                                    {
                                      if (*((_BYTE *)v238 + 67))
                                        v239 = 0;
                                      else
                                        v239 = v238;
                                      if (SHIBYTE(v345[0].__r_.__value_.__r.__words[2]) < 0)
                                      {
LABEL_317:
                                        operator delete(v345[0].__r_.__value_.__l.__data_);
                                        if (v239)
                                          goto LABEL_319;
                                        goto LABEL_318;
                                      }
                                    }
                                    else
                                    {
                                      v239 = 0;
                                      if (SHIBYTE(v345[0].__r_.__value_.__r.__words[2]) < 0)
                                        goto LABEL_317;
                                    }
                                    if (v239)
                                      goto LABEL_319;
LABEL_318:
                                    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v345, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 6410);
                                    v240 = google::protobuf::internal::LogMessage::operator<<(v345, "CHECK failed: uninterpreted_options_field != nullptr: ");
                                    v241 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v240, "No field named \"uninterpreted_option\" in the Options proto.");
                                    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v342, v241);
                                    google::protobuf::internal::LogMessage::~LogMessage((void **)&v345[0].__r_.__value_.__l.__data_);
LABEL_319:
                                    (*(void (**)(google::protobuf::Message *))(*(_QWORD *)v235 + 152))(v235);
                                    google::protobuf::Reflection::ClearField(v242, v235, v239, v243, v244);
                                    v245 = (_BYTE *)v234[6];
                                    v342 = 0;
                                    v343 = 0;
                                    v344 = 0;
                                    v327 = (uint64_t)(v234 + 6);
                                    v246 = (_BYTE *)v234[7];
                                    v247 = v246 - v245;
                                    if (v246 == v245)
                                    {
                                      v248 = 0;
                                      v249 = 0;
                                      v324 = v234;
                                      v250 = 0;
                                      v251 = 0;
                                      v252 = 1;
                                    }
                                    else
                                    {
                                      if (v247 < 0)
                                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                      v248 = (char *)operator new(v246 - v245);
                                      v342 = v248;
                                      v343 = (int *)v248;
                                      v249 = &v248[4 * (v247 >> 2)];
                                      v344 = (int *)v249;
                                      memcpy(v248, v245, v247);
                                      v343 = (int *)v249;
                                      v324 = v234;
                                      v250 = 4 * (v247 >> 2);
                                      v251 = v250 >> 2;
                                      v252 = (v250 >> 2) + 1;
                                      if (v252 >> 62)
                                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                    }
                                    v253 = *((_DWORD *)v239 + 17);
                                    if (v250 >> 1 > v252)
                                      v252 = v250 >> 1;
                                    if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL)
                                      v254 = 0x3FFFFFFFFFFFFFFFLL;
                                    else
                                      v254 = v252;
                                    if (v254)
                                    {
                                      if (v254 >> 62)
                                        std::__throw_bad_array_new_length[abi:ne180100]();
                                      v255 = (char *)operator new(4 * v254);
                                      v256 = &v255[4 * v251];
                                      *(_DWORD *)v256 = v253;
                                      v257 = (int *)(v256 + 4);
                                      v258 = v249 - v248;
                                      if (v249 == v248)
                                      {
LABEL_335:
                                        v149 = (uint64_t)v328;
                                        goto LABEL_340;
                                      }
                                    }
                                    else
                                    {
                                      v255 = 0;
                                      v256 = (char *)(4 * v251);
                                      v261 = (_DWORD *)(4 * v251);
                                      *v261 = v253;
                                      v257 = v261 + 1;
                                      v258 = v249 - v248;
                                      if (v249 == v248)
                                        goto LABEL_335;
                                    }
                                    v259 = v258 - 4;
                                    if (v259 < 0x1C)
                                    {
                                      v260 = v249;
                                      v149 = (uint64_t)v328;
                                      do
                                      {
LABEL_339:
                                        v268 = *((_DWORD *)v260 - 1);
                                        v260 -= 4;
                                        *((_DWORD *)v256 - 1) = v268;
                                        v256 -= 4;
                                      }
                                      while (v260 != v248);
                                      goto LABEL_340;
                                    }
                                    v262 = (v259 >> 2) + 1;
                                    v263 = 4 * (v262 & 0x7FFFFFFFFFFFFFF8);
                                    v260 = &v249[-v263];
                                    v256 -= v263;
                                    v264 = &v255[v250 - 16];
                                    v265 = v249 - 16;
                                    v266 = v262 & 0x7FFFFFFFFFFFFFF8;
                                    do
                                    {
                                      v267 = *(_OWORD *)v265;
                                      *((_OWORD *)v264 - 1) = *((_OWORD *)v265 - 1);
                                      *(_OWORD *)v264 = v267;
                                      v264 -= 32;
                                      v265 -= 32;
                                      v266 -= 8;
                                    }
                                    while (v266);
                                    v149 = (uint64_t)v328;
                                    if (v262 != (v262 & 0x7FFFFFFFFFFFFFF8))
                                      goto LABEL_339;
LABEL_340:
                                    v342 = v256;
                                    v343 = v257;
                                    v344 = (int *)&v255[4 * v254];
                                    if (v248)
                                      operator delete(v248);
                                    v343 = v257;
                                    v269 = (uint64_t *)(*(uint64_t (**)(const google::protobuf::Message *))(*(_QWORD *)v236 + 152))(v236);
                                    *((_BYTE *)&v345[0].__r_.__value_.__s + 23) = 20;
                                    strcpy((char *)v345, "uninterpreted_option");
                                    if (google::protobuf::FileDescriptorTables::FindNestedSymbol(*(_QWORD **)(v269[2] + 144), v269, (uint64_t)v345) == 2)
                                    {
                                      if (*((_BYTE *)v270 + 67))
                                        v271 = 0;
                                      else
                                        v271 = v270;
                                      if (SHIBYTE(v345[0].__r_.__value_.__r.__words[2]) < 0)
                                      {
LABEL_350:
                                        operator delete(v345[0].__r_.__value_.__l.__data_);
                                        if (v271)
                                          goto LABEL_352;
                                        goto LABEL_351;
                                      }
                                    }
                                    else
                                    {
                                      v271 = 0;
                                      if (SHIBYTE(v345[0].__r_.__value_.__r.__words[2]) < 0)
                                        goto LABEL_350;
                                    }
                                    if (v271)
                                      goto LABEL_352;
LABEL_351:
                                    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v345, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 6421);
                                    v272 = google::protobuf::internal::LogMessage::operator<<(v345, "CHECK failed: original_uninterpreted_options_field != nullptr: ");
                                    v273 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v272, "No field named \"uninterpreted_option\" in the Options proto.");
                                    google::protobuf::internal::LogFinisher::operator=((uint64_t)v340, v273);
                                    google::protobuf::internal::LogMessage::~LogMessage((void **)&v345[0].__r_.__value_.__l.__data_);
LABEL_352:
                                    (*(void (**)(const google::protobuf::Message *))(*(_QWORD *)v236 + 152))(v236);
                                    v277 = google::protobuf::Reflection::FieldSize(v274, v236, v271, v275, v276);
                                    if (v277 >= 1)
                                    {
                                      v278 = 0;
                                      v279 = v343;
                                      while (1)
                                      {
                                        if (v279 < v344)
                                        {
                                          *v279 = v278;
                                          v280 = v279 + 1;
                                          goto LABEL_377;
                                        }
                                        v281 = (int *)v342;
                                        v282 = (char *)v279 - (_BYTE *)v342;
                                        v283 = ((char *)v279 - (_BYTE *)v342) >> 2;
                                        v284 = v283 + 1;
                                        if ((unint64_t)(v283 + 1) >> 62)
                                          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                                        v285 = (char *)v344 - (_BYTE *)v342;
                                        if (((char *)v344 - (_BYTE *)v342) >> 1 > v284)
                                          v284 = v285 >> 1;
                                        v286 = (unint64_t)v285 >= 0x7FFFFFFFFFFFFFFCLL
                                             ? 0x3FFFFFFFFFFFFFFFLL
                                             : v284;
                                        if (v286)
                                        {
                                          if (v286 >> 62)
                                            std::__throw_bad_array_new_length[abi:ne180100]();
                                          v287 = operator new(4 * v286);
                                          v288 = (int *)&v287[4 * v283];
                                          *v288 = v278;
                                          v280 = v288 + 1;
                                          if (v279 == v281)
                                            goto LABEL_375;
                                        }
                                        else
                                        {
                                          v287 = 0;
                                          v288 = (int *)(4 * v283);
                                          v289 = (int *)(4 * v283);
                                          *v289 = v278;
                                          v280 = v289 + 1;
                                          if (v279 == v281)
                                            goto LABEL_375;
                                        }
                                        v290 = (char *)(v279 - 1) - (char *)v281;
                                        if (v290 < 0x2C)
                                          break;
                                        if ((unint64_t)((char *)v279 - v287 - v282) < 0x20)
                                        {
                                          v291 = v279;
                                          do
                                          {
LABEL_374:
                                            v298 = *--v291;
                                            *--v288 = v298;
                                          }
                                          while (v291 != v281);
                                          goto LABEL_375;
                                        }
                                        v292 = (v290 >> 2) + 1;
                                        v293 = 4 * (v292 & 0x7FFFFFFFFFFFFFF8);
                                        v291 = &v279[v293 / 0xFFFFFFFFFFFFFFFCLL];
                                        v288 = (int *)((char *)v288 - v293);
                                        v294 = &v287[v282 - 16];
                                        v295 = v279 - 4;
                                        v296 = v292 & 0x7FFFFFFFFFFFFFF8;
                                        do
                                        {
                                          v297 = *(_OWORD *)v295;
                                          *(v294 - 1) = *((_OWORD *)v295 - 1);
                                          *v294 = v297;
                                          v294 -= 2;
                                          v295 -= 8;
                                          v296 -= 8;
                                        }
                                        while (v296);
                                        if (v292 != (v292 & 0x7FFFFFFFFFFFFFF8))
                                          goto LABEL_374;
LABEL_375:
                                        v342 = v288;
                                        v343 = v280;
                                        v344 = (int *)&v287[4 * v286];
                                        if (v281)
                                          operator delete(v281);
LABEL_377:
                                        v343 = v280;
                                        (*(void (**)(const google::protobuf::Message *))(*(_QWORD *)v236
                                                                                                  + 152))(v236);
                                        RepeatedMessage = (void (***)(google::protobuf::UninterpretedOption *__hidden))google::protobuf::Reflection::GetRepeatedMessage(v299, v236, v271, v278, v300);
                                        if (*RepeatedMessage != &off_24F989120)
                                          __assert_rtn("down_cast", "casts.h", 94, "f == nullptr || dynamic_cast<To>(f) != nullptr");
                                        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)RepeatedMessage;
                                        if ((google::protobuf::DescriptorBuilder::OptionInterpreter::InterpretSingleOption((uint64_t *)&__p, v235, (int **)&v342, v327) & 1) == 0)
                                        {
                                          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                                          v3 = v322;
                                          v149 = (uint64_t)v328;
                                          goto LABEL_400;
                                        }
                                        v279 = --v343;
                                        ++v278;
                                        v149 = (uint64_t)v328;
                                        if (v278 == v277)
                                          goto LABEL_380;
                                      }
                                      v291 = v279;
                                      goto LABEL_374;
                                    }
LABEL_380:
                                    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
                                    v302 = (google::protobuf::Message *)(*(uint64_t (**)(google::protobuf::Message *))(*(_QWORD *)v235 + 24))(v235);
                                    (*(void (**)(google::protobuf::Message *))(*(_QWORD *)v235 + 152))(v235);
                                    v3 = v322;
                                    google::protobuf::Reflection::Swap(v303, v302, v235);
                                    memset(v345, 0, 24);
                                    if (!google::protobuf::MessageLite::AppendToString(v302, v345)
                                      || (google::protobuf::MessageLite::ParseFromString(v235, v345) & 1) == 0)
                                    {
                                      v304 = __p.__r_.__value_.__r.__words[0];
                                      google::protobuf::Message::ShortDebugString(v302, (uint64_t)&v337);
                                      v305 = std::string::insert(&v337, 0, "Some options could not be correctly parsed using the proto descriptors compiled into this binary.\nUnparsed options: ");
                                      v306 = *(_OWORD *)&v305->__r_.__value_.__l.__data_;
                                      v338.__r_.__value_.__r.__words[2] = v305->__r_.__value_.__r.__words[2];
                                      *(_OWORD *)&v338.__r_.__value_.__l.__data_ = v306;
                                      v305->__r_.__value_.__l.__size_ = 0;
                                      v305->__r_.__value_.__r.__words[2] = 0;
                                      v305->__r_.__value_.__r.__words[0] = 0;
                                      v307 = std::string::append(&v338, "\nParsing attempt:  ");
                                      v308 = *(_OWORD *)&v307->__r_.__value_.__l.__data_;
                                      v339.__r_.__value_.__r.__words[2] = v307->__r_.__value_.__r.__words[2];
                                      *(_OWORD *)&v339.__r_.__value_.__l.__data_ = v308;
                                      v307->__r_.__value_.__l.__size_ = 0;
                                      v307->__r_.__value_.__r.__words[2] = 0;
                                      v307->__r_.__value_.__r.__words[0] = 0;
                                      google::protobuf::Message::ShortDebugString(v235, (uint64_t)v335);
                                      if ((v336 & 0x80u) == 0)
                                        v309 = v335;
                                      else
                                        v309 = (void **)v335[0];
                                      if ((v336 & 0x80u) == 0)
                                        v310 = v336;
                                      else
                                        v310 = (std::string::size_type)v335[1];
                                      v311 = std::string::append(&v339, (const std::string::value_type *)v309, v310);
                                      v312 = *(_OWORD *)&v311->__r_.__value_.__l.__data_;
                                      v341 = v311->__r_.__value_.__r.__words[2];
                                      *(_OWORD *)v340 = v312;
                                      v311->__r_.__value_.__l.__size_ = 0;
                                      v311->__r_.__value_.__r.__words[2] = 0;
                                      v311->__r_.__value_.__r.__words[0] = 0;
                                      google::protobuf::DescriptorBuilder::AddError(v304, (const std::string::value_type *)v324 + 24, (uint64_t)v236, 10, (const std::string::value_type *)v340);
                                      if (SHIBYTE(v341) < 0)
                                      {
                                        operator delete(v340[0]);
                                        if ((char)v336 < 0)
                                          goto LABEL_403;
LABEL_390:
                                        if ((SHIBYTE(v339.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          goto LABEL_391;
LABEL_404:
                                        operator delete(v339.__r_.__value_.__l.__data_);
                                        if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
                                          goto LABEL_405;
LABEL_392:
                                        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
LABEL_406:
                                          operator delete(v337.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        if (((char)v336 & 0x80000000) == 0)
                                          goto LABEL_390;
LABEL_403:
                                        operator delete(v335[0]);
                                        if (SHIBYTE(v339.__r_.__value_.__r.__words[2]) < 0)
                                          goto LABEL_404;
LABEL_391:
                                        if ((SHIBYTE(v338.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          goto LABEL_392;
LABEL_405:
                                        operator delete(v338.__r_.__value_.__l.__data_);
                                        if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0)
                                          goto LABEL_406;
                                      }
                                      (*(void (**)(google::protobuf::Message *))(*(_QWORD *)v235 + 152))(v235);
                                      google::protobuf::Reflection::Swap(v313, v302, v235);
                                    }
                                    if ((SHIBYTE(v345[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    {
                                      if (!v302)
                                        goto LABEL_400;
LABEL_399:
                                      (*(void (**)(google::protobuf::Message *))(*(_QWORD *)v302 + 8))(v302);
                                      goto LABEL_400;
                                    }
                                    operator delete(v345[0].__r_.__value_.__l.__data_);
                                    if (v302)
                                      goto LABEL_399;
LABEL_400:
                                    if (v342)
                                    {
                                      v343 = (int *)v342;
                                      operator delete(v342);
                                    }
                                    v234 = v324 + 11;
                                    if (v324 + 11 == *((_QWORD **)v3 + 4))
                                    {
                                      v314 = (_QWORD *)*((_QWORD *)v3 + 3);
                                      while (1)
                                      {
                                        if (v234 == v314)
                                        {
                                          v234 = v314;
LABEL_417:
                                          *((_QWORD *)v3 + 4) = v234;
                                          if (v321)
                                            google::protobuf::DescriptorBuilder::OptionInterpreter::UpdateSourceCodeInfo((google::protobuf::internal::ArenaImpl *)&__p, v321);
                                          google::protobuf::DynamicMessageFactory::~DynamicMessageFactory((google::protobuf::DynamicMessageFactory *)v349);
                                          std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::destroy((uint64_t)v348, v348[1]);
                                          std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::destroy((uint64_t)v347, v347[1]);
                                          v233 = *((unsigned __int8 *)v3 + 48);
                                          if (*((_BYTE *)v3 + 48))
                                          {
LABEL_420:
                                            if (*(int *)(v149 + 56) >= 1)
                                            {
                                              v316 = 0;
                                              v317 = 0;
                                              do
                                              {
                                                v318 = *((_QWORD *)v329 + 13);
                                                v319 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>(v149 + 48, v317);
                                                google::protobuf::DescriptorBuilder::DetectMapConflicts(v3, (const google::protobuf::Descriptor *)(v318 + v316), v319);
                                                ++v317;
                                                v316 += 144;
                                              }
                                              while (v317 < *(int *)(v149 + 56));
                                              v233 = *((unsigned __int8 *)v3 + 48);
                                            }
                                            goto LABEL_424;
                                          }
                                          if (*(_BYTE *)(*(_QWORD *)v3 + 41))
                                            goto LABEL_451;
                                          google::protobuf::DescriptorBuilder::ValidateFileOptions(v3, (uint64_t)v329, v149);
                                          v233 = *((unsigned __int8 *)v3 + 48);
                                          if (*((_BYTE *)v3 + 48))
                                            goto LABEL_420;
LABEL_424:
                                          if (!v233)
                                          {
LABEL_451:
                                            if (!*((_QWORD *)v3 + 17)
                                              || *(_BYTE *)(*(_QWORD *)v3 + 41)
                                              || (google::protobuf::DescriptorBuilder::LogUnusedDependency(v3, v149),
                                                  !*((_BYTE *)v3 + 48)))
                                            {
LABEL_426:
                                              std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v330, v331);
                                              std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v333, v334[0]);
                                              return v329;
                                            }
                                          }
LABEL_425:
                                          v329 = 0;
                                          goto LABEL_426;
                                        }
                                        v315 = (void *)*(v234 - 5);
                                        if (v315)
                                        {
                                          *(v234 - 4) = v315;
                                          operator delete(v315);
                                        }
                                        if (*((char *)v234 - 41) < 0)
                                        {
                                          operator delete((void *)*(v234 - 8));
                                          if ((*((char *)v234 - 65) & 0x80000000) == 0)
                                            goto LABEL_409;
                                        }
                                        else if ((*((char *)v234 - 65) & 0x80000000) == 0)
                                        {
                                          goto LABEL_409;
                                        }
                                        operator delete((void *)*(v234 - 11));
LABEL_409:
                                        v234 -= 11;
                                      }
                                    }
                                  }
                                }
                              }
                              v227 = 0;
                              v228 = 0;
                              do
                              {
                                v229 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)v328 + 120, v228);
                                google::protobuf::DescriptorBuilder::BuildFieldOrExtension(v3, v229, 0, (int32x2_t *)(*((_QWORD *)v329 + 16) + v227), 1);
                                ++v228;
                                v227 += 152;
                              }
                              while (v228 < *((int *)v328 + 32));
                              goto LABEL_297;
                            }
                          }
                          else
                          {
                            *((_QWORD *)v329 + 15) = 0;
                            if (v205 < 1)
                              goto LABEL_287;
                          }
                          v214 = 0;
                          v215 = 0;
                          do
                          {
                            v216 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::TypeHandler>((uint64_t)v328 + 96, v215);
                            google::protobuf::DescriptorBuilder::BuildService((uint64_t)v3, v216, v217, *((_QWORD *)v329 + 15) + v214);
                            ++v215;
                            v214 += 48;
                          }
                          while (v215 < *((int *)v328 + 26));
                          goto LABEL_287;
                        }
                      }
                      else
                      {
                        *((_QWORD *)v329 + 14) = 0;
                        if (v193 < 1)
                          goto LABEL_277;
                      }
                      v202 = 0;
                      v203 = 0;
                      do
                      {
                        v204 = (const google::protobuf::EnumDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)v328 + 72, v203);
                        google::protobuf::DescriptorBuilder::BuildEnum(v3, v204, 0, (google::protobuf::EnumDescriptor *)(*((_QWORD *)v329 + 14) + v202));
                        ++v203;
                        v202 += 80;
                      }
                      while (v203 < *((int *)v328 + 20));
                      goto LABEL_277;
                    }
                  }
                  else
                  {
                    *((_QWORD *)v329 + 13) = 0;
                    if (v181 < 1)
                      goto LABEL_267;
                  }
                  v190 = 0;
                  v191 = 0;
                  do
                  {
                    v192 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)v328 + 48, v191);
                    google::protobuf::DescriptorBuilder::BuildMessage(v3, v192, 0, (google::protobuf::Descriptor *)(*((_QWORD *)v329 + 13) + v190));
                    ++v191;
                    v190 += 144;
                  }
                  while (v191 < *((int *)v328 + 14));
                  goto LABEL_267;
                }
              }
              else
              {
                *((_QWORD *)v329 + 12) = 0;
                if (v154 >= 1)
                  goto LABEL_252;
              }
              v161 = 0;
              goto LABEL_257;
            }
          }
          v147 = 0;
          goto LABEL_204;
        }
      }
      else
      {
        v58 = v329;
        *((_QWORD *)v329 + 9) = 0;
        if (*(_BYTE *)(*(_QWORD *)v3 + 41))
          goto LABEL_75;
      }
      *((_QWORD *)v58 + 3) = 0;
      *((_QWORD *)v58 + 10) = 0;
      goto LABEL_87;
    }
    google::protobuf::DescriptorBuilder::AddPackage((uint64_t)v3, (std::string *)v49, (uint64_t)a2, (const char *)v329);
    goto LABEL_67;
  }
  google::protobuf::DescriptorBuilder::AddError((uint64_t)v3, *((const std::string::value_type **)a2 + 22), (uint64_t)a2, 10, "A file with this name is already in the pool.");
  return 0;
}

void sub_22DC46428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a19, (_QWORD *)a20);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a22, (char *)a23);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void google::protobuf::DescriptorBuilder::BuildMessage(google::protobuf::DescriptorBuilder *this, const google::protobuf::DescriptorProto *a2, const google::protobuf::Descriptor *a3, google::protobuf::Descriptor *a4)
{
  uint64_t **v6;
  const std::string::value_type *NameString;
  uint64_t v8;
  __int128 *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  std::string **v13;
  char *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  const google::protobuf::FieldDescriptorProto *v39;
  int v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  size_t v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  const google::protobuf::DescriptorProto *v51;
  int v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  size_t v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  const google::protobuf::EnumDescriptorProto *v63;
  int v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  size_t v80;
  char *v81;
  char *v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  const google::protobuf::FieldDescriptorProto *v87;
  int v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  size_t v92;
  char *v93;
  char *v94;
  char *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  _QWORD *v103;
  size_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t i;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  std::string *v112;
  std::string *v113;
  __int128 v114;
  std::string **v115;
  google::protobuf::MessageOptions *v116;
  std::string *v117;
  unsigned int *v118;
  google::protobuf::MessageOptions *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t j;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  std::string *v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  google::protobuf *v132;
  const std::string::value_type *v133;
  std::string *v134;
  unsigned int *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  int v140;
  uint64_t v141;
  int v142;
  BOOL v143;
  char *v144;
  uint64_t v145;
  google::protobuf::Descriptor *v146;
  uint64_t v147;
  uint64_t *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _DWORD *v153;
  const std::string::value_type **v154;
  uint64_t v155;
  google::protobuf *v156;
  const std::string::value_type *v157;
  std::string *v158;
  unsigned int *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  const char *v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  const std::string::value_type **v172;
  uint64_t v173;
  google::protobuf *v174;
  const std::string::value_type *v175;
  std::string *v176;
  unsigned int *v177;
  uint64_t v178;
  char *v179;
  int v180;
  uint64_t v181;
  int v182;
  const std::string::value_type *v183;
  uint64_t v184;
  char *v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  _DWORD *v200;
  uint64_t v201;
  google::protobuf *v202;
  const std::string::value_type *v203;
  std::string *v204;
  unsigned int *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  _DWORD *v210;
  uint64_t v211;
  uint64_t v212;
  google::protobuf *v213;
  const std::string::value_type *v214;
  std::string *v215;
  unsigned int *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  void **v221;
  void *v222;
  void **v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234[2];
  google::protobuf::DescriptorBuilder *v235;
  std::string v238;
  void *__p[2];
  __int128 v240;
  int v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  int v253;
  const char *v254;
  int v255;
  _BYTE v256[36];
  const char *v257;
  int v258;
  _BYTE v259[36];
  const char *v260;
  int v261;
  _BYTE v262[36];
  char *v263;
  _OWORD v264[2];
  uint64_t v265;

  v265 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v6 = (uint64_t **)((char *)a3 + 8);
  else
    v6 = (uint64_t **)(*((_QWORD *)this + 10) + 8);
  NameString = (const std::string::value_type *)google::protobuf::DescriptorBuilder::AllocateNameString((uint64_t)this, *v6, *((_QWORD *)a2 + 27));
  google::protobuf::DescriptorBuilder::ValidateSymbolName((uint64_t)this, *((uint64_t **)a2 + 27), NameString, (uint64_t)a2);
  v235 = this;
  v8 = *((_QWORD *)this + 1);
  v9 = (__int128 *)*((_QWORD *)a2 + 27);
  v10 = (std::string *)operator new();
  v11 = v10;
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v12 = *v9;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
  }
  v263 = (char *)v11;
  v13 = *(std::string ***)(v8 + 216);
  if ((unint64_t)v13 >= *(_QWORD *)(v8 + 224))
  {
    v14 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v8 + 208), &v263);
    v11 = (std::string *)v263;
  }
  else
  {
    *v13 = v11;
    v14 = (char *)(v13 + 1);
  }
  *(_QWORD *)(v8 + 216) = v14;
  *(_QWORD *)a4 = v11;
  *((_QWORD *)a4 + 1) = NameString;
  *((_QWORD *)a4 + 2) = *((_QWORD *)v235 + 10);
  *((_QWORD *)a4 + 3) = a3;
  *((_WORD *)a4 + 70) = 0;
  *((_BYTE *)a4 + 142) = 0;
  v15 = std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::find<std::string>((_QWORD *)(*(_QWORD *)(*(_QWORD *)v235 + 32) + 144), (uint64_t)NameString);
  if (v15)
    *((_BYTE *)a4 + 142) = *((_DWORD *)v15 + 10);
  v16 = *((_DWORD *)a2 + 38);
  *((_DWORD *)a4 + 27) = v16;
  v17 = *((_QWORD *)v235 + 1);
  v18 = 48 * v16;
  LODWORD(v263) = 48 * v16;
  if (!(48 * v16))
  {
    *((_QWORD *)a4 + 6) = 0;
    if (v16 < 1)
      goto LABEL_22;
    goto LABEL_20;
  }
  v19 = *(_QWORD **)(v17 + 192);
  if ((unint64_t)v19 >= *(_QWORD *)(v17 + 200))
  {
    v23 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v17 + 184), (int *)&v263);
  }
  else
  {
    *v19 = 0;
    v19[1] = 0;
    v19[2] = 0;
    if (v18 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = v18;
    v21 = (char *)operator new(v18);
    *v19 = v21;
    v22 = &v21[v20];
    v19[2] = &v21[v20];
    bzero(v21, v20);
    v19[1] = v22;
    v23 = (char *)(v19 + 3);
    *(_QWORD *)(v17 + 192) = v19 + 3;
  }
  *(_QWORD *)(v17 + 192) = v23;
  v24 = *((_DWORD *)a2 + 38);
  *((_QWORD *)a4 + 6) = *((_QWORD *)v23 - 3);
  if (v24 >= 1)
  {
LABEL_20:
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::OneofDescriptorProto>::TypeHandler>((uint64_t)a2 + 144, v26);
      google::protobuf::DescriptorBuilder::BuildOneof((uint64_t)v235, v27, (uint64_t)a4, *((_QWORD *)a4 + 6) + v25);
      ++v26;
      v25 += 48;
    }
    while (v26 < *((int *)a2 + 38));
  }
LABEL_22:
  v28 = *((_DWORD *)a2 + 8);
  *((_DWORD *)a4 + 26) = v28;
  v29 = *((_QWORD *)v235 + 1);
  v30 = 152 * v28;
  LODWORD(v263) = 152 * v28;
  if (!(152 * v28))
  {
    *((_QWORD *)a4 + 5) = 0;
    if (v28 < 1)
      goto LABEL_32;
    goto LABEL_30;
  }
  v31 = *(_QWORD **)(v29 + 192);
  if ((unint64_t)v31 >= *(_QWORD *)(v29 + 200))
  {
    v35 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v29 + 184), (int *)&v263);
  }
  else
  {
    *v31 = 0;
    v31[1] = 0;
    v31[2] = 0;
    if (v30 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v32 = v30;
    v33 = (char *)operator new(v30);
    *v31 = v33;
    v34 = &v33[v32];
    v31[2] = &v33[v32];
    bzero(v33, v32);
    v31[1] = v34;
    v35 = (char *)(v31 + 3);
    *(_QWORD *)(v29 + 192) = v31 + 3;
  }
  *(_QWORD *)(v29 + 192) = v35;
  v36 = *((_DWORD *)a2 + 8);
  *((_QWORD *)a4 + 5) = *((_QWORD *)v35 - 3);
  if (v36 >= 1)
  {
LABEL_30:
    v37 = 0;
    v38 = 0;
    do
    {
      v39 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a2 + 24, v38);
      google::protobuf::DescriptorBuilder::BuildFieldOrExtension(v235, v39, a4, (int32x2_t *)(*((_QWORD *)a4 + 5) + v37), 0);
      ++v38;
      v37 += 152;
    }
    while (v38 < *((int *)a2 + 8));
  }
LABEL_32:
  v40 = *((_DWORD *)a2 + 14);
  *((_DWORD *)a4 + 29) = v40;
  v41 = *((_QWORD *)v235 + 1);
  v42 = 144 * v40;
  LODWORD(v263) = 144 * v40;
  if (!(144 * v40))
  {
    *((_QWORD *)a4 + 7) = 0;
    if (v40 < 1)
      goto LABEL_42;
    goto LABEL_40;
  }
  v43 = *(_QWORD **)(v41 + 192);
  if ((unint64_t)v43 >= *(_QWORD *)(v41 + 200))
  {
    v47 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v41 + 184), (int *)&v263);
  }
  else
  {
    *v43 = 0;
    v43[1] = 0;
    v43[2] = 0;
    if (v42 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v44 = v42;
    v45 = (char *)operator new(v42);
    *v43 = v45;
    v46 = &v45[v44];
    v43[2] = &v45[v44];
    bzero(v45, v44);
    v43[1] = v46;
    v47 = (char *)(v43 + 3);
    *(_QWORD *)(v41 + 192) = v43 + 3;
  }
  *(_QWORD *)(v41 + 192) = v47;
  v48 = *((_DWORD *)a2 + 14);
  *((_QWORD *)a4 + 7) = *((_QWORD *)v47 - 3);
  if (v48 >= 1)
  {
LABEL_40:
    v49 = 0;
    v50 = 0;
    do
    {
      v51 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)a2 + 48, v50);
      google::protobuf::DescriptorBuilder::BuildMessage(v235, v51, a4, (google::protobuf::Descriptor *)(*((_QWORD *)a4 + 7) + v49));
      ++v50;
      v49 += 144;
    }
    while (v50 < *((int *)a2 + 14));
  }
LABEL_42:
  v52 = *((_DWORD *)a2 + 20);
  *((_DWORD *)a4 + 30) = v52;
  v53 = *((_QWORD *)v235 + 1);
  v54 = 80 * v52;
  LODWORD(v263) = 80 * v52;
  if (!(80 * v52))
  {
    *((_QWORD *)a4 + 8) = 0;
    if (v52 < 1)
      goto LABEL_52;
    goto LABEL_50;
  }
  v55 = *(_QWORD **)(v53 + 192);
  if ((unint64_t)v55 >= *(_QWORD *)(v53 + 200))
  {
    v59 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v53 + 184), (int *)&v263);
  }
  else
  {
    *v55 = 0;
    v55[1] = 0;
    v55[2] = 0;
    if (v54 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v56 = v54;
    v57 = (char *)operator new(v54);
    *v55 = v57;
    v58 = &v57[v56];
    v55[2] = &v57[v56];
    bzero(v57, v56);
    v55[1] = v58;
    v59 = (char *)(v55 + 3);
    *(_QWORD *)(v53 + 192) = v55 + 3;
  }
  *(_QWORD *)(v53 + 192) = v59;
  v60 = *((_DWORD *)a2 + 20);
  *((_QWORD *)a4 + 8) = *((_QWORD *)v59 - 3);
  if (v60 >= 1)
  {
LABEL_50:
    v61 = 0;
    v62 = 0;
    do
    {
      v63 = (const google::protobuf::EnumDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)a2 + 72, v62);
      google::protobuf::DescriptorBuilder::BuildEnum(v235, v63, a4, (google::protobuf::EnumDescriptor *)(*((_QWORD *)a4 + 8) + v61));
      ++v62;
      v61 += 80;
    }
    while (v62 < *((int *)a2 + 20));
  }
LABEL_52:
  v64 = *((_DWORD *)a2 + 26);
  *((_DWORD *)a4 + 31) = v64;
  v65 = *((_QWORD *)v235 + 1);
  v66 = 16 * v64;
  LODWORD(v263) = 16 * v64;
  if (!(16 * v64))
  {
    *((_QWORD *)a4 + 9) = 0;
    if (v64 < 1)
      goto LABEL_62;
    goto LABEL_60;
  }
  v67 = *(_QWORD **)(v65 + 192);
  if ((unint64_t)v67 >= *(_QWORD *)(v65 + 200))
  {
    v71 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v65 + 184), (int *)&v263);
  }
  else
  {
    *v67 = 0;
    v67[1] = 0;
    v67[2] = 0;
    if (v66 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v68 = v66;
    v69 = (char *)operator new(v66);
    *v67 = v69;
    v70 = &v69[v68];
    v67[2] = &v69[v68];
    bzero(v69, v68);
    v67[1] = v70;
    v71 = (char *)(v67 + 3);
    *(_QWORD *)(v65 + 192) = v67 + 3;
  }
  *(_QWORD *)(v65 + 192) = v71;
  v72 = *((_DWORD *)a2 + 26);
  *((_QWORD *)a4 + 9) = *((_QWORD *)v71 - 3);
  if (v72 >= 1)
  {
LABEL_60:
    v73 = 0;
    v74 = 0;
    do
    {
      v75 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ExtensionRange>::TypeHandler>((uint64_t)a2 + 96, v74);
      google::protobuf::DescriptorBuilder::BuildExtensionRange((uint64_t)v235, v75, (uint64_t)a4, *((_QWORD *)a4 + 9) + v73);
      ++v74;
      v73 += 16;
    }
    while (v74 < *((int *)a2 + 26));
  }
LABEL_62:
  v76 = *((_DWORD *)a2 + 32);
  *((_DWORD *)a4 + 32) = v76;
  v77 = *((_QWORD *)v235 + 1);
  v78 = 152 * v76;
  LODWORD(v263) = 152 * v76;
  if (!(152 * v76))
  {
    *((_QWORD *)a4 + 10) = 0;
    if (v76 < 1)
      goto LABEL_72;
    goto LABEL_70;
  }
  v79 = *(_QWORD **)(v77 + 192);
  if ((unint64_t)v79 >= *(_QWORD *)(v77 + 200))
  {
    v83 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v77 + 184), (int *)&v263);
  }
  else
  {
    *v79 = 0;
    v79[1] = 0;
    v79[2] = 0;
    if (v78 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v80 = v78;
    v81 = (char *)operator new(v78);
    *v79 = v81;
    v82 = &v81[v80];
    v79[2] = &v81[v80];
    bzero(v81, v80);
    v79[1] = v82;
    v83 = (char *)(v79 + 3);
    *(_QWORD *)(v77 + 192) = v79 + 3;
  }
  *(_QWORD *)(v77 + 192) = v83;
  v84 = *((_DWORD *)a2 + 32);
  *((_QWORD *)a4 + 10) = *((_QWORD *)v83 - 3);
  if (v84 >= 1)
  {
LABEL_70:
    v85 = 0;
    v86 = 0;
    do
    {
      v87 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a2 + 120, v86);
      google::protobuf::DescriptorBuilder::BuildFieldOrExtension(v235, v87, a4, (int32x2_t *)(*((_QWORD *)a4 + 10) + v85), 1);
      ++v86;
      v85 += 152;
    }
    while (v86 < *((int *)a2 + 32));
  }
LABEL_72:
  v88 = *((_DWORD *)a2 + 44);
  *((_DWORD *)a4 + 33) = v88;
  v89 = *((_QWORD *)v235 + 1);
  v90 = 8 * v88;
  LODWORD(v263) = 8 * v88;
  if (!(8 * v88))
  {
    *((_QWORD *)a4 + 11) = 0;
    if (v88 < 1)
      goto LABEL_84;
    goto LABEL_80;
  }
  v91 = *(_QWORD **)(v89 + 192);
  if ((unint64_t)v91 >= *(_QWORD *)(v89 + 200))
  {
    v95 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v89 + 184), (int *)&v263);
  }
  else
  {
    *v91 = 0;
    v91[1] = 0;
    v91[2] = 0;
    if (v90 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v92 = v90;
    v93 = (char *)operator new(v90);
    *v91 = v93;
    v94 = &v93[v92];
    v91[2] = &v93[v92];
    bzero(v93, v92);
    v91[1] = v94;
    v95 = (char *)(v91 + 3);
    *(_QWORD *)(v89 + 192) = v91 + 3;
  }
  *(_QWORD *)(v89 + 192) = v95;
  v96 = *((_DWORD *)a2 + 44);
  *((_QWORD *)a4 + 11) = *((_QWORD *)v95 - 3);
  if (v96 >= 1)
  {
LABEL_80:
    v97 = 0;
    do
    {
      v98 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ReservedRange>::TypeHandler>((uint64_t)a2 + 168, v97);
      v99 = *(_QWORD *)(v98 + 24);
      *(_QWORD *)(*((_QWORD *)a4 + 11) + 8 * v97) = v99;
      if ((int)v99 <= 0)
        google::protobuf::DescriptorBuilder::AddError((uint64_t)v235, *((const std::string::value_type **)a4 + 1), v98, 1, "Reserved numbers must be positive integers.");
      ++v97;
    }
    while (v97 < *((int *)a2 + 44));
  }
LABEL_84:
  v100 = *((unsigned int *)a2 + 50);
  *((_DWORD *)a4 + 34) = v100;
  v101 = *((_QWORD *)v235 + 1);
  v102 = 8 * v100;
  LODWORD(v263) = 8 * v100;
  if (!(8 * (_DWORD)v100))
  {
    *((_QWORD *)a4 + 12) = 0;
    if ((int)v100 < 1)
      goto LABEL_100;
    goto LABEL_92;
  }
  v103 = *(_QWORD **)(v101 + 192);
  if ((unint64_t)v103 >= *(_QWORD *)(v101 + 200))
  {
    v107 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v101 + 184), (int *)&v263);
  }
  else
  {
    *v103 = 0;
    v103[1] = 0;
    v103[2] = 0;
    if (v102 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v104 = v102;
    v105 = (char *)operator new(v102);
    *v103 = v105;
    v106 = &v105[v104];
    v103[2] = &v105[v104];
    bzero(v105, v104);
    v103[1] = v106;
    v107 = (char *)(v103 + 3);
    *(_QWORD *)(v101 + 192) = v103 + 3;
  }
  *(_QWORD *)(v101 + 192) = v107;
  *((_QWORD *)a4 + 12) = *((_QWORD *)v107 - 3);
  if ((int)v100 >= 1)
  {
LABEL_92:
    for (i = 0; i != v100; ++i)
    {
      v110 = *((_QWORD *)v235 + 1);
      v111 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)a2 + 192, i);
      v112 = (std::string *)operator new();
      v113 = v112;
      if (*(char *)(v111 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v112, *(const std::string::value_type **)v111, *(_QWORD *)(v111 + 8));
      }
      else
      {
        v114 = *(_OWORD *)v111;
        v112->__r_.__value_.__r.__words[2] = *(_QWORD *)(v111 + 16);
        *(_OWORD *)&v112->__r_.__value_.__l.__data_ = v114;
      }
      v263 = (char *)v113;
      v115 = *(std::string ***)(v110 + 216);
      if ((unint64_t)v115 < *(_QWORD *)(v110 + 224))
      {
        *v115 = v113;
        v109 = (char *)(v115 + 1);
      }
      else
      {
        v109 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v110 + 208), &v263);
        v113 = (std::string *)v263;
      }
      *(_QWORD *)(v110 + 216) = v109;
      *(_QWORD *)(*((_QWORD *)a4 + 12) + 8 * i) = v113;
    }
  }
LABEL_100:
  *((_QWORD *)a4 + 4) = 0;
  if ((*((_DWORD *)a2 + 4) & 2) != 0)
  {
    v116 = (google::protobuf::MessageOptions *)*((_QWORD *)a2 + 28);
    if (!v116)
    {
      v117 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v263, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 8241);
      v118 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v117, "CHECK failed: !value || options_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v260, v118);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v263);
      v116 = (google::protobuf::MessageOptions *)*((_QWORD *)a2 + 28);
    }
    if (v116)
      v119 = v116;
    else
      v119 = (google::protobuf::MessageOptions *)&google::protobuf::_MessageOptions_default_instance_;
    v263 = (char *)operator new(0x20uLL);
    v264[0] = xmmword_22DCE5C00;
    strcpy(v263, "google.protobuf.MessageOptions");
    google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::Descriptor>((uint64_t)v235, v119, (uint64_t)a4, 7, (std::string::size_type)&v263);
    if (SHIBYTE(v264[0]) < 0)
      operator delete(v263);
  }
  google::protobuf::DescriptorBuilder::AddSymbol((uint64_t)v235, *((_QWORD *)a4 + 1), (uint64_t *)a3, *(_QWORD *)a4, (uint64_t)a2, (const char *)1, (const char *)a4);
  if (*((int *)a2 + 44) >= 1)
  {
    v121 = 0;
    v122 = 2;
    for (j = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ReservedRange>::TypeHandler>((uint64_t)a2 + 168, 0);
          ;
          j = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ReservedRange>::TypeHandler>((uint64_t)a2 + 168, v121))
    {
      v125 = v121 + 1;
      v124 = *((int *)a2 + 44);
      if (v121 + 1 < v124)
      {
        v126 = j;
        v127 = v122;
        LODWORD(v124) = *((_DWORD *)a2 + 44);
        do
        {
          if (v127 - 1 >= (int)v124)
          {
            v128 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v263, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
            v129 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v128, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((uint64_t)&v260, v129);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v263);
          }
          v130 = *((_QWORD *)a2 + 23);
          v131 = *(_QWORD *)(v130 + 8 * v127);
          v132 = (google::protobuf *)*(unsigned int *)(v131 + 24);
          if (*(_DWORD *)(v126 + 28) > (int)v132 && *(_DWORD *)(v131 + 28) > *(_DWORD *)(v126 + 24))
          {
            v133 = (const std::string::value_type *)*((_QWORD *)a4 + 1);
            if (v121 >= *((int *)a2 + 44))
            {
              v134 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v263, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
              v135 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v134, "CHECK failed: (index) < (current_size_): ");
              google::protobuf::internal::LogFinisher::operator=((uint64_t)&v260, v135);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v263);
              v130 = *((_QWORD *)a2 + 23);
              v132 = (google::protobuf *)*(unsigned int *)(v131 + 24);
            }
            v136 = *(_QWORD *)(v130 + 8 * v121 + 8);
            v263 = google::protobuf::FastInt32ToBuffer(v132, (_BYTE *)v264 + 4, v120);
            LODWORD(v264[0]) = strlen(v263);
            v260 = google::protobuf::FastInt32ToBuffer((google::protobuf *)(*(_DWORD *)(v131 + 28) - 1), v262, v137);
            v261 = strlen(v260);
            v257 = google::protobuf::FastInt32ToBuffer((google::protobuf *)*(unsigned int *)(v126 + 24), v259, v138);
            v258 = strlen(v257);
            v254 = google::protobuf::FastInt32ToBuffer((google::protobuf *)(*(_DWORD *)(v126 + 28) - 1), v256, v139);
            v255 = strlen(v254);
            v252 = 0;
            v253 = -1;
            v250 = 0;
            v251 = -1;
            v248 = 0;
            v249 = -1;
            v246 = 0;
            v247 = -1;
            v244 = 0;
            v245 = -1;
            v242 = 0;
            v243 = -1;
            *((_QWORD *)&v224 + 1) = &v244;
            *(_QWORD *)&v224 = &v246;
            google::protobuf::strings::Substitute("Reserved range $0 to $1 overlaps with already-defined range $2 to $3.", (uint64_t)&v263, (uint64_t)&v260, (uint64_t)&v257, (uint64_t)&v254, (uint64_t)&v252, (uint64_t)&v250, (uint64_t)&v248, (std::string *)__p, v224, (uint64_t)&v242);
            google::protobuf::DescriptorBuilder::AddError((uint64_t)v235, v133, v136, 1, (const std::string::value_type *)__p);
            if (SBYTE7(v240) < 0)
              operator delete(__p[0]);
          }
          LODWORD(v124) = *((_DWORD *)a2 + 44);
          ++v127;
        }
        while ((int)v124 > (int)v127 - 1);
        v124 = (int)v124;
      }
      ++v122;
      ++v121;
      if (v125 >= v124)
        break;
    }
  }
  *(_OWORD *)__p = 0u;
  v240 = 0u;
  v241 = 1065353216;
  if (*((int *)a2 + 50) >= 1)
  {
    v140 = 0;
    do
    {
      v141 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)a2 + 192, v140);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(__p, v141))
      {
        v142 = *(char *)(v141 + 23);
        v143 = v142 < 0;
        v144 = *(char **)v141;
        v145 = *(_QWORD *)(v141 + 8);
        if (v142 >= 0)
          v144 = (char *)v141;
        v263 = v144;
        v142 = v142;
        if (v143)
          v142 = v145;
        LODWORD(v264[0]) = v142;
        v260 = 0;
        v261 = -1;
        v257 = 0;
        v258 = -1;
        v254 = 0;
        v255 = -1;
        v252 = 0;
        v253 = -1;
        v250 = 0;
        v251 = -1;
        v248 = 0;
        v249 = -1;
        v246 = 0;
        v247 = -1;
        v244 = 0;
        v245 = -1;
        v242 = 0;
        v243 = -1;
        *((_QWORD *)&v225 + 1) = &v244;
        *(_QWORD *)&v225 = &v246;
        google::protobuf::strings::Substitute("Field name \"$0\" is reserved multiple times.", (uint64_t)&v263, (uint64_t)&v260, (uint64_t)&v257, (uint64_t)&v254, (uint64_t)&v252, (uint64_t)&v250, (uint64_t)&v248, &v238, v225, (uint64_t)&v242);
        google::protobuf::DescriptorBuilder::AddError((uint64_t)v235, (const std::string::value_type *)v141, (uint64_t)a2, 0, (const std::string::value_type *)&v238);
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v238.__r_.__value_.__l.__data_);
      }
      else
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, v141, v141);
      }
      ++v140;
    }
    while (v140 < *((_DWORD *)a2 + 50));
  }
  v146 = a4;
  if (*((int *)a4 + 26) >= 1)
  {
    v147 = 0;
    do
    {
      v232 = v147;
      *(_QWORD *)v234 = *((_QWORD *)v146 + 5);
      v148 = (uint64_t *)(*(_QWORD *)v234 + 152 * v147);
      v149 = *((_DWORD *)v146 + 31);
      if (v149 >= 1)
      {
        v150 = 0;
        v151 = 0;
        v152 = *(_QWORD *)v234 + 152 * v147;
        v153 = (_DWORD *)(v152 + 68);
        v154 = (const std::string::value_type **)(v152 + 8);
        do
        {
          v155 = *((_QWORD *)a4 + 9);
          v156 = (google::protobuf *)*(unsigned int *)(v155 + v150);
          if ((int)v156 <= *v153 && *v153 < *(_DWORD *)(v155 + v150 + 4))
          {
            v157 = *v154;
            if (v151 >= *((int *)a2 + 26))
            {
              v158 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v263, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
              v159 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v158, "CHECK failed: (index) < (current_size_): ");
              google::protobuf::internal::LogFinisher::operator=((uint64_t)&v260, v159);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v263);
              v156 = (google::protobuf *)*(unsigned int *)(v155 + v150);
            }
            v160 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 8 * v151 + 8);
            v263 = google::protobuf::FastInt32ToBuffer(v156, (_BYTE *)v264 + 4, v120);
            LODWORD(v264[0]) = strlen(v263);
            v260 = google::protobuf::FastInt32ToBuffer((google::protobuf *)(*(_DWORD *)(v155 + v150 + 4) - 1), v262, v161);
            v261 = strlen(v260);
            v163 = (const char *)*v148;
            v164 = *(char *)(*v148 + 23);
            v165 = *(_QWORD *)(*v148 + 8);
            if (v164 < 0)
              v163 = *(const char **)*v148;
            v257 = v163;
            v166 = v164;
            if (v164 < 0)
              v166 = v165;
            v258 = v166;
            v254 = google::protobuf::FastInt32ToBuffer((google::protobuf *)*v153, v256, v162);
            v255 = strlen(v254);
            v252 = 0;
            v253 = -1;
            v250 = 0;
            v251 = -1;
            v248 = 0;
            v249 = -1;
            v246 = 0;
            v247 = -1;
            v244 = 0;
            v245 = -1;
            v242 = 0;
            v243 = -1;
            *((_QWORD *)&v226 + 1) = &v244;
            *(_QWORD *)&v226 = &v246;
            google::protobuf::strings::Substitute("Extension range $0 to $1 includes field \"$2\" ($3).", (uint64_t)&v263, (uint64_t)&v260, (uint64_t)&v257, (uint64_t)&v254, (uint64_t)&v252, (uint64_t)&v250, (uint64_t)&v248, &v238, v226, (uint64_t)&v242);
            google::protobuf::DescriptorBuilder::AddError((uint64_t)v235, v157, v160, 1, (const std::string::value_type *)&v238);
            if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v238.__r_.__value_.__l.__data_);
            v149 = *((_DWORD *)a4 + 31);
          }
          ++v151;
          v150 += 16;
        }
        while (v151 < v149);
      }
      v167 = *((_DWORD *)a4 + 33);
      if (v167 >= 1)
      {
        v168 = 0;
        v169 = 0;
        v170 = *(_QWORD *)v234 + 152 * v147;
        v171 = (unsigned int *)(v170 + 68);
        v172 = (const std::string::value_type **)(v170 + 8);
        do
        {
          v173 = *((_QWORD *)a4 + 11);
          v174 = (google::protobuf *)*v171;
          if (*(_DWORD *)(v173 + v168) <= (int)v174 && (int)v174 < *(_DWORD *)(v173 + v168 + 4))
          {
            v175 = *v172;
            if (v169 >= *((int *)a2 + 44))
            {
              v176 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v263, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
              v177 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v176, "CHECK failed: (index) < (current_size_): ");
              google::protobuf::internal::LogFinisher::operator=((uint64_t)&v260, v177);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v263);
              v174 = (google::protobuf *)*v171;
            }
            v178 = *(_QWORD *)(*((_QWORD *)a2 + 23) + 8 * v169 + 8);
            v179 = (char *)*v148;
            v180 = *(char *)(*v148 + 23);
            v181 = *(_QWORD *)(*v148 + 8);
            if (v180 < 0)
              v179 = *(char **)*v148;
            v263 = v179;
            v182 = v180;
            if (v180 < 0)
              v182 = v181;
            LODWORD(v264[0]) = v182;
            v260 = google::protobuf::FastInt32ToBuffer(v174, v262, v120);
            v261 = strlen(v260);
            v257 = 0;
            v258 = -1;
            v254 = 0;
            v255 = -1;
            v252 = 0;
            v253 = -1;
            v250 = 0;
            v251 = -1;
            v248 = 0;
            v249 = -1;
            v246 = 0;
            v247 = -1;
            v244 = 0;
            v245 = -1;
            v242 = 0;
            v243 = -1;
            *((_QWORD *)&v227 + 1) = &v244;
            *(_QWORD *)&v227 = &v246;
            google::protobuf::strings::Substitute("Field \"$0\" uses reserved number $1.", (uint64_t)&v263, (uint64_t)&v260, (uint64_t)&v257, (uint64_t)&v254, (uint64_t)&v252, (uint64_t)&v250, (uint64_t)&v248, &v238, v227, (uint64_t)&v242);
            google::protobuf::DescriptorBuilder::AddError((uint64_t)v235, v175, v178, 1, (const std::string::value_type *)&v238);
            if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v238.__r_.__value_.__l.__data_);
            v167 = *((_DWORD *)a4 + 33);
          }
          ++v169;
          v168 += 8;
        }
        while (v169 < v167);
      }
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(__p, *v148))
      {
        v183 = *(const std::string::value_type **)(*(_QWORD *)v234 + 152 * v147 + 8);
        v184 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a2 + 24, v147);
        v185 = (char *)*v148;
        v186 = *(char *)(*v148 + 23);
        v187 = *(_QWORD *)(*v148 + 8);
        if (v186 < 0)
          v185 = *(char **)*v148;
        v263 = v185;
        v188 = v186;
        if (v186 < 0)
          v188 = v187;
        LODWORD(v264[0]) = v188;
        v260 = 0;
        v261 = -1;
        v257 = 0;
        v258 = -1;
        v254 = 0;
        v255 = -1;
        v252 = 0;
        v253 = -1;
        v250 = 0;
        v251 = -1;
        v248 = 0;
        v249 = -1;
        v246 = 0;
        v247 = -1;
        v244 = 0;
        v245 = -1;
        v242 = 0;
        v243 = -1;
        *((_QWORD *)&v228 + 1) = &v244;
        *(_QWORD *)&v228 = &v246;
        google::protobuf::strings::Substitute("Field name \"$0\" is reserved.", (uint64_t)&v263, (uint64_t)&v260, (uint64_t)&v257, (uint64_t)&v254, (uint64_t)&v252, (uint64_t)&v250, (uint64_t)&v248, &v238, v228, (uint64_t)&v242);
        google::protobuf::DescriptorBuilder::AddError((uint64_t)v235, v183, v184, 0, (const std::string::value_type *)&v238);
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v238.__r_.__value_.__l.__data_);
      }
      ++v147;
      v146 = a4;
    }
    while (v232 + 1 < *((int *)a4 + 26));
  }
  v189 = *((_DWORD *)v146 + 31);
  if (v189 >= 1)
  {
    v190 = 0;
    v191 = 0;
    v192 = 1;
    do
    {
      v195 = *((_QWORD *)a4 + 9);
      v196 = (_DWORD *)(v195 + 16 * v191);
      v197 = *((_DWORD *)a4 + 33);
      v233 = v192;
      if (v197 >= 1)
      {
        v231 = *((_QWORD *)a4 + 9);
        v198 = 0;
        v199 = 0;
        v200 = v196 + 1;
        do
        {
          v201 = *((_QWORD *)a4 + 11);
          if (*v200 > *(_DWORD *)(v201 + v198))
          {
            v202 = (google::protobuf *)*v196;
            if (*(_DWORD *)(v201 + v198 + 4) > (int)v202)
            {
              v203 = (const std::string::value_type *)*((_QWORD *)a4 + 1);
              if (v191 >= *((int *)a2 + 26))
              {
                v204 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v263, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
                v205 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v204, "CHECK failed: (index) < (current_size_): ");
                google::protobuf::internal::LogFinisher::operator=((uint64_t)&v260, v205);
                google::protobuf::internal::LogMessage::~LogMessage((void **)&v263);
                v202 = (google::protobuf *)*v196;
              }
              v206 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 8 * v191 + 8);
              v263 = google::protobuf::FastInt32ToBuffer(v202, (_BYTE *)v264 + 4, v120);
              LODWORD(v264[0]) = strlen(v263);
              v260 = google::protobuf::FastInt32ToBuffer((google::protobuf *)(*v200 - 1), v262, v207);
              v261 = strlen(v260);
              v257 = google::protobuf::FastInt32ToBuffer((google::protobuf *)*(unsigned int *)(v201 + v198), v259, v208);
              v258 = strlen(v257);
              v254 = google::protobuf::FastInt32ToBuffer((google::protobuf *)(*(_DWORD *)(v201 + v198 + 4) - 1), v256, v209);
              v255 = strlen(v254);
              v252 = 0;
              v253 = -1;
              v250 = 0;
              v251 = -1;
              v248 = 0;
              v249 = -1;
              v246 = 0;
              v247 = -1;
              v244 = 0;
              v245 = -1;
              v242 = 0;
              v243 = -1;
              *((_QWORD *)&v229 + 1) = &v244;
              *(_QWORD *)&v229 = &v246;
              google::protobuf::strings::Substitute("Extension range $0 to $1 overlaps with reserved range $2 to $3.", (uint64_t)&v263, (uint64_t)&v260, (uint64_t)&v257, (uint64_t)&v254, (uint64_t)&v252, (uint64_t)&v250, (uint64_t)&v248, &v238, v229, (uint64_t)&v242);
              google::protobuf::DescriptorBuilder::AddError((uint64_t)v235, v203, v206, 1, (const std::string::value_type *)&v238);
              if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v238.__r_.__value_.__l.__data_);
              v197 = *((_DWORD *)a4 + 33);
            }
          }
          ++v199;
          v198 += 8;
        }
        while (v199 < v197);
        v189 = *((_DWORD *)a4 + 31);
        v195 = v231;
        v192 = v233;
      }
      v194 = v191 + 1;
      v193 = v189;
      if (v191 + 1 < v189)
      {
        v210 = (_DWORD *)(v195 + 16 * v191 + 4);
        v211 = v190;
        do
        {
          v212 = *((_QWORD *)a4 + 9) + v211;
          v213 = (google::protobuf *)*(unsigned int *)(v212 + 16);
          if (*v210 > (int)v213 && *(_DWORD *)(v212 + 20) > *v196)
          {
            v214 = (const std::string::value_type *)*((_QWORD *)a4 + 1);
            if (v191 >= *((int *)a2 + 26))
            {
              v215 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v263, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
              v216 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v215, "CHECK failed: (index) < (current_size_): ");
              google::protobuf::internal::LogFinisher::operator=((uint64_t)&v260, v216);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v263);
              v213 = (google::protobuf *)*(unsigned int *)(v212 + 16);
            }
            v217 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 8 * v191 + 8);
            v263 = google::protobuf::FastInt32ToBuffer(v213, (_BYTE *)v264 + 4, v120);
            LODWORD(v264[0]) = strlen(v263);
            v260 = google::protobuf::FastInt32ToBuffer((google::protobuf *)(*(_DWORD *)(v212 + 20) - 1), v262, v218);
            v261 = strlen(v260);
            v257 = google::protobuf::FastInt32ToBuffer((google::protobuf *)*v196, v259, v219);
            v258 = strlen(v257);
            v254 = google::protobuf::FastInt32ToBuffer((google::protobuf *)(*v210 - 1), v256, v220);
            v255 = strlen(v254);
            v252 = 0;
            v253 = -1;
            v250 = 0;
            v251 = -1;
            v248 = 0;
            v249 = -1;
            v246 = 0;
            v247 = -1;
            v244 = 0;
            v245 = -1;
            v242 = 0;
            v243 = -1;
            *((_QWORD *)&v230 + 1) = &v244;
            *(_QWORD *)&v230 = &v246;
            google::protobuf::strings::Substitute("Extension range $0 to $1 overlaps with already-defined range $2 to $3.", (uint64_t)&v263, (uint64_t)&v260, (uint64_t)&v257, (uint64_t)&v254, (uint64_t)&v252, (uint64_t)&v250, (uint64_t)&v248, &v238, v230, (uint64_t)&v242);
            google::protobuf::DescriptorBuilder::AddError((uint64_t)v235, v214, v217, 1, (const std::string::value_type *)&v238);
            if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v238.__r_.__value_.__l.__data_);
            v189 = *((_DWORD *)a4 + 31);
          }
          v211 += 16;
          ++v192;
        }
        while (v189 > v192);
        v193 = v189;
        v192 = v233;
        v194 = v191 + 1;
      }
      v190 += 16;
      ++v192;
      v191 = v194;
    }
    while (v194 < v193);
  }
  v221 = (void **)v240;
  if ((_QWORD)v240)
  {
    do
    {
      v223 = (void **)*v221;
      if (*((char *)v221 + 39) < 0)
        operator delete(v221[2]);
      operator delete(v221);
      v221 = v223;
    }
    while (v223);
  }
  v222 = __p[0];
  __p[0] = 0;
  if (v222)
    operator delete(v222);
}

void sub_22DC480FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_22DC48110(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_22DC48124(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_22DC48200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
  {
    operator delete(__p);
    std::unordered_map<std::string,google::protobuf::Descriptor::WellKnownType>::~unordered_map[abi:ne180100]((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,google::protobuf::Descriptor::WellKnownType>::~unordered_map[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_22DC48324(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_22DC48338(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::BuildEnum(google::protobuf::DescriptorBuilder *this, const google::protobuf::EnumDescriptorProto *a2, const google::protobuf::Descriptor *a3, google::protobuf::EnumDescriptor *a4)
{
  uint64_t **v7;
  const std::string::value_type *NameString;
  uint64_t v9;
  __int128 *v10;
  std::string *v11;
  std::string *v12;
  __int128 v13;
  std::string **v14;
  char *v15;
  int v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  size_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t i;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  std::string *v52;
  std::string *v53;
  __int128 v54;
  std::string **v55;
  google::protobuf::EnumOptions *v56;
  std::string *v57;
  unsigned int *v58;
  google::protobuf::EnumOptions *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::string *v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  google::protobuf *v72;
  const std::string::value_type *v73;
  std::string *v74;
  unsigned int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  int v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  char *v84;
  uint64_t v85;
  google::protobuf::EnumDescriptor *v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  const std::string::value_type **v94;
  uint64_t v95;
  google::protobuf *v96;
  const std::string::value_type *v97;
  std::string *v98;
  unsigned int *v99;
  uint64_t v100;
  char *v101;
  int v102;
  uint64_t v103;
  int v104;
  const std::string::value_type *v105;
  uint64_t v106;
  char *v107;
  int v108;
  uint64_t v109;
  int v110;
  void **v111;
  void *v112;
  void **v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int v118[2];
  google::protobuf::DescriptorBuilder *v119;
  std::string v121;
  void *__p[2];
  __int128 v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  const char *v137;
  int v138;
  char v139[36];
  const char *v140;
  int v141;
  char v142[36];
  const char *v143;
  int v144;
  _BYTE v145[36];
  char *v146;
  __int128 v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v7 = (uint64_t **)((char *)a3 + 8);
  else
    v7 = (uint64_t **)(*((_QWORD *)this + 10) + 8);
  NameString = (const std::string::value_type *)google::protobuf::DescriptorBuilder::AllocateNameString((uint64_t)this, *v7, *((_QWORD *)a2 + 12));
  google::protobuf::DescriptorBuilder::ValidateSymbolName((uint64_t)this, *((uint64_t **)a2 + 12), NameString, (uint64_t)a2);
  v119 = this;
  v9 = *((_QWORD *)this + 1);
  v10 = (__int128 *)*((_QWORD *)a2 + 12);
  v11 = (std::string *)operator new();
  v12 = v11;
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v13 = *v10;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
  }
  v146 = (char *)v12;
  v14 = *(std::string ***)(v9 + 216);
  if ((unint64_t)v14 >= *(_QWORD *)(v9 + 224))
  {
    v15 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v9 + 208), &v146);
    v12 = (std::string *)v146;
  }
  else
  {
    *v14 = v12;
    v15 = (char *)(v14 + 1);
  }
  *(_QWORD *)(v9 + 216) = v15;
  *(_QWORD *)a4 = v12;
  *((_QWORD *)a4 + 1) = NameString;
  *((_QWORD *)a4 + 2) = *((_QWORD *)v119 + 10);
  *((_QWORD *)a4 + 3) = a3;
  *((_WORD *)a4 + 20) = 0;
  v16 = *((_DWORD *)a2 + 8);
  if (v16)
  {
    *((_DWORD *)a4 + 11) = v16;
    v17 = *((_QWORD *)v119 + 1);
    v18 = 40 * v16;
    LODWORD(v146) = 40 * v16;
    if (40 * v16)
      goto LABEL_12;
LABEL_16:
    *((_QWORD *)a4 + 6) = 0;
    if (v16 < 1)
      goto LABEL_22;
    goto LABEL_20;
  }
  google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, NameString, (uint64_t)a2, 0, "Enums must contain at least one value.");
  v16 = *((_DWORD *)a2 + 8);
  *((_DWORD *)a4 + 11) = v16;
  v17 = *((_QWORD *)v119 + 1);
  v18 = 40 * v16;
  LODWORD(v146) = 40 * v16;
  if (!(40 * v16))
    goto LABEL_16;
LABEL_12:
  v19 = *(_QWORD **)(v17 + 192);
  if ((unint64_t)v19 >= *(_QWORD *)(v17 + 200))
  {
    v23 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v17 + 184), (int *)&v146);
  }
  else
  {
    *v19 = 0;
    v19[1] = 0;
    v19[2] = 0;
    if (v18 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v20 = v18;
    v21 = (char *)operator new(v18);
    *v19 = v21;
    v22 = &v21[v20];
    v19[2] = &v21[v20];
    bzero(v21, v20);
    v19[1] = v22;
    v23 = (char *)(v19 + 3);
    *(_QWORD *)(v17 + 192) = v19 + 3;
  }
  *(_QWORD *)(v17 + 192) = v23;
  v24 = *((_DWORD *)a2 + 8);
  *((_QWORD *)a4 + 6) = *((_QWORD *)v23 - 3);
  if (v24 >= 1)
  {
LABEL_20:
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumValueDescriptorProto>::TypeHandler>((uint64_t)a2 + 24, v26);
      google::protobuf::DescriptorBuilder::BuildEnumValue(v119, v27, (uint64_t *)a4, *((_QWORD *)a4 + 6) + v25);
      ++v26;
      v25 += 40;
    }
    while (v26 < *((int *)a2 + 8));
  }
LABEL_22:
  v28 = *((_DWORD *)a2 + 14);
  *((_DWORD *)a4 + 14) = v28;
  v29 = *((_QWORD *)v119 + 1);
  v30 = 8 * v28;
  LODWORD(v146) = 8 * v28;
  if (!(8 * v28))
  {
    *((_QWORD *)a4 + 8) = 0;
    if (v28 < 1)
      goto LABEL_34;
    goto LABEL_30;
  }
  v31 = *(_QWORD **)(v29 + 192);
  if ((unint64_t)v31 >= *(_QWORD *)(v29 + 200))
  {
    v35 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v29 + 184), (int *)&v146);
  }
  else
  {
    *v31 = 0;
    v31[1] = 0;
    v31[2] = 0;
    if (v30 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v32 = v30;
    v33 = (char *)operator new(v30);
    *v31 = v33;
    v34 = &v33[v32];
    v31[2] = &v33[v32];
    bzero(v33, v32);
    v31[1] = v34;
    v35 = (char *)(v31 + 3);
    *(_QWORD *)(v29 + 192) = v31 + 3;
  }
  *(_QWORD *)(v29 + 192) = v35;
  v36 = *((_DWORD *)a2 + 14);
  *((_QWORD *)a4 + 8) = *((_QWORD *)v35 - 3);
  if (v36 >= 1)
  {
LABEL_30:
    v37 = 0;
    do
    {
      v38 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto_EnumReservedRange>::TypeHandler>((uint64_t)a2 + 48, v37);
      v39 = *(int32x2_t *)(v38 + 24);
      *(int32x2_t *)(*((_QWORD *)a4 + 8) + 8 * v37) = v39;
      if ((vcgt_s32(v39, vdup_lane_s32(v39, 1)).u8[0] & 1) != 0)
        google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, *((const std::string::value_type **)a4 + 1), v38, 1, "Reserved range end number must be greater than start number.");
      ++v37;
    }
    while (v37 < *((int *)a2 + 14));
  }
LABEL_34:
  v40 = *((unsigned int *)a2 + 20);
  *((_DWORD *)a4 + 15) = v40;
  v41 = *((_QWORD *)v119 + 1);
  v42 = 8 * v40;
  LODWORD(v146) = 8 * v40;
  if (!(8 * (_DWORD)v40))
  {
    *((_QWORD *)a4 + 9) = 0;
    if ((int)v40 < 1)
      goto LABEL_50;
    goto LABEL_42;
  }
  v43 = *(_QWORD **)(v41 + 192);
  if ((unint64_t)v43 >= *(_QWORD *)(v41 + 200))
  {
    v47 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v41 + 184), (int *)&v146);
  }
  else
  {
    *v43 = 0;
    v43[1] = 0;
    v43[2] = 0;
    if (v42 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v44 = v42;
    v45 = (char *)operator new(v42);
    *v43 = v45;
    v46 = &v45[v44];
    v43[2] = &v45[v44];
    bzero(v45, v44);
    v43[1] = v46;
    v47 = (char *)(v43 + 3);
    *(_QWORD *)(v41 + 192) = v43 + 3;
  }
  *(_QWORD *)(v41 + 192) = v47;
  *((_QWORD *)a4 + 9) = *((_QWORD *)v47 - 3);
  if ((int)v40 >= 1)
  {
LABEL_42:
    for (i = 0; i != v40; ++i)
    {
      v50 = *((_QWORD *)v119 + 1);
      v51 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)a2 + 72, i);
      v52 = (std::string *)operator new();
      v53 = v52;
      if (*(char *)(v51 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v51, *(_QWORD *)(v51 + 8));
      }
      else
      {
        v54 = *(_OWORD *)v51;
        v52->__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 16);
        *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v54;
      }
      v146 = (char *)v53;
      v55 = *(std::string ***)(v50 + 216);
      if ((unint64_t)v55 < *(_QWORD *)(v50 + 224))
      {
        *v55 = v53;
        v49 = (char *)(v55 + 1);
      }
      else
      {
        v49 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v50 + 208), &v146);
        v53 = (std::string *)v146;
      }
      *(_QWORD *)(v50 + 216) = v49;
      *(_QWORD *)(*((_QWORD *)a4 + 9) + 8 * i) = v53;
    }
  }
LABEL_50:
  google::protobuf::DescriptorBuilder::CheckEnumValueUniqueness(v119, a2, a4);
  *((_QWORD *)a4 + 4) = 0;
  if ((*((_DWORD *)a2 + 4) & 2) != 0)
  {
    v56 = (google::protobuf::EnumOptions *)*((_QWORD *)a2 + 13);
    if (!v56)
    {
      v57 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v146, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 9544);
      v58 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v57, "CHECK failed: !value || options_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v143, v58);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v146);
      v56 = (google::protobuf::EnumOptions *)*((_QWORD *)a2 + 13);
    }
    if (v56)
      v59 = v56;
    else
      v59 = (google::protobuf::EnumOptions *)&google::protobuf::_EnumOptions_default_instance_;
    v146 = (char *)operator new(0x20uLL);
    v147 = xmmword_22DCE6520;
    strcpy(v146, "google.protobuf.EnumOptions");
    google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::EnumDescriptor>((uint64_t)v119, v59, (uint64_t)a4, 3, (std::string::size_type)&v146);
    if (SHIBYTE(v147) < 0)
      operator delete(v146);
  }
  google::protobuf::DescriptorBuilder::AddSymbol((uint64_t)v119, *((_QWORD *)a4 + 1), (uint64_t *)a3, *(_QWORD *)a4, (uint64_t)a2, (const char *)4, (const char *)a4);
  if (*((int *)a2 + 14) >= 1)
  {
    v61 = 0;
    v62 = 2;
    for (j = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto_EnumReservedRange>::TypeHandler>((uint64_t)a2 + 48, 0);
          ;
          j = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto_EnumReservedRange>::TypeHandler>((uint64_t)a2 + 48, v65))
    {
      v65 = v61 + 1;
      v64 = *((int *)a2 + 14);
      if (v61 + 1 < v64)
      {
        v66 = j;
        v67 = v62;
        LODWORD(v64) = *((_DWORD *)a2 + 14);
        do
        {
          if (v67 - 1 >= (int)v64)
          {
            v68 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v146, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
            v69 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v68, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((uint64_t)&v143, v69);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v146);
          }
          v70 = *((_QWORD *)a2 + 8);
          v71 = *(_QWORD *)(v70 + 8 * v67);
          v72 = (google::protobuf *)*(unsigned int *)(v71 + 24);
          if (*(_DWORD *)(v66 + 28) >= (int)v72 && *(_DWORD *)(v71 + 28) >= *(_DWORD *)(v66 + 24))
          {
            v73 = (const std::string::value_type *)*((_QWORD *)a4 + 1);
            if (v61 >= *((int *)a2 + 14))
            {
              v74 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v146, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
              v75 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v74, "CHECK failed: (index) < (current_size_): ");
              google::protobuf::internal::LogFinisher::operator=((uint64_t)&v143, v75);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v146);
              v70 = *((_QWORD *)a2 + 8);
              v72 = (google::protobuf *)*(unsigned int *)(v71 + 24);
            }
            v76 = *(_QWORD *)(v70 + 8 * v61 + 8);
            v146 = google::protobuf::FastInt32ToBuffer(v72, (_BYTE *)&v147 + 4, v60);
            LODWORD(v147) = strlen(v146);
            v143 = google::protobuf::FastInt32ToBuffer((google::protobuf *)*(unsigned int *)(v71 + 28), v145, v77);
            v144 = strlen(v143);
            v140 = google::protobuf::FastInt32ToBuffer((google::protobuf *)*(unsigned int *)(v66 + 24), v142, v78);
            v141 = strlen(v140);
            v137 = google::protobuf::FastInt32ToBuffer((google::protobuf *)*(unsigned int *)(v66 + 28), v139, v79);
            v138 = strlen(v137);
            v135 = 0;
            v136 = -1;
            v133 = 0;
            v134 = -1;
            v131 = 0;
            v132 = -1;
            v129 = 0;
            v130 = -1;
            v127 = 0;
            v128 = -1;
            v125 = 0;
            v126 = -1;
            *((_QWORD *)&v114 + 1) = &v127;
            *(_QWORD *)&v114 = &v129;
            google::protobuf::strings::Substitute("Reserved range $0 to $1 overlaps with already-defined range $2 to $3.", (uint64_t)&v146, (uint64_t)&v143, (uint64_t)&v140, (uint64_t)&v137, (uint64_t)&v135, (uint64_t)&v133, (uint64_t)&v131, (std::string *)__p, v114, (uint64_t)&v125);
            google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, v73, v76, 1, (const std::string::value_type *)__p);
            if (SBYTE7(v123) < 0)
              operator delete(__p[0]);
          }
          LODWORD(v64) = *((_DWORD *)a2 + 14);
          ++v67;
        }
        while ((int)v64 > (int)v67 - 1);
        v64 = (int)v64;
        v65 = v61 + 1;
      }
      ++v62;
      v61 = v65;
      if (v65 >= v64)
        break;
    }
  }
  *(_OWORD *)__p = 0u;
  v123 = 0u;
  v124 = 1065353216;
  if (*((int *)a2 + 20) >= 1)
  {
    v80 = 0;
    do
    {
      v81 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)a2 + 72, v80);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(__p, v81))
      {
        v82 = *(char *)(v81 + 23);
        v83 = v82 < 0;
        v84 = *(char **)v81;
        v85 = *(_QWORD *)(v81 + 8);
        if (v82 >= 0)
          v84 = (char *)v81;
        v146 = v84;
        v82 = v82;
        if (v83)
          v82 = v85;
        LODWORD(v147) = v82;
        v143 = 0;
        v144 = -1;
        v140 = 0;
        v141 = -1;
        v137 = 0;
        v138 = -1;
        v135 = 0;
        v136 = -1;
        v133 = 0;
        v134 = -1;
        v131 = 0;
        v132 = -1;
        v129 = 0;
        v130 = -1;
        v127 = 0;
        v128 = -1;
        v125 = 0;
        v126 = -1;
        *((_QWORD *)&v115 + 1) = &v127;
        *(_QWORD *)&v115 = &v129;
        google::protobuf::strings::Substitute("Enum value \"$0\" is reserved multiple times.", (uint64_t)&v146, (uint64_t)&v143, (uint64_t)&v140, (uint64_t)&v137, (uint64_t)&v135, (uint64_t)&v133, (uint64_t)&v131, &v121, v115, (uint64_t)&v125);
        google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, (const std::string::value_type *)v81, (uint64_t)a2, 0, (const std::string::value_type *)&v121);
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v121.__r_.__value_.__l.__data_);
      }
      else
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, v81, v81);
      }
      ++v80;
    }
    while (v80 < *((_DWORD *)a2 + 20));
  }
  v86 = a4;
  if (*((int *)a4 + 11) >= 1)
  {
    v87 = 0;
    do
    {
      *(_QWORD *)v118 = *((_QWORD *)v86 + 6);
      v88 = (uint64_t *)(*(_QWORD *)v118 + 40 * v87);
      v89 = *((_DWORD *)v86 + 14);
      if (v89 >= 1)
      {
        v90 = 0;
        v91 = 0;
        v92 = *(_QWORD *)v118 + 40 * v87;
        v93 = (unsigned int *)(v92 + 16);
        v94 = (const std::string::value_type **)(v92 + 8);
        do
        {
          v95 = *((_QWORD *)a4 + 8);
          v96 = (google::protobuf *)*v93;
          if (*(_DWORD *)(v95 + v90) <= (int)v96 && (int)v96 <= *(_DWORD *)(v95 + v90 + 4))
          {
            v97 = *v94;
            if (v91 >= *((int *)a2 + 14))
            {
              v98 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v146, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
              v99 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v98, "CHECK failed: (index) < (current_size_): ");
              google::protobuf::internal::LogFinisher::operator=((uint64_t)&v143, v99);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v146);
              v96 = (google::protobuf *)*v93;
            }
            v100 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v91 + 8);
            v101 = (char *)*v88;
            v102 = *(char *)(*v88 + 23);
            v103 = *(_QWORD *)(*v88 + 8);
            if (v102 < 0)
              v101 = *(char **)*v88;
            v146 = v101;
            v104 = v102;
            if (v102 < 0)
              v104 = v103;
            LODWORD(v147) = v104;
            v143 = google::protobuf::FastInt32ToBuffer(v96, v145, v60);
            v144 = strlen(v143);
            v140 = 0;
            v141 = -1;
            v137 = 0;
            v138 = -1;
            v135 = 0;
            v136 = -1;
            v133 = 0;
            v134 = -1;
            v131 = 0;
            v132 = -1;
            v129 = 0;
            v130 = -1;
            v127 = 0;
            v128 = -1;
            v125 = 0;
            v126 = -1;
            *((_QWORD *)&v116 + 1) = &v127;
            *(_QWORD *)&v116 = &v129;
            google::protobuf::strings::Substitute("Enum value \"$0\" uses reserved number $1.", (uint64_t)&v146, (uint64_t)&v143, (uint64_t)&v140, (uint64_t)&v137, (uint64_t)&v135, (uint64_t)&v133, (uint64_t)&v131, &v121, v116, (uint64_t)&v125);
            google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, v97, v100, 1, (const std::string::value_type *)&v121);
            if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v121.__r_.__value_.__l.__data_);
            v89 = *((_DWORD *)a4 + 14);
          }
          ++v91;
          v90 += 8;
        }
        while (v91 < v89);
      }
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(__p, *v88))
      {
        v105 = *(const std::string::value_type **)(*(_QWORD *)v118 + 40 * v87 + 8);
        v106 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumValueDescriptorProto>::TypeHandler>((uint64_t)a2 + 24, v87);
        v107 = (char *)*v88;
        v108 = *(char *)(*v88 + 23);
        v109 = *(_QWORD *)(*v88 + 8);
        if (v108 < 0)
          v107 = *(char **)*v88;
        v146 = v107;
        v110 = v108;
        if (v108 < 0)
          v110 = v109;
        LODWORD(v147) = v110;
        v143 = 0;
        v144 = -1;
        v140 = 0;
        v141 = -1;
        v137 = 0;
        v138 = -1;
        v135 = 0;
        v136 = -1;
        v133 = 0;
        v134 = -1;
        v131 = 0;
        v132 = -1;
        v129 = 0;
        v130 = -1;
        v127 = 0;
        v128 = -1;
        v125 = 0;
        v126 = -1;
        *((_QWORD *)&v117 + 1) = &v127;
        *(_QWORD *)&v117 = &v129;
        google::protobuf::strings::Substitute("Enum value \"$0\" is reserved.", (uint64_t)&v146, (uint64_t)&v143, (uint64_t)&v140, (uint64_t)&v137, (uint64_t)&v135, (uint64_t)&v133, (uint64_t)&v131, &v121, v117, (uint64_t)&v125);
        google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, v105, v106, 0, (const std::string::value_type *)&v121);
        if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v121.__r_.__value_.__l.__data_);
      }
      ++v87;
      v86 = a4;
    }
    while (v87 < *((int *)a4 + 11));
  }
  v111 = (void **)v123;
  if ((_QWORD)v123)
  {
    do
    {
      v113 = (void **)*v111;
      if (*((char *)v111 + 39) < 0)
        operator delete(v111[2]);
      operator delete(v111);
      v111 = v113;
    }
    while (v113);
  }
  v112 = __p[0];
  __p[0] = 0;
  if (v112)
    operator delete(v112);
}

void sub_22DC49024(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_22DC49038(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_22DC4904C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_22DC490D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::unordered_map<std::string,google::protobuf::Descriptor::WellKnownType>::~unordered_map[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_22DC49194(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_22DC491A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorBuilder::BuildService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const std::string::value_type *NameString;
  uint64_t v8;
  __int128 *v9;
  std::string *v10;
  std::string::size_type v11;
  __int128 v12;
  std::string::size_type *v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  google::protobuf::ServiceOptions *v28;
  unsigned int *v29;
  google::protobuf::ServiceOptions *v30;
  char v32;
  std::string __p[2];

  NameString = (const std::string::value_type *)google::protobuf::DescriptorBuilder::AllocateNameString(a1, *(uint64_t **)(*(_QWORD *)(a1 + 80) + 8), *(_QWORD *)(a2 + 48));
  google::protobuf::DescriptorBuilder::ValidateSymbolName(a1, *(uint64_t **)(a2 + 48), NameString, a2);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(__int128 **)(a2 + 48);
  v10 = (std::string *)operator new();
  v11 = (std::string::size_type)v10;
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v12 = *v9;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
  }
  __p[0].__r_.__value_.__r.__words[0] = v11;
  v13 = *(std::string::size_type **)(v8 + 216);
  if ((unint64_t)v13 >= *(_QWORD *)(v8 + 224))
  {
    v14 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v8 + 208), __p);
    v11 = __p[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *v13 = v11;
    v14 = (char *)(v13 + 1);
  }
  *(_QWORD *)(v8 + 216) = v14;
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = NameString;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 80);
  v15 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a4 + 40) = v15;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = 104 * v15;
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 104 * v15;
  if (!(104 * v15))
  {
    *(_QWORD *)(a4 + 32) = 0;
    if (v15 < 1)
      goto LABEL_17;
    goto LABEL_15;
  }
  v18 = *(_QWORD **)(v16 + 192);
  if ((unint64_t)v18 >= *(_QWORD *)(v16 + 200))
  {
    v23 = std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v16 + 184), (int *)__p);
    *(_QWORD *)(v16 + 192) = v23;
    v24 = *(_DWORD *)(a2 + 32);
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v23 - 3);
    if (v24 < 1)
      goto LABEL_17;
    goto LABEL_15;
  }
  *v18 = 0;
  v18[1] = 0;
  v18[2] = 0;
  if (v17 < 0)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v19 = v17;
  v20 = (char *)operator new(v17);
  *v18 = v20;
  v21 = &v20[v19];
  v18[2] = &v20[v19];
  bzero(v20, v19);
  v18[1] = v21;
  *(_QWORD *)(v16 + 192) = v18 + 3;
  *(_QWORD *)(v16 + 192) = v18 + 3;
  v22 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a4 + 32) = *v18;
  if (v22 >= 1)
  {
LABEL_15:
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MethodDescriptorProto>::TypeHandler>(a2 + 24, v26);
      google::protobuf::DescriptorBuilder::BuildMethod(a1, v27, a4, *(_QWORD *)(a4 + 32) + v25);
      ++v26;
      v25 += 104;
    }
    while (v26 < *(int *)(a2 + 32));
  }
LABEL_17:
  *(_QWORD *)(a4 + 24) = 0;
  if ((*(_DWORD *)(a2 + 16) & 2) != 0)
  {
    v28 = *(google::protobuf::ServiceOptions **)(a2 + 56);
    if (!v28)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 10080);
      v29 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: !value || options_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v32, v29);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      v28 = *(google::protobuf::ServiceOptions **)(a2 + 56);
    }
    if (v28)
      v30 = v28;
    else
      v30 = (google::protobuf::ServiceOptions *)&google::protobuf::_ServiceOptions_default_instance_;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_22DCE5C00;
    strcpy(__p[0].__r_.__value_.__l.__data_, "google.protobuf.ServiceOptions");
    google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::ServiceDescriptor>(a1, v30, a4, 3, (std::string::size_type)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::DescriptorBuilder::AddSymbol(a1, *(_QWORD *)(a4 + 8), 0, *(_QWORD *)a4, a2, (const char *)6, (const char *)a4);
}

void sub_22DC49498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC494AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC494C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_22DC494E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22DC49500(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v2 + 192) = v1;
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::CrossLinkFile(google::protobuf::DescriptorBuilder *this, google::protobuf::FileDescriptor *a2, const google::protobuf::FileDescriptorProto *a3)
{
  google::protobuf::FileDescriptor *v4;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::Descriptor *v8;
  const google::protobuf::DescriptorProto *v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::FieldDescriptor *v12;
  const google::protobuf::FieldDescriptorProto *v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::EnumOptions *v16;
  google::protobuf::EnumOptions *v17;
  uint64_t v18;
  google::protobuf::EnumOptions **v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t i;
  uint64_t v33;
  google::protobuf::ServiceOptions *v34;
  google::protobuf::ServiceOptions *v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int *v48;
  const google::protobuf::FileDescriptorProto *v49;
  int *v50;
  char v51;
  std::string v52[2];

  v4 = a2;
  if (!*((_QWORD *)a2 + 17))
    *((_QWORD *)a2 + 17) = google::protobuf::FileOptions::default_instance(this);
  if (*((int *)v4 + 11) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (google::protobuf::Descriptor *)(*((_QWORD *)v4 + 13) + v6);
      v9 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)a3 + 48, v7);
      google::protobuf::DescriptorBuilder::CrossLinkMessage(this, v8, v9);
      ++v7;
      v6 += 144;
    }
    while (v7 < *((int *)v4 + 11));
  }
  if (*((int *)v4 + 14) >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (google::protobuf::FieldDescriptor *)(*((_QWORD *)v4 + 16) + v10);
      v13 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a3 + 120, v11);
      google::protobuf::DescriptorBuilder::CrossLinkField((google::protobuf::FileDescriptorTables **)this, v12, v13);
      ++v11;
      v10 += 152;
    }
    while (v11 < *((int *)v4 + 14));
  }
  v49 = a3;
  v50 = (int *)v4;
  if (*((int *)v4 + 12) >= 1)
  {
    v14 = 0;
    while (1)
    {
      v15 = *((_QWORD *)v4 + 14);
      v16 = (google::protobuf::EnumOptions *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)v49 + 72, v14);
      v17 = v16;
      v18 = v15 + 80 * v14;
      v20 = *(_QWORD *)(v18 + 32);
      v19 = (google::protobuf::EnumOptions **)(v18 + 32);
      if (!v20)
        break;
      v21 = v15 + 80 * v14;
      v23 = *(_DWORD *)(v21 + 44);
      v22 = (int *)(v21 + 44);
      if (v23 >= 1)
        goto LABEL_16;
LABEL_11:
      ++v14;
      v4 = (google::protobuf::FileDescriptor *)v50;
      if (v14 >= v50[12])
        goto LABEL_26;
    }
    v16 = (google::protobuf::EnumOptions *)google::protobuf::EnumOptions::default_instance(v16);
    *v19 = v16;
    v24 = v15 + 80 * v14;
    v25 = *(_DWORD *)(v24 + 44);
    v22 = (int *)(v24 + 44);
    if (v25 < 1)
      goto LABEL_11;
LABEL_16:
    v26 = 0;
    v27 = (uint64_t *)(v15 + 80 * v14 + 48);
    v28 = 32;
    while (1)
    {
      v29 = *v27;
      if ((v26 & 0x80000000) != 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v52, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
        v30 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v52, "CHECK failed: (index) >= (0): ");
        google::protobuf::internal::LogFinisher::operator=((uint64_t)&v51, v30);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v52[0].__r_.__value_.__l.__data_);
        if (*((_DWORD *)v17 + 8) <= (int)v26)
        {
LABEL_23:
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v52, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
          v31 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v52, "CHECK failed: (index) < (current_size_): ");
          google::protobuf::internal::LogFinisher::operator=((uint64_t)&v51, v31);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v52[0].__r_.__value_.__l.__data_);
        }
      }
      else if (*((_DWORD *)v17 + 8) <= (int)v26)
      {
        goto LABEL_23;
      }
      if (*(_QWORD *)(v29 + v28))
      {
        ++v26;
        v28 += 40;
        if (v26 >= *v22)
          goto LABEL_11;
      }
      else
      {
        v16 = (google::protobuf::EnumOptions *)google::protobuf::EnumValueOptions::default_instance(v16);
        *(_QWORD *)(v29 + v28) = v16;
        ++v26;
        v28 += 40;
        if (v26 >= *v22)
          goto LABEL_11;
      }
    }
  }
LABEL_26:
  if (*((int *)v4 + 13) >= 1)
  {
    for (i = 0; i < v50[13]; ++i)
    {
      v33 = *((_QWORD *)v4 + 15);
      v34 = (google::protobuf::ServiceOptions *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::TypeHandler>((uint64_t)v49 + 96, i);
      v35 = v34;
      v36 = v33 + 48 * i;
      v38 = *(_QWORD *)(v36 + 24);
      v37 = (uint64_t **)(v36 + 24);
      if (v38)
      {
        v39 = v33 + 48 * i;
        v41 = *(_DWORD *)(v39 + 40);
        v40 = (int *)(v39 + 40);
        if (v41 >= 1)
          goto LABEL_33;
      }
      else
      {
        *v37 = google::protobuf::ServiceOptions::default_instance(v34);
        v42 = v33 + 48 * i;
        v43 = *(_DWORD *)(v42 + 40);
        v40 = (int *)(v42 + 40);
        if (v43 >= 1)
        {
LABEL_33:
          v44 = 0;
          v45 = 0;
          v46 = (uint64_t *)(v33 + 48 * i + 32);
          do
          {
            v47 = *v46;
            if (v45 >= *((int *)v35 + 8))
            {
              google::protobuf::internal::LogMessage::LogMessage((uint64_t)v52, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
              v48 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v52, "CHECK failed: (index) < (current_size_): ");
              google::protobuf::internal::LogFinisher::operator=((uint64_t)&v51, v48);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v52[0].__r_.__value_.__l.__data_);
            }
            google::protobuf::DescriptorBuilder::CrossLinkMethod(this, (google::protobuf::MethodDescriptor *)(v47 + v44), *(const google::protobuf::MethodDescriptorProto **)(*((_QWORD *)v35 + 5) + 8 * v45++ + 8));
            v44 += 104;
          }
          while (v45 < *v40);
        }
      }
      v4 = (google::protobuf::FileDescriptor *)v50;
    }
  }
}

void sub_22DC498D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC498E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC498F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC4990C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC49920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC49934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::ArenaImpl *google::protobuf::DescriptorBuilder::OptionInterpreter::UpdateSourceCodeInfo(google::protobuf::internal::ArenaImpl *this, google::protobuf::SourceCodeInfo *a2)
{
  google::protobuf::SourceCodeInfo *v2;
  char v3;
  char v4;
  uint64_t v5;
  const google::protobuf::SourceCodeInfo_Location **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const google::protobuf::SourceCodeInfo_Location *v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  int *v37;
  char *v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  google::protobuf::SourceCodeInfo_Location *v55;
  uint64_t v56;
  uint64_t v57;
  const google::protobuf::SourceCodeInfo_Location **v58;
  const google::protobuf::SourceCodeInfo_Location *v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  google::protobuf::SourceCodeInfo_Location *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  int v68;
  int v69;
  unsigned int *v70;
  void *v71;
  google::protobuf::SourceCodeInfo_Location **v72;
  uint64_t v73;
  google::protobuf::internal::ArenaImpl **v74;
  _QWORD *v75;
  char v77;
  char *__p;
  char *v79;
  char *v80;
  google::protobuf::internal::ArenaImpl *v81;
  uint64_t v82;
  void *v83;
  char v84;
  std::string v85[2];

  if (*((_QWORD *)this + 5))
  {
    v2 = a2;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    __p = 0;
    v79 = 0;
    v80 = 0;
    if (!*((_DWORD *)a2 + 6))
      goto LABEL_112;
    v3 = 0;
    v4 = 0;
    v5 = *((_QWORD *)a2 + 4);
    if (v5)
      v6 = (const google::protobuf::SourceCodeInfo_Location **)(v5 + 8);
    else
      v6 = 0;
    v7 = (_QWORD *)((char *)this + 32);
    v74 = (google::protobuf::internal::ArenaImpl **)((char *)a2 + 16);
    v75 = (_QWORD *)((char *)this + 32);
    while (1)
    {
      v10 = (uint64_t)__p;
      v11 = *v6;
      if ((v4 & 1) != 0)
      {
        v12 = (v79 - __p) >> 2;
        if (v12 <= *((int *)v11 + 6))
        {
          if (v79 == __p)
          {
LABEL_18:
            v4 = 1;
            goto LABEL_8;
          }
          v13 = 0;
          while (*(_DWORD *)google::protobuf::RepeatedField<int>::Get((uint64_t)*v6 + 24, v13) == *(_DWORD *)&__p[4 * v13])
          {
            if (v12 <= ++v13)
              goto LABEL_18;
          }
          v11 = *v6;
        }
      }
      v77 = v3;
      v79 = __p;
      v14 = (int *)((char *)v11 + 24);
      if (*((int *)v11 + 6) >= 1)
      {
        v15 = 0;
        while (1)
        {
          v16 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get((uint64_t)v14, v15);
          v17 = v79;
          if (v79 >= v80)
            break;
          *(_DWORD *)v79 = v16;
          v10 = (uint64_t)(v79 + 4);
LABEL_23:
          v79 = (char *)v10;
          ++v15;
          v11 = *v6;
          v14 = (int *)((char *)*v6 + 24);
          if (v15 >= *v14)
          {
            v7 = v75;
            v2 = a2;
            goto LABEL_45;
          }
        }
        v18 = __p;
        v19 = (v79 - __p) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v21 = v80 - __p;
        if ((v80 - __p) >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(4 * v22);
          v24 = &v23[4 * v19];
          *(_DWORD *)v24 = v16;
          v10 = (uint64_t)(v24 + 4);
          if (v79 == __p)
            goto LABEL_42;
        }
        else
        {
          v23 = 0;
          v24 = (char *)(4 * v19);
          *(_DWORD *)(4 * v19) = v16;
          v10 = 4 * v19 + 4;
          if (v79 == __p)
          {
LABEL_42:
            __p = v24;
            v80 = &v23[4 * v22];
            if (v18)
              operator delete(v18);
            goto LABEL_23;
          }
        }
        v25 = v79 - 4 - __p;
        if (v25 < 0x2C)
          goto LABEL_130;
        if ((unint64_t)(__p - v23) < 0x20)
          goto LABEL_130;
        v26 = (v25 >> 2) + 1;
        v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
        v28 = &v79[-v27];
        v24 -= v27;
        v29 = &v23[4 * v19 - 16];
        v30 = v79 - 16;
        v31 = v26 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 8;
        }
        while (v31);
        v17 = v28;
        if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_130:
          do
          {
            v33 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v24 - 1) = v33;
            v24 -= 4;
          }
          while (v17 != __p);
        }
        goto LABEL_42;
      }
LABEL_45:
      v34 = (_QWORD *)*v7;
      if (*v7)
      {
        v35 = __p;
        if (__p == (char *)v10)
        {
          do
          {
            v36 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
        else
        {
          v36 = v7;
          do
          {
LABEL_49:
            v37 = (int *)v34[4];
            v38 = __p + 4;
            do
            {
              if (v37 == (int *)v34[5] || (v39 = *v37, v40 = *((_DWORD *)v38 - 1), *v37 < v40))
              {
                v34 = (_QWORD *)v34[1];
                if (!v34)
                  goto LABEL_60;
                goto LABEL_49;
              }
              ++v37;
              v41 = v40 < v39 || v38 == (char *)v10;
              v38 += 4;
            }
            while (!v41);
            v36 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
LABEL_60:
        if (v36 != v7)
          break;
      }
LABEL_74:
      if ((v77 & 1) != 0)
      {
        v52 = v83;
        if (v83)
        {
          v53 = (int)v82;
          v54 = *(_DWORD *)v83;
          if ((int)v82 < *(_DWORD *)v83)
          {
            LODWORD(v82) = v82 + 1;
            v55 = (google::protobuf::SourceCodeInfo_Location *)*((_QWORD *)v83 + v53 + 1);
LABEL_82:
            google::protobuf::SourceCodeInfo_Location::CopyFrom(v55, v11);
            v4 = 0;
            v3 = 1;
            goto LABEL_8;
          }
          if (v54 == HIDWORD(v82))
          {
LABEL_80:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v81, v54 + 1);
            v52 = v83;
            v54 = *(_DWORD *)v83;
          }
          *v52 = v54 + 1;
          v55 = (google::protobuf::SourceCodeInfo_Location *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::SourceCodeInfo_Location>(v81);
          v56 = (int)v82;
          LODWORD(v82) = v82 + 1;
          *((_QWORD *)v83 + v56 + 1) = v55;
          goto LABEL_82;
        }
        v54 = HIDWORD(v82);
        goto LABEL_80;
      }
      v4 = 0;
      v3 = 0;
LABEL_8:
      ++v6;
      v8 = *((_QWORD *)v2 + 4);
      if (v8)
        v9 = v8 + 8;
      else
        v9 = 0;
      if (v6 == (const google::protobuf::SourceCodeInfo_Location **)(v9 + 8 * *((int *)v2 + 6)))
      {
        if (((v74 != &v81) & v3) != 0)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::TypeHandler>((uint64_t)v74);
          google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::TypeHandler>((uint64_t)v74, (uint64_t)&v81);
        }
        if (__p)
          operator delete(__p);
LABEL_112:
        v71 = v83;
        this = v81;
        if (v83)
        {
          if (v81)
          {
            v83 = 0;
            return (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::SpaceAllocated(this);
          }
          v72 = (google::protobuf::SourceCodeInfo_Location **)((char *)v83 + 8);
          v73 = *(unsigned int *)v83;
          if ((int)v73 >= 1)
          {
            do
            {
              if (*v72)
              {
                google::protobuf::SourceCodeInfo_Location::~SourceCodeInfo_Location(*v72);
                MEMORY[0x22E31DF78]();
              }
              ++v72;
              --v73;
            }
            while (v73);
            v71 = v83;
          }
          operator delete(v71);
          this = v81;
        }
        v83 = 0;
        if (!this)
          return this;
        return (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::SpaceAllocated(this);
      }
    }
    v43 = v36[4];
    v42 = v36[5];
    if (v43 != v42)
    {
      v44 = v43 + 4;
      while (v35 != (char *)v10)
      {
        v45 = *(_DWORD *)v35;
        v46 = *(_DWORD *)(v44 - 4);
        if (*(_DWORD *)v35 < v46)
          break;
        v35 += 4;
        v47 = v46 < v45 || v44 == v42;
        v44 += 4;
        if (v47)
          goto LABEL_70;
      }
      goto LABEL_74;
    }
LABEL_70:
    if ((v77 & 1) == 0)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v81, *((_DWORD *)v2 + 6));
      v57 = *((_QWORD *)v2 + 4);
      v58 = v57 ? (const google::protobuf::SourceCodeInfo_Location **)(v57 + 8) : 0;
      if (v58 != v6)
      {
        while (1)
        {
          v59 = *v58;
          v60 = v83;
          if (!v83)
            break;
          v61 = (int)v82;
          v62 = *(_DWORD *)v83;
          if ((int)v82 >= *(_DWORD *)v83)
          {
            if (v62 == HIDWORD(v82))
            {
LABEL_92:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v81, v62 + 1);
              v60 = v83;
              v62 = *(_DWORD *)v83;
            }
            *v60 = v62 + 1;
            v63 = (google::protobuf::SourceCodeInfo_Location *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::SourceCodeInfo_Location>(v81);
            v64 = (int)v82;
            LODWORD(v82) = v82 + 1;
            *((_QWORD *)v83 + v64 + 1) = v63;
            goto LABEL_94;
          }
          LODWORD(v82) = v82 + 1;
          v63 = (google::protobuf::SourceCodeInfo_Location *)*((_QWORD *)v83 + v61 + 1);
LABEL_94:
          google::protobuf::SourceCodeInfo_Location::CopyFrom(v63, v59);
          if (++v58 == v6)
            goto LABEL_71;
        }
        v62 = HIDWORD(v82);
        goto LABEL_92;
      }
    }
LABEL_71:
    v48 = v83;
    if (v83)
    {
      v49 = (int)v82;
      v50 = *(_DWORD *)v83;
      if ((int)v82 < *(_DWORD *)v83)
      {
        LODWORD(v82) = v82 + 1;
        v51 = *((_QWORD *)v83 + v49 + 1);
LABEL_100:
        google::protobuf::SourceCodeInfo_Location::CopyFrom((google::protobuf::SourceCodeInfo_Location *)v51, *v6);
        *(_DWORD *)(v51 + 24) = 0;
        v66 = (int *)v36[7];
        if (v66 != (int *)v36[8])
        {
          v67 = 1;
          do
          {
            v68 = *v66;
            v69 = *(_DWORD *)(v51 + 28);
            if (v67 - 1 == v69)
            {
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v51 + 24), v67);
              v69 = *(_DWORD *)(v51 + 28);
            }
            if (v69 <= 0)
            {
              google::protobuf::internal::LogMessage::LogMessage((uint64_t)v85, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 353);
              v70 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v85, "CHECK failed: (total_size_) > (0): ");
              google::protobuf::internal::LogFinisher::operator=((uint64_t)&v84, v70);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v85[0].__r_.__value_.__l.__data_);
            }
            *(_DWORD *)(*(_QWORD *)(v51 + 32) + 4 * (v67 - 1)) = v68;
            *(_DWORD *)(v51 + 24) = v67;
            ++v66;
            ++v67;
          }
          while (v66 != (int *)v36[8]);
        }
        v4 = 1;
        v3 = 1;
        v7 = v75;
        v2 = a2;
        goto LABEL_8;
      }
      if (v50 != HIDWORD(v82))
      {
LABEL_99:
        *v48 = v50 + 1;
        v51 = google::protobuf::Arena::CreateMaybeMessage<google::protobuf::SourceCodeInfo_Location>(v81);
        v65 = (int)v82;
        LODWORD(v82) = v82 + 1;
        *((_QWORD *)v83 + v65 + 1) = v51;
        goto LABEL_100;
      }
    }
    else
    {
      v50 = HIDWORD(v82);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v81, v50 + 1);
    v48 = v83;
    v50 = *(_DWORD *)v83;
    goto LABEL_99;
  }
  return this;
}

void sub_22DC4A018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::~RepeatedPtrField((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::OptionInterpreter::~OptionInterpreter(google::protobuf::DescriptorBuilder::OptionInterpreter *this)
{
  google::protobuf::DynamicMessageFactory::~DynamicMessageFactory((google::protobuf::DescriptorBuilder::OptionInterpreter *)((char *)this + 72));
  std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
}

void google::protobuf::DescriptorBuilder::ValidateFileOptions(google::protobuf::FileOptions *a1, uint64_t a2, uint64_t a3)
{
  google::protobuf::DescriptorBuilder *v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::Descriptor *v8;
  const google::protobuf::DescriptorProto *v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::EnumDescriptor *v12;
  const google::protobuf::EnumDescriptorProto *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::FileOptions *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int *v25;
  int v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  google::protobuf::FieldDescriptor *v31;
  const google::protobuf::FieldDescriptorProto *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  const std::string::value_type *v42;
  unint64_t v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::string v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD v51[2];
  std::string __p[2];

  v5 = a1;
  if (*(int *)(a2 + 44) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (google::protobuf::Descriptor *)(*(_QWORD *)(a2 + 104) + v6);
      v9 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>(a3 + 48, v7);
      google::protobuf::DescriptorBuilder::ValidateMessageOptions(v5, v8, v9);
      ++v7;
      v6 += 144;
    }
    while (v7 < *(int *)(a2 + 44));
  }
  if (*(int *)(a2 + 48) >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (google::protobuf::EnumDescriptor *)(*(_QWORD *)(a2 + 112) + v10);
      v13 = (const google::protobuf::EnumDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>(a3 + 72, v11);
      google::protobuf::DescriptorBuilder::ValidateEnumOptions(v5, v12, v13);
      ++v11;
      v10 += 80;
    }
    while (v11 < *(int *)(a2 + 48));
  }
  v46 = a3;
  if (*(int *)(a2 + 52) >= 1)
  {
    v14 = 0;
    v47 = a3 + 96;
    do
    {
      v15 = *(_QWORD *)(a2 + 120);
      a1 = (google::protobuf::FileOptions *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::TypeHandler>(v47, v14);
      v16 = (uint64_t)a1;
      v17 = v15 + 48 * v14;
      v20 = *(_QWORD *)(v17 + 16);
      v19 = v17 + 16;
      v18 = v20;
      if (v20)
      {
        v21 = *(google::protobuf::FileOptions **)(v18 + 136);
        a1 = (google::protobuf::FileOptions *)google::protobuf::FileOptions::default_instance(a1);
        if (v21 != a1 && *(_DWORD *)(*(_QWORD *)(v18 + 136) + 160) == 3)
        {
          v22 = *(_QWORD *)(*(_QWORD *)v19 + 136);
          if (*(_BYTE *)(v22 + 155) || *(_BYTE *)(v22 + 156))
            google::protobuf::DescriptorBuilder::AddError((uint64_t)v5, *(const std::string::value_type **)(v15 + 48 * v14 + 8), v16, 0, "Files with optimize_for = LITE_RUNTIME cannot define services unless you set both options cc_generic_services and java_generic_services to false.");
        }
      }
      v23 = v15 + 48 * v14;
      v26 = *(_DWORD *)(v23 + 40);
      v25 = (int *)(v23 + 40);
      v24 = v26;
      if (v26 >= 1)
      {
        v27 = 0;
        do
        {
          if (*(_DWORD *)(v16 + 32) <= v27)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
            v28 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((uint64_t)&v48, v28);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
            v24 = *v25;
          }
          ++v27;
        }
        while (v27 < v24);
      }
      ++v14;
    }
    while (v14 < *(int *)(a2 + 52));
  }
  if (*(int *)(a2 + 56) >= 1)
  {
    v29 = 0;
    v30 = 0;
    do
    {
      v31 = (google::protobuf::FieldDescriptor *)(*(_QWORD *)(a2 + 128) + v29);
      v32 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>(v46 + 120, v30);
      google::protobuf::DescriptorBuilder::ValidateFieldOptions(v5, v31, v32);
      ++v30;
      v29 += 152;
    }
    while (v30 < *(int *)(a2 + 56));
  }
  v33 = *(uint64_t **)(a2 + 136);
  if ((v33 == google::protobuf::FileOptions::default_instance(a1) || *(_DWORD *)(*(_QWORD *)(a2 + 136) + 160) != 3)
    && *(int *)(a2 + 32) >= 1)
  {
    v34 = 0;
    while (1)
    {
      v35 = *(unint64_t **)(a2 + 24);
      if (v35)
      {
        v51[0] = a2;
        v36 = atomic_load(v35);
        if (v36 != -1)
        {
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FileDescriptor::DependenciesOnceInit;
          __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v51;
          v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::__call_once(v35, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FileDescriptor const*),google::protobuf::FileDescriptor const*&&>>);
        }
      }
      v37 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v34);
      if (v37)
      {
        v38 = *(uint64_t **)(v37 + 136);
        if (v38 != google::protobuf::FileOptions::default_instance((google::protobuf::FileOptions *)v35)
          && *(_DWORD *)(*(_QWORD *)(v37 + 136) + 160) == 3)
        {
          break;
        }
      }
      if (++v34 >= *(int *)(a2 + 32))
        goto LABEL_47;
    }
    v39 = *(unint64_t **)(a2 + 24);
    if (v39)
    {
      v51[0] = a2;
      v40 = atomic_load(v39);
      if (v40 != -1)
      {
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FileDescriptor::DependenciesOnceInit;
        __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v51;
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::__call_once(v39, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FileDescriptor const*),google::protobuf::FileDescriptor const*&&>>);
      }
      v41 = *(unint64_t **)(a2 + 24);
      v42 = **(const std::string::value_type ***)(*(_QWORD *)(a2 + 72) + 8 * v34);
      if (v41)
      {
        v49 = a2;
        v43 = atomic_load(v41);
        if (v43 != -1)
        {
          v51[0] = google::protobuf::FileDescriptor::DependenciesOnceInit;
          v51[1] = &v49;
          v50 = v51;
          std::__call_once(v41, &v50, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FileDescriptor const*),google::protobuf::FileDescriptor const*&&>>);
        }
      }
    }
    else
    {
      v42 = **(const std::string::value_type ***)(*(_QWORD *)(a2 + 72) + 8 * v34);
    }
    std::operator+<char>();
    v44 = std::string::append(&v48, "\" which is.");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError((uint64_t)v5, v42, v46, 9, (const std::string::value_type *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
  }
LABEL_47:
  if (*(_DWORD *)(a2 + 60) == 3)
    google::protobuf::DescriptorBuilder::ValidateProto3(v5, a2, v46);
}

void sub_22DC4A500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::DetectMapConflicts(google::protobuf::DescriptorBuilder *this, const google::protobuf::Descriptor *a2, const google::protobuf::DescriptorProto *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  char v10;
  uint64_t **v11;
  char v12;
  const std::string::value_type *v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  const google::protobuf::DescriptorProto *v17;
  char *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  size_t v26;
  const void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  const void *v31;
  const void *v32;
  int v33;
  size_t v34;
  const void *v35;
  size_t v36;
  int v37;
  _BOOL4 v38;
  uint64_t *v39;
  const void *v40;
  BOOL v41;
  _QWORD *v42;
  int v43;
  size_t v44;
  const void *v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  const std::string::value_type *v51;
  std::string *v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  size_t v59;
  const void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  const void *v64;
  const void *v65;
  int v66;
  size_t v67;
  const void *v68;
  size_t v69;
  int v70;
  _BOOL4 v71;
  uint64_t *v72;
  _QWORD *v73;
  BOOL v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  size_t v79;
  _QWORD *v80;
  size_t v81;
  int v82;
  _BOOL4 v83;
  const std::string::value_type *v84;
  std::string *v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  size_t v90;
  const void *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  const void *v95;
  const void *v96;
  int v97;
  size_t v98;
  const void *v99;
  size_t v100;
  int v101;
  _BOOL4 v102;
  uint64_t *v103;
  const void *v104;
  BOOL v105;
  _QWORD *v106;
  int v107;
  size_t v108;
  const void *v109;
  size_t v110;
  const void *v111;
  size_t v112;
  int v113;
  _BOOL4 v114;
  const std::string::value_type *v115;
  std::string *v116;
  __int128 v117;
  std::string v120;
  std::string v121;
  uint64_t v122;
  uint64_t *v123;
  _QWORD v124[2];

  v124[0] = 0;
  v124[1] = 0;
  v123 = v124;
  if (*((int *)a2 + 29) < 1)
  {
    v18 = 0;
LABEL_22:
    v21 = *((_DWORD *)a2 + 30);
    if (v21 >= 1)
      goto LABEL_23;
LABEL_75:
    v54 = *((_DWORD *)a2 + 27);
    if (v54 < 1 || !v18)
      goto LABEL_177;
    v55 = 0;
    while (1)
    {
      v56 = v124[0];
      if (!v124[0])
        goto LABEL_80;
      v57 = *(_QWORD *)(*((_QWORD *)a2 + 6) + 48 * v55);
      v58 = *(char *)(v57 + 23);
      v59 = v58 >= 0 ? *(unsigned __int8 *)(v57 + 23) : *(_QWORD *)(v57 + 8);
      v60 = v58 >= 0 ? *(const void **)(*((_QWORD *)a2 + 6) + 48 * v55) : *(const void **)v57;
      v61 = v124;
      do
      {
        v62 = v56;
        v63 = v61;
        v65 = (const void *)(v56 + 32);
        v64 = *(const void **)(v56 + 32);
        v66 = *(char *)(v62 + 55);
        if (v66 >= 0)
          v67 = *(unsigned __int8 *)(v62 + 55);
        else
          v67 = *(_QWORD *)(v62 + 40);
        if (v66 >= 0)
          v68 = v65;
        else
          v68 = v64;
        if (v59 >= v67)
          v69 = v67;
        else
          v69 = v59;
        v70 = memcmp(v68, v60, v69);
        v71 = v70 < 0;
        if (!v70)
          v71 = v67 < v59;
        v72 = (uint64_t *)(v62 + 8);
        if (v71)
        {
          v61 = v63;
        }
        else
        {
          v72 = (uint64_t *)v62;
          v61 = (_QWORD *)v62;
        }
        v56 = *v72;
      }
      while (v56);
      if (v61 == v124)
        goto LABEL_80;
      v73 = v63 + 4;
      v74 = !v71;
      if (v71)
        v75 = v63;
      else
        v75 = (_QWORD *)v62;
      if (v74)
        v73 = v65;
      v76 = *((char *)v61 + 55);
      v78 = (_QWORD *)v75[4];
      v77 = v75[5];
      v79 = v76 >= 0 ? *((unsigned __int8 *)v61 + 55) : v77;
      v80 = v76 >= 0 ? v73 : v78;
      v81 = v79 >= v59 ? v59 : v79;
      v82 = memcmp(v60, v80, v81);
      v83 = v59 >= v79;
      if (v82)
        v83 = v82 >= 0;
      if (!v83 || !*(_BYTE *)(*(_QWORD *)(v61[7] + 32) + 75))
        goto LABEL_80;
      v84 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      std::operator+<char>();
      v85 = std::string::append(&v120, " conflicts with an existing oneof type.");
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v121.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v84, (uint64_t)a3, 0, (const std::string::value_type *)&v121);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v121.__r_.__value_.__l.__data_);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_126;
      }
      else if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_126:
        operator delete(v120.__r_.__value_.__l.__data_);
      }
      v54 = *((_DWORD *)a2 + 27);
LABEL_80:
      if (++v55 >= v54)
      {
        v18 = (char *)v124[0];
        goto LABEL_177;
      }
    }
  }
  v4 = 0;
  v5 = 0;
  v6 = (char *)a3 + 48;
  do
  {
    v7 = *((_QWORD *)a2 + 7);
    v8 = *(__int128 **)(v7 + v4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v121.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v9;
    }
    v122 = v7 + v4;
    v11 = std::__tree<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::__map_value_compare<std::string,std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string,google::protobuf::EnumValueDescriptor const*>>(&v123, (const void **)&v121.__r_.__value_.__l.__data_, (__int128 *)&v121);
    v12 = v10;
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v121.__r_.__value_.__l.__data_);
      if (v12)
        goto LABEL_14;
    }
    else if (v10)
    {
      goto LABEL_14;
    }
    if (*(_BYTE *)(v11[7][4] + 75) || *(_BYTE *)(*(_QWORD *)(v7 + v4 + 32) + 75))
    {
      v13 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      std::operator+<char>();
      v14 = std::string::append(&v120, " conflicts with an existing nested message type.");
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v121.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v13, (uint64_t)a3, 0, (const std::string::value_type *)&v121);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v121.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(v120.__r_.__value_.__l.__data_);
    }
LABEL_14:
    v16 = *((_QWORD *)a2 + 7);
    v17 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)v6, v5);
    google::protobuf::DescriptorBuilder::DetectMapConflicts(this, (const google::protobuf::Descriptor *)(v16 + v4), v17);
    ++v5;
    v4 += 144;
  }
  while (v5 < *((int *)a2 + 29));
  v18 = (char *)v124[0];
  v19 = *((_DWORD *)a2 + 26);
  if (v19 < 1 || !v124[0])
    goto LABEL_22;
  v20 = 0;
  while (2)
  {
    v87 = v124[0];
    if (v124[0])
    {
      v88 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 152 * v20);
      v89 = *(char *)(v88 + 23);
      v90 = v89 >= 0 ? *(unsigned __int8 *)(v88 + 23) : *(_QWORD *)(v88 + 8);
      v91 = v89 >= 0 ? *(const void **)(*((_QWORD *)a2 + 5) + 152 * v20) : *(const void **)v88;
      v92 = v124;
      do
      {
        v93 = v87;
        v94 = v92;
        v96 = (const void *)(v87 + 32);
        v95 = *(const void **)(v87 + 32);
        v97 = *(char *)(v93 + 55);
        if (v97 >= 0)
          v98 = *(unsigned __int8 *)(v93 + 55);
        else
          v98 = *(_QWORD *)(v93 + 40);
        if (v97 >= 0)
          v99 = v96;
        else
          v99 = v95;
        if (v90 >= v98)
          v100 = v98;
        else
          v100 = v90;
        v101 = memcmp(v99, v91, v100);
        v102 = v101 < 0;
        if (!v101)
          v102 = v98 < v90;
        v103 = (uint64_t *)(v93 + 8);
        if (v102)
        {
          v92 = v94;
        }
        else
        {
          v103 = (uint64_t *)v93;
          v92 = (_QWORD *)v93;
        }
        v87 = *v103;
      }
      while (v87);
      if (v92 != v124)
      {
        v104 = v94 + 4;
        v105 = !v102;
        if (v102)
          v106 = v94;
        else
          v106 = (_QWORD *)v93;
        if (v105)
          v104 = v96;
        v107 = *((char *)v92 + 55);
        v109 = (const void *)v106[4];
        v108 = v106[5];
        if (v107 >= 0)
          v110 = *((unsigned __int8 *)v92 + 55);
        else
          v110 = v108;
        if (v107 >= 0)
          v111 = v104;
        else
          v111 = v109;
        if (v110 >= v90)
          v112 = v90;
        else
          v112 = v110;
        v113 = memcmp(v91, v111, v112);
        v114 = v90 >= v110;
        if (v113)
          v114 = v113 >= 0;
        if (v114 && *(_BYTE *)(*(_QWORD *)(v92[7] + 32) + 75))
        {
          v115 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
          std::operator+<char>();
          v116 = std::string::append(&v120, " conflicts with an existing field.");
          v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v121.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v115, (uint64_t)a3, 0, (const std::string::value_type *)&v121);
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v121.__r_.__value_.__l.__data_);
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_175;
          }
          else if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_175:
            operator delete(v120.__r_.__value_.__l.__data_);
          }
          v19 = *((_DWORD *)a2 + 26);
        }
      }
    }
    if (++v20 < v19)
      continue;
    break;
  }
  v18 = (char *)v124[0];
  v21 = *((_DWORD *)a2 + 30);
  if (v21 < 1)
    goto LABEL_75;
LABEL_23:
  if (v18)
  {
    v22 = 0;
    while (2)
    {
      v23 = v124[0];
      if (!v124[0])
        goto LABEL_27;
      v24 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 80 * v22);
      v25 = *(char *)(v24 + 23);
      v26 = v25 >= 0 ? *(unsigned __int8 *)(v24 + 23) : *(_QWORD *)(v24 + 8);
      v27 = v25 >= 0 ? *(const void **)(*((_QWORD *)a2 + 8) + 80 * v22) : *(const void **)v24;
      v28 = v124;
      do
      {
        v29 = v23;
        v30 = v28;
        v32 = (const void *)(v23 + 32);
        v31 = *(const void **)(v23 + 32);
        v33 = *(char *)(v29 + 55);
        if (v33 >= 0)
          v34 = *(unsigned __int8 *)(v29 + 55);
        else
          v34 = *(_QWORD *)(v29 + 40);
        if (v33 >= 0)
          v35 = v32;
        else
          v35 = v31;
        if (v26 >= v34)
          v36 = v34;
        else
          v36 = v26;
        v37 = memcmp(v35, v27, v36);
        v38 = v37 < 0;
        if (!v37)
          v38 = v34 < v26;
        v39 = (uint64_t *)(v29 + 8);
        if (v38)
        {
          v28 = v30;
        }
        else
        {
          v39 = (uint64_t *)v29;
          v28 = (_QWORD *)v29;
        }
        v23 = *v39;
      }
      while (v23);
      if (v28 == v124)
        goto LABEL_27;
      v40 = v30 + 4;
      v41 = !v38;
      if (v38)
        v42 = v30;
      else
        v42 = (_QWORD *)v29;
      if (v41)
        v40 = v32;
      v43 = *((char *)v28 + 55);
      v45 = (const void *)v42[4];
      v44 = v42[5];
      if (v43 >= 0)
        v46 = *((unsigned __int8 *)v28 + 55);
      else
        v46 = v44;
      if (v43 >= 0)
        v47 = v40;
      else
        v47 = v45;
      if (v46 >= v26)
        v48 = v26;
      else
        v48 = v46;
      v49 = memcmp(v27, v47, v48);
      v50 = v26 >= v46;
      if (v49)
        v50 = v49 >= 0;
      if (!v50 || !*(_BYTE *)(*(_QWORD *)(v28[7] + 32) + 75))
        goto LABEL_27;
      v51 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      std::operator+<char>();
      v52 = std::string::append(&v120, " conflicts with an existing enum type.");
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v121.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v51, (uint64_t)a3, 0, (const std::string::value_type *)&v121);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v121.__r_.__value_.__l.__data_);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_73;
      }
      else if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_73:
        operator delete(v120.__r_.__value_.__l.__data_);
      }
      v21 = *((_DWORD *)a2 + 30);
LABEL_27:
      if (++v22 >= v21)
      {
        v18 = (char *)v124[0];
        goto LABEL_75;
      }
      continue;
    }
  }
LABEL_177:
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v123, v18);
}

void sub_22DC4AC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,char *a27)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a26, a27);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::LogUnusedDependency(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  _BOOL4 v16;
  BOOL v17;
  uint64_t *v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  int v23;
  _BOOL4 v24;
  BOOL v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string *v28;
  __int128 v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;
  std::string v36;
  void *__p[2];
  std::string::size_type v38;

  if (a1[17])
  {
    v4 = (uint64_t *)(*a1 + 56);
    v5 = *v4;
    if (!*v4)
      goto LABEL_43;
    v6 = *(_QWORD *)(a2 + 176);
    v7 = *(char *)(v6 + 23);
    v8 = v7 >= 0 ? *(unsigned __int8 *)(v6 + 23) : *(_QWORD *)(v6 + 8);
    v9 = v7 >= 0 ? *(const void **)(a2 + 176) : *(const void **)v6;
    v10 = *a1 + 56;
    do
    {
      v11 = *(char *)(v5 + 55);
      if (v11 >= 0)
        v12 = *(unsigned __int8 *)(v5 + 55);
      else
        v12 = *(_QWORD *)(v5 + 40);
      if (v11 >= 0)
        v13 = (const void *)(v5 + 32);
      else
        v13 = *(const void **)(v5 + 32);
      if (v8 >= v12)
        v14 = v12;
      else
        v14 = v8;
      v15 = memcmp(v13, v9, v14);
      v16 = v12 < v8;
      if (v15)
        v16 = v15 < 0;
      v17 = !v16;
      if (v16)
        v18 = (uint64_t *)(v5 + 8);
      else
        v18 = (uint64_t *)v5;
      if (v17)
        v10 = v5;
      v5 = *v18;
    }
    while (*v18);
    if ((uint64_t *)v10 == v4)
      goto LABEL_43;
    v19 = *(char *)(v10 + 55);
    if (v19 >= 0)
      v20 = *(unsigned __int8 *)(v10 + 55);
    else
      v20 = *(_QWORD *)(v10 + 40);
    if (v19 >= 0)
      v21 = (const void *)(v10 + 32);
    else
      v21 = *(const void **)(v10 + 32);
    if (v20 >= v8)
      v22 = v8;
    else
      v22 = v20;
    v23 = memcmp(v9, v21, v22);
    v24 = v8 >= v20;
    if (v23)
      v24 = v23 >= 0;
    if (v24)
    {
      v25 = *(_BYTE *)(v10 + 56) != 0;
      v26 = (_QWORD *)a1[15];
      v27 = a1 + 16;
      if (v26 == a1 + 16)
        return;
    }
    else
    {
LABEL_43:
      v25 = 0;
      v26 = (_QWORD *)a1[15];
      v27 = a1 + 16;
      if (v26 == a1 + 16)
        return;
    }
    if (!v25)
    {
      while (1)
      {
        std::operator+<char>();
        v32 = std::string::append(&v36, " is unused.");
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v38 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        google::protobuf::DescriptorBuilder::AddWarning((uint64_t)a1, *(const std::string::value_type **)v26[4], a2, 9, (const std::string::value_type *)__p);
        if (SHIBYTE(v38) < 0)
        {
          operator delete(__p[0]);
          v34 = (_QWORD *)v26[1];
          if (v34)
          {
            do
            {
LABEL_65:
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
            goto LABEL_58;
          }
        }
        else
        {
          v34 = (_QWORD *)v26[1];
          if (v34)
            goto LABEL_65;
        }
        do
        {
          v35 = (_QWORD *)v26[2];
          v17 = *v35 == (_QWORD)v26;
          v26 = v35;
        }
        while (!v17);
LABEL_58:
        v26 = v35;
        if (v35 == v27)
          return;
      }
    }
    do
    {
      std::operator+<char>();
      v28 = std::string::append(&v36, " is unused.");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v38 = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      google::protobuf::DescriptorBuilder::AddError((uint64_t)a1, *(const std::string::value_type **)v26[4], a2, 9, (const std::string::value_type *)__p);
      if (SHIBYTE(v38) < 0)
      {
        operator delete(__p[0]);
        v30 = (_QWORD *)v26[1];
        if (v30)
        {
          do
          {
LABEL_53:
            v31 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
          goto LABEL_46;
        }
      }
      else
      {
        v30 = (_QWORD *)v26[1];
        if (v30)
          goto LABEL_53;
      }
      do
      {
        v31 = (_QWORD *)v26[2];
        v17 = *v31 == (_QWORD)v26;
        v26 = v31;
      }
      while (!v17);
LABEL_46:
      v26 = v31;
    }
    while (v31 != v27);
  }
}

void sub_22DC4AFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::DescriptorBuilder::AllocateNameString(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  std::string *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  const std::string::value_type *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  char *v21;
  std::string v23;
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[7];

  v26[6] = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = operator new();
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = 0;
    v26[0] = v7;
    v8 = *(uint64_t **)(v5 + 216);
    if ((unint64_t)v8 >= *(_QWORD *)(v5 + 224))
    {
      v9 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v5 + 208), v26);
      v7 = v26[0];
    }
    else
    {
      *v8 = v7;
      v9 = (char *)(v8 + 1);
    }
    *(_QWORD *)(v5 + 216) = v9;
    v11 = *((char *)a2 + 23);
    v12 = v11 < 0;
    v13 = (uint64_t *)*a2;
    if (v11 >= 0)
      v13 = a2;
    v14 = *((unsigned __int8 *)a2 + 23);
    if (v12)
      v14 = a2[1];
    v26[0] = v13;
    v26[1] = v14;
    v25[0] = ".";
    v25[1] = 1;
    v15 = *(char *)(a3 + 23);
    v16 = v15 < 0;
    v17 = *(const std::string::value_type **)a3;
    if (v15 >= 0)
      v17 = (const std::string::value_type *)a3;
    v18 = *(unsigned __int8 *)(a3 + 23);
    if (v16)
      v18 = *(_QWORD *)(a3 + 8);
    v24[0] = v17;
    v24[1] = v18;
    google::protobuf::StrCat((uint64_t)v26, (uint64_t)v25, (uint64_t)v24, &v23);
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    v19 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)&v23.__r_.__value_.__l + 2);
    *(_OWORD *)v7 = v19;
  }
  else
  {
    v10 = (std::string *)operator new();
    v7 = (uint64_t)v10;
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    }
    v26[0] = v7;
    v20 = *(uint64_t **)(v5 + 216);
    if ((unint64_t)v20 >= *(_QWORD *)(v5 + 224))
    {
      v21 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v5 + 208), v26);
      v7 = v26[0];
      *(_QWORD *)(v5 + 216) = v21;
    }
    else
    {
      *v20 = v7;
      *(_QWORD *)(v5 + 216) = v20 + 1;
    }
  }
  return v7;
}

void sub_22DC4B1E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorBuilder::BuildOneof(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const std::string::value_type *NameString;
  uint64_t v9;
  __int128 *v10;
  std::string *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t *v14;
  char *v15;
  google::protobuf::OneofOptions *v16;
  unsigned int *v17;
  google::protobuf::OneofOptions *v18;
  char v20;
  std::string __p[2];

  NameString = (const std::string::value_type *)google::protobuf::DescriptorBuilder::AllocateNameString(a1, *(uint64_t **)(a3 + 8), *(_QWORD *)(a2 + 24));
  google::protobuf::DescriptorBuilder::ValidateSymbolName(a1, *(uint64_t **)(a2 + 24), NameString, a2);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(__int128 **)(a2 + 24);
  v11 = (std::string *)operator new();
  v12 = (uint64_t)v11;
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v13 = *v10;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
  }
  __p[0].__r_.__value_.__r.__words[0] = v12;
  v14 = *(uint64_t **)(v9 + 216);
  if ((unint64_t)v14 >= *(_QWORD *)(v9 + 224))
  {
    v15 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v9 + 208), __p);
    v12 = __p[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *v14 = v12;
    v15 = (char *)(v14 + 1);
  }
  *(_QWORD *)(v9 + 216) = v15;
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = NameString;
  *(_QWORD *)(a4 + 16) = a3;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  if ((*(_DWORD *)(a2 + 16) & 2) != 0)
  {
    v16 = *(google::protobuf::OneofOptions **)(a2 + 32);
    if (!v16)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 9267);
      v17 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: !value || options_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v20, v17);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      v16 = *(google::protobuf::OneofOptions **)(a2 + 32);
    }
    if (v16)
      v18 = v16;
    else
      v18 = (google::protobuf::OneofOptions *)&google::protobuf::_OneofOptions_default_instance_;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_22DCE65A0;
    strcpy(__p[0].__r_.__value_.__l.__data_, "google.protobuf.OneofOptions");
    google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::OneofDescriptor>(a1, v18, a4, 2, (std::string::size_type)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v12 = *(_QWORD *)a4;
    NameString = *(const std::string::value_type **)(a4 + 8);
  }
  return google::protobuf::DescriptorBuilder::AddSymbol(a1, (std::string::size_type)NameString, (uint64_t *)a3, v12, a2, (const char *)3, (const char *)a4);
}

void sub_22DC4B3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC4B3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC4B408(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_22DC4B42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::BuildExtensionRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  unsigned int *v10;
  std::string::size_type v11;
  std::string::size_type size;
  char *v13;
  void *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  std::string::size_type v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  _DWORD *v59;
  std::string::size_type v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  google::protobuf::ExtensionRangeOptions *v71;
  void *v72;
  google::protobuf::ExtensionRangeOptions *v73;
  void *__p;
  __int128 v75;
  std::string v76[2];

  v8 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)a4 = v8;
  v9 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a4 + 4) = v9;
  if (v8 <= 0)
  {
    google::protobuf::DescriptorBuilder::AddError(a1, *(const std::string::value_type **)(a3 + 8), a2, 1, "Extension numbers must be positive integers.");
    if (*(_DWORD *)a4 < *(_DWORD *)(a4 + 4))
    {
LABEL_3:
      *(_QWORD *)(a4 + 8) = 0;
      if ((*(_DWORD *)(a2 + 16) & 1) == 0)
        return;
      goto LABEL_7;
    }
  }
  else if (v8 < v9)
  {
    goto LABEL_3;
  }
  google::protobuf::DescriptorBuilder::AddError(a1, *(const std::string::value_type **)(a3 + 8), a2, 1, "Extension range end number must be greater than start number.");
  *(_QWORD *)(a4 + 8) = 0;
  if ((*(_DWORD *)(a2 + 16) & 1) == 0)
    return;
LABEL_7:
  if (!*(_QWORD *)(a2 + 24))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v76, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 7769);
    v10 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v76, "CHECK failed: !value || options_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&__p, v10);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v76[0].__r_.__value_.__l.__data_);
  }
  memset(v76, 0, 24);
  google::protobuf::Descriptor::GetLocationPath(a3, (uint64_t)v76);
  v11 = v76[0].__r_.__value_.__r.__words[2];
  size = v76[0].__r_.__value_.__l.__size_;
  if (v76[0].__r_.__value_.__l.__size_ >= v76[0].__r_.__value_.__r.__words[2])
  {
    v14 = (void *)v76[0].__r_.__value_.__r.__words[0];
    v15 = v76[0].__r_.__value_.__l.__size_ - v76[0].__r_.__value_.__r.__words[0];
    v16 = (uint64_t)(v76[0].__r_.__value_.__l.__size_ - v76[0].__r_.__value_.__r.__words[0]) >> 2;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v18 = v76[0].__r_.__value_.__r.__words[2] - v76[0].__r_.__value_.__r.__words[0];
    if ((uint64_t)(v76[0].__r_.__value_.__r.__words[2] - v76[0].__r_.__value_.__r.__words[0]) >> 1 > v17)
      v17 = v18 >> 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = (char *)operator new(4 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[4 * v16];
    v11 = (std::string::size_type)&v20[4 * v19];
    *(_DWORD *)v21 = 5;
    v13 = v21 + 4;
    if ((void *)size != v14)
    {
      v22 = size - (_QWORD)v14 - 4;
      if (v22 < 0x2C)
        goto LABEL_92;
      if (size - (unint64_t)&v20[v15] < 0x20)
        goto LABEL_92;
      v23 = (v22 >> 2) + 1;
      v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
      v25 = size - v24;
      v21 -= v24;
      v26 = &v20[4 * v16 - 16];
      v27 = (__int128 *)(size - 16);
      v28 = v23 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v29 = *v27;
        *((_OWORD *)v26 - 1) = *(v27 - 1);
        *(_OWORD *)v26 = v29;
        v26 -= 32;
        v27 -= 2;
        v28 -= 8;
      }
      while (v28);
      size = v25;
      if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_92:
        do
        {
          v30 = *(_DWORD *)(size - 4);
          size -= 4;
          *((_DWORD *)v21 - 1) = v30;
          v21 -= 4;
        }
        while ((void *)size != v14);
      }
    }
    v76[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v76[0].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    v76[0].__r_.__value_.__r.__words[2] = v11;
    if (v14)
    {
      operator delete(v14);
      v11 = v76[0].__r_.__value_.__r.__words[2];
    }
  }
  else
  {
    *(_DWORD *)v76[0].__r_.__value_.__l.__size_ = 5;
    v13 = (char *)(size + 4);
  }
  v76[0].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  v31 = (unint64_t)(a4 - *(_QWORD *)(a3 + 72)) >> 4;
  if ((unint64_t)v13 < v11)
  {
    *(_DWORD *)v13 = v31;
    v32 = v13 + 4;
    goto LABEL_53;
  }
  v33 = (char *)v76[0].__r_.__value_.__r.__words[0];
  v34 = &v13[-v76[0].__r_.__value_.__r.__words[0]];
  v35 = (uint64_t)&v13[-v76[0].__r_.__value_.__r.__words[0]] >> 2;
  v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v37 = v11 - v76[0].__r_.__value_.__r.__words[0];
  if (v37 >> 1 > v36)
    v36 = v37 >> 1;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
    v38 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (v38)
  {
    if (v38 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v39 = operator new(4 * v38);
    v40 = &v39[4 * v35];
    v11 = (std::string::size_type)&v39[4 * v38];
    *v40 = v31;
    v32 = (char *)(v40 + 1);
    v41 = v13 - v33;
    if (v13 == v33)
      goto LABEL_51;
  }
  else
  {
    v39 = 0;
    v40 = (_DWORD *)(4 * v35);
    v11 = 0;
    *(_DWORD *)(4 * v35) = v31;
    v32 = (char *)(4 * v35 + 4);
    v41 = v13 - v33;
    if (v13 == v33)
      goto LABEL_51;
  }
  v42 = v41 - 4;
  if (v42 < 0x2C)
  {
    v43 = v13;
    goto LABEL_50;
  }
  if ((unint64_t)(v13 - v39 - (_QWORD)v34) < 0x20)
  {
    v43 = v13;
    do
    {
LABEL_50:
      v50 = *((_DWORD *)v43 - 1);
      v43 -= 4;
      *--v40 = v50;
    }
    while (v43 != v33);
    goto LABEL_51;
  }
  v44 = (v42 >> 2) + 1;
  v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
  v43 = &v13[-v45];
  v40 = (_DWORD *)((char *)v40 - v45);
  v46 = &v39[4 * v35 - 16];
  v47 = v13 - 16;
  v48 = v44 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v49 = *(_OWORD *)v47;
    *(v46 - 1) = *((_OWORD *)v47 - 1);
    *v46 = v49;
    v46 -= 2;
    v47 -= 32;
    v48 -= 8;
  }
  while (v48);
  if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_50;
LABEL_51:
  v76[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  v76[0].__r_.__value_.__l.__size_ = (std::string::size_type)v32;
  v76[0].__r_.__value_.__r.__words[2] = v11;
  if (v33)
  {
    operator delete(v33);
    v11 = v76[0].__r_.__value_.__r.__words[2];
  }
LABEL_53:
  v76[0].__r_.__value_.__l.__size_ = (std::string::size_type)v32;
  if ((unint64_t)v32 >= v11)
  {
    v52 = (char *)v76[0].__r_.__value_.__r.__words[0];
    v53 = &v32[-v76[0].__r_.__value_.__r.__words[0]];
    v54 = (uint64_t)&v32[-v76[0].__r_.__value_.__r.__words[0]] >> 2;
    v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 62)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v56 = v11 - v76[0].__r_.__value_.__r.__words[0];
    if (v56 >> 1 > v55)
      v55 = v56 >> 1;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
      v57 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v57 = v55;
    if (v57)
    {
      if (v57 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v58 = operator new(4 * v57);
    }
    else
    {
      v58 = 0;
    }
    v59 = &v58[4 * v54];
    v60 = (std::string::size_type)&v58[4 * v57];
    *v59 = 3;
    v51 = (std::string::size_type)(v59 + 1);
    if (v32 == v52)
      goto LABEL_74;
    v61 = v32 - v52 - 4;
    if (v61 >= 0x2C)
    {
      if ((unint64_t)(v32 - v58 - (_QWORD)v53) >= 0x20)
      {
        v63 = (v61 >> 2) + 1;
        v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
        v62 = &v32[-v64];
        v59 = (_DWORD *)((char *)v59 - v64);
        v65 = &v58[4 * v54 - 16];
        v66 = v32 - 16;
        v67 = v63 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v68 = *(_OWORD *)v66;
          *(v65 - 1) = *((_OWORD *)v66 - 1);
          *v65 = v68;
          v65 -= 2;
          v66 -= 32;
          v67 -= 8;
        }
        while (v67);
        if (v63 == (v63 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_74:
          v76[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          v76[0].__r_.__value_.__l.__size_ = v51;
          v76[0].__r_.__value_.__r.__words[2] = v60;
          if (v52)
            operator delete(v52);
          goto LABEL_76;
        }
      }
      else
      {
        v62 = v32;
      }
    }
    else
    {
      v62 = v32;
    }
    do
    {
      v69 = *((_DWORD *)v62 - 1);
      v62 -= 4;
      *--v59 = v69;
    }
    while (v62 != v52);
    goto LABEL_74;
  }
  *(_DWORD *)v32 = 3;
  v51 = (std::string::size_type)(v32 + 4);
LABEL_76:
  v76[0].__r_.__value_.__l.__size_ = v51;
  v70 = *(_QWORD *)(a3 + 8);
  v71 = *(google::protobuf::ExtensionRangeOptions **)(a2 + 24);
  v72 = operator new(0x28uLL);
  if (v71)
    v73 = v71;
  else
    v73 = (google::protobuf::ExtensionRangeOptions *)&google::protobuf::_ExtensionRangeOptions_default_instance_;
  __p = v72;
  v75 = xmmword_22DCE6530;
  strcpy((char *)v72, "google.protobuf.ExtensionRangeOptions");
  google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::Descriptor::ExtensionRange>(a1, v70, v70, v73, a4, (uint64_t)v76, (std::string::size_type)&__p);
  if (SHIBYTE(v75) < 0)
    operator delete(__p);
  if (v76[0].__r_.__value_.__r.__words[0])
  {
    v76[0].__r_.__value_.__l.__size_ = v76[0].__r_.__value_.__r.__words[0];
    operator delete(v76[0].__r_.__value_.__l.__data_);
  }
}

void sub_22DC4B9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC4B9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC4B9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  if (!a16)
    _Unwind_Resume(exception_object);
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::Descriptor>(uint64_t a1, google::protobuf::MessageOptions *a2, uint64_t a3, int a4, std::string::size_type a5)
{
  char *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  void *__p;
  char *v32;
  unint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  google::protobuf::Descriptor::GetLocationPath(a3, (uint64_t)&__p);
  v10 = v32;
  if ((unint64_t)v32 < v33)
  {
    *(_DWORD *)v32 = a4;
    v11 = (uint64_t)(v10 + 4);
    goto LABEL_22;
  }
  v12 = (char *)__p;
  v13 = v32 - (_BYTE *)__p;
  v14 = (v32 - (_BYTE *)__p) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v33 - (_QWORD)__p;
  if ((uint64_t)(v33 - (_QWORD)__p) >> 1 > v15)
    v15 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(4 * v17);
    v19 = &v18[4 * v14];
    v20 = &v18[4 * v17];
    *(_DWORD *)v19 = a4;
    v11 = (uint64_t)(v19 + 4);
    v21 = v10 - v12;
    if (v10 == v12)
      goto LABEL_20;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(4 * v14);
  v20 = 0;
  *(_DWORD *)(4 * v14) = a4;
  v11 = 4 * v14 + 4;
  v21 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    v22 = v21 - 4;
    if (v22 < 0x2C)
      goto LABEL_29;
    if ((unint64_t)(v10 - &v18[v13]) < 0x20)
      goto LABEL_29;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v10[-v24];
    v19 -= v24;
    v26 = &v18[4 * v14 - 16];
    v27 = v10 - 16;
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *(_OWORD *)v27;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    v10 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        v30 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v19 - 1) = v30;
        v19 -= 4;
      }
      while (v10 != v12);
    }
  }
LABEL_20:
  __p = v19;
  v32 = (char *)v11;
  v33 = (unint64_t)v20;
  if (v12)
    operator delete(v12);
LABEL_22:
  v32 = (char *)v11;
  google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::Descriptor>(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8), a2, a3, (uint64_t)&__p, a5);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DC4BC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::BuildFieldOrExtension(google::protobuf::DescriptorBuilder *this, const google::protobuf::FieldDescriptorProto *a2, google::protobuf::Descriptor *a3, int32x2_t *a4, int a5)
{
  uint64_t **v10;
  const std::string::value_type *NameString;
  uint64_t v12;
  __int128 *v13;
  std::string *v14;
  std::string::size_type v15;
  __int128 v16;
  std::string::size_type *v17;
  char *v18;
  int32x2_t v19;
  int v20;
  __int128 *v21;
  __int128 v22;
  std::string::size_type v23;
  std::string::size_type size;
  std::string *v25;
  std::string *v26;
  int v27;
  uint64_t *v28;
  std::string::size_type v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  std::string *v33;
  uint64_t v34;
  std::string *v35;
  std::string::size_type v36;
  std::string::size_type *v37;
  char *v38;
  uint64_t v39;
  std::string *v40;
  std::string::size_type v41;
  std::string::size_type *v42;
  uint64_t v43;
  std::string *v44;
  char **v45;
  std::string::size_type v46;
  char *v47;
  std::string::size_type v48;
  uint64_t v49;
  __int128 *v50;
  std::string *v51;
  std::string::size_type v52;
  __int128 v53;
  std::string::size_type *v54;
  char *v55;
  int32x2_t v56;
  std::string::size_type *v57;
  int32x2_t v58;
  const std::string::value_type *v59;
  std::string *v60;
  __int128 v61;
  char *v62;
  std::string::size_type v63;
  int32x2_t v64;
  int v65;
  int v66;
  const std::string::value_type *v67;
  int v68;
  unint64_t *v69;
  unint64_t v70;
  const std::string::value_type *v71;
  char *v72;
  unint64_t *v73;
  unint64_t v74;
  __int32 v75;
  const char *v76;
  google::protobuf *v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  int v80;
  uint64_t v81;
  int v82;
  google::protobuf::FieldOptions *v83;
  std::string *v84;
  unsigned int *v85;
  char *v86;
  google::protobuf::FieldOptions *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  unsigned __int16 **v91;
  int v92;
  unsigned __int16 *v93;
  unsigned __int16 **v94;
  int v95;
  unsigned __int16 *v96;
  uint64_t v97;
  int v98;
  _DWORD *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v106;
  int v107;
  char *v109;
  int32x2_t v110;
  char *v111;
  google::protobuf::io *v112;
  double v113;
  uint64_t v114;
  const std::string::value_type *v115;
  std::string *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  std::string __p;
  std::string v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  char *__endptr;
  int v134;
  int32x2_t *v135;
  int v136;
  uint64_t (*v137)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  int v138;
  std::string v139;
  std::string v140[2];
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v10 = (uint64_t **)((char *)a3 + 8);
  else
    v10 = (uint64_t **)(*((_QWORD *)this + 10) + 8);
  NameString = (const std::string::value_type *)google::protobuf::DescriptorBuilder::AllocateNameString((uint64_t)this, *v10, *((_QWORD *)a2 + 3));
  google::protobuf::DescriptorBuilder::ValidateSymbolName((uint64_t)this, *((uint64_t **)a2 + 3), NameString, (uint64_t)a2);
  v12 = *((_QWORD *)this + 1);
  v13 = (__int128 *)*((_QWORD *)a2 + 3);
  v14 = (std::string *)operator new();
  v15 = (std::string::size_type)v14;
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    v16 = *v13;
    v14->__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v16;
  }
  v140[0].__r_.__value_.__r.__words[0] = v15;
  v17 = *(std::string::size_type **)(v12 + 216);
  if ((unint64_t)v17 >= *(_QWORD *)(v12 + 224))
  {
    v18 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v12 + 208), v140);
    v15 = v140[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *v17 = v15;
    v18 = (char *)(v17 + 1);
  }
  *(_QWORD *)(v12 + 216) = v18;
  *a4 = (int32x2_t)v15;
  a4[1] = (int32x2_t)NameString;
  v19 = *(int32x2_t *)((char *)this + 80);
  a4[5] = v19;
  a4[8].i32[1] = *((_DWORD *)a2 + 18);
  a4[8].i8[3] = a5;
  v20 = *((unsigned __int8 *)a2 + 80);
  a4[8].i8[1] = v20;
  if (v20
    && *(_DWORD *)(*(_QWORD *)&v19 + 60) != 3
    && (std::operator+<char>(),
        google::protobuf::DescriptorBuilder::AddError((uint64_t)this, NameString, (uint64_t)a2, 2, (const std::string::value_type *)v140), SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v140[0].__r_.__value_.__l.__data_);
    v21 = (__int128 *)*((_QWORD *)a2 + 3);
    if ((*((char *)v21 + 23) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else
  {
    v21 = (__int128 *)*((_QWORD *)a2 + 3);
    if ((*((char *)v21 + 23) & 0x80000000) == 0)
    {
LABEL_14:
      v22 = *v21;
      v122.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
      *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v22;
      goto LABEL_17;
    }
  }
  std::string::__init_copy_ctor_external(&v122, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
LABEL_17:
  v23 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
  size = v122.__r_.__value_.__l.__size_;
  v25 = (std::string *)v122.__r_.__value_.__r.__words[0];
  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = (std::string *)((char *)&v122 + HIBYTE(v122.__r_.__value_.__r.__words[2]));
  else
    v26 = (std::string *)(v122.__r_.__value_.__r.__words[0] + v122.__r_.__value_.__l.__size_);
  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v122;
  if (v25 != v26)
  {
    do
    {
      v27 = v25->__r_.__value_.__s.__data_[0];
      if ((v27 - 65) <= 0x19)
        v25->__r_.__value_.__s.__data_[0] = v27 + 32;
      v25 = (std::string *)((char *)v25 + 1);
    }
    while (v25 != v26);
    v23 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
    size = v122.__r_.__value_.__l.__size_;
  }
  v28 = (uint64_t *)*((_QWORD *)a2 + 3);
  if ((v23 & 0x80u) == 0)
    v29 = v23;
  else
    v29 = size;
  v30 = (unsigned __int8 *)*((unsigned __int8 *)v28 + 23);
  v31 = (char)v30;
  if ((char)v30 < 0)
    v30 = (unsigned __int8 *)v28[1];
  if ((unsigned __int8 *)v29 == v30)
  {
    if (v31 >= 0)
      v32 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
    else
      v32 = (unsigned __int8 *)*v28;
    if ((v23 & 0x80) == 0)
    {
      if ((_DWORD)v23)
      {
        v33 = &v122;
        while (v33->__r_.__value_.__s.__data_[0] == *v32)
        {
          v33 = (std::string *)((char *)v33 + 1);
          ++v32;
          if (!--v23)
            goto LABEL_46;
        }
        goto LABEL_44;
      }
LABEL_46:
      a4[2] = *a4;
      goto LABEL_52;
    }
    if (!memcmp(v122.__r_.__value_.__l.__data_, v32, size))
      goto LABEL_46;
  }
LABEL_44:
  v34 = *((_QWORD *)this + 1);
  v35 = (std::string *)operator new();
  v36 = (std::string::size_type)v35;
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v35, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
  else
    *v35 = v122;
  v140[0].__r_.__value_.__r.__words[0] = v36;
  v37 = *(std::string::size_type **)(v34 + 216);
  if ((unint64_t)v37 >= *(_QWORD *)(v34 + 224))
  {
    v38 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v34 + 208), v140);
    v36 = v140[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *v37 = v36;
    v38 = (char *)(v37 + 1);
  }
  *(_QWORD *)(v34 + 216) = v38;
  a4[2] = (int32x2_t)v36;
  v28 = (uint64_t *)*((_QWORD *)a2 + 3);
LABEL_52:
  v39 = *((_QWORD *)this + 1);
  v40 = (std::string *)operator new();
  v41 = (std::string::size_type)v40;
  if (SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v40, v140[0].__r_.__value_.__l.__data_, v140[0].__r_.__value_.__l.__size_);
  else
    *v40 = v140[0];
  v139.__r_.__value_.__r.__words[0] = v41;
  v42 = *(std::string::size_type **)(v39 + 216);
  if ((unint64_t)v42 >= *(_QWORD *)(v39 + 224))
  {
    v47 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v39 + 208), &v139);
    v48 = v139.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v39 + 216) = v47;
    a4[3] = (int32x2_t)v48;
    if ((SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_57:
      if ((*((_BYTE *)a2 + 16) & 0x10) == 0)
        goto LABEL_58;
LABEL_62:
      a4[8].i8[2] = 1;
      v49 = *((_QWORD *)this + 1);
      v50 = (__int128 *)*((_QWORD *)a2 + 7);
      v51 = (std::string *)operator new();
      v52 = (std::string::size_type)v51;
      if (*((char *)v50 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)v50, *((_QWORD *)v50 + 1));
      }
      else
      {
        v53 = *v50;
        v51->__r_.__value_.__r.__words[2] = *((_QWORD *)v50 + 2);
        *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v53;
      }
      v140[0].__r_.__value_.__r.__words[0] = v52;
      v54 = *(std::string::size_type **)(v49 + 216);
      if ((unint64_t)v54 >= *(_QWORD *)(v49 + 224))
      {
        v55 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v49 + 208), v140);
        v52 = v140[0].__r_.__value_.__r.__words[0];
      }
      else
      {
        *v54 = v52;
        v55 = (char *)(v54 + 1);
      }
      *(_QWORD *)(v49 + 216) = v55;
      a4[4] = (int32x2_t)v52;
      v56 = *(int32x2_t *)((char *)a2 + 84);
      a4[7] = vrev64_s32(v56);
      if (v56.i32[0] != 2)
        goto LABEL_83;
      goto LABEL_74;
    }
  }
  else
  {
    *v42 = v41;
    *(_QWORD *)(v39 + 216) = v42 + 1;
    a4[3] = (int32x2_t)v41;
    if ((SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_57;
  }
  operator delete(v140[0].__r_.__value_.__l.__data_);
  if ((*((_BYTE *)a2 + 16) & 0x10) != 0)
    goto LABEL_62;
LABEL_58:
  a4[8].i8[2] = 0;
  v43 = *((_QWORD *)this + 1);
  v44 = (std::string *)operator new();
  v46 = (std::string::size_type)v44;
  if (SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v44, v140[0].__r_.__value_.__l.__data_, v140[0].__r_.__value_.__l.__size_);
  else
    *v44 = v140[0];
  v139.__r_.__value_.__r.__words[0] = v46;
  v57 = *(std::string::size_type **)(v43 + 216);
  if ((unint64_t)v57 >= *(_QWORD *)(v43 + 224))
  {
    v62 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v43 + 208), &v139);
    v63 = v139.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v43 + 216) = v62;
    a4[4] = (int32x2_t)v63;
    if ((SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_73:
      v58 = *(int32x2_t *)((char *)a2 + 84);
      a4[7] = vrev64_s32(v58);
      if (v58.i32[0] != 2)
        goto LABEL_83;
      goto LABEL_74;
    }
  }
  else
  {
    *v57 = v46;
    *(_QWORD *)(v43 + 216) = v57 + 1;
    a4[4] = (int32x2_t)v46;
    if ((SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_73;
  }
  operator delete(v140[0].__r_.__value_.__l.__data_);
  v64 = *(int32x2_t *)((char *)a2 + 84);
  a4[7] = vrev64_s32(v64);
  if (v64.i32[0] != 2)
    goto LABEL_83;
LABEL_74:
  if (a4[8].i8[3])
  {
    v59 = (const std::string::value_type *)a4[1];
    std::operator+<char>();
    v60 = std::string::append(&v139, " cannot be required.");
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v140[0].__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v140[0].__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v59, (uint64_t)a2, 2, (const std::string::value_type *)v140);
    if (SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v140[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
LABEL_82:
        operator delete(v139.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_82;
    }
  }
LABEL_83:
  a4[12] = 0;
  a4[10] = 0;
  a4[6] = 0;
  a4[13] = 0;
  a4[14] = 0;
  a4[17] = 0;
  a4[18] = 0;
  a4[16] = 0;
  v65 = *((_DWORD *)a2 + 4);
  a4[8].i8[0] = (v65 & 8) != 0;
  if ((v65 & 8) != 0 && a4[7].i32[1] == 3)
  {
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *(const std::string::value_type **)&a4[1], (uint64_t)a2, 4, "Repeated fields can't have default values.");
    v65 = *((_DWORD *)a2 + 4);
  }
  if ((v65 & 0x400) != 0)
  {
    if ((v65 & 8) == 0)
    {
      v69 = (unint64_t *)a4[6];
      if (v69)
      {
        v137 = google::protobuf::FieldDescriptor::TypeOnceInit;
        v135 = a4;
        v70 = atomic_load(v69);
        if (v70 != -1)
        {
          v140[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
          v140[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v135;
          v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
          std::__call_once(v69, &v139, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      switch(a4[7].i32[0])
      {
        case 1:
        case 3:
        case 4:
        case 6:
          a4[18] = 0;
          break;
        case 2:
        case 5:
        case 7:
          a4[18].i32[0] = 0;
          break;
        case 8:
          a4[18].i8[0] = 0;
          break;
        case 9:
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v69);
          a4[18] = (int32x2_t)&google::protobuf::internal::fixed_address_empty_string;
          break;
        default:
          goto LABEL_87;
      }
      goto LABEL_87;
    }
    __endptr = 0;
    v73 = (unint64_t *)a4[6];
    if (v73)
    {
      v137 = google::protobuf::FieldDescriptor::TypeOnceInit;
      v135 = a4;
      v74 = atomic_load(v73);
      if (v74 != -1)
      {
        v140[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
        v140[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v135;
        v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
        std::__call_once(v73, &v139, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    v75 = a4[7].i32[0];
    switch(v75)
    {
      case 1:
        v91 = (unsigned __int16 **)*((_QWORD *)a2 + 6);
        v92 = *((char *)v91 + 23);
        if (v92 < 0)
        {
          if (v91[1] != (unsigned __int16 *)3)
            goto LABEL_177;
          v93 = *v91;
        }
        else
        {
          v93 = (unsigned __int16 *)*((_QWORD *)a2 + 6);
          if (v92 != 3)
          {
LABEL_177:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, "-inf"))
            {
              a4[18] = (int32x2_t)0xFFF0000000000000;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*((_QWORD **)a2 + 6), "nan"))
            {
              a4[18] = (int32x2_t)0x7FF8000000000000;
            }
            else
            {
              v109 = (char *)*((_QWORD *)a2 + 6);
              if (v109[23] < 0)
                v109 = *(char **)v109;
              google::protobuf::io::NoLocaleStrtod((google::protobuf::io *)v109, (const char *)&__endptr, v45);
              a4[18] = v110;
            }
            goto LABEL_206;
          }
        }
        v103 = *v93;
        v104 = *((unsigned __int8 *)v93 + 2);
        if (v103 == 28265 && v104 == 102)
        {
          a4[18] = (int32x2_t)0x7FF0000000000000;
          goto LABEL_206;
        }
        goto LABEL_177;
      case 2:
        v94 = (unsigned __int16 **)*((_QWORD *)a2 + 6);
        v95 = *((char *)v94 + 23);
        if (v95 < 0)
        {
          if (v94[1] != (unsigned __int16 *)3)
            goto LABEL_187;
          v96 = *v94;
        }
        else
        {
          v96 = (unsigned __int16 *)*((_QWORD *)a2 + 6);
          if (v95 != 3)
          {
LABEL_187:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v94, "-inf"))
            {
              a4[18].i32[0] = -8388608;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*((_QWORD **)a2 + 6), "nan"))
            {
              a4[18].i32[0] = 2143289344;
            }
            else
            {
              v111 = (char *)*((_QWORD *)a2 + 6);
              if (v111[23] < 0)
                v111 = *(char **)v111;
              v112 = (google::protobuf::io *)google::protobuf::io::NoLocaleStrtod((google::protobuf::io *)v111, (const char *)&__endptr, v45);
              *(float *)a4[18].i32 = google::protobuf::io::SafeDoubleToFloat(v112, v113);
            }
LABEL_206:
            if (!__endptr)
              break;
            v114 = *((_QWORD *)a2 + 6);
            if (*(char *)(v114 + 23) < 0)
            {
              if (!*(_QWORD *)(v114 + 8))
              {
LABEL_212:
                v115 = (const std::string::value_type *)a4[1];
                std::operator+<char>();
                v116 = std::string::append(&v139, "\".");
                v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
                v140[0].__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v140[0].__r_.__value_.__l.__data_ = v117;
                v116->__r_.__value_.__l.__size_ = 0;
                v116->__r_.__value_.__r.__words[2] = 0;
                v116->__r_.__value_.__r.__words[0] = 0;
                google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v115, (uint64_t)a2, 4, (const std::string::value_type *)v140);
                if (SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v140[0].__r_.__value_.__l.__data_);
                if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v139.__r_.__value_.__l.__data_);
                break;
              }
            }
            else if (!*(_BYTE *)(v114 + 23))
            {
              goto LABEL_212;
            }
            if (!*__endptr)
              break;
            goto LABEL_212;
          }
        }
        v106 = *v96;
        v107 = *((unsigned __int8 *)v96 + 2);
        if (v106 == 28265 && v107 == 102)
        {
          a4[18].i32[0] = 2139095040;
          goto LABEL_206;
        }
        goto LABEL_187;
      case 3:
      case 16:
      case 18:
        v88 = (const char *)*((_QWORD *)a2 + 6);
        if (v88[23] < 0)
          v88 = *(const char **)v88;
        a4[18] = (int32x2_t)strtoll(v88, &__endptr, 0);
        goto LABEL_206;
      case 4:
      case 6:
        v90 = (const char *)*((_QWORD *)a2 + 6);
        if (v90[23] < 0)
          v90 = *(const char **)v90;
        a4[18] = (int32x2_t)strtoull(v90, &__endptr, 0);
        goto LABEL_206;
      case 5:
      case 15:
      case 17:
        v76 = (const char *)*((_QWORD *)a2 + 6);
        if (v76[23] < 0)
          v76 = *(const char **)v76;
        a4[18].i32[0] = strtol(v76, &__endptr, 0);
        goto LABEL_206;
      case 7:
      case 13:
        v89 = (const char *)*((_QWORD *)a2 + 6);
        if (v89[23] < 0)
          v89 = *(const char **)v89;
        a4[18].i32[0] = strtoul(v89, &__endptr, 0);
        goto LABEL_206;
      case 8:
        v97 = *((_QWORD *)a2 + 6);
        v98 = *(char *)(v97 + 23);
        if (v98 < 0)
        {
          if (*(_QWORD *)(v97 + 8) != 4)
            goto LABEL_194;
          v99 = *(_DWORD **)v97;
        }
        else
        {
          v99 = (_DWORD *)*((_QWORD *)a2 + 6);
          if (v98 != 4)
          {
LABEL_194:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v97, "false"))
              a4[18].i8[0] = 0;
            else
              google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *(const std::string::value_type **)&a4[1], (uint64_t)a2, 4, "Boolean default must be true or false.");
            goto LABEL_206;
          }
        }
        if (*v99 == 1702195828)
        {
          a4[18].i8[0] = 1;
          goto LABEL_206;
        }
        goto LABEL_194;
      case 9:
      case 12:
        v100 = (unint64_t *)a4[6];
        if (v100)
        {
          v137 = google::protobuf::FieldDescriptor::TypeOnceInit;
          v135 = a4;
          v101 = atomic_load(v100);
          if (v101 != -1)
          {
            v140[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v137;
            v140[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v135;
            v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
            std::__call_once(v100, &v139, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
          v75 = a4[7].i32[0];
        }
        v102 = *((_QWORD *)this + 1);
        if (v75 == 12)
        {
          google::protobuf::UnescapeCEscapeString(*((_QWORD *)a2 + 6), v140);
          a4[18] = (int32x2_t)google::protobuf::DescriptorPool::Tables::AllocateString(v102, (uint64_t)v140);
          if (SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v140[0].__r_.__value_.__l.__data_);
        }
        else
        {
          a4[18] = (int32x2_t)google::protobuf::DescriptorPool::Tables::AllocateString(*((_QWORD *)this + 1), *((_QWORD *)a2 + 6));
        }
        goto LABEL_206;
      case 10:
      case 11:
        google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *(const std::string::value_type **)&a4[1], (uint64_t)a2, 4, "Messages can't have default values.");
        a4[8].i8[0] = 0;
        goto LABEL_206;
      case 14:
        a4[18] = 0;
        goto LABEL_206;
      default:
        goto LABEL_206;
    }
  }
LABEL_87:
  v66 = a4[8].i32[1];
  if (v66 <= 0)
  {
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *(const std::string::value_type **)&a4[1], (uint64_t)a2, 1, "Field numbers must be positive integers.");
  }
  else
  {
    if (v66 >> 29 && (a5 & 1) == 0)
    {
      v67 = (const std::string::value_type *)a4[1];
      v140[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer((google::protobuf *)0x1FFFFFFF, &v140[0].__r_.__value_.__s.__data_[12], (char *)v45);
      LODWORD(v140[0].__r_.__value_.__r.__words[1]) = strlen(v140[0].__r_.__value_.__l.__data_);
      v139.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v139.__r_.__value_.__r.__words[1]) = -1;
      v137 = 0;
      v138 = -1;
      v135 = 0;
      v136 = -1;
      __endptr = 0;
      v134 = -1;
      v131 = 0;
      v132 = -1;
      v129 = 0;
      v130 = -1;
      v127 = 0;
      v128 = -1;
      v125 = 0;
      v126 = -1;
      v123 = 0;
      v124 = -1;
      *(_QWORD *)&v118 = &v127;
      *((_QWORD *)&v118 + 1) = &v125;
      google::protobuf::strings::Substitute("Field numbers cannot be greater than $0.", (uint64_t)v140, (uint64_t)&v139, (uint64_t)&v137, (uint64_t)&v135, (uint64_t)&__endptr, (uint64_t)&v131, (uint64_t)&v129, &__p, v118, (uint64_t)&v123);
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v67, (uint64_t)a2, 1, (const std::string::value_type *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v68 = *((_DWORD *)a2 + 4);
      goto LABEL_116;
    }
    if ((v66 - 19000) <= 0x3E7)
    {
      v71 = (const std::string::value_type *)a4[1];
      v140[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer((google::protobuf *)0x4A38, &v140[0].__r_.__value_.__s.__data_[12], (char *)v45);
      LODWORD(v140[0].__r_.__value_.__r.__words[1]) = strlen(v140[0].__r_.__value_.__l.__data_);
      v139.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer((google::protobuf *)0x4E1F, &v139.__r_.__value_.__s.__data_[12], v72);
      LODWORD(v139.__r_.__value_.__r.__words[1]) = strlen(v139.__r_.__value_.__l.__data_);
      v137 = 0;
      v138 = -1;
      v135 = 0;
      v136 = -1;
      __endptr = 0;
      v134 = -1;
      v131 = 0;
      v132 = -1;
      v129 = 0;
      v130 = -1;
      v127 = 0;
      v128 = -1;
      v125 = 0;
      v126 = -1;
      v123 = 0;
      v124 = -1;
      *(_QWORD *)&v119 = &v127;
      *((_QWORD *)&v119 + 1) = &v125;
      google::protobuf::strings::Substitute("Field numbers $0 through $1 are reserved for the protocol buffer library implementation.", (uint64_t)v140, (uint64_t)&v139, (uint64_t)&v137, (uint64_t)&v135, (uint64_t)&__endptr, (uint64_t)&v131, (uint64_t)&v129, &__p, v119, (uint64_t)&v123);
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v71, (uint64_t)a2, 1, (const std::string::value_type *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v68 = *((_DWORD *)a2 + 4);
        if (a5)
          goto LABEL_103;
        goto LABEL_116;
      }
    }
  }
  v68 = *((_DWORD *)a2 + 4);
  if (a5)
  {
LABEL_103:
    if ((v68 & 2) == 0)
    {
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *(const std::string::value_type **)&a4[1], (uint64_t)a2, 3, "FieldDescriptorProto.extendee not set for extension field.");
      v68 = *((_DWORD *)a2 + 4);
    }
    a4[12] = (int32x2_t)a3;
    if ((v68 & 0x80) != 0)
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *(const std::string::value_type **)&a4[1], (uint64_t)a2, 2, "FieldDescriptorProto.oneof_index should not be set for extensions.");
    goto LABEL_128;
  }
LABEL_116:
  if ((v68 & 2) != 0)
  {
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *(const std::string::value_type **)&a4[1], (uint64_t)a2, 3, "FieldDescriptorProto.extendee set for non-extension field.");
    v68 = *((_DWORD *)a2 + 4);
  }
  a4[10] = (int32x2_t)a3;
  if ((v68 & 0x80) != 0)
  {
    v77 = (google::protobuf *)*((unsigned int *)a2 + 19);
    if ((v77 & 0x80000000) == 0 && (int)v77 < *((_DWORD *)a3 + 27))
    {
      a4[11] = (int32x2_t)(*((_QWORD *)a3 + 6) + 48 * v77);
      a4[15] = 0;
      if ((*((_DWORD *)a2 + 4) & 0x20) == 0)
        goto LABEL_136;
      goto LABEL_129;
    }
    v78 = (const std::string::value_type *)a4[1];
    v140[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer(v77, &v140[0].__r_.__value_.__s.__data_[12], (char *)v45);
    LODWORD(v140[0].__r_.__value_.__r.__words[1]) = strlen(v140[0].__r_.__value_.__l.__data_);
    v79 = *(_QWORD *)a3;
    v80 = *(char *)(*(_QWORD *)a3 + 23);
    v81 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    if (v80 < 0)
      v79 = **(_QWORD **)a3;
    v139.__r_.__value_.__r.__words[0] = v79;
    v82 = v80;
    if (v80 < 0)
      v82 = v81;
    LODWORD(v139.__r_.__value_.__r.__words[1]) = v82;
    v137 = 0;
    v138 = -1;
    v135 = 0;
    v136 = -1;
    __endptr = 0;
    v134 = -1;
    v131 = 0;
    v132 = -1;
    v129 = 0;
    v130 = -1;
    v127 = 0;
    v128 = -1;
    v125 = 0;
    v126 = -1;
    v123 = 0;
    v124 = -1;
    *(_QWORD *)&v120 = &v127;
    *((_QWORD *)&v120 + 1) = &v125;
    google::protobuf::strings::Substitute("FieldDescriptorProto.oneof_index $0 is out of range for type \"$1\".", (uint64_t)v140, (uint64_t)&v139, (uint64_t)&v137, (uint64_t)&v135, (uint64_t)&__endptr, (uint64_t)&v131, (uint64_t)&v129, &__p, v120, (uint64_t)&v123);
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v78, (uint64_t)a2, 2, (const std::string::value_type *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      a4[11] = 0;
      a4[15] = 0;
      if ((*((_DWORD *)a2 + 4) & 0x20) == 0)
        goto LABEL_136;
      goto LABEL_129;
    }
  }
LABEL_128:
  a4[11] = 0;
  a4[15] = 0;
  if ((*((_DWORD *)a2 + 4) & 0x20) == 0)
    goto LABEL_136;
LABEL_129:
  v83 = (google::protobuf::FieldOptions *)*((_QWORD *)a2 + 8);
  if (!v83)
  {
    v84 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)v140, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 9061);
    v85 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v84, "CHECK failed: !value || options_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v139, v85);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v140[0].__r_.__value_.__l.__data_);
    v83 = (google::protobuf::FieldOptions *)*((_QWORD *)a2 + 8);
  }
  v86 = (char *)operator new(0x20uLL);
  if (v83)
    v87 = v83;
  else
    v87 = (google::protobuf::FieldOptions *)&google::protobuf::_FieldOptions_default_instance_;
  v140[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
  *(_OWORD *)&v140[0].__r_.__value_.__r.__words[1] = xmmword_22DCE65A0;
  strcpy(v86, "google.protobuf.FieldOptions");
  google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::FieldDescriptor>((uint64_t)this, v87, (uint64_t)a4, 8, (std::string::size_type)v140);
  if (SHIBYTE(v140[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140[0].__r_.__value_.__l.__data_);
LABEL_136:
  google::protobuf::DescriptorBuilder::AddSymbol((uint64_t)this, *(_QWORD *)&a4[1], (uint64_t *)a3, (uint64_t)*a4, (uint64_t)a2, (const char *)2, (const char *)a4);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
}

void sub_22DC4CC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 121) < 0)
    operator delete(*(void **)(v23 - 144));
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::`anonymous namespace'::ToCamelCase(std::string *a1, uint64_t *a2, char a3)
{
  std::string *v5;
  std::string::size_type v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  int v15;

  v5 = a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = a2[1];
  std::string::reserve(a1, v6);
  v7 = *((char *)a2 + 23) < 0;
  v8 = *((unsigned __int8 *)a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = a2[1];
  if (v8)
  {
    v9 = 0;
    v10 = a3 ^ 1;
    do
    {
      if (v7)
        v12 = (uint64_t *)*a2;
      else
        v12 = a2;
      v13 = *((unsigned __int8 *)v12 + v9);
      v14 = v13 == 95;
      if (v13 != 95)
      {
        if ((v10 & ((v13 - 97) < 0x1A)) != 0)
          LOBYTE(v13) = v13 - 32;
        std::string::push_back(v5, v13);
      }
      ++v9;
      v7 = *((char *)a2 + 23) < 0;
      v11 = a2[1];
      if (*((char *)a2 + 23) >= 0)
        v11 = *((unsigned __int8 *)a2 + 23);
      v10 = v14;
    }
    while (v11 > v9);
  }
  if ((a3 & 1) != 0)
  {
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v5->__r_.__value_.__l.__size_)
        return;
      v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
    }
    else if (!*((_BYTE *)&v5->__r_.__value_.__s + 23))
    {
      return;
    }
    v15 = v5->__r_.__value_.__s.__data_[0];
    if ((v15 - 65) < 0x1A)
      LOBYTE(v15) = v15 + 32;
    v5->__r_.__value_.__s.__data_[0] = v15;
  }
}

void sub_22DC4CED8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void google::protobuf::`anonymous namespace'::ToJsonName(std::string *a1, uint64_t *a2)
{
  std::string::size_type v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  BOOL v12;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a2 + 23) >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = a2[1];
  std::string::reserve(a1, v4);
  v5 = *((char *)a2 + 23) < 0;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (v5)
        v10 = (uint64_t *)*a2;
      else
        v10 = a2;
      v11 = *((unsigned __int8 *)v10 + v7);
      v12 = v11 == 95;
      if (v11 != 95)
      {
        if (v8 && (v11 - 97) < 0x1A)
          LOBYTE(v11) = v11 - 32;
        std::string::push_back(a1, v11);
      }
      ++v7;
      v5 = *((char *)a2 + 23) < 0;
      v9 = a2[1];
      if (*((char *)a2 + 23) >= 0)
        v9 = *((unsigned __int8 *)a2 + 23);
      v8 = v12;
    }
    while (v9 > v7);
  }
}

void sub_22DC4CFD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::FieldDescriptor>(uint64_t a1, google::protobuf::FieldOptions *a2, uint64_t a3, int a4, std::string::size_type a5)
{
  char *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  void *__p;
  char *v32;
  unint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  google::protobuf::FieldDescriptor::GetLocationPath(a3, (char **)&__p);
  v10 = v32;
  if ((unint64_t)v32 < v33)
  {
    *(_DWORD *)v32 = a4;
    v11 = (uint64_t)(v10 + 4);
    goto LABEL_22;
  }
  v12 = (char *)__p;
  v13 = v32 - (_BYTE *)__p;
  v14 = (v32 - (_BYTE *)__p) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v33 - (_QWORD)__p;
  if ((uint64_t)(v33 - (_QWORD)__p) >> 1 > v15)
    v15 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(4 * v17);
    v19 = &v18[4 * v14];
    v20 = &v18[4 * v17];
    *(_DWORD *)v19 = a4;
    v11 = (uint64_t)(v19 + 4);
    v21 = v10 - v12;
    if (v10 == v12)
      goto LABEL_20;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(4 * v14);
  v20 = 0;
  *(_DWORD *)(4 * v14) = a4;
  v11 = 4 * v14 + 4;
  v21 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    v22 = v21 - 4;
    if (v22 < 0x2C)
      goto LABEL_29;
    if ((unint64_t)(v10 - &v18[v13]) < 0x20)
      goto LABEL_29;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v10[-v24];
    v19 -= v24;
    v26 = &v18[4 * v14 - 16];
    v27 = v10 - 16;
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *(_OWORD *)v27;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    v10 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        v30 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v19 - 1) = v30;
        v19 -= 4;
      }
      while (v10 != v12);
    }
  }
LABEL_20:
  __p = v19;
  v32 = (char *)v11;
  v33 = (unint64_t)v20;
  if (v12)
    operator delete(v12);
LABEL_22:
  v32 = (char *)v11;
  google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::FieldDescriptor>(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8), a2, a3, (uint64_t)&__p, a5);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DC4D1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::Descriptor::ExtensionRange>(uint64_t a1, uint64_t a2, uint64_t a3, google::protobuf::ExtensionRangeOptions *a4, uint64_t a5, uint64_t a6, std::string::size_type a7)
{
  uint64_t v14;
  int *v15;
  int **v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  char *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t ExtensionByNumberNoLock;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  std::string __p;
  void *v55;
  char v56;
  void *v57;
  void *v58;
  std::string __dst;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = (int *)operator new();
  google::protobuf::ExtensionRangeOptions::ExtensionRangeOptions((google::protobuf::ExtensionRangeOptions *)v15, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v16 = *(int ***)(v14 + 240);
  if ((unint64_t)v16 < *(_QWORD *)(v14 + 248))
  {
    *v16 = v15;
    *(_QWORD *)(v14 + 240) = v16 + 1;
    if ((google::protobuf::ExtensionRangeOptions::IsInitialized(a4) & 1) == 0)
      goto LABEL_3;
LABEL_11:
    google::protobuf::MessageLite::SerializeAsString(a4, (uint64_t)&__p);
    v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::MessageLite::ParseFromString(v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a5 + 8) = v15;
      if (v15[12] < 1)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a5 + 8) = v15;
      if (v15[12] < 1)
      {
LABEL_35:
        v31 = *((_QWORD *)a4 + 1);
        if ((v31 & 1) == 0)
          goto LABEL_36;
        goto LABEL_70;
      }
    }
    v22 = (google::protobuf::UnknownFieldSet *)v57;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v56 < 0)
    {
      operator delete(v55);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)a4 + 1);
    if ((v31 & 1) == 0)
    {
LABEL_36:
      v32 = (uint64_t *)google::protobuf::UnknownFieldSet::default_instance(v22);
      if (*v32 == v32[1])
        return;
LABEL_37:
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
      if (*(char *)(a7 + 23) >= 0)
        v34 = a7;
      else
        v34 = *(_QWORD *)a7;
      __p.__r_.__value_.__r.__words[0] = v34;
      v35 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v33, (const char **)&__p.__r_.__value_.__l.__data_);
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          v37 = *v32;
          v36 = v32[1];
          if ((int)((unint64_t)(v36 - *v32) >> 4) >= 1)
          {
            v38 = 0;
            v39 = (unint64_t)v35[4];
            v40 = (uint64_t **)(a1 + 128);
            do
            {
              ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(*(_QWORD *)a1, v39, *(_DWORD *)(v37 + 16 * v38));
              if (ExtensionByNumberNoLock)
              {
                v42 = ExtensionByNumberNoLock;
                v43 = *v40;
                if (*v40)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  v45 = (uint64_t *)(a1 + 128);
                  v46 = *v40;
                  do
                  {
                    v47 = v46[4];
                    v48 = v47 >= v44;
                    if (v47 >= v44)
                      v49 = (uint64_t **)v46;
                    else
                      v49 = (uint64_t **)(v46 + 1);
                    if (v48)
                      v45 = v46;
                    v46 = *v49;
                  }
                  while (*v49);
                  if (v45 != (uint64_t *)v40 && v44 >= v45[4])
                  {
                    v50 = (uint64_t *)v45[1];
                    v51 = v45;
                    if (v50)
                    {
                      do
                      {
                        v52 = v50;
                        v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        v52 = (uint64_t *)v51[2];
                        v53 = *v52 == (_QWORD)v51;
                        v51 = v52;
                      }
                      while (!v53);
                    }
                    if (*(uint64_t **)(a1 + 120) == v45)
                      *(_QWORD *)(a1 + 120) = v52;
                    --*(_QWORD *)(a1 + 136);
                    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v45);
                    operator delete(v45);
                    v37 = *v32;
                    v36 = v32[1];
                  }
                }
              }
              ++v38;
            }
            while (v38 < (int)((unint64_t)(v36 - v37) >> 4));
          }
        }
      }
      return;
    }
LABEL_70:
    v32 = (uint64_t *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v32 == *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 16))
      return;
    goto LABEL_37;
  }
  v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v14 + 232), &__p);
  v15 = (int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 240) = v21;
  if ((google::protobuf::ExtensionRangeOptions::IsInitialized(a4) & 1) != 0)
    goto LABEL_11;
LABEL_3:
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  if (v18 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v18 + 1;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
  if (v18)
  {
LABEL_17:
    if (v17 >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(p_dst, v25, v18);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 46;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)&__p, (uint64_t)a4, 7, "Uninterpreted option is missing name or value.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22DC4D5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_22DC4D5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::OneofDescriptor>(uint64_t a1, google::protobuf::OneofOptions *a2, uint64_t a3, int a4, std::string::size_type a5)
{
  char *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  void *__p;
  char *v32;
  unint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  google::protobuf::OneofDescriptor::GetLocationPath(a3, (char **)&__p);
  v10 = v32;
  if ((unint64_t)v32 < v33)
  {
    *(_DWORD *)v32 = a4;
    v11 = (uint64_t)(v10 + 4);
    goto LABEL_22;
  }
  v12 = (char *)__p;
  v13 = v32 - (_BYTE *)__p;
  v14 = (v32 - (_BYTE *)__p) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v33 - (_QWORD)__p;
  if ((uint64_t)(v33 - (_QWORD)__p) >> 1 > v15)
    v15 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(4 * v17);
    v19 = &v18[4 * v14];
    v20 = &v18[4 * v17];
    *(_DWORD *)v19 = a4;
    v11 = (uint64_t)(v19 + 4);
    v21 = v10 - v12;
    if (v10 == v12)
      goto LABEL_20;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(4 * v14);
  v20 = 0;
  *(_DWORD *)(4 * v14) = a4;
  v11 = 4 * v14 + 4;
  v21 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    v22 = v21 - 4;
    if (v22 < 0x2C)
      goto LABEL_29;
    if ((unint64_t)(v10 - &v18[v13]) < 0x20)
      goto LABEL_29;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v10[-v24];
    v19 -= v24;
    v26 = &v18[4 * v14 - 16];
    v27 = v10 - 16;
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *(_OWORD *)v27;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    v10 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        v30 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v19 - 1) = v30;
        v19 -= 4;
      }
      while (v10 != v12);
    }
  }
LABEL_20:
  __p = v19;
  v32 = (char *)v11;
  v33 = (unint64_t)v20;
  if (v12)
    operator delete(v12);
LABEL_22:
  v32 = (char *)v11;
  google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::OneofDescriptor>(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8), a2, a3, (uint64_t)&__p, a5);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DC4D848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::CheckEnumValueUniqueness(google::protobuf::DescriptorBuilder *this, const google::protobuf::EnumDescriptorProto *a2, const google::protobuf::EnumDescriptor *a3)
{
  const google::protobuf::EnumDescriptor *v3;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v20;
  int64_t v21;
  int v22;
  std::string *v23;
  int v24;
  uint64_t v25;
  std::string::size_type v26;
  BOOL v27;
  uint64_t v28;
  std::string *v29;
  char *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  BOOL v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string::size_type v36;
  char v37;
  std::string::size_type v38;
  std::string *v39;
  int v40;
  BOOL v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t **v46;
  char v47;
  uint64_t *v48;
  const void **v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  std::string *v56;
  __int128 v57;
  uint64_t **v58;
  uint64_t v59;
  int v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  const std::string::value_type *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  const char *v74;
  char *v75;
  const google::protobuf::EnumDescriptor *v77;
  uint64_t v78;
  _QWORD **v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string __p;
  uint64_t v84;
  std::string v85;
  char **v86;
  char *v87[2];
  std::string v88;
  std::string *v89;

  v3 = a3;
  v5 = *(_QWORD *)a3;
  v6 = *(char *)(*(_QWORD *)a3 + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 **)a3;
  else
    v7 = **(unsigned __int8 ***)a3;
  if (v6 < 0)
  {
    v8 = *(_QWORD *)(v5 + 8);
    if (v8 < 0)
    {
      google::protobuf::StringPiece::LogFatalSizeTooBig(*(google::protobuf::StringPiece **)(v5 + 8), "size_t to int conversion", (const char *)a3);
      memset(&v88, 0, sizeof(v88));
      goto LABEL_15;
    }
  }
  else
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)a3 + 23);
  }
  memset(&v88, 0, sizeof(v88));
  for (; v8; --v8)
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 != 95)
    {
      if ((v9 - 65) < 0x1A)
        LOBYTE(v9) = v9 + 32;
      std::string::push_back(&v88, v9);
    }
  }
LABEL_15:
  v87[0] = 0;
  v87[1] = 0;
  v86 = v87;
  if (*((int *)v3 + 11) >= 1)
  {
    v11 = 0;
    v75 = (char *)a2 + 24;
    v77 = v3;
    while (1)
    {
      v78 = *((_QWORD *)v3 + 6);
      v79 = (_QWORD **)(v78 + 40 * v11);
      v12 = *v79;
      v13 = *((char *)*v79 + 23);
      v14 = (_QWORD *)**v79;
      v15 = v13 >= 0 ? *v79 : (_QWORD *)**v79;
      if ((v13 & 0x80000000) == 0)
        break;
      v16 = v12[1];
      if ((v16 & 0x8000000000000000) == 0)
        goto LABEL_25;
      google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v12[1], "size_t to int conversion", (const char *)a3);
      v17 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
      size = v88.__r_.__value_.__l.__size_;
      v3 = v77;
LABEL_30:
      v20 = 0;
      v21 = 0;
      v22 = (char)v17;
      if ((v17 & 0x80u) != 0)
        v17 = size;
      v23 = (std::string *)v88.__r_.__value_.__r.__words[0];
      if (v22 >= 0)
        v23 = &v88;
      while (1)
      {
        if (v20 >= v17)
          goto LABEL_44;
        if ((v16 & ~((uint64_t)v16 >> 63)) == v21)
          goto LABEL_160;
        v24 = *((unsigned __int8 *)v15 + v21);
        if (v24 == 95)
          goto LABEL_35;
        if ((v24 - 65) < 0x1A)
          LOBYTE(v24) = v24 + 32;
        if (v23->__r_.__value_.__s.__data_[v20] != v24)
          break;
        ++v20;
LABEL_35:
        if (v16 == ++v21)
        {
          v21 = v16;
LABEL_44:
          if (v20 < v17)
          {
            if (v14)
            {
              if (v16 <= 0x7FFFFFFFFFFFFFF7)
              {
                if (v16 < 0x17)
                  goto LABEL_68;
                v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v16 | 7) != 0x17)
                  v25 = v16 | 7;
                goto LABEL_77;
              }
              goto LABEL_163;
            }
            goto LABEL_74;
          }
          if (v21 >= v16)
          {
LABEL_59:
            if (v16 == v21)
            {
LABEL_60:
              if (v14)
              {
                if (v16 <= 0x7FFFFFFFFFFFFFF7)
                {
                  if (v16 < 0x17)
                    goto LABEL_68;
                  v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v16 | 7) != 0x17)
                    v25 = v16 | 7;
                  goto LABEL_77;
                }
                goto LABEL_163;
              }
              goto LABEL_74;
            }
            v27 = (uint64_t)v16 < v21;
            v16 -= v21;
            if (!v27)
            {
              if (v14)
              {
                if (v16 <= 0x7FFFFFFFFFFFFFF7)
                {
                  if (v16 >= 0x17)
                  {
                    v70 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v16 | 7) != 0x17)
                      v70 = v16 | 7;
                    v71 = v70 + 1;
                    p_p = (std::string *)operator new(v70 + 1);
                    __p.__r_.__value_.__l.__size_ = v16;
                    __p.__r_.__value_.__r.__words[2] = v71 | 0x8000000000000000;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
                    v3 = v77;
                  }
                  else
                  {
                    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v16;
                    p_p = &__p;
                  }
                  v30 = (char *)v15 + v21;
                  v29 = p_p;
                  goto LABEL_79;
                }
LABEL_163:
                std::string::__throw_length_error[abi:ne180100]();
              }
LABEL_74:
              memset(&__p, 0, sizeof(__p));
              goto LABEL_81;
            }
            v72 = 283;
            v74 = "remove_prefix";
            v73 = "length_ >= n";
          }
          else
          {
            if ((uint64_t)v16 <= v21)
              v26 = v21;
            else
              v26 = v16;
            while (v26 != v21)
            {
              if (*((_BYTE *)v15 + v21) != 95)
                goto LABEL_59;
              if (v16 == ++v21)
                goto LABEL_60;
            }
LABEL_160:
            v72 = 278;
            v73 = "i < length_";
            v74 = "operator[]";
          }
          __assert_rtn(v74, "stringpiece.h", v72, v73);
        }
      }
      if (v16 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_163;
      if (v16 < 0x17)
      {
LABEL_68:
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v16;
        p_p = &__p;
        goto LABEL_78;
      }
      v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v25 = v16 | 7;
LABEL_77:
      v28 = v25 + 1;
      p_p = (std::string *)operator new(v25 + 1);
      __p.__r_.__value_.__l.__size_ = v16;
      __p.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      v3 = v77;
LABEL_78:
      v29 = p_p;
      v30 = (char *)v15;
LABEL_79:
      memmove(v29, v30, v16);
LABEL_80:
      p_p->__r_.__value_.__s.__data_[v16] = 0;
LABEL_81:
      memset(&v85, 0, sizeof(v85));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v31 = __p.__r_.__value_.__l.__size_;
      std::string::reserve(&v85, v31);
      v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v33 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v34 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v35 = __p.__r_.__value_.__l.__size_;
      if (v35)
      {
        v36 = 0;
        v37 = 1;
        do
        {
          if (v33)
            v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
          else
            v39 = &__p;
          v40 = v39->__r_.__value_.__s.__data_[v36];
          v41 = v40 == 95;
          if (v40 != 95)
          {
            if ((v37 & 1) != 0)
              v42 = -97;
            else
              v42 = -65;
            if ((v37 & 1) != 0)
              v43 = -32;
            else
              v43 = 32;
            if ((v40 + v42) >= 0x1Au)
              v44 = 0;
            else
              v44 = v43;
            std::string::push_back(&v85, v40 + v44);
            v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v34 = __p.__r_.__value_.__l.__size_;
          }
          ++v36;
          v33 = (v32 & 0x80u) != 0;
          if ((v32 & 0x80u) == 0)
            v38 = v32;
          else
            v38 = v34;
          v37 = v41;
        }
        while (v38 > v36);
      }
      if ((v32 & 0x80) != 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_111;
LABEL_109:
        __p = v85;
      }
      else
      {
        if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_109;
LABEL_111:
        std::string::__init_copy_ctor_external(&__p, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
      }
      v84 = v78 + 40 * v11;
      v46 = std::__tree<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::__map_value_compare<std::string,std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string,google::protobuf::EnumValueDescriptor const*>>((uint64_t **)&v86, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
      v47 = v45;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v47)
          goto LABEL_116;
        goto LABEL_145;
      }
      if (v45)
        goto LABEL_145;
LABEL_116:
      v48 = v46[7];
      v49 = (const void **)*v48;
      v50 = *v79;
      v51 = *(unsigned __int8 *)(*v48 + 23);
      a3 = *(const google::protobuf::EnumDescriptor **)(*v48 + 8);
      if ((v51 & 0x80u) == 0)
        v52 = *(unsigned __int8 *)(*v48 + 23);
      else
        v52 = *(_QWORD *)(*v48 + 8);
      v53 = *((unsigned __int8 *)v50 + 23);
      v54 = (char)v53;
      if ((v53 & 0x80u) != 0)
        v53 = v50[1];
      if (v52 != v53)
        goto LABEL_131;
      if (v54 >= 0)
        v55 = *v79;
      else
        v55 = (_QWORD *)*v50;
      if ((v51 & 0x80) != 0)
      {
        if (memcmp(*v49, v55, (size_t)a3))
          goto LABEL_131;
        goto LABEL_145;
      }
      if (*(_BYTE *)(*v48 + 23))
      {
        while (*(unsigned __int8 *)v49 == *(unsigned __int8 *)v55)
        {
          v49 = (const void **)((char *)v49 + 1);
          v55 = (_QWORD *)((char *)v55 + 1);
          if (!--v51)
            goto LABEL_145;
        }
LABEL_131:
        if (*((_DWORD *)v48 + 4) != *(_DWORD *)(v78 + 40 * v11 + 16))
        {
          std::operator+<char>();
          v56 = std::string::append(&v80, " has the same name as ");
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v81.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          v89 = &v85;
          v58 = std::__tree<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::__map_value_compare<std::string,std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v86, (const void **)&v85.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
          v59 = *v58[7];
          v60 = *(char *)(v59 + 23);
          v61 = v60 >= 0 ? (const std::string::value_type *)*v58[7] : *(const std::string::value_type **)v59;
          v62 = v60 >= 0 ? *(unsigned __int8 *)(v59 + 23) : *(_QWORD *)(v59 + 8);
          v63 = std::string::append(&v81, v61, v62);
          v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v82.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          v65 = std::string::append(&v82, " if you ignore case and strip out the enum name prefix (if any). This is error-prone and can lead to undefined behavior. Please avoid doing this. If you are using allow_alias, please assign the same numeric value to both enums.");
          v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v82.__r_.__value_.__l.__data_);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_149;
LABEL_140:
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
LABEL_150:
              operator delete(v80.__r_.__value_.__l.__data_);
          }
          else
          {
            if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_140;
LABEL_149:
            operator delete(v81.__r_.__value_.__l.__data_);
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_150;
          }
          v67 = *(const std::string::value_type **)(v78 + 40 * v11 + 8);
          if (*(_DWORD *)(*((_QWORD *)v3 + 2) + 60) == 2)
          {
            v68 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumValueDescriptorProto>::TypeHandler>((uint64_t)v75, v11);
            google::protobuf::DescriptorBuilder::AddWarning((uint64_t)this, v67, v68, 0, (const std::string::value_type *)&__p);
          }
          else
          {
            v69 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumValueDescriptorProto>::TypeHandler>((uint64_t)v75, v11);
            google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v67, v69, 0, (const std::string::value_type *)&__p);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_146;
            goto LABEL_18;
          }
        }
      }
LABEL_145:
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_146:
        operator delete(v85.__r_.__value_.__l.__data_);
        if (++v11 >= *((int *)v3 + 11))
        {
LABEL_155:
          std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v86, v87[0]);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_156;
          return;
        }
      }
      else
      {
LABEL_18:
        if (++v11 >= *((int *)v3 + 11))
          goto LABEL_155;
      }
    }
    v16 = *((unsigned __int8 *)*v79 + 23);
LABEL_25:
    v17 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    size = v88.__r_.__value_.__l.__size_;
    if (!v16)
    {
      if (v15)
      {
        v16 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        p_p = &__p;
        goto LABEL_80;
      }
      goto LABEL_74;
    }
    v14 = v15;
    goto LABEL_30;
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v86, 0);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
LABEL_156:
    operator delete(v88.__r_.__value_.__l.__data_);
}

void sub_22DC4E03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a32 < 0)
  {
    operator delete(__p);
    if (a25 < 0)
    {
LABEL_5:
      operator delete(a20);
      if ((a19 & 0x80000000) == 0)
        goto LABEL_9;
LABEL_8:
      operator delete(a14);
LABEL_9:
      if (a46 < 0)
        operator delete(a41);
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v46 - 152, *(char **)(v46 - 144));
      if (*(char *)(v46 - 105) < 0)
        operator delete(*(void **)(v46 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if (a25 < 0)
  {
    goto LABEL_5;
  }
  if ((a19 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

uint64_t google::protobuf::DescriptorBuilder::BuildEnumValue(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  __int128 *v9;
  std::string *v10;
  std::string::size_type v11;
  __int128 v12;
  std::string::size_type *v13;
  char *v14;
  uint64_t v15;
  std::string *v16;
  std::string **v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  std::string::size_type v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  google::protobuf::EnumValueOptions *v32;
  unsigned int *v33;
  google::protobuf::EnumValueOptions *v34;
  int v35;
  uint64_t v36;
  std::string::size_type size;
  std::string *v38;
  std::string::size_type v39;
  char v40;
  const std::string::value_type *v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string __p[2];
  std::string v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v8 = a1[1];
  v9 = *(__int128 **)(a2 + 24);
  v10 = (std::string *)operator new();
  v11 = (std::string::size_type)v10;
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v12 = *v9;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
  }
  __p[0].__r_.__value_.__r.__words[0] = v11;
  v13 = *(std::string::size_type **)(v8 + 216);
  if ((unint64_t)v13 >= *(_QWORD *)(v8 + 224))
  {
    v14 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v8 + 208), __p);
    v11 = __p[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *v13 = v11;
    v14 = (char *)(v13 + 1);
  }
  *(_QWORD *)(v8 + 216) = v14;
  *(_QWORD *)a4 = v11;
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a4 + 24) = a3;
  v15 = a1[1];
  v16 = (std::string *)operator new();
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  v17 = *(std::string ***)(v15 + 216);
  if ((unint64_t)v17 >= *(_QWORD *)(v15 + 224))
  {
    v27 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v15 + 208), __p);
    v16 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    *(_QWORD *)(v15 + 216) = v27;
    v18 = a3[1];
    v19 = *(char *)(v18 + 23);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_9:
      v20 = v19;
      v21 = *a3;
      v22 = *(char *)(*a3 + 23);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_10;
LABEL_14:
      v23 = v20 - *(_QWORD *)(v21 + 8);
      v24 = *(_QWORD *)a4;
      v25 = *(char *)(*(_QWORD *)a4 + 23);
      if ((v25 & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_15;
    }
  }
  else
  {
    *v17 = v16;
    *(_QWORD *)(v15 + 216) = v17 + 1;
    v18 = a3[1];
    v19 = *(char *)(v18 + 23);
    if ((v19 & 0x80000000) == 0)
      goto LABEL_9;
  }
  v20 = *(_QWORD *)(v18 + 8);
  v21 = *a3;
  v22 = *(char *)(*a3 + 23);
  if (v22 < 0)
    goto LABEL_14;
LABEL_10:
  v23 = v20 - v22;
  v24 = *(_QWORD *)a4;
  v25 = *(char *)(*(_QWORD *)a4 + 23);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_11:
    v26 = v25;
    goto LABEL_16;
  }
LABEL_15:
  v26 = *(_QWORD *)(v24 + 8);
LABEL_16:
  std::string::reserve(v16, v26 + v23);
  v28 = a3[1];
  if (*(char *)(v28 + 23) < 0)
    v28 = *(_QWORD *)v28;
  std::string::append(v16, (const std::string::value_type *)v28, v23);
  v29 = *(char *)(*(_QWORD *)a4 + 23);
  if (v29 >= 0)
    v30 = *(const std::string::value_type **)a4;
  else
    v30 = **(const std::string::value_type ***)a4;
  if (v29 >= 0)
    v31 = *(unsigned __int8 *)(*(_QWORD *)a4 + 23);
  else
    v31 = *(_QWORD *)(*(_QWORD *)a4 + 8);
  std::string::append(v16, v30, v31);
  *(_QWORD *)(a4 + 8) = v16;
  google::protobuf::DescriptorBuilder::ValidateSymbolName((uint64_t)a1, *(uint64_t **)(a2 + 24), (const std::string::value_type *)v16, a2);
  *(_QWORD *)(a4 + 32) = 0;
  if ((*(_DWORD *)(a2 + 16) & 2) != 0)
  {
    v32 = *(google::protobuf::EnumValueOptions **)(a2 + 32);
    if (!v32)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 9863);
      v33 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: !value || options_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v64, v33);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      v32 = *(google::protobuf::EnumValueOptions **)(a2 + 32);
    }
    if (v32)
      v34 = v32;
    else
      v34 = (google::protobuf::EnumValueOptions *)&google::protobuf::_EnumValueOptions_default_instance_;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_22DCE5C10;
    strcpy(__p[0].__r_.__value_.__l.__data_, "google.protobuf.EnumValueOptions");
    google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::EnumValueDescriptor>((uint64_t)a1, v34, a4, 3, (std::string::size_type)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v35 = google::protobuf::DescriptorBuilder::AddSymbol((uint64_t)a1, *(_QWORD *)(a4 + 8), (uint64_t *)a3[3], *(_QWORD *)a4, a2, (const char *)5, (const char *)a4);
  if (((google::protobuf::FileDescriptorTables::AddAliasUnderParent(a1[11], a3, *(_QWORD *)a4, 5, a4) ^ 1 | v35) & 1) == 0)
  {
    memset(__p, 0, 24);
    v36 = a3[3];
    if (!v36)
      v36 = a1[10];
    std::string::operator=(__p, *(const std::string **)(v36 + 8));
    size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p[0].__r_.__value_.__l.__size_;
    if (size)
    {
      std::operator+<char>();
      v38 = std::string::append(&v64, "\"");
      v39 = v38->__r_.__value_.__r.__words[0];
      v66.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
      v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      __p[0].__r_.__value_.__r.__words[0] = v39;
      __p[0].__r_.__value_.__l.__size_ = v66.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v40;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
    }
    else
    {
      MEMORY[0x22E31DC84](__p, "the global scope");
    }
    v41 = *(const std::string::value_type **)(a4 + 8);
    std::operator+<char>();
    v42 = std::string::append(&v60, "\" must be unique within ");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = __p;
    else
      v44 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    else
      v45 = __p[0].__r_.__value_.__l.__size_;
    v46 = std::string::append(&v61, (const std::string::value_type *)v44, v45);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = std::string::append(&v62, ", not just within \"");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = *(char *)(*a3 + 23);
    if (v50 >= 0)
      v51 = (const std::string::value_type *)*a3;
    else
      v51 = *(const std::string::value_type **)*a3;
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(*a3 + 23);
    else
      v52 = *(_QWORD *)(*a3 + 8);
    v53 = std::string::append(&v63, v51, v52);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append(&v66, "\".");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError((uint64_t)a1, v41, a2, 0, (const std::string::value_type *)&v64);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_57:
        if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_58;
        goto LABEL_65;
      }
    }
    else if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_57;
    }
    operator delete(v66.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_58:
      if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_59;
      goto LABEL_66;
    }
LABEL_65:
    operator delete(v63.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_59:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_67;
    }
LABEL_66:
    operator delete(v62.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_60:
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_61;
      goto LABEL_68;
    }
LABEL_67:
    operator delete(v61.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_61:
      if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_62;
LABEL_69:
      operator delete(__p[0].__r_.__value_.__l.__data_);
      goto LABEL_62;
    }
LABEL_68:
    operator delete(v60.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_69;
  }
LABEL_62:
  v57 = a1[11];
  v58 = *(_DWORD *)(a4 + 16);
  __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(a4 + 24);
  LODWORD(__p[0].__r_.__value_.__r.__words[1]) = v58;
}

void sub_22DC4E7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  google::protobuf::internal::LogMessage::~LogMessage(&a29);
  _Unwind_Resume(a1);
}

void sub_22DC4E7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  google::protobuf::internal::LogMessage::~LogMessage(&a29);
  _Unwind_Resume(a1);
}

void sub_22DC4E7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a42 < 0)
    operator delete(__p);
  if (a49 < 0)
  {
    operator delete(a44);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::EnumDescriptor>(uint64_t a1, google::protobuf::EnumOptions *a2, uint64_t a3, int a4, std::string::size_type a5)
{
  char *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  void *__p;
  char *v32;
  unint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  google::protobuf::EnumDescriptor::GetLocationPath(a3, (char **)&__p);
  v10 = v32;
  if ((unint64_t)v32 < v33)
  {
    *(_DWORD *)v32 = a4;
    v11 = (uint64_t)(v10 + 4);
    goto LABEL_22;
  }
  v12 = (char *)__p;
  v13 = v32 - (_BYTE *)__p;
  v14 = (v32 - (_BYTE *)__p) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v33 - (_QWORD)__p;
  if ((uint64_t)(v33 - (_QWORD)__p) >> 1 > v15)
    v15 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(4 * v17);
    v19 = &v18[4 * v14];
    v20 = &v18[4 * v17];
    *(_DWORD *)v19 = a4;
    v11 = (uint64_t)(v19 + 4);
    v21 = v10 - v12;
    if (v10 == v12)
      goto LABEL_20;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(4 * v14);
  v20 = 0;
  *(_DWORD *)(4 * v14) = a4;
  v11 = 4 * v14 + 4;
  v21 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    v22 = v21 - 4;
    if (v22 < 0x2C)
      goto LABEL_29;
    if ((unint64_t)(v10 - &v18[v13]) < 0x20)
      goto LABEL_29;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v10[-v24];
    v19 -= v24;
    v26 = &v18[4 * v14 - 16];
    v27 = v10 - 16;
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *(_OWORD *)v27;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    v10 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        v30 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v19 - 1) = v30;
        v19 -= 4;
      }
      while (v10 != v12);
    }
  }
LABEL_20:
  __p = v19;
  v32 = (char *)v11;
  v33 = (unint64_t)v20;
  if (v12)
    operator delete(v12);
LABEL_22:
  v32 = (char *)v11;
  google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::EnumDescriptor>(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8), a2, a3, (uint64_t)&__p, a5);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DC4EB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::EnumValueDescriptor>(uint64_t a1, google::protobuf::EnumValueOptions *a2, uint64_t a3, int a4, std::string::size_type a5)
{
  char *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  void *__p;
  char *v32;
  unint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  google::protobuf::EnumValueDescriptor::GetLocationPath(a3, (char **)&__p);
  v10 = v32;
  if ((unint64_t)v32 < v33)
  {
    *(_DWORD *)v32 = a4;
    v11 = (uint64_t)(v10 + 4);
    goto LABEL_22;
  }
  v12 = (char *)__p;
  v13 = v32 - (_BYTE *)__p;
  v14 = (v32 - (_BYTE *)__p) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v33 - (_QWORD)__p;
  if ((uint64_t)(v33 - (_QWORD)__p) >> 1 > v15)
    v15 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(4 * v17);
    v19 = &v18[4 * v14];
    v20 = &v18[4 * v17];
    *(_DWORD *)v19 = a4;
    v11 = (uint64_t)(v19 + 4);
    v21 = v10 - v12;
    if (v10 == v12)
      goto LABEL_20;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(4 * v14);
  v20 = 0;
  *(_DWORD *)(4 * v14) = a4;
  v11 = 4 * v14 + 4;
  v21 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    v22 = v21 - 4;
    if (v22 < 0x2C)
      goto LABEL_29;
    if ((unint64_t)(v10 - &v18[v13]) < 0x20)
      goto LABEL_29;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v10[-v24];
    v19 -= v24;
    v26 = &v18[4 * v14 - 16];
    v27 = v10 - 16;
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *(_OWORD *)v27;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    v10 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        v30 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v19 - 1) = v30;
        v19 -= 4;
      }
      while (v10 != v12);
    }
  }
LABEL_20:
  __p = v19;
  v32 = (char *)v11;
  v33 = (unint64_t)v20;
  if (v12)
    operator delete(v12);
LABEL_22:
  v32 = (char *)v11;
  google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::EnumValueDescriptor>(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8), a2, a3, (uint64_t)&__p, a5);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DC4ECFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::DescriptorBuilder::BuildMethod(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __int128 *v9;
  std::string *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t *v13;
  char *v14;
  const std::string::value_type *NameString;
  google::protobuf::MethodOptions *v16;
  unsigned int *v17;
  google::protobuf::MethodOptions *v18;
  char v20;
  std::string __p[2];

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(__int128 **)(a2 + 24);
  v10 = (std::string *)operator new();
  v11 = (uint64_t)v10;
  if (*((char *)v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v12 = *v9;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
  }
  __p[0].__r_.__value_.__r.__words[0] = v11;
  v13 = *(uint64_t **)(v8 + 216);
  if ((unint64_t)v13 >= *(_QWORD *)(v8 + 224))
  {
    v14 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v8 + 208), __p);
    v11 = __p[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *v13 = v11;
    v14 = (char *)(v13 + 1);
  }
  *(_QWORD *)(v8 + 216) = v14;
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 16) = a3;
  NameString = (const std::string::value_type *)google::protobuf::DescriptorBuilder::AllocateNameString(a1, *(uint64_t **)(a3 + 8), v11);
  *(_QWORD *)(a4 + 8) = NameString;
  google::protobuf::DescriptorBuilder::ValidateSymbolName(a1, *(uint64_t **)(a2 + 24), NameString, a2);
  *(_QWORD *)(a4 + 88) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  if ((*(_DWORD *)(a2 + 16) & 8) != 0)
  {
    v16 = *(google::protobuf::MethodOptions **)(a2 + 48);
    if (!v16)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 10444);
      v17 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: !value || options_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v20, v17);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      v16 = *(google::protobuf::MethodOptions **)(a2 + 48);
    }
    if (v16)
      v18 = v16;
    else
      v18 = (google::protobuf::MethodOptions *)&google::protobuf::_MethodOptions_default_instance_;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_22DCE7550;
    strcpy(__p[0].__r_.__value_.__l.__data_, "google.protobuf.MethodOptions");
    google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::MethodDescriptor>(a1, v18, a4, 4, (std::string::size_type)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  *(_WORD *)(a4 + 96) = *(_WORD *)(a2 + 56);
  return google::protobuf::DescriptorBuilder::AddSymbol(a1, *(_QWORD *)(a4 + 8), (uint64_t *)a3, *(_QWORD *)a4, a2, (const char *)7, (const char *)a4);
}

void sub_22DC4EF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC4EF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC4EF28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_22DC4EF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::ServiceDescriptor>(uint64_t a1, google::protobuf::ServiceOptions *a2, uint64_t a3, int a4, std::string::size_type a5)
{
  char *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  void *__p;
  char *v32;
  unint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  google::protobuf::ServiceDescriptor::GetLocationPath(a3, (char **)&__p);
  v10 = v32;
  if ((unint64_t)v32 < v33)
  {
    *(_DWORD *)v32 = a4;
    v11 = (uint64_t)(v10 + 4);
    goto LABEL_22;
  }
  v12 = (char *)__p;
  v13 = v32 - (_BYTE *)__p;
  v14 = (v32 - (_BYTE *)__p) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v33 - (_QWORD)__p;
  if ((uint64_t)(v33 - (_QWORD)__p) >> 1 > v15)
    v15 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(4 * v17);
    v19 = &v18[4 * v14];
    v20 = &v18[4 * v17];
    *(_DWORD *)v19 = a4;
    v11 = (uint64_t)(v19 + 4);
    v21 = v10 - v12;
    if (v10 == v12)
      goto LABEL_20;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(4 * v14);
  v20 = 0;
  *(_DWORD *)(4 * v14) = a4;
  v11 = 4 * v14 + 4;
  v21 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    v22 = v21 - 4;
    if (v22 < 0x2C)
      goto LABEL_29;
    if ((unint64_t)(v10 - &v18[v13]) < 0x20)
      goto LABEL_29;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v10[-v24];
    v19 -= v24;
    v26 = &v18[4 * v14 - 16];
    v27 = v10 - 16;
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *(_OWORD *)v27;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    v10 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        v30 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v19 - 1) = v30;
        v19 -= 4;
      }
      while (v10 != v12);
    }
  }
LABEL_20:
  __p = v19;
  v32 = (char *)v11;
  v33 = (unint64_t)v20;
  if (v12)
    operator delete(v12);
LABEL_22:
  v32 = (char *)v11;
  google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::ServiceDescriptor>(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8), a2, a3, (uint64_t)&__p, a5);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DC4F140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptions<google::protobuf::MethodDescriptor>(uint64_t a1, google::protobuf::MethodOptions *a2, uint64_t a3, int a4, std::string::size_type a5)
{
  char *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  void *__p;
  char *v32;
  unint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  google::protobuf::MethodDescriptor::GetLocationPath(a3, (char **)&__p);
  v10 = v32;
  if ((unint64_t)v32 < v33)
  {
    *(_DWORD *)v32 = a4;
    v11 = (uint64_t)(v10 + 4);
    goto LABEL_22;
  }
  v12 = (char *)__p;
  v13 = v32 - (_BYTE *)__p;
  v14 = (v32 - (_BYTE *)__p) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v16 = v33 - (_QWORD)__p;
  if ((uint64_t)(v33 - (_QWORD)__p) >> 1 > v15)
    v15 = v16 >> 1;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
    v17 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(4 * v17);
    v19 = &v18[4 * v14];
    v20 = &v18[4 * v17];
    *(_DWORD *)v19 = a4;
    v11 = (uint64_t)(v19 + 4);
    v21 = v10 - v12;
    if (v10 == v12)
      goto LABEL_20;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(4 * v14);
  v20 = 0;
  *(_DWORD *)(4 * v14) = a4;
  v11 = 4 * v14 + 4;
  v21 = v10 - v12;
  if (v10 != v12)
  {
LABEL_14:
    v22 = v21 - 4;
    if (v22 < 0x2C)
      goto LABEL_29;
    if ((unint64_t)(v10 - &v18[v13]) < 0x20)
      goto LABEL_29;
    v23 = (v22 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v25 = &v10[-v24];
    v19 -= v24;
    v26 = &v18[4 * v14 - 16];
    v27 = v10 - 16;
    v28 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *(_OWORD *)v27;
      *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 32;
      v28 -= 8;
    }
    while (v28);
    v10 = v25;
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        v30 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v19 - 1) = v30;
        v19 -= 4;
      }
      while (v10 != v12);
    }
  }
LABEL_20:
  __p = v19;
  v32 = (char *)v11;
  v33 = (unint64_t)v20;
  if (v12)
    operator delete(v12);
LABEL_22:
  v32 = (char *)v11;
  google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::MethodDescriptor>(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8), a2, a3, (uint64_t)&__p, a5);
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22DC4F334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::CrossLinkMessage(google::protobuf::DescriptorBuilder *this, google::protobuf::Descriptor *a2, const google::protobuf::DescriptorProto *a3)
{
  google::protobuf::Descriptor *v3;
  google::protobuf::DescriptorBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::Descriptor *v7;
  const google::protobuf::DescriptorProto *v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::DescriptorBuilder *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  unsigned int *v25;
  std::string *v26;
  unsigned int *v27;
  google::protobuf::Descriptor *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const google::protobuf::FieldDescriptorProto *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const google::protobuf::FieldDescriptorProto *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  const void **v47;
  int v48;
  size_t v49;
  unint64_t v50;
  std::string *p_dst;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  int v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t **v63;
  int v64;
  uint64_t *v65;
  int v66;
  std::string::size_type v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  size_t v80;
  char *v81;
  char *v82;
  const void **v83;
  int v84;
  size_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const void *v91;
  int v92;
  const std::string::value_type *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t i;
  uint64_t v106;
  uint64_t v107;
  const std::string::value_type *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  const std::string::value_type *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v118;
  google::protobuf::DescriptorBuilder *v119;
  google::protobuf::Descriptor *v120;
  std::string __p;
  std::string __dst;
  void *v123[2];
  std::string::size_type v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  std::string v141;
  __int128 v142;
  std::string::size_type v143;
  uint64_t v144;

  v3 = a2;
  v4 = this;
  v144 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a2 + 4))
  {
    this = (google::protobuf::DescriptorBuilder *)google::protobuf::MessageOptions::default_instance(this);
    *((_QWORD *)v3 + 4) = this;
  }
  if (*((int *)v3 + 29) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = (google::protobuf::Descriptor *)(*((_QWORD *)v3 + 7) + v5);
      v8 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)a3 + 48, v6);
      this = (google::protobuf::DescriptorBuilder *)google::protobuf::DescriptorBuilder::CrossLinkMessage(v4, v7, v8);
      ++v6;
      v5 += 144;
    }
    while (v6 < *((int *)v3 + 29));
  }
  v119 = v4;
  v120 = v3;
  if (*((int *)v3 + 30) >= 1)
  {
    v9 = 0;
    while (1)
    {
      v10 = *((_QWORD *)v3 + 8);
      this = (google::protobuf::DescriptorBuilder *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)a3 + 72, v9);
      v11 = this;
      v12 = v10 + 80 * v9;
      v14 = *(_QWORD *)(v12 + 32);
      v13 = (_QWORD *)(v12 + 32);
      if (!v14)
        break;
      v15 = v10 + 80 * v9;
      v17 = *(_DWORD *)(v15 + 44);
      v16 = (int *)(v15 + 44);
      if (v17 >= 1)
        goto LABEL_13;
LABEL_8:
      ++v9;
      v3 = v120;
      if (v9 >= *((int *)v120 + 30))
        goto LABEL_23;
    }
    this = (google::protobuf::DescriptorBuilder *)google::protobuf::EnumOptions::default_instance(this);
    *v13 = this;
    v18 = v10 + 80 * v9;
    v19 = *(_DWORD *)(v18 + 44);
    v16 = (int *)(v18 + 44);
    if (v19 < 1)
      goto LABEL_8;
LABEL_13:
    v20 = 0;
    v21 = (uint64_t *)(v10 + 80 * v9 + 48);
    v22 = 32;
    while (1)
    {
      v23 = *v21;
      if ((v20 & 0x80000000) != 0)
      {
        v24 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v142, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
        v25 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) >= (0): ");
        google::protobuf::internal::LogFinisher::operator=((uint64_t)&v141, v25);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v142);
        if (*((_DWORD *)v11 + 8) <= (int)v20)
        {
LABEL_20:
          v26 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v142, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
          v27 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (index) < (current_size_): ");
          google::protobuf::internal::LogFinisher::operator=((uint64_t)&v141, v27);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v142);
        }
      }
      else if (*((_DWORD *)v11 + 8) <= (int)v20)
      {
        goto LABEL_20;
      }
      if (*(_QWORD *)(v23 + v22))
      {
        ++v20;
        v22 += 40;
        if (v20 >= *v16)
          goto LABEL_8;
      }
      else
      {
        this = (google::protobuf::DescriptorBuilder *)google::protobuf::EnumValueOptions::default_instance(this);
        *(_QWORD *)(v23 + v22) = this;
        ++v20;
        v22 += 40;
        if (v20 >= *v16)
          goto LABEL_8;
      }
    }
  }
LABEL_23:
  v28 = v3;
  if (*((int *)v3 + 26) >= 1)
  {
    v29 = 0;
    v30 = 0;
    do
    {
      v31 = *((_QWORD *)v28 + 5);
      v32 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a3 + 24, v30);
      google::protobuf::DescriptorBuilder::CrossLinkField((google::protobuf::FileDescriptorTables **)v119, (google::protobuf::FieldDescriptor *)(v31 + v29), v32);
      ++v30;
      v28 = v120;
      v29 += 152;
    }
    while (v30 < *((int *)v120 + 26));
  }
  if (*((int *)v28 + 32) >= 1)
  {
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = *((_QWORD *)v28 + 10);
      v36 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a3 + 120, v34);
      google::protobuf::DescriptorBuilder::CrossLinkField((google::protobuf::FileDescriptorTables **)v119, (google::protobuf::FieldDescriptor *)(v35 + v33), v36);
      ++v34;
      v28 = v120;
      v33 += 152;
    }
    while (v34 < *((int *)v120 + 32));
  }
  if (*((int *)v28 + 31) >= 1)
  {
    v37 = 0;
    v38 = 8;
    do
    {
      v39 = *((_QWORD *)v28 + 9);
      this = (google::protobuf::DescriptorBuilder *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ExtensionRange>::TypeHandler>((uint64_t)a3 + 96, v37);
      if (!*(_QWORD *)(v39 + v38))
      {
        this = (google::protobuf::DescriptorBuilder *)google::protobuf::ExtensionRangeOptions::default_instance(this);
        *(_QWORD *)(v39 + v38) = this;
      }
      ++v37;
      v28 = v120;
      v38 += 16;
    }
    while (v37 < *((int *)v120 + 31));
  }
  v40 = *((_DWORD *)v28 + 26);
  if (v40 >= 1)
  {
    v41 = 0;
    v42 = 0;
    v43 = (char *)a3 + 24;
    while (1)
    {
      v45 = *((_QWORD *)v28 + 5);
      v46 = *(int **)(v45 + v41 + 88);
      if (!v46)
        goto LABEL_38;
      if (v46[6] >= 1 && *(int **)(v45 + v41 - 64) != v46)
        break;
LABEL_37:
      v44 = *((_QWORD *)v28 + 6)
          + 48 * (int)(-1431655765 * (((unint64_t)v46 - *(_QWORD *)(*((_QWORD *)v46 + 2) + 48)) >> 4));
      ++*(_DWORD *)(v44 + 24);
LABEL_38:
      ++v42;
      v41 += 152;
      if (v42 >= v40)
        goto LABEL_77;
    }
    v47 = (const void **)*((_QWORD *)v28 + 1);
    v48 = *((char *)v47 + 23);
    if (v48 >= 0)
      v49 = *((unsigned __int8 *)v47 + 23);
    else
      v49 = (size_t)v47[1];
    v50 = v49 + 1;
    if (v49 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v118 = v45 + v41;
    if (v50 >= 0x17)
    {
      v52 = v43;
      v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17)
        v53 = v50 | 7;
      v54 = v53 + 1;
      p_dst = (std::string *)operator new(v53 + 1);
      __dst.__r_.__value_.__l.__size_ = v49 + 1;
      __dst.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      v43 = v52;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v49 + 1;
      if (!v49)
        goto LABEL_56;
    }
    if (v48 >= 0)
      v55 = v47;
    else
      v55 = *v47;
    memmove(p_dst, v55, v49);
LABEL_56:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v49) = 46;
    v56 = *(_QWORD *)(v118 - 152);
    v57 = *(char *)(v56 + 23);
    if (v57 >= 0)
      v58 = *(const std::string::value_type **)(v118 - 152);
    else
      v58 = *(const std::string::value_type **)v56;
    if (v57 >= 0)
      v59 = *(unsigned __int8 *)(v56 + 23);
    else
      v59 = *(_QWORD *)(v56 + 8);
    v60 = std::string::append(&__dst, v58, v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v124 = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)v123 = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v28 = v120;
    v62 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)v43, (int)v42 - 1);
    v63 = *(uint64_t ***)(*((_QWORD *)v120 + 5) + v41 - 152);
    v64 = *((char *)v63 + 23);
    v65 = v63[1];
    if (v64 < 0)
      v63 = (uint64_t **)*v63;
    *(_QWORD *)&v142 = v63;
    v66 = v64;
    if (v64 < 0)
      v66 = (int)v65;
    DWORD2(v142) = v66;
    v67 = *(_QWORD *)v46;
    v68 = *(char *)(*(_QWORD *)v46 + 23);
    v69 = *(_QWORD *)(*(_QWORD *)v46 + 8);
    if (v68 < 0)
      v67 = **(_QWORD **)v46;
    v141.__r_.__value_.__r.__words[0] = v67;
    v70 = v68;
    if (v68 < 0)
      v70 = v69;
    LODWORD(v141.__r_.__value_.__r.__words[1]) = v70;
    v139 = 0;
    v140 = -1;
    v137 = 0;
    v138 = -1;
    v135 = 0;
    v136 = -1;
    v133 = 0;
    v134 = -1;
    v131 = 0;
    v132 = -1;
    v129 = 0;
    v130 = -1;
    v127 = 0;
    v128 = -1;
    v125 = 0;
    v126 = -1;
    *((_QWORD *)&v116 + 1) = &v127;
    *(_QWORD *)&v116 = &v129;
    google::protobuf::strings::Substitute("Fields in the same oneof must be defined consecutively. \"$0\" cannot be defined before the completion of the \"$1\" oneof definition.", (uint64_t)&v142, (uint64_t)&v141, (uint64_t)&v139, (uint64_t)&v137, (uint64_t)&v135, (uint64_t)&v133, (uint64_t)&v131, &__p, v116, (uint64_t)&v125);
    google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, (const std::string::value_type *)v123, v62, 2, (const std::string::value_type *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v124) & 0x80000000) == 0)
      {
LABEL_72:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_76;
        goto LABEL_36;
      }
    }
    else if ((SHIBYTE(v124) & 0x80000000) == 0)
    {
      goto LABEL_72;
    }
    operator delete(v123[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_76:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_36:
    v40 = *((_DWORD *)v120 + 26);
    goto LABEL_37;
  }
LABEL_77:
  LODWORD(v71) = *((_DWORD *)v28 + 27);
  if ((int)v71 < 1)
    goto LABEL_116;
  v72 = 0;
  v73 = 0;
  do
  {
    v74 = *((_QWORD *)v28 + 6);
    v75 = v74 + v72;
    v76 = *(_DWORD *)(v74 + v72 + 24);
    if (v76)
    {
      v77 = *((_QWORD *)v119 + 1);
      v78 = 8 * v76;
      LODWORD(v142) = v78;
      if (!v78)
        goto LABEL_111;
      goto LABEL_82;
    }
    v83 = (const void **)*((_QWORD *)v28 + 1);
    v84 = *((char *)v83 + 23);
    if (v84 >= 0)
      v85 = *((unsigned __int8 *)v83 + 23);
    else
      v85 = (size_t)v83[1];
    v86 = v85 + 1;
    if (v85 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v86 >= 0x17)
    {
      v89 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v86 | 7) != 0x17)
        v89 = v86 | 7;
      v90 = v89 + 1;
      v87 = (char *)operator new(v89 + 1);
      v141.__r_.__value_.__l.__size_ = v85 + 1;
      v141.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
      v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    }
    else
    {
      memset(&v141, 0, sizeof(v141));
      v87 = (char *)&v141;
      *((_BYTE *)&v141.__r_.__value_.__s + 23) = v85 + 1;
      if (!v85)
        goto LABEL_102;
    }
    if (v84 >= 0)
      v91 = v83;
    else
      v91 = *v83;
    memmove(v87, v91, v85);
LABEL_102:
    *(_WORD *)&v87[v85] = 46;
    v92 = *(char *)(*(_QWORD *)v75 + 23);
    if (v92 >= 0)
      v93 = *(const std::string::value_type **)v75;
    else
      v93 = **(const std::string::value_type ***)v75;
    if (v92 >= 0)
      v94 = *(unsigned __int8 *)(*(_QWORD *)v75 + 23);
    else
      v94 = *(_QWORD *)(*(_QWORD *)v75 + 8);
    v95 = std::string::append(&v141, v93, v94);
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v143 = v95->__r_.__value_.__r.__words[2];
    v142 = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    v97 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::OneofDescriptorProto>::TypeHandler>((uint64_t)a3 + 144, v73);
    v28 = v120;
    google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, (const std::string::value_type *)&v142, v97, 0, "Oneof must have at least one field.");
    if (SHIBYTE(v143) < 0)
    {
      operator delete((void *)v142);
      if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_110;
    }
    else if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_110;
    }
    operator delete(v141.__r_.__value_.__l.__data_);
LABEL_110:
    v77 = *((_QWORD *)v119 + 1);
    v78 = 8 * *(_DWORD *)(v75 + 24);
    LODWORD(v142) = v78;
    if (!v78)
    {
LABEL_111:
      v88 = v74 + v72;
      *(_QWORD *)(v74 + v72 + 32) = 0;
      *(_DWORD *)(v75 + 24) = 0;
      if (*(_QWORD *)(v74 + v72 + 40))
        goto LABEL_79;
LABEL_112:
      this = (google::protobuf::DescriptorBuilder *)google::protobuf::OneofOptions::default_instance(this);
      *(_QWORD *)(v88 + 40) = this;
      v28 = v120;
      goto LABEL_79;
    }
LABEL_82:
    v79 = *(_QWORD **)(v77 + 192);
    if ((unint64_t)v79 >= *(_QWORD *)(v77 + 200))
    {
      this = (google::protobuf::DescriptorBuilder *)std::vector<std::vector<char>>::__emplace_back_slow_path<int &>((char **)(v77 + 184), (int *)&v142);
    }
    else
    {
      *v79 = 0;
      v79[1] = 0;
      v79[2] = 0;
      if (v78 < 0)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v80 = v78;
      v81 = (char *)operator new(v78);
      *v79 = v81;
      v82 = &v81[v80];
      v79[2] = &v81[v80];
      bzero(v81, v80);
      v79[1] = v82;
      this = (google::protobuf::DescriptorBuilder *)(v79 + 3);
      *(_QWORD *)(v77 + 192) = v79 + 3;
    }
    *(_QWORD *)(v77 + 192) = this;
    v28 = v120;
    v88 = v74 + v72;
    *(_QWORD *)(v74 + v72 + 32) = *((_QWORD *)this - 3);
    *(_DWORD *)(v75 + 24) = 0;
    if (!*(_QWORD *)(v74 + v72 + 40))
      goto LABEL_112;
LABEL_79:
    ++v73;
    v71 = *((int *)v28 + 27);
    v72 += 48;
  }
  while (v73 < v71);
  v40 = *((_DWORD *)v28 + 26);
LABEL_116:
  if (v40 >= 1)
  {
    v98 = 0;
    do
    {
      v99 = *((_QWORD *)v28 + 5) + v98;
      v100 = *(_QWORD *)(v99 + 88);
      if (v100)
      {
        v101 = *((_QWORD *)v28 + 6)
             + 48 * (int)(-1431655765 * ((unint64_t)(v100 - *(_QWORD *)(*(_QWORD *)(v100 + 16) + 48)) >> 4));
        v102 = *(int *)(v101 + 24);
        *(_DWORD *)(v99 + 72) = v102;
        v103 = *(_QWORD *)(v101 + 32);
        *(_DWORD *)(v101 + 24) = v102 + 1;
        *(_QWORD *)(v103 + 8 * v102) = v99;
      }
      v98 += 152;
    }
    while (152 * v40 != v98);
    v104 = 0;
    for (i = 0; i < v40; ++i)
    {
      v106 = *((_QWORD *)v28 + 5) + v104;
      if (*(_BYTE *)(v106 + 65))
      {
        v107 = *(_QWORD *)(v106 + 88);
        if (!v107 || *(_DWORD *)(v107 + 24) != 1 || !*(_BYTE *)(**(_QWORD **)(v107 + 32) + 65))
        {
          v108 = (const std::string::value_type *)*((_QWORD *)v28 + 1);
          v109 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a3 + 24, i);
          google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, v108, v109, 10, "Fields with proto3_optional set must be a member of a one-field oneof");
          v28 = v120;
          v40 = *((_DWORD *)v120 + 26);
        }
      }
      v104 += 152;
    }
    LODWORD(v71) = *((_DWORD *)v28 + 27);
  }
  if ((int)v71 >= 1)
  {
    v110 = 0;
    v111 = 0;
    v112 = -1;
    do
    {
      v113 = *((_QWORD *)v28 + 6) + v110;
      if (*(_DWORD *)(v113 + 24) == 1 && *(_BYTE *)(**(_QWORD **)(v113 + 32) + 65))
      {
        if (v112 == -1)
          v112 = v111;
      }
      else if (v112 != -1)
      {
        v114 = (const std::string::value_type *)*((_QWORD *)v28 + 1);
        v115 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::OneofDescriptorProto>::TypeHandler>((uint64_t)a3 + 144, v111);
        google::protobuf::DescriptorBuilder::AddError((uint64_t)v119, v114, v115, 10, "Synthetic oneofs must be after all other oneofs");
        v28 = v120;
        LODWORD(v71) = *((_DWORD *)v120 + 27);
      }
      ++v111;
      v110 += 48;
    }
    while (v111 < (int)v71);
    if (v112 != -1)
      LODWORD(v71) = v112;
  }
  *((_DWORD *)v28 + 28) = v71;
}

void sub_22DC4FDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a28 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::CrossLinkField(google::protobuf::FileDescriptorTables **this, google::protobuf::FieldDescriptor *a2, const google::protobuf::FieldDescriptorProto *a3)
{
  std::string *v6;
  int v7;
  uint64_t v8;
  char *v9;
  google::protobuf *v10;
  uint64_t v11;
  _DWORD *v12;
  const std::string::value_type *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const std::string::value_type *v27;
  std::string::size_type v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  google::protobuf::FileDescriptorTables *v40;
  unint64_t v41;
  google::protobuf *v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  int v47;
  int v48;
  _BOOL4 v49;
  int8x8_t *v50;
  uint64_t v51;
  int8x8_t v52;
  int v53;
  int8x8_t v54;
  unint64_t v55;
  uint8x8_t v56;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  std::string *v60;
  int Symbol;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v71;
  uint64_t v73;
  std::string::size_type *v74;
  __int128 *v75;
  __int128 v76;
  const std::string::value_type *v77;
  __int128 *v78;
  __int128 v79;
  int v80;
  std::string *p_p;
  std::string::size_type v82;
  int v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  __int128 *v88;
  __int128 v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  const std::string::value_type *v97;
  std::string *v98;
  __int128 v99;
  const std::string::value_type *v100;
  std::string *v101;
  __int128 v102;
  const std::string::value_type *v103;
  std::string *v104;
  __int128 v105;
  void *v106;
  google::protobuf::FileDescriptorTables *v107;
  _QWORD *v108;
  _QWORD *v109;
  char *v110;
  google::protobuf::FileDescriptorTables *v111;
  std::string *v112;
  std::string::size_type v113;
  std::string::size_type *v114;
  char *v115;
  std::string::size_type v116;
  google::protobuf::FileDescriptorTables *v117;
  __int128 *v118;
  std::string *v119;
  std::string::size_type v120;
  __int128 v121;
  int v122;
  std::string *v123;
  std::string::size_type v124;
  int v125;
  uint64_t v126;
  int v127;
  std::string::size_type *v128;
  char *v129;
  int v130;
  std::string *v131;
  std::string::size_type v132;
  int v133;
  uint64_t v134;
  int v135;
  std::string::size_type v136;
  int v137;
  uint64_t v138;
  int v139;
  std::string *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const std::string::value_type *v145;
  std::string *v146;
  __int128 v147;
  uint64_t v148;
  int v149;
  const std::string::value_type *v150;
  std::string::size_type v151;
  std::string *v152;
  __int128 v153;
  std::string *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  std::string v160;
  std::string __p;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  std::string v174;
  std::string v175;
  std::string v176;
  std::string v177;
  uint64_t v178;

  v178 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a2 + 15))
  {
    google::protobuf::FileDescriptorTables::AddFieldByStylizedNames(this[11], a2);
    if ((*((_BYTE *)a3 + 16) & 2) == 0)
      goto LABEL_43;
  }
  else
  {
    *((_QWORD *)a2 + 15) = google::protobuf::FieldOptions::default_instance((google::protobuf::FieldOptions *)this);
    google::protobuf::FileDescriptorTables::AddFieldByStylizedNames(this[11], a2);
    if ((*((_BYTE *)a3 + 16) & 2) == 0)
      goto LABEL_43;
  }
  v6 = (std::string *)*((_QWORD *)a3 + 4);
  v7 = google::protobuf::DescriptorBuilder::LookupSymbolNoPlaceholder((uint64_t)this, v6, *((_QWORD *)a2 + 1), 0, 1);
  if (!v7 && *((_BYTE *)*this + 42))
    v7 = google::protobuf::DescriptorPool::NewPlaceholderWithMutexHeld((uint64_t)*this, (uint64_t)v6, 2);
  if (v7 != 1)
  {
    if (!v7)
    {
      google::protobuf::DescriptorBuilder::AddNotDefinedError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 3, *((_QWORD *)a3 + 4));
      return;
    }
    v13 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
    std::operator+<char>();
    v14 = std::string::append(&v176, "\" is not a message type.");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v177.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v13, (uint64_t)a3, 3, (const std::string::value_type *)&v177);
    goto LABEL_171;
  }
  *((_QWORD *)a2 + 10) = v8;
  v10 = (google::protobuf *)*((unsigned int *)a2 + 17);
  v11 = *(unsigned int *)(v8 + 124);
  if ((int)v11 < 1)
  {
LABEL_18:
    if (*((_BYTE *)*this + 42))
    {
      v16 = (uint64_t *)*((_QWORD *)a3 + 4);
      v17 = *((char *)v16 + 23);
      if ((v17 & 0x80000000) == 0)
      {
        if (v17 != 33)
          goto LABEL_37;
LABEL_24:
        v18 = (uint64_t *)*v16;
        v19 = v16[1];
        v20 = v16[2];
        v21 = v16[3];
        v22 = *((unsigned __int8 *)v16 + 32);
        if (v18 == (uint64_t *)0x702E656C676F6F67
          && v19 == 0x2E6675626F746F72
          && v20 == 0x4D2E656764697262
          && v21 == 0x6553656761737365
          && v22 == 116)
        {
          goto LABEL_43;
        }
        goto LABEL_37;
      }
      if (v16[1] == 33)
      {
        v16 = (uint64_t *)*v16;
        goto LABEL_24;
      }
    }
LABEL_37:
    v27 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
    v28 = *(_QWORD *)(v8 + 8);
    v29 = *(char *)(v28 + 23);
    v30 = *(_QWORD *)(v28 + 8);
    if (v29 < 0)
      v28 = *(_QWORD *)v28;
    v177.__r_.__value_.__r.__words[0] = v28;
    v31 = v29;
    if (v29 < 0)
      v31 = v30;
    LODWORD(v177.__r_.__value_.__r.__words[1]) = v31;
    v176.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer(v10, &v176.__r_.__value_.__s.__data_[12], v9);
    LODWORD(v176.__r_.__value_.__r.__words[1]) = strlen(v176.__r_.__value_.__l.__data_);
    v175.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v175.__r_.__value_.__r.__words[1]) = -1;
    v174.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v174.__r_.__value_.__r.__words[1]) = -1;
    v172 = 0;
    v173 = -1;
    v170 = 0;
    v171 = -1;
    v168 = 0;
    v169 = -1;
    v166 = 0;
    v167 = -1;
    v164 = 0;
    v165 = -1;
    v162 = 0;
    v163 = -1;
    *(_QWORD *)&v156 = &v166;
    *((_QWORD *)&v156 + 1) = &v164;
    google::protobuf::strings::Substitute("\"$0\" does not declare $1 as an extension number.", (uint64_t)&v177, (uint64_t)&v176, (uint64_t)&v175, (uint64_t)&v174, (uint64_t)&v172, (uint64_t)&v170, (uint64_t)&v168, &__p, v156, (uint64_t)&v162);
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v27, (uint64_t)a3, 1, (const std::string::value_type *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_43;
  }
  v12 = (_DWORD *)(*(_QWORD *)(v8 + 72) + 4);
  while (*(v12 - 1) > (int)v10 || *v12 <= (int)v10)
  {
    v12 += 4;
    if (!--v11)
      goto LABEL_18;
  }
LABEL_43:
  if (*((_QWORD *)a2 + 11) && *((_DWORD *)a2 + 15) != 1)
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 0, "Fields of oneofs must themselves have label LABEL_OPTIONAL.");
  v32 = *((_DWORD *)a3 + 4);
  if ((v32 & 4) == 0)
  {
    v33 = (unint64_t *)*((_QWORD *)a2 + 6);
    if (v33)
    {
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v34 = atomic_load(v33);
      if (v34 != -1)
      {
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
        v177.__r_.__value_.__l.__size_ = (std::string::size_type)&v174;
        v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
        std::__call_once(v33, &v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    v35 = *((_DWORD *)a2 + 14);
    if ((v35 & 0xFFFFFFFE) == 0xA)
      goto LABEL_56;
    v36 = (unint64_t *)*((_QWORD *)a2 + 6);
    if (v36)
    {
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v37 = atomic_load(v36);
      if (v37 != -1)
      {
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
        v177.__r_.__value_.__l.__size_ = (std::string::size_type)&v174;
        v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
        std::__call_once(v36, &v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
      v35 = *((_DWORD *)a2 + 14);
    }
    if (v35 == 14)
LABEL_56:
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, "Field with message or enum type missing type_name.");
    goto LABEL_57;
  }
  v47 = (v32 >> 3) & 1;
  if (*((_DWORD *)a3 + 22) == 14)
    v48 = 1;
  else
    v48 = v47;
  if (*((_BYTE *)*this + 43))
  {
    v49 = 0;
  }
  else
  {
    v58 = &google::protobuf::_FieldOptions_default_instance_;
    if (*((_QWORD *)a3 + 8))
      v58 = (uint64_t *)*((_QWORD *)a3 + 8);
    v49 = *((unsigned __int8 *)v58 + 79) != 0;
  }
  if (*((_BYTE *)*this + 41))
    v59 = v49;
  else
    v59 = 1;
  v60 = (std::string *)*((_QWORD *)a3 + 5);
  Symbol = google::protobuf::DescriptorBuilder::LookupSymbolNoPlaceholder((uint64_t)this, v60, *((_QWORD *)a2 + 1), 1, v59);
  v63 = v62;
  if (!Symbol && *((_BYTE *)*this + 42))
  {
    Symbol = google::protobuf::DescriptorPool::NewPlaceholderWithMutexHeld((uint64_t)*this, (uint64_t)v60, v48);
    v63 = v64;
  }
  if (Symbol)
  {
LABEL_88:
    if ((*((_BYTE *)a3 + 17) & 4) == 0)
    {
      if (Symbol == 1)
      {
        v65 = 11;
      }
      else
      {
        if (Symbol != 4)
        {
          v100 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
          std::operator+<char>();
          v101 = std::string::append(&v176, "\" is not a type.");
          v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          v177.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v100, (uint64_t)a3, 2, (const std::string::value_type *)&v177);
          goto LABEL_171;
        }
        v65 = 14;
      }
      *((_DWORD *)a2 + 14) = v65;
    }
    v90 = (unint64_t *)*((_QWORD *)a2 + 6);
    if (v90)
    {
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v91 = atomic_load(v90);
      if (v91 != -1)
      {
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
        v177.__r_.__value_.__l.__size_ = (std::string::size_type)&v174;
        v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
        std::__call_once(v90, &v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    v92 = *((_DWORD *)a2 + 14);
    if ((v92 & 0xFFFFFFFE) == 0xA)
    {
      if (Symbol == 1)
      {
        *((_QWORD *)a2 + 13) = v63;
        if (*((_BYTE *)a2 + 64))
          google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 4, "Messages can't have default values.");
        goto LABEL_57;
      }
      v97 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      std::operator+<char>();
      v98 = std::string::append(&v176, "\" is not a message type.");
      v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
      v177.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v99;
      v98->__r_.__value_.__l.__size_ = 0;
      v98->__r_.__value_.__r.__words[2] = 0;
      v98->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v97, (uint64_t)a3, 2, (const std::string::value_type *)&v177);
LABEL_171:
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v177.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
      }
      else if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        return;
      }
      v106 = (void *)v176.__r_.__value_.__r.__words[0];
      goto LABEL_230;
    }
    v93 = (unint64_t *)*((_QWORD *)a2 + 6);
    if (v93)
    {
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v94 = atomic_load(v93);
      if (v94 != -1)
      {
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
        v177.__r_.__value_.__l.__size_ = (std::string::size_type)&v174;
        v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
        std::__call_once(v93, &v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
      v92 = *((_DWORD *)a2 + 14);
    }
    if (v92 != 14)
    {
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, "Field with primitive type has type_name.");
      goto LABEL_57;
    }
    if (Symbol != 4)
    {
      v103 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      std::operator+<char>();
      v104 = std::string::append(&v176, "\" is not an enum type.");
      v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
      v177.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v105;
      v104->__r_.__value_.__l.__size_ = 0;
      v104->__r_.__value_.__r.__words[2] = 0;
      v104->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v103, (uint64_t)a3, 2, (const std::string::value_type *)&v177);
      goto LABEL_171;
    }
    *((_QWORD *)a2 + 14) = v63;
    v95 = (unint64_t *)*((_QWORD *)a2 + 6);
    if (v95)
    {
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v96 = atomic_load(v95);
      if (v96 != -1)
      {
        v177.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v177.__r_.__value_.__l.__size_ = (std::string::size_type)&v175;
        v176.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
        std::__call_once(v95, &v176, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
      v63 = *((_QWORD *)a2 + 14);
    }
    if (*(_BYTE *)(v63 + 40))
    {
      *((_BYTE *)a2 + 64) = 0;
      goto LABEL_165;
    }
    if (!*((_BYTE *)a2 + 64))
    {
LABEL_165:
      if (*(int *)(google::protobuf::FieldDescriptor::enum_type(a2) + 44) >= 1)
        *((_QWORD *)a2 + 18) = *(_QWORD *)(google::protobuf::FieldDescriptor::enum_type(a2) + 48);
LABEL_57:
      if ((google::protobuf::FileDescriptorTables::AddFieldByNumber(this[11], a2) & 1) == 0)
      {
        v50 = (int8x8_t *)this[11];
        v51 = *((_QWORD *)a2 + 10);
        v52 = v50[20];
        if (!*(_QWORD *)&v52)
          goto LABEL_121;
        v53 = *((_DWORD *)a2 + 17);
        v54 = v50[19];
        v55 = (16777619 * v53) ^ (16777499 * v51);
        v56 = (uint8x8_t)vcnt_s8(v52);
        v56.i16[0] = vaddlv_u8(v56);
        if (v56.u32[0] > 1uLL)
        {
          v57 = (16777619 * v53) ^ (16777499 * v51);
          if (v55 >= *(_QWORD *)&v52)
            v57 = v55 % *(_QWORD *)&v52;
        }
        else
        {
          v57 = (*(_QWORD *)&v52 - 1) & v55;
        }
        v67 = *(uint64_t ***)(*(_QWORD *)&v54 + 8 * v57);
        if (!v67 || (v68 = *v67) == 0)
        {
LABEL_121:
          v74 = 0;
          if (!v51)
            goto LABEL_191;
          goto LABEL_122;
        }
        if (v56.u32[0] < 2uLL)
        {
          v69 = *(_QWORD *)&v52 - 1;
          while (1)
          {
            v73 = v68[1];
            if (v55 == v73)
            {
              if (v68[2] == v51 && *((_DWORD *)v68 + 6) == v53)
                goto LABEL_190;
            }
            else if ((v73 & v69) != v57)
            {
              goto LABEL_121;
            }
            v68 = (uint64_t *)*v68;
            if (!v68)
              goto LABEL_121;
          }
        }
        while (1)
        {
          v71 = v68[1];
          if (v55 == v71)
          {
            if (v68[2] == v51 && *((_DWORD *)v68 + 6) == v53)
            {
LABEL_190:
              v74 = (std::string::size_type *)v68[4];
              if (!v51)
              {
LABEL_191:
                *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
                strcpy((char *)&__p, "unknown");
                v77 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
                if (!*((_BYTE *)a2 + 67))
                  goto LABEL_192;
LABEL_128:
                v177.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer((google::protobuf *)*((unsigned int *)a2+ 17), &v177.__r_.__value_.__s.__data_[12], v38);
                LODWORD(v177.__r_.__value_.__r.__words[1]) = strlen(v177.__r_.__value_.__l.__data_);
                v80 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                v176.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v80 = __p.__r_.__value_.__r.__words[1];
                LODWORD(v176.__r_.__value_.__r.__words[1]) = v80;
                v82 = v74[1];
                v83 = *(char *)(v82 + 23);
                v84 = *(_QWORD *)(v82 + 8);
                if (v83 < 0)
                  v82 = *(_QWORD *)v82;
                v175.__r_.__value_.__r.__words[0] = v82;
                v85 = v83;
                if (v83 < 0)
                  v85 = v84;
                LODWORD(v175.__r_.__value_.__r.__words[1]) = v85;
                v174.__r_.__value_.__r.__words[0] = 0;
                LODWORD(v174.__r_.__value_.__r.__words[1]) = -1;
                v172 = 0;
                v173 = -1;
                v170 = 0;
                v171 = -1;
                v168 = 0;
                v169 = -1;
                v166 = 0;
                v167 = -1;
                v164 = 0;
                v165 = -1;
                v162 = 0;
                v163 = -1;
                *(_QWORD *)&v157 = &v166;
                *((_QWORD *)&v157 + 1) = &v164;
                google::protobuf::strings::Substitute("Extension number $0 has already been used in \"$1\" by extension \"$2\".", (uint64_t)&v177, (uint64_t)&v176, (uint64_t)&v175, (uint64_t)&v174, (uint64_t)&v172, (uint64_t)&v170, (uint64_t)&v168, &v160, v157, (uint64_t)&v162);
                google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v77, (uint64_t)a3, 1, (const std::string::value_type *)&v160);
                goto LABEL_225;
              }
LABEL_122:
              v75 = *(__int128 **)(v51 + 8);
              if (*((char *)v75 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v75, *((_QWORD *)v75 + 1));
                v77 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
                if (!*((_BYTE *)a2 + 67))
                  goto LABEL_192;
                goto LABEL_128;
              }
              v76 = *v75;
              __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v75 + 2);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v76;
              v77 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
              if (*((_BYTE *)a2 + 67))
                goto LABEL_128;
LABEL_192:
              v177.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer((google::protobuf *)*((unsigned int *)a2 + 17), &v177.__r_.__value_.__s.__data_[12], v38);
              LODWORD(v177.__r_.__value_.__r.__words[1]) = strlen(v177.__r_.__value_.__l.__data_);
              v122 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              v123 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v123 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v122 = __p.__r_.__value_.__r.__words[1];
              LODWORD(v176.__r_.__value_.__r.__words[1]) = v122;
              v124 = *v74;
              v125 = *(char *)(*v74 + 23);
              v126 = *(_QWORD *)(*v74 + 8);
              if (v125 < 0)
                v124 = *(_QWORD *)*v74;
              v175.__r_.__value_.__r.__words[0] = v124;
              v127 = v125;
              if (v125 < 0)
                v127 = v126;
              LODWORD(v175.__r_.__value_.__r.__words[1]) = v127;
              v174.__r_.__value_.__r.__words[0] = 0;
              LODWORD(v174.__r_.__value_.__r.__words[1]) = -1;
              v172 = 0;
              v173 = -1;
              v170 = 0;
              v171 = -1;
              v168 = 0;
              v169 = -1;
              v166 = 0;
              v167 = -1;
              v164 = 0;
              v165 = -1;
              v162 = 0;
              v163 = -1;
              *(_QWORD *)&v158 = &v166;
              *((_QWORD *)&v158 + 1) = &v164;
              google::protobuf::strings::Substitute("Field number $0 has already been used in \"$1\" by field \"$2\".", (uint64_t)&v177, (uint64_t)&v176, (uint64_t)&v175, (uint64_t)&v174, (uint64_t)&v172, (uint64_t)&v170, (uint64_t)&v168, &v160, v158, (uint64_t)&v162);
              google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v77, (uint64_t)a3, 1, (const std::string::value_type *)&v160);
LABEL_225:
              if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v160.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_229;
              }
              else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_229:
                v106 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_230:
                operator delete(v106);
              }
              return;
            }
          }
          else
          {
            if (v71 >= *(_QWORD *)&v52)
              v71 %= *(_QWORD *)&v52;
            if (v71 != v57)
              goto LABEL_121;
          }
          v68 = (uint64_t *)*v68;
          if (!v68)
            goto LABEL_121;
        }
      }
      if (!*((_BYTE *)a2 + 67) || (google::protobuf::DescriptorPool::Tables::AddExtension(this[1], a2) & 1) != 0)
        return;
      v40 = this[1];
      v41 = *((_QWORD *)a2 + 10);
      v42 = (google::protobuf *)*((unsigned int *)a2 + 17);
      v43 = (char *)*((_QWORD *)v40 + 49);
      if (!v43)
        goto LABEL_141;
      v44 = (char *)v40 + 392;
      v45 = (char *)v40 + 392;
      do
      {
        v46 = *((_QWORD *)v43 + 4);
        if (v46 < v41)
        {
          v43 += 8;
        }
        else if (v46 <= v41)
        {
          if (*((_DWORD *)v43 + 10) < (int)v42)
            v43 += 8;
          else
            v45 = v43;
        }
        else
        {
          v45 = v43;
        }
        v43 = *(char **)v43;
      }
      while (v43);
      if (v45 != v44 && (v86 = *((_QWORD *)v45 + 4), v86 <= v41) && (v86 < v41 || *((_DWORD *)v45 + 10) <= (int)v42))
      {
        v87 = *((_QWORD *)v45 + 6);
        if (v41)
        {
LABEL_142:
          v88 = *(__int128 **)(v41 + 8);
          if (*((char *)v88 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v88, *((_QWORD *)v88 + 1));
            v42 = (google::protobuf *)*((unsigned int *)a2 + 17);
          }
          else
          {
            v89 = *v88;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v88 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v89;
          }
          goto LABEL_212;
        }
      }
      else
      {
LABEL_141:
        v87 = 0;
        if (v41)
          goto LABEL_142;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "unknown");
LABEL_212:
      v177.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FastInt32ToBuffer(v42, &v177.__r_.__value_.__s.__data_[12], v39);
      LODWORD(v177.__r_.__value_.__r.__words[1]) = strlen(v177.__r_.__value_.__l.__data_);
      v130 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v131 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v131 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v130 = __p.__r_.__value_.__r.__words[1];
      LODWORD(v176.__r_.__value_.__r.__words[1]) = v130;
      v132 = *(_QWORD *)(v87 + 8);
      v133 = *(char *)(v132 + 23);
      v134 = *(_QWORD *)(v132 + 8);
      if (v133 < 0)
        v132 = *(_QWORD *)v132;
      v175.__r_.__value_.__r.__words[0] = v132;
      v135 = v133;
      if (v133 < 0)
        v135 = v134;
      LODWORD(v175.__r_.__value_.__r.__words[1]) = v135;
      v136 = **(_QWORD **)(v87 + 40);
      v137 = *(char *)(v136 + 23);
      v138 = *(_QWORD *)(v136 + 8);
      if (v137 < 0)
        v136 = *(_QWORD *)v136;
      v174.__r_.__value_.__r.__words[0] = v136;
      v139 = v137;
      if (v137 < 0)
        v139 = v138;
      LODWORD(v174.__r_.__value_.__r.__words[1]) = v139;
      v172 = 0;
      v173 = -1;
      v170 = 0;
      v171 = -1;
      v168 = 0;
      v169 = -1;
      v166 = 0;
      v167 = -1;
      v164 = 0;
      v165 = -1;
      v162 = 0;
      v163 = -1;
      *(_QWORD *)&v159 = &v166;
      *((_QWORD *)&v159 + 1) = &v164;
      google::protobuf::strings::Substitute("Extension number $0 has already been used in \"$1\" by extension \"$2\" defined in $3.", (uint64_t)&v177, (uint64_t)&v176, (uint64_t)&v175, (uint64_t)&v174, (uint64_t)&v172, (uint64_t)&v170, (uint64_t)&v168, &v160, v159, (uint64_t)&v162);
      google::protobuf::DescriptorBuilder::AddWarning((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 1, (const std::string::value_type *)&v160);
      goto LABEL_225;
    }
    if (!google::protobuf::io::Tokenizer::IsIdentifier(*((const std::string **)a3 + 6)))
    {
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 4, "Default value for an enum field must be an identifier.");
      goto LABEL_57;
    }
    v140 = (std::string *)*((_QWORD *)a3 + 6);
    v141 = google::protobuf::FieldDescriptor::enum_type(a2);
    if (google::protobuf::DescriptorBuilder::LookupSymbolNoPlaceholder((uint64_t)this, v140, *(_QWORD *)(v141 + 8), 0, 1) == 5)
    {
      v143 = v142;
      v144 = *(_QWORD *)(v142 + 24);
      if (v144 == google::protobuf::FieldDescriptor::enum_type(a2))
      {
        *((_QWORD *)a2 + 18) = v143;
        goto LABEL_57;
      }
    }
    v145 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
    google::protobuf::FieldDescriptor::enum_type(a2);
    std::operator+<char>();
    v146 = std::string::append(&v174, "\" has no value named \"");
    v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
    v175.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v147;
    v146->__r_.__value_.__l.__size_ = 0;
    v146->__r_.__value_.__r.__words[2] = 0;
    v146->__r_.__value_.__r.__words[0] = 0;
    v148 = *((_QWORD *)a3 + 6);
    v149 = *(char *)(v148 + 23);
    if (v149 >= 0)
      v150 = (const std::string::value_type *)*((_QWORD *)a3 + 6);
    else
      v150 = *(const std::string::value_type **)v148;
    if (v149 >= 0)
      v151 = *(unsigned __int8 *)(v148 + 23);
    else
      v151 = *(_QWORD *)(v148 + 8);
    v152 = std::string::append(&v175, v150, v151);
    v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
    v176.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v153;
    v152->__r_.__value_.__l.__size_ = 0;
    v152->__r_.__value_.__r.__words[2] = 0;
    v152->__r_.__value_.__r.__words[0] = 0;
    v154 = std::string::append(&v176, "\".");
    v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
    v177.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v155;
    v154->__r_.__value_.__l.__size_ = 0;
    v154->__r_.__value_.__r.__words[2] = 0;
    v154->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v145, (uint64_t)a3, 4, (const std::string::value_type *)&v177);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v177.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_244:
        if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_245;
        goto LABEL_250;
      }
    }
    else if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_244;
    }
    operator delete(v176.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_245:
      if ((SHIBYTE(v174.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_57;
LABEL_251:
      operator delete(v174.__r_.__value_.__l.__data_);
      goto LABEL_57;
    }
LABEL_250:
    operator delete(v175.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v174.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_251;
  }
  if ((v59 & 1) != 0)
  {
    if (v49)
    {
      *((_BYTE *)&v177.__r_.__value_.__s + 23) = 21;
      strcpy((char *)&v177, "google.protobuf.Empty");
      Symbol = google::protobuf::DescriptorBuilder::FindSymbol((uint64_t)this, (uint64_t)&v177, 1);
      v63 = v66;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v177.__r_.__value_.__l.__data_);
    }
    if (!Symbol)
    {
      google::protobuf::DescriptorBuilder::AddNotDefinedError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, *((_QWORD *)a3 + 5));
      return;
    }
    goto LABEL_88;
  }
  v78 = (__int128 *)*((_QWORD *)a3 + 5);
  if (*((char *)v78 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v177, *(const std::string::value_type **)v78, *((_QWORD *)v78 + 1));
  }
  else
  {
    v79 = *v78;
    v177.__r_.__value_.__r.__words[2] = *((_QWORD *)v78 + 2);
    *(_OWORD *)&v177.__r_.__value_.__l.__data_ = v79;
  }
  v107 = this[1];
  v108 = (_QWORD *)operator new();
  *v108 = 0;
  v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  v109 = (_QWORD *)*((_QWORD *)v107 + 33);
  if ((unint64_t)v109 >= *((_QWORD *)v107 + 34))
  {
    v110 = std::vector<std::unique_ptr<std::once_flag>>::__emplace_back_slow_path<std::once_flag*&>((char **)v107 + 32, &v176);
    v108 = (_QWORD *)v176.__r_.__value_.__r.__words[0];
  }
  else
  {
    *v109 = v108;
    v110 = (char *)(v109 + 1);
  }
  *((_QWORD *)v107 + 33) = v110;
  *((_QWORD *)a2 + 6) = v108;
  v111 = this[1];
  v112 = (std::string *)operator new();
  v113 = (std::string::size_type)v112;
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v112, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
  else
    *v112 = v177;
  v176.__r_.__value_.__r.__words[0] = v113;
  v114 = (std::string::size_type *)*((_QWORD *)v111 + 27);
  if ((unint64_t)v114 >= *((_QWORD *)v111 + 28))
  {
    v115 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)v111 + 26, &v176);
    v116 = v176.__r_.__value_.__r.__words[0];
    *((_QWORD *)v111 + 27) = v115;
    *((_QWORD *)a2 + 16) = v116;
    if ((*((_BYTE *)a3 + 16) & 8) == 0)
      goto LABEL_206;
  }
  else
  {
    *v114 = v113;
    *((_QWORD *)v111 + 27) = v114 + 1;
    *((_QWORD *)a2 + 16) = v113;
    if ((*((_BYTE *)a3 + 16) & 8) == 0)
      goto LABEL_206;
  }
  v117 = this[1];
  v118 = (__int128 *)*((_QWORD *)a3 + 6);
  v119 = (std::string *)operator new();
  v120 = (std::string::size_type)v119;
  if (*((char *)v118 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)v118, *((_QWORD *)v118 + 1));
  }
  else
  {
    v121 = *v118;
    v119->__r_.__value_.__r.__words[2] = *((_QWORD *)v118 + 2);
    *(_OWORD *)&v119->__r_.__value_.__l.__data_ = v121;
  }
  v176.__r_.__value_.__r.__words[0] = v120;
  v128 = (std::string::size_type *)*((_QWORD *)v117 + 27);
  if ((unint64_t)v128 >= *((_QWORD *)v117 + 28))
  {
    v129 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)v117 + 26, &v176);
    v120 = v176.__r_.__value_.__r.__words[0];
  }
  else
  {
    *v128 = v120;
    v129 = (char *)(v128 + 1);
  }
  *((_QWORD *)v117 + 27) = v129;
  *((_QWORD *)a2 + 17) = v120;
LABEL_206:
  google::protobuf::FileDescriptorTables::AddFieldByNumber(this[11], a2);
  if (*((_BYTE *)a2 + 67))
    google::protobuf::DescriptorPool::Tables::AddExtension(this[1], a2);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
  {
    v106 = (void *)v177.__r_.__value_.__r.__words[0];
    goto LABEL_230;
  }
}

void sub_22DC5108C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  if (*(char *)(v60 - 137) < 0)
  {
    operator delete(*(void **)(v60 - 160));
    if (*(char *)(v60 - 185) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v60 - 208));
      if (*(char *)(v60 - 233) < 0)
      {
LABEL_8:
        operator delete(*(void **)(v60 - 256));
        if ((a60 & 0x80000000) == 0)
LABEL_12:
          _Unwind_Resume(a1);
LABEL_11:
        operator delete(__p);
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((a60 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (*(char *)(v60 - 185) < 0)
  {
    goto LABEL_5;
  }
  if (*(char *)(v60 - 233) < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void google::protobuf::DescriptorBuilder::CrossLinkMethod(google::protobuf::DescriptorBuilder *this, google::protobuf::MethodDescriptor *a2, const google::protobuf::MethodDescriptorProto *a3)
{
  std::string *v6;
  int v7;
  const google::protobuf::Descriptor *v8;
  const std::string::value_type *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  int v13;
  const google::protobuf::Descriptor *v14;
  const std::string::value_type *v15;
  std::string *v16;
  __int128 v17;
  std::string v18;
  void *__p[2];
  std::string::size_type v20;

  if (!*((_QWORD *)a2 + 11))
    *((_QWORD *)a2 + 11) = google::protobuf::MethodOptions::default_instance(this);
  v6 = (std::string *)*((_QWORD *)a3 + 4);
  v7 = google::protobuf::DescriptorBuilder::LookupSymbolNoPlaceholder((uint64_t)this, v6, *((_QWORD *)a2 + 1), 0, *(_BYTE *)(*(_QWORD *)this + 41) == 0);
  if (!v7 && *(_BYTE *)(*(_QWORD *)this + 42))
    v7 = google::protobuf::DescriptorPool::NewPlaceholderWithMutexHeld(*(_QWORD *)this, (uint64_t)v6, 0);
  if (v7 == 1)
  {
    google::protobuf::internal::LazyDescriptor::Set((google::protobuf::MethodDescriptor *)((char *)a2 + 24), v8);
  }
  else
  {
    if (v7)
    {
      v9 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      std::operator+<char>();
      v10 = std::string::append(&v18, "\" is not a message type.");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v20 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v9, (uint64_t)a3, 5, (const std::string::value_type *)__p);
      if (SHIBYTE(v20) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_17;
      }
      else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_17;
      }
      operator delete(v18.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
    if (*(_BYTE *)(*(_QWORD *)this + 41))
      google::protobuf::internal::LazyDescriptor::SetLazy((_QWORD *)a2 + 3, *((_QWORD *)a3 + 4), *((_QWORD *)this + 10));
    else
      google::protobuf::DescriptorBuilder::AddNotDefinedError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 5, *((_QWORD *)a3 + 4));
  }
LABEL_17:
  v12 = (std::string *)*((_QWORD *)a3 + 5);
  v13 = google::protobuf::DescriptorBuilder::LookupSymbolNoPlaceholder((uint64_t)this, v12, *((_QWORD *)a2 + 1), 0, *(_BYTE *)(*(_QWORD *)this + 41) == 0);
  if (!v13 && *(_BYTE *)(*(_QWORD *)this + 42))
    v13 = google::protobuf::DescriptorPool::NewPlaceholderWithMutexHeld(*(_QWORD *)this, (uint64_t)v12, 0);
  if (v13 == 1)
  {
    google::protobuf::internal::LazyDescriptor::Set((google::protobuf::MethodDescriptor *)((char *)a2 + 56), v14);
    return;
  }
  if (v13)
  {
    v15 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
    std::operator+<char>();
    v16 = std::string::append(&v18, "\" is not a message type.");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v20 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v15, (uint64_t)a3, 6, (const std::string::value_type *)__p);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
    return;
  }
  if (*(_BYTE *)(*(_QWORD *)this + 41))
    google::protobuf::internal::LazyDescriptor::SetLazy((_QWORD *)a2 + 7, *((_QWORD *)a3 + 5), *((_QWORD *)this + 10));
  else
    google::protobuf::DescriptorBuilder::AddNotDefinedError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 6, *((_QWORD *)a3 + 5));
}

void sub_22DC514D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *google::protobuf::internal::LazyDescriptor::SetLazy(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  std::string::size_type *v17;
  char *v18;
  uint64_t v19;
  _QWORD *result;
  _QWORD *v21;
  char *v22;
  char v23;
  std::string v24[2];

  if (*a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7416);
    v6 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: !descriptor_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  if (a1[3])
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7417);
    v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: !file_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  if (a1[1])
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7418);
    v8 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: !name_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, v8);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  if (a1[2])
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7419);
    v9 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: !once_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, v9);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  if (a3)
  {
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
      if (*(_BYTE *)(v10 + 41))
        goto LABEL_12;
LABEL_15:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7421);
      v12 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: file->pool_->lazily_build_dependencies_: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, v12);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
      if (!*(_BYTE *)(a3 + 65))
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7420);
  v11 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: file && file->pool_: ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, v11);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(*(_QWORD *)(a3 + 16) + 41))
    goto LABEL_15;
LABEL_12:
  if (*(_BYTE *)(a3 + 65))
  {
LABEL_16:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7422);
    v13 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: !file->finished_building_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, v13);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
LABEL_17:
  a1[3] = a3;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 32);
  v15 = (std::string *)operator new();
  v16 = (std::string::size_type)v15;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v24[0].__r_.__value_.__r.__words[0] = v16;
  v17 = *(std::string::size_type **)(v14 + 216);
  if ((unint64_t)v17 >= *(_QWORD *)(v14 + 224))
  {
    v18 = std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>((char **)(v14 + 208), v24);
    v16 = v24[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *v17 = v16;
    v18 = (char *)(v17 + 1);
  }
  *(_QWORD *)(v14 + 216) = v18;
  a1[1] = v16;
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 32);
  result = (_QWORD *)operator new();
  *result = 0;
  v24[0].__r_.__value_.__r.__words[0] = (std::string::size_type)result;
  v21 = *(_QWORD **)(v19 + 264);
  if ((unint64_t)v21 >= *(_QWORD *)(v19 + 272))
  {
    v22 = std::vector<std::unique_ptr<std::once_flag>>::__emplace_back_slow_path<std::once_flag*&>((char **)(v19 + 256), v24);
    result = (_QWORD *)v24[0].__r_.__value_.__r.__words[0];
  }
  else
  {
    *v21 = result;
    v22 = (char *)(v21 + 1);
  }
  *(_QWORD *)(v19 + 264) = v22;
  a1[2] = result;
  return result;
}

void sub_22DC5183C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E31DF78](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_22DC51860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5189C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC518B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC518C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC518D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC518EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5193C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::LazyDescriptor::Set(google::protobuf::internal::LazyDescriptor *this, const google::protobuf::Descriptor *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  char v7;
  std::string v8[2];

  if (*((_QWORD *)this + 1))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7407);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: !name_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)this + 2))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7408);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: !once_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)this + 3))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7409);
    v6 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: !file_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  *(_QWORD *)this = a2;
}

void sub_22DC51A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC51AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::ValidateMessageOptions(google::protobuf::DescriptorBuilder *this, google::protobuf::Descriptor *a2, const google::protobuf::DescriptorProto *a3)
{
  uint64_t v6;
  uint64_t v7;
  google::protobuf::FieldDescriptor *v8;
  const google::protobuf::FieldDescriptorProto *v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::Descriptor *v12;
  const google::protobuf::DescriptorProto *v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::EnumDescriptor *v16;
  const google::protobuf::EnumDescriptorProto *v17;
  uint64_t v18;
  uint64_t v19;
  google::protobuf::FieldDescriptor *v20;
  const google::protobuf::FieldDescriptorProto *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  const std::string::value_type *v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  std::string __p;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  const char *v49;
  int v50;
  _BYTE v51[36];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*((int *)a2 + 26) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (google::protobuf::FieldDescriptor *)(*((_QWORD *)a2 + 5) + v6);
      v9 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a3 + 24, v7);
      google::protobuf::DescriptorBuilder::ValidateFieldOptions(this, v8, v9);
      ++v7;
      v6 += 152;
    }
    while (v7 < *((int *)a2 + 26));
  }
  if (*((int *)a2 + 29) >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (google::protobuf::Descriptor *)(*((_QWORD *)a2 + 7) + v10);
      v13 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)a3 + 48, v11);
      google::protobuf::DescriptorBuilder::ValidateMessageOptions(this, v12, v13);
      ++v11;
      v10 += 144;
    }
    while (v11 < *((int *)a2 + 29));
  }
  if (*((int *)a2 + 30) >= 1)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (google::protobuf::EnumDescriptor *)(*((_QWORD *)a2 + 8) + v14);
      v17 = (const google::protobuf::EnumDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)a3 + 72, v15);
      google::protobuf::DescriptorBuilder::ValidateEnumOptions(this, v16, v17);
      ++v15;
      v14 += 80;
    }
    while (v15 < *((int *)a2 + 30));
  }
  if (*((int *)a2 + 32) >= 1)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (google::protobuf::FieldDescriptor *)(*((_QWORD *)a2 + 10) + v18);
      v21 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a3 + 120, v19);
      google::protobuf::DescriptorBuilder::ValidateFieldOptions(this, v20, v21);
      ++v19;
      v18 += 152;
    }
    while (v19 < *((int *)a2 + 32));
  }
  if (*(_BYTE *)(*((_QWORD *)a2 + 4) + 72))
    v22 = 0x7FFFFFFFLL;
  else
    v22 = 0x1FFFFFFFLL;
  if (*((int *)a2 + 31) >= 1)
  {
    v23 = 0;
    v24 = (char *)a3 + 96;
    v25 = 4;
    do
    {
      if ((uint64_t)(v22 + 1) < *(int *)(*((_QWORD *)a2 + 9) + v25))
      {
        v26 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
        v27 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ExtensionRange>::TypeHandler>((uint64_t)v24, v23);
        v49 = google::protobuf::FastInt64ToBuffer(v22, v51, v28);
        v50 = strlen(v49);
        v47 = 0;
        v48 = -1;
        v45 = 0;
        v46 = -1;
        v43 = 0;
        v44 = -1;
        v41 = 0;
        v42 = -1;
        v39 = 0;
        v40 = -1;
        v37 = 0;
        v38 = -1;
        v35 = 0;
        v36 = -1;
        v33 = 0;
        v34 = -1;
        v31 = 0;
        v32 = -1;
        *((_QWORD *)&v29 + 1) = &v33;
        *(_QWORD *)&v29 = &v35;
        google::protobuf::strings::Substitute("Extension numbers cannot be greater than $0.", (uint64_t)&v49, (uint64_t)&v47, (uint64_t)&v45, (uint64_t)&v43, (uint64_t)&v41, (uint64_t)&v39, (uint64_t)&v37, &__p, v29, (uint64_t)&v31);
        google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v26, v27, 1, (const std::string::value_type *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ExtensionRange>::TypeHandler>((uint64_t)v24, v23++);
      v25 += 16;
    }
    while (v23 < *((int *)a2 + 31));
  }
}

void sub_22DC51DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::ValidateEnumOptions(google::protobuf::DescriptorBuilder *this, google::protobuf::EnumDescriptor *a2, const google::protobuf::EnumDescriptorProto *a3)
{
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  int v20;
  const std::string *v21;
  uint64_t **v22;
  int v23;
  uint64_t **v24;
  std::string *v25;
  __int128 v26;
  int v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  int v31;
  _DWORD *v32;
  uint64_t *v33;
  char *v34;
  uint64_t *v35;
  const std::string::value_type *v36;
  char *v37;
  const std::string::value_type *v38;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  uint64_t v47;
  char *v48;
  std::string v49;
  std::string v50;
  std::string v51;
  void *__p[2];
  std::string::size_type v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;

  v6 = *((_DWORD *)a2 + 11);
  if (v6 >= 1)
  {
    for (i = 0; i < v6; ++i)
    {
      google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumValueDescriptorProto>::TypeHandler>((uint64_t)a3 + 24, i);
      v6 = *((_DWORD *)a2 + 11);
    }
  }
  v8 = *((_QWORD *)a2 + 4);
  if ((*(_BYTE *)(v8 + 40) & 1) == 0 || !*(_BYTE *)(v8 + 72))
  {
    v55 = 0;
    v56 = 0;
    v54 = &v55;
    if (v6 >= 1)
    {
      v9 = 0;
      while (1)
      {
        v10 = *((_QWORD *)a2 + 6);
        v11 = v10 + 40 * v9;
        v14 = *(_DWORD *)(v11 + 16);
        v13 = (int *)(v11 + 16);
        v12 = v14;
        v15 = v55;
        v16 = &v55;
        v17 = v55;
        if (v55)
        {
          do
          {
            v18 = v17;
            v19 = v16;
            v20 = *((_DWORD *)v17 + 8);
            if (v20 >= v12)
              v16 = (uint64_t **)v17;
            else
              ++v17;
            v17 = (uint64_t *)*v17;
          }
          while (v17);
          if (v16 != &v55)
          {
            if (v20 < v12)
              v18 = (uint64_t *)v19;
            if (v12 >= *((_DWORD *)v18 + 8))
            {
              std::operator+<char>();
              v25 = std::string::append(&v49, "\" uses the same enum value as \"");
              v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
              v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
              v25->__r_.__value_.__l.__size_ = 0;
              v25->__r_.__value_.__r.__words[2] = 0;
              v25->__r_.__value_.__r.__words[0] = 0;
              v27 = *v13;
              v28 = v55;
              v29 = &v55;
              v30 = &v55;
              if (v55)
              {
                while (1)
                {
                  while (1)
                  {
                    v30 = (uint64_t **)v28;
                    v31 = *((_DWORD *)v28 + 8);
                    if (v27 >= v31)
                      break;
                    v28 = *v30;
                    v29 = v30;
                    if (!*v30)
                      goto LABEL_34;
                  }
                  if (v31 >= v27)
                    break;
                  v28 = v30[1];
                  if (!v28)
                  {
                    v29 = v30 + 1;
                    goto LABEL_34;
                  }
                }
                v32 = v30;
              }
              else
              {
LABEL_34:
                v32 = operator new(0x40uLL);
                v32[8] = v27;
                *((_QWORD *)v32 + 6) = 0;
                *((_QWORD *)v32 + 7) = 0;
                *((_QWORD *)v32 + 5) = 0;
                *(_QWORD *)v32 = 0;
                *((_QWORD *)v32 + 1) = 0;
                *((_QWORD *)v32 + 2) = v30;
                *v29 = (uint64_t *)v32;
                v33 = (uint64_t *)v32;
                if (*v54)
                {
                  v54 = (uint64_t **)*v54;
                  v33 = *v29;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v55, v33);
                ++v56;
              }
              v38 = (const std::string::value_type *)*((_QWORD *)v32 + 5);
              v37 = (char *)(v32 + 10);
              v36 = v38;
              v39 = v37[23];
              if (v39 >= 0)
                v40 = v37;
              else
                v40 = v36;
              if (v39 >= 0)
                v41 = v37[23];
              else
                v41 = *((_QWORD *)v37 + 1);
              v42 = std::string::append(&v50, v40, v41);
              v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
              v51.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v43;
              v42->__r_.__value_.__l.__size_ = 0;
              v42->__r_.__value_.__r.__words[2] = 0;
              v42->__r_.__value_.__r.__words[0] = 0;
              v44 = std::string::append(&v51, "\". If this is intended, set 'option allow_alias = true;' to the enum definition.");
              v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              v53 = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v51.__r_.__value_.__l.__data_);
                if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_54;
LABEL_50:
                if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_51;
LABEL_55:
                operator delete(v49.__r_.__value_.__l.__data_);
                if (!*(_BYTE *)(*((_QWORD *)a2 + 4) + 72))
                {
LABEL_56:
                  v46 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
                  v47 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumValueDescriptorProto>::TypeHandler>((uint64_t)a3 + 24, v9);
                  google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v46, v47, 1, (const std::string::value_type *)__p);
                }
              }
              else
              {
                if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_50;
LABEL_54:
                operator delete(v50.__r_.__value_.__l.__data_);
                if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_55;
LABEL_51:
                if (!*(_BYTE *)(*((_QWORD *)a2 + 4) + 72))
                  goto LABEL_56;
              }
              if (SHIBYTE(v53) < 0)
                operator delete(__p[0]);
              goto LABEL_10;
            }
          }
          v21 = *(const std::string **)(v10 + 40 * v9 + 8);
          while (1)
          {
            while (1)
            {
              v22 = (uint64_t **)v15;
              v23 = *((_DWORD *)v15 + 8);
              if (v12 >= v23)
                break;
              v15 = *v22;
              if (!*v22)
              {
                v24 = v22;
                goto LABEL_38;
              }
            }
            if (v23 >= v12)
              break;
            v15 = v22[1];
            if (!v15)
            {
              v24 = v22 + 1;
              goto LABEL_38;
            }
          }
          v34 = (char *)v22;
        }
        else
        {
          v21 = *(const std::string **)(v10 + 40 * v9 + 8);
          v24 = &v55;
          v22 = &v55;
LABEL_38:
          v34 = (char *)operator new(0x40uLL);
          *((_DWORD *)v34 + 8) = v12;
          *((_QWORD *)v34 + 6) = 0;
          *((_QWORD *)v34 + 7) = 0;
          *((_QWORD *)v34 + 5) = 0;
          *(_QWORD *)v34 = 0;
          *((_QWORD *)v34 + 1) = 0;
          *((_QWORD *)v34 + 2) = v22;
          *v24 = (uint64_t *)v34;
          v35 = (uint64_t *)v34;
          if (*v54)
          {
            v54 = (uint64_t **)*v54;
            v35 = *v24;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v55, v35);
          ++v56;
        }
        std::string::operator=((std::string *)(v34 + 40), v21);
LABEL_10:
        if (++v9 >= *((int *)a2 + 11))
        {
          v48 = (char *)v55;
          goto LABEL_61;
        }
      }
    }
    v48 = 0;
LABEL_61:
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy((uint64_t)&v54, v48);
  }
}

void sub_22DC521F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
  {
    operator delete(__p);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v35 - 104, *(char **)(v35 - 96));
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v35 - 104, *(char **)(v35 - 96));
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::ValidateFieldOptions(google::protobuf::DescriptorBuilder *this, google::protobuf::FieldDescriptor *a2, const google::protobuf::FieldDescriptorProto *a3)
{
  google::protobuf::DescriptorBuilder *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  google::protobuf::DescriptorBuilder *v10;
  unint64_t v11;
  const std::string::value_type *v12;
  char *v13;
  uint64_t v14;
  const google::protobuf::FieldDescriptorProto *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  std::string::size_type size;
  int v29;
  std::string *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  _BOOL4 v35;
  std::string __p;
  google::protobuf::FieldDescriptor *v38;
  uint64_t (*v39)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  std::string *p_p;

  v5 = this;
  if (*(_BYTE *)(*(_QWORD *)this + 41))
  {
    if (!a2)
      return;
    this = (google::protobuf::DescriptorBuilder *)*((_QWORD *)a2 + 6);
    if (this)
    {
      v39 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))a2;
      v6 = atomic_load((unint64_t *)this);
      if (v6 != -1)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v39;
        p_p = &__p;
        std::__call_once((std::once_flag::_State_type *)this, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    if (!*((_QWORD *)a2 + 13))
      return;
  }
  if (*(_BYTE *)(*((_QWORD *)a2 + 15) + 77))
  {
    this = (google::protobuf::DescriptorBuilder *)*((_QWORD *)a2 + 6);
    if (this)
    {
      v38 = a2;
      v39 = google::protobuf::FieldDescriptor::TypeOnceInit;
      v7 = atomic_load((unint64_t *)this);
      if (v7 != -1)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v38;
        p_p = &__p;
        std::__call_once((std::once_flag::_State_type *)this, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    if (*((_DWORD *)a2 + 14) != 11)
      google::protobuf::DescriptorBuilder::AddError((uint64_t)v5, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, "[lazy = true] can only be specified for submessage fields.");
  }
  if (*(_BYTE *)(*((_QWORD *)a2 + 15) + 76))
  {
    if (*((_DWORD *)a2 + 15) != 3)
      goto LABEL_19;
    this = (google::protobuf::DescriptorBuilder *)*((_QWORD *)a2 + 6);
    if (this)
    {
      v38 = a2;
      v39 = google::protobuf::FieldDescriptor::TypeOnceInit;
      v8 = atomic_load((unint64_t *)this);
      if (v8 != -1)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v38;
        p_p = &__p;
        std::__call_once((std::once_flag::_State_type *)this, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    if ((*((_DWORD *)a2 + 14) - 13) >= 0xFFFFFFFC)
LABEL_19:
      google::protobuf::DescriptorBuilder::AddError((uint64_t)v5, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, "[packed = true] can only be specified for repeated primitive fields.");
  }
  v9 = *((_QWORD *)a2 + 10);
  if (v9)
  {
    v10 = *(google::protobuf::DescriptorBuilder **)(v9 + 32);
    this = (google::protobuf::DescriptorBuilder *)google::protobuf::MessageOptions::default_instance(this);
    if (v10 != this)
    {
      if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 10) + 32) + 72))
      {
        if (!*((_BYTE *)a2 + 67))
        {
          v12 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
          v13 = "MessageSets cannot have fields, only extensions.";
          v14 = (uint64_t)v5;
          v15 = a3;
          v16 = 0;
          goto LABEL_31;
        }
        if (*((_DWORD *)a2 + 15) != 1)
          goto LABEL_29;
        this = (google::protobuf::DescriptorBuilder *)*((_QWORD *)a2 + 6);
        if (this)
        {
          v38 = a2;
          v39 = google::protobuf::FieldDescriptor::TypeOnceInit;
          v11 = atomic_load((unint64_t *)this);
          if (v11 != -1)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v38;
            p_p = &__p;
            std::__call_once((std::once_flag::_State_type *)this, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
        }
        if (*((_DWORD *)a2 + 14) != 11)
        {
LABEL_29:
          v12 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
          v13 = "Extensions of MessageSets must be optional messages.";
          v14 = (uint64_t)v5;
          v15 = a3;
          v16 = 2;
LABEL_31:
          google::protobuf::DescriptorBuilder::AddError(v14, v12, (uint64_t)v15, v16, v13);
        }
      }
    }
  }
  v17 = *((_QWORD *)a2 + 5);
  if (v17)
  {
    v18 = *(uint64_t **)(v17 + 136);
    v19 = google::protobuf::FileOptions::default_instance(this);
    if (v18 != v19 && *(_DWORD *)(*(_QWORD *)(v17 + 136) + 160) == 3)
    {
      v20 = *((_QWORD *)a2 + 10);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 16);
        if (!v21
          || (v22 = *(uint64_t **)(v21 + 136),
              v22 == google::protobuf::FileOptions::default_instance((google::protobuf::FileOptions *)v19))
          || *(_DWORD *)(*(_QWORD *)(v21 + 136) + 160) != 3)
        {
          google::protobuf::DescriptorBuilder::AddError((uint64_t)v5, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 3, "Extensions to non-lite types can only be declared in non-lite files.  Note that you cannot extend a non-lite type to contain a lite type, but the reverse is allowed.");
        }
      }
    }
  }
  v23 = (unint64_t *)*((_QWORD *)a2 + 6);
  if (v23)
  {
    v38 = a2;
    v39 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v24 = atomic_load(v23);
    if (v24 != -1)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v38;
      p_p = &__p;
      std::__call_once(v23, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  if (*((_DWORD *)a2 + 14) == 11
    && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 13) + 32) + 75)
    && (google::protobuf::DescriptorBuilder::ValidateMapEntry(v5, a2, a3) & 1) == 0)
  {
    google::protobuf::DescriptorBuilder::AddError((uint64_t)v5, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, "map_entry should not be set explicitly. Use map<KeyType, ValueType> instead.");
  }
  google::protobuf::DescriptorBuilder::ValidateJSType(v5, a2, a3);
  if (*((_BYTE *)a2 + 67) && *((_BYTE *)a2 + 66))
  {
    v25 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
    v26 = v25[23];
    if ((v26 & 0x80u) == 0)
      v27 = v25[23];
    else
      v27 = *((_QWORD *)v25 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v27 == size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &__p;
      else
        v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v26 & 0x80) != 0)
      {
        v35 = memcmp(*(const void **)v25, v30, *((_QWORD *)v25 + 1)) != 0;
        goto LABEL_70;
      }
      if (v25[23])
      {
        v31 = v26 - 1;
        do
        {
          v33 = *v25++;
          v32 = v33;
          v34 = v30->__r_.__value_.__s.__data_[0];
          v30 = (std::string *)((char *)v30 + 1);
          v35 = v32 != v34;
        }
        while (v32 == v34 && v31-- != 0);
LABEL_70:
        if ((v29 & 0x80000000) == 0)
          goto LABEL_72;
        goto LABEL_71;
      }
      v35 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_72:
        if (v35)
          google::protobuf::DescriptorBuilder::AddError((uint64_t)v5, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 7, "option json_name is not allowed on extension fields.");
        return;
      }
    }
    else
    {
      v35 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_72;
    }
LABEL_71:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_72;
  }
}

void google::protobuf::DescriptorBuilder::ValidateProto3(google::protobuf::DescriptorBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  google::protobuf::FieldDescriptor *v8;
  const google::protobuf::FieldDescriptorProto *v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::Descriptor *v12;
  const google::protobuf::DescriptorProto *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  google::protobuf::EnumDescriptor *v17;
  const google::protobuf::EnumDescriptorProto *v18;

  if (*(int *)(a2 + 56) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (google::protobuf::FieldDescriptor *)(*(_QWORD *)(a2 + 128) + v6);
      v9 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>(a3 + 120, v7);
      google::protobuf::DescriptorBuilder::ValidateProto3Field(a1, v8, v9);
      ++v7;
      v6 += 152;
    }
    while (v7 < *(int *)(a2 + 56));
  }
  if (*(int *)(a2 + 44) >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (google::protobuf::Descriptor *)(*(_QWORD *)(a2 + 104) + v10);
      v13 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>(a3 + 48, v11);
      google::protobuf::DescriptorBuilder::ValidateProto3Message(a1, v12, v13);
      ++v11;
      v10 += 144;
    }
    while (v11 < *(int *)(a2 + 44));
  }
  if (*(int *)(a2 + 48) >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = a3 + 72;
    do
    {
      v17 = (google::protobuf::EnumDescriptor *)(*(_QWORD *)(a2 + 112) + v14);
      v18 = (const google::protobuf::EnumDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>(v16, v15);
      google::protobuf::DescriptorBuilder::ValidateProto3Enum(a1, v17, v18);
      ++v15;
      v14 += 80;
    }
    while (v15 < *(int *)(a2 + 48));
  }
}

void google::protobuf::DescriptorBuilder::ValidateProto3Field(google::protobuf::DescriptorBuilder *this, google::protobuf::FieldDescriptor *a2, const google::protobuf::FieldDescriptorProto *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  size_t v11;
  const void *v12;
  uint64_t v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t *v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  BOOL v30;
  unint64_t *v31;
  unint64_t v32;
  int *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  const std::string::value_type *v42;
  unint64_t v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  unint64_t v54;
  google::protobuf::_anonymous_namespace_ *v55;
  void (*v56)(const void *);
  const void *v57;
  std::string v58;
  std::string v59;
  std::string v60;
  void *__p[2];
  std::string::size_type v62;
  google::protobuf::FieldDescriptor *v63;
  _QWORD *v64;
  _QWORD v65[2];

  if (*((_BYTE *)a2 + 67))
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8);
    v7 = atomic_load((unsigned __int8 *)&qword_25407B4F8);
    if ((v7 & 1) == 0)
    {
      v55 = (google::protobuf::_anonymous_namespace_ *)__cxa_guard_acquire(&qword_25407B4F8);
      if ((_DWORD)v55)
      {
        google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::OnShutdownDelete<std::set<std::string>>(std::set<std::string> *)::{lambda(void const*)#1}::__invoke, v56, v57);
        qword_25407B4F0 = (uint64_t)v56;
        __cxa_guard_release(&qword_25407B4F8);
      }
    }
    v8 = qword_25407B4F0 + 8;
    v9 = *(_QWORD *)(qword_25407B4F0 + 8);
    if (!v9)
      goto LABEL_42;
    v10 = *(char *)(v6 + 23);
    v11 = v10 >= 0 ? *(unsigned __int8 *)(v6 + 23) : *(_QWORD *)(v6 + 8);
    v12 = v10 >= 0 ? (const void *)v6 : *(const void **)v6;
    v13 = qword_25407B4F0 + 8;
    do
    {
      v14 = *(char *)(v9 + 55);
      if (v14 >= 0)
        v15 = *(unsigned __int8 *)(v9 + 55);
      else
        v15 = *(_QWORD *)(v9 + 40);
      if (v14 >= 0)
        v16 = (const void *)(v9 + 32);
      else
        v16 = *(const void **)(v9 + 32);
      if (v11 >= v15)
        v17 = v15;
      else
        v17 = v11;
      v18 = memcmp(v16, v12, v17);
      v19 = v15 < v11;
      if (v18)
        v19 = v18 < 0;
      v20 = !v19;
      if (v19)
        v21 = (uint64_t *)(v9 + 8);
      else
        v21 = (uint64_t *)v9;
      if (v20)
        v13 = v9;
      v9 = *v21;
    }
    while (*v21);
    if (v13 == v8)
      goto LABEL_42;
    v24 = *(const void **)(v13 + 32);
    v23 = v13 + 32;
    v22 = v24;
    v25 = *(char *)(v23 + 23);
    if (v25 >= 0)
      v26 = *(unsigned __int8 *)(v23 + 23);
    else
      v26 = *(_QWORD *)(v23 + 8);
    if (v25 >= 0)
      v27 = (const void *)v23;
    else
      v27 = v22;
    if (v26 >= v11)
      v28 = v11;
    else
      v28 = v26;
    v29 = memcmp(v12, v27, v28);
    v30 = v11 >= v26;
    if (v29)
      v30 = v29 >= 0;
    if (!v30)
LABEL_42:
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 3, "Extensions in proto3 are only allowed for defining options.");
  }
  if (*((_DWORD *)a2 + 15) == 2)
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, "Required fields are not allowed in proto3.");
  if (*((_BYTE *)a2 + 64))
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 4, "Explicit default values are not allowed in proto3.");
  v31 = (unint64_t *)*((_QWORD *)a2 + 6);
  if (v31)
  {
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v32 = atomic_load(v31);
    if (v32 != -1)
    {
      __p[0] = &v59;
      __p[1] = &v58;
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::__call_once(v31, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
    v33 = (int *)((char *)a2 + 56);
    v34 = (unint64_t *)*((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 14) != 14)
      goto LABEL_85;
    if (v34)
    {
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v35 = atomic_load(v34);
      if (v35 != -1)
      {
        __p[0] = google::protobuf::FieldDescriptor::TypeOnceInit;
        __p[1] = &v59;
        v60.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::__call_once(v34, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
      v34 = (unint64_t *)*((_QWORD *)a2 + 6);
    }
    v36 = *((_QWORD *)a2 + 14);
    if (!v36)
      goto LABEL_85;
  }
  else
  {
    v33 = (int *)((char *)a2 + 56);
    v37 = *((_DWORD *)a2 + 14);
    if (v37 != 14)
      goto LABEL_89;
    v34 = 0;
    v36 = *((_QWORD *)a2 + 14);
    if (!v36)
      goto LABEL_85;
  }
  if (v34)
  {
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v38 = atomic_load(v34);
    if (v38 != -1)
    {
      __p[0] = google::protobuf::FieldDescriptor::TypeOnceInit;
      __p[1] = &v59;
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::__call_once(v34, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
    v34 = (unint64_t *)*((_QWORD *)a2 + 6);
    v39 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 14) + 16) + 60);
    if (v39 == 3)
      goto LABEL_85;
    if (v34)
    {
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v40 = atomic_load(v34);
      if (v40 != -1)
      {
        __p[0] = google::protobuf::FieldDescriptor::TypeOnceInit;
        __p[1] = &v59;
        v60.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::__call_once(v34, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
      v39 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 14) + 16) + 60);
      v34 = (unint64_t *)*((_QWORD *)a2 + 6);
    }
    if (!v39)
      goto LABEL_85;
    goto LABEL_71;
  }
  v41 = *(_DWORD *)(*(_QWORD *)(v36 + 16) + 60);
  if (v41 != 3)
  {
    v34 = 0;
    if (!v41)
    {
LABEL_85:
      if (v34)
      {
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v54 = atomic_load(v34);
        if (v54 != -1)
        {
          __p[0] = &v59;
          __p[1] = &v58;
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::__call_once(v34, &v60, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      goto LABEL_88;
    }
LABEL_71:
    v42 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
    if (v34)
    {
      v63 = a2;
      v43 = atomic_load(v34);
      if (v43 != -1)
      {
        v65[0] = google::protobuf::FieldDescriptor::TypeOnceInit;
        v65[1] = &v63;
        v64 = v65;
        std::__call_once(v34, &v64, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    std::operator+<char>();
    v44 = std::string::append(&v58, "\" is not a proto3 enum, but is used in \"");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8);
    v47 = *(char *)(v46 + 23);
    if (v47 >= 0)
      v48 = *(const std::string::value_type **)(*((_QWORD *)a2 + 10) + 8);
    else
      v48 = *(const std::string::value_type **)v46;
    if (v47 >= 0)
      v49 = *(unsigned __int8 *)(v46 + 23);
    else
      v49 = *(_QWORD *)(v46 + 8);
    v50 = std::string::append(&v59, v48, v49);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = std::string::append(&v60, "\" which is a proto3 message type.");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v62 = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v42, (uint64_t)a3, 2, (const std::string::value_type *)__p);
    if (SHIBYTE(v62) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_82:
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_83;
        goto LABEL_94;
      }
    }
    else if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_82;
    }
    operator delete(v60.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_83:
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_84:
        v34 = (unint64_t *)*((_QWORD *)a2 + 6);
        goto LABEL_85;
      }
LABEL_95:
      operator delete(v58.__r_.__value_.__l.__data_);
      goto LABEL_84;
    }
LABEL_94:
    operator delete(v59.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_95;
  }
LABEL_88:
  v37 = *v33;
LABEL_89:
  if (v37 == 10)
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, "Groups are not supported in proto3 syntax.");
}

void sub_22DC52D34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25407B4F8);
  _Unwind_Resume(a1);
}

void sub_22DC52D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(a30);
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if (a15 < 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

void sub_22DC52DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0)
    JUMPOUT(0x22DC52DD0);
  JUMPOUT(0x22DC52D70);
}

void google::protobuf::DescriptorBuilder::ValidateProto3Message(google::protobuf::DescriptorBuilder *this, google::protobuf::Descriptor *a2, const google::protobuf::DescriptorProto *a3)
{
  uint64_t v6;
  uint64_t v7;
  google::protobuf::Descriptor *v8;
  const google::protobuf::DescriptorProto *v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::EnumDescriptor *v12;
  const google::protobuf::EnumDescriptorProto *v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::FieldDescriptor *v16;
  const google::protobuf::FieldDescriptorProto *v17;
  uint64_t v18;
  uint64_t v19;
  google::protobuf::FieldDescriptor *v20;
  const google::protobuf::FieldDescriptorProto *v21;
  const std::string::value_type *v22;
  std::string *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t i;
  unint64_t v32;
  uint64_t *v33;
  int v34;
  std::string::value_type v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  const void *v42;
  const void *v43;
  int v44;
  size_t v45;
  const void *v46;
  size_t v47;
  int v48;
  _BOOL4 v49;
  uint64_t *v50;
  const void *v51;
  BOOL v52;
  _QWORD *v53;
  size_t v54;
  size_t v55;
  const void *v56;
  size_t v57;
  const void *v58;
  size_t v59;
  int v60;
  _BOOL4 v61;
  const std::string::value_type *v62;
  uint64_t v63;
  std::string *v64;
  __int128 v65;
  uint64_t **v66;
  uint64_t v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  void *__p[2];
  std::string::size_type v85;
  std::string v86;
  std::string *v87;
  _QWORD *v88;
  _QWORD v89[6];

  if (*((int *)a2 + 29) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (google::protobuf::Descriptor *)(*((_QWORD *)a2 + 7) + v6);
      v9 = (const google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)a3 + 48, v7);
      google::protobuf::DescriptorBuilder::ValidateProto3Message(this, v8, v9);
      ++v7;
      v6 += 144;
    }
    while (v7 < *((int *)a2 + 29));
  }
  if (*((int *)a2 + 30) >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (google::protobuf::EnumDescriptor *)(*((_QWORD *)a2 + 8) + v10);
      v13 = (const google::protobuf::EnumDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)a3 + 72, v11);
      google::protobuf::DescriptorBuilder::ValidateProto3Enum(this, v12, v13);
      ++v11;
      v10 += 80;
    }
    while (v11 < *((int *)a2 + 30));
  }
  if (*((int *)a2 + 26) >= 1)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (google::protobuf::FieldDescriptor *)(*((_QWORD *)a2 + 5) + v14);
      v17 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a3 + 24, v15);
      google::protobuf::DescriptorBuilder::ValidateProto3Field(this, v16, v17);
      ++v15;
      v14 += 152;
    }
    while (v15 < *((int *)a2 + 26));
  }
  if (*((int *)a2 + 32) >= 1)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (google::protobuf::FieldDescriptor *)(*((_QWORD *)a2 + 10) + v18);
      v21 = (const google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)a3 + 120, v19);
      google::protobuf::DescriptorBuilder::ValidateProto3Field(this, v20, v21);
      ++v19;
      v18 += 152;
    }
    while (v19 < *((int *)a2 + 32));
  }
  if (*((int *)a2 + 31) > 0)
  {
    v22 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
    if (*((int *)a3 + 26) <= 0)
    {
      v23 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v88, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
      v24 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v86, v24);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v88);
    }
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v22, *(_QWORD *)(*((_QWORD *)a3 + 14) + 8), 1, "Extension ranges are not allowed in proto3.");
  }
  if (*(_BYTE *)(*((_QWORD *)a2 + 4) + 72))
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 0, "MessageSet is not supported in proto3.");
  v89[0] = 0;
  v89[1] = 0;
  v88 = v89;
  if (*((int *)a2 + 26) < 1)
  {
    v78 = 0;
    goto LABEL_105;
  }
  v25 = 0;
  v79 = (char *)a3 + 24;
  do
  {
    v26 = *(uint64_t **)(*((_QWORD *)a2 + 5) + 152 * v25);
    memset(&v86, 0, sizeof(v86));
    v27 = *((unsigned __int8 *)v26 + 23);
    v28 = *((char *)v26 + 23) < 0;
    v29 = v26[1];
    if (*((char *)v26 + 23) >= 0)
      v30 = *((unsigned __int8 *)v26 + 23);
    else
      v30 = v26[1];
    if (v30)
    {
      for (i = 0; i < v32; ++i)
      {
        if (v28)
          v33 = (uint64_t *)*v26;
        else
          v33 = v26;
        v34 = *((unsigned __int8 *)v33 + i);
        if (v34 != 95)
        {
          if ((v34 - 65) >= 0x1A)
            v35 = v34;
          else
            v35 = v34 + 32;
          std::string::push_back(&v86, v35);
          v27 = *((unsigned __int8 *)v26 + 23);
          v29 = v26[1];
        }
        v28 = (v27 & 0x80u) != 0;
        if ((v27 & 0x80u) == 0)
          v32 = v27;
        else
          v32 = v29;
      }
    }
    v36 = v89[0];
    if (!v89[0])
      goto LABEL_95;
    v37 = (v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v86.__r_.__value_.__r.__words[2])
        : v86.__r_.__value_.__l.__size_;
    v38 = (v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v86
        : (std::string *)v86.__r_.__value_.__r.__words[0];
    v39 = v89;
    do
    {
      v40 = v36;
      v41 = v39;
      v43 = (const void *)(v36 + 32);
      v42 = *(const void **)(v36 + 32);
      v44 = *(char *)(v40 + 55);
      if (v44 >= 0)
        v45 = *(unsigned __int8 *)(v40 + 55);
      else
        v45 = *(_QWORD *)(v40 + 40);
      if (v44 >= 0)
        v46 = v43;
      else
        v46 = v42;
      if (v37 >= v45)
        v47 = v45;
      else
        v47 = v37;
      v48 = memcmp(v46, v38, v47);
      if (v48)
        v49 = v48 < 0;
      else
        v49 = v45 < v37;
      v50 = (uint64_t *)(v40 + 8);
      if (v49)
      {
        v39 = v41;
      }
      else
      {
        v50 = (uint64_t *)v40;
        v39 = (_QWORD *)v40;
      }
      v36 = *v50;
    }
    while (v36);
    if (v39 == v89)
      goto LABEL_95;
    v51 = v41 + 4;
    v52 = !v49;
    if (v49)
      v53 = v41;
    else
      v53 = (_QWORD *)v40;
    if (v52)
      v51 = v43;
    v54 = *((unsigned __int8 *)v39 + 55);
    v56 = (const void *)v53[4];
    v55 = v53[5];
    if ((v54 & 0x80u) == 0)
      v57 = v54;
    else
      v57 = v55;
    if ((v54 & 0x80u) == 0)
      v58 = v51;
    else
      v58 = v56;
    if (v57 >= v37)
      v59 = v37;
    else
      v59 = v57;
    v60 = memcmp(v38, v58, v59);
    v61 = v37 >= v57;
    if (v60)
      v61 = v60 >= 0;
    if (!v61)
    {
LABEL_95:
      v77 = *((_QWORD *)a2 + 5);
      __p[0] = &v86;
      std::__tree<std::__value_type<std::string,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::string,std::__value_type<std::string,google::protobuf::FieldDescriptor const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,google::protobuf::FieldDescriptor const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v88, (const void **)&v86.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[7] = (uint64_t *)(v77 + 152 * v25);
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_96;
    }
    v62 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
    v63 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)v79, v25);
    std::operator+<char>();
    v64 = std::string::append(&v80, "\" conflicts with field \"");
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v87 = &v86;
    v66 = std::__tree<std::__value_type<std::string,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::string,std::__value_type<std::string,google::protobuf::FieldDescriptor const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,google::protobuf::FieldDescriptor const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v88, (const void **)&v86.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v87);
    v67 = *v66[7];
    v68 = *(char *)(v67 + 23);
    if (v68 >= 0)
      v69 = (const std::string::value_type *)*v66[7];
    else
      v69 = *(const std::string::value_type **)v67;
    if (v68 >= 0)
      v70 = *(unsigned __int8 *)(v67 + 23);
    else
      v70 = *(_QWORD *)(v67 + 8);
    v71 = std::string::append(&v81, v69, v70);
    v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    v73 = std::string::append(&v82, "\". This is not ");
    v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    v75 = std::string::append(&v83, "allowed in proto3.");
    v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v85 = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v62, v63, 0, (const std::string::value_type *)__p);
    if (SHIBYTE(v85) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_90;
LABEL_98:
      operator delete(v83.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_91;
LABEL_99:
      operator delete(v82.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_92;
LABEL_100:
      operator delete(v81.__r_.__value_.__l.__data_);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_101;
LABEL_93:
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_21;
LABEL_96:
      operator delete(v86.__r_.__value_.__l.__data_);
      goto LABEL_21;
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_98;
LABEL_90:
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_99;
LABEL_91:
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_100;
LABEL_92:
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_93;
LABEL_101:
    operator delete(v80.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_96;
LABEL_21:
    ++v25;
  }
  while (v25 < *((int *)a2 + 26));
  v78 = (char *)v89[0];
LABEL_105:
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v88, v78);
}

void sub_22DC533D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_22DC533E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  google::protobuf::internal::LogMessage::~LogMessage((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_22DC533FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a42 < 0)
  {
    operator delete(__p);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a23);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a15 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a49 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a10);
  if ((a49 & 0x80000000) == 0)
  {
LABEL_7:
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v49 - 136, *(char **)(v49 - 128));
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(a44);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v49 - 136, *(char **)(v49 - 128));
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::ValidateProto3Enum(google::protobuf::DescriptorBuilder *this, google::protobuf::EnumDescriptor *a2, const google::protobuf::EnumDescriptorProto *a3)
{
  const std::string::value_type *v5;
  unsigned int *v6;
  char v7;
  std::string v8[2];

  if (*((int *)a2 + 11) >= 1 && *(_DWORD *)(*((_QWORD *)a2 + 6) + 16))
  {
    v5 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
    if (*((int *)a3 + 8) <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
      v6 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v6);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    }
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v5, *(_QWORD *)(*((_QWORD *)a3 + 5) + 8), 1, "The first enum value must be zero in proto3.");
  }
}

void sub_22DC535BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC535D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorBuilder::ValidateMapEntry(google::protobuf::DescriptorBuilder *this, google::protobuf::FieldDescriptor *a2, const google::protobuf::FieldDescriptorProto *a3)
{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  std::string *v10;
  __int128 v11;
  BOOL v12;
  google::protobuf::FieldDescriptor *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v23;
  google::protobuf::FieldDescriptor *v24;
  std::string v25;
  google::protobuf::FieldDescriptor *v26;
  std::string __p[2];

  v6 = (unint64_t *)*((_QWORD *)a2 + 6);
  if (v6)
  {
    v26 = a2;
    v7 = atomic_load(v6);
    if (v7 != -1)
    {
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v26;
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::__call_once(v6, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  v8 = *((_QWORD *)a2 + 13);
  if (*(_DWORD *)(v8 + 128)
    || *((_DWORD *)a2 + 15) != 3
    || *(_DWORD *)(v8 + 124)
    || *(_DWORD *)(v8 + 116)
    || *(_DWORD *)(v8 + 120)
    || *(_DWORD *)(v8 + 104) != 2)
  {
    return 0;
  }
  v9 = *(unsigned __int8 **)v8;
  v10 = std::string::append(&v25, "Entry");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (unsigned __int8 *)__p)
     || *((_QWORD *)a2 + 10) != *(_QWORD *)(v8 + 24);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if (v12)
        return 0;
      goto LABEL_19;
    }
  }
  else if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v25.__r_.__value_.__l.__data_);
  if (v12)
    return 0;
LABEL_19:
  if (*(_BYTE *)(*(_QWORD *)(v8 + 32) + 75))
  {
    if (*(_DWORD *)(v8 + 104) == 2)
    {
      v13 = *(google::protobuf::FieldDescriptor **)(v8 + 40);
      goto LABEL_25;
    }
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 1725);
    v15 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (field_count()) == (2): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v25, v15);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    v13 = *(google::protobuf::FieldDescriptor **)(v8 + 40);
    if (*(_BYTE *)(*(_QWORD *)(v8 + 32) + 75))
    {
LABEL_25:
      if (*(_DWORD *)(v8 + 104) != 2)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 1731);
        v16 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (field_count()) == (2): ");
        google::protobuf::internal::LogFinisher::operator=((uint64_t)&v25, v16);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      }
      v14 = *(_QWORD *)(v8 + 40) + 152;
      if (*((_DWORD *)v13 + 15) != 1)
        return 0;
      goto LABEL_28;
    }
    v14 = 0;
    if (*((_DWORD *)v13 + 15) != 1)
      return 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (MEMORY[0x3C] != 1)
      return 0;
  }
LABEL_28:
  if (*((_DWORD *)v13 + 17) != 1)
    return 0;
  v17 = *(unsigned __int16 **)v13;
  v18 = *(char *)(*(_QWORD *)v13 + 23);
  if (v18 < 0)
  {
    if (*((_QWORD *)v17 + 1) == 3)
    {
      v17 = *(unsigned __int16 **)v17;
      goto LABEL_36;
    }
    return 0;
  }
  if (v18 != 3)
    return 0;
LABEL_36:
  v19 = *v17;
  v20 = *((unsigned __int8 *)v17 + 2);
  if (v19 != 25963 || v20 != 121)
    return 0;
  if (*(_DWORD *)(v14 + 60) != 1)
    return 0;
  v24 = (google::protobuf::FieldDescriptor *)v14;
  if (*(_DWORD *)(v14 + 68) != 2
    || std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(_QWORD **)v14, "value"))
  {
    return 0;
  }
  v23 = google::protobuf::FieldDescriptor::type(v13) - 1;
  if (v23 <= 0xD && ((0x2E03u >> v23) & 1) != 0)
    google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, off_24F987FD0[v23]);
  if (google::protobuf::FieldDescriptor::type(v24) == 14)
  {
    if (*(_DWORD *)(*(_QWORD *)(google::protobuf::FieldDescriptor::enum_type(v24) + 48) + 16))
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, "Enum value in map must define 0 as the first value.");
  }
  return 1;
}

void sub_22DC53948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5395C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC53970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC53984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC53998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::ValidateJSType(google::protobuf::DescriptorBuilder *this, google::protobuf::FieldDescriptor *a2, const google::protobuf::FieldDescriptorProto *a3)
{
  unsigned int v3;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  const std::string::value_type *v13;
  void *__p[2];
  char v15;
  google::protobuf::FieldDescriptor *v16;
  uint64_t (*v17)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  void **v18;

  v3 = *(_DWORD *)(*((_QWORD *)a2 + 15) + 80);
  if (v3)
  {
    v7 = (unint64_t *)*((_QWORD *)a2 + 6);
    if (v7)
    {
      v16 = a2;
      v17 = google::protobuf::FieldDescriptor::TypeOnceInit;
      v8 = atomic_load(v7);
      if (v8 != -1)
      {
        __p[0] = &v17;
        __p[1] = &v16;
        v18 = __p;
        std::__call_once(v7, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    v9 = *((_DWORD *)a2 + 14);
    v10 = v9 > 0x12;
    v11 = (1 << v9) & 0x50058;
    if (v10 || v11 == 0)
    {
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, *((const std::string::value_type **)a2 + 1), (uint64_t)a3, 2, "jstype is only allowed on int64, uint64, sint64, fixed64 or sfixed64 fields.");
    }
    else if (v3 >= 3)
    {
      v13 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      google::protobuf::FieldOptions_JSType_descriptor((google::protobuf *)v7);
      std::operator+<char>();
      google::protobuf::DescriptorBuilder::AddError((uint64_t)this, v13, (uint64_t)a3, 2, (const std::string::value_type *)__p);
      if (v15 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_22DC53AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) != 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

google::protobuf::DescriptorBuilder::OptionInterpreter *google::protobuf::DescriptorBuilder::OptionInterpreter::OptionInterpreter(google::protobuf::DescriptorBuilder::OptionInterpreter *this, google::protobuf::DescriptorBuilder *a2)
{
  unsigned int *v3;
  char v5;
  std::string v6[2];

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::DynamicMessageFactory::DynamicMessageFactory((google::protobuf::DescriptorBuilder::OptionInterpreter *)((char *)this + 72));
  if (!*(_QWORD *)this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 6390);
    v3 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: builder_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v5, v3);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_22DC53C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  google::protobuf::DynamicMessageFactory *v5;
  _QWORD **v6;
  _QWORD **v7;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::DynamicMessageFactory::~DynamicMessageFactory(v5);
  std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::destroy(v4, *v7);
  std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::destroy(v3, *v6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorBuilder::OptionInterpreter::InterpretSingleOption(uint64_t *a1, google::protobuf::Message *a2, int **a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t *v8;
  int v9;
  std::string *v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int SymbolNotEnforcingDepsHelper;
  uint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  std::string *v37;
  unsigned int *v38;
  const void *v39;
  int64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type size;
  std::string *v48;
  __int128 v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  google::protobuf::DescriptorBuilder::OptionInterpreter *NestedSymbol;
  uint64_t v54;
  uint64_t v55;
  int v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  char *v71;
  _DWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _OWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  google::protobuf::Reflection *v107;
  unint64_t UnknownFields;
  google::protobuf::UnknownFieldSet *v109;
  uint64_t *v110;
  void **v111;
  std::string::size_type v112;
  uint64_t *v113;
  unint64_t *v114;
  unint64_t v115;
  int v116;
  std::string::size_type v117;
  _QWORD *v118;
  google::protobuf::UnknownFieldSet *v119;
  google::protobuf::io::EpsCopyOutputStream *v120;
  std::string *v121;
  std::string *v122;
  std::string *v123;
  unsigned int *v124;
  google::protobuf::UnknownFieldSet *v125;
  void *v126;
  uint64_t v127;
  std::string *v128;
  __int128 v129;
  int v130;
  const std::string::value_type *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  std::string::size_type v137;
  google::protobuf::Reflection *v138;
  google::protobuf::UnknownFieldSet *v139;
  uint64_t *v140;
  int v141;
  char *v142;
  char *v143;
  std::string *v144;
  __int128 v145;
  std::string *v146;
  __int128 v147;
  void *v148;
  std::string *v149;
  __int128 v150;
  int v151;
  const std::string::value_type *v152;
  std::string::size_type v153;
  std::string *v154;
  __int128 v155;
  std::string *v156;
  __int128 v157;
  std::string *v158;
  std::string *v159;
  std::string::size_type v160;
  unint64_t *v161;
  unint64_t v162;
  unsigned int *v163;
  void *v164;
  char *v165;
  uint64_t v166;
  int64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _BYTE *v171;
  std::string *v172;
  __int128 v173;
  std::string *v174;
  __int128 v175;
  size_t v176;
  void **p_dst;
  uint64_t v178;
  uint64_t v179;
  const std::string::value_type *v180;
  std::string::size_type v181;
  std::string *v182;
  __int128 v183;
  std::string *v184;
  __int128 v185;
  char *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  _OWORD *v191;
  char *v192;
  uint64_t v193;
  __int128 v194;
  int v195;
  uint64_t *v196;
  google::protobuf::UnknownFieldSet *v197;
  void *v198;
  std::string::value_type *__src;
  std::string v203;
  void **__dst;
  std::string::size_type v205;
  int64_t v206;
  std::string v207;
  std::string v208;
  std::string v209;
  std::string v210;
  void *__p;
  char *v212;
  unint64_t v213;
  std::string v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t *v217;
  _BYTE v218[48];
  const google::protobuf::UnknownFieldSet *v219;
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  v5 = a1[2];
  v6 = *(_DWORD *)(v5 + 32);
  if (!v6)
  {
    *(_QWORD *)v218 = operator new(0x20uLL);
    *(_OWORD *)&v218[8] = xmmword_22DCE6650;
    strcpy(*(char **)v218, "Option must have a name.");
    google::protobuf::DescriptorBuilder::AddError(*a1, (const std::string::value_type *)(a1[1] + 24), v5, 7, v218);
    goto LABEL_20;
  }
  if (v6 <= 0)
  {
    v10 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)v218, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v11 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v203, v11);
    google::protobuf::internal::LogMessage::~LogMessage((void **)v218);
    v8 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 24);
    v9 = *((char *)v8 + 23);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_4:
      if (v9 != 20)
        goto LABEL_17;
      goto LABEL_10;
    }
  }
  else
  {
    v8 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 24);
    v9 = *((char *)v8 + 23);
    if ((v9 & 0x80000000) == 0)
      goto LABEL_4;
  }
  if (v8[1] == 20)
  {
    v8 = (uint64_t *)*v8;
LABEL_10:
    v12 = (uint64_t *)*v8;
    v13 = v8[1];
    v14 = *((_DWORD *)v8 + 4);
    v15 = v12 == (uint64_t *)0x707265746E696E75 && v13 == 0x706F5F6465746572;
    if (!v15 || v14 != 1852795252)
      goto LABEL_17;
    *(_QWORD *)v218 = operator new(0x40uLL);
    *(_OWORD *)&v218[8] = xmmword_22DCF90F0;
    strcpy(*(char **)v218, "Option must not use reserved name \"uninterpreted_option\".");
    google::protobuf::DescriptorBuilder::AddError(*a1, (const std::string::value_type *)(a1[1] + 24), a1[2], 7, v218);
LABEL_20:
    if ((v218[23] & 0x80000000) != 0)
      operator delete(*(void **)v218);
    return 0;
  }
LABEL_17:
  v17 = (uint64_t *)*a1;
  v18 = (*(uint64_t (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
  SymbolNotEnforcingDepsHelper = google::protobuf::DescriptorBuilder::FindSymbolNotEnforcingDepsHelper(v17, *v17, *(_QWORD *)(v18 + 8), 1);
  v21 = v19;
  v22 = (unint64_t)v19;
  switch(SymbolNotEnforcingDepsHelper)
  {
    case 1:
    case 4:
    case 6:
      v23 = (unint64_t *)(v19 + 2);
      goto LABEL_27;
    case 2:
      v23 = (unint64_t *)(v19 + 5);
      goto LABEL_27;
    case 3:
    case 7:
      v25 = v19[2];
      goto LABEL_25;
    case 5:
      v25 = v19[3];
LABEL_25:
      v23 = (unint64_t *)(v25 + 16);
LABEL_27:
      v22 = *v23;
      goto LABEL_28;
    case 8:
LABEL_28:
      if (v22 != v17[10])
        goto LABEL_29;
      goto LABEL_36;
    default:
      v22 = 0;
      if (!v17[10])
        goto LABEL_36;
LABEL_29:
      v26 = (_QWORD *)v17[13];
      if (!v26)
        goto LABEL_56;
      break;
  }
  while (1)
  {
    v27 = v26[4];
    if (v22 >= v27)
      break;
LABEL_31:
    v26 = (_QWORD *)*v26;
    if (!v26)
      goto LABEL_56;
  }
  if (v27 < v22)
  {
    ++v26;
    goto LABEL_31;
  }
LABEL_36:
  v28 = (uint64_t *)v17[16];
  if (v28)
  {
    v29 = v17 + 16;
    v30 = (_QWORD *)v17[16];
    do
    {
      v31 = v30[4];
      v32 = v31 >= v22;
      if (v31 >= v22)
        v33 = v30;
      else
        v33 = v30 + 1;
      if (v32)
        v29 = v30;
      v30 = (_QWORD *)*v33;
    }
    while (*v33);
    if (v29 != v17 + 16 && v22 >= v29[4])
    {
      v34 = (uint64_t *)v29[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        v36 = v29;
        do
        {
          v35 = (uint64_t *)v36[2];
          v15 = *v35 == (_QWORD)v36;
          v36 = v35;
        }
        while (!v15);
      }
      if ((uint64_t *)v17[15] == v29)
        v17[15] = (uint64_t)v35;
      --v17[17];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v28, v29);
      operator delete(v29);
    }
  }
LABEL_56:
  if (SymbolNotEnforcingDepsHelper != 1)
    v21 = (uint64_t *)(*(uint64_t (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
  if (!v21)
  {
    v37 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)v218, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 6516);
    v38 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v37, "CHECK failed: options_descriptor: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v203, v38);
    google::protobuf::internal::LogMessage::~LogMessage((void **)v218);
  }
  v215 = 0;
  v216 = 0;
  v217 = 0;
  *((_BYTE *)&v214.__r_.__value_.__s + 23) = 0;
  v214.__r_.__value_.__s.__data_[0] = 0;
  __p = 0;
  v212 = 0;
  v213 = 0;
  v39 = *(const void **)a4;
  v40 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v40)
  {
    if (v40 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    __p = operator new(v40);
    v212 = (char *)__p;
    v41 = (char *)__p + 4 * (v40 >> 2);
    v213 = (unint64_t)v41;
    memcpy(__p, v39, v40);
    v212 = v41;
  }
  if (*(int *)(a1[2] + 32) >= 1)
  {
    v42 = 0;
    v43 = 0;
    __src = &v214.__r_.__value_.__s.__data_[1];
    while (1)
    {
      v45 = *a1;
      if (*(char *)(*a1 + 199) < 0)
      {
        **(_BYTE **)(v45 + 176) = 0;
        *(_QWORD *)(v45 + 184) = 0;
      }
      else
      {
        *(_BYTE *)(v45 + 176) = 0;
        *(_BYTE *)(v45 + 199) = 0;
      }
      v46 = *(_QWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption_NamePart>::TypeHandler>(a1[2] + 24, v42)+ 24);
      size = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v214.__r_.__value_.__l.__size_;
      if (size)
        std::string::append(&v214, ".");
      if (*(_BYTE *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption_NamePart>::TypeHandler>(a1[2] + 24, v42)+ 32))break;
      v56 = *(char *)(v46 + 23);
      if (v56 >= 0)
        v57 = (const std::string::value_type *)v46;
      else
        v57 = *(const std::string::value_type **)v46;
      if (v56 >= 0)
        v58 = *(unsigned __int8 *)(v46 + 23);
      else
        v58 = *(_QWORD *)(v46 + 8);
      std::string::append(&v214, v57, v58);
      NestedSymbol = (google::protobuf::DescriptorBuilder::OptionInterpreter *)google::protobuf::FileDescriptorTables::FindNestedSymbol(*(_QWORD **)(v21[2] + 144), v21, v46);
      if ((_DWORD)NestedSymbol != 2 || (v43 = v59, *(_BYTE *)(v59 + 67)))
      {
LABEL_175:
        v127 = *a1;
        if (!*(_BYTE *)(*(_QWORD *)*a1 + 42))
        {
          if ((*(char *)(v127 + 199) & 0x80000000) == 0)
          {
            if (*(_BYTE *)(v127 + 199))
              goto LABEL_178;
LABEL_229:
            std::operator+<char>();
            v172 = std::string::append(&v210, "\" unknown. Ensure that your proto");
            v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
            v203.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v173;
            v172->__r_.__value_.__l.__size_ = 0;
            v172->__r_.__value_.__r.__words[2] = 0;
            v172->__r_.__value_.__r.__words[0] = 0;
            v174 = std::string::append(&v203, " definition file imports the proto which defines the option.");
            v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
            *(_QWORD *)&v218[16] = *((_QWORD *)&v174->__r_.__value_.__l + 2);
            *(_OWORD *)v218 = v175;
            v174->__r_.__value_.__l.__size_ = 0;
            v174->__r_.__value_.__r.__words[2] = 0;
            v174->__r_.__value_.__r.__words[0] = 0;
            google::protobuf::DescriptorBuilder::AddError(*a1, (const std::string::value_type *)(a1[1] + 24), a1[2], 7, v218);
            if ((v218[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v218);
              if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_231;
            }
            else if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_231:
              if ((SHIBYTE(v210.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_292;
LABEL_290:
              v148 = (void *)v210.__r_.__value_.__r.__words[0];
LABEL_291:
              operator delete(v148);
              goto LABEL_292;
            }
            operator delete(v203.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v210.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_292;
            goto LABEL_290;
          }
          if (!*(_QWORD *)(v127 + 184))
            goto LABEL_229;
LABEL_178:
          std::operator+<char>();
          v128 = std::string::append(&v207, "\" is resolved to \"(");
          v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
          v208.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v129;
          v128->__r_.__value_.__l.__size_ = 0;
          v128->__r_.__value_.__r.__words[2] = 0;
          v128->__r_.__value_.__r.__words[0] = 0;
          v130 = *(char *)(*a1 + 199);
          if (v130 >= 0)
            v131 = (const std::string::value_type *)(*a1 + 176);
          else
            v131 = *(const std::string::value_type **)(*a1 + 176);
          if (v130 >= 0)
            v132 = *(unsigned __int8 *)(*a1 + 199);
          else
            v132 = *(_QWORD *)(*a1 + 184);
          v133 = std::string::append(&v208, v131, v132);
          v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
          v209.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v134;
          v133->__r_.__value_.__l.__size_ = 0;
          v133->__r_.__value_.__r.__words[2] = 0;
          v133->__r_.__value_.__r.__words[0] = 0;
          v135 = std::string::append(&v209, ")\", which is not defined. The innermost scope is searched first in name resolution. Consider using a leading '.'(i.e., \"(.");
          v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
          v210.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v136;
          v135->__r_.__value_.__l.__size_ = 0;
          v135->__r_.__value_.__r.__words[2] = 0;
          v135->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
          {
            v137 = v214.__r_.__value_.__l.__size_;
            if (!v214.__r_.__value_.__l.__size_)
              goto LABEL_305;
            __src = (std::string::value_type *)(v214.__r_.__value_.__r.__words[0] + 1);
          }
          else
          {
            v137 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
            if (!*((_BYTE *)&v214.__r_.__value_.__s + 23))
LABEL_305:
              std::string::__throw_out_of_range[abi:ne180100]();
          }
          v176 = v137 - 1;
          if (v137 - 1 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          if (v176 >= 0x17)
          {
            v178 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v176 | 7) != 0x17)
              v178 = v176 | 7;
            v179 = v178 + 1;
            p_dst = (void **)operator new(v178 + 1);
            v205 = v176;
            v206 = v179 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v206) = v137 - 1;
            p_dst = (void **)&__dst;
            if (v137 == 1)
            {
LABEL_247:
              *((_BYTE *)p_dst + v176) = 0;
              if (v206 >= 0)
                v180 = (const std::string::value_type *)&__dst;
              else
                v180 = (const std::string::value_type *)__dst;
              if (v206 >= 0)
                v181 = HIBYTE(v206);
              else
                v181 = v205;
              v182 = std::string::append(&v210, v180, v181);
              v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
              v203.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v183;
              v182->__r_.__value_.__l.__size_ = 0;
              v182->__r_.__value_.__r.__words[2] = 0;
              v182->__r_.__value_.__r.__words[0] = 0;
              v184 = std::string::append(&v203, "\") to start from the outermost scope.");
              v185 = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
              *(_QWORD *)&v218[16] = *((_QWORD *)&v184->__r_.__value_.__l + 2);
              *(_OWORD *)v218 = v185;
              v184->__r_.__value_.__l.__size_ = 0;
              v184->__r_.__value_.__r.__words[2] = 0;
              v184->__r_.__value_.__r.__words[0] = 0;
              google::protobuf::DescriptorBuilder::AddError(*a1, (const std::string::value_type *)(a1[1] + 24), a1[2], 7, v218);
              if ((v218[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v218);
                if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_262;
LABEL_255:
                if ((SHIBYTE(v206) & 0x80000000) == 0)
                  goto LABEL_256;
LABEL_263:
                operator delete(__dst);
                if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_264;
LABEL_257:
                if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_258;
LABEL_265:
                operator delete(v209.__r_.__value_.__l.__data_);
                if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_266;
LABEL_259:
                if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_292;
              }
              else
              {
                if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_255;
LABEL_262:
                operator delete(v203.__r_.__value_.__l.__data_);
                if (SHIBYTE(v206) < 0)
                  goto LABEL_263;
LABEL_256:
                if ((SHIBYTE(v210.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_257;
LABEL_264:
                operator delete(v210.__r_.__value_.__l.__data_);
                if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_265;
LABEL_258:
                if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_259;
LABEL_266:
                operator delete(v208.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_292;
              }
              v148 = (void *)v207.__r_.__value_.__r.__words[0];
              goto LABEL_291;
            }
          }
          memmove(p_dst, __src, v176);
          goto LABEL_247;
        }
LABEL_192:
        google::protobuf::DescriptorBuilder::OptionInterpreter::AddWithoutInterpreting(NestedSymbol, (const google::protobuf::UninterpretedOption *)a1[2], a2);
        v24 = 1;
        goto LABEL_293;
      }
LABEL_98:
      v60 = *(_QWORD *)(v43 + 80);
      if ((uint64_t *)v60 != v21)
      {
        if (*(_BYTE *)(v60 + 140))
          goto LABEL_192;
        std::operator+<char>();
        v149 = std::string::append(&v209, "\" is not a field or extension of message \"");
        v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
        v210.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v150;
        v149->__r_.__value_.__l.__size_ = 0;
        v149->__r_.__value_.__r.__words[2] = 0;
        v149->__r_.__value_.__r.__words[0] = 0;
        v151 = *(char *)(*v21 + 23);
        if (v151 >= 0)
          v152 = (const std::string::value_type *)*v21;
        else
          v152 = *(const std::string::value_type **)*v21;
        if (v151 >= 0)
          v153 = *(unsigned __int8 *)(*v21 + 23);
        else
          v153 = *(_QWORD *)(*v21 + 8);
        v154 = std::string::append(&v210, v152, v153);
        v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
        v203.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v155;
        v154->__r_.__value_.__l.__size_ = 0;
        v154->__r_.__value_.__r.__words[2] = 0;
        v154->__r_.__value_.__r.__words[0] = 0;
        v156 = std::string::append(&v203, "\".");
        v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
        *(_QWORD *)&v218[16] = *((_QWORD *)&v156->__r_.__value_.__l + 2);
        *(_OWORD *)v218 = v157;
        v156->__r_.__value_.__l.__size_ = 0;
        v156->__r_.__value_.__r.__words[2] = 0;
        v156->__r_.__value_.__r.__words[0] = 0;
        google::protobuf::DescriptorBuilder::AddError(*a1, (const std::string::value_type *)(a1[1] + 24), a1[2], 7, v218);
        if ((v218[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v218);
          if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_234;
LABEL_207:
          if ((SHIBYTE(v210.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_208;
LABEL_235:
          operator delete(v210.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_292;
        }
        else
        {
          if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_207;
LABEL_234:
          operator delete(v203.__r_.__value_.__l.__data_);
          if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_235;
LABEL_208:
          if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_292;
        }
        v148 = (void *)v209.__r_.__value_.__r.__words[0];
        goto LABEL_291;
      }
      v61 = *(_DWORD *)(v43 + 68);
      v62 = v212;
      if ((unint64_t)v212 < v213)
      {
        *(_DWORD *)v212 = v61;
        v63 = v62 + 4;
        goto LABEL_122;
      }
      v64 = (char *)__p;
      v65 = v212 - (_BYTE *)__p;
      v66 = (v212 - (_BYTE *)__p) >> 2;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 62)
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      v68 = v213 - (_QWORD)__p;
      if ((uint64_t)(v213 - (_QWORD)__p) >> 1 > v67)
        v67 = v68 >> 1;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
        v69 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      if (v69)
      {
        if (v69 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v70 = operator new(4 * v69);
        v71 = &v70[4 * v66];
        *(_DWORD *)v71 = v61;
        v63 = v71 + 4;
        if (v62 == v64)
          goto LABEL_120;
LABEL_114:
        v73 = v62 - 4 - v64;
        if (v73 < 0x2C)
          goto LABEL_311;
        if ((unint64_t)(v62 - &v70[v65]) < 0x20)
          goto LABEL_311;
        v74 = (v73 >> 2) + 1;
        v75 = 4 * (v74 & 0x7FFFFFFFFFFFFFF8);
        v76 = &v62[-v75];
        v71 -= v75;
        v77 = &v70[v65 - 16];
        v78 = v62 - 16;
        v79 = v74 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 8;
        }
        while (v79);
        v62 = v76;
        if (v74 != (v74 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_311:
          do
          {
            v81 = *((_DWORD *)v62 - 1);
            v62 -= 4;
            *((_DWORD *)v71 - 1) = v81;
            v71 -= 4;
          }
          while (v62 != v64);
        }
        goto LABEL_120;
      }
      v70 = 0;
      v71 = (char *)(4 * v66);
      v72 = (_DWORD *)(4 * v66);
      *v72 = v61;
      v63 = (char *)(v72 + 1);
      if (v62 != v64)
        goto LABEL_114;
LABEL_120:
      __p = v71;
      v212 = v63;
      v213 = (unint64_t)&v70[4 * v69];
      if (v64)
        operator delete(v64);
LABEL_122:
      v212 = v63;
      v44 = *(_DWORD *)(a1[2] + 32);
      if (v42 < v44 - 1)
      {
        v82 = *(unint64_t **)(v43 + 48);
        if (v82)
        {
          v210.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
          v209.__r_.__value_.__r.__words[0] = v43;
          v83 = atomic_load(v82);
          if (v83 != -1)
          {
            *(_QWORD *)v218 = &v210;
            *(_QWORD *)&v218[8] = &v209;
            v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v218;
            std::__call_once(v82, &v203, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
        }
        if ((*(_DWORD *)(v43 + 56) & 0xFFFFFFFE) != 0xA)
        {
          std::operator+<char>();
          v144 = std::string::append(&v203, "\" is an atomic type, not a message.");
          v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
          *(_QWORD *)&v218[16] = *((_QWORD *)&v144->__r_.__value_.__l + 2);
          *(_OWORD *)v218 = v145;
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          google::protobuf::DescriptorBuilder::AddError(*a1, (const std::string::value_type *)(a1[1] + 24), a1[2], 7, v218);
          goto LABEL_195;
        }
        if (*(_DWORD *)(v43 + 60) == 3)
        {
          std::operator+<char>();
          v146 = std::string::append(&v203, "\" is a repeated message. Repeated message options must be initialized using an aggregate value.");
          v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
          *(_QWORD *)&v218[16] = *((_QWORD *)&v146->__r_.__value_.__l + 2);
          *(_OWORD *)v218 = v147;
          v146->__r_.__value_.__l.__size_ = 0;
          v146->__r_.__value_.__r.__words[2] = 0;
          v146->__r_.__value_.__r.__words[0] = 0;
          google::protobuf::DescriptorBuilder::AddError(*a1, (const std::string::value_type *)(a1[1] + 24), a1[2], 7, v218);
LABEL_195:
          if ((v218[23] & 0x80000000) != 0)
            operator delete(*(void **)v218);
          if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
          {
            v148 = (void *)v203.__r_.__value_.__r.__words[0];
            goto LABEL_291;
          }
LABEL_292:
          v24 = 0;
          goto LABEL_293;
        }
        v84 = v216;
        if (v216 < v217)
        {
          *v216 = v43;
          v85 = v84 + 1;
          goto LABEL_150;
        }
        v86 = v215;
        v87 = v216 - v215;
        v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 61)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v89 = (char *)v217 - (char *)v215;
        if (((char *)v217 - (char *)v215) >> 2 > v88)
          v88 = v89 >> 2;
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v88;
        if (v90)
        {
          if (v90 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v91 = operator new(8 * v90);
          v92 = (uint64_t *)&v91[8 * v87];
          *v92 = v43;
          v85 = v92 + 1;
          if (v84 != v86)
            goto LABEL_139;
LABEL_148:
          v215 = v92;
          v217 = (uint64_t *)&v91[8 * v90];
          if (v84)
            goto LABEL_149;
        }
        else
        {
          v91 = 0;
          v92 = (uint64_t *)(8 * v87);
          v102 = (uint64_t *)(8 * v87);
          *v102 = v43;
          v85 = v102 + 1;
          if (v84 == v86)
            goto LABEL_148;
LABEL_139:
          v93 = (char *)(v84 - 1) - (char *)v86;
          if (v93 < 0x58)
            goto LABEL_312;
          if ((unint64_t)((char *)v86 - v91) < 0x20)
            goto LABEL_312;
          v94 = (v93 >> 3) + 1;
          v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
          v96 = (char *)&v84[v95 / 0xFFFFFFFFFFFFFFF8];
          v92 = (uint64_t *)((char *)v92 - v95);
          v97 = &v91[(char *)v84 - (char *)v86 - 16];
          v98 = v84 - 2;
          v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v100 = *(_OWORD *)v98;
            *(v97 - 1) = *((_OWORD *)v98 - 1);
            *v97 = v100;
            v97 -= 2;
            v98 -= 4;
            v99 -= 4;
          }
          while (v99);
          v84 = (uint64_t *)v96;
          if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_312:
            do
            {
              v101 = *--v84;
              *--v92 = v101;
            }
            while (v84 != v86);
          }
          v84 = v215;
          v215 = v92;
          v217 = (uint64_t *)&v91[8 * v90];
          if (!v84)
            goto LABEL_150;
LABEL_149:
          operator delete(v84);
        }
LABEL_150:
        v216 = v85;
        v103 = *(unint64_t **)(v43 + 48);
        if (v103)
        {
          v210.__r_.__value_.__r.__words[0] = v43;
          v104 = atomic_load(v103);
          if (v104 != -1)
          {
            *(_QWORD *)v218 = google::protobuf::FieldDescriptor::TypeOnceInit;
            *(_QWORD *)&v218[8] = &v210;
            v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v218;
            std::__call_once(v103, &v203, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
        }
        v21 = *(uint64_t **)(v43 + 104);
        v44 = *(_DWORD *)(a1[2] + 32);
      }
      if (++v42 >= v44)
        goto LABEL_154;
    }
    std::operator+<char>();
    v48 = std::string::append(&v203, ")");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    *(_QWORD *)&v218[16] = *((_QWORD *)&v48->__r_.__value_.__l + 2);
    *(_OWORD *)v218 = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    if (v218[23] >= 0)
      v50 = v218;
    else
      v50 = *(const std::string::value_type **)v218;
    if (v218[23] >= 0)
      v51 = v218[23];
    else
      v51 = *(_QWORD *)&v218[8];
    std::string::append(&v214, v50, v51);
    if ((v218[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v218);
      if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_83;
    }
    else if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_83;
    }
    operator delete(v203.__r_.__value_.__l.__data_);
LABEL_83:
    v52 = *a1;
    NestedSymbol = (google::protobuf::DescriptorBuilder::OptionInterpreter *)google::protobuf::DescriptorBuilder::LookupSymbolNoPlaceholder(*a1, (std::string *)v46, a1[1], 0, 1);
    v55 = NestedSymbol;
    if (!(_DWORD)NestedSymbol)
    {
      NestedSymbol = *(google::protobuf::DescriptorBuilder::OptionInterpreter **)v52;
      if (!*(_BYTE *)(*(_QWORD *)v52 + 42))
        goto LABEL_88;
      NestedSymbol = (google::protobuf::DescriptorBuilder::OptionInterpreter *)google::protobuf::DescriptorPool::NewPlaceholderWithMutexHeld((uint64_t)NestedSymbol, v46, 0);
      v55 = NestedSymbol;
    }
    if (v55 == 2)
      v43 = v54;
LABEL_88:
    if (!v43)
      goto LABEL_175;
    goto LABEL_98;
  }
  v43 = 0;
LABEL_154:
  if (*(_DWORD *)(v43 + 60) != 3)
  {
    v105 = v215;
    v106 = v216;
    (*(void (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
    UnknownFields = google::protobuf::Reflection::GetUnknownFields(v107, a2);
    if (!google::protobuf::DescriptorBuilder::OptionInterpreter::ExamineIfOptionIsSet(a1, v105, v106, v43, (uint64_t)&v214, UnknownFields))goto LABEL_292;
  }
  v109 = (google::protobuf::UnknownFieldSet *)operator new();
  *(_QWORD *)v109 = 0;
  *((_QWORD *)v109 + 1) = 0;
  *((_QWORD *)v109 + 2) = 0;
  v207.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
  if ((google::protobuf::DescriptorBuilder::OptionInterpreter::SetOptionValue((google::protobuf::DescriptorBuilder::OptionInterpreter *)a1, (const google::protobuf::FieldDescriptor *)v43, v109) & 1) == 0)
  {
    v24 = 0;
    goto LABEL_282;
  }
  v110 = v216;
  if (v216 == v215)
  {
LABEL_188:
    (*(void (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
    v139 = (google::protobuf::UnknownFieldSet *)google::protobuf::Reflection::MutableUnknownFields(v138, a2);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v139, (const google::protobuf::UnknownFieldSet *)v207.__r_.__value_.__l.__data_);
    if (*(_DWORD *)(v43 + 60) == 3)
    {
      *(_QWORD *)v218 = &__p;
      v140 = std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)(a1 + 6), (int **)&__p, (uint64_t)&std::piecewise_construct, (uint64_t *)v218);
      v141 = *((_DWORD *)v140 + 14);
      *((_DWORD *)v140 + 14) = v141 + 1;
      v142 = v212;
      if ((unint64_t)v212 >= v213)
      {
        v165 = (char *)__p;
        v166 = v212 - (_BYTE *)__p;
        v167 = (v212 - (_BYTE *)__p) >> 2;
        v168 = v167 + 1;
        if ((unint64_t)(v167 + 1) >> 62)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v169 = v213 - (_QWORD)__p;
        if ((uint64_t)(v213 - (_QWORD)__p) >> 1 > v168)
          v168 = v169 >> 1;
        if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
          v170 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v170 = v168;
        if (v170)
        {
          if (v170 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v171 = operator new(4 * v170);
        }
        else
        {
          v171 = 0;
        }
        v186 = &v171[4 * v167];
        *(_DWORD *)v186 = v141;
        v143 = v186 + 4;
        if (v142 != v165)
        {
          v187 = v142 - v165 - 4;
          if (v187 < 0x2C)
            goto LABEL_313;
          if ((unint64_t)(v142 - v171 - v166) < 0x20)
            goto LABEL_313;
          v188 = (v187 >> 2) + 1;
          v189 = 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
          v190 = &v142[-v189];
          v186 -= v189;
          v191 = &v171[v166 - 16];
          v192 = v142 - 16;
          v193 = v188 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v194 = *(_OWORD *)v192;
            *(v191 - 1) = *((_OWORD *)v192 - 1);
            *v191 = v194;
            v191 -= 2;
            v192 -= 32;
            v193 -= 8;
          }
          while (v193);
          v142 = v190;
          if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_313:
            do
            {
              v195 = *((_DWORD *)v142 - 1);
              v142 -= 4;
              *((_DWORD *)v186 - 1) = v195;
              v186 -= 4;
            }
            while (v142 != v165);
          }
        }
        __p = v186;
        v212 = v143;
        v213 = (unint64_t)&v171[4 * v170];
        if (v165)
          operator delete(v165);
      }
      else
      {
        *(_DWORD *)v212 = v141;
        v143 = v142 + 4;
      }
      v212 = v143;
    }
    *(_QWORD *)v218 = a3;
    v196 = std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)(a1 + 3), a3, (uint64_t)&std::piecewise_construct, (uint64_t *)v218)+ 7;
    if (v196 != (uint64_t *)&__p)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v196, (char *)__p, v212, (v212 - (_BYTE *)__p) >> 2);
    v24 = 1;
    goto LABEL_282;
  }
  while (1)
  {
    v111 = (void **)operator new();
    *v111 = 0;
    v111[1] = 0;
    v111[2] = 0;
    __dst = v111;
    v113 = v110 - 1;
    v112 = *(v110 - 1);
    v114 = *(unint64_t **)(v112 + 48);
    if (v114)
    {
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      v209.__r_.__value_.__r.__words[0] = v112;
      v115 = atomic_load(v114);
      if (v115 != -1)
      {
        *(_QWORD *)v218 = &v210;
        *(_QWORD *)&v218[8] = &v209;
        v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v218;
        std::__call_once(v114, &v203, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    v116 = *(_DWORD *)(v112 + 56);
    if (v116 != 10)
      break;
    v117 = (std::string::size_type)__dst;
    v125 = (google::protobuf::UnknownFieldSet *)google::protobuf::UnknownFieldSet::AddGroup((google::protobuf::UnknownFieldSet *)__dst, *(_DWORD *)(*(v110 - 1) + 68));
    v119 = (google::protobuf::UnknownFieldSet *)v207.__r_.__value_.__r.__words[0];
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v125, (const google::protobuf::UnknownFieldSet *)v207.__r_.__value_.__l.__data_);
LABEL_170:
    __dst = 0;
    v207.__r_.__value_.__r.__words[0] = v117;
    if (v119)
    {
      v126 = *(void **)v119;
      if (*(_QWORD *)v119 != *((_QWORD *)v119 + 1))
      {
        google::protobuf::UnknownFieldSet::ClearFallback(v119);
        v126 = *(void **)v119;
      }
      if (v126)
      {
        *((_QWORD *)v119 + 1) = v126;
        operator delete(v126);
      }
      MEMORY[0x22E31DF78](v119, 0x20C40960023A9);
    }
    v110 = v113;
    if (v113 == v215)
      goto LABEL_188;
  }
  if (v116 == 11)
  {
    v117 = (std::string::size_type)__dst;
    v118 = google::protobuf::UnknownFieldSet::AddLengthDelimited((google::protobuf::UnknownFieldSet *)__dst, *(_DWORD *)(*(v110 - 1) + 68));
    google::protobuf::io::StringOutputStream::StringOutputStream(&v210, (uint64_t)v118);
    google::protobuf::io::CodedOutputStream::CodedOutputStream((uint64_t)v218, (uint64_t)&v210, 1);
    v119 = (google::protobuf::UnknownFieldSet *)v207.__r_.__value_.__r.__words[0];
    v219 = google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)v207.__r_.__value_.__l.__data_, v219, (google::protobuf::io::EpsCopyOutputStream *)v218, v120);
    if (google::protobuf::io::CodedOutputStream::HadError((char **)v218))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v203, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 6655);
      v121 = google::protobuf::internal::LogMessage::operator<<(&v203, "CHECK failed: !out.HadError(): ");
      v122 = google::protobuf::internal::LogMessage::operator<<(v121, "Unexpected failure while serializing option submessage ");
      v123 = google::protobuf::internal::LogMessage::operator<<(v122, (const std::string::value_type *)&v214);
      v124 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v123, "\".");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v209, v124);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v203.__r_.__value_.__l.__data_);
    }
    google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v218);
    goto LABEL_170;
  }
  v158 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)v218, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 6668);
  v159 = google::protobuf::internal::LogMessage::operator<<(v158, "Invalid wire type for CPPTYPE_MESSAGE: ");
  v160 = *(v110 - 1);
  v161 = *(unint64_t **)(v160 + 48);
  if (v161)
  {
    v209.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
    v208.__r_.__value_.__r.__words[0] = v160;
    v162 = atomic_load(v161);
    if (v162 != -1)
    {
      v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
      v203.__r_.__value_.__l.__size_ = (std::string::size_type)&v208;
      v210.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
      std::__call_once(v161, &v210, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  v163 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v159, *(_DWORD *)(v160 + 56));
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v203, v163);
  google::protobuf::internal::LogMessage::~LogMessage((void **)v218);
  v24 = (uint64_t)__dst;
  __dst = 0;
  if (v24)
  {
    v164 = *(void **)v24;
    if (*(_QWORD *)v24 != *(_QWORD *)(v24 + 8))
    {
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)v24);
      v164 = *(void **)v24;
    }
    if (v164)
    {
      *(_QWORD *)(v24 + 8) = v164;
      operator delete(v164);
    }
    MEMORY[0x22E31DF78](v24, 0x20C40960023A9);
    v24 = 0;
  }
LABEL_282:
  v197 = (google::protobuf::UnknownFieldSet *)v207.__r_.__value_.__r.__words[0];
  v207.__r_.__value_.__r.__words[0] = 0;
  if (v197)
  {
    v198 = *(void **)v197;
    if (*(_QWORD *)v197 != *((_QWORD *)v197 + 1))
    {
      google::protobuf::UnknownFieldSet::ClearFallback(v197);
      v198 = *(void **)v197;
    }
    if (v198)
    {
      *((_QWORD *)v197 + 1) = v198;
      operator delete(v198);
    }
    MEMORY[0x22E31DF78](v197, 0x20C40960023A9);
  }
LABEL_293:
  if (__p)
  {
    v212 = (char *)__p;
    operator delete(__p);
  }
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v214.__r_.__value_.__l.__data_);
  if (v215)
    operator delete(v215);
  return v24;
}

void sub_22DC550E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::DescriptorBuilder::OptionInterpreter::AddWithoutInterpreting(google::protobuf::DescriptorBuilder::OptionInterpreter *this, const google::protobuf::UninterpretedOption *a2, google::protobuf::Message *a3)
{
  uint64_t *v5;
  uint64_t v6;
  const std::string::value_type **v7;
  unsigned int *v8;
  const std::string::value_type ***v9;
  const char *v10;
  uint64_t v11;
  char v13;
  std::string __p[2];

  v5 = (uint64_t *)(*(uint64_t (**)(google::protobuf::Message *))(*(_QWORD *)a3 + 152))(a3);
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 20;
  strcpy((char *)__p, "uninterpreted_option");
  if (google::protobuf::FileDescriptorTables::FindNestedSymbol(*(_QWORD **)(v5[2] + 144), v5, (uint64_t)__p) == 2)
  {
    if (*(_BYTE *)(v6 + 67))
      v7 = 0;
    else
      v7 = (const std::string::value_type **)v6;
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_6:
      if (!v7)
        goto LABEL_10;
      goto LABEL_11;
    }
  }
  else
  {
    v7 = 0;
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v7)
  {
LABEL_10:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 6787);
    v8 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: field != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, v8);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
LABEL_11:
  (*(void (**)(google::protobuf::Message *))(*(_QWORD *)a3 + 152))(a3);
  v11 = google::protobuf::Reflection::AddMessage(v9, a3, v7, 0, v10);
  return (*(uint64_t (**)(uint64_t, const google::protobuf::UninterpretedOption *))(*(_QWORD *)v11 + 112))(v11, a2);
}

void sub_22DC555E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC555FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL google::protobuf::DescriptorBuilder::OptionInterpreter::ExamineIfOptionIsSet(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  const void *v23;
  int v24;
  void *v25;
  int v26;
  _BOOL8 v27;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  unsigned int *v37;
  void *v38;
  uint64_t *v39;
  std::string __p[2];
  std::string v41;
  uint64_t v42;
  uint64_t (*v43)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);

  v9 = *(_DWORD **)a6;
  v10 = *(_QWORD *)(a6 + 8) - *(_QWORD *)a6;
  v11 = (unint64_t)v10 >> 4;
  if (a2 != a3)
  {
    if ((int)v11 >= 1)
    {
      v15 = 0;
      v16 = 0;
      v39 = a2 + 1;
      do
      {
        v17 = *a2;
        if (v9[v15] == *(_DWORD *)(*a2 + 68))
        {
          v18 = *(unint64_t **)(v17 + 48);
          if (v18)
          {
            v43 = google::protobuf::FieldDescriptor::TypeOnceInit;
            v42 = v17;
            v19 = atomic_load(v18);
            if (v19 != -1)
            {
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
              __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v42;
              v41.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              std::__call_once(v18, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
            }
          }
          v20 = *(_DWORD *)(v17 + 56);
          if (v20 == 10)
          {
            if (v9[v15 + 1] == 4
              && (google::protobuf::DescriptorBuilder::OptionInterpreter::ExamineIfOptionIsSet(a1, v39, a3, a4, a5, *(_QWORD *)&v9[v15 + 2]) & 1) == 0)
            {
              return 0;
            }
          }
          else
          {
            if (v20 != 11)
            {
              google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 6847);
              v36 = google::protobuf::internal::LogMessage::operator<<(__p, "Invalid wire type for CPPTYPE_MESSAGE: ");
              v37 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v36, v20);
              google::protobuf::internal::LogFinisher::operator=((uint64_t)&v41, v37);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
              return 0;
            }
            if (v9[v15 + 1] == 3)
            {
              memset(__p, 0, 24);
              if (v9[v15 + 1] != 3)
                __assert_rtn("length_delimited", "unknown_field_set.h", 358, "type() == TYPE_LENGTH_DELIMITED");
              v21 = *(_QWORD *)&v9[v15 + 2];
              v22 = *(char *)(v21 + 23);
              if (v22 >= 0)
                v23 = *(const void **)&v9[v15 + 2];
              else
                v23 = *(const void **)v21;
              if (v22 >= 0)
                v24 = *(unsigned __int8 *)(v21 + 23);
              else
                v24 = *(_DWORD *)(v21 + 8);
              if (google::protobuf::UnknownFieldSet::ParseFromArray((google::protobuf::UnknownFieldSet *)__p, v23, v24)&& (google::protobuf::DescriptorBuilder::OptionInterpreter::ExamineIfOptionIsSet(a1, v39, a3, a4, a5, __p) & 1) == 0)
              {
                v38 = (void *)__p[0].__r_.__value_.__r.__words[0];
                if (__p[0].__r_.__value_.__r.__words[0] != __p[0].__r_.__value_.__l.__size_)
                {
                  google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)__p);
                  v38 = (void *)__p[0].__r_.__value_.__r.__words[0];
                }
                if (v38)
                {
                  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v38;
                  operator delete(v38);
                }
                return 0;
              }
              v25 = (void *)__p[0].__r_.__value_.__r.__words[0];
              if (__p[0].__r_.__value_.__r.__words[0] != __p[0].__r_.__value_.__l.__size_)
              {
                google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)__p);
                v25 = (void *)__p[0].__r_.__value_.__r.__words[0];
              }
              if (v25)
              {
                __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v25;
                operator delete(v25);
              }
            }
          }
        }
        ++v16;
        v9 = *(_DWORD **)a6;
        v15 += 4;
      }
      while (v16 < (int)((*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 4));
    }
    return 1;
  }
  if ((int)v11 < 1)
    return 1;
  v26 = *(_DWORD *)(a4 + 68);
  if (*v9 == v26)
  {
    v27 = 0;
  }
  else
  {
    v29 = (int)(v10 >> 4);
    v30 = ((unint64_t)v10 >> 4);
    v31 = v9 + 4;
    v32 = 1;
    do
    {
      if (v30 == v32)
        return v32 >= v29;
      v33 = *v31;
      v31 += 4;
      ++v32;
    }
    while (v33 != v26);
    v27 = v32 - 1 >= v29;
  }
  std::operator+<char>();
  v34 = std::string::append(&v41, "\" was already set.");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(*a1, (const std::string::value_type *)(a1[1] + 24), a1[2], 7, (const std::string::value_type *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return v27;
}

void sub_22DC5597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC55990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC559A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if (a26 < 0)
    {
LABEL_5:
      operator delete(a21);
      _Unwind_Resume(a1);
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void sub_22DC559F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::UnknownFieldSet::~UnknownFieldSet((google::protobuf::UnknownFieldSet *)va);
  _Unwind_Resume(a1);
}

void sub_22DC55A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::UnknownFieldSet::~UnknownFieldSet((google::protobuf::UnknownFieldSet *)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorBuilder::OptionInterpreter::SetOptionValue(google::protobuf::DescriptorBuilder::OptionInterpreter *this, const google::protobuf::FieldDescriptor *a2, google::protobuf::UnknownFieldSet *a3)
{
  unint64_t *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  float v41;
  _DWORD *v42;
  int v43;
  const std::string *v44;
  std::string *v45;
  unsigned int v46;
  unint64_t *v47;
  unint64_t v48;
  int64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int NestedSymbol;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  unsigned int v65;
  std::string::size_type size;
  uint64_t v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  _QWORD *v71;
  _QWORD *v72;
  int SymbolNotEnforcingDepsHelper;
  unint64_t v74;
  unint64_t *v75;
  std::string *v76;
  __int128 v77;
  void *v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  _QWORD *v85;
  unint64_t v86;
  BOOL v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  std::string *v92;
  __int128 v93;
  int v94;
  const std::string::value_type *v95;
  std::string::size_type v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  uint64_t v101;
  int v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  char v109;
  std::string *v110;
  __int128 v111;
  int v112;
  const std::string::value_type *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  uint64_t v119;
  int v120;
  const std::string::value_type *v121;
  std::string::size_type v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  __int128 v126;
  google::protobuf::_anonymous_namespace_ *v127;
  void (*v128)(const void *);
  const void *v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;

  v6 = (unint64_t *)*((_QWORD *)a2 + 6);
  if (v6)
  {
    v134.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v7 = atomic_load(v6);
    if (v7 != -1)
    {
      v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
      v136.__r_.__value_.__l.__size_ = (std::string::size_type)&v133;
      v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
      std::__call_once(v6, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  v8 = *((_DWORD *)a2 + 14);
  switch(v8)
  {
    case 1:
      v11 = *((_QWORD *)this + 2);
      v12 = *(_DWORD *)(v11 + 16);
      if ((v12 & 0x20) != 0)
      {
        v23 = *(double *)(v11 + 88);
      }
      else if ((v12 & 8) != 0)
      {
        v23 = (double)*(unint64_t *)(v11 + 72);
      }
      else
      {
        if ((v12 & 0x10) == 0)
          goto LABEL_114;
        v23 = (double)*(uint64_t *)(v11 + 80);
      }
      google::protobuf::UnknownFieldSet::AddFixed64(a3, *((_DWORD *)a2 + 17), *(uint64_t *)&v23);
      return 1;
    case 2:
      v19 = *((_QWORD *)this + 2);
      v20 = *(_DWORD *)(v19 + 16);
      if ((v20 & 0x20) != 0)
      {
        v41 = *(double *)(v19 + 88);
      }
      else if ((v20 & 8) != 0)
      {
        v41 = (float)*(unint64_t *)(v19 + 72);
      }
      else
      {
        if ((v20 & 0x10) == 0)
          goto LABEL_114;
        v41 = (float)*(uint64_t *)(v19 + 80);
      }
      google::protobuf::UnknownFieldSet::AddFixed32(a3, *((_DWORD *)a2 + 17), SLODWORD(v41));
      return 1;
    case 3:
    case 16:
    case 18:
      v17 = *((_QWORD *)this + 2);
      v18 = *(_DWORD *)(v17 + 16);
      if ((v18 & 8) != 0)
      {
        v39 = *(_QWORD *)(v17 + 72);
        if (v39 < 0)
          goto LABEL_114;
        v40 = *((_DWORD *)a2 + 17);
      }
      else
      {
        if ((v18 & 0x10) == 0)
          goto LABEL_114;
        v40 = *((_DWORD *)a2 + 17);
        v39 = *(_QWORD *)(v17 + 80);
      }
      v50 = (unint64_t *)*((_QWORD *)a2 + 6);
      if (v50)
      {
        v134.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v51 = atomic_load(v50);
        if (v51 != -1)
        {
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
          v136.__r_.__value_.__l.__size_ = (std::string::size_type)&v133;
          v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
          std::__call_once(v50, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
        v8 = *((_DWORD *)a2 + 14);
      }
      google::protobuf::DescriptorBuilder::OptionInterpreter::SetInt64((int)v50, v40, v39, v8, a3);
      return 1;
    case 4:
    case 6:
      v15 = *((_QWORD *)this + 2);
      if ((*(_BYTE *)(v15 + 16) & 8) == 0)
        goto LABEL_114;
      v25 = *((_DWORD *)a2 + 17);
      v26 = *(_QWORD *)(v15 + 72);
      v27 = (unint64_t *)*((_QWORD *)a2 + 6);
      if (v27)
      {
        v134.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v28 = atomic_load(v27);
        if (v28 != -1)
        {
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
          v136.__r_.__value_.__l.__size_ = (std::string::size_type)&v133;
          v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
          std::__call_once(v27, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
        v8 = *((_DWORD *)a2 + 14);
      }
      google::protobuf::DescriptorBuilder::OptionInterpreter::SetUInt64((int)v27, v25, v26, v8, a3);
      return 1;
    case 5:
    case 15:
    case 17:
      v9 = *((_QWORD *)this + 2);
      v10 = *(_DWORD *)(v9 + 16);
      if ((v10 & 8) != 0)
      {
        v38 = *(_QWORD *)(v9 + 72);
        if (v38 >> 31)
          goto LABEL_114;
        v52 = *((_DWORD *)a2 + 17);
        v53 = (unint64_t *)*((_QWORD *)a2 + 6);
        if (v53)
        {
          v134.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
          v133.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
          v54 = atomic_load(v53);
          if (v54 != -1)
          {
            v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
            v136.__r_.__value_.__l.__size_ = (std::string::size_type)&v133;
            v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
            std::__call_once(v53, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
          v8 = *((_DWORD *)a2 + 14);
        }
        v55 = v52;
        v56 = v38;
      }
      else
      {
        if ((v10 & 0x10) == 0)
          goto LABEL_114;
        v49 = *(_QWORD *)(v9 + 80);
        if (v49 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
          goto LABEL_114;
        v65 = *((_DWORD *)a2 + 17);
        LODWORD(v53) = google::protobuf::FieldDescriptor::type(a2);
        v55 = v65;
        v56 = v49;
        v8 = (int)v53;
      }
      google::protobuf::DescriptorBuilder::OptionInterpreter::SetInt32((int)v53, v55, v56, v8, a3);
      return 1;
    case 7:
    case 13:
      v14 = *((_QWORD *)this + 2);
      if ((*(_BYTE *)(v14 + 16) & 8) == 0)
        goto LABEL_114;
      v24 = *(_QWORD *)(v14 + 72);
      if (HIDWORD(v24))
        goto LABEL_114;
      v46 = *((_DWORD *)a2 + 17);
      v47 = (unint64_t *)*((_QWORD *)a2 + 6);
      if (v47)
      {
        v134.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v48 = atomic_load(v47);
        if (v48 != -1)
        {
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
          v136.__r_.__value_.__l.__size_ = (std::string::size_type)&v133;
          v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
          std::__call_once(v47, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
        v8 = *((_DWORD *)a2 + 14);
      }
      google::protobuf::DescriptorBuilder::OptionInterpreter::SetUInt32((int)v47, v46, v24, v8, a3);
      return 1;
    case 8:
      v21 = *((_QWORD *)this + 2);
      if ((*(_BYTE *)(v21 + 16) & 1) == 0)
        goto LABEL_114;
      v42 = *(_DWORD **)(v21 + 48);
      if (*((char *)v42 + 23) < 0)
      {
        v60 = *((_QWORD *)v42 + 1);
        if (v60 != 4 || **(_DWORD **)v42 != 1702195828)
        {
          if (v60 != 5)
            goto LABEL_114;
          v42 = *(_DWORD **)v42;
          goto LABEL_87;
        }
      }
      else
      {
        v43 = *((unsigned __int8 *)v42 + 23);
        if (v43 != 4)
        {
          if (v43 != 5)
            goto LABEL_114;
LABEL_87:
          v61 = *v42;
          v62 = *((unsigned __int8 *)v42 + 4);
          v63 = v61 == 1936482662 && v62 == 101;
          if (!v63)
          {
LABEL_114:
            std::operator+<char>();
            v76 = std::string::append(&v135, "\".");
            v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
            v136.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v77;
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            google::protobuf::DescriptorBuilder::AddError(*(_QWORD *)this, (const std::string::value_type *)(*((_QWORD *)this + 1) + 24), *((_QWORD *)this + 2), 8, (const std::string::value_type *)&v136);
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v136.__r_.__value_.__l.__data_);
              if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_118;
            }
            else if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_118:
              v78 = (void *)v135.__r_.__value_.__r.__words[0];
LABEL_119:
              operator delete(v78);
            }
            return 0;
          }
          v64 = 0;
LABEL_123:
          v80 = *((_DWORD *)a2 + 17);
          goto LABEL_184;
        }
        if (*v42 != 1702195828)
          goto LABEL_114;
      }
      v64 = 1;
      goto LABEL_123;
    case 9:
    case 12:
      v22 = *((_QWORD *)this + 2);
      if ((*(_BYTE *)(v22 + 16) & 2) == 0)
        goto LABEL_114;
      v44 = *(const std::string **)(v22 + 56);
      v45 = (std::string *)google::protobuf::UnknownFieldSet::AddLengthDelimited(a3, *((_DWORD *)a2 + 17));
      std::string::operator=(v45, v44);
      return 1;
    case 10:
    case 11:
      result = google::protobuf::DescriptorBuilder::OptionInterpreter::SetAggregateOption(this, (const std::string::value_type ***)a2, a3);
      if (!(_DWORD)result)
        return result;
      return 1;
    case 14:
      v16 = *((_QWORD *)this + 2);
      if ((*(_BYTE *)(v16 + 16) & 1) == 0)
        goto LABEL_114;
      v29 = (unint64_t *)*((_QWORD *)a2 + 6);
      if (v29)
      {
        v134.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v30 = atomic_load(v29);
        if (v30 != -1)
        {
          v136.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
          v136.__r_.__value_.__l.__size_ = (std::string::size_type)&v134;
          v135.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
          std::__call_once(v29, &v135, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
        v16 = *((_QWORD *)this + 2);
      }
      v31 = (uint64_t *)*((_QWORD *)a2 + 14);
      v32 = *(_QWORD *)(v16 + 48);
      v33 = *(_QWORD *)(v31[2] + 16);
      v34 = atomic_load((unsigned __int8 *)&qword_25407B4D8);
      if ((v34 & 1) == 0)
      {
        v127 = (google::protobuf::_anonymous_namespace_ *)__cxa_guard_acquire(&qword_25407B4D8);
        if ((_DWORD)v127)
        {
          google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::OnShutdownDelete<google::protobuf::DescriptorPool>(google::protobuf::DescriptorPool *)::{lambda(void const*)#1}::__invoke, v128, v129);
          _MergedGlobals_31 = (uint64_t)v128;
          __cxa_guard_release(&qword_25407B4D8);
        }
      }
      v35 = _MergedGlobals_31;
      google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fdescriptor_2eproto, 0);
      if (v33 == v35)
      {
        NestedSymbol = google::protobuf::FileDescriptorTables::FindNestedSymbol(*(_QWORD **)(v31[2] + 144), v31, v32);
        if (NestedSymbol == 5)
          v59 = v58;
        else
          v59 = 0;
        if (NestedSymbol == 5)
          goto LABEL_182;
        goto LABEL_186;
      }
      v36 = v31[1];
      if (*(char *)(v36 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v36, *(_QWORD *)(v36 + 8));
      }
      else
      {
        v37 = *(_OWORD *)v36;
        v136.__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 + 16);
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v37;
      }
      size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v136.__r_.__value_.__l.__size_;
      if (*(char *)(*v31 + 23) < 0)
        v67 = *(_QWORD *)(*v31 + 8);
      else
        v67 = *(unsigned __int8 *)(*v31 + 23);
      std::string::resize(&v136, size - v67, 0);
      v68 = *(char *)(v32 + 23);
      if (v68 >= 0)
        v69 = (const std::string::value_type *)v32;
      else
        v69 = *(const std::string::value_type **)v32;
      if (v68 >= 0)
        v70 = *(unsigned __int8 *)(v32 + 23);
      else
        v70 = *(_QWORD *)(v32 + 8);
      std::string::append(&v136, v69, v70);
      v71 = *(_QWORD **)this;
      SymbolNotEnforcingDepsHelper = google::protobuf::DescriptorBuilder::FindSymbolNotEnforcingDepsHelper(*(_QWORD **)this, **(_QWORD **)this, (uint64_t)&v136, 1);
      v59 = v72;
      v74 = (unint64_t)v72;
      switch(SymbolNotEnforcingDepsHelper)
      {
        case 1:
        case 4:
        case 6:
          v75 = v72 + 2;
          goto LABEL_127;
        case 2:
          v75 = v72 + 5;
          goto LABEL_127;
        case 3:
        case 7:
          v79 = v72[2];
          goto LABEL_125;
        case 5:
          v79 = v72[3];
LABEL_125:
          v75 = (unint64_t *)(v79 + 16);
LABEL_127:
          v74 = *v75;
          goto LABEL_128;
        case 8:
LABEL_128:
          if (v74 != v71[10])
            goto LABEL_129;
          goto LABEL_136;
        default:
          v74 = 0;
          if (!v71[10])
            goto LABEL_136;
LABEL_129:
          v81 = (_QWORD *)v71[13];
          if (!v81)
            goto LABEL_156;
          break;
      }
      while (1)
      {
        v82 = v81[4];
        if (v74 >= v82)
          break;
LABEL_131:
        v81 = (_QWORD *)*v81;
        if (!v81)
          goto LABEL_156;
      }
      if (v82 < v74)
      {
        ++v81;
        goto LABEL_131;
      }
LABEL_136:
      v83 = (uint64_t *)v71[16];
      if (v83)
      {
        v84 = v71 + 16;
        v85 = (_QWORD *)v71[16];
        do
        {
          v86 = v85[4];
          v87 = v86 >= v74;
          if (v86 >= v74)
            v88 = v85;
          else
            v88 = v85 + 1;
          if (v87)
            v84 = v85;
          v85 = (_QWORD *)*v88;
        }
        while (*v88);
        if (v84 != v71 + 16 && v74 >= v84[4])
        {
          v89 = (uint64_t *)v84[1];
          if (v89)
          {
            do
            {
              v90 = v89;
              v89 = (uint64_t *)*v89;
            }
            while (v89);
          }
          else
          {
            v91 = v84;
            do
            {
              v90 = (uint64_t *)v91[2];
              v63 = *v90 == (_QWORD)v91;
              v91 = v90;
            }
            while (!v63);
          }
          if ((uint64_t *)v71[15] == v84)
            v71[15] = v90;
          --v71[17];
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v83, v84);
          operator delete(v84);
        }
      }
LABEL_156:
      if (SymbolNotEnforcingDepsHelper != 5)
      {
        v59 = 0;
        goto LABEL_178;
      }
      if ((uint64_t *)v59[3] == v31)
      {
LABEL_178:
        v109 = 1;
        goto LABEL_179;
      }
      std::operator+<char>();
      v92 = std::string::append(&v130, "\" has no value named \"");
      v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v131.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      v94 = *(char *)(v32 + 23);
      if (v94 >= 0)
        v95 = (const std::string::value_type *)v32;
      else
        v95 = *(const std::string::value_type **)v32;
      if (v94 >= 0)
        v96 = *(unsigned __int8 *)(v32 + 23);
      else
        v96 = *(_QWORD *)(v32 + 8);
      v97 = std::string::append(&v131, v95, v96);
      v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
      v132.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v98;
      v97->__r_.__value_.__l.__size_ = 0;
      v97->__r_.__value_.__r.__words[2] = 0;
      v97->__r_.__value_.__r.__words[0] = 0;
      v99 = std::string::append(&v132, "\" for option \"");
      v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      v133.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      v101 = *((_QWORD *)a2 + 1);
      v102 = *(char *)(v101 + 23);
      if (v102 >= 0)
        v103 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      else
        v103 = *(const std::string::value_type **)v101;
      if (v102 >= 0)
        v104 = *(unsigned __int8 *)(v101 + 23);
      else
        v104 = *(_QWORD *)(v101 + 8);
      v105 = std::string::append(&v133, v103, v104);
      v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
      v134.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v106;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v105->__r_.__value_.__r.__words[0] = 0;
      v107 = std::string::append(&v134, "\". This appears to be a value from a sibling type.");
      v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
      v135.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v108;
      v107->__r_.__value_.__l.__size_ = 0;
      v107->__r_.__value_.__r.__words[2] = 0;
      v107->__r_.__value_.__r.__words[0] = 0;
      google::protobuf::DescriptorBuilder::AddError(*(_QWORD *)this, (const std::string::value_type *)(*((_QWORD *)this + 1) + 24), *((_QWORD *)this + 2), 8, (const std::string::value_type *)&v135);
      if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_172;
LABEL_212:
        operator delete(v134.__r_.__value_.__l.__data_);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_213;
LABEL_173:
        if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_174;
LABEL_214:
        operator delete(v132.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_215;
LABEL_175:
        if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_176;
LABEL_216:
        operator delete(v130.__r_.__value_.__l.__data_);
        goto LABEL_176;
      }
      operator delete(v135.__r_.__value_.__l.__data_);
      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_212;
LABEL_172:
      if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_173;
LABEL_213:
      operator delete(v133.__r_.__value_.__l.__data_);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_214;
LABEL_174:
      if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_175;
LABEL_215:
      operator delete(v131.__r_.__value_.__l.__data_);
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_216;
LABEL_176:
      v109 = 0;
      v59 = 0;
LABEL_179:
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v136.__r_.__value_.__l.__data_);
      if ((v109 & 1) == 0)
        return 0;
LABEL_182:
      if (!v59)
      {
LABEL_186:
        google::protobuf::FieldDescriptor::enum_type(a2);
        std::operator+<char>();
        v110 = std::string::append(&v131, "\" has no value named \"");
        v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v132.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        v112 = *(char *)(v32 + 23);
        if (v112 >= 0)
          v113 = (const std::string::value_type *)v32;
        else
          v113 = *(const std::string::value_type **)v32;
        if (v112 >= 0)
          v114 = *(unsigned __int8 *)(v32 + 23);
        else
          v114 = *(_QWORD *)(v32 + 8);
        v115 = std::string::append(&v132, v113, v114);
        v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
        v133.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v116;
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        v117 = std::string::append(&v133, "\" for option \"");
        v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
        v134.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v118;
        v117->__r_.__value_.__l.__size_ = 0;
        v117->__r_.__value_.__r.__words[2] = 0;
        v117->__r_.__value_.__r.__words[0] = 0;
        v119 = *((_QWORD *)a2 + 1);
        v120 = *(char *)(v119 + 23);
        if (v120 >= 0)
          v121 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
        else
          v121 = *(const std::string::value_type **)v119;
        if (v120 >= 0)
          v122 = *(unsigned __int8 *)(v119 + 23);
        else
          v122 = *(_QWORD *)(v119 + 8);
        v123 = std::string::append(&v134, v121, v122);
        v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        v135.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        v125 = std::string::append(&v135, "\".");
        v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
        v136.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v126;
        v125->__r_.__value_.__l.__size_ = 0;
        v125->__r_.__value_.__r.__words[2] = 0;
        v125->__r_.__value_.__r.__words[0] = 0;
        google::protobuf::DescriptorBuilder::AddError(*(_QWORD *)this, (const std::string::value_type *)(*((_QWORD *)this + 1) + 24), *((_QWORD *)this + 2), 8, (const std::string::value_type *)&v136);
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v136.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_200:
            if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_201;
            goto LABEL_207;
          }
        }
        else if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_200;
        }
        operator delete(v135.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_201:
          if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_202;
          goto LABEL_208;
        }
LABEL_207:
        operator delete(v134.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_202:
          if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_203;
          goto LABEL_209;
        }
LABEL_208:
        operator delete(v133.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_203:
          if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return 0;
LABEL_210:
          v78 = (void *)v131.__r_.__value_.__r.__words[0];
          goto LABEL_119;
        }
LABEL_209:
        operator delete(v132.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return 0;
        goto LABEL_210;
      }
      v80 = *((_DWORD *)a2 + 17);
      v64 = *((int *)v59 + 4);
LABEL_184:
      google::protobuf::UnknownFieldSet::AddVarint(a3, v80, v64);
      return 1;
    default:
      return 1;
  }
}

void sub_22DC569F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25407B4D8);
  _Unwind_Resume(a1);
}

void sub_22DC56A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a49 < 0)
  {
    operator delete(__p);
    if (a42 < 0)
    {
LABEL_5:
      operator delete(a37);
      if (a35 < 0)
      {
LABEL_8:
        operator delete(a30);
        if ((a28 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_14;
      }
LABEL_13:
      if ((a28 & 0x80000000) == 0)
      {
LABEL_9:
        if (a21 < 0)
          goto LABEL_10;
        goto LABEL_15;
      }
LABEL_14:
      operator delete(a23);
      if (a21 < 0)
      {
LABEL_10:
        operator delete(a16);
        if ((a15 & 0x80000000) == 0)
          goto LABEL_11;
        goto LABEL_16;
      }
LABEL_15:
      if ((a15 & 0x80000000) == 0)
      {
LABEL_11:
        if ((*(char *)(v49 - 105) & 0x80000000) == 0)
          goto LABEL_17;
LABEL_18:
        operator delete(*(void **)(v49 - 128));
LABEL_17:
        _Unwind_Resume(a1);
      }
LABEL_16:
      operator delete(a10);
      if ((*(char *)(v49 - 105) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_18;
    }
  }
  else if (a42 < 0)
  {
    goto LABEL_5;
  }
  if (a35 < 0)
    goto LABEL_8;
  goto LABEL_13;
}

uint64_t google::protobuf::io::CodedOutputStream::HadError(char **this)
{
  uint64_t v2;
  unsigned int *v4;
  char v5;
  std::string v6[2];

  v2 = google::protobuf::io::EpsCopyOutputStream::FlushAndResetBuffer((google::protobuf::io::EpsCopyOutputStream *)this, this[8]);
  this[8] = (char *)v2;
  if (!v2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/io/coded_stream.h", 1062);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: cur_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v5, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
  }
  return *((unsigned __int8 *)this + 56);
}

void sub_22DC56D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC56D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::UnknownFieldSet **std::unique_ptr<google::protobuf::UnknownFieldSet>::~unique_ptr[abi:ne180100](google::protobuf::UnknownFieldSet **a1)
{
  google::protobuf::UnknownFieldSet *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2 != *((_QWORD *)v2 + 1))
    {
      google::protobuf::UnknownFieldSet::ClearFallback(v2);
      v3 = *(void **)v2;
    }
    if (v3)
    {
      *((_QWORD *)v2 + 1) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E31DF78](v2, 0x20C40960023A9);
  }
  return a1;
}

void google::protobuf::UnknownFieldSet::~UnknownFieldSet(google::protobuf::UnknownFieldSet *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2 != *((void **)this + 1))
  {
    google::protobuf::UnknownFieldSet::ClearFallback(this);
    v2 = *(void **)this;
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void google::protobuf::DescriptorBuilder::OptionInterpreter::SetInt32(int a1, unsigned int a2, uint64_t a3, int a4, google::protobuf::UnknownFieldSet *this)
{
  google::protobuf::UnknownFieldSet *v6;
  std::string *v7;
  unsigned int *v8;
  char v9;
  std::string v10[2];

  switch(a4)
  {
    case 17:
      a3 = (2 * (_DWORD)a3) ^ ((int)a3 >> 31);
      v6 = this;
      goto LABEL_5;
    case 15:
      google::protobuf::UnknownFieldSet::AddFixed32(this, a2, a3);
      break;
    case 5:
      a3 = (int)a3;
      v6 = this;
LABEL_5:
      google::protobuf::UnknownFieldSet::AddVarint(v6, a2, a3);
      return;
    default:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7197);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "Invalid wire type for CPPTYPE_INT32: ");
      v8 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, a4);
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, v8);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
      break;
  }
}

void sub_22DC56F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC56F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::OptionInterpreter::SetInt64(int a1, unsigned int a2, uint64_t a3, int a4, google::protobuf::UnknownFieldSet *this)
{
  std::string *v6;
  unsigned int *v7;
  char v8;
  std::string v9[2];

  if (a4 == 18)
  {
    a3 = (2 * a3) ^ (a3 >> 63);
LABEL_6:
    google::protobuf::UnknownFieldSet::AddVarint(this, a2, a3);
    return;
  }
  if (a4 != 16)
  {
    if (a4 != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7220);
      v6 = google::protobuf::internal::LogMessage::operator<<(v9, "Invalid wire type for CPPTYPE_INT64: ");
      v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v6, a4);
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v7);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
      return;
    }
    goto LABEL_6;
  }
  google::protobuf::UnknownFieldSet::AddFixed64(this, a2, a3);
}

void sub_22DC56FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC56FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::OptionInterpreter::SetUInt32(int a1, unsigned int a2, unsigned int a3, int a4, google::protobuf::UnknownFieldSet *this)
{
  std::string *v6;
  unsigned int *v7;
  char v8;
  std::string v9[2];

  if (a4 == 7)
  {
    google::protobuf::UnknownFieldSet::AddFixed32(this, a2, a3);
  }
  else if (a4 == 13)
  {
    google::protobuf::UnknownFieldSet::AddVarint(this, a2, a3);
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7238);
    v6 = google::protobuf::internal::LogMessage::operator<<(v9, "Invalid wire type for CPPTYPE_UINT32: ");
    v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v6, a4);
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
}

void sub_22DC570A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC570B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::OptionInterpreter::SetUInt64(int a1, unsigned int a2, uint64_t a3, int a4, google::protobuf::UnknownFieldSet *this)
{
  std::string *v6;
  unsigned int *v7;
  char v8;
  std::string v9[2];

  if (a4 == 6)
  {
    google::protobuf::UnknownFieldSet::AddFixed64(this, a2, a3);
  }
  else if (a4 == 4)
  {
    google::protobuf::UnknownFieldSet::AddVarint(this, a2, a3);
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7256);
    v6 = google::protobuf::internal::LogMessage::operator<<(v9, "Invalid wire type for CPPTYPE_UINT64: ");
    v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v6, a4);
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
}

void sub_22DC5716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC57180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorBuilder::OptionInterpreter::SetAggregateOption(google::protobuf::DescriptorBuilder::OptionInterpreter *this, const std::string::value_type ***a2, google::protobuf::UnknownFieldSet *a3)
{
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *Prototype;
  char *v26;
  std::string *v27;
  std::string *v28;
  unsigned int *v29;
  std::string::size_type v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  std::string *v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *size;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned int *v43;
  google::protobuf::UnknownFieldSet *v44;
  std::string *p_str;
  int v46;
  void *v47;
  char v49;
  std::string v50;
  std::string v51;
  uint64_t v52;
  std::string __p[2];
  std::string v54;
  std::string v55;
  std::string __str;
  const std::string::value_type ***v57;
  uint64_t (*v58)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);

  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 16) & 4) == 0)
  {
    std::operator+<char>();
    v5 = std::string::append(&v54, "\" is a message. To set the entire message, use syntax like \"");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = *((char *)*a2 + 23);
    if (v7 >= 0)
      v8 = (const std::string::value_type *)*a2;
    else
      v8 = **a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)*a2 + 23);
    else
      v9 = (std::string::size_type)(*a2)[1];
    v10 = std::string::append(&v55, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&__str, " = { <proto text format> }\". To set fields within it, use syntax like \"");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = *((char *)*a2 + 23);
    if (v14 >= 0)
      v15 = (const std::string::value_type *)*a2;
    else
      v15 = **a2;
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)*a2 + 23);
    else
      v16 = (std::string::size_type)(*a2)[1];
    v17 = std::string::append(&v51, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v50, ".foo = value\".");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    google::protobuf::DescriptorBuilder::AddError(*(_QWORD *)this, (const std::string::value_type *)(*((_QWORD *)this + 1) + 24), *((_QWORD *)this + 2), 8, (const std::string::value_type *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_16:
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_17;
        goto LABEL_46;
      }
    }
    else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v50.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_48;
    }
LABEL_47:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
LABEL_49:
      operator delete(v54.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_48:
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_49;
  }
  v23 = (unint64_t *)a2[6];
  if (v23)
  {
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v24 = atomic_load(v23);
    if (v24 != -1)
    {
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::FieldDescriptor::TypeOnceInit;
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v51;
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::__call_once(v23, &v50, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  Prototype = google::protobuf::DynamicMessageFactory::GetPrototype((google::protobuf::DescriptorBuilder::OptionInterpreter *)((char *)this + 72), (const google::protobuf::Descriptor *)a2[13]);
  v26 = (char *)(*(uint64_t (**)(_QWORD *))(*Prototype + 24))(Prototype);
  if (!v26)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7150);
    v27 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: dynamic.get() != nullptr: ");
    v28 = google::protobuf::internal::LogMessage::operator<<(v27, "Could not create an instance of ");
    LOWORD(v51.__r_.__value_.__l.__data_) = 0;
    v51.__r_.__value_.__s.__data_[2] = 0;
    google::protobuf::FieldDescriptor::DebugStringWithOptions((uint64_t)a2, (uint64_t)&v51, &v50);
    v29 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v28, (const std::string::value_type *)&v50);
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&__str, v29);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
  }
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24F987F40;
  *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = 0uLL;
  v52 = 0;
  v30 = *(_QWORD *)this;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24F987F88;
  v54.__r_.__value_.__l.__size_ = v30;
  google::protobuf::TextFormat::Parser::Parser((google::protobuf::TextFormat::Parser *)&v50);
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  v50.__r_.__value_.__l.__size_ = (std::string::size_type)&v54;
  v21 = google::protobuf::TextFormat::Parser::ParseFromString(&v50.__r_.__value_.__l.__data_, *(_QWORD *)(*((_QWORD *)this + 2) + 64), v26);
  if ((v21 & 1) != 0)
  {
    memset(&__str, 0, sizeof(__str));
    google::protobuf::MessageLite::SerializeToString((const google::protobuf::MessageLite *)v26, &__str);
    v31 = (unint64_t *)a2[6];
    if (v31)
    {
      v57 = a2;
      v58 = google::protobuf::FieldDescriptor::TypeOnceInit;
      v32 = atomic_load(v31);
      if (v32 != -1)
      {
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
        __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v57;
        v55.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::__call_once(v31, &v55, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
      }
    }
    v33 = *((_DWORD *)a2 + 14);
    if (v33 == 11)
    {
      v34 = (std::string *)google::protobuf::UnknownFieldSet::AddLengthDelimited(a3, *((_DWORD *)a2 + 17));
      std::string::operator=(v34, &__str);
    }
    else
    {
      v41 = (unint64_t *)a2[6];
      if (v41)
      {
        v57 = a2;
        v58 = google::protobuf::FieldDescriptor::TypeOnceInit;
        v42 = atomic_load(v41);
        if (v42 != -1)
        {
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
          __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v57;
          v55.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::__call_once(v41, &v55, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
        v33 = *((_DWORD *)a2 + 14);
      }
      if (v33 != 10)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7170);
        v43 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (option_field->type()) == (FieldDescriptor::TYPE_GROUP): ");
        google::protobuf::internal::LogFinisher::operator=((uint64_t)&v49, v43);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      }
      v44 = (google::protobuf::UnknownFieldSet *)google::protobuf::UnknownFieldSet::AddGroup(a3, *((_DWORD *)a2 + 17));
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v46 = __str.__r_.__value_.__r.__words[1];
      google::protobuf::UnknownFieldSet::ParseFromArray(v44, p_str, v46);
    }
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
    v47 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_68;
  }
  std::operator+<char>();
  v35 = std::string::append(&v55, "\": ");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (v52 >= 0)
    size = &v51.__r_.__value_.__s.__data_[8];
  else
    size = (const std::string::value_type *)v51.__r_.__value_.__l.__size_;
  if (v52 >= 0)
    v38 = HIBYTE(v52);
  else
    v38 = v51.__r_.__value_.__r.__words[2];
  v39 = std::string::append(&__str, size, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(*(_QWORD *)this, (const std::string::value_type *)(*((_QWORD *)this + 1) + 24), *((_QWORD *)this + 2), 8, (const std::string::value_type *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_42:
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_67;
      goto LABEL_69;
    }
  }
  else if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_67:
    v47 = (void *)v55.__r_.__value_.__r.__words[0];
LABEL_68:
    operator delete(v47);
  }
LABEL_69:
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)&v50);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)&v54);
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24F987F40;
  if (SHIBYTE(v52) < 0)
    operator delete((void *)v51.__r_.__value_.__l.__size_);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)&v51);
  if (v26)
    (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
  return v21;
}

void sub_22DC57730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  google::protobuf::internal::LogMessage::~LogMessage(&a27);
  if (*(char *)(v44 - 105) < 0)
    operator delete(*(void **)(v43 + 56));
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)&__p);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)&a37);
  if (!v42)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  _Unwind_Resume(a1);
}

void google::protobuf::`anonymous namespace'::AggregateErrorCollector::~AggregateErrorCollector(void **this)
{
  google::protobuf::_anonymous_namespace_::AggregateErrorCollector *v1;

  v1 = (google::protobuf::_anonymous_namespace_::AggregateErrorCollector *)this;
  *this = off_24F987F40;
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    this = (void **)v1;
  }
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)this);
}

{
  *this = off_24F987F40;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable((ORToolsCpL2AccessVariable *)this);
  JUMPOUT(0x22E31DF78);
}

unint64_t google::protobuf::DescriptorPool::CrossLinkOnDemandHelper(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  std::string::value_type *v4;
  std::string::size_type v5;
  std::string *p_dst;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  std::string __dst;
  std::string v12;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v12 = *(std::string *)a2;
    v3 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if (v3 && v12.__r_.__value_.__s.__data_[0] == 46)
      {
        v4 = &v12.__r_.__value_.__s.__data_[1];
        v5 = v3 - 1;
        if (v5 < 0x7FFFFFFFFFFFFFF8)
          goto LABEL_6;
        goto LABEL_14;
      }
      goto LABEL_15;
    }
  }
  if (v12.__r_.__value_.__l.__size_ && *v12.__r_.__value_.__l.__data_ == 46)
  {
    v4 = (std::string::value_type *)(v12.__r_.__value_.__r.__words[0] + 1);
    v5 = v12.__r_.__value_.__l.__size_ - 1;
    if (v12.__r_.__value_.__l.__size_ - 1 < 0x7FFFFFFFFFFFFFF8)
    {
LABEL_6:
      if (v5 >= 0x17)
      {
        v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17)
          v9 = v5 | 7;
        v10 = v9 + 1;
        p_dst = (std::string *)operator new(v9 + 1);
        __dst.__r_.__value_.__l.__size_ = v5;
        __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
        p_dst = &__dst;
        if (!v5)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_9:
            v12 = __dst;
            goto LABEL_15;
          }
LABEL_22:
          operator delete(v12.__r_.__value_.__l.__data_);
          goto LABEL_9;
        }
      }
      memmove(p_dst, v4, v5);
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
LABEL_14:
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_15:
  v7 = google::protobuf::DescriptorPool::Tables::FindByNameHelper(*(_QWORD **)(a1 + 32), a1, (uint64_t)&v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v7;
}

void sub_22DC57B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::FieldDescriptor::InternalTypeOnceInit(google::protobuf::FieldDescriptor *this)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string *v12;
  std::string::size_type v13;
  std::string *p_dst;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  std::string __dst;
  std::string v30;
  std::string v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*((_QWORD *)this + 5) + 65))
  {
    v2 = *((_QWORD *)this + 16);
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v31, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7298);
    v3 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(&v31, "CHECK failed: file()->finished_building_ == true: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v30, v3);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v31.__r_.__value_.__l.__data_);
    v2 = *((_QWORD *)this + 16);
    if (!v2)
      goto LABEL_10;
  }
  v4 = google::protobuf::DescriptorPool::CrossLinkOnDemandHelper(*(_QWORD *)(*((_QWORD *)this + 5) + 16), v2);
  if (v4 == 4)
  {
    *((_DWORD *)this + 14) = 14;
    v6 = (char *)this + 112;
    goto LABEL_9;
  }
  if (v4 == 1)
  {
    *((_DWORD *)this + 14) = 11;
    v6 = (char *)this + 104;
LABEL_9:
    *(_QWORD *)v6 = v5;
  }
LABEL_10:
  v7 = *((_QWORD *)this + 14);
  if (!v7 || *((_QWORD *)this + 18))
    return;
  if (*((_QWORD *)this + 17))
  {
    v8 = *(__int128 **)(v7 + 8);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v31.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
    }
    v10 = std::string::rfind(&v31, 46, 0xFFFFFFFFFFFFFFFFLL);
    if (v10 == -1)
    {
      std::string::operator=(&v31, *((const std::string **)this + 17));
      goto LABEL_44;
    }
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v12 = &v31;
    }
    else
    {
      size = v31.__r_.__value_.__l.__size_;
      v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if (size >= v10)
      v13 = v10;
    else
      v13 = size;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v13 >= 0x17)
    {
      v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v15 = v13 | 7;
      v16 = v15 + 1;
      p_dst = (std::string *)operator new(v15 + 1);
      __dst.__r_.__value_.__l.__size_ = v13;
      __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
      p_dst = &__dst;
      if (!v13)
        goto LABEL_32;
    }
    memmove(p_dst, v12, v13);
LABEL_32:
    p_dst->__r_.__value_.__s.__data_[v13] = 0;
    v17 = std::string::append(&__dst, ".");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = *((_QWORD *)this + 17);
    v20 = *(char *)(v19 + 23);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)*((_QWORD *)this + 17);
    else
      v21 = *(const std::string::value_type **)v19;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(v19 + 23);
    else
      v22 = *(_QWORD *)(v19 + 8);
    v23 = std::string::append(&v30, v21, v22);
    v24 = v23->__r_.__value_.__r.__words[0];
    v32[0] = v23->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
    v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v31.__r_.__value_.__r.__words[0] = v24;
    v31.__r_.__value_.__l.__size_ = v32[0];
    *(std::string::size_type *)((char *)&v31.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v32 + 7);
    *((_BYTE *)&v31.__r_.__value_.__s + 23) = v25;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_44:
    if (google::protobuf::DescriptorPool::CrossLinkOnDemandHelper(*(_QWORD *)(*((_QWORD *)this + 5) + 16), (uint64_t)&v31) == 5)
    {
      *((_QWORD *)this + 18) = v26;
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if (*((_QWORD *)this + 18))
          return;
        goto LABEL_50;
      }
    }
    else if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(v31.__r_.__value_.__l.__data_);
    if (*((_QWORD *)this + 18))
      return;
  }
LABEL_50:
  v27 = *((_QWORD *)this + 14);
  if (!*(_DWORD *)(v27 + 44))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v31, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7330);
    v28 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(&v31, "CHECK failed: enum_type_->value_count(): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v30, v28);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v31.__r_.__value_.__l.__data_);
    v27 = *((_QWORD *)this + 14);
  }
  *((_QWORD *)this + 18) = *(_QWORD *)(v27 + 48);
}

void sub_22DC57EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC57EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC57ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::FieldDescriptor::PrintableNameForExtension(google::protobuf::FieldDescriptor *this)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  google::protobuf::FieldDescriptor *v10;
  uint64_t (*v11)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (***v12)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v13)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v14)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);

  if (!*((_BYTE *)this + 67) || !*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 10) + 32) + 72))
    return *((_QWORD *)this + 1);
  v2 = (unint64_t *)*((_QWORD *)this + 6);
  if (v2)
  {
    v10 = this;
    v11 = google::protobuf::FieldDescriptor::TypeOnceInit;
    v3 = atomic_load(v2);
    if (v3 != -1)
    {
      v13 = &v11;
      v14 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))&v10;
      v12 = &v13;
      std::__call_once(v2, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  if (*((_DWORD *)this + 14) != 11 || *((_DWORD *)this + 15) != 1)
    return *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 12);
  v5 = (unint64_t *)*((_QWORD *)this + 6);
  if (v5)
  {
    v11 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
    v6 = atomic_load(v5);
    if (v6 != -1)
    {
      v13 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
      v14 = &v11;
      v12 = &v13;
      std::__call_once(v5, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
  }
  if (v4 != *((_QWORD *)this + 13))
    return *((_QWORD *)this + 1);
  v8 = (unint64_t *)*((_QWORD *)this + 6);
  if (v8)
  {
    v11 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))this;
    v9 = atomic_load(v8);
    if (v9 != -1)
    {
      v13 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
      v14 = &v11;
      v12 = &v13;
      std::__call_once(v8, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
    }
    v4 = *((_QWORD *)this + 13);
  }
  return *(_QWORD *)(v4 + 8);
}

void google::protobuf::FileDescriptor::InternalDependenciesOnceInit(google::protobuf::FileDescriptor *this)
{
  unsigned int *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (!*((_BYTE *)this + 65))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7374);
    v2 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: finished_building_ == true: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, v2);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v3 = *((_DWORD *)this + 8);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * i);
      if (v5)
      {
        *(_QWORD *)(*((_QWORD *)this + 9) + 8 * i) = google::protobuf::DescriptorPool::FindFileByName(*((_QWORD *)this + 2), v5);
        v3 = *((_DWORD *)this + 8);
      }
    }
  }
}

void sub_22DC58174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC58188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::LazyDescriptor::OnceInternal(google::protobuf::internal::LazyDescriptor *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  std::string v6[2];

  if (*(_BYTE *)(*((_QWORD *)this + 3) + 65))
  {
    if (*(_QWORD *)this)
      return;
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 7437);
    v2 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: file_->finished_building_: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v5, v2);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    if (*(_QWORD *)this)
      return;
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (google::protobuf::DescriptorPool::CrossLinkOnDemandHelper(*(_QWORD *)(*((_QWORD *)this + 3) + 16), v3) == 1)*(_QWORD *)this = v4;
  }
}

void sub_22DC58254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC58268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(_QWORD *a1, const char **a2)
{
  const char *v2;
  char v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t ***v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;

  v2 = *a2;
  v3 = **a2;
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(v2 + 1);
    do
    {
      v4 = 5 * v4 + v3;
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
    v7 = (int8x8_t)a1[1];
    if (v7)
      goto LABEL_5;
    return 0;
  }
  v4 = 0;
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
LABEL_5:
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v9 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & v4;
  }
  v11 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v11)
    return 0;
  v10 = *v11;
  if (*v11)
  {
    if (v8.u32[0] < 2uLL)
    {
      v12 = *(_QWORD *)&v7 - 1;
      while (1)
      {
        v14 = v10[1];
        if ((uint64_t *)v4 == v14)
        {
          if (!strcmp((const char *)v10[2], v2))
            return v10;
        }
        else if (((unint64_t)v14 & v12) != v9)
        {
          return 0;
        }
        v10 = (uint64_t **)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v13 = (unint64_t)v10[1];
      if (v4 == v13)
      {
        if (!strcmp((const char *)v10[2], v2))
          return v10;
      }
      else
      {
        if (v13 >= *(_QWORD *)&v7)
          v13 %= *(_QWORD *)&v7;
        if (v13 != v9)
          return 0;
      }
      v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  return v10;
}

{
  const char *v2;
  char v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t ***v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;

  v2 = *a2;
  v3 = **a2;
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(v2 + 1);
    do
    {
      v4 = 5 * v4 + v3;
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
    v7 = (int8x8_t)a1[1];
    if (v7)
      goto LABEL_5;
    return 0;
  }
  v4 = 0;
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
LABEL_5:
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v9 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & v4;
  }
  v11 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v11)
    return 0;
  v10 = *v11;
  if (*v11)
  {
    if (v8.u32[0] < 2uLL)
    {
      v12 = *(_QWORD *)&v7 - 1;
      while (1)
      {
        v14 = v10[1];
        if (v14 == (uint64_t *)v4)
        {
          if (!strcmp((const char *)v10[2], v2))
            return v10;
        }
        else if (((unint64_t)v14 & v12) != v9)
        {
          return 0;
        }
        v10 = (uint64_t **)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v13 = (unint64_t)v10[1];
      if (v13 == v4)
      {
        if (!strcmp((const char *)v10[2], v2))
          return v10;
      }
      else
      {
        if (v13 >= *(_QWORD *)&v7)
          v13 %= *(_QWORD *)&v7;
        if (v13 != v9)
          return 0;
      }
      v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  return v10;
}

uint64_t google::protobuf::internal::OnShutdownDelete<google::protobuf::EncodedDescriptorDatabase>(google::protobuf::EncodedDescriptorDatabase *)::{lambda(void const*)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FileDescriptorTables const*),google::protobuf::FileDescriptorTables const*&&>>(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))a1)(**(_QWORD **)(*(_QWORD *)a1 + 8));
}

uint64_t *google::protobuf::FileDescriptorTables::FindNestedSymbol(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  const char *v4;
  int8x8_t v5;
  char v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;

  if (*(char *)(a3 + 23) >= 0)
    v4 = (const char *)a3;
  else
    v4 = *(const char **)a3;
  v5 = (int8x8_t)a1[1];
  v6 = *v4;
  if (*v4)
  {
    v7 = 0;
    v8 = (unsigned __int8 *)(v4 + 1);
    do
    {
      v7 = 5 * v7 + v6;
      v9 = *v8++;
      v6 = v9;
    }
    while (v9);
    if (!*(_QWORD *)&v5)
      return 0;
  }
  else
  {
    v7 = 0;
    if (!*(_QWORD *)&v5)
      return 0;
  }
  v10 = v7 ^ (16777619 * (_QWORD)a2);
  v11 = (uint8x8_t)vcnt_s8(v5);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = v7 ^ (16777619 * (_QWORD)a2);
    if (v10 >= *(_QWORD *)&v5)
      v12 = v10 % *(_QWORD *)&v5;
  }
  else
  {
    v12 = v10 & (*(_QWORD *)&v5 - 1);
  }
  v13 = *(uint64_t ****)(*a1 + 8 * v12);
  if (v13)
  {
    v14 = *v13;
    if (*v13)
    {
      if (v11.u32[0] < 2uLL)
      {
        v15 = *(_QWORD *)&v5 - 1;
        while (1)
        {
          v17 = v14[1];
          if ((uint64_t *)v10 == v17)
          {
            if (v14[2] == a2 && !strcmp((const char *)v14[3], v4))
              return v14[4];
          }
          else if (((unint64_t)v17 & v15) != v12)
          {
            return 0;
          }
          v14 = (uint64_t **)*v14;
          if (!v14)
            return 0;
        }
      }
      do
      {
        v16 = (unint64_t)v14[1];
        if (v10 == v16)
        {
          if (v14[2] == a2 && !strcmp((const char *)v14[3], v4))
            return v14[4];
        }
        else
        {
          if (v16 >= *(_QWORD *)&v5)
            v16 %= *(_QWORD *)&v5;
          if (v16 != v12)
            return 0;
        }
        v14 = (uint64_t **)*v14;
      }
      while (v14);
    }
  }
  return 0;
}

void google::protobuf::`anonymous namespace'::SourceLocationCommentPrinter::FormatComment(std::string *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  void *__p;
  char *v19;
  uint64_t v20;
  std::string v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v21 = *(std::string *)a3;
  google::protobuf::StripWhitespace(&v21);
  __p = 0;
  v19 = 0;
  v20 = 0;
  google::protobuf::SplitStringUsing((unsigned __int8 *)&v21, "\n", (uint64_t)&__p);
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v6 = (char *)__p;
  v5 = v19;
  if (v19 == __p)
  {
    v6 = v19;
    if (v19)
      goto LABEL_17;
LABEL_26:
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_19;
    return;
  }
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(char *)(a2 + 127);
    v10 = v9 < 0;
    v11 = *(_QWORD *)(a2 + 104);
    v12 = *(_QWORD *)(a2 + 112);
    if (v9 >= 0)
      v11 = a2 + 104;
    v40 = v11;
    v13 = &v6[v7];
    v9 = v9;
    if (v10)
      v9 = v12;
    v41 = v9;
    if (v13[23] >= 0)
      v14 = &v6[v7];
    else
      v14 = *(char **)v13;
    v38 = v14;
    v15 = v13[23];
    v16 = *((_QWORD *)v13 + 1);
    if ((v15 & 0x80u) != 0)
      v15 = v16;
    v39 = v15;
    v36 = 0;
    v37 = -1;
    v34 = 0;
    v35 = -1;
    v32 = 0;
    v33 = -1;
    v30 = 0;
    v31 = -1;
    v28 = 0;
    v29 = -1;
    v26 = 0;
    v27 = -1;
    v24 = 0;
    v25 = -1;
    v22 = 0;
    v23 = -1;
    *((_QWORD *)&v17 + 1) = &v26;
    *(_QWORD *)&v17 = &v28;
    google::protobuf::strings::SubstituteAndAppend(a1, "$0// $1\n", (uint64_t)&v40, (uint64_t)&v38, (uint64_t)&v36, (uint64_t)&v34, (uint64_t)&v32, (uint64_t)&v30, v17, (uint64_t)&v24, (uint64_t)&v22);
    ++v8;
    v6 = (char *)__p;
    v5 = v19;
    v7 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)__p) >> 3) > v8);
  if (!__p)
    goto LABEL_26;
LABEL_17:
  if (v5 == v6)
  {
    v19 = v6;
    operator delete(v5);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_19;
  }
  do
  {
    if (*(v5 - 1) < 0)
      operator delete(*((void **)v5 - 3));
    v5 -= 24;
  }
  while (v5 != v6);
  v19 = v6;
  operator delete(__p);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
LABEL_19:
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_22DC587F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  operations_research::glop::StrictITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,std::string>::~StrictITIVector(&a14);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::`anonymous namespace'::RetrieveOptions(int a1, google::protobuf::Message *a2, uint64_t a3, char **a4)
{
  uint64_t v8;
  const google::protobuf::Descriptor *v9;
  const google::protobuf::Descriptor *v12;
  _QWORD *Prototype;
  uint64_t v14;
  char v15;
  char v16;
  google::protobuf::Message *v17;
  std::string *v18;
  uint64_t v19;
  unsigned int *v20;
  _BOOL8 OptionsAssumingRightPool;
  char v22;
  std::string __p[2];
  _BYTE v24[96];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2) + 16)
                 + 16) == a3)
  v8 = (*(uint64_t (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
  if (google::protobuf::DescriptorPool::Tables::FindByNameHelper(*(_QWORD **)(a3 + 32), a3, *(_QWORD *)(v8 + 8)) != 1|| v9 == 0)
  {
  }
  v12 = v9;
  google::protobuf::DynamicMessageFactory::DynamicMessageFactory((google::protobuf::DynamicMessageFactory *)v24);
  Prototype = google::protobuf::DynamicMessageFactory::GetPrototype((google::protobuf::DynamicMessageFactory *)v24, v12);
  v14 = (*(uint64_t (**)(_QWORD *))(*Prototype + 24))(Prototype);
  google::protobuf::MessageLite::SerializeAsString(a2, (uint64_t)__p);
  v15 = google::protobuf::MessageLite::ParseFromString(v14, __p);
  v16 = v15;
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v17 = (google::protobuf::Message *)v14;
    if ((v15 & 1) != 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  v17 = (google::protobuf::Message *)v14;
  if ((v16 & 1) == 0)
  {
LABEL_12:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.cc", 2354);
    v18 = google::protobuf::internal::LogMessage::operator<<(__p, "Found invalid proto option data for: ");
    v19 = (*(uint64_t (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
    v20 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v18, *(const std::string::value_type **)(v19 + 8));
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v22, v20);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    v17 = a2;
  }
LABEL_13:
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  google::protobuf::DynamicMessageFactory::~DynamicMessageFactory((google::protobuf::DynamicMessageFactory *)v24);
  return OptionsAssumingRightPool;
}

void sub_22DC58A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    google::protobuf::DynamicMessageFactory::~DynamicMessageFactory((google::protobuf::DynamicMessageFactory *)&a19);
    _Unwind_Resume(a1);
  }
  google::protobuf::DynamicMessageFactory::~DynamicMessageFactory((google::protobuf::DynamicMessageFactory *)&a19);
  _Unwind_Resume(a1);
}

void sub_22DC58AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  google::protobuf::DynamicMessageFactory::~DynamicMessageFactory((google::protobuf::DynamicMessageFactory *)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::`anonymous namespace'::RetrieveOptionsAssumingRightPool(int a1, google::protobuf::Message *a2, char **a3)
{
  std::string::size_type *v6;
  std::string::size_type *i;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  unint64_t v14;
  const google::protobuf::FieldDescriptor *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  char v29;
  int v30;
  std::string::size_type v31;
  unint64_t v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  char v41;
  unint64_t v42;
  std::string::size_type *v43;
  char *v44;
  std::string::size_type *v45;
  unint64_t v46;
  unint64_t v47;
  google::protobuf::Message *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  std::string::size_type *v56;
  int v57;
  std::string::size_type *v58;
  std::string::size_type *v59;
  const std::string::value_type ***v61;
  std::string::size_type __n;
  int v63;
  int v64;
  int v65;
  std::string v66;
  uint64_t v67;
  _QWORD *v68[3];
  _QWORD *v69[4];
  std::string __p;
  std::string v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[4];

  v76[2] = *MEMORY[0x24BDAC8D0];
  v6 = (std::string::size_type *)*a3;
  for (i = (std::string::size_type *)a3[1]; i != v6; i -= 3)
  {
    if (*((char *)i - 1) < 0)
      operator delete((void *)*(i - 3));
  }
  a3[1] = (char *)v6;
  (*(void (**)(google::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v61 = (const std::string::value_type ***)v8;
  google::protobuf::Reflection::ListFields(v8, a2, (uint64_t *)&v72, v9, v10);
  v13 = v73;
  if (v73 != v72)
  {
    v14 = 0;
    v63 = a1 + 1;
    __n = 2 * a1;
    v13 = v72;
    while (1)
    {
      v15 = (const google::protobuf::FieldDescriptor *)v13[v14];
      v65 = *((_DWORD *)v15 + 15);
      if (v65 != 3)
        break;
      v16 = google::protobuf::Reflection::FieldSize(v61, a2, v15, v11, v12);
      if (v16 >= 1)
        goto LABEL_13;
LABEL_8:
      ++v14;
      v13 = v72;
      if (v14 >= v73 - v72)
        goto LABEL_92;
    }
    v16 = 1;
LABEL_13:
    v17 = 0;
    v64 = v16;
    while (1)
    {
      memset(&v71, 0, sizeof(v71));
      v18 = v72[v14];
      v19 = *(unint64_t **)(v18 + 48);
      if (v19)
      {
        v75 = v72[v14];
        v76[0] = google::protobuf::FieldDescriptor::TypeOnceInit;
        v20 = atomic_load(v19);
        if (v20 != -1)
        {
          v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
          v66.__r_.__value_.__l.__size_ = (std::string::size_type)&v75;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
          std::__call_once(v19, &__p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
        }
      }
      if ((*(_DWORD *)(v18 + 56) & 0xFFFFFFFE) == 0xA)
      {
        memset(&__p, 0, sizeof(__p));
        google::protobuf::TextFormat::Printer::Printer((google::protobuf::TextFormat::Printer *)&v66);
        LODWORD(v66.__r_.__value_.__l.__data_) = v63;
        if (v65 == 3)
          v21 = v17;
        else
          v21 = 0xFFFFFFFFLL;
        google::protobuf::TextFormat::Printer::PrintFieldValueToString((google::protobuf::TextFormat::Printer *)&v66, a2, (const google::protobuf::FieldDescriptor *)v72[v14], (const char *)v21, (uint64_t)&__p);
        std::string::append(&v71, "{\n");
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append(&v71, (const std::string::value_type *)p_p, size);
        std::string::append(&v71, __n, 32);
        std::string::append(&v71, "}");
        std::__tree<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::__map_value_compare<google::protobuf::Descriptor const*,std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::less<google::protobuf::Descriptor const*>,true>,std::allocator<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>>>::destroy((uint64_t)v69, v69[1]);
        std::__tree<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::__map_value_compare<google::protobuf::Descriptor const*,std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::less<google::protobuf::Descriptor const*>,true>,std::allocator<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>>>::destroy((uint64_t)v68, v68[1]);
        v24 = v67;
        v67 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        if (v65 == 3)
          v25 = v17;
        else
          v25 = 0xFFFFFFFFLL;
        google::protobuf::TextFormat::PrintFieldValueToString(a2, (const google::protobuf::FieldDescriptor *)v72[v14], (const char *)v25, (uint64_t)&v71);
      }
      memset(&v66, 0, sizeof(v66));
      v26 = v72[v14];
      if (*(_BYTE *)(v26 + 67))
      {
        std::operator+<char>();
        v27 = std::string::append(&__p, ")");
        v28 = v27->__r_.__value_.__r.__words[0];
        v76[0] = v27->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v76 + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
        v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        v66.__r_.__value_.__r.__words[0] = v28;
        v66.__r_.__value_.__l.__size_ = v76[0];
        *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v76 + 7);
        *((_BYTE *)&v66.__r_.__value_.__s + 23) = v29;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::operator=(&v66, *(const std::string **)v26);
      }
      v30 = SHIBYTE(v66.__r_.__value_.__r.__words[2]);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      else
        v31 = v66.__r_.__value_.__l.__size_;
      v32 = v31 + 3;
      if (v31 + 3 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v32 >= 0x17)
      {
        v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17)
          v34 = v32 | 7;
        v35 = v34 + 1;
        v33 = (std::string *)operator new(v34 + 1);
        __p.__r_.__value_.__l.__size_ = v31 + 3;
        __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
        v33 = &__p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v31 + 3;
        if (!v31)
          goto LABEL_56;
      }
      if (v30 >= 0)
        v36 = &v66;
      else
        v36 = (std::string *)v66.__r_.__value_.__r.__words[0];
      memmove(v33, v36, v31);
LABEL_56:
      *(_DWORD *)((char *)&v33->__r_.__value_.__l.__data_ + v31) = 2112800;
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v71;
      else
        v37 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v38 = v71.__r_.__value_.__l.__size_;
      v39 = std::string::append(&__p, (const std::string::value_type *)v37, v38);
      v40 = v39->__r_.__value_.__r.__words[0];
      v76[0] = v39->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v76 + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
      v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v43 = (std::string::size_type *)a3[1];
      v42 = (unint64_t)a3[2];
      if ((unint64_t)v43 >= v42)
      {
        v45 = (std::string::size_type *)*a3;
        v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - *a3) >> 3);
        v47 = v46 + 1;
        if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        v48 = a2;
        v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (_QWORD)v45) >> 3);
        if (2 * v49 > v47)
          v47 = 2 * v49;
        if (v49 >= 0x555555555555555)
          v50 = 0xAAAAAAAAAAAAAAALL;
        else
          v50 = v47;
        if (v50)
        {
          if (v50 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v51 = (char *)operator new(24 * v50);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[24 * v46];
        v53 = v76[0];
        *(_QWORD *)v52 = v40;
        *((_QWORD *)v52 + 1) = v53;
        v54 = &v51[24 * v50];
        *(_QWORD *)(v52 + 15) = *(_QWORD *)((char *)v76 + 7);
        v52[23] = v41;
        v44 = v52 + 24;
        if (v43 == v45)
        {
          *a3 = v52;
          a3[1] = v44;
          a3[2] = v54;
          a2 = v48;
        }
        else
        {
          a2 = v48;
          do
          {
            v55 = *(_OWORD *)(v43 - 3);
            *((_QWORD *)v52 - 1) = *(v43 - 1);
            *(_OWORD *)(v52 - 24) = v55;
            v52 -= 24;
            *(v43 - 2) = 0;
            *(v43 - 1) = 0;
            *(v43 - 3) = 0;
            v43 -= 3;
          }
          while (v43 != v45);
          v43 = (std::string::size_type *)*a3;
          v56 = (std::string::size_type *)a3[1];
          *a3 = v52;
          a3[1] = v44;
          for (a3[2] = v54; v56 != v43; v56 -= 3)
          {
            if (*((char *)v56 - 1) < 0)
              operator delete((void *)*(v56 - 3));
          }
        }
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v43 = v40;
        v43[1] = v76[0];
        *(std::string::size_type *)((char *)v43 + 15) = *(_QWORD *)((char *)v76 + 7);
        *((_BYTE *)v43 + 23) = v41;
        v44 = (char *)(v43 + 3);
      }
      a3[1] = v44;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v57 = v64;
        if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_87:
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_91;
          goto LABEL_14;
        }
      }
      else
      {
        v57 = v64;
        if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_87;
      }
      operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
LABEL_91:
        operator delete(v71.__r_.__value_.__l.__data_);
LABEL_14:
      if (++v17 == v57)
        goto LABEL_8;
    }
  }
LABEL_92:
  v59 = (std::string::size_type *)*a3;
  v58 = (std::string::size_type *)a3[1];
  if (v13)
  {
    v73 = v13;
    operator delete(v13);
  }
  return v59 != v58;
}

void sub_22DC590F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void *v43;

  v43 = *(void **)(v41 - 144);
  if (!v43)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v41 - 136) = v43;
  operator delete(v43);
  _Unwind_Resume(exception_object);
}

void google::protobuf::TextFormat::Printer::~Printer(google::protobuf::TextFormat::Printer *this)
{
  uint64_t v2;

  std::__tree<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::__map_value_compare<google::protobuf::Descriptor const*,std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::less<google::protobuf::Descriptor const*>,true>,std::allocator<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::__map_value_compare<google::protobuf::Descriptor const*,std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::less<google::protobuf::Descriptor const*>,true>,std::allocator<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void std::__tree<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::__map_value_compare<google::protobuf::Descriptor const*,std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::less<google::protobuf::Descriptor const*>,true>,std::allocator<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::__map_value_compare<google::protobuf::Descriptor const*,std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::less<google::protobuf::Descriptor const*>,true>,std::allocator<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::__map_value_compare<google::protobuf::Descriptor const*,std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>,std::less<google::protobuf::Descriptor const*>,true>,std::allocator<std::__value_type<google::protobuf::Descriptor const*,std::unique_ptr<google::protobuf::TextFormat::MessagePrinter const>>>>::destroy(a1, a2[1]);
    v4 = a2[5];
    a2[5] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    operator delete(a2);
  }
}

std::string *google::protobuf::Join<std::vector<std::string>>@<X0>(std::string *result@<X0>, const std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  std::string::size_type v5;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v5 = result->__r_.__value_.__r.__words[0];
  size = result->__r_.__value_.__l.__size_;
  if (result->__r_.__value_.__r.__words[0] != size)
  {
    v8 = *(_QWORD *)v5;
    v7 = *(_QWORD *)(v5 + 8);
    if (*(char *)(v5 + 23) >= 0)
    {
      v8 = result->__r_.__value_.__r.__words[0];
      v7 = *(unsigned __int8 *)(v5 + 23);
    }
    v15 = v8;
    v16 = v7;
    result = google::protobuf::StrAppend(a3, (uint64_t)&v15);
    v9 = v5 + 24;
    if (v9 != size)
    {
      v10 = -24;
      do
      {
        if (v10)
          std::string::append(a3, a2);
        v11 = *(char *)(v9 + 23);
        v12 = v11 < 0;
        v13 = *(_QWORD *)v9;
        if (v11 >= 0)
          v13 = v9;
        v14 = *(unsigned __int8 *)(v9 + 23);
        if (v12)
          v14 = *(_QWORD *)(v9 + 8);
        v15 = v13;
        v16 = v14;
        result = google::protobuf::StrAppend(a3, (uint64_t)&v15);
        v9 += 24;
        v10 -= 24;
      }
      while (v9 != size);
    }
  }
  return result;
}

void sub_22DC593C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::mutex *google::protobuf::internal::OnShutdownDelete<google::protobuf::FileDescriptorTables>(google::protobuf::FileDescriptorTables *)::{lambda(void const*)#1}::__invoke(std::mutex *result)
{
  if (result)
  {
    google::protobuf::FileDescriptorTables::~FileDescriptorTables(result);
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC594D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC594EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC595F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC59710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5974C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC5982C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC59948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::OneofDescriptorProto>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC59A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ExtensionRange>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC59B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ReservedRange>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC59C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumValueDescriptorProto>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC59DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto_EnumReservedRange>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC59ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC59F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MethodDescriptorProto>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC59FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5A004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5A018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5A02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::`anonymous namespace'::NewAllowedProto3Extendee(google::protobuf::_anonymous_namespace_ *this)
{
  uint64_t v1;
  uint64_t v2;
  const std::string::value_type *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;

  v1 = operator new();
  v2 = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)v1 = v1 + 8;
  do
  {
    *((_BYTE *)&v12.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&v12, "google.protobuf.");
    v3 = off_24F987EF0[v2];
    v4 = std::string::append(&v12, v3);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v1, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v14) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_5;
    }
    else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v12.__r_.__value_.__l.__data_);
LABEL_5:
    *((_BYTE *)&v11.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v11, "proto");
    v6 = std::string::append(&v11, "2.");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v12, v3);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)v1, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v14) < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_12:
        operator delete(v12.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_2;
        goto LABEL_13;
      }
    }
    else if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_12;
    }
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_2;
LABEL_13:
    operator delete(v11.__r_.__value_.__l.__data_);
LABEL_2:
    ++v2;
  }
  while (v2 != 8);
  return v1;
}

void sub_22DC5A218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::OnShutdownDelete<std::set<std::string>>(std::set<std::string> *)::{lambda(void const*)#1}::__invoke(uint64_t result)
{
  if (result)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(result, *(char **)(result + 8));
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption_NamePart>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC5A3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5A3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5A3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5A3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::`anonymous namespace'::AggregateErrorCollector::AddError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  v5 = (std::string *)(a1 + 8);
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 31))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*(_QWORD *)(a1 + 16))
LABEL_3:
    std::string::append((std::string *)(a1 + 8), "; ");
LABEL_4:
  v6 = *(char *)(a4 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a4;
  else
    v7 = *(const std::string::value_type **)a4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a4 + 23);
  else
    v8 = *(_QWORD *)(a4 + 8);
  return std::string::append(v5, v7, v8);
}

void google::protobuf::DescriptorBuilder::OptionInterpreter::AggregateOptionFinder::~AggregateOptionFinder(google::protobuf::DescriptorBuilder::OptionInterpreter::AggregateOptionFinder *this)
{
  ORToolsCpL2AccessVariable::~ORToolsCpL2AccessVariable(this);
  JUMPOUT(0x22E31DF78);
}

uint64_t google::protobuf::DescriptorBuilder::OptionInterpreter::AggregateOptionFinder::FindExtension(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t (*v19)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (***v20)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v21)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);
  uint64_t (**v22)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *);

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
  v6 = google::protobuf::DescriptorBuilder::LookupSymbolNoPlaceholder(*(_QWORD *)(a1 + 8), a3, *(_QWORD *)(v5 + 8), 0, 1);
  v8 = v7;
  if (v6 == 1)
  {
    if (!*(_BYTE *)(*(_QWORD *)(v5 + 32) + 72) || *(int *)(v7 + 128) < 1)
      return 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 80);
      v12 = v11 + v9;
      if (*(_QWORD *)(v11 + v9 + 80) == v5)
      {
        v13 = *(unint64_t **)(v12 + 48);
        if (v13)
        {
          v18 = v11 + v9;
          v19 = google::protobuf::FieldDescriptor::TypeOnceInit;
          v14 = atomic_load(v13);
          if (v14 != -1)
          {
            v21 = &v19;
            v22 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))&v18;
            v20 = &v21;
            std::__call_once(v13, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (*&&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
          }
        }
        if (*(_DWORD *)(v11 + v9 + 56) == 11 && *(_DWORD *)(v11 + v9 + 60) == 1)
        {
          v15 = *(unint64_t **)(v12 + 48);
          if (v15)
          {
            v19 = (uint64_t (*)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))(v11 + v9);
            v16 = atomic_load(v15);
            if (v16 != -1)
            {
              v21 = (uint64_t (**)(google::protobuf::FieldDescriptor *__hidden, const google::protobuf::FieldDescriptor *))google::protobuf::FieldDescriptor::TypeOnceInit;
              v22 = &v19;
              v20 = &v21;
              std::__call_once(v15, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>);
            }
          }
          if (*(_QWORD *)(v11 + v9 + 104) == v8)
            break;
        }
      }
      ++v10;
      v9 += 152;
      if (v10 >= *(int *)(v8 + 128))
        return 0;
    }
    return v11 + v9;
  }
  else if (v6 != 2 || !*(_BYTE *)(v7 + 67))
  {
    return 0;
  }
  return v8;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::TypeHandler>(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char v7;
  std::string v8[2];

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 8) > a2)
      return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
    goto LABEL_5;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1693);
  v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1694);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_22DC5A754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5A768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5A77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC5A790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,google::protobuf::Descriptor::WellKnownType> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_22DC5AD94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DC5ADA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<void const*,char const*>,google::protobuf::Symbol>,std::__unordered_map_hasher<std::pair<void const*,char const*>,std::__hash_value_type<std::pair<void const*,char const*>,google::protobuf::Symbol>,google::protobuf::`anonymous namespace'::PointerStringPairHash,google::protobuf::`anonymous namespace'::PointerStringPairEqual,true>,std::__unordered_map_equal<std::pair<void const*,char const*>,std::__hash_value_type<std::pair<void const*,char const*>,google::protobuf::Symbol>,google::protobuf::`anonymous namespace'::PointerStringPairEqual,google::protobuf::`anonymous namespace'::PointerStringPairHash,true>,std::allocator<std::__hash_value_type<std::pair<void const*,char const*>,google::protobuf::Symbol>>>::__rehash_unique[abi:ne180100](uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  void *v23;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v17 = (uint8x8_t)vcnt_s8(v4), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v16);
      if (prime <= v22)
        prime = v22;
      if (prime >= *(_QWORD *)&v4)
        return;
    }
    else
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
      if (prime <= v16)
        prime = v16;
      if (prime >= *(_QWORD *)&v4)
        return;
    }
    if (!prime)
    {
      v23 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v23)
        operator delete(v23);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v9 = a1 + 16;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v10 = v8[1];
    v11 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v12 = v10 & v11;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v9;
      while (1)
      {
        v13 = (_QWORD *)*v8;
        if (!*v8)
          break;
        v14 = v13[1] & v11;
        if (v14 == v12)
        {
          v8 = (_QWORD *)*v8;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v14))
        {
          *v8 = *v13;
          v15 = 8 * v14;
          *v13 = **(_QWORD **)(*(_QWORD *)a1 + v15);
          **(_QWORD **)(*(_QWORD *)a1 + v15) = v13;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = v8;
          v8 = v13;
          v12 = v14;
        }
      }
      return;
    }
    if (v10 >= prime)
      v10 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v9;
    v19 = (_QWORD *)*v8;
    if (*v8)
    {
      while (1)
      {
        v21 = v19[1];
        if (v21 >= prime)
          v21 %= prime;
        if (v21 == v10)
          goto LABEL_34;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
        {
          *v8 = *v19;
          v20 = 8 * v21;
          *v19 = **(_QWORD **)(*(_QWORD *)a1 + v20);
          **(_QWORD **)(*(_QWORD *)a1 + v20) = v19;
          v19 = v8;
LABEL_34:
          v8 = v19;
          v19 = (_QWORD *)*v19;
          if (!v19)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v8;
          v8 = v19;
          v19 = (_QWORD *)*v19;
          v10 = v21;
          if (!v19)
            return;
        }
      }
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::__erase_unique<std::pair<google::protobuf::Descriptor const*,int>>(uint64_t **a1, unint64_t *a2)
{
  uint64_t *result;
  uint64_t *v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;

  v4 = (uint64_t *)(a1 + 1);
  result = a1[1];
  if (result)
  {
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 2);
    v7 = v4;
    v8 = result;
    do
    {
      v9 = v8[4];
      if (v9 < v5)
      {
        ++v8;
      }
      else if (v5 >= v9)
      {
        if (*((_DWORD *)v8 + 10) < v6)
          ++v8;
        else
          v7 = v8;
      }
      else
      {
        v7 = v8;
      }
      v8 = (uint64_t *)*v8;
    }
    while (v8);
    if (v7 == v4)
      return 0;
    v10 = v7[4];
    if (v5 < v10)
      return 0;
    if (v10 >= v5 && v6 < *((_DWORD *)v7 + 10))
      return 0;
    v11 = (uint64_t *)v7[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      v13 = v7;
      do
      {
        v12 = (uint64_t *)v13[2];
        v14 = *v12 == (_QWORD)v13;
        v13 = v12;
      }
      while (!v14);
    }
    if (*a1 == v7)
      *a1 = v12;
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(result, v7);
    operator delete(v7);
    return (uint64_t *)1;
  }
  return result;
}

void std::vector<std::unique_ptr<std::string>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_32:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_39;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
          {
            if (*(char *)(v28 + 23) < 0)
              operator delete(*(void **)v28);
            MEMORY[0x22E31DF78](v28, 0x1012C40EC159624);
          }
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_32;
    }
  }
}

void std::vector<std::unique_ptr<std::once_flag>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_30:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_37;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
            MEMORY[0x22E31DF78](v28, 0x1000C4000313F17);
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_30;
    }
  }
}

void std::vector<std::unique_ptr<google::protobuf::FileDescriptorTables>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  std::mutex *v28;
  std::mutex *v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_30:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_37;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = (std::mutex *)*((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
          {
            google::protobuf::FileDescriptorTables::~FileDescriptorTables(v28);
            MEMORY[0x22E31DF78]();
          }
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_30;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::__emplace_unique_key_args<char const*,std::pair<char const* const,google::protobuf::Symbol> const&>(uint64_t a1, const char **a2, uint64_t a3)
{
  unint64_t v3;
  const char *v6;
  char v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *a2;
  v7 = **a2;
  if (v7)
  {
    v8 = 0;
    v9 = (unsigned __int8 *)(v6 + 1);
    do
    {
      v8 = 5 * v8 + v7;
      v10 = *v9++;
      v7 = v10;
    }
    while (v10);
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_27;
  }
  else
  {
    v8 = 0;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_27;
  }
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v3 = v8;
    if (v8 >= v11)
      v3 = v8 % v11;
  }
  else
  {
    v3 = (v11 - 1) & v8;
  }
  v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
  if (v13)
  {
    v14 = *v13;
    if (*v13)
    {
      if (v12.u32[0] < 2uLL)
      {
        while (1)
        {
          v16 = *((_QWORD *)v14 + 1);
          if (v16 == v8)
          {
            if (!strcmp(*((const char **)v14 + 2), v6))
              return v14;
          }
          else if ((v16 & (v11 - 1)) != v3)
          {
            goto LABEL_27;
          }
          v14 = *(void **)v14;
          if (!v14)
            goto LABEL_27;
        }
      }
      do
      {
        v15 = *((_QWORD *)v14 + 1);
        if (v15 == v8)
        {
          if (!strcmp(*((const char **)v14 + 2), v6))
            return v14;
        }
        else
        {
          if (v15 >= v11)
            v15 %= v11;
          if (v15 != v3)
            break;
        }
        v14 = *(void **)v14;
      }
      while (v14);
    }
  }
LABEL_27:
  v14 = operator new(0x28uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v11 && (float)(v18 * (float)v11) >= v17)
  {
    v8 = v3;
  }
  else
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_40;
    if (prime < v11)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v11)
LABEL_40:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v8 %= v11;
    }
    else
    {
      v8 &= v11 - 1;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v27)
  {
    *(_QWORD *)v14 = *v27;
LABEL_63:
    *v27 = v14;
    goto LABEL_64;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v26 + 8 * v8) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_22DC5BD80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::FileDescriptor const*>>>::__emplace_unique_key_args<char const*,std::pair<char const* const,google::protobuf::FileDescriptor const*> const&>(uint64_t a1, const char **a2, _OWORD *a3)
{
  unint64_t v3;
  const char *v6;
  char v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *a2;
  v7 = **a2;
  if (v7)
  {
    v8 = 0;
    v9 = (unsigned __int8 *)(v6 + 1);
    do
    {
      v8 = 5 * v8 + v7;
      v10 = *v9++;
      v7 = v10;
    }
    while (v10);
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_27;
  }
  else
  {
    v8 = 0;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_27;
  }
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v3 = v8;
    if (v8 >= v11)
      v3 = v8 % v11;
  }
  else
  {
    v3 = (v11 - 1) & v8;
  }
  v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
  if (v13)
  {
    v14 = *v13;
    if (*v13)
    {
      if (v12.u32[0] < 2uLL)
      {
        while (1)
        {
          v16 = *((_QWORD *)v14 + 1);
          if (v16 == v8)
          {
            if (!strcmp(*((const char **)v14 + 2), v6))
              return v14;
          }
          else if ((v16 & (v11 - 1)) != v3)
          {
            goto LABEL_27;
          }
          v14 = *(void **)v14;
          if (!v14)
            goto LABEL_27;
        }
      }
      do
      {
        v15 = *((_QWORD *)v14 + 1);
        if (v15 == v8)
        {
          if (!strcmp(*((const char **)v14 + 2), v6))
            return v14;
        }
        else
        {
          if (v15 >= v11)
            v15 %= v11;
          if (v15 != v3)
            break;
        }
        v14 = *(void **)v14;
      }
      while (v14);
    }
  }
LABEL_27:
  v14 = operator new(0x20uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v11 && (float)(v18 * (float)v11) >= v17)
  {
    v8 = v3;
  }
  else
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_40;
    if (prime < v11)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v11)
LABEL_40:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v8 %= v11;
    }
    else
    {
      v8 &= v11 - 1;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v27)
  {
    *(_QWORD *)v14 = *v27;
LABEL_63:
    *v27 = v14;
    goto LABEL_64;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v26 + 8 * v8) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_22DC5C0A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::unique_ptr<std::string>>::__emplace_back_slow_path<std::string*&>(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = v5 >> 3;
  v7 = (v5 >> 3) + 1;
  if (v7 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v9 = a1[2] - v4;
  if (v9 >> 2 > v7)
    v7 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v6];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3)
      return v14;
    goto LABEL_28;
  }
  v15 = v3 - v4 - 8;
  if (v15 < 0x78 || &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v5 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v3)
    goto LABEL_36;
  v16 = (v15 >> 3) + 1;
  v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v12 -= v17;
  v18 = &v3[-v17];
  v19 = v3 - 16;
  v20 = &v11[8 * v6 - 16];
  v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v23 = *((_OWORD *)v19 - 1);
    v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  v3 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_36:
    do
    {
      v24 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v12 - 1) = v24;
      v12 -= 8;
    }
    while (v3 != v4);
  }
  v25 = *a1;
  v3 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3 != v25)
  {
    do
    {
      v27 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      v26 = v27;
      *(_QWORD *)v3 = 0;
      if (v27)
      {
        if (*(char *)(v26 + 23) < 0)
          operator delete(*(void **)v26);
        MEMORY[0x22E31DF78](v26, 0x1012C40EC159624);
      }
    }
    while (v3 != v25);
    v3 = v25;
  }
  if (v3)
LABEL_28:
    operator delete(v3);
  return v14;
}

char *std::vector<std::unique_ptr<std::once_flag>>::__emplace_back_slow_path<std::once_flag*&>(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = v5 >> 3;
  v7 = (v5 >> 3) + 1;
  if (v7 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v9 = a1[2] - v4;
  if (v9 >> 2 > v7)
    v7 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v6];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3)
      return v14;
    goto LABEL_26;
  }
  v15 = v3 - v4 - 8;
  if (v15 < 0x78 || &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v5 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v3)
    goto LABEL_34;
  v16 = (v15 >> 3) + 1;
  v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v12 -= v17;
  v18 = &v3[-v17];
  v19 = v3 - 16;
  v20 = &v11[8 * v6 - 16];
  v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v23 = *((_OWORD *)v19 - 1);
    v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  v3 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v24 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v12 - 1) = v24;
      v12 -= 8;
    }
    while (v3 != v4);
  }
  v25 = *a1;
  v3 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3 != v25)
  {
    do
    {
      v27 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      v26 = v27;
      *(_QWORD *)v3 = 0;
      if (v27)
        MEMORY[0x22E31DF78](v26, 0x1000C4000313F17);
    }
    while (v3 != v25);
    v3 = v25;
  }
  if (v3)
LABEL_26:
    operator delete(v3);
  return v14;
}

char *std::vector<std::unique_ptr<google::protobuf::FileDescriptorTables>>::__emplace_back_slow_path<google::protobuf::FileDescriptorTables*&>(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  std::mutex *v26;
  std::mutex *v27;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = v5 >> 3;
  v7 = (v5 >> 3) + 1;
  if (v7 >> 61)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v9 = a1[2] - v4;
  if (v9 >> 2 > v7)
    v7 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v6];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (!v3)
      return v14;
    goto LABEL_26;
  }
  v15 = v3 - v4 - 8;
  if (v15 < 0x78 || &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v11[v5 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v3)
    goto LABEL_34;
  v16 = (v15 >> 3) + 1;
  v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v12 -= v17;
  v18 = &v3[-v17];
  v19 = v3 - 16;
  v20 = &v11[8 * v6 - 16];
  v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v23 = *((_OWORD *)v19 - 1);
    v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  v3 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v24 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v12 - 1) = v24;
      v12 -= 8;
    }
    while (v3 != v4);
  }
  v25 = *a1;
  v3 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3 != v25)
  {
    do
    {
      v27 = (std::mutex *)*((_QWORD *)v3 - 1);
      v3 -= 8;
      v26 = v27;
      *(_QWORD *)v3 = 0;
      if (v27)
      {
        google::protobuf::FileDescriptorTables::~FileDescriptorTables(v26);
        MEMORY[0x22E31DF78]();
      }
    }
    while (v3 != v25);
    v3 = v25;
  }
  if (v3)
LABEL_26:
    operator delete(v3);
  return v14;
}

char *std::vector<std::vector<char>>::__emplace_back_slow_path<int &>(char **a1, int *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  char *v23;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  v12 = *a2;
  *((_QWORD *)v10 + 1) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 2) = 0;
  if ((_DWORD)v12)
  {
    if ((v12 & 0x80000000) != 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v13 = operator new(v12);
    *(_QWORD *)v10 = v13;
    v14 = (unint64_t)v13 + v12;
    bzero(v13, v12);
    *(int64x2_t *)(v10 + 8) = vdupq_n_s64(v14);
  }
  v15 = v10 + 24;
  v23 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v15;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v16 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v17 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v17;
      v10 -= 24;
      *((_QWORD *)v16 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v18 = *a1;
    v3 = a1[1];
    v15 = v23;
    *a1 = v10;
    a1[1] = v23;
    a1[2] = v11;
    if (v3 != v18)
    {
      v19 = v3;
      do
      {
        v21 = (void *)*((_QWORD *)v19 - 3);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *((_QWORD *)v3 - 2) = v20;
          operator delete(v20);
        }
        v3 = v19;
      }
      while (v19 != v18);
      v3 = v18;
    }
  }
  if (v3)
    operator delete(v3);
  return v15;
}

void sub_22DC5C7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_22DC5CC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(std::pair<google::protobuf::FileDescriptorTables const*,google::protobuf::SourceCodeInfo const*> *),std::pair<google::protobuf::FileDescriptorTables const*,google::protobuf::SourceCodeInfo const*> *&&>>(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(**(_QWORD **)(*(_QWORD *)a1 + 8));
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::SourceCodeInfo_Location const*>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

std::mutex **google::protobuf::internal::OnShutdownDelete<google::protobuf::DescriptorPool>(google::protobuf::DescriptorPool *)::{lambda(void const*)#1}::__invoke(std::mutex **result)
{
  std::mutex **v1;
  std::mutex *v2;
  google::protobuf::DescriptorPool::Tables *v3;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      std::mutex::~mutex(v2);
      MEMORY[0x22E31DF78]();
    }
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(v1 + 6), (char *)v1[7]);
    v3 = (google::protobuf::DescriptorPool::Tables *)v1[4];
    v1[4] = 0;
    if (v3)
    {
      google::protobuf::DescriptorPool::Tables::~Tables(v3);
      MEMORY[0x22E31DF78]();
    }
    JUMPOUT(0x22E31DF78);
  }
  return result;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x28uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v26->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_22DC5D544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22DC5D558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<google::protobuf::internal::RepeatedPtrIterator<std::string const>,google::protobuf::internal::RepeatedPtrIterator<std::string const>>(uint64_t a1, const std::string **a2, const std::string **a3, size_t __sz)
{
  const std::string **v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  const std::string **v13;
  uint64_t v14;
  const std::string *v15;
  std::string *v16;
  uint64_t v17;
  __int128 v18;
  std::string *v19;
  const std::string *v20;
  std::string *v21;
  const std::string *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  std::string *v30;
  const std::string *v31;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (a2 == a3)
      {
        v21 = *(std::string **)a1;
      }
      else
      {
        v21 = *(std::string **)a1;
        do
        {
          v22 = *v6++;
          std::string::operator=(v9++, v22);
          ++v21;
        }
        while (v6 != a3);
        v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v21)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        --v12;
      }
      *(_QWORD *)(a1 + 8) = v21;
    }
    else
    {
      v13 = &a2[0xAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3)];
      if (v12 != v9)
      {
        v14 = 0x5555555555555558 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          v15 = *v6++;
          std::string::operator=(v9++, v15);
          v14 -= 8;
        }
        while (v14);
        v9 = *(std::string **)(a1 + 8);
      }
      v16 = v9;
      if (v13 != a3)
      {
        v17 = 0;
        do
        {
          v19 = &v9[v17];
          v20 = *v13;
          if (SHIBYTE((*v13)->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v19, v20->__r_.__value_.__l.__data_, v20->__r_.__value_.__l.__size_);
          }
          else
          {
            v18 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v19->__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v18;
          }
          ++v13;
          ++v17;
        }
        while (v13 != a3);
        v16 = &v9[v17];
      }
      *(_QWORD *)(a1 + 8) = v16;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_48;
    v23 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v24 = 2 * v23;
    if (2 * v23 <= __sz)
      v24 = __sz;
    v25 = v23 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v24;
    if (v25 > 0xAAAAAAAAAAAAAAALL)
LABEL_48:
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v26 = 24 * v25;
    v27 = (char *)operator new(24 * v25);
    *(_QWORD *)a1 = v27;
    *(_QWORD *)(a1 + 8) = v27;
    *(_QWORD *)(a1 + 16) = &v27[v26];
    if (v6 != a3)
    {
      v28 = 0;
      do
      {
        v30 = (std::string *)&v27[v28];
        v31 = *v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v30, v31->__r_.__value_.__l.__data_, v31->__r_.__value_.__l.__size_);
        }
        else
        {
          v29 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v30->__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v29;
        }
        ++v6;
        v28 += 24;
      }
      while (v6 != a3);
      v27 += v28;
    }
    *(_QWORD *)(a1 + 8) = v27;
  }
}

void google::protobuf::`anonymous namespace'::OptionsToInterpret::~OptionsToInterpret(google::protobuf::_anonymous_namespace_::OptionsToInterpret *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    goto LABEL_7;
}

void std::vector<google::protobuf::`anonymous namespace'::OptionsToInterpret>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  void *v22;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 < v5)
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)v4 + 6) = 0;
    *((_QWORD *)v4 + 7) = 0;
    *((_QWORD *)v4 + 8) = 0;
    *((_OWORD *)v4 + 3) = a2[3];
    *((_QWORD *)v4 + 8) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_OWORD *)(v4 + 72) = *(__int128 *)((char *)a2 + 72);
    v8 = v4 + 88;
LABEL_3:
    a1[1] = v8;
    return;
  }
  v9 = 0x2E8BA2E8BA2E8BA3 * ((v4 - (_BYTE *)*a1) >> 3);
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  v11 = 0x2E8BA2E8BA2E8BA3 * ((v5 - (_BYTE *)*a1) >> 3);
  if (2 * v11 > v10)
    v10 = 2 * v11;
  if (v11 >= 0x1745D1745D1745DLL)
    v12 = 0x2E8BA2E8BA2E8BALL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 > 0x2E8BA2E8BA2E8BALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(88 * v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = &v13[88 * v9];
  *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v14 = *a2;
  v15 = &v13[88 * v12];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v16 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_OWORD *)(v14 + 24) = v16;
  *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)v14 + 8) = 0;
  *((_OWORD *)v14 + 3) = a2[3];
  *((_QWORD *)v14 + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *(_OWORD *)(v14 + 72) = *(__int128 *)((char *)a2 + 72);
  v8 = v14 + 88;
  v17 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 != *a1)
  {
    do
    {
      v19 = *(_OWORD *)(v18 - 88);
      *((_QWORD *)v14 - 9) = *((_QWORD *)v18 - 9);
      *(_OWORD *)(v14 - 88) = v19;
      *((_QWORD *)v18 - 10) = 0;
      *((_QWORD *)v18 - 9) = 0;
      *((_QWORD *)v18 - 11) = 0;
      v20 = *((_OWORD *)v18 - 4);
      *((_QWORD *)v14 - 6) = *((_QWORD *)v18 - 6);
      *((_OWORD *)v14 - 4) = v20;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v14 - 4) = 0;
      *((_QWORD *)v14 - 3) = 0;
      *(_OWORD *)(v14 - 40) = *(_OWORD *)(v18 - 40);
      *((_QWORD *)v14 - 3) = *((_QWORD *)v18 - 3);
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      *((_OWORD *)v14 - 1) = *((_OWORD *)v18 - 1);
      v14 -= 88;
      v18 -= 88;
    }
    while (v18 != v17);
    v18 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    while (1)
    {
      if (v21 == v18)
        goto LABEL_27;
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      if (*(v21 - 41) < 0)
      {
        operator delete(*((void **)v21 - 8));
        if ((*(v21 - 65) & 0x80000000) == 0)
          goto LABEL_17;
      }
      else if ((*(v21 - 65) & 0x80000000) == 0)
      {
        goto LABEL_17;
      }
      operator delete(*((void **)v21 - 11));
LABEL_17:
      v21 -= 88;
    }
  }
  *a1 = v14;
  a1[1] = v8;
  a1[2] = v15;
LABEL_27:
  if (!v18)
    goto LABEL_3;
  operator delete(v18);
  a1[1] = v8;
}

std::string *google::protobuf::`anonymous namespace'::OptionsToInterpret::OptionsToInterpret(std::string *this, __int128 *a2, __int128 *a3, uint64_t a4, std::string::size_type a5, std::string::size_type a6)
{
  __int128 v11;
  std::string *v12;
  __int128 v13;
  const void *v14;
  int64_t v15;
  void *v16;
  std::string::size_type v17;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v12 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
    v12 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v13 = *a3;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  v14 = *(const void **)a4;
  v15 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v15)
  {
    if (v15 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v16 = operator new(v15);
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    this[2].__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    v17 = (std::string::size_type)v16 + 4 * (v15 >> 2);
    this[2].__r_.__value_.__r.__words[2] = v17;
    memcpy(v16, v14, v15);
    this[2].__r_.__value_.__l.__size_ = v17;
  }
  this[3].__r_.__value_.__r.__words[0] = a5;
  this[3].__r_.__value_.__l.__size_ = a6;
  return this;
}

void sub_22DC5DC48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  _QWORD *v22;
  std::string *v23;
  uint64_t *v24;
  uint64_t *v25;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    do
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_26;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        return v10;
      v5 = v10[1];
    }
    while (v5);
    v6 = v10 + 1;
LABEL_26:
    v22 = operator new(0x38uLL);
    v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_29;
  }
  else
  {
    v10 = a1 + 1;
    v22 = operator new(0x38uLL);
    v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  v23->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
LABEL_30:
  *v22 = 0;
  v22[1] = 0;
  v22[2] = v10;
  *v6 = v22;
  v24 = (uint64_t *)**a1;
  v25 = v22;
  if (v24)
  {
    *a1 = v24;
    v25 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v22;
}

void sub_22DC5DE40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::Descriptor::WellKnownType>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

void google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::Descriptor>(uint64_t a1, uint64_t a2, uint64_t a3, google::protobuf::MessageOptions *a4, uint64_t a5, uint64_t a6, std::string::size_type a7)
{
  uint64_t v14;
  int *v15;
  int **v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  char *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t ExtensionByNumberNoLock;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  std::string __p;
  void *v55;
  char v56;
  void *v57;
  void *v58;
  std::string __dst;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = (int *)operator new();
  google::protobuf::MessageOptions::MessageOptions((google::protobuf::MessageOptions *)v15, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v16 = *(int ***)(v14 + 240);
  if ((unint64_t)v16 < *(_QWORD *)(v14 + 248))
  {
    *v16 = v15;
    *(_QWORD *)(v14 + 240) = v16 + 1;
    if ((google::protobuf::MessageOptions::IsInitialized(a4) & 1) == 0)
      goto LABEL_3;
LABEL_11:
    google::protobuf::MessageLite::SerializeAsString(a4, (uint64_t)&__p);
    v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::MessageLite::ParseFromString(v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a5 + 32) = v15;
      if (v15[14] < 1)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a5 + 32) = v15;
      if (v15[14] < 1)
      {
LABEL_35:
        v31 = *((_QWORD *)a4 + 1);
        if ((v31 & 1) == 0)
          goto LABEL_36;
        goto LABEL_70;
      }
    }
    v22 = (google::protobuf::UnknownFieldSet *)v57;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v56 < 0)
    {
      operator delete(v55);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)a4 + 1);
    if ((v31 & 1) == 0)
    {
LABEL_36:
      v32 = (uint64_t *)google::protobuf::UnknownFieldSet::default_instance(v22);
      if (*v32 == v32[1])
        return;
LABEL_37:
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
      if (*(char *)(a7 + 23) >= 0)
        v34 = a7;
      else
        v34 = *(_QWORD *)a7;
      __p.__r_.__value_.__r.__words[0] = v34;
      v35 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v33, (const char **)&__p.__r_.__value_.__l.__data_);
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          v37 = *v32;
          v36 = v32[1];
          if ((int)((unint64_t)(v36 - *v32) >> 4) >= 1)
          {
            v38 = 0;
            v39 = (unint64_t)v35[4];
            v40 = (uint64_t **)(a1 + 128);
            do
            {
              ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(*(_QWORD *)a1, v39, *(_DWORD *)(v37 + 16 * v38));
              if (ExtensionByNumberNoLock)
              {
                v42 = ExtensionByNumberNoLock;
                v43 = *v40;
                if (*v40)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  v45 = (uint64_t *)(a1 + 128);
                  v46 = *v40;
                  do
                  {
                    v47 = v46[4];
                    v48 = v47 >= v44;
                    if (v47 >= v44)
                      v49 = (uint64_t **)v46;
                    else
                      v49 = (uint64_t **)(v46 + 1);
                    if (v48)
                      v45 = v46;
                    v46 = *v49;
                  }
                  while (*v49);
                  if (v45 != (uint64_t *)v40 && v44 >= v45[4])
                  {
                    v50 = (uint64_t *)v45[1];
                    v51 = v45;
                    if (v50)
                    {
                      do
                      {
                        v52 = v50;
                        v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        v52 = (uint64_t *)v51[2];
                        v53 = *v52 == (_QWORD)v51;
                        v51 = v52;
                      }
                      while (!v53);
                    }
                    if (*(uint64_t **)(a1 + 120) == v45)
                      *(_QWORD *)(a1 + 120) = v52;
                    --*(_QWORD *)(a1 + 136);
                    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v45);
                    operator delete(v45);
                    v37 = *v32;
                    v36 = v32[1];
                  }
                }
              }
              ++v38;
            }
            while (v38 < (int)((unint64_t)(v36 - v37) >> 4));
          }
        }
      }
      return;
    }
LABEL_70:
    v32 = (uint64_t *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v32 == *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 16))
      return;
    goto LABEL_37;
  }
  v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v14 + 232), &__p);
  v15 = (int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 240) = v21;
  if ((google::protobuf::MessageOptions::IsInitialized(a4) & 1) != 0)
    goto LABEL_11;
LABEL_3:
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  if (v18 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v18 + 1;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
  if (v18)
  {
LABEL_17:
    if (v17 >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(p_dst, v25, v18);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 46;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)&__p, (uint64_t)a4, 7, "Uninterpreted option is missing name or value.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22DC5E480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_22DC5E494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::FieldDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3, google::protobuf::FieldOptions *a4, uint64_t a5, uint64_t a6, std::string::size_type a7)
{
  uint64_t v14;
  int *v15;
  int **v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  char *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t ExtensionByNumberNoLock;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  std::string __p;
  void *v55;
  char v56;
  void *v57;
  void *v58;
  std::string __dst;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = (int *)operator new();
  google::protobuf::FieldOptions::FieldOptions((google::protobuf::FieldOptions *)v15, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v16 = *(int ***)(v14 + 240);
  if ((unint64_t)v16 < *(_QWORD *)(v14 + 248))
  {
    *v16 = v15;
    *(_QWORD *)(v14 + 240) = v16 + 1;
    if ((google::protobuf::FieldOptions::IsInitialized(a4) & 1) == 0)
      goto LABEL_3;
LABEL_11:
    google::protobuf::MessageLite::SerializeAsString(a4, (uint64_t)&__p);
    v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::MessageLite::ParseFromString(v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a5 + 120) = v15;
      if (v15[14] < 1)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a5 + 120) = v15;
      if (v15[14] < 1)
      {
LABEL_35:
        v31 = *((_QWORD *)a4 + 1);
        if ((v31 & 1) == 0)
          goto LABEL_36;
        goto LABEL_70;
      }
    }
    v22 = (google::protobuf::UnknownFieldSet *)v57;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v56 < 0)
    {
      operator delete(v55);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)a4 + 1);
    if ((v31 & 1) == 0)
    {
LABEL_36:
      v32 = (uint64_t *)google::protobuf::UnknownFieldSet::default_instance(v22);
      if (*v32 == v32[1])
        return;
LABEL_37:
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
      if (*(char *)(a7 + 23) >= 0)
        v34 = a7;
      else
        v34 = *(_QWORD *)a7;
      __p.__r_.__value_.__r.__words[0] = v34;
      v35 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v33, (const char **)&__p.__r_.__value_.__l.__data_);
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          v37 = *v32;
          v36 = v32[1];
          if ((int)((unint64_t)(v36 - *v32) >> 4) >= 1)
          {
            v38 = 0;
            v39 = (unint64_t)v35[4];
            v40 = (uint64_t **)(a1 + 128);
            do
            {
              ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(*(_QWORD *)a1, v39, *(_DWORD *)(v37 + 16 * v38));
              if (ExtensionByNumberNoLock)
              {
                v42 = ExtensionByNumberNoLock;
                v43 = *v40;
                if (*v40)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  v45 = (uint64_t *)(a1 + 128);
                  v46 = *v40;
                  do
                  {
                    v47 = v46[4];
                    v48 = v47 >= v44;
                    if (v47 >= v44)
                      v49 = (uint64_t **)v46;
                    else
                      v49 = (uint64_t **)(v46 + 1);
                    if (v48)
                      v45 = v46;
                    v46 = *v49;
                  }
                  while (*v49);
                  if (v45 != (uint64_t *)v40 && v44 >= v45[4])
                  {
                    v50 = (uint64_t *)v45[1];
                    v51 = v45;
                    if (v50)
                    {
                      do
                      {
                        v52 = v50;
                        v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        v52 = (uint64_t *)v51[2];
                        v53 = *v52 == (_QWORD)v51;
                        v51 = v52;
                      }
                      while (!v53);
                    }
                    if (*(uint64_t **)(a1 + 120) == v45)
                      *(_QWORD *)(a1 + 120) = v52;
                    --*(_QWORD *)(a1 + 136);
                    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v45);
                    operator delete(v45);
                    v37 = *v32;
                    v36 = v32[1];
                  }
                }
              }
              ++v38;
            }
            while (v38 < (int)((unint64_t)(v36 - v37) >> 4));
          }
        }
      }
      return;
    }
LABEL_70:
    v32 = (uint64_t *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v32 == *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 16))
      return;
    goto LABEL_37;
  }
  v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v14 + 232), &__p);
  v15 = (int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 240) = v21;
  if ((google::protobuf::FieldOptions::IsInitialized(a4) & 1) != 0)
    goto LABEL_11;
LABEL_3:
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  if (v18 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v18 + 1;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
  if (v18)
  {
LABEL_17:
    if (v17 >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(p_dst, v25, v18);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 46;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)&__p, (uint64_t)a4, 7, "Uninterpreted option is missing name or value.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22DC5EB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_22DC5EB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::OneofDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3, google::protobuf::OneofOptions *a4, uint64_t a5, uint64_t a6, std::string::size_type a7)
{
  uint64_t v14;
  int *v15;
  int **v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  char *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t ExtensionByNumberNoLock;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  std::string __p;
  void *v55;
  char v56;
  void *v57;
  void *v58;
  std::string __dst;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = (int *)operator new();
  google::protobuf::OneofOptions::OneofOptions((google::protobuf::OneofOptions *)v15, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v16 = *(int ***)(v14 + 240);
  if ((unint64_t)v16 < *(_QWORD *)(v14 + 248))
  {
    *v16 = v15;
    *(_QWORD *)(v14 + 240) = v16 + 1;
    if ((google::protobuf::OneofOptions::IsInitialized(a4) & 1) == 0)
      goto LABEL_3;
LABEL_11:
    google::protobuf::MessageLite::SerializeAsString(a4, (uint64_t)&__p);
    v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::MessageLite::ParseFromString(v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a5 + 40) = v15;
      if (v15[12] < 1)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a5 + 40) = v15;
      if (v15[12] < 1)
      {
LABEL_35:
        v31 = *((_QWORD *)a4 + 1);
        if ((v31 & 1) == 0)
          goto LABEL_36;
        goto LABEL_70;
      }
    }
    v22 = (google::protobuf::UnknownFieldSet *)v57;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v56 < 0)
    {
      operator delete(v55);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)a4 + 1);
    if ((v31 & 1) == 0)
    {
LABEL_36:
      v32 = (uint64_t *)google::protobuf::UnknownFieldSet::default_instance(v22);
      if (*v32 == v32[1])
        return;
LABEL_37:
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
      if (*(char *)(a7 + 23) >= 0)
        v34 = a7;
      else
        v34 = *(_QWORD *)a7;
      __p.__r_.__value_.__r.__words[0] = v34;
      v35 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v33, (const char **)&__p.__r_.__value_.__l.__data_);
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          v37 = *v32;
          v36 = v32[1];
          if ((int)((unint64_t)(v36 - *v32) >> 4) >= 1)
          {
            v38 = 0;
            v39 = (unint64_t)v35[4];
            v40 = (uint64_t **)(a1 + 128);
            do
            {
              ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(*(_QWORD *)a1, v39, *(_DWORD *)(v37 + 16 * v38));
              if (ExtensionByNumberNoLock)
              {
                v42 = ExtensionByNumberNoLock;
                v43 = *v40;
                if (*v40)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  v45 = (uint64_t *)(a1 + 128);
                  v46 = *v40;
                  do
                  {
                    v47 = v46[4];
                    v48 = v47 >= v44;
                    if (v47 >= v44)
                      v49 = (uint64_t **)v46;
                    else
                      v49 = (uint64_t **)(v46 + 1);
                    if (v48)
                      v45 = v46;
                    v46 = *v49;
                  }
                  while (*v49);
                  if (v45 != (uint64_t *)v40 && v44 >= v45[4])
                  {
                    v50 = (uint64_t *)v45[1];
                    v51 = v45;
                    if (v50)
                    {
                      do
                      {
                        v52 = v50;
                        v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        v52 = (uint64_t *)v51[2];
                        v53 = *v52 == (_QWORD)v51;
                        v51 = v52;
                      }
                      while (!v53);
                    }
                    if (*(uint64_t **)(a1 + 120) == v45)
                      *(_QWORD *)(a1 + 120) = v52;
                    --*(_QWORD *)(a1 + 136);
                    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v45);
                    operator delete(v45);
                    v37 = *v32;
                    v36 = v32[1];
                  }
                }
              }
              ++v38;
            }
            while (v38 < (int)((unint64_t)(v36 - v37) >> 4));
          }
        }
      }
      return;
    }
LABEL_70:
    v32 = (uint64_t *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v32 == *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 16))
      return;
    goto LABEL_37;
  }
  v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v14 + 232), &__p);
  v15 = (int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 240) = v21;
  if ((google::protobuf::OneofOptions::IsInitialized(a4) & 1) != 0)
    goto LABEL_11;
LABEL_3:
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  if (v18 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v18 + 1;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
  if (v18)
  {
LABEL_17:
    if (v17 >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(p_dst, v25, v18);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 46;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)&__p, (uint64_t)a4, 7, "Uninterpreted option is missing name or value.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22DC5EFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_22DC5EFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::__map_value_compare<std::string,std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string,google::protobuf::EnumValueDescriptor const*>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_27;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_27:
    v22 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x40uLL);
    v23 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    v24 = (uint64_t *)*((_QWORD *)a3 + 2);
    v25 = (uint64_t *)*((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 2) = 0;
    *((_OWORD *)v10 + 2) = v23;
    v10[6] = v24;
    v10[7] = v25;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v22;
    *v6 = (uint64_t *)v10;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v10;
    if (v26)
    {
      *a1 = v26;
      v27 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

uint64_t **std::__tree<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::__map_value_compare<std::string,std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,google::protobuf::EnumValueDescriptor const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x40uLL);
    v24 = (std::string *)(v23 + 4);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    v23[7] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_22DC5F33C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::EnumDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3, google::protobuf::EnumOptions *a4, uint64_t a5, uint64_t a6, std::string::size_type a7)
{
  uint64_t v14;
  int *v15;
  int **v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  char *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t ExtensionByNumberNoLock;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  std::string __p;
  void *v55;
  char v56;
  void *v57;
  void *v58;
  std::string __dst;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = (int *)operator new();
  google::protobuf::EnumOptions::EnumOptions((google::protobuf::EnumOptions *)v15, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v16 = *(int ***)(v14 + 240);
  if ((unint64_t)v16 < *(_QWORD *)(v14 + 248))
  {
    *v16 = v15;
    *(_QWORD *)(v14 + 240) = v16 + 1;
    if ((google::protobuf::EnumOptions::IsInitialized(a4) & 1) == 0)
      goto LABEL_3;
LABEL_11:
    google::protobuf::MessageLite::SerializeAsString(a4, (uint64_t)&__p);
    v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::MessageLite::ParseFromString(v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a5 + 32) = v15;
      if (v15[14] < 1)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a5 + 32) = v15;
      if (v15[14] < 1)
      {
LABEL_35:
        v31 = *((_QWORD *)a4 + 1);
        if ((v31 & 1) == 0)
          goto LABEL_36;
        goto LABEL_70;
      }
    }
    v22 = (google::protobuf::UnknownFieldSet *)v57;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v56 < 0)
    {
      operator delete(v55);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)a4 + 1);
    if ((v31 & 1) == 0)
    {
LABEL_36:
      v32 = (uint64_t *)google::protobuf::UnknownFieldSet::default_instance(v22);
      if (*v32 == v32[1])
        return;
LABEL_37:
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
      if (*(char *)(a7 + 23) >= 0)
        v34 = a7;
      else
        v34 = *(_QWORD *)a7;
      __p.__r_.__value_.__r.__words[0] = v34;
      v35 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v33, (const char **)&__p.__r_.__value_.__l.__data_);
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          v37 = *v32;
          v36 = v32[1];
          if ((int)((unint64_t)(v36 - *v32) >> 4) >= 1)
          {
            v38 = 0;
            v39 = (unint64_t)v35[4];
            v40 = (uint64_t **)(a1 + 128);
            do
            {
              ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(*(_QWORD *)a1, v39, *(_DWORD *)(v37 + 16 * v38));
              if (ExtensionByNumberNoLock)
              {
                v42 = ExtensionByNumberNoLock;
                v43 = *v40;
                if (*v40)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  v45 = (uint64_t *)(a1 + 128);
                  v46 = *v40;
                  do
                  {
                    v47 = v46[4];
                    v48 = v47 >= v44;
                    if (v47 >= v44)
                      v49 = (uint64_t **)v46;
                    else
                      v49 = (uint64_t **)(v46 + 1);
                    if (v48)
                      v45 = v46;
                    v46 = *v49;
                  }
                  while (*v49);
                  if (v45 != (uint64_t *)v40 && v44 >= v45[4])
                  {
                    v50 = (uint64_t *)v45[1];
                    v51 = v45;
                    if (v50)
                    {
                      do
                      {
                        v52 = v50;
                        v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        v52 = (uint64_t *)v51[2];
                        v53 = *v52 == (_QWORD)v51;
                        v51 = v52;
                      }
                      while (!v53);
                    }
                    if (*(uint64_t **)(a1 + 120) == v45)
                      *(_QWORD *)(a1 + 120) = v52;
                    --*(_QWORD *)(a1 + 136);
                    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v45);
                    operator delete(v45);
                    v37 = *v32;
                    v36 = v32[1];
                  }
                }
              }
              ++v38;
            }
            while (v38 < (int)((unint64_t)(v36 - v37) >> 4));
          }
        }
      }
      return;
    }
LABEL_70:
    v32 = (uint64_t *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v32 == *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 16))
      return;
    goto LABEL_37;
  }
  v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v14 + 232), &__p);
  v15 = (int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 240) = v21;
  if ((google::protobuf::EnumOptions::IsInitialized(a4) & 1) != 0)
    goto LABEL_11;
LABEL_3:
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  if (v18 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v18 + 1;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
  if (v18)
  {
LABEL_17:
    if (v17 >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(p_dst, v25, v18);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 46;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)&__p, (uint64_t)a4, 7, "Uninterpreted option is missing name or value.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22DC5F750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_22DC5F764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::EnumValueDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3, google::protobuf::EnumValueOptions *a4, uint64_t a5, uint64_t a6, std::string::size_type a7)
{
  uint64_t v14;
  int *v15;
  int **v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  char *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t ExtensionByNumberNoLock;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  std::string __p;
  void *v55;
  char v56;
  void *v57;
  void *v58;
  std::string __dst;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = (int *)operator new();
  google::protobuf::EnumValueOptions::EnumValueOptions((google::protobuf::EnumValueOptions *)v15, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v16 = *(int ***)(v14 + 240);
  if ((unint64_t)v16 < *(_QWORD *)(v14 + 248))
  {
    *v16 = v15;
    *(_QWORD *)(v14 + 240) = v16 + 1;
    if ((google::protobuf::EnumValueOptions::IsInitialized(a4) & 1) == 0)
      goto LABEL_3;
LABEL_11:
    google::protobuf::MessageLite::SerializeAsString(a4, (uint64_t)&__p);
    v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::MessageLite::ParseFromString(v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a5 + 32) = v15;
      if (v15[14] < 1)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a5 + 32) = v15;
      if (v15[14] < 1)
      {
LABEL_35:
        v31 = *((_QWORD *)a4 + 1);
        if ((v31 & 1) == 0)
          goto LABEL_36;
        goto LABEL_70;
      }
    }
    v22 = (google::protobuf::UnknownFieldSet *)v57;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v56 < 0)
    {
      operator delete(v55);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)a4 + 1);
    if ((v31 & 1) == 0)
    {
LABEL_36:
      v32 = (uint64_t *)google::protobuf::UnknownFieldSet::default_instance(v22);
      if (*v32 == v32[1])
        return;
LABEL_37:
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
      if (*(char *)(a7 + 23) >= 0)
        v34 = a7;
      else
        v34 = *(_QWORD *)a7;
      __p.__r_.__value_.__r.__words[0] = v34;
      v35 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v33, (const char **)&__p.__r_.__value_.__l.__data_);
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          v37 = *v32;
          v36 = v32[1];
          if ((int)((unint64_t)(v36 - *v32) >> 4) >= 1)
          {
            v38 = 0;
            v39 = (unint64_t)v35[4];
            v40 = (uint64_t **)(a1 + 128);
            do
            {
              ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(*(_QWORD *)a1, v39, *(_DWORD *)(v37 + 16 * v38));
              if (ExtensionByNumberNoLock)
              {
                v42 = ExtensionByNumberNoLock;
                v43 = *v40;
                if (*v40)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  v45 = (uint64_t *)(a1 + 128);
                  v46 = *v40;
                  do
                  {
                    v47 = v46[4];
                    v48 = v47 >= v44;
                    if (v47 >= v44)
                      v49 = (uint64_t **)v46;
                    else
                      v49 = (uint64_t **)(v46 + 1);
                    if (v48)
                      v45 = v46;
                    v46 = *v49;
                  }
                  while (*v49);
                  if (v45 != (uint64_t *)v40 && v44 >= v45[4])
                  {
                    v50 = (uint64_t *)v45[1];
                    v51 = v45;
                    if (v50)
                    {
                      do
                      {
                        v52 = v50;
                        v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        v52 = (uint64_t *)v51[2];
                        v53 = *v52 == (_QWORD)v51;
                        v51 = v52;
                      }
                      while (!v53);
                    }
                    if (*(uint64_t **)(a1 + 120) == v45)
                      *(_QWORD *)(a1 + 120) = v52;
                    --*(_QWORD *)(a1 + 136);
                    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v45);
                    operator delete(v45);
                    v37 = *v32;
                    v36 = v32[1];
                  }
                }
              }
              ++v38;
            }
            while (v38 < (int)((unint64_t)(v36 - v37) >> 4));
          }
        }
      }
      return;
    }
LABEL_70:
    v32 = (uint64_t *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v32 == *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 16))
      return;
    goto LABEL_37;
  }
  v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v14 + 232), &__p);
  v15 = (int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 240) = v21;
  if ((google::protobuf::EnumValueOptions::IsInitialized(a4) & 1) != 0)
    goto LABEL_11;
LABEL_3:
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  if (v18 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v18 + 1;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
  if (v18)
  {
LABEL_17:
    if (v17 >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(p_dst, v25, v18);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 46;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)&__p, (uint64_t)a4, 7, "Uninterpreted option is missing name or value.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22DC5FBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_22DC5FBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::ServiceDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3, google::protobuf::ServiceOptions *a4, uint64_t a5, uint64_t a6, std::string::size_type a7)
{
  uint64_t v14;
  int *v15;
  int **v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  char *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t ExtensionByNumberNoLock;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  std::string __p;
  void *v55;
  char v56;
  void *v57;
  void *v58;
  std::string __dst;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = (int *)operator new();
  google::protobuf::ServiceOptions::ServiceOptions((google::protobuf::ServiceOptions *)v15, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v16 = *(int ***)(v14 + 240);
  if ((unint64_t)v16 < *(_QWORD *)(v14 + 248))
  {
    *v16 = v15;
    *(_QWORD *)(v14 + 240) = v16 + 1;
    if ((google::protobuf::ServiceOptions::IsInitialized(a4) & 1) == 0)
      goto LABEL_3;
LABEL_11:
    google::protobuf::MessageLite::SerializeAsString(a4, (uint64_t)&__p);
    v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::MessageLite::ParseFromString(v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a5 + 24) = v15;
      if (v15[14] < 1)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a5 + 24) = v15;
      if (v15[14] < 1)
      {
LABEL_35:
        v31 = *((_QWORD *)a4 + 1);
        if ((v31 & 1) == 0)
          goto LABEL_36;
        goto LABEL_70;
      }
    }
    v22 = (google::protobuf::UnknownFieldSet *)v57;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v56 < 0)
    {
      operator delete(v55);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)a4 + 1);
    if ((v31 & 1) == 0)
    {
LABEL_36:
      v32 = (uint64_t *)google::protobuf::UnknownFieldSet::default_instance(v22);
      if (*v32 == v32[1])
        return;
LABEL_37:
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
      if (*(char *)(a7 + 23) >= 0)
        v34 = a7;
      else
        v34 = *(_QWORD *)a7;
      __p.__r_.__value_.__r.__words[0] = v34;
      v35 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v33, (const char **)&__p.__r_.__value_.__l.__data_);
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          v37 = *v32;
          v36 = v32[1];
          if ((int)((unint64_t)(v36 - *v32) >> 4) >= 1)
          {
            v38 = 0;
            v39 = (unint64_t)v35[4];
            v40 = (uint64_t **)(a1 + 128);
            do
            {
              ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(*(_QWORD *)a1, v39, *(_DWORD *)(v37 + 16 * v38));
              if (ExtensionByNumberNoLock)
              {
                v42 = ExtensionByNumberNoLock;
                v43 = *v40;
                if (*v40)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  v45 = (uint64_t *)(a1 + 128);
                  v46 = *v40;
                  do
                  {
                    v47 = v46[4];
                    v48 = v47 >= v44;
                    if (v47 >= v44)
                      v49 = (uint64_t **)v46;
                    else
                      v49 = (uint64_t **)(v46 + 1);
                    if (v48)
                      v45 = v46;
                    v46 = *v49;
                  }
                  while (*v49);
                  if (v45 != (uint64_t *)v40 && v44 >= v45[4])
                  {
                    v50 = (uint64_t *)v45[1];
                    v51 = v45;
                    if (v50)
                    {
                      do
                      {
                        v52 = v50;
                        v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        v52 = (uint64_t *)v51[2];
                        v53 = *v52 == (_QWORD)v51;
                        v51 = v52;
                      }
                      while (!v53);
                    }
                    if (*(uint64_t **)(a1 + 120) == v45)
                      *(_QWORD *)(a1 + 120) = v52;
                    --*(_QWORD *)(a1 + 136);
                    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v45);
                    operator delete(v45);
                    v37 = *v32;
                    v36 = v32[1];
                  }
                }
              }
              ++v38;
            }
            while (v38 < (int)((unint64_t)(v36 - v37) >> 4));
          }
        }
      }
      return;
    }
LABEL_70:
    v32 = (uint64_t *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v32 == *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 16))
      return;
    goto LABEL_37;
  }
  v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v14 + 232), &__p);
  v15 = (int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 240) = v21;
  if ((google::protobuf::ServiceOptions::IsInitialized(a4) & 1) != 0)
    goto LABEL_11;
LABEL_3:
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  if (v18 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v18 + 1;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
  if (v18)
  {
LABEL_17:
    if (v17 >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(p_dst, v25, v18);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 46;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)&__p, (uint64_t)a4, 7, "Uninterpreted option is missing name or value.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22DC60060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_22DC60074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void google::protobuf::DescriptorBuilder::AllocateOptionsImpl<google::protobuf::MethodDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3, google::protobuf::MethodOptions *a4, uint64_t a5, uint64_t a6, std::string::size_type a7)
{
  uint64_t v14;
  int *v15;
  int **v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  char *v21;
  google::protobuf::UnknownFieldSet *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  std::string::size_type v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t ExtensionByNumberNoLock;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  std::string __p;
  void *v55;
  char v56;
  void *v57;
  void *v58;
  std::string __dst;

  v14 = *(_QWORD *)(a1 + 8);
  v15 = (int *)operator new();
  google::protobuf::MethodOptions::MethodOptions((google::protobuf::MethodOptions *)v15, 0);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  v16 = *(int ***)(v14 + 240);
  if ((unint64_t)v16 < *(_QWORD *)(v14 + 248))
  {
    *v16 = v15;
    *(_QWORD *)(v14 + 240) = v16 + 1;
    if ((google::protobuf::MethodOptions::IsInitialized(a4) & 1) == 0)
      goto LABEL_3;
LABEL_11:
    google::protobuf::MessageLite::SerializeAsString(a4, (uint64_t)&__p);
    v22 = (google::protobuf::UnknownFieldSet *)google::protobuf::MessageLite::ParseFromString(v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)(a5 + 88) = v15;
      if (v15[14] < 1)
        goto LABEL_35;
    }
    else
    {
      *(_QWORD *)(a5 + 88) = v15;
      if (v15[14] < 1)
      {
LABEL_35:
        v31 = *((_QWORD *)a4 + 1);
        if ((v31 & 1) == 0)
          goto LABEL_36;
        goto LABEL_70;
      }
    }
    v22 = (google::protobuf::UnknownFieldSet *)v57;
    if (v57)
    {
      v58 = v57;
      operator delete(v57);
    }
    if (v56 < 0)
    {
      operator delete(v55);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_35;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)a4 + 1);
    if ((v31 & 1) == 0)
    {
LABEL_36:
      v32 = (uint64_t *)google::protobuf::UnknownFieldSet::default_instance(v22);
      if (*v32 == v32[1])
        return;
LABEL_37:
      v33 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 304);
      if (*(char *)(a7 + 23) >= 0)
        v34 = a7;
      else
        v34 = *(_QWORD *)a7;
      __p.__r_.__value_.__r.__words[0] = v34;
      v35 = std::__hash_table<std::__hash_value_type<char const*,google::protobuf::Symbol>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::hash<char const*>,google::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,google::protobuf::Symbol>,google::protobuf::streq,google::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,google::protobuf::Symbol>>>::find<char const*>(v33, (const char **)&__p.__r_.__value_.__l.__data_);
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          v37 = *v32;
          v36 = v32[1];
          if ((int)((unint64_t)(v36 - *v32) >> 4) >= 1)
          {
            v38 = 0;
            v39 = (unint64_t)v35[4];
            v40 = (uint64_t **)(a1 + 128);
            do
            {
              ExtensionByNumberNoLock = google::protobuf::DescriptorPool::InternalFindExtensionByNumberNoLock(*(_QWORD *)a1, v39, *(_DWORD *)(v37 + 16 * v38));
              if (ExtensionByNumberNoLock)
              {
                v42 = ExtensionByNumberNoLock;
                v43 = *v40;
                if (*v40)
                {
                  v44 = *(_QWORD *)(v42 + 40);
                  v45 = (uint64_t *)(a1 + 128);
                  v46 = *v40;
                  do
                  {
                    v47 = v46[4];
                    v48 = v47 >= v44;
                    if (v47 >= v44)
                      v49 = (uint64_t **)v46;
                    else
                      v49 = (uint64_t **)(v46 + 1);
                    if (v48)
                      v45 = v46;
                    v46 = *v49;
                  }
                  while (*v49);
                  if (v45 != (uint64_t *)v40 && v44 >= v45[4])
                  {
                    v50 = (uint64_t *)v45[1];
                    v51 = v45;
                    if (v50)
                    {
                      do
                      {
                        v52 = v50;
                        v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        v52 = (uint64_t *)v51[2];
                        v53 = *v52 == (_QWORD)v51;
                        v51 = v52;
                      }
                      while (!v53);
                    }
                    if (*(uint64_t **)(a1 + 120) == v45)
                      *(_QWORD *)(a1 + 120) = v52;
                    --*(_QWORD *)(a1 + 136);
                    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v45);
                    operator delete(v45);
                    v37 = *v32;
                    v36 = v32[1];
                  }
                }
              }
              ++v38;
            }
            while (v38 < (int)((unint64_t)(v36 - v37) >> 4));
          }
        }
      }
      return;
    }
LABEL_70:
    v32 = (uint64_t *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (*v32 == *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 16))
      return;
    goto LABEL_37;
  }
  v21 = std::vector<std::unique_ptr<operations_research::sat::Model::DeleteInterface>>::__emplace_back_slow_path<operations_research::sat::Model::Delete<operations_research::sat::SatSolver> *>((char **)(v14 + 232), &__p);
  v15 = (int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v14 + 240) = v21;
  if ((google::protobuf::MethodOptions::IsInitialized(a4) & 1) != 0)
    goto LABEL_11;
LABEL_3:
  v17 = *(char *)(a2 + 23);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = v18 + 1;
  if (v18 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    __dst.__r_.__value_.__l.__size_ = v18 + 1;
    __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
  if (v18)
  {
LABEL_17:
    if (v17 >= 0)
      v25 = (const void *)a2;
    else
      v25 = *(const void **)a2;
    memmove(p_dst, v25, v18);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 46;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a3;
  else
    v27 = *(const std::string::value_type **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = std::string::append(&__dst, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::DescriptorBuilder::AddError(a1, (const std::string::value_type *)&__p, (uint64_t)a4, 7, "Uninterpreted option is missing name or value.");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_22DC604E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void sub_22DC604FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::string,std::__value_type<std::string,google::protobuf::FieldDescriptor const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,google::protobuf::FieldDescriptor const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x40uLL);
    v24 = (std::string *)(v23 + 4);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    v23[7] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_22DC606F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;
  void *v5;

  if (a2)
  {
    std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    v5 = (void *)a2[4];
    if (v5)
    {
      a2[5] = v5;
      operator delete(v5);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t **v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;

  v6 = (uint64_t **)(a1 + 8);
  result = *(uint64_t **)(a1 + 8);
  if (!result)
  {
    v10 = v6;
LABEL_44:
    std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, a4, (uint64_t)&v29);
    v27 = v29;
    *v29 = 0;
    v27[1] = 0;
    v27[2] = (uint64_t)v10;
    *v6 = v27;
    v28 = **(_QWORD **)a1;
    if (v28)
    {
      *(_QWORD *)a1 = v28;
      v27 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
    ++*(_QWORD *)(a1 + 16);
    return v29;
  }
  v7 = a2[1];
  if (*a2 == v7)
  {
    v9 = result[4];
    v8 = result[5];
    if (v9 == v8)
      return result;
    v10 = (uint64_t **)result;
    while (1)
    {
      v11 = v9 + 4;
      v12 = *a2;
      while (v12 != v7)
      {
        v13 = *v12;
        v14 = *(_DWORD *)(v11 - 4);
        if (*v12 < v14)
          break;
        ++v12;
        v15 = v14 < v13 || v11 == v8;
        v11 += 4;
        if (v15)
          goto LABEL_40;
      }
      result = *v10;
      if (!*v10)
        break;
      v9 = result[4];
      v8 = result[5];
      v6 = v10;
      v10 = (uint64_t **)*v10;
      if (v9 == v8)
        return result;
    }
    v6 = v10;
    goto LABEL_44;
  }
LABEL_20:
  while (1)
  {
    v10 = (uint64_t **)result;
    v16 = (int *)result[4];
    v17 = (int *)result[5];
    if (v16 == v17)
      break;
    v18 = v16 + 1;
    v19 = *a2;
    while (v19 != v7)
    {
      v20 = *v19;
      v21 = *(v18 - 1);
      if (*v19 < v21)
        break;
      ++v19;
      if (v21 < v20 || v18++ == v17)
        goto LABEL_29;
    }
    result = (uint64_t *)*result;
    v6 = v10;
    if (!*v10)
      goto LABEL_44;
  }
LABEL_29:
  v23 = (uint64_t)(*a2 + 1);
  do
  {
    if (v16 == v17 || (v24 = *v16, v25 = *(_DWORD *)(v23 - 4), *v16 < v25))
    {
      v6 = (uint64_t **)(result + 1);
      result = (uint64_t *)result[1];
      if (result)
        goto LABEL_20;
      goto LABEL_44;
    }
    ++v16;
    v26 = v25 < v24 || v23 == (_QWORD)v7;
    v23 += 4;
  }
  while (!v26);
LABEL_40:
  result = (uint64_t *)v10;
  if (!v10)
    goto LABEL_44;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::vector<int>,int>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,int>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v5 = a1 + 8;
  result = operator new(0x40uLL);
  v7 = result;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result[4] = 0;
  v8 = *a2;
  result[5] = 0;
  result[6] = 0;
  v10 = *(_BYTE **)v8;
  v9 = *(_BYTE **)(v8 + 8);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    v7[4] = v12;
    v7[5] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    v7[6] = v13;
    result = memcpy(v12, v10, v11);
    v7[5] = v13;
  }
  *((_DWORD *)v7 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22DC60AAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 40) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::vector<int>,int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<int>,int>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<std::vector<int>,int>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<int>,int>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[4];
      if (v3)
      {
        v2[5] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t **v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;

  v6 = (uint64_t **)(a1 + 8);
  result = *(uint64_t **)(a1 + 8);
  if (!result)
  {
    v10 = v6;
LABEL_44:
    std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, a4, (uint64_t)&v29);
    v27 = v29;
    *v29 = 0;
    v27[1] = 0;
    v27[2] = (uint64_t)v10;
    *v6 = v27;
    v28 = **(_QWORD **)a1;
    if (v28)
    {
      *(_QWORD *)a1 = v28;
      v27 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
    ++*(_QWORD *)(a1 + 16);
    return v29;
  }
  v7 = a2[1];
  if (*a2 == v7)
  {
    v9 = result[4];
    v8 = result[5];
    if (v9 == v8)
      return result;
    v10 = (uint64_t **)result;
    while (1)
    {
      v11 = v9 + 4;
      v12 = *a2;
      while (v12 != v7)
      {
        v13 = *v12;
        v14 = *(_DWORD *)(v11 - 4);
        if (*v12 < v14)
          break;
        ++v12;
        v15 = v14 < v13 || v11 == v8;
        v11 += 4;
        if (v15)
          goto LABEL_40;
      }
      result = *v10;
      if (!*v10)
        break;
      v9 = result[4];
      v8 = result[5];
      v6 = v10;
      v10 = (uint64_t **)*v10;
      if (v9 == v8)
        return result;
    }
    v6 = v10;
    goto LABEL_44;
  }
LABEL_20:
  while (1)
  {
    v10 = (uint64_t **)result;
    v16 = (int *)result[4];
    v17 = (int *)result[5];
    if (v16 == v17)
      break;
    v18 = v16 + 1;
    v19 = *a2;
    while (v19 != v7)
    {
      v20 = *v19;
      v21 = *(v18 - 1);
      if (*v19 < v21)
        break;
      ++v19;
      if (v21 < v20 || v18++ == v17)
        goto LABEL_29;
    }
    result = (uint64_t *)*result;
    v6 = v10;
    if (!*v10)
      goto LABEL_44;
  }
LABEL_29:
  v23 = (uint64_t)(*a2 + 1);
  do
  {
    if (v16 == v17 || (v24 = *v16, v25 = *(_DWORD *)(v23 - 4), *v16 < v25))
    {
      v6 = (uint64_t **)(result + 1);
      result = (uint64_t *)result[1];
      if (result)
        goto LABEL_20;
      goto LABEL_44;
    }
    ++v16;
    v26 = v25 < v24 || v23 == (_QWORD)v7;
    v23 += 4;
  }
  while (!v26);
LABEL_40:
  result = (uint64_t *)v10;
  if (!v10)
    goto LABEL_44;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::vector<int>,std::vector<int>>,std::__map_value_compare<std::vector<int>,std::__value_type<std::vector<int>,std::vector<int>>,std::less<std::vector<int>>,true>,std::allocator<std::__value_type<std::vector<int>,std::vector<int>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v5 = a1 + 8;
  result = operator new(0x50uLL);
  v7 = result;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result[4] = 0;
  v8 = *a2;
  result[5] = 0;
  result[6] = 0;
  v10 = *(_BYTE **)v8;
  v9 = *(_BYTE **)(v8 + 8);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - v10);
    v7[4] = v12;
    v7[5] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    v7[6] = v13;
    result = memcpy(v12, v10, v11);
    v7[5] = v13;
  }
  v7[7] = 0;
  v7[8] = 0;
  v7[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_22DC60DB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 40) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::vector<int>,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<int>,std::vector<int>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<std::vector<int>,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<int>,std::vector<int>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[7];
      if (v3)
      {
        v2[8] = v3;
        operator delete(v3);
      }
      v4 = (void *)v2[4];
      if (v4)
      {
        v2[5] = v4;
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::~RepeatedPtrField(uint64_t a1)
{
  google::protobuf::SourceCodeInfo_Location **v2;
  google::protobuf::internal::ArenaImpl *v3;
  google::protobuf::SourceCodeInfo_Location **v4;
  uint64_t v5;

  v2 = *(google::protobuf::SourceCodeInfo_Location ***)(a1 + 16);
  if (v2)
  {
    v3 = *(google::protobuf::internal::ArenaImpl **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 16) = 0;
LABEL_12:
      google::protobuf::internal::ArenaImpl::SpaceAllocated(v3);
      return a1;
    }
    v4 = v2 + 1;
    v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          google::protobuf::SourceCodeInfo_Location::~SourceCodeInfo_Location(*v4);
          MEMORY[0x22E31DF78]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      v2 = *(google::protobuf::SourceCodeInfo_Location ***)(a1 + 16);
    }
    operator delete(v2);
  }
  v3 = *(google::protobuf::internal::ArenaImpl **)a1;
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    goto LABEL_12;
  return a1;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  google::protobuf::SourceCodeInfo_Location **v3;
  google::protobuf::SourceCodeInfo_Location *v4;
  unsigned int *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1768);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (google::protobuf::SourceCodeInfo_Location **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      google::protobuf::SourceCodeInfo_Location::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_22DC60F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC60F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const google::protobuf::SourceCodeInfo_Location **v13;
  google::protobuf::SourceCodeInfo_Location **v14;
  const google::protobuf::SourceCodeInfo_Location *v15;
  const google::protobuf::SourceCodeInfo_Location *v16;
  google::protobuf::SourceCodeInfo_Location *v17;
  google::protobuf::Arena *v18;
  int v19;
  uint64_t v20;
  google::protobuf::SourceCodeInfo_Location **v21;
  const google::protobuf::SourceCodeInfo_Location **v22;
  const google::protobuf::SourceCodeInfo_Location *v23;
  google::protobuf::SourceCodeInfo_Location *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1787);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v27, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = **(int **)(a1 + 16);
    v10 = *(int *)(a1 + 8);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const google::protobuf::SourceCodeInfo_Location **)(v6 + 8);
      v14 = (google::protobuf::SourceCodeInfo_Location **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<google::protobuf::SourceCodeInfo_Location>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = *(google::protobuf::Arena **)a1;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (google::protobuf::SourceCodeInfo_Location **)((char *)v8 + v20);
      v22 = (const google::protobuf::SourceCodeInfo_Location **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = (google::protobuf::SourceCodeInfo_Location *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::SourceCodeInfo_Location>(v18);
        google::protobuf::internal::GenericTypeHandler<google::protobuf::SourceCodeInfo_Location>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v25;
    v26 = *(int **)(a1 + 16);
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_22DC610F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC61108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<google::protobuf::SourceCodeInfo_Location>::Merge(const google::protobuf::SourceCodeInfo_Location *a1, google::protobuf::SourceCodeInfo_Location *a2)
{
  google::protobuf::SourceCodeInfo_Location::MergeFrom(a2, a1);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FieldDescriptor const*),google::protobuf::FieldDescriptor const*&&>>(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(**(_QWORD **)(*(_QWORD *)a1 + 8));
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::FileDescriptor const*),google::protobuf::FileDescriptor const*&&>>(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(**(_QWORD **)(*(_QWORD *)a1 + 8));
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(google::protobuf::internal::LazyDescriptor *),google::protobuf::internal::LazyDescriptor *&&>>(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(**(_QWORD **)(*(_QWORD *)a1 + 8));
}

void InitDefaultsscc_info_DescriptorProto_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::DescriptorProto::DescriptorProto((google::protobuf::DescriptorProto *)&google::protobuf::_DescriptorProto_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_DescriptorProto_default_instance_, v4);
  qword_25408B708 = (uint64_t)&google::protobuf::_MessageOptions_default_instance_;
}

void InitDefaultsscc_info_DescriptorProto_ExtensionRange_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_DescriptorProto_ExtensionRange_default_instance_ = (uint64_t)&off_24F988360;
  *(_QWORD *)algn_25408BBE8 = 0;
  qword_25408BBF0 = 0;
  if (atomic_load(scc_info_DescriptorProto_ExtensionRange_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_DescriptorProto_ExtensionRange_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408BBF8 = 0;
  unk_25408BC00 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_DescriptorProto_ExtensionRange_default_instance_, v4);
  qword_25408BBF8 = (uint64_t)&google::protobuf::_ExtensionRangeOptions_default_instance_;
}

void InitDefaultsscc_info_DescriptorProto_ReservedRange_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_DescriptorProto_ReservedRange_default_instance_ = (uint64_t)&off_24F988410;
  *(_QWORD *)algn_25408BBC8 = 0;
  qword_25408BBD0 = 0;
  unk_25408BBD8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_DescriptorProto_ReservedRange_default_instance_, v4);
}

void InitDefaultsscc_info_EnumDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_EnumDescriptorProto_default_instance_ = (uint64_t)&off_24F988830;
  *(_QWORD *)algn_25408B7C8 = 0;
  xmmword_25408B7D0 = 0u;
  unk_25408B7E0 = 0u;
  xmmword_25408B7F0 = 0u;
  unk_25408B800 = 0u;
  xmmword_25408B810 = 0u;
  if (atomic_load(scc_info_EnumDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_EnumDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408B820 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_25408B828 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_EnumDescriptorProto_default_instance_, v4);
  qword_25408B828 = (uint64_t)&google::protobuf::_EnumOptions_default_instance_;
}

void sub_22DC61348(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(&unk_25408B808);
  google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto_EnumReservedRange>::~RepeatedPtrField((uint64_t)&xmmword_25408B7F0);
  google::protobuf::RepeatedPtrField<google::protobuf::EnumValueDescriptorProto>::~RepeatedPtrField((uint64_t)&xmmword_25408B7D0 + 8);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_EnumDescriptorProto_EnumReservedRange_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_EnumDescriptorProto_EnumReservedRange_default_instance_ = (uint64_t)&off_24F988780;
  unk_25408BC50 = 0;
  qword_25408BC58 = 0;
  unk_25408BC60 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_EnumDescriptorProto_EnumReservedRange_default_instance_, v4);
}

void InitDefaultsscc_info_EnumOptions_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_EnumOptions_default_instance_ = (uint64_t)&off_24F988DB0;
  *(_QWORD *)algn_25408B378 = 0;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)&unk_25408B380, 0);
  unk_25408B3A8 = 0u;
  unk_25408B398 = 0u;
  if (atomic_load(scc_info_EnumOptions_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_EnumOptions_google_2fprotobuf_2fdescriptor_2eproto);
  word_25408B3B8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_EnumOptions_default_instance_, v4);
}

void sub_22DC61458(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::~RepeatedPtrField((uint64_t)&unk_25408B3A0);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&unk_25408B380);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_EnumValueDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_EnumValueDescriptorProto_default_instance_ = (uint64_t)&off_24F9888E0;
  unk_25408BB30 = 0;
  qword_25408BB38 = 0;
  if (atomic_load(scc_info_EnumValueDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_EnumValueDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408BB40 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_25408BB48 = 0;
  dword_25408BB50 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_EnumValueDescriptorProto_default_instance_, v4);
  qword_25408BB48 = (uint64_t)&google::protobuf::_EnumValueOptions_default_instance_;
}

void InitDefaultsscc_info_EnumValueOptions_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_EnumValueOptions_default_instance_ = (uint64_t)&off_24F988E60;
  *(_QWORD *)algn_25408B718 = 0;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)&unk_25408B720, 0);
  unk_25408B748 = 0u;
  unk_25408B738 = 0u;
  if (atomic_load(scc_info_EnumValueOptions_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_EnumValueOptions_google_2fprotobuf_2fdescriptor_2eproto);
  byte_25408B758 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_EnumValueOptions_default_instance_, v4);
}

void sub_22DC615AC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::~RepeatedPtrField((uint64_t)&unk_25408B740);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&unk_25408B720);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_ExtensionRangeOptions_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_ExtensionRangeOptions_default_instance_ = (uint64_t)&off_24F988570;
  *(_QWORD *)algn_25408B9F8 = 0;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)&unk_25408BA00, 0);
  qword_25408BA18 = 0;
  unk_25408BA20 = 0;
  dword_25408BA30 = 0;
  qword_25408BA28 = 0;
  if (atomic_load(scc_info_ExtensionRangeOptions_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ExtensionRangeOptions_google_2fprotobuf_2fdescriptor_2eproto);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_ExtensionRangeOptions_default_instance_, v4);
}

void sub_22DC61664(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::~RepeatedPtrField((uint64_t)&qword_25408BA18);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&unk_25408BA00);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_FieldDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_FieldDescriptorProto_default_instance_ = (uint64_t)&off_24F988620;
  unk_25408B970 = 0;
  qword_25408B978 = 0;
  if (atomic_load(scc_info_FieldDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FieldDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408B980 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408B988 = &google::protobuf::internal::fixed_address_empty_string;
  qword_25408B990 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408B998 = &google::protobuf::internal::fixed_address_empty_string;
  qword_25408B9A8 = 0;
  unk_25408B9B0 = 0;
  qword_25408B9A0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  byte_25408B9B8 = 0;
  unk_25408B9BC = 0x100000001;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_FieldDescriptorProto_default_instance_, v4);
  qword_25408B9A8 = (uint64_t)&google::protobuf::_FieldOptions_default_instance_;
}

void InitDefaultsscc_info_FieldOptions_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_FieldOptions_default_instance_ = (uint64_t)&off_24F988C50;
  unk_25408B470 = 0;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)&unk_25408B478, 0);
  unk_25408B4A0 = 0u;
  unk_25408B490 = 0u;
  if (atomic_load(scc_info_FieldOptions_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FieldOptions_google_2fprotobuf_2fdescriptor_2eproto);
  dword_25408B4B8 = 0;
  qword_25408B4B0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_FieldOptions_default_instance_, v4);
}

void sub_22DC617D0(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::~RepeatedPtrField((uint64_t)&unk_25408B498);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&unk_25408B478);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_FileDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::FileDescriptorProto::FileDescriptorProto((google::protobuf::FileDescriptorProto *)&google::protobuf::_FileDescriptorProto_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_FileDescriptorProto_default_instance_, v4);
  qword_25408B8F8 = (uint64_t)&google::protobuf::_FileOptions_default_instance_;
  unk_25408B900 = &google::protobuf::_SourceCodeInfo_default_instance_;
}

void InitDefaultsscc_info_FileDescriptorSet_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_FileDescriptorSet_default_instance_ = (uint64_t)&off_24F988200;
  *(_QWORD *)algn_25408B768 = 0;
  qword_25408B778 = 0;
  unk_25408B780 = 0;
  qword_25408B770 = 0;
  dword_25408B788 = 0;
  if (atomic_load(scc_info_FileDescriptorSet_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FileDescriptorSet_google_2fprotobuf_2fdescriptor_2eproto);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_FileDescriptorSet_default_instance_, v4);
}

void sub_22DC618EC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::FileDescriptorProto>::~RepeatedPtrField((uint64_t)&qword_25408B770);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_FileOptions_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_FileOptions_default_instance_ = (uint64_t)&off_24F988AF0;
  *(_QWORD *)algn_25408B3C8 = 0;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)&unk_25408B3D0, 0);
  unk_25408B3F8 = 0u;
  unk_25408B3E8 = 0u;
  if (atomic_load(scc_info_FileOptions_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FileOptions_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408B408 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408B410 = &google::protobuf::internal::fixed_address_empty_string;
  qword_25408B418 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408B420 = &google::protobuf::internal::fixed_address_empty_string;
  qword_25408B428 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408B430 = &google::protobuf::internal::fixed_address_empty_string;
  qword_25408B438 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408B440 = &google::protobuf::internal::fixed_address_empty_string;
  qword_25408B448 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408B450 = &google::protobuf::internal::fixed_address_empty_string;
  qword_25408B458 = 0;
  dword_25408B460 = 1;
  byte_25408B464 = 1;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_FileOptions_default_instance_, v4);
}

void sub_22DC619C0(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::~RepeatedPtrField((uint64_t)&unk_25408B3F0);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&unk_25408B3D0);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_GeneratedCodeInfo_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_GeneratedCodeInfo_default_instance_ = (uint64_t)&off_24F9893E0;
  *(_QWORD *)algn_25408B798 = 0;
  qword_25408B7A8 = 0;
  unk_25408B7B0 = 0;
  qword_25408B7A0 = 0;
  dword_25408B7B8 = 0;
  if (atomic_load(scc_info_GeneratedCodeInfo_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_GeneratedCodeInfo_google_2fprotobuf_2fdescriptor_2eproto);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_GeneratedCodeInfo_default_instance_, v4);
}

void sub_22DC61A6C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::GeneratedCodeInfo_Annotation>::~RepeatedPtrField((uint64_t)&qword_25408B7A0);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_GeneratedCodeInfo_Annotation_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_GeneratedCodeInfo_Annotation_default_instance_ = (uint64_t)&off_24F989330;
  unk_25408BB60 = 0;
  qword_25408BB70 = 0;
  unk_25408BB78 = 0;
  qword_25408BB68 = 0;
  if (atomic_load(scc_info_GeneratedCodeInfo_Annotation_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_GeneratedCodeInfo_Annotation_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408BB88 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408BB90 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_GeneratedCodeInfo_Annotation_default_instance_, v4);
}

void sub_22DC61B10(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&qword_25408BB70);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_MessageOptions_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_MessageOptions_default_instance_ = (uint64_t)&off_24F988BA0;
  unk_25408B560 = 0;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)&unk_25408B568, 0);
  unk_25408B590 = 0u;
  unk_25408B580 = 0u;
  if (atomic_load(scc_info_MessageOptions_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_MessageOptions_google_2fprotobuf_2fdescriptor_2eproto);
  dword_25408B5A0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_MessageOptions_default_instance_, v4);
}

void sub_22DC61BBC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::~RepeatedPtrField((uint64_t)&unk_25408B588);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&unk_25408B568);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_MethodDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_MethodDescriptorProto_default_instance_ = (uint64_t)&off_24F988A40;
  unk_25408BA40 = 0;
  qword_25408BA48 = 0;
  if (atomic_load(scc_info_MethodDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_MethodDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408BA50 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408BA58 = &google::protobuf::internal::fixed_address_empty_string;
  qword_25408BA60 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_25408BA68 = 0;
  word_25408BA70 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_MethodDescriptorProto_default_instance_, v4);
  qword_25408BA68 = (uint64_t)&google::protobuf::_MethodOptions_default_instance_;
}

void InitDefaultsscc_info_MethodOptions_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_MethodOptions_default_instance_ = (uint64_t)&off_24F988FC0;
  unk_25408B510 = 0;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)&unk_25408B518, 0);
  unk_25408B540 = 0u;
  unk_25408B530 = 0u;
  if (atomic_load(scc_info_MethodOptions_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_MethodOptions_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408B550 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_MethodOptions_default_instance_, v4);
}

void sub_22DC61D14(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::~RepeatedPtrField((uint64_t)&unk_25408B538);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&unk_25408B518);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_OneofDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_OneofDescriptorProto_default_instance_ = (uint64_t)&off_24F9886D0;
  unk_25408B9D0 = 0;
  qword_25408B9D8 = 0;
  if (atomic_load(scc_info_OneofDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_OneofDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408B9E0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_25408B9E8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_OneofDescriptorProto_default_instance_, v4);
  qword_25408B9E8 = (uint64_t)&google::protobuf::_OneofOptions_default_instance_;
}

void InitDefaultsscc_info_OneofOptions_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_OneofOptions_default_instance_ = (uint64_t)&off_24F988D00;
  *(_QWORD *)algn_25408B4C8 = 0;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)&unk_25408B4D0, 0);
  qword_25408B4E8 = 0;
  unk_25408B4F0 = 0;
  dword_25408B500 = 0;
  qword_25408B4F8 = 0;
  if (atomic_load(scc_info_OneofOptions_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_OneofOptions_google_2fprotobuf_2fdescriptor_2eproto);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_OneofOptions_default_instance_, v4);
}

void sub_22DC61E64(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::~RepeatedPtrField((uint64_t)&qword_25408B4E8);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&unk_25408B4D0);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_ServiceDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_ServiceDescriptorProto_default_instance_ = (uint64_t)&off_24F988990;
  unk_25408BA80 = 0;
  xmmword_25408BA88 = 0u;
  unk_25408BA98 = 0u;
  if (atomic_load(scc_info_ServiceDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ServiceDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408BAA8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  qword_25408BAB0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_ServiceDescriptorProto_default_instance_, v4);
  qword_25408BAB0 = (uint64_t)&google::protobuf::_ServiceOptions_default_instance_;
}

void sub_22DC61F24(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::MethodDescriptorProto>::~RepeatedPtrField((uint64_t)&xmmword_25408BA88 + 8);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_ServiceOptions_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_ServiceOptions_default_instance_ = (uint64_t)&off_24F988F10;
  unk_25408B5B0 = 0;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)&unk_25408B5B8, 0);
  unk_25408B5E0 = 0u;
  unk_25408B5D0 = 0u;
  if (atomic_load(scc_info_ServiceOptions_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ServiceOptions_google_2fprotobuf_2fdescriptor_2eproto);
  byte_25408B5F0 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_ServiceOptions_default_instance_, v4);
}

void sub_22DC61FD0(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::~RepeatedPtrField((uint64_t)&unk_25408B5D8);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&unk_25408B5B8);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_SourceCodeInfo_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_SourceCodeInfo_default_instance_ = (uint64_t)&off_24F989280;
  unk_25408B600 = 0;
  qword_25408B610 = 0;
  unk_25408B618 = 0;
  qword_25408B608 = 0;
  dword_25408B620 = 0;
  if (atomic_load(scc_info_SourceCodeInfo_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SourceCodeInfo_google_2fprotobuf_2fdescriptor_2eproto);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_SourceCodeInfo_default_instance_, v4);
}

void sub_22DC6207C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::~RepeatedPtrField((uint64_t)&qword_25408B608);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_SourceCodeInfo_Location_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_SourceCodeInfo_Location_default_instance_ = (uint64_t)&off_24F9891D0;
  unk_25408BAC0 = 0;
  qword_25408BAD0 = 0;
  unk_25408BAD8 = 0;
  qword_25408BAC8 = 0;
  qword_25408BAE8 = 0;
  unk_25408BAF0 = 0;
  qword_25408BB08 = 0;
  unk_25408BB10 = 0;
  qword_25408BB00 = 0;
  if (atomic_load(scc_info_SourceCodeInfo_Location_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SourceCodeInfo_Location_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408BB18 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408BB20 = &google::protobuf::internal::fixed_address_empty_string;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_SourceCodeInfo_Location_default_instance_, v4);
}

void sub_22DC6212C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(&qword_25408BB00);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&qword_25408BAE8);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)&qword_25408BAD0);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_UninterpretedOption_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_UninterpretedOption_default_instance_ = (uint64_t)&off_24F989120;
  unk_25408B910 = 0;
  xmmword_25408B918 = 0u;
  unk_25408B928 = 0u;
  if (atomic_load(scc_info_UninterpretedOption_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_UninterpretedOption_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408B938 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408B940 = &google::protobuf::internal::fixed_address_empty_string;
  qword_25408B948 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_25408B950 = 0;
  qword_25408B958 = 0;
  unk_25408B960 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_UninterpretedOption_default_instance_, v4);
}

void sub_22DC621EC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption_NamePart>::~RepeatedPtrField((uint64_t)&xmmword_25408B918 + 8);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_UninterpretedOption_NamePart_google_2fprotobuf_2fdescriptor_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", a4);
  google::protobuf::_UninterpretedOption_NamePart_default_instance_ = (uint64_t)&off_24F989070;
  unk_25408BBA0 = 0;
  qword_25408BBA8 = 0;
  if (atomic_load(scc_info_UninterpretedOption_NamePart_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_UninterpretedOption_NamePart_google_2fprotobuf_2fdescriptor_2eproto);
  qword_25408BBB0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  byte_25408BBB8 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&google::protobuf::_UninterpretedOption_NamePart_default_instance_, v4);
}

BOOL google::protobuf::FieldDescriptorProto_Type_IsValid(google::protobuf *this)
{
  return ((_DWORD)this - 1) < 0x12;
}

BOOL google::protobuf::FieldDescriptorProto_Label_IsValid(google::protobuf *this)
{
  return ((_DWORD)this - 1) < 3;
}

uint64_t google::protobuf::FieldOptions_JSType_descriptor(google::protobuf *this)
{
  google::protobuf::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2fdescriptor_2eproto, 0);
  return qword_255DB34D0;
}

void google::protobuf::FileDescriptorSet::~FileDescriptorSet(google::protobuf::FileDescriptorSet *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  _QWORD *v5;
  void *v6;
  char v7;
  std::string v8[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 1409);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    v2 = *((_QWORD *)this + 1);
  }
LABEL_4:
  if ((v2 & 1) != 0)
  {
    v5 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0 && !*v5)
    {
      v6 = (void *)v5[1];
      if (v6 != (void *)v5[2])
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 1));
        v6 = (void *)v5[1];
      }
      if (v6)
      {
        v5[2] = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedPtrField<google::protobuf::FileDescriptorProto>::~RepeatedPtrField((uint64_t)this + 16);
}

{
  google::protobuf::FileDescriptorSet::~FileDescriptorSet(this);
  JUMPOUT(0x22E31DF78);
}

void sub_22DC623C8(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sub_22DC623DC(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

uint64_t google::protobuf::FileDescriptorSet::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void google::protobuf::FileDescriptorSet::Clear(google::protobuf::FileDescriptorSet *this)
{
  uint64_t v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::FileDescriptorProto>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0 && *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v2 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *google::protobuf::FileDescriptorSet::_InternalParse(google::protobuf::FileDescriptorSet *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  google::protobuf::internal::ParseContext *v5;
  _QWORD *v6;
  google::protobuf::internal *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  google::protobuf::internal *TagFallback;
  unsigned int v12;
  std::string::value_type *v13;
  google::protobuf::internal *v14;
  int *v15;
  uint64_t v16;
  int v17;
  google::protobuf::FileDescriptorProto *v18;
  const char *v19;
  uint64_t SizeFallback;
  unsigned int v21;
  std::string::value_type *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  int v27;
  __int32 v28;
  BOOL v29;
  int v30;
  int32x2_t v31;
  google::protobuf::UnknownFieldSet *v32;
  google::protobuf::internal::ParseContext *v33;
  google::protobuf::internal *v35;
  char v36;
  std::string v37[2];

  v35 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v35, a3[11].i32[1]) & 1) == 0)
  {
    v6 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v7 = (google::protobuf::internal *)((char *)v35 + 1);
      v8 = *(unsigned __int8 *)v35;
      if ((*(char *)v35 & 0x80000000) == 0)
        goto LABEL_6;
      v9 = v8 + (*(unsigned __int8 *)v7 << 7);
      v8 = v9 - 128;
      if ((*(char *)v7 & 0x80000000) == 0)
      {
        v7 = (google::protobuf::internal *)((char *)v35 + 2);
LABEL_6:
        v35 = v7;
        if (v8 == 10)
          break;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v35, (const char *)(v9 - 128));
      v35 = TagFallback;
      if (!TagFallback)
        return 0;
      v7 = TagFallback;
      v8 = v12;
      if (v12 == 10)
        break;
LABEL_7:
      if (v8)
        v10 = (v8 & 7) == 4;
      else
        v10 = 1;
      if (v10)
      {
        a3[10].i32[0] = v8 - 1;
        return v35;
      }
      if ((*v6 & 1) != 0)
      {
        v35 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, (google::protobuf::UnknownFieldSet *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8), v7, a3, v5);
        if (!v35)
          return 0;
        goto LABEL_33;
      }
      v32 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
      v35 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v32, v35, a3, v33);
      if (!v35)
        return 0;
LABEL_33:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v35, a3[11].i32[1]) & 1) != 0)return v35;
    }
    v13 = (char *)v7 - 1;
    while (1)
    {
      v14 = (google::protobuf::internal *)(v13 + 1);
      v35 = v14;
      v15 = (int *)*((_QWORD *)this + 4);
      if (!v15)
        break;
      v16 = *((int *)this + 6);
      v17 = *v15;
      if ((int)v16 < *v15)
      {
        *((_DWORD *)this + 6) = v16 + 1;
        v18 = *(google::protobuf::FileDescriptorProto **)&v15[2 * v16 + 2];
        v19 = (const char *)*(unsigned __int8 *)v14;
        if ((*(char *)v14 & 0x80000000) == 0)
          goto LABEL_27;
        goto LABEL_20;
      }
      if (v17 == *((_DWORD *)this + 7))
        goto LABEL_25;
LABEL_26:
      *v15 = v17 + 1;
      v18 = google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FileDescriptorProto>(*((google::protobuf::Arena **)this
                                                                                               + 2));
      v24 = *((_QWORD *)this + 4);
      v25 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v25 + 1;
      *(_QWORD *)(v24 + 8 * v25 + 8) = v18;
      v14 = v35;
      v19 = (const char *)*(unsigned __int8 *)v35;
      if ((*(char *)v35 & 0x80000000) == 0)
      {
LABEL_27:
        v22 = (char *)v14 + 1;
        goto LABEL_28;
      }
LABEL_20:
      SizeFallback = google::protobuf::internal::ReadSizeFallback(v14, v19);
      if (!SizeFallback)
        return 0;
      v22 = (std::string::value_type *)SizeFallback;
      LODWORD(v19) = v21;
      if (v21 >= 0x7FFFFFF0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v37, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
        v23 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v37, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((uint64_t)&v36, v23);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v37[0].__r_.__value_.__l.__data_);
      }
LABEL_28:
      v26 = a3[1];
      v27 = (_DWORD)v19 + (_DWORD)v22 - v26.i32[0];
      *a3 = (int32x2_t)(*(_QWORD *)&v26 + (v27 & (v27 >> 31)));
      v28 = a3[3].i32[1];
      a3[3].i32[1] = v27;
      v26.i32[0] = a3[11].i32[0];
      v29 = __OFSUB__(v26.i32[0]--, 1);
      a3[11].i32[0] = v26.i32[0];
      if (v26.i32[0] < 0 != v29)
        return 0;
      v13 = google::protobuf::FileDescriptorProto::_InternalParse(v18, v22, a3);
      if (!v13)
        return 0;
      ++a3[11].i32[0];
      if (a3[10].i32[0])
        return 0;
      v30 = a3[3].i32[1] + v28 - v27;
      a3[3].i32[1] = v30;
      v31 = (int32x2_t)(*(_QWORD *)&a3[1] + (v30 & (v30 >> 31)));
      *a3 = v31;
      v35 = (google::protobuf::internal *)v13;
      if (*(_QWORD *)&v31 <= (unint64_t)v13 || *v13 != 10)
        goto LABEL_33;
    }
    v17 = *((_DWORD *)this + 7);
LABEL_25:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v17 + 1);
    v15 = (int *)*((_QWORD *)this + 4);
    v17 = *v15;
    goto LABEL_26;
  }
  return v35;
}

void sub_22DC62750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC62764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *google::protobuf::FileDescriptorSet::_InternalSerialize(google::protobuf::FileDescriptorSet *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int i;
  char *v9;
  google::protobuf::FileDescriptorProto *v10;
  google::protobuf::io::EpsCopyOutputStream *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v10 = (google::protobuf::FileDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FileDescriptorProto>::TypeHandler>((uint64_t)this + 16, i);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v10 + 5);
      if (v12 <= 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12;
        v9 = (char *)a2 + 2;
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v13 = v12 >> 7;
        if (v12 >> 14)
        {
          v9 = (char *)a2 + 3;
          do
          {
            *(v9 - 1) = v13 | 0x80;
            v14 = v13 >> 7;
            ++v9;
            v15 = v13 >> 14;
            v13 >>= 7;
          }
          while (v15);
          *(v9 - 1) = v14;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v13;
          v9 = (char *)a2 + 3;
        }
      }
      a2 = google::protobuf::FileDescriptorProto::_InternalSerialize(v10, v9, a3, v11);
    }
  }
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8), a2, a3, a4);
  else
    return a2;
}

char *google::protobuf::FileDescriptorSet::ByteSizeLong(google::protobuf::FileDescriptorSet *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  google::protobuf::FileDescriptorProto **v4;
  uint64_t v5;
  google::protobuf::FileDescriptorProto *v6;
  char *v7;
  google::protobuf::UnknownFieldSet *v8;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (google::protobuf::FileDescriptorProto **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = google::protobuf::FileDescriptorProto::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
    v8 = (google::protobuf::FileDescriptorSet *)((char *)this + 8);
    if ((*((_BYTE *)this + 8) & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v2 = 0;
    v8 = (google::protobuf::FileDescriptorSet *)((char *)this + 8);
    if ((*((_BYTE *)this + 8) & 1) == 0)
    {
LABEL_8:
      *((_DWORD *)this + 10) = (_DWORD)v2;
      return (char *)v2;
    }
  }
  return google::protobuf::internal::ComputeUnknownFieldsSize(v8, v2, (_DWORD *)this + 10);
}

void google::protobuf::FileDescriptorSet::MergeFrom(google::protobuf::FileDescriptorSet *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  unsigned int *v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 1527);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
    if (*(void (***)(google::protobuf::FileDescriptorSet *__hidden))a2 != &off_24F988200)
      goto LABEL_3;
  }
  else if (*(void (***)(google::protobuf::FileDescriptorSet *__hidden))a2 != &off_24F988200)
  {
LABEL_3:
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
    return;
  }
  google::protobuf::FileDescriptorSet::MergeFrom(this, a2);
}

void sub_22DC62A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC62A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::FileDescriptorSet::MergeFrom(google::protobuf::FileDescriptorSet *this, const google::protobuf::FileDescriptorSet *a2)
{
  uint64_t v4;
  unsigned int *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 1542);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
      goto LABEL_8;
  }
  v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
    v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
LABEL_8:
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::FileDescriptorProto>::TypeHandler>((uint64_t)this + 16, (uint64_t)a2 + 16);
}

void sub_22DC62AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC62B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::FileDescriptorSet::CopyFrom(google::protobuf::FileDescriptorSet *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;
  uint64_t v5;

  if (a2 != this)
  {
    google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::FileDescriptorProto>::TypeHandler>((uint64_t)this + 16);
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    google::protobuf::FileDescriptorSet::MergeFrom(this, a2, v4);
  }
}

BOOL google::protobuf::FileDescriptorSet::IsInitialized(google::protobuf::FileDescriptorSet *this)
{
  char *v1;
  int v2;
  int v3;
  BOOL v4;
  google::protobuf::FileDescriptorProto *v5;

  v1 = (char *)this + 16;
  v2 = *((_DWORD *)this + 6);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = (google::protobuf::FileDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FileDescriptorProto>::TypeHandler>((uint64_t)v1, v2);
  }
  while ((google::protobuf::FileDescriptorProto::IsInitialized(v5) & 1) != 0);
  return v3 < 1;
}

uint64_t google::protobuf::FileDescriptorSet::GetMetadata(google::protobuf::FileDescriptorSet *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_google_2fprotobuf_2fdescriptor_2eproto, 0);
  return *off_25407A0D8;
}

google::protobuf::FileDescriptorProto *google::protobuf::FileDescriptorProto::FileDescriptorProto(google::protobuf::FileDescriptorProto *this, google::protobuf::Arena *a2)
{
  *(_QWORD *)this = &off_24F9882B0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = a2;
  *((_QWORD *)this + 15) = a2;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = a2;
  *((_QWORD *)this + 21) = a2;
  if (atomic_load(scc_info_FileDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FileDescriptorProto_google_2fprotobuf_2fdescriptor_2eproto);
  *((_QWORD *)this + 22) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 23) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_22DC62CC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v7);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v3 + 144);
  google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::~RepeatedPtrField(v6);
  google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::~RepeatedPtrField(v2);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::~RepeatedPtrField(uint64_t a1)
{
  google::protobuf::internal::ArenaImpl ***v2;
  google::protobuf::internal::ArenaImpl *v3;
  google::protobuf::internal::ArenaImpl ***v4;
  uint64_t v5;

  v2 = *(google::protobuf::internal::ArenaImpl ****)(a1 + 16);
  if (v2)
  {
    v3 = *(google::protobuf::internal::ArenaImpl **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 16) = 0;
LABEL_12:
      google::protobuf::internal::ArenaImpl::SpaceAllocated(v3);
      return a1;
    }
    v4 = v2 + 1;
    v5 = *(unsigned int *)v2;
    if ((int)v5 >= 1)
    {
      do
      {
        if (*v4)
        {
          google::protobuf::DescriptorProto::~DescriptorProto(*v4);
          MEMORY[0x22E31DF78]();
        }
        ++v4;
        --v5;
      }
      while (v5);
      v2 = *(google::protobuf::internal::ArenaImpl ****)(a1 + 16);
    }
    operator delete(v2);
  }
  v3 = *(google::protobuf::internal::ArenaImpl **)a1;
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    goto LABEL_12;
  return a1;
}

void google::protobuf::FileDescriptorProto::~FileDescriptorProto(google::protobuf::FileDescriptorProto *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  google::protobuf::FileDescriptorProto::SharedDtor(this);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 160);
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 144);
  google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::~RepeatedPtrField((uint64_t)this + 120);
  google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::~RepeatedPtrField((uint64_t)this + 96);
  google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::~RepeatedPtrField((uint64_t)this + 72);
  google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::~RepeatedPtrField((uint64_t)this + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
}

{
  google::protobuf::FileDescriptorProto::~FileDescriptorProto(this);
  JUMPOUT(0x22E31DF78);
}

void google::protobuf::FileDescriptorProto::SharedDtor(google::protobuf::FileDescriptorProto *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  google::protobuf::FileOptions *v11;
  google::protobuf::SourceCodeInfo *v12;
  char v13;
  std::string v14[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 1687);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  v5 = *((_QWORD *)this + 22);
  if ((uint64_t *)v5 == &google::protobuf::internal::fixed_address_empty_string || v5 == 0)
  {
    v7 = *((_QWORD *)this + 23);
    if ((uint64_t *)v7 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
      goto LABEL_22;
LABEL_14:
    v9 = *((_QWORD *)this + 24);
    if ((uint64_t *)v9 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_29;
    goto LABEL_25;
  }
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  MEMORY[0x22E31DF78](v5, 0x1012C40EC159624);
  v7 = *((_QWORD *)this + 23);
  if ((uint64_t *)v7 == &google::protobuf::internal::fixed_address_empty_string || v7 == 0)
    goto LABEL_14;
LABEL_22:
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  MEMORY[0x22E31DF78](v7, 0x1012C40EC159624);
  v9 = *((_QWORD *)this + 24);
  if ((uint64_t *)v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
LABEL_25:
    if (v9)
    {
      if (*(char *)(v9 + 23) < 0)
        operator delete(*(void **)v9);
      MEMORY[0x22E31DF78](v9, 0x1012C40EC159624);
    }
  }
LABEL_29:
  if (this != (google::protobuf::FileDescriptorProto *)&google::protobuf::_FileDescriptorProto_default_instance_)
  {
    v11 = (google::protobuf::FileOptions *)*((_QWORD *)this + 25);
    if (v11)
    {
      google::protobuf::FileOptions::~FileOptions(v11);
      MEMORY[0x22E31DF78]();
    }
    v12 = (google::protobuf::SourceCodeInfo *)*((_QWORD *)this + 26);
    if (v12)
    {
      google::protobuf::SourceCodeInfo::~SourceCodeInfo(v12);
      MEMORY[0x22E31DF78]();
    }
  }
}

void sub_22DC63024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC63038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::FileDescriptorProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void google::protobuf::FileDescriptorProto::Clear(google::protobuf::FileDescriptorProto *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::FileOptions *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)this + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::TypeHandler>((uint64_t)this + 96);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)this + 120);
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x1F) == 0)
    goto LABEL_29;
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_4;
LABEL_12:
    v4 = *((_QWORD *)this + 23);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_16;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_16;
    }
LABEL_5:
    if ((v2 & 8) == 0)
      goto LABEL_6;
LABEL_20:
    v6 = (google::protobuf::FileOptions *)*((_QWORD *)this + 25);
    if (v6)
    {
      google::protobuf::FileOptions::Clear(v6);
      if ((v2 & 0x10) == 0)
        goto LABEL_29;
    }
    else
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 1735);
      v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: options_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, v7);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      google::protobuf::FileOptions::Clear(*((google::protobuf::FileOptions **)this + 25));
      if ((v2 & 0x10) == 0)
        goto LABEL_29;
    }
    goto LABEL_24;
  }
  v3 = *((_QWORD *)this + 22);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_12;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_12;
  }
LABEL_4:
  if ((v2 & 4) == 0)
    goto LABEL_5;
LABEL_16:
  v5 = *((_QWORD *)this + 24);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_20;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_20;
  }
LABEL_6:
  if ((v2 & 0x10) == 0)
    goto LABEL_29;
LABEL_24:
  v8 = *((_QWORD *)this + 26);
  if (!v8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 1739);
    v9 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: source_code_info_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, v9);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v8 = *((_QWORD *)this + 26);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::TypeHandler>(v8 + 16);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v10 & 1) != 0 && *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v10 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
LABEL_29:
  *((_DWORD *)this + 4) = 0;
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0 && *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v11 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

void sub_22DC63260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC63274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC63288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC6329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::FileOptions::Clear(google::protobuf::FileOptions *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  google::protobuf::internal::ExtensionSet::Clear((google::protobuf::FileOptions *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::TypeHandler>((uint64_t)this + 48);
  v2 = *((_DWORD *)this + 10);
  if (!(_BYTE)v2)
    goto LABEL_41;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 9);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_15;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_19:
    v5 = *((_QWORD *)this + 11);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_23;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
LABEL_27:
    v7 = *((_QWORD *)this + 13);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_31;
    }
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_15:
  v4 = *((_QWORD *)this + 10);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_19;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_19;
  }
LABEL_5:
  if ((v2 & 8) == 0)
    goto LABEL_6;
LABEL_23:
  v6 = *((_QWORD *)this + 12);
  if (*(char *)(v6 + 23) < 0)
  {
    **(_BYTE **)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_27;
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 23) = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_27;
  }
LABEL_7:
  if ((v2 & 0x20) == 0)
    goto LABEL_8;
LABEL_31:
  v8 = *((_QWORD *)this + 14);
  if (*(char *)(v8 + 23) < 0)
  {
    **(_BYTE **)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    if ((v2 & 0x40) != 0)
    {
LABEL_35:
      v9 = *((_QWORD *)this + 15);
      if (*(char *)(v9 + 23) < 0)
      {
        **(_BYTE **)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        if ((v2 & 0x80) == 0)
          goto LABEL_41;
        goto LABEL_39;
      }
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
      if ((v2 & 0x80) != 0)
        goto LABEL_39;
LABEL_41:
      if ((v2 & 0x300) == 0)
        goto LABEL_53;
      goto LABEL_42;
    }
  }
  else
  {
    *(_BYTE *)v8 = 0;
    *(_BYTE *)(v8 + 23) = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_35;
  }
LABEL_9:
  if ((v2 & 0x80) == 0)
    goto LABEL_41;
LABEL_39:
  v10 = *((_QWORD *)this + 16);
  if ((*(char *)(v10 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v10 = 0;
    *(_BYTE *)(v10 + 23) = 0;
    goto LABEL_41;
  }
  **(_BYTE **)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  if ((v2 & 0x300) == 0)
    goto LABEL_53;
LABEL_42:
  if ((v2 & 0x100) != 0)
  {
    v11 = *((_QWORD *)this + 17);
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      if ((v2 & 0x200) == 0)
        goto LABEL_53;
      goto LABEL_46;
    }
    *(_BYTE *)v11 = 0;
    *(_BYTE *)(v11 + 23) = 0;
  }
  if ((v2 & 0x200) == 0)
    goto LABEL_53;
LABEL_46:
  v12 = *((_QWORD *)this + 18);
  if (*(char *)(v12 + 23) < 0)
  {
    **(_BYTE **)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v12 = 0;
    *(_BYTE *)(v12 + 23) = 0;
  }
LABEL_53:
  if ((v2 & 0xFC00) != 0)
  {
    *((_WORD *)this + 78) = 0;
    *((_DWORD *)this + 38) = 0;
  }
  if ((v2 & 0xF0000) != 0)
  {
    *((_WORD *)this + 79) = 0;
    *((_DWORD *)this + 40) = 1;
    *((_BYTE *)this + 164) = 1;
  }
  *((_DWORD *)this + 10) = 0;
  v13 = *((_QWORD *)this + 1);
  if ((v13 & 1) != 0 && *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v13 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

void google::protobuf::SourceCodeInfo::Clear(google::protobuf::SourceCodeInfo *this)
{
  uint64_t v2;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0 && *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v2 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

std::string::value_type *google::protobuf::FileDescriptorProto::_InternalParse(google::protobuf::FileDescriptorProto *this, std::string::value_type *a2, int32x2_t *a3)
{
  google::protobuf::internal::ParseContext *v5;
  google::protobuf::internal::ParseContext *v6;
  uint64_t *v8;
  std::string::size_type size;
  std::string *v10;
  size_t v11;
  char *v12;
  std::string::value_type *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  const char *v20;
  std::string *v21;
  std::string::value_type *TagFallback;
  unsigned int v23;
  BOOL v24;
  google::protobuf::UnknownFieldSet *v25;
  uint64_t v26;
  google::protobuf::Arena *v27;
  std::string *v28;
  const char *v29;
  std::string::size_type v30;
  std::string::value_type *v31;
  std::string::value_type *v32;
  int *v33;
  uint64_t v34;
  int v35;
  std::string *v36;
  const char *v37;
  int v38;
  size_t v39;
  std::string *v40;
  google::protobuf::internal::ArenaImpl *v41;
  std::string *AlignedAndAddCleanup;
  uint64_t v43;
  uint64_t v44;
  std::string::value_type *v45;
  std::string::value_type *v46;
  int *v47;
  uint64_t v48;
  int v49;
  google::protobuf::DescriptorProto *v50;
  uint64_t v51;
  uint64_t v52;
  std::string::value_type *v53;
  std::string::value_type *v54;
  int *v55;
  uint64_t v56;
  int v57;
  google::protobuf::EnumDescriptorProto *v58;
  uint64_t v59;
  uint64_t v60;
  std::string::value_type *v61;
  std::string::value_type *v62;
  int *v63;
  uint64_t v64;
  int v65;
  google::protobuf::ServiceDescriptorProto *v66;
  uint64_t v67;
  uint64_t v68;
  std::string::value_type *v69;
  std::string::value_type *v70;
  int *v71;
  uint64_t v72;
  int v73;
  google::protobuf::FieldDescriptorProto *v74;
  uint64_t v75;
  uint64_t v76;
  google::protobuf::FileOptions *v77;
  google::protobuf::Arena *v78;
  google::protobuf::SourceCodeInfo *v79;
  google::protobuf::Arena *v80;
  std::string::value_type *v81;
  int v82;
  char *v83;
  int v84;
  uint64_t v85;
  int v86;
  std::string::value_type *v87;
  int v88;
  unsigned int *v89;
  std::string::value_type *v90;
  int v91;
  char *v92;
  int v93;
  uint64_t v94;
  int v95;
  std::string::value_type *v96;
  int v97;
  unsigned int *v98;
  uint64_t v99;
  google::protobuf::Arena *v100;
  std::string *v101;
  const char *v102;
  std::string::size_type v103;
  std::string *v104;
  std::string *v105;
  google::protobuf::internal *v106;
  std::string **v107;
  std::string **v108;
  std::string **v109;
  uint64_t *v110;
  std::string::value_type *__s;
  char v112;
  std::string v113[2];

  __s = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&__s, a3[11].i32[1]) & 1) == 0)
  {
    v109 = (std::string **)((char *)this + 192);
    v110 = (uint64_t *)((char *)this + 8);
    v8 = (uint64_t *)((char *)this + 24);
    v107 = (std::string **)((char *)this + 176);
    v108 = (std::string **)((char *)this + 184);
    while (1)
    {
      v13 = __s + 1;
      v14 = *__s;
      if ((*__s & 0x80000000) == 0)
        goto LABEL_11;
      v15 = v14 + (*v13 << 7);
      v14 = v15 - 128;
      if ((*v13 & 0x80000000) == 0)
        break;
      TagFallback = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)__s, (const char *)(v15 - 128));
      __s = TagFallback;
      if (!TagFallback)
        return 0;
      v13 = TagFallback;
      v14 = v23;
      v16 = (v23 >> 3) - 1;
      if (v16 > 0xB)
      {
LABEL_23:
        if (v14)
          v24 = (v14 & 7) == 4;
        else
          v24 = 1;
        if (v24)
        {
          a3[10].i32[0] = v14 - 1;
          return __s;
        }
        if ((*v110 & 1) != 0)
        {
          v25 = (google::protobuf::UnknownFieldSet *)((*v110 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v25 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v110);
          v13 = __s;
        }
        __s = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v14, v25, (google::protobuf::UnknownFieldSet *)v13, a3, v6);
        if (!__s)
          return 0;
        goto LABEL_7;
      }
LABEL_12:
      switch(v16)
      {
        case 0u:
          if (v14 != 10)
            goto LABEL_23;
          *((_DWORD *)this + 4) |= 1u;
          v17 = *((_QWORD *)this + 1);
          v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) == 0)
          {
            v19 = *v107;
            if (*v107 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              goto LABEL_17;
LABEL_16:
            google::protobuf::internal::ArenaStringPtr::CreateInstance(v107, v18, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
            v19 = *v107;
            v13 = __s;
            goto LABEL_17;
          }
          v18 = *(google::protobuf::Arena **)v18;
          v19 = *v107;
          if (*v107 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_16;
LABEL_17:
          __s = (std::string::value_type *)google::protobuf::internal::InlineGreedyStringParser(v19, v13, (uint64_t)a3);
          if (SHIBYTE(v19->__r_.__value_.__r.__words[2]) < 0)
          {
            v21 = (std::string *)v19->__r_.__value_.__r.__words[0];
            size = v19->__r_.__value_.__l.__size_;
            if ((size & 0x8000000000000000) != 0)
              google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v19->__r_.__value_.__l.__size_, "size_t to int conversion", v20);
            v19 = v21;
          }
          else
          {
            size = HIBYTE(v19->__r_.__value_.__r.__words[2]);
          }
          v10 = v19;
          v11 = size;
          v12 = "google.protobuf.FileDescriptorProto.name";
          goto LABEL_6;
        case 1u:
          if (v14 != 18)
            goto LABEL_23;
          *((_DWORD *)this + 4) |= 2u;
          v26 = *((_QWORD *)this + 1);
          v27 = (google::protobuf::Arena *)(v26 & 0xFFFFFFFFFFFFFFFELL);
          if ((v26 & 1) == 0)
          {
            v28 = *v108;
            if (*v108 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              goto LABEL_35;
LABEL_34:
            google::protobuf::internal::ArenaStringPtr::CreateInstance(v108, v27, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
            v28 = *v108;
            v13 = __s;
            goto LABEL_35;
          }
          v27 = *(google::protobuf::Arena **)v27;
          v28 = *v108;
          if (*v108 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_34;
LABEL_35:
          __s = (std::string::value_type *)google::protobuf::internal::InlineGreedyStringParser(v28, v13, (uint64_t)a3);
          if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
          {
            v104 = (std::string *)v28->__r_.__value_.__r.__words[0];
            v30 = v28->__r_.__value_.__l.__size_;
            if ((v30 & 0x8000000000000000) != 0)
              google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v28->__r_.__value_.__l.__size_, "size_t to int conversion", v29);
            v28 = v104;
          }
          else
          {
            v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
          }
          v10 = v28;
          v11 = v30;
          v12 = "google.protobuf.FileDescriptorProto.package";
          goto LABEL_6;
        case 2u:
          if (v14 != 26)
            goto LABEL_23;
          v31 = v13 - 1;
          while (1)
          {
            v32 = v31 + 1;
            __s = v31 + 1;
            v33 = (int *)*((_QWORD *)this + 5);
            if (!v33)
              break;
            v34 = *((int *)this + 8);
            v35 = *v33;
            if ((int)v34 < *v33)
            {
              *((_DWORD *)this + 8) = v34 + 1;
              v36 = *(std::string **)&v33[2 * v34 + 2];
              __s = (std::string::value_type *)google::protobuf::internal::InlineGreedyStringParser(v36, v32, (uint64_t)a3);
              v38 = SHIBYTE(v36->__r_.__value_.__r.__words[2]);
              if (v38 < 0)
                goto LABEL_42;
              goto LABEL_54;
            }
            if (v35 == *((_DWORD *)this + 9))
              goto LABEL_47;
LABEL_48:
            *v33 = v35 + 1;
            v41 = (google::protobuf::internal::ArenaImpl *)*v8;
            if (*v8)
            {
              if (*((_QWORD *)v41 + 14))
              AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v41, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              AlignedAndAddCleanup = (std::string *)operator new();
            }
            v36 = AlignedAndAddCleanup;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
            AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
            AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
            v43 = *((_QWORD *)this + 5);
            v44 = *((int *)this + 8);
            *((_DWORD *)this + 8) = v44 + 1;
            *(_QWORD *)(v43 + 8 * v44 + 8) = AlignedAndAddCleanup;
            __s = (std::string::value_type *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, __s, (uint64_t)a3);
            v38 = SHIBYTE(v36->__r_.__value_.__r.__words[2]);
            if (v38 < 0)
            {
LABEL_42:
              v40 = (std::string *)v36->__r_.__value_.__r.__words[0];
              v39 = v36->__r_.__value_.__l.__size_;
              if ((v39 & 0x8000000000000000) != 0)
                google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v36->__r_.__value_.__l.__size_, "size_t to int conversion", v37);
              v36 = v40;
              goto LABEL_55;
            }
LABEL_54:
            v39 = v38;
LABEL_55:
            google::protobuf::internal::VerifyUTF8(v36, v39, (google::protobuf::internal *)"google.protobuf.FileDescriptorProto.dependency");
            v31 = __s;
            if (!__s)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)__s || *__s != 26)
              goto LABEL_7;
          }
          v35 = *((_DWORD *)this + 9);
LABEL_47:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v35 + 1);
          v33 = (int *)*((_QWORD *)this + 5);
          v35 = *v33;
          goto LABEL_48;
        case 3u:
          if (v14 != 34)
            goto LABEL_23;
          v45 = v13 - 1;
          while (1)
          {
            v46 = v45 + 1;
            __s = v45 + 1;
            v47 = (int *)*((_QWORD *)this + 8);
            if (!v47)
              break;
            v48 = *((int *)this + 14);
            v49 = *v47;
            if ((int)v48 >= *v47)
            {
              if (v49 == *((_DWORD *)this + 15))
              {
LABEL_66:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v49 + 1);
                v47 = (int *)*((_QWORD *)this + 8);
                v49 = *v47;
              }
              *v47 = v49 + 1;
              v50 = google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto>(*((google::protobuf::Arena **)this + 6));
              v51 = *((_QWORD *)this + 8);
              v52 = *((int *)this + 14);
              *((_DWORD *)this + 14) = v52 + 1;
              *(_QWORD *)(v51 + 8 * v52 + 8) = v50;
              v46 = __s;
              goto LABEL_68;
            }
            *((_DWORD *)this + 14) = v48 + 1;
            v50 = *(google::protobuf::DescriptorProto **)&v47[2 * v48 + 2];
LABEL_68:
            v45 = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::DescriptorProto>(a3, v50, v46);
            __s = v45;
            if (!v45)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v45 || *v45 != 34)
              goto LABEL_7;
          }
          v49 = *((_DWORD *)this + 15);
          goto LABEL_66;
        case 4u:
          if (v14 != 42)
            goto LABEL_23;
          v53 = v13 - 1;
          while (1)
          {
            v54 = v53 + 1;
            __s = v53 + 1;
            v55 = (int *)*((_QWORD *)this + 11);
            if (!v55)
              break;
            v56 = *((int *)this + 20);
            v57 = *v55;
            if ((int)v56 >= *v55)
            {
              if (v57 == *((_DWORD *)this + 21))
              {
LABEL_79:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 18, v57 + 1);
                v55 = (int *)*((_QWORD *)this + 11);
                v57 = *v55;
              }
              *v55 = v57 + 1;
              v58 = (google::protobuf::EnumDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::EnumDescriptorProto>(*((google::protobuf::Arena **)this + 9));
              v59 = *((_QWORD *)this + 11);
              v60 = *((int *)this + 20);
              *((_DWORD *)this + 20) = v60 + 1;
              *(_QWORD *)(v59 + 8 * v60 + 8) = v58;
              v54 = __s;
              goto LABEL_81;
            }
            *((_DWORD *)this + 20) = v56 + 1;
            v58 = *(google::protobuf::EnumDescriptorProto **)&v55[2 * v56 + 2];
LABEL_81:
            v53 = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::EnumDescriptorProto>(a3, v58, v54);
            __s = v53;
            if (!v53)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v53 || *v53 != 42)
              goto LABEL_7;
          }
          v57 = *((_DWORD *)this + 21);
          goto LABEL_79;
        case 5u:
          if (v14 != 50)
            goto LABEL_23;
          v61 = v13 - 1;
          while (1)
          {
            v62 = v61 + 1;
            __s = v61 + 1;
            v63 = (int *)*((_QWORD *)this + 14);
            if (!v63)
              break;
            v64 = *((int *)this + 26);
            v65 = *v63;
            if ((int)v64 >= *v63)
            {
              if (v65 == *((_DWORD *)this + 27))
              {
LABEL_92:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 24, v65 + 1);
                v63 = (int *)*((_QWORD *)this + 14);
                v65 = *v63;
              }
              *v63 = v65 + 1;
              v66 = (google::protobuf::ServiceDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::ServiceDescriptorProto>(*((google::protobuf::Arena **)this + 12));
              v67 = *((_QWORD *)this + 14);
              v68 = *((int *)this + 26);
              *((_DWORD *)this + 26) = v68 + 1;
              *(_QWORD *)(v67 + 8 * v68 + 8) = v66;
              v62 = __s;
              goto LABEL_94;
            }
            *((_DWORD *)this + 26) = v64 + 1;
            v66 = *(google::protobuf::ServiceDescriptorProto **)&v63[2 * v64 + 2];
LABEL_94:
            v61 = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::ServiceDescriptorProto>(a3, v66, v62);
            __s = v61;
            if (!v61)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v61 || *v61 != 50)
              goto LABEL_7;
          }
          v65 = *((_DWORD *)this + 27);
          goto LABEL_92;
        case 6u:
          if (v14 != 58)
            goto LABEL_23;
          v69 = v13 - 1;
          while (1)
          {
            v70 = v69 + 1;
            __s = v69 + 1;
            v71 = (int *)*((_QWORD *)this + 17);
            if (!v71)
              break;
            v72 = *((int *)this + 32);
            v73 = *v71;
            if ((int)v72 >= *v71)
            {
              if (v73 == *((_DWORD *)this + 33))
              {
LABEL_105:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 30, v73 + 1);
                v71 = (int *)*((_QWORD *)this + 17);
                v73 = *v71;
              }
              *v71 = v73 + 1;
              v74 = (google::protobuf::FieldDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FieldDescriptorProto>(*((google::protobuf::Arena **)this + 15));
              v75 = *((_QWORD *)this + 17);
              v76 = *((int *)this + 32);
              *((_DWORD *)this + 32) = v76 + 1;
              *(_QWORD *)(v75 + 8 * v76 + 8) = v74;
              v70 = __s;
              goto LABEL_107;
            }
            *((_DWORD *)this + 32) = v72 + 1;
            v74 = *(google::protobuf::FieldDescriptorProto **)&v71[2 * v72 + 2];
LABEL_107:
            v69 = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::FieldDescriptorProto>(a3, v74, v70);
            __s = v69;
            if (!v69)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v69 || *v69 != 58)
              goto LABEL_7;
          }
          v73 = *((_DWORD *)this + 33);
          goto LABEL_105;
        case 7u:
          if (v14 != 66)
            goto LABEL_23;
          *((_DWORD *)this + 4) |= 8u;
          v77 = (google::protobuf::FileOptions *)*((_QWORD *)this + 25);
          if (!v77)
          {
            v78 = (google::protobuf::Arena *)(*v110 & 0xFFFFFFFFFFFFFFFELL);
            if ((*v110 & 1) != 0)
              v78 = *(google::protobuf::Arena **)v78;
            v77 = (google::protobuf::FileOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FileOptions>(v78);
            *((_QWORD *)this + 25) = v77;
            v13 = __s;
          }
          __s = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::FileOptions>(a3, v77, (google::protobuf::internal *)v13);
          if (!__s)
            return 0;
          break;
        case 8u:
          if (v14 != 74)
            goto LABEL_23;
          *((_DWORD *)this + 4) |= 0x10u;
          v79 = (google::protobuf::SourceCodeInfo *)*((_QWORD *)this + 26);
          if (!v79)
          {
            v80 = (google::protobuf::Arena *)(*v110 & 0xFFFFFFFFFFFFFFFELL);
            if ((*v110 & 1) != 0)
              v80 = *(google::protobuf::Arena **)v80;
            v79 = (google::protobuf::SourceCodeInfo *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::SourceCodeInfo>(v80);
            *((_QWORD *)this + 26) = v79;
            v13 = __s;
          }
          __s = (std::string::value_type *)google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::SourceCodeInfo>(a3, v79, (google::protobuf::internal *)v13);
          if (!__s)
            return 0;
          break;
        case 9u:
          if (v14 == 80)
          {
            v81 = v13 - 1;
            while (1)
            {
              __s = v81 + 1;
              v82 = v81[1];
              v83 = v81 + 2;
              if (v81[1] < 0)
              {
                v86 = v82 + (*v83 << 7);
                v82 = v86 - 128;
                if (*v83 < 0)
                {
                  v87 = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)(v81 + 1), (const char *)(v86 - 128));
                  v82 = v88;
                  __s = v87;
                  v85 = *((unsigned int *)this + 36);
                  v84 = *((_DWORD *)this + 37);
                  if ((_DWORD)v85 != v84)
                  {
LABEL_129:
                    if (v84 <= 0)
                      goto LABEL_137;
                    goto LABEL_130;
                  }
                }
                else
                {
                  __s = v81 + 3;
                  v85 = *((unsigned int *)this + 36);
                  v84 = *((_DWORD *)this + 37);
                  if ((_DWORD)v85 != v84)
                    goto LABEL_129;
                }
              }
              else
              {
                __s = v81 + 2;
                v85 = *((unsigned int *)this + 36);
                v84 = *((_DWORD *)this + 37);
                if ((_DWORD)v85 != v84)
                  goto LABEL_129;
              }
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 36, v85 + 1);
              if (*((int *)this + 37) <= 0)
              {
LABEL_137:
                google::protobuf::internal::LogMessage::LogMessage((uint64_t)v113, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 353);
                v89 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v113, "CHECK failed: (total_size_) > (0): ");
                google::protobuf::internal::LogFinisher::operator=((uint64_t)&v112, v89);
                google::protobuf::internal::LogMessage::~LogMessage((void **)&v113[0].__r_.__value_.__l.__data_);
                *(_DWORD *)(*((_QWORD *)this + 19) + 4 * v85) = v82;
                *((_DWORD *)this + 36) = v85 + 1;
                v81 = __s;
                if (!__s)
                  return 0;
                goto LABEL_138;
              }
LABEL_130:
              *(_DWORD *)(*((_QWORD *)this + 19) + 4 * v85) = v82;
              *((_DWORD *)this + 36) = v85 + 1;
              v81 = __s;
              if (!__s)
                return 0;
LABEL_138:
              if (*(_QWORD *)a3 <= (unint64_t)v81 || *v81 != 80)
                goto LABEL_7;
            }
          }
          if (v14 != 82)
            goto LABEL_23;
          v106 = (google::protobuf::FileDescriptorProto *)((char *)this + 144);
          goto LABEL_179;
        case 0xAu:
          if (v14 == 88)
          {
            v90 = v13 - 1;
            while (1)
            {
              __s = v90 + 1;
              v91 = v90[1];
              v92 = v90 + 2;
              if (v90[1] < 0)
              {
                v95 = v91 + (*v92 << 7);
                v91 = v95 - 128;
                if (*v92 < 0)
                {
                  v96 = (std::string::value_type *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)(v90 + 1), (const char *)(v95 - 128));
                  v91 = v97;
                  __s = v96;
                  v94 = *((unsigned int *)this + 40);
                  v93 = *((_DWORD *)this + 41);
                  if ((_DWORD)v94 != v93)
                  {
LABEL_145:
                    if (v93 <= 0)
                      goto LABEL_153;
                    goto LABEL_146;
                  }
                }
                else
                {
                  __s = v90 + 3;
                  v94 = *((unsigned int *)this + 40);
                  v93 = *((_DWORD *)this + 41);
                  if ((_DWORD)v94 != v93)
                    goto LABEL_145;
                }
              }
              else
              {
                __s = v90 + 2;
                v94 = *((unsigned int *)this + 40);
                v93 = *((_DWORD *)this + 41);
                if ((_DWORD)v94 != v93)
                  goto LABEL_145;
              }
              google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 40, v94 + 1);
              if (*((int *)this + 41) <= 0)
              {
LABEL_153:
                google::protobuf::internal::LogMessage::LogMessage((uint64_t)v113, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 353);
                v98 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v113, "CHECK failed: (total_size_) > (0): ");
                google::protobuf::internal::LogFinisher::operator=((uint64_t)&v112, v98);
                google::protobuf::internal::LogMessage::~LogMessage((void **)&v113[0].__r_.__value_.__l.__data_);
                *(_DWORD *)(*((_QWORD *)this + 21) + 4 * v94) = v91;
                *((_DWORD *)this + 40) = v94 + 1;
                v90 = __s;
                if (!__s)
                  return 0;
                goto LABEL_154;
              }
LABEL_146:
              *(_DWORD *)(*((_QWORD *)this + 21) + 4 * v94) = v91;
              *((_DWORD *)this + 40) = v94 + 1;
              v90 = __s;
              if (!__s)
                return 0;
LABEL_154:
              if (*(_QWORD *)a3 <= (unint64_t)v90 || *v90 != 88)
                goto LABEL_7;
            }
          }
          if (v14 != 90)
            goto LABEL_23;
          v106 = (google::protobuf::FileDescriptorProto *)((char *)this + 160);
LABEL_179:
          __s = google::protobuf::internal::PackedInt32Parser(v106, (unsigned __int8 *)v13, (google::protobuf::internal::EpsCopyInputStream *)a3, v5);
          if (!__s)
            return 0;
          break;
        case 0xBu:
          if (v14 != 98)
            goto LABEL_23;
          *((_DWORD *)this + 4) |= 4u;
          v99 = *((_QWORD *)this + 1);
          v100 = (google::protobuf::Arena *)(v99 & 0xFFFFFFFFFFFFFFFELL);
          if ((v99 & 1) == 0)
          {
            v101 = *v109;
            if (*v109 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              goto LABEL_161;
LABEL_160:
            google::protobuf::internal::ArenaStringPtr::CreateInstance(v109, v100, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
            v101 = *v109;
            v13 = __s;
            goto LABEL_161;
          }
          v100 = *(google::protobuf::Arena **)v100;
          v101 = *v109;
          if (*v109 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_160;
LABEL_161:
          __s = (std::string::value_type *)google::protobuf::internal::InlineGreedyStringParser(v101, v13, (uint64_t)a3);
          if (SHIBYTE(v101->__r_.__value_.__r.__words[2]) < 0)
          {
            v105 = (std::string *)v101->__r_.__value_.__r.__words[0];
            v103 = v101->__r_.__value_.__l.__size_;
            if ((v103 & 0x8000000000000000) != 0)
              google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v101->__r_.__value_.__l.__size_, "size_t to int conversion", v102);
            v101 = v105;
          }
          else
          {
            v103 = HIBYTE(v101->__r_.__value_.__r.__words[2]);
          }
          v10 = v101;
          v11 = v103;
          v12 = "google.protobuf.FileDescriptorProto.syntax";
LABEL_6:
          google::protobuf::internal::VerifyUTF8(v10, v11, (google::protobuf::internal *)v12);
          if (!__s)
            return 0;
          break;
        default:
          goto LABEL_23;
      }
LABEL_7:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&__s, a3[11].i32[1]) & 1) != 0)return __s;
    }
    v13 = __s + 2;
LABEL_11:
    __s = v13;
    v16 = (v14 >> 3) - 1;
    goto LABEL_12;
  }
  return __s;
}

void sub_22DC6416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC64180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC64194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC641A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::DescriptorProto>(int32x2_t *a1, google::protobuf::DescriptorProto *a2, std::string::value_type *this)
{
  unsigned int v5;
  std::string::value_type *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  std::string::value_type *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *this;
  if (*this < 0)
  {
    result = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)this, (const char *)*this);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = this + 1;
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::DescriptorProto::_InternalParse(a2, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC64300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC64314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::EnumDescriptorProto>(int32x2_t *a1, google::protobuf::EnumDescriptorProto *a2, std::string::value_type *this)
{
  unsigned int v5;
  std::string::value_type *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  std::string::value_type *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *this;
  if (*this < 0)
  {
    result = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)this, (const char *)*this);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = this + 1;
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::EnumDescriptorProto::_InternalParse(a2, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC6446C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC64480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::ServiceDescriptorProto>(int32x2_t *a1, google::protobuf::ServiceDescriptorProto *a2, std::string::value_type *this)
{
  unsigned int v5;
  std::string::value_type *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  std::string::value_type *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *this;
  if (*this < 0)
  {
    result = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)this, (const char *)*this);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = this + 1;
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::ServiceDescriptorProto::_InternalParse(a2, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC645D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC645EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::FieldDescriptorProto>(int32x2_t *a1, google::protobuf::FieldDescriptorProto *a2, std::string::value_type *this)
{
  unsigned int v5;
  std::string::value_type *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  std::string::value_type *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *this;
  if (*this < 0)
  {
    result = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)this, (const char *)*this);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = this + 1;
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::FieldDescriptorProto::_InternalParse(a2, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC64744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC64758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::FileOptions>(int32x2_t *a1, google::protobuf::FileOptions *a2, google::protobuf::internal *this)
{
  unsigned int v5;
  char *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  char *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (char *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = (char *)this + 1;
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::FileOptions::_InternalParse(a2, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC648B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC648C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::SourceCodeInfo>(int32x2_t *a1, google::protobuf::SourceCodeInfo *a2, google::protobuf::internal *this)
{
  unsigned int v5;
  google::protobuf::internal *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  google::protobuf::internal *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = (google::protobuf::internal *)((char *)this + 1);
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::SourceCodeInfo::_InternalParse(a2, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC64A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC64A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *google::protobuf::FileDescriptorProto::_InternalSerialize(google::protobuf::FileDescriptorProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  unsigned __int8 *v9;
  const char *v10;
  uint64_t v11;
  int64_t v12;
  const void *v13;
  unsigned __int8 *v14;
  const char *v15;
  uint64_t v16;
  int64_t v17;
  const void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  int64_t v24;
  const void *v25;
  int v26;
  int v27;
  char v28;
  unsigned __int8 *v29;
  google::protobuf::DescriptorProto *v30;
  google::protobuf::io::EpsCopyOutputStream *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int i;
  unsigned __int8 *v38;
  google::protobuf::EnumDescriptorProto *v39;
  google::protobuf::io::EpsCopyOutputStream *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int j;
  unsigned __int8 *v47;
  google::protobuf::ServiceDescriptorProto *v48;
  google::protobuf::io::EpsCopyOutputStream *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int k;
  unsigned __int8 *v56;
  google::protobuf::FieldDescriptorProto *v57;
  google::protobuf::io::EpsCopyOutputStream *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  google::protobuf::FileOptions *v65;
  unsigned int v66;
  unsigned int v67;
  char *v68;
  unsigned int v69;
  unsigned int v70;
  google::protobuf::SourceCodeInfo *v71;
  unsigned int v72;
  unsigned __int8 *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int m;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  int n;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  const char *v89;
  uint64_t v90;
  int64_t v91;
  const void *v92;
  uint64_t v93;
  int v95;
  google::protobuf::FileDescriptorProto *v96;

  v7 = *((_DWORD *)this + 4);
  if ((v7 & 1) != 0)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)this + 22);
    if ((char)v9[23] < 0)
    {
      v9 = *(unsigned __int8 **)v9;
      v10 = *(const char **)(*((_QWORD *)this + 22) + 8);
    }
    else
    {
      v10 = (const char *)v9[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v9, v10, 1, (google::protobuf::internal *)"google.protobuf.FileDescriptorProto.name");
    v11 = *((_QWORD *)this + 22);
    if (*(char *)(v11 + 23) < 0)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12 > 127)
        goto LABEL_42;
    }
    else
    {
      v12 = *(unsigned __int8 *)(v11 + 23);
    }
    if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v12)
    {
      *a2 = 10;
      a2[1] = v12;
      if (*(char *)(v11 + 23) >= 0)
        v13 = (const void *)v11;
      else
        v13 = *(const void **)v11;
      memcpy(a2 + 2, v13, v12);
      a2 += v12 + 2;
      LOBYTE(v95) = v7;
      if ((v7 & 2) != 0)
        goto LABEL_16;
LABEL_3:
      v8 = *((_DWORD *)this + 8);
      v96 = this;
      if (v8 < 1)
        goto LABEL_45;
      goto LABEL_27;
    }
LABEL_42:
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v11, a2);
    LOBYTE(v95) = v7;
    if ((v7 & 2) != 0)
      goto LABEL_16;
    goto LABEL_3;
  }
  v95 = *((_DWORD *)this + 4);
  if ((v7 & 2) == 0)
    goto LABEL_3;
LABEL_16:
  v14 = (unsigned __int8 *)*((_QWORD *)this + 23);
  if ((char)v14[23] < 0)
  {
    v14 = *(unsigned __int8 **)v14;
    v15 = *(const char **)(*((_QWORD *)this + 23) + 8);
  }
  else
  {
    v15 = (const char *)v14[23];
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v14, v15, 1, (google::protobuf::internal *)"google.protobuf.FileDescriptorProto.package");
  v16 = *((_QWORD *)this + 23);
  if (*(char *)(v16 + 23) < 0)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (v17 > 127)
      goto LABEL_44;
  }
  else
  {
    v17 = *(unsigned __int8 *)(v16 + 23);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 + 14 < v17)
  {
LABEL_44:
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 2, v16, a2);
    v8 = *((_DWORD *)this + 8);
    v96 = this;
    if (v8 < 1)
      goto LABEL_45;
    goto LABEL_27;
  }
  *a2 = 18;
  a2[1] = v17;
  if (*(char *)(v16 + 23) >= 0)
    v18 = (const void *)v16;
  else
    v18 = *(const void **)v16;
  memcpy(a2 + 2, v18, v17);
  a2 += v17 + 2;
  v8 = *((_DWORD *)this + 8);
  v96 = this;
  if (v8 >= 1)
  {
LABEL_27:
    v19 = 0;
    while (1)
    {
      v20 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v19);
      v21 = v20;
      v22 = *(_DWORD *)(v20 + 8);
      if (*(char *)(v20 + 23) >= 0)
      {
        v23 = *(unsigned __int8 *)(v20 + 23);
      }
      else
      {
        v20 = *(_QWORD *)v20;
        v23 = v22;
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v20, (const char *)v23, 1, (google::protobuf::internal *)"google.protobuf.FileDescriptorProto.dependency");
      if ((*(char *)(v21 + 23) & 0x80000000) == 0)
        break;
      v24 = *(_QWORD *)(v21 + 8);
      if (v24 > 127)
      {
LABEL_40:
        a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 3, v21, a2);
        if (v8 == ++v19)
          goto LABEL_45;
      }
      else
      {
LABEL_34:
        if (*(_QWORD *)a3 - (_QWORD)a2 + 14 < v24)
          goto LABEL_40;
        *a2 = 26;
        a2[1] = v24;
        if (*(char *)(v21 + 23) >= 0)
          v25 = (const void *)v21;
        else
          v25 = *(const void **)v21;
        memcpy(a2 + 2, v25, v24);
        a2 += v24 + 2;
        if (v8 == ++v19)
          goto LABEL_45;
      }
    }
    v24 = *(unsigned __int8 *)(v21 + 23);
    goto LABEL_34;
  }
LABEL_45:
  v26 = *((_DWORD *)v96 + 14);
  if (v26)
  {
    v27 = 0;
    v28 = v95;
    do
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v30 = (google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)v96 + 48, v27);
      *a2 = 34;
      v32 = *((_DWORD *)v30 + 5);
      if (v32 <= 0x7F)
      {
        a2[1] = v32;
        v29 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v32 | 0x80;
        v33 = v32 >> 7;
        if (v32 >> 14)
        {
          v29 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v29 - 1) = v33 | 0x80;
            v34 = v33 >> 7;
            ++v29;
            v35 = v33 >> 14;
            v33 >>= 7;
          }
          while (v35);
          *(v29 - 1) = v34;
        }
        else
        {
          a2[2] = v33;
          v29 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::DescriptorProto::_InternalSerialize(v30, (char *)v29, a3, v31);
      ++v27;
    }
    while (v27 != v26);
  }
  else
  {
    v28 = v95;
  }
  v36 = *((_DWORD *)v96 + 20);
  if (v36)
  {
    for (i = 0; i != v36; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v39 = (google::protobuf::EnumDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)v96 + 72, i);
      *a2 = 42;
      v41 = *((_DWORD *)v39 + 5);
      if (v41 <= 0x7F)
      {
        a2[1] = v41;
        v38 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v41 | 0x80;
        v42 = v41 >> 7;
        if (v41 >> 14)
        {
          v38 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v38 - 1) = v42 | 0x80;
            v43 = v42 >> 7;
            ++v38;
            v44 = v42 >> 14;
            v42 >>= 7;
          }
          while (v44);
          *(v38 - 1) = v43;
        }
        else
        {
          a2[2] = v42;
          v38 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::EnumDescriptorProto::_InternalSerialize(v39, (google::protobuf::UnknownFieldSet *)v38, a3, v40);
    }
  }
  v45 = *((_DWORD *)v96 + 26);
  if (v45)
  {
    for (j = 0; j != v45; ++j)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v48 = (google::protobuf::ServiceDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::TypeHandler>((uint64_t)v96 + 96, j);
      *a2 = 50;
      v50 = *((_DWORD *)v48 + 5);
      if (v50 <= 0x7F)
      {
        a2[1] = v50;
        v47 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v50 | 0x80;
        v51 = v50 >> 7;
        if (v50 >> 14)
        {
          v47 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v47 - 1) = v51 | 0x80;
            v52 = v51 >> 7;
            ++v47;
            v53 = v51 >> 14;
            v51 >>= 7;
          }
          while (v53);
          *(v47 - 1) = v52;
        }
        else
        {
          a2[2] = v51;
          v47 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::ServiceDescriptorProto::_InternalSerialize(v48, (google::protobuf::UnknownFieldSet *)v47, a3, v49);
    }
  }
  v54 = *((_DWORD *)v96 + 32);
  if (v54)
  {
    for (k = 0; k != v54; ++k)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v57 = (google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)v96 + 120, k);
      *a2 = 58;
      v59 = *((_DWORD *)v57 + 5);
      if (v59 <= 0x7F)
      {
        a2[1] = v59;
        v56 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v59 | 0x80;
        v60 = v59 >> 7;
        if (v59 >> 14)
        {
          v56 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v56 - 1) = v60 | 0x80;
            v61 = v60 >> 7;
            ++v56;
            v62 = v60 >> 14;
            v60 >>= 7;
          }
          while (v62);
          *(v56 - 1) = v61;
        }
        else
        {
          a2[2] = v60;
          v56 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::FieldDescriptorProto::_InternalSerialize(v57, (google::protobuf::UnknownFieldSet *)v56, a3, v58);
    }
  }
  if ((v28 & 8) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v65 = (google::protobuf::FileOptions *)*((_QWORD *)v96 + 25);
      *a2 = 66;
      v66 = *((_DWORD *)v65 + 11);
      if (v66 <= 0x7F)
      {
LABEL_100:
        a2[1] = v66;
        a2 = (char *)google::protobuf::FileOptions::_InternalSerialize(v65, a2 + 2, a3);
        if ((v28 & 0x10) != 0)
          goto LABEL_109;
        goto LABEL_96;
      }
    }
    else
    {
      v65 = (google::protobuf::FileOptions *)*((_QWORD *)v96 + 25);
      *a2 = 66;
      v66 = *((_DWORD *)v65 + 11);
      if (v66 <= 0x7F)
        goto LABEL_100;
    }
    a2[1] = v66 | 0x80;
    v67 = v66 >> 7;
    if (v66 >> 14)
    {
      v68 = a2 + 3;
      do
      {
        *(v68 - 1) = v67 | 0x80;
        v69 = v67 >> 7;
        ++v68;
        v70 = v67 >> 14;
        v67 >>= 7;
      }
      while (v70);
      *(v68 - 1) = v69;
      a2 = (char *)google::protobuf::FileOptions::_InternalSerialize(v65, v68, a3);
      if ((v28 & 0x10) != 0)
        goto LABEL_109;
    }
    else
    {
      a2[2] = v67;
      a2 = (char *)google::protobuf::FileOptions::_InternalSerialize(v65, a2 + 3, a3);
      if ((v28 & 0x10) != 0)
        goto LABEL_109;
    }
LABEL_96:
    v63 = (uint64_t)v96 + 144;
    v64 = *((_DWORD *)v96 + 36);
    if (v64 < 1)
      goto LABEL_130;
    goto LABEL_119;
  }
  if ((v28 & 0x10) == 0)
    goto LABEL_96;
LABEL_109:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v71 = (google::protobuf::SourceCodeInfo *)*((_QWORD *)v96 + 26);
    *a2 = 74;
    v72 = *((_DWORD *)v71 + 10);
    if (v72 <= 0x7F)
      goto LABEL_111;
  }
  else
  {
    v71 = (google::protobuf::SourceCodeInfo *)*((_QWORD *)v96 + 26);
    *a2 = 74;
    v72 = *((_DWORD *)v71 + 10);
    if (v72 <= 0x7F)
    {
LABEL_111:
      a2[1] = v72;
      v73 = (unsigned __int8 *)(a2 + 2);
      goto LABEL_118;
    }
  }
  a2[1] = v72 | 0x80;
  v74 = v72 >> 7;
  if (v72 >> 14)
  {
    v73 = (unsigned __int8 *)(a2 + 3);
    do
    {
      *(v73 - 1) = v74 | 0x80;
      v75 = v74 >> 7;
      ++v73;
      v76 = v74 >> 14;
      v74 >>= 7;
    }
    while (v76);
    *(v73 - 1) = v75;
  }
  else
  {
    a2[2] = v74;
    v73 = (unsigned __int8 *)(a2 + 3);
  }
LABEL_118:
  a2 = (char *)google::protobuf::SourceCodeInfo::_InternalSerialize(v71, (google::protobuf::UnknownFieldSet *)v73, a3, a4);
  v63 = (uint64_t)v96 + 144;
  v64 = *((_DWORD *)v96 + 36);
  if (v64 < 1)
    goto LABEL_130;
LABEL_119:
  for (m = 0; m != v64; ++m)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v78 = *(int *)google::protobuf::RepeatedField<int>::Get(v63, m);
    *a2 = 80;
    if (v78 <= 0x7F)
    {
      a2[1] = v78;
      a2 += 2;
    }
    else
    {
      a2[1] = v78 | 0x80;
      v79 = v78 >> 7;
      if (v78 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v79 | 0x80;
          v80 = v79 >> 7;
          ++a2;
          v81 = v79 >> 14;
          v79 >>= 7;
        }
        while (v81);
        *(a2 - 1) = v80;
      }
      else
      {
        a2[2] = v79;
        a2 += 3;
      }
    }
  }
LABEL_130:
  v82 = *((_DWORD *)v96 + 40);
  if (v82 >= 1)
  {
    for (n = 0; n != v82; ++n)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v84 = *(int *)google::protobuf::RepeatedField<int>::Get((uint64_t)v96 + 160, n);
      *a2 = 88;
      if (v84 <= 0x7F)
      {
        a2[1] = v84;
        a2 += 2;
      }
      else
      {
        a2[1] = v84 | 0x80;
        v85 = v84 >> 7;
        if (v84 >> 14)
        {
          a2 += 3;
          do
          {
            *(a2 - 1) = v85 | 0x80;
            v86 = v85 >> 7;
            ++a2;
            v87 = v85 >> 14;
            v85 >>= 7;
          }
          while (v87);
          *(a2 - 1) = v86;
        }
        else
        {
          a2[2] = v85;
          a2 += 3;
        }
      }
    }
  }
  if ((v28 & 4) != 0)
  {
    v88 = (unsigned __int8 *)*((_QWORD *)v96 + 24);
    if ((char)v88[23] < 0)
    {
      v88 = *(unsigned __int8 **)v88;
      v89 = *(const char **)(*((_QWORD *)v96 + 24) + 8);
    }
    else
    {
      v89 = (const char *)v88[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v88, v89, 1, (google::protobuf::internal *)"google.protobuf.FileDescriptorProto.syntax");
    v90 = *((_QWORD *)v96 + 24);
    if (*(char *)(v90 + 23) < 0)
    {
      v91 = *(_QWORD *)(v90 + 8);
      if (v91 > 127)
        goto LABEL_156;
    }
    else
    {
      v91 = *(unsigned __int8 *)(v90 + 23);
    }
    if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v91)
    {
      *a2 = 98;
      a2[1] = v91;
      if (*(char *)(v90 + 23) >= 0)
        v92 = (const void *)v90;
      else
        v92 = *(const void **)v90;
      memcpy(a2 + 2, v92, v91);
      a2 += v91 + 2;
      goto LABEL_154;
    }
LABEL_156:
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 12, v90, a2);
    v93 = *((_QWORD *)v96 + 1);
    if ((v93 & 1) == 0)
      return (const google::protobuf::UnknownFieldSet *)a2;
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v93 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  }
LABEL_154:
  v93 = *((_QWORD *)v96 + 1);
  if ((v93 & 1) == 0)
    return (const google::protobuf::UnknownFieldSet *)a2;
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v93 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *google::protobuf::FileDescriptorProto::ByteSizeLong(google::protobuf::FileDescriptorProto *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::DescriptorProto **v10;
  uint64_t v11;
  google::protobuf::DescriptorProto *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  google::protobuf::EnumDescriptorProto **v17;
  uint64_t v18;
  google::protobuf::EnumDescriptorProto *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::ServiceDescriptorProto **v24;
  uint64_t v25;
  google::protobuf::ServiceDescriptorProto *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  google::protobuf::FieldDescriptorProto **v31;
  uint64_t v32;
  google::protobuf::FieldDescriptorProto *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  const google::protobuf::UnknownFieldSet *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  google::protobuf::SourceCodeInfo_Location **v52;
  uint64_t v53;
  google::protobuf::SourceCodeInfo_Location *v54;
  char *v55;
  google::protobuf::UnknownFieldSet *v56;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((int *)this + 14);
  v8 = v4 + v7;
  v9 = *((_QWORD *)this + 8);
  if (v9)
    v10 = (google::protobuf::DescriptorProto **)(v9 + 8);
  else
    v10 = 0;
  if ((_DWORD)v7)
  {
    v11 = 8 * v7;
    do
    {
      v12 = *v10++;
      v13 = google::protobuf::DescriptorProto::ByteSizeLong(v12);
      v8 += (uint64_t)&v13[(9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6];
      v11 -= 8;
    }
    while (v11);
  }
  v14 = *((int *)this + 20);
  v15 = v8 + v14;
  v16 = *((_QWORD *)this + 11);
  if (v16)
    v17 = (google::protobuf::EnumDescriptorProto **)(v16 + 8);
  else
    v17 = 0;
  if ((_DWORD)v14)
  {
    v18 = 8 * v14;
    do
    {
      v19 = *v17++;
      v20 = google::protobuf::EnumDescriptorProto::ByteSizeLong(v19);
      v15 += (uint64_t)&v20[(9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6];
      v18 -= 8;
    }
    while (v18);
  }
  v21 = *((int *)this + 26);
  v22 = v15 + v21;
  v23 = *((_QWORD *)this + 14);
  if (v23)
    v24 = (google::protobuf::ServiceDescriptorProto **)(v23 + 8);
  else
    v24 = 0;
  if ((_DWORD)v21)
  {
    v25 = 8 * v21;
    do
    {
      v26 = *v24++;
      v27 = google::protobuf::ServiceDescriptorProto::ByteSizeLong(v26);
      v22 += (uint64_t)&v27[(9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6];
      v25 -= 8;
    }
    while (v25);
  }
  v28 = *((int *)this + 32);
  v29 = v22 + v28;
  v30 = *((_QWORD *)this + 17);
  if (v30)
    v31 = (google::protobuf::FieldDescriptorProto **)(v30 + 8);
  else
    v31 = 0;
  if ((_DWORD)v28)
  {
    v32 = 8 * v28;
    do
    {
      v33 = *v31++;
      v34 = google::protobuf::FieldDescriptorProto::ByteSizeLong(v33);
      v29 += (uint64_t)&v34[(9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6];
      v32 -= 8;
    }
    while (v32);
  }
  v35 = google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 36);
  v36 = *((unsigned int *)this + 36);
  v37 = (const google::protobuf::UnknownFieldSet *)(v35
                                                  + google::protobuf::internal::WireFormatLite::Int32Size((int *)this + 40)
                                                  + *((unsigned int *)this + 40)
                                                  + v29
                                                  + v36);
  v38 = *((_DWORD *)this + 4);
  if ((v38 & 0x1F) != 0)
  {
    if ((v38 & 1) != 0)
    {
      v39 = *((_QWORD *)this + 22);
      v40 = *(unsigned __int8 *)(v39 + 23);
      v41 = *(_QWORD *)(v39 + 8);
      if ((v40 & 0x80u) == 0)
        v41 = v40;
      v37 = (const google::protobuf::UnknownFieldSet *)((char *)v37 + v41
                                                                    + ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6)
                                                                    + 1);
      if ((v38 & 2) == 0)
      {
LABEL_35:
        if ((v38 & 4) == 0)
          goto LABEL_36;
        goto LABEL_45;
      }
    }
    else if ((v38 & 2) == 0)
    {
      goto LABEL_35;
    }
    v42 = *((_QWORD *)this + 23);
    v43 = *(unsigned __int8 *)(v42 + 23);
    v44 = *(_QWORD *)(v42 + 8);
    if ((v43 & 0x80u) == 0)
      v44 = v43;
    v37 = (const google::protobuf::UnknownFieldSet *)((char *)v37 + v44 + ((9 * (__clz(v44 | 1) ^ 0x1F) + 73) >> 6) + 1);
    if ((v38 & 4) == 0)
    {
LABEL_36:
      if ((v38 & 8) == 0)
        goto LABEL_37;
      goto LABEL_48;
    }
LABEL_45:
    v45 = *((_QWORD *)this + 24);
    v46 = *(unsigned __int8 *)(v45 + 23);
    v47 = *(_QWORD *)(v45 + 8);
    if ((v46 & 0x80u) == 0)
      v47 = v46;
    v37 = (const google::protobuf::UnknownFieldSet *)((char *)v37 + v47 + ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 1);
    if ((v38 & 8) == 0)
    {
LABEL_37:
      if ((v38 & 0x10) == 0)
        goto LABEL_58;
LABEL_49:
      v49 = *((_QWORD *)this + 26);
      v50 = (char *)*(int *)(v49 + 24);
      v51 = *(_QWORD *)(v49 + 32);
      if (v51)
        v52 = (google::protobuf::SourceCodeInfo_Location **)(v51 + 8);
      else
        v52 = 0;
      if ((_DWORD)v50)
      {
        v53 = 8 * (_QWORD)v50;
        do
        {
          v54 = *v52++;
          v55 = google::protobuf::SourceCodeInfo_Location::ByteSizeLong(v54);
          v50 = &v50[(_QWORD)v55 + ((9 * (__clz(v55 | 1) ^ 0x1F) + 73) >> 6)];
          v53 -= 8;
        }
        while (v53);
        v56 = (google::protobuf::UnknownFieldSet *)(v49 + 8);
        if ((*(_BYTE *)(v49 + 8) & 1) == 0)
          goto LABEL_56;
      }
      else
      {
        v50 = 0;
        v56 = (google::protobuf::UnknownFieldSet *)(v49 + 8);
        if ((*(_BYTE *)(v49 + 8) & 1) == 0)
        {
LABEL_56:
          *(_DWORD *)(v49 + 40) = (_DWORD)v50;
LABEL_57:
          v37 = (const google::protobuf::UnknownFieldSet *)&v50[(_QWORD)v37
                                                              + 1
                                                              + ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6)];
          goto LABEL_58;
        }
      }
      v50 = google::protobuf::internal::ComputeUnknownFieldsSize(v56, (const google::protobuf::UnknownFieldSet *)v50, (_DWORD *)(v49 + 40));
      goto LABEL_57;
    }
LABEL_48:
    v48 = google::protobuf::FileOptions::ByteSizeLong(*((google::protobuf::FileOptions **)this + 25));
    v37 = (const google::protobuf::UnknownFieldSet *)&v48[((9 * (__clz(v48 | 1) ^ 0x1F) + 73) >> 6)
                                                        + 1
                                                        + (_QWORD)v37];
    if ((v38 & 0x10) == 0)
      goto LABEL_58;
    goto LABEL_49;
  }
LABEL_58:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::FileDescriptorProto *)((char *)this + 8), v37, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = (_DWORD)v37;
  return (char *)v37;
}

void google::protobuf::FileDescriptorProto::MergeFrom(google::protobuf::FileDescriptorProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  unsigned int *v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2146);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
    if (*(void (***)(google::protobuf::FileDescriptorProto *__hidden))a2 != &off_24F9882B0)
      goto LABEL_3;
  }
  else if (*(void (***)(google::protobuf::FileDescriptorProto *__hidden))a2 != &off_24F9882B0)
  {
LABEL_3:
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
    return;
  }
  google::protobuf::FileDescriptorProto::MergeFrom(this, a2);
}

void sub_22DC65890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC658A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::FileDescriptorProto::MergeFrom(google::protobuf::FileDescriptorProto *this, const google::protobuf::FileDescriptorProto *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  const google::protobuf::UnknownFieldSet *v7;
  google::protobuf::UnknownFieldSet *v8;
  int v9;
  std::string *v10;
  std::string **v11;
  uint64_t v12;
  google::protobuf::Arena *v13;
  std::string *v14;
  __int128 *v15;
  std::string **v16;
  uint64_t v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  std::string *v20;
  std::string **v21;
  uint64_t v22;
  google::protobuf::Arena *v23;
  std::string *v24;
  google::protobuf::FileOptions *v25;
  google::protobuf::Arena *v26;
  const google::protobuf::FileOptions *v27;
  google::protobuf::SourceCodeInfo *v28;
  google::protobuf::Arena *v29;
  const google::protobuf::SourceCodeInfo *v30;
  char v31;
  std::string v32[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2161);
    v6 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v31, v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
    v4 = (uint64_t *)((char *)this + 8);
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v4 = (uint64_t *)((char *)this + 8);
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) == 0)
      goto LABEL_8;
  }
  v7 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((*v4 & 1) != 0)
    v8 = (google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
  google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v7);
LABEL_8:
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)this + 72, (uint64_t)a2 + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::TypeHandler>((uint64_t)this + 96, (uint64_t)a2 + 96);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)this + 120, (uint64_t)a2 + 120);
  google::protobuf::RepeatedField<int>::MergeFrom((unsigned int *)this + 36, (int *)a2 + 36);
  google::protobuf::RepeatedField<int>::MergeFrom((unsigned int *)this + 40, (int *)a2 + 40);
  v9 = *((_DWORD *)a2 + 4);
  if ((v9 & 0x1F) == 0)
    return;
  if ((v9 & 1) != 0)
  {
    v10 = (std::string *)*((_QWORD *)a2 + 22);
    *((_DWORD *)this + 4) |= 1u;
    v11 = (std::string **)((char *)this + 176);
    v12 = *((_QWORD *)this + 1);
    v13 = (google::protobuf::Arena *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if ((v12 & 1) != 0)
    {
      v13 = *(google::protobuf::Arena **)v13;
      v14 = *v11;
      if (*v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_17:
        std::string::operator=(v14, v10);
        if ((v9 & 2) != 0)
          goto LABEL_22;
LABEL_11:
        if ((v9 & 4) == 0)
          goto LABEL_12;
LABEL_28:
        v20 = (std::string *)*((_QWORD *)a2 + 24);
        *((_DWORD *)this + 4) |= 4u;
        v21 = (std::string **)((char *)this + 192);
        v22 = *((_QWORD *)this + 1);
        v23 = (google::protobuf::Arena *)(v22 & 0xFFFFFFFFFFFFFFFELL);
        if ((v22 & 1) != 0)
        {
          v23 = *(google::protobuf::Arena **)v23;
          v24 = *v21;
          if (*v21 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_30:
            std::string::operator=(v24, v20);
            if ((v9 & 8) != 0)
              goto LABEL_34;
LABEL_13:
            if ((v9 & 0x10) == 0)
              return;
            goto LABEL_42;
          }
        }
        else
        {
          v24 = *v21;
          if (*v21 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_30;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, v23, (__int128 *)v20);
        if ((v9 & 8) != 0)
          goto LABEL_34;
        goto LABEL_13;
      }
    }
    else
    {
      v14 = *v11;
      if (*v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_17;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, v13, (__int128 *)v10);
    if ((v9 & 2) != 0)
      goto LABEL_22;
    goto LABEL_11;
  }
  if ((v9 & 2) == 0)
    goto LABEL_11;
LABEL_22:
  v15 = (__int128 *)*((_QWORD *)a2 + 23);
  *((_DWORD *)this + 4) |= 2u;
  v16 = (std::string **)((char *)this + 184);
  v17 = *((_QWORD *)this + 1);
  v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
  if ((v17 & 1) == 0)
  {
    v19 = *v16;
    if (*v16 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_24;
LABEL_27:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v16, v18, v15);
    if ((v9 & 4) != 0)
      goto LABEL_28;
    goto LABEL_12;
  }
  v18 = *(google::protobuf::Arena **)v18;
  v19 = *v16;
  if (*v16 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_27;
LABEL_24:
  std::string::operator=(v19, (const std::string *)v15);
  if ((v9 & 4) != 0)
    goto LABEL_28;
LABEL_12:
  if ((v9 & 8) == 0)
    goto LABEL_13;
LABEL_34:
  *((_DWORD *)this + 4) |= 8u;
  v25 = (google::protobuf::FileOptions *)*((_QWORD *)this + 25);
  if (!v25)
  {
    v26 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if ((*v4 & 1) != 0)
      v26 = *(google::protobuf::Arena **)v26;
    v25 = (google::protobuf::FileOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FileOptions>(v26);
    *((_QWORD *)this + 25) = v25;
  }
  if (*((_QWORD *)a2 + 25))
    v27 = (const google::protobuf::FileOptions *)*((_QWORD *)a2 + 25);
  else
    v27 = (const google::protobuf::FileOptions *)&google::protobuf::_FileOptions_default_instance_;
  google::protobuf::FileOptions::MergeFrom(v25, v27);
  if ((v9 & 0x10) != 0)
  {
LABEL_42:
    *((_DWORD *)this + 4) |= 0x10u;
    v28 = (google::protobuf::SourceCodeInfo *)*((_QWORD *)this + 26);
    if (!v28)
    {
      v29 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v4 & 1) != 0)
        v29 = *(google::protobuf::Arena **)v29;
      v28 = (google::protobuf::SourceCodeInfo *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::SourceCodeInfo>(v29);
      *((_QWORD *)this + 26) = v28;
    }
    if (*((_QWORD *)a2 + 26))
      v30 = (const google::protobuf::SourceCodeInfo *)*((_QWORD *)a2 + 26);
    else
      v30 = (const google::protobuf::SourceCodeInfo *)&google::protobuf::_SourceCodeInfo_default_instance_;
    google::protobuf::SourceCodeInfo::MergeFrom(v28, v30);
  }
}

void sub_22DC65BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC65BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::FileOptions::MergeFrom(google::protobuf::FileOptions *this, const google::protobuf::FileOptions *a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  std::string *v10;
  std::string **v11;
  uint64_t v12;
  google::protobuf::Arena *v13;
  std::string *v14;
  __int128 *v15;
  std::string **v16;
  uint64_t v17;
  google::protobuf::Arena *v18;
  std::string *v19;
  std::string *v20;
  std::string **v21;
  uint64_t v22;
  google::protobuf::Arena *v23;
  std::string *v24;
  __int128 *v25;
  std::string **v26;
  uint64_t v27;
  google::protobuf::Arena *v28;
  std::string *v29;
  std::string *v30;
  std::string **v31;
  uint64_t v32;
  google::protobuf::Arena *v33;
  std::string *v34;
  __int128 *v35;
  std::string **v36;
  uint64_t v37;
  google::protobuf::Arena *v38;
  std::string *v39;
  std::string *v40;
  std::string **v41;
  uint64_t v42;
  google::protobuf::Arena *v43;
  std::string *v44;
  std::string *v45;
  std::string **v46;
  uint64_t v47;
  google::protobuf::Arena *v48;
  std::string *v49;
  std::string *v50;
  std::string **v51;
  uint64_t v52;
  google::protobuf::Arena *v53;
  std::string *v54;
  std::string *v55;
  std::string **v56;
  uint64_t v57;
  google::protobuf::Arena *v58;
  std::string *v59;
  char v60;
  std::string v61[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v61, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 7064);
    v6 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v61, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v60, v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v61[0].__r_.__value_.__l.__data_);
    google::protobuf::internal::ExtensionSet::MergeFrom((google::protobuf::FileOptions *)((char *)this + 16), (const google::protobuf::FileOptions *)((char *)a2 + 16));
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
      v5 = *((_DWORD *)a2 + 10);
      if (!(_BYTE)v5)
        goto LABEL_64;
      goto LABEL_9;
    }
  }
  else
  {
    google::protobuf::internal::ExtensionSet::MergeFrom((google::protobuf::FileOptions *)((char *)this + 16), (const google::protobuf::FileOptions *)((char *)a2 + 16));
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
      goto LABEL_3;
  }
  v7 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
    v9 = (google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  v5 = *((_DWORD *)a2 + 10);
  if (!(_BYTE)v5)
    goto LABEL_64;
LABEL_9:
  if ((v5 & 1) != 0)
  {
    v10 = (std::string *)*((_QWORD *)a2 + 9);
    *((_DWORD *)this + 10) |= 1u;
    v11 = (std::string **)((char *)this + 72);
    v12 = *((_QWORD *)this + 1);
    v13 = (google::protobuf::Arena *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if ((v12 & 1) != 0)
    {
      v13 = *(google::protobuf::Arena **)v13;
      v14 = *v11;
      if (*v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_20:
        std::string::operator=(v14, v10);
        if ((v5 & 2) != 0)
          goto LABEL_25;
LABEL_11:
        if ((v5 & 4) == 0)
          goto LABEL_12;
LABEL_31:
        v20 = (std::string *)*((_QWORD *)a2 + 11);
        *((_DWORD *)this + 10) |= 4u;
        v21 = (std::string **)((char *)this + 88);
        v22 = *((_QWORD *)this + 1);
        v23 = (google::protobuf::Arena *)(v22 & 0xFFFFFFFFFFFFFFFELL);
        if ((v22 & 1) != 0)
        {
          v23 = *(google::protobuf::Arena **)v23;
          v24 = *v21;
          if (*v21 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_33:
            std::string::operator=(v24, v20);
            if ((v5 & 8) != 0)
              goto LABEL_37;
LABEL_13:
            if ((v5 & 0x10) == 0)
              goto LABEL_14;
LABEL_43:
            v30 = (std::string *)*((_QWORD *)a2 + 13);
            *((_DWORD *)this + 10) |= 0x10u;
            v31 = (std::string **)((char *)this + 104);
            v32 = *((_QWORD *)this + 1);
            v33 = (google::protobuf::Arena *)(v32 & 0xFFFFFFFFFFFFFFFELL);
            if ((v32 & 1) != 0)
            {
              v33 = *(google::protobuf::Arena **)v33;
              v34 = *v31;
              if (*v31 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
LABEL_45:
                std::string::operator=(v34, v30);
                if ((v5 & 0x20) != 0)
                  goto LABEL_49;
LABEL_15:
                if ((v5 & 0x40) == 0)
                  goto LABEL_16;
LABEL_55:
                v40 = (std::string *)*((_QWORD *)a2 + 15);
                *((_DWORD *)this + 10) |= 0x40u;
                v41 = (std::string **)((char *)this + 120);
                v42 = *((_QWORD *)this + 1);
                v43 = (google::protobuf::Arena *)(v42 & 0xFFFFFFFFFFFFFFFELL);
                if ((v42 & 1) != 0)
                {
                  v43 = *(google::protobuf::Arena **)v43;
                  v44 = *v41;
                  if (*v41 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                  {
LABEL_57:
                    std::string::operator=(v44, v40);
                    if ((v5 & 0x80) != 0)
                      goto LABEL_61;
LABEL_64:
                    if ((v5 & 0xFF00) == 0)
                      goto LABEL_75;
LABEL_65:
                    if ((v5 & 0x100) == 0)
                    {
                      if ((v5 & 0x200) == 0)
                        goto LABEL_67;
LABEL_96:
                      v55 = (std::string *)*((_QWORD *)a2 + 18);
                      *((_DWORD *)this + 10) |= 0x200u;
                      v56 = (std::string **)((char *)this + 144);
                      v57 = *((_QWORD *)this + 1);
                      v58 = (google::protobuf::Arena *)(v57 & 0xFFFFFFFFFFFFFFFELL);
                      if ((v57 & 1) != 0)
                      {
                        v58 = *(google::protobuf::Arena **)v58;
                        v59 = *v56;
                        if (*v56 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                        {
LABEL_98:
                          std::string::operator=(v59, v55);
                          if ((v5 & 0x400) != 0)
                            goto LABEL_102;
LABEL_68:
                          if ((v5 & 0x800) == 0)
                            goto LABEL_69;
                          goto LABEL_103;
                        }
                      }
                      else
                      {
                        v59 = *v56;
                        if (*v56 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          goto LABEL_98;
                      }
                      google::protobuf::internal::ArenaStringPtr::CreateInstance(v56, v58, (__int128 *)v55);
                      if ((v5 & 0x400) != 0)
                        goto LABEL_102;
                      goto LABEL_68;
                    }
                    v50 = (std::string *)*((_QWORD *)a2 + 17);
                    *((_DWORD *)this + 10) |= 0x100u;
                    v51 = (std::string **)((char *)this + 136);
                    v52 = *((_QWORD *)this + 1);
                    v53 = (google::protobuf::Arena *)(v52 & 0xFFFFFFFFFFFFFFFELL);
                    if ((v52 & 1) != 0)
                    {
                      v53 = *(google::protobuf::Arena **)v53;
                      v54 = *v51;
                      if (*v51 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      {
LABEL_85:
                        std::string::operator=(v54, v50);
                        if ((v5 & 0x200) != 0)
                          goto LABEL_96;
LABEL_67:
                        if ((v5 & 0x400) == 0)
                          goto LABEL_68;
LABEL_102:
                        *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
                        if ((v5 & 0x800) == 0)
                        {
LABEL_69:
                          if ((v5 & 0x1000) == 0)
                            goto LABEL_70;
                          goto LABEL_104;
                        }
LABEL_103:
                        *((_BYTE *)this + 153) = *((_BYTE *)a2 + 153);
                        if ((v5 & 0x1000) == 0)
                        {
LABEL_70:
                          if ((v5 & 0x2000) == 0)
                            goto LABEL_71;
                          goto LABEL_105;
                        }
LABEL_104:
                        *((_BYTE *)this + 154) = *((_BYTE *)a2 + 154);
                        if ((v5 & 0x2000) == 0)
                        {
LABEL_71:
                          if ((v5 & 0x4000) == 0)
                            goto LABEL_72;
                          goto LABEL_106;
                        }
LABEL_105:
                        *((_BYTE *)this + 155) = *((_BYTE *)a2 + 155);
                        if ((v5 & 0x4000) == 0)
                        {
LABEL_72:
                          if ((v5 & 0x8000) == 0)
                          {
LABEL_74:
                            *((_DWORD *)this + 10) |= v5;
                            goto LABEL_75;
                          }
LABEL_73:
                          *((_BYTE *)this + 157) = *((_BYTE *)a2 + 157);
                          goto LABEL_74;
                        }
LABEL_106:
                        *((_BYTE *)this + 156) = *((_BYTE *)a2 + 156);
                        if ((v5 & 0x8000) == 0)
                          goto LABEL_74;
                        goto LABEL_73;
                      }
                    }
                    else
                    {
                      v54 = *v51;
                      if (*v51 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                        goto LABEL_85;
                    }
                    google::protobuf::internal::ArenaStringPtr::CreateInstance(v51, v53, (__int128 *)v50);
                    if ((v5 & 0x200) != 0)
                      goto LABEL_96;
                    goto LABEL_67;
                  }
                }
                else
                {
                  v44 = *v41;
                  if (*v41 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    goto LABEL_57;
                }
                google::protobuf::internal::ArenaStringPtr::CreateInstance(v41, v43, (__int128 *)v40);
                if ((v5 & 0x80) == 0)
                  goto LABEL_64;
                goto LABEL_61;
              }
            }
            else
            {
              v34 = *v31;
              if (*v31 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_45;
            }
            google::protobuf::internal::ArenaStringPtr::CreateInstance(v31, v33, (__int128 *)v30);
            if ((v5 & 0x20) != 0)
              goto LABEL_49;
            goto LABEL_15;
          }
        }
        else
        {
          v24 = *v21;
          if (*v21 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_33;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, v23, (__int128 *)v20);
        if ((v5 & 8) != 0)
          goto LABEL_37;
        goto LABEL_13;
      }
    }
    else
    {
      v14 = *v11;
      if (*v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_20;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, v13, (__int128 *)v10);
    if ((v5 & 2) != 0)
      goto LABEL_25;
    goto LABEL_11;
  }
  if ((v5 & 2) == 0)
    goto LABEL_11;
LABEL_25:
  v15 = (__int128 *)*((_QWORD *)a2 + 10);
  *((_DWORD *)this + 10) |= 2u;
  v16 = (std::string **)((char *)this + 80);
  v17 = *((_QWORD *)this + 1);
  v18 = (google::protobuf::Arena *)(v17 & 0xFFFFFFFFFFFFFFFELL);
  if ((v17 & 1) == 0)
  {
    v19 = *v16;
    if (*v16 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_27;
LABEL_30:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v16, v18, v15);
    if ((v5 & 4) != 0)
      goto LABEL_31;
    goto LABEL_12;
  }
  v18 = *(google::protobuf::Arena **)v18;
  v19 = *v16;
  if (*v16 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_30;
LABEL_27:
  std::string::operator=(v19, (const std::string *)v15);
  if ((v5 & 4) != 0)
    goto LABEL_31;
LABEL_12:
  if ((v5 & 8) == 0)
    goto LABEL_13;
LABEL_37:
  v25 = (__int128 *)*((_QWORD *)a2 + 12);
  *((_DWORD *)this + 10) |= 8u;
  v26 = (std::string **)((char *)this + 96);
  v27 = *((_QWORD *)this + 1);
  v28 = (google::protobuf::Arena *)(v27 & 0xFFFFFFFFFFFFFFFELL);
  if ((v27 & 1) == 0)
  {
    v29 = *v26;
    if (*v26 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_39;
LABEL_42:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v26, v28, v25);
    if ((v5 & 0x10) != 0)
      goto LABEL_43;
    goto LABEL_14;
  }
  v28 = *(google::protobuf::Arena **)v28;
  v29 = *v26;
  if (*v26 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_42;
LABEL_39:
  std::string::operator=(v29, (const std::string *)v25);
  if ((v5 & 0x10) != 0)
    goto LABEL_43;
LABEL_14:
  if ((v5 & 0x20) == 0)
    goto LABEL_15;
LABEL_49:
  v35 = (__int128 *)*((_QWORD *)a2 + 14);
  *((_DWORD *)this + 10) |= 0x20u;
  v36 = (std::string **)((char *)this + 112);
  v37 = *((_QWORD *)this + 1);
  v38 = (google::protobuf::Arena *)(v37 & 0xFFFFFFFFFFFFFFFELL);
  if ((v37 & 1) == 0)
  {
    v39 = *v36;
    if (*v36 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_51;
LABEL_54:
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v36, v38, v35);
    if ((v5 & 0x40) != 0)
      goto LABEL_55;
    goto LABEL_16;
  }
  v38 = *(google::protobuf::Arena **)v38;
  v39 = *v36;
  if (*v36 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    goto LABEL_54;
LABEL_51:
  std::string::operator=(v39, (const std::string *)v35);
  if ((v5 & 0x40) != 0)
    goto LABEL_55;
LABEL_16:
  if ((v5 & 0x80) == 0)
    goto LABEL_64;
LABEL_61:
  v45 = (std::string *)*((_QWORD *)a2 + 16);
  *((_DWORD *)this + 10) |= 0x80u;
  v46 = (std::string **)((char *)this + 128);
  v47 = *((_QWORD *)this + 1);
  v48 = (google::protobuf::Arena *)(v47 & 0xFFFFFFFFFFFFFFFELL);
  if ((v47 & 1) != 0)
  {
    v48 = *(google::protobuf::Arena **)v48;
    v49 = *v46;
    if (*v46 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_63;
  }
  else
  {
    v49 = *v46;
    if (*v46 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
LABEL_63:
      std::string::operator=(v49, v45);
      goto LABEL_64;
    }
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstance(v46, v48, (__int128 *)v45);
  if ((v5 & 0xFF00) != 0)
    goto LABEL_65;
LABEL_75:
  if ((v5 & 0xF0000) == 0)
    return;
  if ((v5 & 0x10000) != 0)
  {
    *((_BYTE *)this + 158) = *((_BYTE *)a2 + 158);
    if ((v5 & 0x20000) == 0)
    {
LABEL_78:
      if ((v5 & 0x40000) == 0)
        goto LABEL_79;
LABEL_89:
      *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
      if ((v5 & 0x80000) == 0)
        goto LABEL_81;
      goto LABEL_80;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_78;
  }
  *((_BYTE *)this + 159) = *((_BYTE *)a2 + 159);
  if ((v5 & 0x40000) != 0)
    goto LABEL_89;
LABEL_79:
  if ((v5 & 0x80000) != 0)
LABEL_80:
    *((_BYTE *)this + 164) = *((_BYTE *)a2 + 164);
LABEL_81:
  *((_DWORD *)this + 10) |= v5;
}

void sub_22DC6615C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC66170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::SourceCodeInfo::MergeFrom(google::protobuf::SourceCodeInfo *this, const google::protobuf::SourceCodeInfo *a2)
{
  uint64_t v4;
  unsigned int *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 10619);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
      goto LABEL_8;
  }
  v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
    v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
LABEL_8:
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::SourceCodeInfo_Location>::TypeHandler>((uint64_t)this + 16, (uint64_t)a2 + 16);
}

void sub_22DC66244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC66258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::FileDescriptorProto::CopyFrom(google::protobuf::FileDescriptorProto *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    google::protobuf::FileDescriptorProto::Clear(this);
    google::protobuf::FileDescriptorProto::MergeFrom(this, a2, v4);
  }
}

uint64_t google::protobuf::FileDescriptorProto::IsInitialized(google::protobuf::FileDescriptorProto *this)
{
  char *v2;
  int v3;
  BOOL v4;
  google::protobuf::DescriptorProto *v5;
  uint64_t result;
  int v7;
  google::protobuf::EnumDescriptorProto *v8;
  int v9;
  google::protobuf::ServiceDescriptorProto *v10;
  int v11;
  google::protobuf::FieldDescriptorProto *v12;
  uint64_t v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v2 = (char *)this + 48;
  v3 = *((_DWORD *)this + 14);
  while (1)
  {
    v4 = __OFSUB__(v3--, 1);
    if (v3 < 0 != v4)
      break;
    v5 = (google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)v2, v3);
    if ((google::protobuf::DescriptorProto::IsInitialized(v5) & 1) == 0)
      return 0;
  }
  v7 = *((_DWORD *)this + 20);
  while (1)
  {
    v4 = __OFSUB__(v7--, 1);
    if (v7 < 0 != v4)
      break;
    v8 = (google::protobuf::EnumDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)this + 72, v7);
    if ((google::protobuf::EnumDescriptorProto::IsInitialized(v8) & 1) == 0)
      return 0;
  }
  v9 = *((_DWORD *)this + 26);
  while (1)
  {
    v4 = __OFSUB__(v9--, 1);
    if (v9 < 0 != v4)
      break;
    v10 = (google::protobuf::ServiceDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::ServiceDescriptorProto>::TypeHandler>((uint64_t)this + 96, v9);
    if ((google::protobuf::ServiceDescriptorProto::IsInitialized(v10) & 1) == 0)
      return 0;
  }
  v11 = *((_DWORD *)this + 32);
  while (1)
  {
    v4 = __OFSUB__(v11--, 1);
    if (v11 < 0 != v4)
      break;
    v12 = (google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)this + 120, v11);
    if ((google::protobuf::FieldDescriptorProto::IsInitialized(v12) & 1) == 0)
      return 0;
  }
  if ((*((_DWORD *)this + 4) & 8) == 0)
    return 1;
  v13 = *((_QWORD *)this + 25);
  if (!v13)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 7454);
    v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: !value || options_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    v13 = *((_QWORD *)this + 25);
  }
  result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v13 + 16));
  if ((_DWORD)result)
  {
    result = google::protobuf::internal::AllAreInitialized<google::protobuf::UninterpretedOption>(v13 + 48);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

void sub_22DC66430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC66444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::FileOptions::IsInitialized(google::protobuf::FileOptions *this)
{
  uint64_t result;

  result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::FileOptions *)((char *)this + 16));
  if ((_DWORD)result)
    return google::protobuf::internal::AllAreInitialized<google::protobuf::UninterpretedOption>((uint64_t)this + 48);
  return result;
}

uint64_t google::protobuf::FileDescriptorProto::GetMetadata(google::protobuf::FileDescriptorProto *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_google_2fprotobuf_2fdescriptor_2eproto, 0);
  return off_25407A0D8[2];
}

void google::protobuf::DescriptorProto_ExtensionRange::~DescriptorProto_ExtensionRange(google::protobuf::DescriptorProto_ExtensionRange *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;

  google::protobuf::DescriptorProto_ExtensionRange::SharedDtor(this);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
}

{
  google::protobuf::DescriptorProto_ExtensionRange::~DescriptorProto_ExtensionRange(this);
  JUMPOUT(0x22E31DF78);
}

void google::protobuf::DescriptorProto_ExtensionRange::SharedDtor(google::protobuf::DescriptorProto_ExtensionRange *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  google::protobuf::ExtensionRangeOptions *v5;
  char v6;
  std::string v7[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2305);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (this != (google::protobuf::DescriptorProto_ExtensionRange *)&google::protobuf::_DescriptorProto_ExtensionRange_default_instance_)
  {
    v5 = (google::protobuf::ExtensionRangeOptions *)*((_QWORD *)this + 3);
    if (v5)
    {
      google::protobuf::ExtensionRangeOptions::~ExtensionRangeOptions(v5);
      MEMORY[0x22E31DF78]();
    }
  }
}

void sub_22DC66600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC66614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorProto_ExtensionRange::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void google::protobuf::DescriptorProto_ExtensionRange::Clear(google::protobuf::DescriptorProto_ExtensionRange *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  std::string v9[2];

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      google::protobuf::internal::ExtensionSet::Clear((google::protobuf::internal::ExtensionSet *)(v3 + 16));
      google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::TypeHandler>(v3 + 40);
      v4 = *(_QWORD *)(v3 + 8);
      if ((v4 & 1) == 0)
        goto LABEL_8;
    }
    else
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2332);
      v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: options_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v5);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
      v6 = *((_QWORD *)this + 3);
      google::protobuf::internal::ExtensionSet::Clear((google::protobuf::internal::ExtensionSet *)(v6 + 16));
      google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::TypeHandler>(v6 + 40);
      v4 = *(_QWORD *)(v6 + 8);
      if ((v4 & 1) == 0)
        goto LABEL_8;
    }
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
  }
LABEL_8:
  if ((v2 & 6) != 0)
    *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 4) = 0;
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0 && *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

void sub_22DC66748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC6675C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::ExtensionRangeOptions::Clear(google::protobuf::ExtensionRangeOptions *this)
{
  uint64_t v2;

  google::protobuf::internal::ExtensionSet::Clear((google::protobuf::ExtensionRangeOptions *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::TypeHandler>((uint64_t)this + 40);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0 && *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v2 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *google::protobuf::DescriptorProto_ExtensionRange::_InternalParse(google::protobuf::DescriptorProto_ExtensionRange *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  google::protobuf::internal::ParseContext *v5;
  int v6;
  _QWORD *v8;
  google::protobuf::ExtensionRangeOptions *v9;
  google::protobuf::internal *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v15;
  const char *v16;
  google::protobuf::internal *v17;
  int v18;
  const char *v19;
  google::protobuf::internal *v20;
  int v21;
  google::protobuf::internal *TagFallback;
  unsigned int v23;
  google::protobuf::Arena *v24;
  google::protobuf::internal *v25;
  int v26;
  google::protobuf::internal *v27;
  int v28;
  google::protobuf::UnknownFieldSet *v29;
  google::protobuf::internal::ParseContext *v30;
  google::protobuf::internal *v31;

  v31 = a2;
  v6 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v31, a3[11].i32[1]) & 1) == 0)
  {
    v8 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v10 = (google::protobuf::internal *)((char *)v31 + 1);
      v11 = *(unsigned __int8 *)v31;
      if ((*(char *)v31 & 0x80000000) == 0)
        goto LABEL_10;
      v12 = v11 + (*(unsigned __int8 *)v10 << 7);
      v11 = v12 - 128;
      if ((*(char *)v10 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v31, (const char *)(v12 - 128));
      v31 = TagFallback;
      if (!TagFallback)
        goto LABEL_45;
      v10 = TagFallback;
      v11 = v23;
      v13 = v23 >> 3;
      if (v23 >> 3 == 3)
      {
LABEL_36:
        if (v11 == 26)
        {
          *((_DWORD *)this + 4) |= 1u;
          v9 = (google::protobuf::ExtensionRangeOptions *)*((_QWORD *)this + 3);
          if (!v9)
          {
            v24 = (google::protobuf::Arena *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
            if ((*v8 & 1) != 0)
              v24 = *(google::protobuf::Arena **)v24;
            v9 = (google::protobuf::ExtensionRangeOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::ExtensionRangeOptions>(v24);
            *((_QWORD *)this + 3) = v9;
            v10 = v31;
          }
          v31 = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::ExtensionRangeOptions>(a3, v9, v10);
          if (!v31)
          {
LABEL_45:
            v31 = 0;
            goto LABEL_2;
          }
          goto LABEL_32;
        }
LABEL_16:
        if (v11)
          v15 = (v11 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          a3[10].i32[0] = v11 - 1;
          goto LABEL_2;
        }
        if ((*v8 & 1) != 0)
        {
          v31 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), v10, a3, v5);
          if (!v31)
            goto LABEL_45;
        }
        else
        {
          v29 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
          v31 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v29, v31, a3, v30);
          if (!v31)
            goto LABEL_45;
        }
        goto LABEL_32;
      }
LABEL_11:
      if (v13 == 2)
      {
        if (v11 != 16)
          goto LABEL_16;
        v6 |= 4u;
        v17 = (google::protobuf::internal *)((char *)v10 + 1);
        LODWORD(v16) = *(unsigned __int8 *)v10;
        if ((v16 & 0x80) == 0)
          goto LABEL_27;
        v18 = *(char *)v17;
        v16 = (const char *)(v16 + (v18 << 7) - 128);
        if ((v18 & 0x80000000) == 0)
        {
          v17 = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_27:
          v31 = v17;
          *((_DWORD *)this + 9) = (_DWORD)v16;
          goto LABEL_32;
        }
        v25 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v10, v16);
        v31 = v25;
        *((_DWORD *)this + 9) = v26;
        if (!v25)
          goto LABEL_45;
      }
      else
      {
        if (v13 != 1 || v11 != 8)
          goto LABEL_16;
        v6 |= 2u;
        v20 = (google::protobuf::internal *)((char *)v10 + 1);
        LODWORD(v19) = *(unsigned __int8 *)v10;
        if ((v19 & 0x80) == 0)
          goto LABEL_31;
        v21 = *(char *)v20;
        v19 = (const char *)(v19 + (v21 << 7) - 128);
        if ((v21 & 0x80000000) == 0)
        {
          v20 = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_31:
          v31 = v20;
          *((_DWORD *)this + 8) = (_DWORD)v19;
          goto LABEL_32;
        }
        v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v10, v19);
        v31 = v27;
        *((_DWORD *)this + 8) = v28;
        if (!v27)
          goto LABEL_45;
      }
LABEL_32:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v31, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
    }
    v10 = (google::protobuf::internal *)((char *)v31 + 2);
LABEL_10:
    v31 = v10;
    v13 = v11 >> 3;
    if (v11 >> 3 == 3)
      goto LABEL_36;
    goto LABEL_11;
  }
LABEL_2:
  *((_DWORD *)this + 4) |= v6;
  return v31;
}

google::protobuf::internal *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::ExtensionRangeOptions>(int32x2_t *a1, google::protobuf::ExtensionRangeOptions *a2, google::protobuf::internal *this)
{
  unsigned int v5;
  google::protobuf::internal *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  google::protobuf::internal *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = (google::protobuf::internal *)((char *)this + 1);
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::ExtensionRangeOptions::_InternalParse(a2, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC66B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC66B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *google::protobuf::DescriptorProto_ExtensionRange::_InternalSerialize(google::protobuf::DescriptorProto_ExtensionRange *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  google::protobuf::ExtensionRangeOptions *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;

  v6 = *((_DWORD *)this + 4);
  if ((v6 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v9 = *((int *)this + 8);
      *a2 = 8;
      if (v9 <= 0x7F)
      {
LABEL_8:
        a2[1] = v9;
        a2 += 2;
        if ((v6 & 4) != 0)
          goto LABEL_17;
        goto LABEL_3;
      }
    }
    else
    {
      v9 = *((int *)this + 8);
      *a2 = 8;
      if (v9 <= 0x7F)
        goto LABEL_8;
    }
    a2[1] = v9 | 0x80;
    v10 = v9 >> 7;
    if (v9 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v10 | 0x80;
        v11 = v10 >> 7;
        ++a2;
        v12 = v10 >> 14;
        v10 >>= 7;
      }
      while (v12);
      *(a2 - 1) = v11;
      if ((v6 & 4) != 0)
        goto LABEL_17;
    }
    else
    {
      a2[2] = v10;
      a2 += 3;
      if ((v6 & 4) != 0)
        goto LABEL_17;
    }
LABEL_3:
    if ((v6 & 1) == 0)
      goto LABEL_4;
LABEL_28:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v17 = (google::protobuf::ExtensionRangeOptions *)*((_QWORD *)this + 3);
      *a2 = 26;
      v18 = *((_DWORD *)v17 + 16);
      if (v18 <= 0x7F)
      {
LABEL_30:
        a2[1] = v18;
        a2 = (char *)google::protobuf::ExtensionRangeOptions::_InternalSerialize(v17, a2 + 2, a3);
        v7 = *((_QWORD *)this + 1);
        if ((v7 & 1) == 0)
          return (const google::protobuf::UnknownFieldSet *)a2;
        return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
      }
    }
    else
    {
      v17 = (google::protobuf::ExtensionRangeOptions *)*((_QWORD *)this + 3);
      *a2 = 26;
      v18 = *((_DWORD *)v17 + 16);
      if (v18 <= 0x7F)
        goto LABEL_30;
    }
    a2[1] = v18 | 0x80;
    v19 = v18 >> 7;
    if (v18 >> 14)
    {
      v20 = a2 + 3;
      do
      {
        *(v20 - 1) = v19 | 0x80;
        v21 = v19 >> 7;
        ++v20;
        v22 = v19 >> 14;
        v19 >>= 7;
      }
      while (v22);
      *(v20 - 1) = v21;
      a2 = (char *)google::protobuf::ExtensionRangeOptions::_InternalSerialize(v17, v20, a3);
      v7 = *((_QWORD *)this + 1);
      if ((v7 & 1) == 0)
        return (const google::protobuf::UnknownFieldSet *)a2;
    }
    else
    {
      a2[2] = v19;
      a2 = (char *)google::protobuf::ExtensionRangeOptions::_InternalSerialize(v17, a2 + 3, a3);
      v7 = *((_QWORD *)this + 1);
      if ((v7 & 1) == 0)
        return (const google::protobuf::UnknownFieldSet *)a2;
    }
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  }
  if ((v6 & 4) == 0)
    goto LABEL_3;
LABEL_17:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v13 = *((int *)this + 9);
    *a2 = 16;
    if (v13 <= 0x7F)
    {
LABEL_19:
      a2[1] = v13;
      a2 += 2;
      if ((v6 & 1) != 0)
        goto LABEL_28;
      goto LABEL_4;
    }
  }
  else
  {
    v13 = *((int *)this + 9);
    *a2 = 16;
    if (v13 <= 0x7F)
      goto LABEL_19;
  }
  a2[1] = v13 | 0x80;
  v14 = v13 >> 7;
  if (v13 >> 14)
  {
    a2 += 3;
    do
    {
      *(a2 - 1) = v14 | 0x80;
      v15 = v14 >> 7;
      ++a2;
      v16 = v14 >> 14;
      v14 >>= 7;
    }
    while (v16);
    *(a2 - 1) = v15;
    if ((v6 & 1) != 0)
      goto LABEL_28;
  }
  else
  {
    a2[2] = v14;
    a2 += 3;
    if ((v6 & 1) != 0)
      goto LABEL_28;
  }
LABEL_4:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return (const google::protobuf::UnknownFieldSet *)a2;
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *google::protobuf::DescriptorProto_ExtensionRange::ByteSizeLong(google::protobuf::DescriptorProto_ExtensionRange *this)
{
  int v2;
  const google::protobuf::UnknownFieldSet *v3;
  google::protobuf::UnknownFieldSet *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  google::protobuf::UninterpretedOption **v10;
  uint64_t v11;
  google::protobuf::UninterpretedOption *v12;
  char *v13;
  int v14;
  uint64_t v15;
  int v17;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 7) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v5 = *((_QWORD *)this + 3);
      v6 = google::protobuf::internal::ExtensionSet::ByteSize((google::protobuf::internal::ExtensionSet *)(v5 + 16));
      v7 = *(int *)(v5 + 48);
      v8 = (char *)(v6 + 2 * v7);
      v9 = *(_QWORD *)(v5 + 56);
      if (v9)
        v10 = (google::protobuf::UninterpretedOption **)(v9 + 8);
      else
        v10 = 0;
      if ((_DWORD)v7)
      {
        v11 = 8 * v7;
        do
        {
          v12 = *v10++;
          v13 = google::protobuf::UninterpretedOption::ByteSizeLong(v12);
          v8 = &v8[(_QWORD)v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
          v11 -= 8;
        }
        while (v11);
      }
      if ((*(_BYTE *)(v5 + 8) & 1) != 0)
        v8 = google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v5 + 8), (const google::protobuf::UnknownFieldSet *)v8, (_DWORD *)(v5 + 64));
      else
        *(_DWORD *)(v5 + 64) = (_DWORD)v8;
      v3 = (const google::protobuf::UnknownFieldSet *)&v8[((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1];
      if ((v2 & 2) == 0)
      {
LABEL_20:
        if ((v2 & 4) != 0)
        {
          v17 = *((_DWORD *)this + 9);
          if (v17 < 0)
          {
            v3 = (const google::protobuf::UnknownFieldSet *)((char *)v3 + 11);
            v4 = (google::protobuf::DescriptorProto_ExtensionRange *)((char *)this + 8);
            if ((*((_BYTE *)this + 8) & 1) == 0)
              goto LABEL_22;
          }
          else
          {
            v3 = (const google::protobuf::UnknownFieldSet *)((char *)v3 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1);
            v4 = (google::protobuf::DescriptorProto_ExtensionRange *)((char *)this + 8);
            if ((*((_BYTE *)this + 8) & 1) == 0)
              goto LABEL_22;
          }
        }
        else
        {
          v4 = (google::protobuf::DescriptorProto_ExtensionRange *)((char *)this + 8);
          if ((*((_BYTE *)this + 8) & 1) == 0)
            goto LABEL_22;
        }
        return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 5);
      }
    }
    else
    {
      v3 = 0;
      if ((v2 & 2) == 0)
        goto LABEL_20;
    }
    v14 = *((_DWORD *)this + 8);
    if (v14 < 0)
      v15 = 11;
    else
      v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v3 = (const google::protobuf::UnknownFieldSet *)((char *)v3 + v15);
    goto LABEL_20;
  }
  v3 = 0;
  v4 = (google::protobuf::DescriptorProto_ExtensionRange *)((char *)this + 8);
  if ((*((_BYTE *)this + 8) & 1) == 0)
  {
LABEL_22:
    *((_DWORD *)this + 5) = (_DWORD)v3;
    return (char *)v3;
  }
  return google::protobuf::internal::ComputeUnknownFieldsSize(v4, v3, (_DWORD *)this + 5);
}

void google::protobuf::DescriptorProto_ExtensionRange::MergeFrom(google::protobuf::DescriptorProto_ExtensionRange *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  unsigned int *v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2477);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
    if (*(void (***)(google::protobuf::DescriptorProto_ExtensionRange *__hidden))a2 != &off_24F988360)
      goto LABEL_3;
  }
  else if (*(void (***)(google::protobuf::DescriptorProto_ExtensionRange *__hidden))a2 != &off_24F988360)
  {
LABEL_3:
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
    return;
  }
  google::protobuf::DescriptorProto_ExtensionRange::MergeFrom(this, a2);
}

void sub_22DC67064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC67078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorProto_ExtensionRange::MergeFrom(google::protobuf::DescriptorProto_ExtensionRange *this, const google::protobuf::DescriptorProto_ExtensionRange *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  const google::protobuf::UnknownFieldSet *v8;
  google::protobuf::ExtensionRangeOptions *v9;
  google::protobuf::Arena *v10;
  const google::protobuf::ExtensionRangeOptions *v11;
  google::protobuf::UnknownFieldSet *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2492);
    v7 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    v4 = (uint64_t *)((char *)this + 8);
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      v6 = *((_DWORD *)a2 + 4);
      if ((v6 & 7) == 0)
        return;
LABEL_8:
      if ((v6 & 1) != 0)
      {
        *((_DWORD *)this + 4) |= 1u;
        v9 = (google::protobuf::ExtensionRangeOptions *)*((_QWORD *)this + 3);
        if (!v9)
        {
          v10 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v4 & 1) != 0)
            v10 = *(google::protobuf::Arena **)v10;
          v9 = (google::protobuf::ExtensionRangeOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::ExtensionRangeOptions>(v10);
          *((_QWORD *)this + 3) = v9;
        }
        if (*((_QWORD *)a2 + 3))
          v11 = (const google::protobuf::ExtensionRangeOptions *)*((_QWORD *)a2 + 3);
        else
          v11 = (const google::protobuf::ExtensionRangeOptions *)&google::protobuf::_ExtensionRangeOptions_default_instance_;
        google::protobuf::ExtensionRangeOptions::MergeFrom(v9, v11);
        if ((v6 & 2) == 0)
        {
LABEL_10:
          if ((v6 & 4) == 0)
          {
LABEL_12:
            *((_DWORD *)this + 4) |= v6;
            return;
          }
LABEL_11:
          *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
          goto LABEL_12;
        }
      }
      else if ((v6 & 2) == 0)
      {
        goto LABEL_10;
      }
      *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
      if ((v6 & 4) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v4 = (uint64_t *)((char *)this + 8);
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 1) == 0)
      goto LABEL_3;
  }
  v8 = (const google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((*v4 & 1) == 0)
  {
    v12 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v12, v8);
    v6 = *((_DWORD *)a2 + 4);
    if ((v6 & 7) == 0)
      return;
    goto LABEL_8;
  }
  google::protobuf::UnknownFieldSet::InternalMergeFrom((google::protobuf::UnknownFieldSet *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8), v8);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
    goto LABEL_8;
}

void sub_22DC67200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC67214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::ExtensionRangeOptions::MergeFrom(google::protobuf::ExtensionRangeOptions *this, const google::protobuf::ExtensionRangeOptions *a2)
{
  uint64_t v4;
  unsigned int *v5;
  const google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 3538);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    google::protobuf::internal::ExtensionSet::MergeFrom((google::protobuf::ExtensionRangeOptions *)((char *)this + 16), (const google::protobuf::ExtensionRangeOptions *)((char *)a2 + 16));
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    google::protobuf::internal::ExtensionSet::MergeFrom((google::protobuf::ExtensionRangeOptions *)((char *)this + 16), (const google::protobuf::ExtensionRangeOptions *)((char *)a2 + 16));
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
      goto LABEL_8;
  }
  v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
    v8 = (google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v8 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
  google::protobuf::UnknownFieldSet::InternalMergeFrom(v8, v6);
LABEL_8:
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::TypeHandler>((uint64_t)this + 40, (uint64_t)a2 + 40);
}

void sub_22DC67300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC67314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorProto_ExtensionRange::CopyFrom(google::protobuf::DescriptorProto_ExtensionRange *this, const google::protobuf::Message *a2)
{
  google::protobuf::Message *v4;

  if (a2 != this)
  {
    google::protobuf::DescriptorProto_ExtensionRange::Clear(this);
    google::protobuf::DescriptorProto_ExtensionRange::MergeFrom(this, a2, v4);
  }
}

uint64_t google::protobuf::DescriptorProto_ExtensionRange::IsInitialized(google::protobuf::DescriptorProto_ExtensionRange *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  char v5;
  std::string v6[2];

  if ((*((_DWORD *)this + 4) & 1) == 0)
    return 1;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v3 + 16));
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 7769);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: !value || options_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v5, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    v3 = *((_QWORD *)this + 3);
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v3 + 16));
    if (!(_DWORD)result)
      return result;
  }
  result = google::protobuf::internal::AllAreInitialized<google::protobuf::UninterpretedOption>(v3 + 40);
  if ((_DWORD)result)
    return 1;
  return result;
}

void sub_22DC67410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC67424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::ExtensionRangeOptions::IsInitialized(google::protobuf::ExtensionRangeOptions *this)
{
  uint64_t result;

  result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::ExtensionRangeOptions *)((char *)this + 16));
  if ((_DWORD)result)
    return google::protobuf::internal::AllAreInitialized<google::protobuf::UninterpretedOption>((uint64_t)this + 40);
  return result;
}

uint64_t google::protobuf::DescriptorProto_ExtensionRange::GetMetadata(google::protobuf::DescriptorProto_ExtensionRange *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_google_2fprotobuf_2fdescriptor_2eproto, 0);
  return off_25407A0D8[4];
}

void google::protobuf::DescriptorProto_ReservedRange::~DescriptorProto_ReservedRange(google::protobuf::DescriptorProto_ReservedRange *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  _QWORD *v5;
  void *v6;
  char v7;
  std::string v8[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2594);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    v2 = *((_QWORD *)this + 1);
  }
LABEL_4:
  if ((v2 & 1) != 0)
  {
    v5 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0 && !*v5)
    {
      v6 = (void *)v5[1];
      if (v6 != (void *)v5[2])
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 1));
        v6 = (void *)v5[1];
      }
      if (v6)
      {
        v5[2] = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v5, 0x20C40DC1BFBCFLL);
    }
  }
}

{
  google::protobuf::DescriptorProto_ReservedRange::~DescriptorProto_ReservedRange(this);
  JUMPOUT(0x22E31DF78);
}

void sub_22DC6758C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sub_22DC675A0(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

uint64_t google::protobuf::DescriptorProto_ReservedRange::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void google::protobuf::DescriptorProto_ReservedRange::Clear(google::protobuf::DescriptorProto_ReservedRange *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 16) & 3) != 0)
    *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  v1 = *((_QWORD *)this + 1);
  if ((v1 & 1) != 0 && *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v1 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

google::protobuf::internal *google::protobuf::DescriptorProto_ReservedRange::_InternalParse(google::protobuf::DescriptorProto_ReservedRange *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  google::protobuf::internal::ParseContext *v5;
  int v6;
  _QWORD *v8;
  google::protobuf::internal *v9;
  google::protobuf::internal *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v15;
  const char *v16;
  google::protobuf::internal *v17;
  int v18;
  google::protobuf::internal *TagFallback;
  unsigned int v20;
  const char *v21;
  int v22;
  google::protobuf::internal *v23;
  int v24;
  google::protobuf::internal *v25;
  int v26;
  google::protobuf::UnknownFieldSet *v27;
  google::protobuf::internal::ParseContext *v28;
  google::protobuf::internal *v29;

  v29 = a2;
  v6 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v29, a3[11].i32[1]) & 1) == 0)
  {
    v8 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v10 = (google::protobuf::internal *)((char *)v29 + 1);
      v11 = *(unsigned __int8 *)v29;
      if ((*(char *)v29 & 0x80000000) == 0)
        goto LABEL_10;
      v12 = v11 + (*(unsigned __int8 *)v10 << 7);
      v11 = v12 - 128;
      if ((*(char *)v10 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, (const char *)(v12 - 128));
      v29 = TagFallback;
      if (!TagFallback)
        goto LABEL_36;
      v10 = TagFallback;
      v11 = v20;
      v13 = v20 >> 3;
      if (v20 >> 3 == 2)
      {
LABEL_28:
        if (v11 != 16)
          goto LABEL_15;
        v6 |= 2u;
        v9 = (google::protobuf::internal *)((char *)v10 + 1);
        LODWORD(v21) = *(unsigned __int8 *)v10;
        if ((v21 & 0x80) == 0)
          goto LABEL_5;
        v22 = *(char *)v9;
        v21 = (const char *)(v21 + (v22 << 7) - 128);
        if ((v22 & 0x80000000) == 0)
        {
          v9 = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_5:
          v29 = v9;
          *((_DWORD *)this + 7) = (_DWORD)v21;
          goto LABEL_6;
        }
        v23 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v10, v21);
        v29 = v23;
        *((_DWORD *)this + 7) = v24;
        if (!v23)
          goto LABEL_36;
        goto LABEL_6;
      }
LABEL_11:
      if (v13 != 1 || v11 != 8)
      {
LABEL_15:
        if (v11)
          v15 = (v11 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          a3[10].i32[0] = v11 - 1;
          goto LABEL_2;
        }
        if ((*v8 & 1) != 0)
        {
          v29 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, (google::protobuf::UnknownFieldSet *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8), v10, a3, v5);
          if (!v29)
            goto LABEL_36;
        }
        else
        {
          v27 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
          v29 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v27, v29, a3, v28);
          if (!v29)
          {
LABEL_36:
            v29 = 0;
            goto LABEL_2;
          }
        }
        goto LABEL_6;
      }
      v6 |= 1u;
      v17 = (google::protobuf::internal *)((char *)v10 + 1);
      LODWORD(v16) = *(unsigned __int8 *)v10;
      if ((v16 & 0x80) == 0)
        goto LABEL_25;
      v18 = *(char *)v17;
      v16 = (const char *)(v16 + (v18 << 7) - 128);
      if ((v18 & 0x80000000) == 0)
      {
        v17 = (google::protobuf::internal *)((char *)v10 + 2);
LABEL_25:
        v29 = v17;
        *((_DWORD *)this + 6) = (_DWORD)v16;
        goto LABEL_6;
      }
      v25 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v10, v16);
      v29 = v25;
      *((_DWORD *)this + 6) = v26;
      if (!v25)
        goto LABEL_36;
LABEL_6:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v29, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
    }
    v10 = (google::protobuf::internal *)((char *)v29 + 2);
LABEL_10:
    v29 = v10;
    v13 = v11 >> 3;
    if (v11 >> 3 == 2)
      goto LABEL_28;
    goto LABEL_11;
  }
LABEL_2:
  *((_DWORD *)this + 4) |= v6;
  return v29;
}

const google::protobuf::UnknownFieldSet *google::protobuf::DescriptorProto_ReservedRange::_InternalSerialize(google::protobuf::DescriptorProto_ReservedRange *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_16:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v13 = *((int *)this + 7);
      *a2 = 16;
      if (v13 <= 0x7F)
      {
LABEL_18:
        a2[1] = v13;
        a2 += 2;
        v7 = *((_QWORD *)this + 1);
        if ((v7 & 1) == 0)
          return (const google::protobuf::UnknownFieldSet *)a2;
        return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
      }
    }
    else
    {
      v13 = *((int *)this + 7);
      *a2 = 16;
      if (v13 <= 0x7F)
        goto LABEL_18;
    }
    a2[1] = v13 | 0x80;
    v14 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        v15 = v14 >> 7;
        ++a2;
        v16 = v14 >> 14;
        v14 >>= 7;
      }
      while (v16);
      *(a2 - 1) = v15;
      v7 = *((_QWORD *)this + 1);
      if ((v7 & 1) == 0)
        return (const google::protobuf::UnknownFieldSet *)a2;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
      v7 = *((_QWORD *)this + 1);
      if ((v7 & 1) == 0)
        return (const google::protobuf::UnknownFieldSet *)a2;
    }
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v9 = *((int *)this + 6);
    *a2 = 8;
    if (v9 <= 0x7F)
    {
LABEL_7:
      a2[1] = v9;
      a2 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_16;
      goto LABEL_3;
    }
  }
  else
  {
    v9 = *((int *)this + 6);
    *a2 = 8;
    if (v9 <= 0x7F)
      goto LABEL_7;
  }
  a2[1] = v9 | 0x80;
  v10 = v9 >> 7;
  if (v9 >> 14)
  {
    a2 += 3;
    do
    {
      *(a2 - 1) = v10 | 0x80;
      v11 = v10 >> 7;
      ++a2;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
    *(a2 - 1) = v11;
    if ((v6 & 2) != 0)
      goto LABEL_16;
  }
  else
  {
    a2[2] = v10;
    a2 += 3;
    if ((v6 & 2) != 0)
      goto LABEL_16;
  }
LABEL_3:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return (const google::protobuf::UnknownFieldSet *)a2;
  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
}

char *google::protobuf::DescriptorProto_ReservedRange::ByteSizeLong(google::protobuf::DescriptorProto_ReservedRange *this)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_14;
  }
  if ((v1 & 1) != 0)
  {
    v3 = *((_DWORD *)this + 6);
    if (v3 < 0)
    {
      v2 = 11;
      if ((v1 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v2 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v1 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_14;
  }
  v4 = *((_DWORD *)this + 7);
  if (v4 < 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v2 += v5;
LABEL_14:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::DescriptorProto_ReservedRange *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v2;
  return (char *)v2;
}

void google::protobuf::DescriptorProto_ReservedRange::MergeFrom(google::protobuf::DescriptorProto_ReservedRange *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  unsigned int *v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2739);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
    if (*(void (***)(google::protobuf::DescriptorProto_ReservedRange *__hidden))a2 != &off_24F988410)
      goto LABEL_3;
  }
  else if (*(void (***)(google::protobuf::DescriptorProto_ReservedRange *__hidden))a2 != &off_24F988410)
  {
LABEL_3:
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
    return;
  }
  google::protobuf::DescriptorProto_ReservedRange::MergeFrom(this, a2);
}

void sub_22DC67B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC67B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorProto_ReservedRange::MergeFrom(google::protobuf::DescriptorProto_ReservedRange *this, const google::protobuf::DescriptorProto_ReservedRange *a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  const google::protobuf::UnknownFieldSet *v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2754);
    v6 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      v5 = *((_DWORD *)a2 + 4);
      if ((v5 & 3) == 0)
        return;
      goto LABEL_8;
    }
  }
  else
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
      goto LABEL_3;
  }
  v7 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    google::protobuf::UnknownFieldSet::InternalMergeFrom((google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8), v7);
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 & 3) == 0)
      return;
  }
  else
  {
    v9 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
    google::protobuf::UnknownFieldSet::InternalMergeFrom(v9, v7);
    v5 = *((_DWORD *)a2 + 4);
    if ((v5 & 3) == 0)
      return;
  }
LABEL_8:
  if ((v5 & 1) != 0)
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  if ((v5 & 2) != 0)
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)this + 4) |= v5;
}

void sub_22DC67C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC67C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorProto_ReservedRange::CopyFrom(google::protobuf::DescriptorProto_ReservedRange *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  uint64_t v5;

  if (a2 != this)
  {
    if ((*((_BYTE *)this + 16) & 3) != 0)
      *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 4) = 0;
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 1) != 0 && *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 16))
      google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v5 & 0xFFFFFFFFFFFFFFFELL)
                                                                                           + 8));
    google::protobuf::DescriptorProto_ReservedRange::MergeFrom(this, a2, a3);
  }
}

uint64_t google::protobuf::DescriptorProto_ReservedRange::IsInitialized(google::protobuf::DescriptorProto_ReservedRange *this)
{
  return 1;
}

uint64_t google::protobuf::DescriptorProto_ReservedRange::GetMetadata(google::protobuf::DescriptorProto_ReservedRange *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_google_2fprotobuf_2fdescriptor_2eproto, 0);
  return off_25407A0D8[6];
}

google::protobuf::DescriptorProto *google::protobuf::DescriptorProto::DescriptorProto(google::protobuf::DescriptorProto *this, google::protobuf::Arena *a2)
{
  *(_QWORD *)this = &off_24F9884C0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = a2;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = a2;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 24) = a2;
  *((_QWORD *)this + 18) = a2;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = a2;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  if (atomic_load(scc_info_DescriptorProto_google_2fprotobuf_2fdescriptor_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_DescriptorProto_google_2fprotobuf_2fdescriptor_2eproto);
  *((_QWORD *)this + 27) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 28) = 0;
  return this;
}

void sub_22DC67E04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v7);
  google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ReservedRange>::~RepeatedPtrField(v8);
  google::protobuf::RepeatedPtrField<google::protobuf::OneofDescriptorProto>::~RepeatedPtrField(v6);
  google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ExtensionRange>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::~RepeatedPtrField(v2);
  google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::~RepeatedPtrField(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorProto::_internal_has_options(google::protobuf::DescriptorProto *this)
{
  unsigned int v1;
  unsigned int *v3;
  char v4;
  std::string v5[2];

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 2) == 0 || *((_QWORD *)this + 28))
    return (v1 >> 1) & 1;
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.h", 8241);
  v3 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: !value || options_ != nullptr: ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, v3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  return (v1 >> 1) & 1;
}

void sub_22DC67ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC67EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorProto::~DescriptorProto(google::protobuf::internal::ArenaImpl **this)
{
  google::protobuf::internal::ArenaImpl *v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  google::protobuf::DescriptorProto **v7;
  google::protobuf::internal::ArenaImpl *v8;
  google::protobuf::DescriptorProto **v9;
  uint64_t v10;

  google::protobuf::DescriptorProto::SharedDtor((google::protobuf::DescriptorProto *)this);
  v2 = this[1];
  if ((v2 & 1) != 0)
  {
    v3 = (unint64_t)v2 & 0xFFFFFFFFFFFFFFFELL;
    v4 = *(_QWORD *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v3 && v4 == 0)
    {
      v6 = *(void **)(v3 + 8);
      if (v6 != *(void **)(v3 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v3 + 8));
        v6 = *(void **)(v3 + 8);
      }
      if (v6)
      {
        *(_QWORD *)(v3 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x22E31DF78](v3, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(this + 24);
  google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ReservedRange>::~RepeatedPtrField((uint64_t)(this + 21));
  google::protobuf::RepeatedPtrField<google::protobuf::OneofDescriptorProto>::~RepeatedPtrField((uint64_t)(this + 18));
  google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::~RepeatedPtrField((uint64_t)(this + 15));
  google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ExtensionRange>::~RepeatedPtrField((uint64_t)(this + 12));
  google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::~RepeatedPtrField((uint64_t)(this + 9));
  v7 = (google::protobuf::DescriptorProto **)this[8];
  if (v7)
  {
    v8 = this[6];
    if (v8)
    {
      this[8] = 0;
LABEL_23:
      google::protobuf::internal::ArenaImpl::SpaceAllocated(v8);
      goto LABEL_24;
    }
    v9 = v7 + 1;
    v10 = *(unsigned int *)v7;
    if ((int)v10 >= 1)
    {
      do
      {
        if (*v9)
        {
          google::protobuf::DescriptorProto::~DescriptorProto(*v9);
          MEMORY[0x22E31DF78]();
        }
        ++v9;
        --v10;
      }
      while (v10);
      v7 = (google::protobuf::DescriptorProto **)this[8];
    }
    operator delete(v7);
  }
  v8 = this[6];
  this[8] = 0;
  if (v8)
    goto LABEL_23;
LABEL_24:
  google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::~RepeatedPtrField((uint64_t)(this + 3));
}

{
  google::protobuf::DescriptorProto::~DescriptorProto(this);
  JUMPOUT(0x22E31DF78);
}

void google::protobuf::DescriptorProto::SharedDtor(google::protobuf::DescriptorProto *this)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  uint64_t v5;
  google::protobuf::MessageOptions *v7;
  char v8;
  std::string v9[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2880);
    v4 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  v5 = *((_QWORD *)this + 27);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x22E31DF78](v5, 0x1012C40EC159624);
  }
  if (this != (google::protobuf::DescriptorProto *)&google::protobuf::_DescriptorProto_default_instance_)
  {
    v7 = (google::protobuf::MessageOptions *)*((_QWORD *)this + 28);
    if (v7)
    {
      google::protobuf::MessageOptions::~MessageOptions(v7);
      MEMORY[0x22E31DF78]();
    }
  }
}

void sub_22DC6812C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC68140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::DescriptorProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void google::protobuf::DescriptorProto::Clear(google::protobuf::DescriptorProto *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  std::string v9[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((char *)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)this + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ExtensionRange>::TypeHandler>((uint64_t)this + 96);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)this + 120);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::OneofDescriptorProto>::TypeHandler>((uint64_t)this + 144);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ReservedRange>::TypeHandler>((uint64_t)this + 168);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 192);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) == 0)
    goto LABEL_12;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 27);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) == 0)
        goto LABEL_12;
      goto LABEL_6;
    }
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
  }
  if ((v2 & 2) == 0)
    goto LABEL_12;
LABEL_6:
  v4 = *((_QWORD *)this + 28);
  if (!v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 2920);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: options_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
    v4 = *((_QWORD *)this + 28);
  }
  google::protobuf::internal::ExtensionSet::Clear((google::protobuf::internal::ExtensionSet *)(v4 + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::TypeHandler>(v4 + 48);
  *(_DWORD *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 40) = 0;
  v6 = *(_QWORD *)(v4 + 8);
  if ((v6 & 1) != 0 && *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v6 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
LABEL_12:
  *((_DWORD *)this + 4) = 0;
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0 && *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

void sub_22DC682C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC682D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::MessageOptions::Clear(google::protobuf::MessageOptions *this)
{
  uint64_t v2;

  google::protobuf::internal::ExtensionSet::Clear((google::protobuf::MessageOptions *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::UninterpretedOption>::TypeHandler>((uint64_t)this + 48);
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0 && *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 16))
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v2 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
}

std::string::value_type *google::protobuf::DescriptorProto::_InternalParse(google::protobuf::DescriptorProto *this, std::string::value_type *a2, int32x2_t *a3)
{
  google::protobuf::internal::ParseContext *v5;
  uint64_t *v7;
  google::protobuf::MessageOptions *v8;
  std::string::value_type *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  google::protobuf::Arena *v14;
  std::string *v15;
  const char *v16;
  size_t size;
  std::string::value_type *TagFallback;
  unsigned int v19;
  BOOL v20;
  std::string::value_type *v21;
  std::string::value_type *v22;
  int *v23;
  uint64_t v24;
  int v25;
  google::protobuf::FieldDescriptorProto *v26;
  uint64_t v27;
  uint64_t v28;
  std::string::value_type *v29;
  std::string::value_type *v30;
  int *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  google::protobuf::DescriptorProto *v35;
  uint64_t v36;
  uint64_t v37;
  std::string::value_type *v38;
  std::string::value_type *v39;
  int *v40;
  uint64_t v41;
  int v42;
  google::protobuf::EnumDescriptorProto *v43;
  uint64_t v44;
  uint64_t v45;
  std::string::value_type *v46;
  std::string::value_type *v47;
  int *v48;
  uint64_t v49;
  int v50;
  google::protobuf::DescriptorProto_ExtensionRange *v51;
  uint64_t v52;
  uint64_t v53;
  std::string::value_type *v54;
  std::string::value_type *v55;
  int *v56;
  uint64_t v57;
  int v58;
  google::protobuf::FieldDescriptorProto *v59;
  uint64_t v60;
  uint64_t v61;
  google::protobuf::Arena *v62;
  std::string::value_type *v63;
  std::string::value_type *v64;
  int *v65;
  uint64_t v66;
  int v67;
  google::protobuf::OneofDescriptorProto *v68;
  uint64_t v69;
  uint64_t v70;
  std::string::value_type *v71;
  std::string::value_type *v72;
  int *v73;
  uint64_t v74;
  int v75;
  google::protobuf::DescriptorProto_ReservedRange *v76;
  uint64_t v77;
  uint64_t v78;
  std::string::value_type *v79;
  std::string::value_type *v80;
  int *v81;
  uint64_t v82;
  int v83;
  std::string *v84;
  const char *v85;
  int v86;
  size_t v87;
  std::string *v88;
  google::protobuf::internal::ArenaImpl *v89;
  std::string *AlignedAndAddCleanup;
  uint64_t v91;
  uint64_t v92;
  std::string *v93;
  google::protobuf::UnknownFieldSet *v94;
  google::protobuf::internal::ParseContext *v95;
  uint64_t *v96;
  std::string **v97;
  std::string::value_type *__s;

  __s = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&__s, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (uint64_t *)((char *)this + 192);
    v96 = (uint64_t *)((char *)this + 8);
    v97 = (std::string **)((char *)this + 216);
    while (1)
    {
      v9 = __s + 1;
      v10 = *__s;
      if ((*__s & 0x80000000) == 0)
        goto LABEL_10;
      v11 = v10 + (*v9 << 7);
      v10 = v11 - 128;
      if ((*v9 & 0x80000000) == 0)
        break;
      TagFallback = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)__s, (const char *)(v11 - 128));
      __s = TagFallback;
      if (!TagFallback)
        return 0;
      v9 = TagFallback;
      v10 = v19;
      v12 = (v19 >> 3) - 1;
      if (v12 <= 9)
        goto LABEL_11;
LABEL_20:
      if (v10)
        v20 = (v10 & 7) == 4;
      else
        v20 = 1;
      if (v20)
      {
        a3[10].i32[0] = v10 - 1;
        return __s;
      }
      if ((*v96 & 1) != 0)
      {
        __s = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, (google::protobuf::UnknownFieldSet *)((*v96 & 0xFFFFFFFFFFFFFFFELL) + 8), (google::protobuf::UnknownFieldSet *)v9, a3, v5);
        if (!__s)
          return 0;
      }
      else
      {
        v94 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v96);
        __s = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v94, (google::protobuf::UnknownFieldSet *)__s, a3, v95);
        if (!__s)
          return 0;
      }
LABEL_148:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&__s, a3[11].i32[1]) & 1) != 0)return __s;
    }
    v9 = __s + 2;
LABEL_10:
    __s = v9;
    v12 = (v10 >> 3) - 1;
LABEL_11:
    switch(v12)
    {
      case 0u:
        if (v10 != 10)
          goto LABEL_20;
        *((_DWORD *)this + 4) |= 1u;
        v13 = *((_QWORD *)this + 1);
        v14 = (google::protobuf::Arena *)(v13 & 0xFFFFFFFFFFFFFFFELL);
        if ((v13 & 1) == 0)
        {
          v15 = *v97;
          if (*v97 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_16;
LABEL_15:
          google::protobuf::internal::ArenaStringPtr::CreateInstance(v97, v14, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v97;
          v9 = __s;
          goto LABEL_16;
        }
        v14 = *(google::protobuf::Arena **)v14;
        v15 = *v97;
        if (*v97 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_15;
LABEL_16:
        __s = (std::string::value_type *)google::protobuf::internal::InlineGreedyStringParser(v15, v9, (uint64_t)a3);
        if (SHIBYTE(v15->__r_.__value_.__r.__words[2]) < 0)
        {
          v93 = (std::string *)v15->__r_.__value_.__r.__words[0];
          size = v15->__r_.__value_.__l.__size_;
          if ((size & 0x8000000000000000) != 0)
            google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v15->__r_.__value_.__l.__size_, "size_t to int conversion", v16);
          v15 = v93;
        }
        else
        {
          size = HIBYTE(v15->__r_.__value_.__r.__words[2]);
        }
        google::protobuf::internal::VerifyUTF8(v15, size, (google::protobuf::internal *)"google.protobuf.DescriptorProto.name");
        if (__s)
          goto LABEL_148;
        return 0;
      case 1u:
        if (v10 != 18)
          goto LABEL_20;
        v21 = v9 - 1;
        while (1)
        {
          v22 = v21 + 1;
          __s = v21 + 1;
          v23 = (int *)*((_QWORD *)this + 5);
          if (!v23)
            break;
          v24 = *((int *)this + 8);
          v25 = *v23;
          if ((int)v24 >= *v23)
          {
            if (v25 == *((_DWORD *)this + 9))
            {
LABEL_34:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v25 + 1);
              v23 = (int *)*((_QWORD *)this + 5);
              v25 = *v23;
            }
            *v23 = v25 + 1;
            v26 = (google::protobuf::FieldDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FieldDescriptorProto>(*((google::protobuf::Arena **)this + 3));
            v27 = *((_QWORD *)this + 5);
            v28 = *((int *)this + 8);
            *((_DWORD *)this + 8) = v28 + 1;
            *(_QWORD *)(v27 + 8 * v28 + 8) = v26;
            v22 = __s;
            goto LABEL_36;
          }
          *((_DWORD *)this + 8) = v24 + 1;
          v26 = *(google::protobuf::FieldDescriptorProto **)&v23[2 * v24 + 2];
LABEL_36:
          v21 = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::FieldDescriptorProto>(a3, v26, v22);
          __s = v21;
          if (!v21)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v21 || *v21 != 18)
            goto LABEL_148;
        }
        v25 = *((_DWORD *)this + 9);
        goto LABEL_34;
      case 2u:
        if (v10 != 26)
          goto LABEL_20;
        v29 = v9 - 1;
        while (1)
        {
          v30 = v29 + 1;
          __s = v29 + 1;
          v31 = (int *)*((_QWORD *)this + 8);
          if (!v31)
            break;
          v32 = *((int *)this + 14);
          v33 = *v31;
          if ((int)v32 >= *v31)
          {
            if (v33 == *((_DWORD *)this + 15))
            {
LABEL_47:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v33 + 1);
              v31 = (int *)*((_QWORD *)this + 8);
              v33 = *v31;
            }
            *v31 = v33 + 1;
            v35 = google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto>(*((google::protobuf::Arena **)this
                                                                                                 + 6));
            LODWORD(v34) = (_DWORD)v35;
            v36 = *((_QWORD *)this + 8);
            v37 = *((int *)this + 14);
            *((_DWORD *)this + 14) = v37 + 1;
            *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
            v30 = __s;
            goto LABEL_49;
          }
          *((_DWORD *)this + 14) = v32 + 1;
          v34 = *(_QWORD *)&v31[2 * v32 + 2];
LABEL_49:
          v29 = (std::string::value_type *)google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::DescriptorProto>((int)a3, v34, (google::protobuf::internal *)v30);
          __s = v29;
          if (!v29)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v29 || *v29 != 26)
            goto LABEL_148;
        }
        v33 = *((_DWORD *)this + 15);
        goto LABEL_47;
      case 3u:
        if (v10 != 34)
          goto LABEL_20;
        v38 = v9 - 1;
        while (1)
        {
          v39 = v38 + 1;
          __s = v38 + 1;
          v40 = (int *)*((_QWORD *)this + 11);
          if (!v40)
            break;
          v41 = *((int *)this + 20);
          v42 = *v40;
          if ((int)v41 >= *v40)
          {
            if (v42 == *((_DWORD *)this + 21))
            {
LABEL_60:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 18, v42 + 1);
              v40 = (int *)*((_QWORD *)this + 11);
              v42 = *v40;
            }
            *v40 = v42 + 1;
            v43 = (google::protobuf::EnumDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::EnumDescriptorProto>(*((google::protobuf::Arena **)this + 9));
            v44 = *((_QWORD *)this + 11);
            v45 = *((int *)this + 20);
            *((_DWORD *)this + 20) = v45 + 1;
            *(_QWORD *)(v44 + 8 * v45 + 8) = v43;
            v39 = __s;
            goto LABEL_62;
          }
          *((_DWORD *)this + 20) = v41 + 1;
          v43 = *(google::protobuf::EnumDescriptorProto **)&v40[2 * v41 + 2];
LABEL_62:
          v38 = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::EnumDescriptorProto>(a3, v43, v39);
          __s = v38;
          if (!v38)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v38 || *v38 != 34)
            goto LABEL_148;
        }
        v42 = *((_DWORD *)this + 21);
        goto LABEL_60;
      case 4u:
        if (v10 != 42)
          goto LABEL_20;
        v46 = v9 - 1;
        while (1)
        {
          v47 = v46 + 1;
          __s = v46 + 1;
          v48 = (int *)*((_QWORD *)this + 14);
          if (!v48)
            break;
          v49 = *((int *)this + 26);
          v50 = *v48;
          if ((int)v49 >= *v48)
          {
            if (v50 == *((_DWORD *)this + 27))
            {
LABEL_73:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 24, v50 + 1);
              v48 = (int *)*((_QWORD *)this + 14);
              v50 = *v48;
            }
            *v48 = v50 + 1;
            v51 = (google::protobuf::DescriptorProto_ExtensionRange *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto_ExtensionRange>(*((google::protobuf::Arena **)this + 12));
            v52 = *((_QWORD *)this + 14);
            v53 = *((int *)this + 26);
            *((_DWORD *)this + 26) = v53 + 1;
            *(_QWORD *)(v52 + 8 * v53 + 8) = v51;
            v47 = __s;
            goto LABEL_75;
          }
          *((_DWORD *)this + 26) = v49 + 1;
          v51 = *(google::protobuf::DescriptorProto_ExtensionRange **)&v48[2 * v49 + 2];
LABEL_75:
          v46 = (std::string::value_type *)google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::DescriptorProto_ExtensionRange>(a3, v51, (google::protobuf::internal *)v47);
          __s = v46;
          if (!v46)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v46 || *v46 != 42)
            goto LABEL_148;
        }
        v50 = *((_DWORD *)this + 27);
        goto LABEL_73;
      case 5u:
        if (v10 != 50)
          goto LABEL_20;
        v54 = v9 - 1;
        while (1)
        {
          v55 = v54 + 1;
          __s = v54 + 1;
          v56 = (int *)*((_QWORD *)this + 17);
          if (!v56)
            break;
          v57 = *((int *)this + 32);
          v58 = *v56;
          if ((int)v57 >= *v56)
          {
            if (v58 == *((_DWORD *)this + 33))
            {
LABEL_86:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 30, v58 + 1);
              v56 = (int *)*((_QWORD *)this + 17);
              v58 = *v56;
            }
            *v56 = v58 + 1;
            v59 = (google::protobuf::FieldDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FieldDescriptorProto>(*((google::protobuf::Arena **)this + 15));
            v60 = *((_QWORD *)this + 17);
            v61 = *((int *)this + 32);
            *((_DWORD *)this + 32) = v61 + 1;
            *(_QWORD *)(v60 + 8 * v61 + 8) = v59;
            v55 = __s;
            goto LABEL_88;
          }
          *((_DWORD *)this + 32) = v57 + 1;
          v59 = *(google::protobuf::FieldDescriptorProto **)&v56[2 * v57 + 2];
LABEL_88:
          v54 = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::FieldDescriptorProto>(a3, v59, v55);
          __s = v54;
          if (!v54)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v54 || *v54 != 50)
            goto LABEL_148;
        }
        v58 = *((_DWORD *)this + 33);
        goto LABEL_86;
      case 6u:
        if (v10 != 58)
          goto LABEL_20;
        *((_DWORD *)this + 4) |= 2u;
        v8 = (google::protobuf::MessageOptions *)*((_QWORD *)this + 28);
        if (!v8)
        {
          v62 = (google::protobuf::Arena *)(*v96 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v96 & 1) != 0)
            v62 = *(google::protobuf::Arena **)v62;
          v8 = (google::protobuf::MessageOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::MessageOptions>(v62);
          *((_QWORD *)this + 28) = v8;
          v9 = __s;
        }
        __s = (std::string::value_type *)google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::MessageOptions>(a3, v8, (google::protobuf::internal *)v9);
        if (!__s)
          return 0;
        goto LABEL_148;
      case 7u:
        if (v10 != 66)
          goto LABEL_20;
        v63 = v9 - 1;
        while (1)
        {
          v64 = v63 + 1;
          __s = v63 + 1;
          v65 = (int *)*((_QWORD *)this + 20);
          if (!v65)
            break;
          v66 = *((int *)this + 38);
          v67 = *v65;
          if ((int)v66 >= *v65)
          {
            if (v67 == *((_DWORD *)this + 39))
            {
LABEL_103:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 36, v67 + 1);
              v65 = (int *)*((_QWORD *)this + 20);
              v67 = *v65;
            }
            *v65 = v67 + 1;
            v68 = (google::protobuf::OneofDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::OneofDescriptorProto>(*((google::protobuf::Arena **)this + 18));
            v69 = *((_QWORD *)this + 20);
            v70 = *((int *)this + 38);
            *((_DWORD *)this + 38) = v70 + 1;
            *(_QWORD *)(v69 + 8 * v70 + 8) = v68;
            v64 = __s;
            goto LABEL_105;
          }
          *((_DWORD *)this + 38) = v66 + 1;
          v68 = *(google::protobuf::OneofDescriptorProto **)&v65[2 * v66 + 2];
LABEL_105:
          v63 = google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::OneofDescriptorProto>(a3, v68, v64);
          __s = v63;
          if (!v63)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v63 || *v63 != 66)
            goto LABEL_148;
        }
        v67 = *((_DWORD *)this + 39);
        goto LABEL_103;
      case 8u:
        if (v10 != 74)
          goto LABEL_20;
        v71 = v9 - 1;
        while (1)
        {
          v72 = v71 + 1;
          __s = v71 + 1;
          v73 = (int *)*((_QWORD *)this + 23);
          if (!v73)
            break;
          v74 = *((int *)this + 44);
          v75 = *v73;
          if ((int)v74 >= *v73)
          {
            if (v75 == *((_DWORD *)this + 45))
            {
LABEL_116:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 42, v75 + 1);
              v73 = (int *)*((_QWORD *)this + 23);
              v75 = *v73;
            }
            *v73 = v75 + 1;
            v76 = (google::protobuf::DescriptorProto_ReservedRange *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto_ReservedRange>(*((google::protobuf::Arena **)this + 21));
            v77 = *((_QWORD *)this + 23);
            v78 = *((int *)this + 44);
            *((_DWORD *)this + 44) = v78 + 1;
            *(_QWORD *)(v77 + 8 * v78 + 8) = v76;
            v72 = __s;
            goto LABEL_118;
          }
          *((_DWORD *)this + 44) = v74 + 1;
          v76 = *(google::protobuf::DescriptorProto_ReservedRange **)&v73[2 * v74 + 2];
LABEL_118:
          v71 = (std::string::value_type *)google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::DescriptorProto_ReservedRange>(a3, v76, (google::protobuf::internal *)v72);
          __s = v71;
          if (!v71)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v71 || *v71 != 74)
            goto LABEL_148;
        }
        v75 = *((_DWORD *)this + 45);
        goto LABEL_116;
      case 9u:
        if (v10 != 82)
          goto LABEL_20;
        v79 = v9 - 1;
        break;
      default:
        goto LABEL_20;
    }
    while (1)
    {
      v80 = v79 + 1;
      __s = v79 + 1;
      v81 = (int *)*((_QWORD *)this + 26);
      if (!v81)
        break;
      v82 = *((int *)this + 50);
      v83 = *v81;
      if ((int)v82 < *v81)
      {
        *((_DWORD *)this + 50) = v82 + 1;
        v84 = *(std::string **)&v81[2 * v82 + 2];
        __s = (std::string::value_type *)google::protobuf::internal::InlineGreedyStringParser(v84, v80, (uint64_t)a3);
        v86 = SHIBYTE(v84->__r_.__value_.__r.__words[2]);
        if (v86 < 0)
          goto LABEL_127;
        goto LABEL_139;
      }
      if (v83 == *((_DWORD *)this + 51))
        goto LABEL_132;
LABEL_133:
      *v81 = v83 + 1;
      v89 = (google::protobuf::internal::ArenaImpl *)*v7;
      if (*v7)
      {
        if (*((_QWORD *)v89 + 14))
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v89, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        AlignedAndAddCleanup = (std::string *)operator new();
      }
      v84 = AlignedAndAddCleanup;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
      AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
      v91 = *((_QWORD *)this + 26);
      v92 = *((int *)this + 50);
      *((_DWORD *)this + 50) = v92 + 1;
      *(_QWORD *)(v91 + 8 * v92 + 8) = AlignedAndAddCleanup;
      __s = (std::string::value_type *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, __s, (uint64_t)a3);
      v86 = SHIBYTE(v84->__r_.__value_.__r.__words[2]);
      if (v86 < 0)
      {
LABEL_127:
        v88 = (std::string *)v84->__r_.__value_.__r.__words[0];
        v87 = v84->__r_.__value_.__l.__size_;
        if ((v87 & 0x8000000000000000) != 0)
          google::protobuf::StringPiece::LogFatalSizeTooBig((google::protobuf::StringPiece *)v84->__r_.__value_.__l.__size_, "size_t to int conversion", v85);
        v84 = v88;
        goto LABEL_140;
      }
LABEL_139:
      v87 = v86;
LABEL_140:
      google::protobuf::internal::VerifyUTF8(v84, v87, (google::protobuf::internal *)"google.protobuf.DescriptorProto.reserved_name");
      v79 = __s;
      if (!__s)
        return 0;
      if (*(_QWORD *)a3 <= (unint64_t)__s || *__s != 82)
        goto LABEL_148;
    }
    v83 = *((_DWORD *)this + 51);
LABEL_132:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 48, v83 + 1);
    v81 = (int *)*((_QWORD *)this + 26);
    v83 = *v81;
    goto LABEL_133;
  }
  return __s;
}

google::protobuf::internal *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::DescriptorProto_ExtensionRange>(int32x2_t *a1, google::protobuf::DescriptorProto_ExtensionRange *this, google::protobuf::internal *a3)
{
  unsigned int v5;
  google::protobuf::internal *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  google::protobuf::internal *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *(unsigned __int8 *)a3;
  if (*(char *)a3 < 0)
  {
    result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(a3, (const char *)*(unsigned __int8 *)a3);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = (google::protobuf::internal *)((char *)a3 + 1);
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::DescriptorProto_ExtensionRange::_InternalParse(this, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC68E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC68E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::MessageOptions>(int32x2_t *a1, google::protobuf::MessageOptions *a2, google::protobuf::internal *this)
{
  unsigned int v5;
  google::protobuf::internal *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  google::protobuf::internal *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = (google::protobuf::internal *)((char *)this + 1);
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::MessageOptions::_InternalParse(a2, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC68FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC68FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string::value_type *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::OneofDescriptorProto>(int32x2_t *a1, google::protobuf::OneofDescriptorProto *a2, std::string::value_type *this)
{
  unsigned int v5;
  std::string::value_type *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  std::string::value_type *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *this;
  if (*this < 0)
  {
    result = (std::string::value_type *)google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)this, (const char *)*this);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = this + 1;
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::OneofDescriptorProto::_InternalParse(a2, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC69128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC6913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::DescriptorProto_ReservedRange>(int32x2_t *a1, google::protobuf::DescriptorProto_ReservedRange *this, google::protobuf::internal *a3)
{
  unsigned int v5;
  google::protobuf::internal *v6;
  int32x2_t v7;
  int v8;
  __int32 v9;
  BOOL v10;
  google::protobuf::internal *result;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  char v15;
  std::string v16[2];

  v5 = *(unsigned __int8 *)a3;
  if (*(char *)a3 < 0)
  {
    result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(a3, (const char *)*(unsigned __int8 *)a3);
    if (!result)
      return result;
    v6 = result;
    v5 = v13;
    if (v13 >= 0x7FFFFFF0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/parse_context.h", 128);
      v14 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, v14);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v6 = (google::protobuf::internal *)((char *)a3 + 1);
  }
  v7 = a1[1];
  v8 = v5 + (_DWORD)v6 - v7.i32[0];
  *a1 = (int32x2_t)(*(_QWORD *)&v7 + (v8 & (v8 >> 31)));
  v9 = a1[3].i32[1];
  a1[3].i32[1] = v8;
  v7.i32[0] = a1[11].i32[0];
  v10 = __OFSUB__(v7.i32[0]--, 1);
  a1[11].i32[0] = v7.i32[0];
  if (v7.i32[0] < 0 != v10)
    return 0;
  result = google::protobuf::DescriptorProto_ReservedRange::_InternalParse(this, v6, a1);
  if (result)
  {
    ++a1[11].i32[0];
    if (!a1[10].i32[0])
    {
      v12 = a1[3].i32[1] + v9 - v8;
      a1[3].i32[1] = v12;
      *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v12 & (v12 >> 31)));
      return result;
    }
    return 0;
  }
  return result;
}

void sub_22DC69294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC692A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const google::protobuf::UnknownFieldSet *google::protobuf::DescriptorProto::_InternalSerialize(google::protobuf::DescriptorProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  unsigned __int8 *v8;
  const char *v9;
  uint64_t v10;
  int64_t v11;
  const void *v12;
  int v13;
  int i;
  unsigned __int8 *v15;
  google::protobuf::FieldDescriptorProto *v16;
  google::protobuf::io::EpsCopyOutputStream *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int j;
  unsigned __int8 *v24;
  google::protobuf::DescriptorProto *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int k;
  unsigned __int8 *v32;
  google::protobuf::EnumDescriptorProto *v33;
  google::protobuf::io::EpsCopyOutputStream *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int m;
  unsigned __int8 *v41;
  google::protobuf::DescriptorProto_ExtensionRange *v42;
  google::protobuf::io::EpsCopyOutputStream *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int n;
  unsigned __int8 *v50;
  google::protobuf::FieldDescriptorProto *v51;
  google::protobuf::io::EpsCopyOutputStream *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  google::protobuf::MessageOptions *v57;
  unsigned int v58;
  unsigned __int8 *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int ii;
  unsigned __int8 *v65;
  google::protobuf::OneofDescriptorProto *v66;
  google::protobuf::io::EpsCopyOutputStream *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int jj;
  unsigned __int8 *v74;
  google::protobuf::DescriptorProto_ReservedRange *v75;
  google::protobuf::io::EpsCopyOutputStream *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  int64_t v87;
  const void *v88;
  uint64_t v89;

  v7 = *((_DWORD *)this + 4);
  if ((v7 & 1) == 0)
    goto LABEL_13;
  v8 = (unsigned __int8 *)*((_QWORD *)this + 27);
  if ((char)v8[23] < 0)
  {
    v8 = *(unsigned __int8 **)v8;
    v9 = *(const char **)(*((_QWORD *)this + 27) + 8);
  }
  else
  {
    v9 = (const char *)v8[23];
  }
  google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v8, v9, 1, (google::protobuf::internal *)"google.protobuf.DescriptorProto.name");
  v10 = *((_QWORD *)this + 27);
  if (*(char *)(v10 + 23) < 0)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11 > 127)
      goto LABEL_25;
  }
  else
  {
    v11 = *(unsigned __int8 *)(v10 + 23);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 + 14 < v11)
  {
LABEL_25:
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 1, v10, a2);
    v13 = *((_DWORD *)this + 8);
    if (!v13)
      goto LABEL_26;
    goto LABEL_14;
  }
  *a2 = 10;
  a2[1] = v11;
  if (*(char *)(v10 + 23) >= 0)
    v12 = (const void *)v10;
  else
    v12 = *(const void **)v10;
  memcpy(a2 + 2, v12, v11);
  a2 += v11 + 2;
LABEL_13:
  v13 = *((_DWORD *)this + 8);
  if (!v13)
    goto LABEL_26;
LABEL_14:
  for (i = 0; i != v13; ++i)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v16 = (google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)this + 24, i);
    *a2 = 18;
    v18 = *((_DWORD *)v16 + 5);
    if (v18 <= 0x7F)
    {
      a2[1] = v18;
      v15 = (unsigned __int8 *)(a2 + 2);
    }
    else
    {
      a2[1] = v18 | 0x80;
      v19 = v18 >> 7;
      if (v18 >> 14)
      {
        v15 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v15 - 1) = v19 | 0x80;
          v20 = v19 >> 7;
          ++v15;
          v21 = v19 >> 14;
          v19 >>= 7;
        }
        while (v21);
        *(v15 - 1) = v20;
      }
      else
      {
        a2[2] = v19;
        v15 = (unsigned __int8 *)(a2 + 3);
      }
    }
    a2 = (char *)google::protobuf::FieldDescriptorProto::_InternalSerialize(v16, (google::protobuf::UnknownFieldSet *)v15, a3, v17);
  }
LABEL_26:
  v22 = *((_DWORD *)this + 14);
  if (v22)
  {
    for (j = 0; j != v22; ++j)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v25 = (google::protobuf::DescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((uint64_t)this + 48, j);
      *a2 = 26;
      v26 = *((_DWORD *)v25 + 5);
      if (v26 <= 0x7F)
      {
        a2[1] = v26;
        v24 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v26 | 0x80;
        v27 = v26 >> 7;
        if (v26 >> 14)
        {
          v24 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v24 - 1) = v27 | 0x80;
            v28 = v27 >> 7;
            ++v24;
            v29 = v27 >> 14;
            v27 >>= 7;
          }
          while (v29);
          *(v24 - 1) = v28;
        }
        else
        {
          a2[2] = v27;
          v24 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::DescriptorProto::_InternalSerialize(v25, v24, a3);
    }
  }
  v30 = *((_DWORD *)this + 20);
  if (v30)
  {
    for (k = 0; k != v30; ++k)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v33 = (google::protobuf::EnumDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::EnumDescriptorProto>::TypeHandler>((uint64_t)this + 72, k);
      *a2 = 34;
      v35 = *((_DWORD *)v33 + 5);
      if (v35 <= 0x7F)
      {
        a2[1] = v35;
        v32 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v35 | 0x80;
        v36 = v35 >> 7;
        if (v35 >> 14)
        {
          v32 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v32 - 1) = v36 | 0x80;
            v37 = v36 >> 7;
            ++v32;
            v38 = v36 >> 14;
            v36 >>= 7;
          }
          while (v38);
          *(v32 - 1) = v37;
        }
        else
        {
          a2[2] = v36;
          v32 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::EnumDescriptorProto::_InternalSerialize(v33, (google::protobuf::UnknownFieldSet *)v32, a3, v34);
    }
  }
  v39 = *((_DWORD *)this + 26);
  if (v39)
  {
    for (m = 0; m != v39; ++m)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v42 = (google::protobuf::DescriptorProto_ExtensionRange *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ExtensionRange>::TypeHandler>((uint64_t)this + 96, m);
      *a2 = 42;
      v44 = *((_DWORD *)v42 + 5);
      if (v44 <= 0x7F)
      {
        a2[1] = v44;
        v41 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v44 | 0x80;
        v45 = v44 >> 7;
        if (v44 >> 14)
        {
          v41 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v41 - 1) = v45 | 0x80;
            v46 = v45 >> 7;
            ++v41;
            v47 = v45 >> 14;
            v45 >>= 7;
          }
          while (v47);
          *(v41 - 1) = v46;
        }
        else
        {
          a2[2] = v45;
          v41 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::DescriptorProto_ExtensionRange::_InternalSerialize(v42, (char *)v41, a3, v43);
    }
  }
  v48 = *((_DWORD *)this + 32);
  if (v48)
  {
    for (n = 0; n != v48; ++n)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v51 = (google::protobuf::FieldDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::FieldDescriptorProto>::TypeHandler>((uint64_t)this + 120, n);
      *a2 = 50;
      v53 = *((_DWORD *)v51 + 5);
      if (v53 <= 0x7F)
      {
        a2[1] = v53;
        v50 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v53 | 0x80;
        v54 = v53 >> 7;
        if (v53 >> 14)
        {
          v50 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v50 - 1) = v54 | 0x80;
            v55 = v54 >> 7;
            ++v50;
            v56 = v54 >> 14;
            v54 >>= 7;
          }
          while (v56);
          *(v50 - 1) = v55;
        }
        else
        {
          a2[2] = v54;
          v50 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::FieldDescriptorProto::_InternalSerialize(v51, (google::protobuf::UnknownFieldSet *)v50, a3, v52);
    }
  }
  if ((v7 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v57 = (google::protobuf::MessageOptions *)*((_QWORD *)this + 28);
      *a2 = 58;
      v58 = *((_DWORD *)v57 + 11);
      if (v58 <= 0x7F)
        goto LABEL_77;
    }
    else
    {
      v57 = (google::protobuf::MessageOptions *)*((_QWORD *)this + 28);
      *a2 = 58;
      v58 = *((_DWORD *)v57 + 11);
      if (v58 <= 0x7F)
      {
LABEL_77:
        a2[1] = v58;
        v59 = (unsigned __int8 *)(a2 + 2);
LABEL_84:
        a2 = (char *)google::protobuf::MessageOptions::_InternalSerialize(v57, (char *)v59, a3);
        goto LABEL_85;
      }
    }
    a2[1] = v58 | 0x80;
    v60 = v58 >> 7;
    if (v58 >> 14)
    {
      v59 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v59 - 1) = v60 | 0x80;
        v61 = v60 >> 7;
        ++v59;
        v62 = v60 >> 14;
        v60 >>= 7;
      }
      while (v62);
      *(v59 - 1) = v61;
    }
    else
    {
      a2[2] = v60;
      v59 = (unsigned __int8 *)(a2 + 3);
    }
    goto LABEL_84;
  }
LABEL_85:
  v63 = *((_DWORD *)this + 38);
  if (v63)
  {
    for (ii = 0; ii != v63; ++ii)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v66 = (google::protobuf::OneofDescriptorProto *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::OneofDescriptorProto>::TypeHandler>((uint64_t)this + 144, ii);
      *a2 = 66;
      v68 = *((_DWORD *)v66 + 5);
      if (v68 <= 0x7F)
      {
        a2[1] = v68;
        v65 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v68 | 0x80;
        v69 = v68 >> 7;
        if (v68 >> 14)
        {
          v65 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v65 - 1) = v69 | 0x80;
            v70 = v69 >> 7;
            ++v65;
            v71 = v69 >> 14;
            v69 >>= 7;
          }
          while (v71);
          *(v65 - 1) = v70;
        }
        else
        {
          a2[2] = v69;
          v65 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::OneofDescriptorProto::_InternalSerialize(v66, (google::protobuf::UnknownFieldSet *)v65, a3, v67);
    }
  }
  v72 = *((_DWORD *)this + 44);
  if (v72)
  {
    for (jj = 0; jj != v72; ++jj)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v75 = (google::protobuf::DescriptorProto_ReservedRange *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto_ReservedRange>::TypeHandler>((uint64_t)this + 168, jj);
      *a2 = 74;
      v77 = *((_DWORD *)v75 + 5);
      if (v77 <= 0x7F)
      {
        a2[1] = v77;
        v74 = (unsigned __int8 *)(a2 + 2);
      }
      else
      {
        a2[1] = v77 | 0x80;
        v78 = v77 >> 7;
        if (v77 >> 14)
        {
          v74 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v74 - 1) = v78 | 0x80;
            v79 = v78 >> 7;
            ++v74;
            v80 = v78 >> 14;
            v78 >>= 7;
          }
          while (v80);
          *(v74 - 1) = v79;
        }
        else
        {
          a2[2] = v78;
          v74 = (unsigned __int8 *)(a2 + 3);
        }
      }
      a2 = (char *)google::protobuf::DescriptorProto_ReservedRange::_InternalSerialize(v75, (char *)v74, a3, v76);
    }
  }
  v81 = *((_DWORD *)this + 50);
  if (v81 >= 1)
  {
    v82 = 0;
    while (1)
    {
      v83 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 192, v82);
      v84 = v83;
      v85 = *(_DWORD *)(v83 + 8);
      if (*(char *)(v83 + 23) >= 0)
      {
        v86 = *(unsigned __int8 *)(v83 + 23);
      }
      else
      {
        v83 = *(_QWORD *)v83;
        v86 = v85;
      }
      google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v83, (const char *)v86, 1, (google::protobuf::internal *)"google.protobuf.DescriptorProto.reserved_name");
      if ((*(char *)(v84 + 23) & 0x80000000) == 0)
        break;
      v87 = *(_QWORD *)(v84 + 8);
      if (v87 > 127)
      {
LABEL_123:
        a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 10, v84, a2);
        if (v81 == ++v82)
          goto LABEL_124;
      }
      else
      {
LABEL_117:
        if (*(_QWORD *)a3 - (_QWORD)a2 + 14 < v87)
          goto LABEL_123;
        *a2 = 82;
        a2[1] = v87;
        if (*(char *)(v84 + 23) >= 0)
          v88 = (const void *)v84;
        else
          v88 = *(const void **)v84;
        memcpy(a2 + 2, v88, v87);
        a2 += v87 + 2;
        if (v81 == ++v82)
          goto LABEL_124;
      }
    }
    v87 = *(unsigned __int8 *)(v84 + 23);
    goto LABEL_117;
  }
LABEL_124:
  v89 = *((_QWORD *)this + 1);
  if ((v89 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v89 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

char *google::protobuf::DescriptorProto::ByteSizeLong(google::protobuf::DescriptorProto *this)
{
  uint64_t v2;
  uint64_t v3;
  google::protobuf::FieldDescriptorProto **v4;
  uint64_t v5;
  google::protobuf::FieldDescriptorProto *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::DescriptorProto **v11;
  uint64_t v12;
  google::protobuf::DescriptorProto *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::EnumDescriptorProto **v18;
  uint64_t v19;
  google::protobuf::EnumDescriptorProto *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  google::protobuf::DescriptorProto_ExtensionRange **v25;
  uint64_t v26;
  google::protobuf::DescriptorProto_ExtensionRange *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  google::protobuf::FieldDescriptorProto **v32;
  uint64_t v33;
  google::protobuf::FieldDescriptorProto *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  google::protobuf::OneofDescriptorProto **v39;
  uint64_t v40;
  google::protobuf::OneofDescriptorProto *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const google::protobuf::UnknownFieldSet *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (google::protobuf::FieldDescriptorProto **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = google::protobuf::FieldDescriptorProto::ByteSizeLong(v6);
      v2 += (uint64_t)&v7[(9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6];
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (google::protobuf::DescriptorProto **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = google::protobuf::DescriptorProto::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((int *)this + 20);
  v16 = v9 + v15;
  v17 = *((_QWORD *)this + 11);
  if (v17)
    v18 = (google::protobuf::EnumDescriptorProto **)(v17 + 8);
  else
    v18 = 0;
  if ((_DWORD)v15)
  {
    v19 = 8 * v15;
    do
    {
      v20 = *v18++;
      v21 = google::protobuf::EnumDescriptorProto::ByteSizeLong(v20);
      v16 += (uint64_t)&v21[(9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6];
      v19 -= 8;
    }
    while (v19);
  }
  v22 = *((int *)this + 26);
  v23 = v16 + v22;
  v24 = *((_QWORD *)this + 14);
  if (v24)
    v25 = (google::protobuf::DescriptorProto_ExtensionRange **)(v24 + 8);
  else
    v25 = 0;
  if ((_DWORD)v22)
  {
    v26 = 8 * v22;
    do
    {
      v27 = *v25++;
      v28 = google::protobuf::DescriptorProto_ExtensionRange::ByteSizeLong(v27);
      v23 += (uint64_t)&v28[(9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6];
      v26 -= 8;
    }
    while (v26);
  }
  v29 = *((int *)this + 32);
  v30 = v23 + v29;
  v31 = *((_QWORD *)this + 17);
  if (v31)
    v32 = (google::protobuf::FieldDescriptorProto **)(v31 + 8);
  else
    v32 = 0;
  if ((_DWORD)v29)
  {
    v33 = 8 * v29;
    do
    {
      v34 = *v32++;
      v35 = google::protobuf::FieldDescriptorProto::ByteSizeLong(v34);
      v30 += (uint64_t)&v35[(9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6];
      v33 -= 8;
    }
    while (v33);
  }
  v36 = *((int *)this + 38);
  v37 = v30 + v36;
  v38 = *((_QWORD *)this + 20);
  if (v38)
    v39 = (google::protobuf::OneofDescriptorProto **)(v38 + 8);
  else
    v39 = 0;
  if ((_DWORD)v36)
  {
    v40 = 8 * v36;
    do
    {
      v41 = *v39++;
      v42 = google::protobuf::OneofDescriptorProto::ByteSizeLong(v41);
      v37 += (uint64_t)&v42[(9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6];
      v40 -= 8;
    }
    while (v40);
  }
  v43 = *((int *)this + 44);
  v44 = v37 + v43;
  v45 = *((_QWORD *)this + 23);
  if (v45)
    v46 = v45 + 8;
  else
    v46 = 0;
  if ((_DWORD)v43)
  {
    for (i = 8 * v43; i; i -= 8)
    {
      v48 = *(_DWORD **)v46;
      v49 = *(_DWORD *)(*(_QWORD *)v46 + 16);
      if ((v49 & 3) != 0)
      {
        if ((v49 & 1) != 0)
        {
          v51 = v48[6];
          if (v51 < 0)
          {
            v50 = 11;
            if ((v49 & 2) != 0)
            {
LABEL_53:
              v52 = v48[7];
              if (v52 < 0)
                v53 = 11;
              else
                v53 = ((9 * (__clz(v52 | 1) ^ 0x1F) + 73) >> 6) + 1;
              v50 += v53;
            }
          }
          else
          {
            v50 = ((9 * (__clz(v51 | 1) ^ 0x1F) + 73) >> 6) + 1;
            if ((v49 & 2) != 0)
              goto LABEL_53;
          }
        }
        else
        {
          v50 = 0;
          if ((v49 & 2) != 0)
            goto LABEL_53;
        }
      }
      else
      {
        v50 = 0;
      }
      if ((v48[2] & 1) != 0)
        v50 = (uint64_t)google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(v48 + 2), (const google::protobuf::UnknownFieldSet *)v50, v48 + 5);
      else
        v48[5] = v50;
      v44 += v50 + ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6);
      v46 += 8;
    }
  }
  v54 = *((unsigned int *)this + 50);
  v55 = (const google::protobuf::UnknownFieldSet *)(v44 + v54);
  if ((int)v54 >= 1)
  {
    v56 = 0;
    do
    {
      v57 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 192, v56);
      v58 = *(unsigned __int8 *)(v57 + 23);
      if ((v58 & 0x80u) != 0)
        v58 = *(_QWORD *)(v57 + 8);
      v55 = (const google::protobuf::UnknownFieldSet *)((char *)v55 + v58 + ((9 * (__clz(v58 | 1) ^ 0x1F) + 73) >> 6));
      ++v56;
    }
    while ((_DWORD)v54 != v56);
  }
  v59 = *((_DWORD *)this + 4);
  if ((v59 & 3) != 0)
  {
    if ((v59 & 1) != 0)
    {
      v60 = *((_QWORD *)this + 27);
      v61 = *(unsigned __int8 *)(v60 + 23);
      v62 = *(_QWORD *)(v60 + 8);
      if ((v61 & 0x80u) == 0)
        v62 = v61;
      v55 = (const google::protobuf::UnknownFieldSet *)((char *)v55 + v62
                                                                    + ((9 * (__clz(v62 | 1) ^ 0x1F) + 73) >> 6)
                                                                    + 1);
    }
    if ((v59 & 2) != 0)
    {
      v63 = google::protobuf::MessageOptions::ByteSizeLong(*((google::protobuf::MessageOptions **)this + 28));
      v55 = (const google::protobuf::UnknownFieldSet *)&v63[((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6)
                                                          + 1
                                                          + (_QWORD)v55];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::DescriptorProto *)((char *)this + 8), v55, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = (_DWORD)v55;
  return (char *)v55;
}

void google::protobuf::DescriptorProto::MergeFrom(google::protobuf::DescriptorProto *this, const google::protobuf::Message *a2, google::protobuf::Message *a3)
{
  unsigned int *v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 3270);
    v5 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
    if (*(void (***)(google::protobuf::DescriptorProto *__hidden))a2 != &off_24F9884C0)
      goto LABEL_3;
  }
  else if (*(void (***)(google::protobuf::DescriptorProto *__hidden))a2 != &off_24F9884C0)
  {
LABEL_3:
    google::protobuf::internal::ReflectionOps::Merge(a2, this, a3);
    return;
  }
  google::protobuf::DescriptorProto::MergeFrom(this, a2);
}

void sub_22DC69F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_22DC69FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::DescriptorProto::MergeFrom(google::protobuf::DescriptorProto *this, const google::protobuf::DescriptorProto *a2)
{
  uint64_t v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  const google::protobuf::UnknownFieldSet *v9;
  unsigned int *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  google::protobuf::FieldDescriptorProto **v15;
  google::protobuf::FieldDescriptorProto **v16;
  google::protobuf::FieldDescriptorProto *v17;
  google::protobuf::FieldDescriptorProto *v18;
  google::protobuf::FieldDescriptorProto *v19;
  google::protobuf::Arena *v20;
  uint64_t v21;
  google::protobuf::FieldDescriptorProto **v22;
  google::protobuf::FieldDescriptorProto **v23;
  int v24;
  google::protobuf::FieldDescriptorProto *v25;
  google::protobuf::FieldDescriptorProto *v26;
  int v27;
  int *v28;
  unsigned int *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  google::protobuf::EnumDescriptorProto **v35;
  google::protobuf::EnumDescriptorProto **v36;
  google::protobuf::EnumDescriptorProto *v37;
  google::protobuf::EnumDescriptorProto *v38;
  google::protobuf::EnumDescriptorProto *v39;
  google::protobuf::Arena *v40;
  uint64_t v41;
  google::protobuf::EnumDescriptorProto **v42;
  google::protobuf::EnumDescriptorProto **v43;
  int v44;
  google::protobuf::EnumDescriptorProto *v45;
  google::protobuf::EnumDescriptorProto *v46;
  int v47;
  int *v48;
  unsigned int *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  google::protobuf::DescriptorProto_ExtensionRange **v55;
  google::protobuf::DescriptorProto_ExtensionRange **v56;
  google::protobuf::DescriptorProto_ExtensionRange *v57;
  google::protobuf::DescriptorProto_ExtensionRange *v58;
  google::protobuf::DescriptorProto_ExtensionRange *v59;
  google::protobuf::Arena *v60;
  uint64_t v61;
  google::protobuf::DescriptorProto_ExtensionRange **v62;
  google::protobuf::DescriptorProto_ExtensionRange **v63;
  int v64;
  google::protobuf::DescriptorProto_ExtensionRange *v65;
  google::protobuf::DescriptorProto_ExtensionRange *v66;
  int v67;
  int *v68;
  unsigned int *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  google::protobuf::FieldDescriptorProto **v75;
  google::protobuf::FieldDescriptorProto **v76;
  google::protobuf::FieldDescriptorProto *v77;
  google::protobuf::FieldDescriptorProto *v78;
  google::protobuf::FieldDescriptorProto *v79;
  google::protobuf::Arena *v80;
  uint64_t v81;
  google::protobuf::FieldDescriptorProto **v82;
  google::protobuf::FieldDescriptorProto **v83;
  int v84;
  google::protobuf::FieldDescriptorProto *v85;
  google::protobuf::FieldDescriptorProto *v86;
  int v87;
  int *v88;
  unsigned int *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  google::protobuf::OneofDescriptorProto **v95;
  google::protobuf::OneofDescriptorProto **v96;
  google::protobuf::OneofDescriptorProto *v97;
  google::protobuf::OneofDescriptorProto *v98;
  google::protobuf::OneofDescriptorProto *v99;
  google::protobuf::Arena *v100;
  uint64_t v101;
  google::protobuf::OneofDescriptorProto **v102;
  google::protobuf::OneofDescriptorProto **v103;
  int v104;
  google::protobuf::OneofDescriptorProto *v105;
  google::protobuf::OneofDescriptorProto *v106;
  int v107;
  int *v108;
  unsigned int *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  google::protobuf::DescriptorProto_ReservedRange **v115;
  google::protobuf::DescriptorProto_ReservedRange **v116;
  google::protobuf::DescriptorProto_ReservedRange *v117;
  google::protobuf::DescriptorProto_ReservedRange *v118;
  google::protobuf::DescriptorProto_ReservedRange *v119;
  google::protobuf::Arena *v120;
  uint64_t v121;
  google::protobuf::DescriptorProto_ReservedRange **v122;
  google::protobuf::DescriptorProto_ReservedRange **v123;
  int v124;
  google::protobuf::DescriptorProto_ReservedRange *v125;
  google::protobuf::DescriptorProto_ReservedRange *v126;
  int v127;
  int *v128;
  int v129;
  std::string *v130;
  std::string **v131;
  uint64_t v132;
  google::protobuf::Arena *v133;
  std::string *v134;
  google::protobuf::MessageOptions *v135;
  uint64_t v136;
  google::protobuf::Arena *v137;
  const google::protobuf::MessageOptions *v138;
  google::protobuf::UnknownFieldSet *v139;
  unsigned int *v140;
  unsigned int *v141;
  unsigned int *v142;
  unsigned int *v143;
  unsigned int *v144;
  unsigned int *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  std::string v153[2];

  if (a2 != this)
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 1) == 0)
      goto LABEL_3;
LABEL_7:
    v7 = *((_QWORD *)this + 1);
    v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v9 = (const google::protobuf::UnknownFieldSet *)(v8 + 8);
    if ((v7 & 1) != 0)
    {
      google::protobuf::UnknownFieldSet::InternalMergeFrom((google::protobuf::UnknownFieldSet *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)(v8 + 8));
      if (a2 == this)
        goto LABEL_9;
    }
    else
    {
      v139 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>((uint64_t *)this + 1);
      google::protobuf::UnknownFieldSet::InternalMergeFrom(v139, v9);
      if (a2 == this)
        goto LABEL_9;
    }
LABEL_4:
    v5 = *((_DWORD *)a2 + 8);
    if (!v5)
      goto LABEL_21;
    goto LABEL_10;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v153, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/descriptor.pb.cc", 3285);
  v6 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v153, "CHECK failed: (&from) != (this): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v152, v6);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v153[0].__r_.__value_.__l.__data_);
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if (a2 != this)
    goto LABEL_4;
LABEL_9:
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v153, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1787);
  v10 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v153, "CHECK failed: (&other) != (this): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v152, v10);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v153[0].__r_.__value_.__l.__data_);
  v5 = *((_DWORD *)a2 + 8);
  if (!v5)
    goto LABEL_21;
LABEL_10:
  v146 = *((_QWORD *)a2 + 5);
  v140 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::DescriptorProto *)((char *)this + 24), v5);
  v11 = **((_DWORD **)this + 5);
  v12 = *((_DWORD *)this + 8);
  v13 = v11 - v12;
  if (v11 - v12 >= v5)
    v14 = v5;
  else
    v14 = v13;
  if ((int)v14 >= 1)
  {
    v15 = (google::protobuf::FieldDescriptorProto **)v140;
    v16 = (google::protobuf::FieldDescriptorProto **)(v146 + 8);
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *v15++;
      google::protobuf::internal::GenericTypeHandler<google::protobuf::FieldDescriptorProto>::Merge(v17, v19);
      --v14;
    }
    while (v14);
  }
  if (v13 < v5)
  {
    v20 = (google::protobuf::Arena *)*((_QWORD *)this + 3);
    v21 = 2 * v13;
    v22 = (google::protobuf::FieldDescriptorProto **)(v21 * 4 + v146 + 8);
    v23 = (google::protobuf::FieldDescriptorProto **)&v140[v21];
    v24 = v12 + v5 - v11;
    do
    {
      v25 = *v22++;
      v26 = (google::protobuf::FieldDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FieldDescriptorProto>(v20);
      google::protobuf::internal::GenericTypeHandler<google::protobuf::FieldDescriptorProto>::Merge(v25, v26);
      *v23++ = v26;
      --v24;
    }
    while (v24);
  }
  v27 = *((_DWORD *)this + 8) + v5;
  *((_DWORD *)this + 8) = v27;
  v28 = (int *)*((_QWORD *)this + 5);
  if (*v28 < v27)
    *v28 = v27;
LABEL_21:
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<google::protobuf::DescriptorProto>::TypeHandler>((char *)this + 48, (char *)a2 + 48);
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v153, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1787);
    v29 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v153, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v152, v29);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v153[0].__r_.__value_.__l.__data_);
  }
  v30 = *((_DWORD *)a2 + 20);
  if (v30)
  {
    v147 = *((_QWORD *)a2 + 11);
    v141 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::DescriptorProto *)((char *)this + 72), v30);
    v31 = **((_DWORD **)this + 11);
    v32 = *((_DWORD *)this + 20);
    v33 = v31 - v32;
    if (v31 - v32 >= v30)
      v34 = v30;
    else
      v34 = v33;
    if ((int)v34 >= 1)
    {
      v35 = (google::protobuf::EnumDescriptorProto **)v141;
      v36 = (google::protobuf::EnumDescriptorProto **)(v147 + 8);
      do
      {
        v38 = *v36++;
        v37 = v38;
        v39 = *v35++;
        google::protobuf::internal::GenericTypeHandler<google::protobuf::EnumDescriptorProto>::Merge(v37, v39);
        --v34;
      }
      while (v34);
    }
    if (v33 < v30)
    {
      v40 = (google::protobuf::Arena *)*((_QWORD *)this + 9);
      v41 = 2 * v33;
      v42 = (google::protobuf::EnumDescriptorProto **)(v41 * 4 + v147 + 8);
      v43 = (google::protobuf::EnumDescriptorProto **)&v141[v41];
      v44 = v32 + v30 - v31;
      do
      {
        v45 = *v42++;
        v46 = (google::protobuf::EnumDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::EnumDescriptorProto>(v40);
        google::protobuf::internal::GenericTypeHandler<google::protobuf::EnumDescriptorProto>::Merge(v45, v46);
        *v43++ = v46;
        --v44;
      }
      while (v44);
    }
    v47 = *((_DWORD *)this + 20) + v30;
    *((_DWORD *)this + 20) = v47;
    v48 = (int *)*((_QWORD *)this + 11);
    if (*v48 < v47)
      *v48 = v47;
  }
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v153, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1787);
    v49 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v153, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v152, v49);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v153[0].__r_.__value_.__l.__data_);
  }
  v50 = *((_DWORD *)a2 + 26);
  if (v50)
  {
    v148 = *((_QWORD *)a2 + 14);
    v142 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::DescriptorProto *)((char *)this + 96), v50);
    v51 = **((_DWORD **)this + 14);
    v52 = *((_DWORD *)this + 26);
    v53 = v51 - v52;
    if (v51 - v52 >= v50)
      v54 = v50;
    else
      v54 = v53;
    if ((int)v54 >= 1)
    {
      v55 = (google::protobuf::DescriptorProto_ExtensionRange **)v142;
      v56 = (google::protobuf::DescriptorProto_ExtensionRange **)(v148 + 8);
      do
      {
        v58 = *v56++;
        v57 = v58;
        v59 = *v55++;
        google::protobuf::internal::GenericTypeHandler<google::protobuf::DescriptorProto_ExtensionRange>::Merge(v57, v59);
        --v54;
      }
      while (v54);
    }
    if (v53 < v50)
    {
      v60 = (google::protobuf::Arena *)*((_QWORD *)this + 12);
      v61 = 2 * v53;
      v62 = (google::protobuf::DescriptorProto_ExtensionRange **)(v61 * 4 + v148 + 8);
      v63 = (google::protobuf::DescriptorProto_ExtensionRange **)&v142[v61];
      v64 = v52 + v50 - v51;
      do
      {
        v65 = *v62++;
        v66 = (google::protobuf::DescriptorProto_ExtensionRange *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto_ExtensionRange>(v60);
        google::protobuf::internal::GenericTypeHandler<google::protobuf::DescriptorProto_ExtensionRange>::Merge(v65, v66);
        *v63++ = v66;
        --v64;
      }
      while (v64);
    }
    v67 = *((_DWORD *)this + 26) + v50;
    *((_DWORD *)this + 26) = v67;
    v68 = (int *)*((_QWORD *)this + 14);
    if (*v68 < v67)
      *v68 = v67;
  }
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v153, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1787);
    v69 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v153, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v152, v69);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v153[0].__r_.__value_.__l.__data_);
  }
  v70 = *((_DWORD *)a2 + 32);
  if (v70)
  {
    v149 = *((_QWORD *)a2 + 17);
    v143 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::DescriptorProto *)((char *)this + 120), v70);
    v71 = **((_DWORD **)this + 17);
    v72 = *((_DWORD *)this + 32);
    v73 = v71 - v72;
    if (v71 - v72 >= v70)
      v74 = v70;
    else
      v74 = v73;
    if ((int)v74 >= 1)
    {
      v75 = (google::protobuf::FieldDescriptorProto **)v143;
      v76 = (google::protobuf::FieldDescriptorProto **)(v149 + 8);
      do
      {
        v78 = *v76++;
        v77 = v78;
        v79 = *v75++;
        google::protobuf::internal::GenericTypeHandler<google::protobuf::FieldDescriptorProto>::Merge(v77, v79);
        --v74;
      }
      while (v74);
    }
    if (v73 < v70)
    {
      v80 = (google::protobuf::Arena *)*((_QWORD *)this + 15);
      v81 = 2 * v73;
      v82 = (google::protobuf::FieldDescriptorProto **)(v81 * 4 + v149 + 8);
      v83 = (google::protobuf::FieldDescriptorProto **)&v143[v81];
      v84 = v72 + v70 - v71;
      do
      {
        v85 = *v82++;
        v86 = (google::protobuf::FieldDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::FieldDescriptorProto>(v80);
        google::protobuf::internal::GenericTypeHandler<google::protobuf::FieldDescriptorProto>::Merge(v85, v86);
        *v83++ = v86;
        --v84;
      }
      while (v84);
    }
    v87 = *((_DWORD *)this + 32) + v70;
    *((_DWORD *)this + 32) = v87;
    v88 = (int *)*((_QWORD *)this + 17);
    if (*v88 < v87)
      *v88 = v87;
  }
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v153, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1787);
    v89 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v153, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v152, v89);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v153[0].__r_.__value_.__l.__data_);
  }
  v90 = *((_DWORD *)a2 + 38);
  if (v90)
  {
    v150 = *((_QWORD *)a2 + 20);
    v144 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::DescriptorProto *)((char *)this + 144), v90);
    v91 = **((_DWORD **)this + 20);
    v92 = *((_DWORD *)this + 38);
    v93 = v91 - v92;
    if (v91 - v92 >= v90)
      v94 = v90;
    else
      v94 = v93;
    if ((int)v94 >= 1)
    {
      v95 = (google::protobuf::OneofDescriptorProto **)v144;
      v96 = (google::protobuf::OneofDescriptorProto **)(v150 + 8);
      do
      {
        v98 = *v96++;
        v97 = v98;
        v99 = *v95++;
        google::protobuf::internal::GenericTypeHandler<google::protobuf::OneofDescriptorProto>::Merge(v97, v99);
        --v94;
      }
      while (v94);
    }
    if (v93 < v90)
    {
      v100 = (google::protobuf::Arena *)*((_QWORD *)this + 18);
      v101 = 2 * v93;
      v102 = (google::protobuf::OneofDescriptorProto **)(v101 * 4 + v150 + 8);
      v103 = (google::protobuf::OneofDescriptorProto **)&v144[v101];
      v104 = v92 + v90 - v91;
      do
      {
        v105 = *v102++;
        v106 = (google::protobuf::OneofDescriptorProto *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::OneofDescriptorProto>(v100);
        google::protobuf::internal::GenericTypeHandler<google::protobuf::OneofDescriptorProto>::Merge(v105, v106);
        *v103++ = v106;
        --v104;
      }
      while (v104);
    }
    v107 = *((_DWORD *)this + 38) + v90;
    *((_DWORD *)this + 38) = v107;
    v108 = (int *)*((_QWORD *)this + 20);
    if (*v108 < v107)
      *v108 = v107;
  }
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v153, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ANECompiler/ext/or-tools/dependencies/sources/protobuf-v3.12.2/src/google/protobuf/repeated_field.h", 1787);
    v109 = (unsigned int *)google::protobuf::internal::LogMessage::operator<<(v153, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v152, v109);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v153[0].__r_.__value_.__l.__data_);
  }
  v110 = *((_DWORD *)a2 + 44);
  if (v110)
  {
    v151 = *((_QWORD *)a2 + 23);
    v145 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::DescriptorProto *)((char *)this + 168), v110);
    v111 = **((_DWORD **)this + 23);
    v112 = *((_DWORD *)this + 44);
    v113 = v111 - v112;
    if (v111 - v112 >= v110)
      v114 = v110;
    else
      v114 = v113;
    if ((int)v114 >= 1)
    {
      v115 = (google::protobuf::DescriptorProto_ReservedRange **)v145;
      v116 = (google::protobuf::DescriptorProto_ReservedRange **)(v151 + 8);
      do
      {
        v118 = *v116++;
        v117 = v118;
        v119 = *v115++;
        google::protobuf::internal::GenericTypeHandler<google::protobuf::DescriptorProto_ReservedRange>::Merge(v117, v119);
        --v114;
      }
      while (v114);
    }
    if (v113 < v110)
    {
      v120 = (google::protobuf::Arena *)*((_QWORD *)this + 21);
      v121 = 2 * v113;
      v122 = (google::protobuf::DescriptorProto_ReservedRange **)(v121 * 4 + v151 + 8);
      v123 = (google::protobuf::DescriptorProto_ReservedRange **)&v145[v121];
      v124 = v112 + v110 - v111;
      do
      {
        v125 = *v122++;
        v126 = (google::protobuf::DescriptorProto_ReservedRange *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::DescriptorProto_ReservedRange>(v120);
        google::protobuf::internal::GenericTypeHandler<google::protobuf::DescriptorProto_ReservedRange>::Merge(v125, v126);
        *v123++ = v126;
        --v124;
      }
      while (v124);
    }
    v127 = *((_DWORD *)this + 44) + v110;
    *((_DWORD *)this + 44) = v127;
    v128 = (int *)*((_QWORD *)this + 23);
    if (*v128 < v127)
      *v128 = v127;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 192, (uint64_t)a2 + 192);
  v129 = *((_DWORD *)a2 + 4);
  if ((v129 & 3) != 0)
  {
    if ((v129 & 1) == 0)
      goto LABEL_96;
    v130 = (std::string *)*((_QWORD *)a2 + 27);
    *((_DWORD *)this + 4) |= 1u;
    v131 = (std::string **)((char *)this + 216);
    v132 = *((_QWORD *)this + 1);
    v133 = (google::protobuf::Arena *)(v132 & 0xFFFFFFFFFFFFFFFELL);
    if ((v132 & 1) != 0)
    {
      v133 = *(google::protobuf::Arena **)v133;
      v134 = *v131;
      if (*v131 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_95;
    }
    else
    {
      v134 = *v131;
      if (*v131 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_95:
        std::string::operator=(v134, v130);
LABEL_96:
        if ((v129 & 2) == 0)
          return;
        goto LABEL_97;
      }
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v131, v133, (__int128 *)v130);
    if ((v129 & 2) == 0)
      return;
LABEL_97:
    *((_DWORD *)this + 4) |= 2u;
    v135 = (google::protobuf::MessageOptions *)*((_QWORD *)this + 28);
    if (!v135)
    {
      v136 = *((_QWORD *)this + 1);
      v137 = (google::protobuf::Arena *)(v136 & 0xFFFFFFFFFFFFFFFELL);
      if ((v136 & 1) != 0)
        v137 = *(google::protobuf::Arena **)v137;
      v135 = (google::protobuf::MessageOptions *)google::protobuf::Arena::CreateMaybeMessage<google::protobuf::MessageOptions>(v137);
      *((_QWORD *)this + 28) = v135;
    }
    if (*((_QWORD *)a2 + 28))
      v138 = (const google::protobuf::MessageOptions *)*((_QWORD *)a2 + 28);
    else
      v138 = (const google::protobuf::MessageOptions *)&google::protobuf::_MessageOptions_default_instance_;
    google::protobuf::MessageOptions::MergeFrom(v135, v138);
  }
}

