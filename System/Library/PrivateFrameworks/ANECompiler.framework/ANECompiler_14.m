void sub_206FAD210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t CpTransposeGraph::DebugPrint@<X0>(CpTransposeGraph *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *i;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t *v10;
  _QWORD *OutputTensor;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t *v19;
  std::string *v20;
  std::string::size_type v21;
  _QWORD *v22;
  _QWORD *j;
  std::string *v24;
  __int128 v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::string v31;
  void *__p[2];
  int64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  _QWORD *v36;
  _QWORD v37[2];
  uint64_t v38;
  _QWORD v39[10];
  char v40;
  uint64_t v41;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"livein: ", 8);
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)&v34, (uint64_t)this + 376);
  for (i = v36; i; i = (_QWORD *)*i)
  {
    CpTransposeGraph::DebugPrintNode(this, i[2], __p);
    if (v33 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if (v33 >= 0)
      v6 = HIBYTE(v33);
    else
      v6 = (uint64_t)__p[1];
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
    if (SHIBYTE(v33) < 0)
      operator delete(__p[0]);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v34);
  LOBYTE(v34) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)&v34, 1);
  CpGraph::GetLayers((CpGraph **)this, &v34);
  v8 = (unint64_t **)v34;
  v9 = v35;
  if (v34 != v35)
  {
    do
    {
      v10 = *v8;
      __p[0] = *v8;
      if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)this + 19, (unint64_t *)__p))
      {
        OutputTensor = CpGraph::GetOutputTensor(this, v10);
        CpGraph::GetInputTensors(this, v10, (uint64_t)__p);
        *(_QWORD *)((char *)&v39[2] + *(_QWORD *)(v38 - 24)) = 40;
        CpTransposeGraph::DebugPrintNode(this, (unint64_t)OutputTensor, &v31);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v31;
        else
          v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        else
          size = v31.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v12, size);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)" = ", 3);
        CpTransposeGraph::DebugPrintNode(this, (unint64_t)v10, &v31);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v31;
        else
          v15 = (std::string *)v31.__r_.__value_.__r.__words[0];
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        else
          v16 = v31.__r_.__value_.__l.__size_;
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"  ", 2);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        v18 = (unint64_t *)__p[0];
        v19 = (unint64_t *)__p[1];
        while (v18 != v19)
        {
          CpTransposeGraph::DebugPrintNode(this, *v18, &v31);
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v31;
          else
            v20 = (std::string *)v31.__r_.__value_.__r.__words[0];
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          else
            v21 = v31.__r_.__value_.__l.__size_;
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v20, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" ", 1);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v31.__r_.__value_.__l.__data_);
          ++v18;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"\n", 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v8;
    }
    while (v8 != (unint64_t **)v9);
    v8 = (unint64_t **)v34;
  }
  if (v8)
  {
    v35 = (unint64_t *)v8;
    operator delete(v8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"liveout: ", 9);
  std::unordered_set<unsigned long long>::unordered_set((uint64_t)&v34, (uint64_t)this + 416);
  for (j = v36; j; j = (_QWORD *)*j)
  {
    std::to_string(&v31, j[2]);
    v24 = std::string::insert(&v31, 0, "T", 1uLL);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v33 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if (v33 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    if (v33 >= 0)
      v27 = HIBYTE(v33);
    else
      v27 = (uint64_t)__p[1];
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
    if (SHIBYTE(v33) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v34);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v39, a2);
  v37[0] = *MEMORY[0x24BEDB7F0];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v38 = v29;
  v39[0] = MEMORY[0x24BEDB848] + 16;
  if (v40 < 0)
    operator delete((void *)v39[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v41);
}

void sub_206FAD668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t CpTransposeGraph::DebugPrint@<X0>(CpTransposeGraph *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *__p[2];
  unsigned __int8 v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[10];
  char v21;
  uint64_t v22;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"   ", 3);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n=====================================================\n", 55);
  CpTransposeGraph::DebugPrint(a1, __p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n=====================================================\n", 55);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20, a3);
  v18[0] = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v19 = v14;
  v20[0] = MEMORY[0x24BEDB848] + 16;
  if (v21 < 0)
    operator delete((void *)v20[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v22);
}

void sub_206FAD894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CpTransposeGraph::CreateDotStringRootTensorNode(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *RootTensorConstraint;
  _BYTE *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  uint64_t **v29;
  unint64_t ***v30;
  unint64_t **v31;
  unint64_t ***v32;
  uint64_t **v33;
  char *v34;
  unint64_t **v35;
  unint64_t **v36;
  unint64_t v37;
  std::string *v38;
  __int128 v39;
  _QWORD *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type v46;
  _QWORD *v47;
  std::string *v48;
  std::string::size_type v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  std::string *v53;
  std::string::size_type v54;
  _QWORD *v55;
  char *v56;
  char *i;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  std::string *v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  std::string::size_type v86;
  _QWORD *v87;
  std::string::size_type v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  void *__p;
  char v98;
  void *v99;
  char v100;
  uint64_t v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  std::string v106;
  std::string v107;
  uint64_t v108[5];
  std::string v109;
  std::string v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;

  v113 = 0;
  v114 = a2;
  v111 = 0;
  v112 = 0;
  v5 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v110, "\n\t\tstyle=filled");
  std::string::append(v5, "\n\t\tfontname=\"Arial Unicode MS\"\n\t\tfontsize=11\n\t\tmargin=.2", 0x38uLL);
  std::string::append(&v110, "\n\t\tfillcolor=white\n\t\tgradientangle=270", 0x26uLL);
  std::string::basic_string[abi:ne180100]<0>(&v109, &byte_207AF6795);
  CpGraph::GetTensorName((uint64_t)this, v114, &v109);
  CpTransposeGraph::GetTensorDimensions(this, v114, (uint64_t)v108);
  std::string::basic_string[abi:ne180100]<0>(&v107, "[N");
  std::to_string(&v96, v108[0]);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v96;
  else
    v6 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    size = v96.__r_.__value_.__l.__size_;
  std::string::append(&v107, (const std::string::value_type *)v6, size);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  std::to_string(&v106, v108[4]);
  v8 = std::string::insert(&v106, 0, "D", 1uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v96;
  else
    v10 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v11 = v96.__r_.__value_.__l.__size_;
  std::string::append(&v107, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  std::to_string(&v106, v108[1]);
  v12 = std::string::insert(&v106, 0, "C", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v96;
  else
    v14 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v15 = v96.__r_.__value_.__l.__size_;
  std::string::append(&v107, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  std::to_string(&v106, v108[2]);
  v16 = std::string::insert(&v106, 0, "H", 1uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v96;
  else
    v18 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v19 = v96.__r_.__value_.__l.__size_;
  std::string::append(&v107, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  std::to_string(&v106, v108[3]);
  v20 = std::string::insert(&v106, 0, "W", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v96;
  else
    v22 = (std::string *)v96.__r_.__value_.__r.__words[0];
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v23 = v96.__r_.__value_.__l.__size_;
  std::string::append(&v107, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  std::string::append(&v107, "]", 1uLL);
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(&v96, "Dims", (__int128 *)&v107);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v111, (__int128 *)&v96);
  if (v98 < 0)
    operator delete(__p);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  RootTensorConstraint = CpTransposeGraph::GetRootTensorConstraint(this, v114);
  v25 = RootTensorConstraint;
  if (*((char *)RootTensorConstraint + 31) < 0)
    std::string::__init_copy_ctor_external(&v106, (const std::string::value_type *)RootTensorConstraint[1], RootTensorConstraint[2]);
  else
    v106 = *(std::string *)(RootTensorConstraint + 1);
  v26 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = v109.__r_.__value_.__l.__size_;
  std::string::replace(&v106, 0, v26 + 1, &byte_207AF6795, 0);
  v27 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v106;
  else
    v28 = (std::string *)v106.__r_.__value_.__r.__words[0];
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = v106.__r_.__value_.__l.__size_;
  for (; v27; --v27)
  {
    if (v28->__r_.__value_.__s.__data_[0] == 58)
      v28->__r_.__value_.__s.__data_[0] = 44;
    v28 = (std::string *)((char *)v28 + 1);
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(&v96, "Constraints", (__int128 *)&v106);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v111, (__int128 *)&v96);
  if (v98 < 0)
    operator delete(__p);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  v29 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)this + 8, (unint64_t **)&v105);
  std::string::basic_string[abi:ne180100]<0>(&v105, &byte_207AF6795);
  v30 = (unint64_t ***)(v29 + 3);
  if (!v29)
    v30 = (unint64_t ***)((char *)this + 104);
  v32 = v30;
  v31 = *v30;
  if ((char *)v32[1] - (char *)v31 == 8)
  {
    CpGraph::GetLayerName((uint64_t)this, **v31, &v105);
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(&v96, "Def", (__int128 *)&v105);
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v111, (__int128 *)&v96);
    if (v98 < 0)
      operator delete(__p);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
  }
  v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
  v33 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)this + 3, (unint64_t **)&v104);
  std::string::basic_string[abi:ne180100]<0>(&v104, &byte_207AF6795);
  v34 = (char *)(v33 + 3);
  if (!v33)
    v34 = (char *)this + 104;
  v35 = *(unint64_t ***)v34;
  v36 = (unint64_t **)*((_QWORD *)v34 + 1);
  if (*(unint64_t ***)v34 != v36)
  {
    v37 = 1;
    do
    {
      CpGraph::GetLayerName((uint64_t)this, **v35, &v104);
      std::to_string(&v102, v37);
      v38 = std::string::insert(&v102, 0, "Use ", 4uLL);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string,std::string&,0>((uint64_t)&v96, (__int128 *)&v103, (__int128 *)&v104);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v111, (__int128 *)&v96);
      if (v98 < 0)
        operator delete(__p);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      ++v35;
      ++v37;
    }
    while (v35 != v36);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v96);
  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)"\tsubgraph ", 10);
  std::to_string(&v95, v114);
  v41 = std::string::insert(&v95, 0, "cluster_", 8uLL);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = std::string::append(&v102, " {", 2uLL);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v103.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = &v103;
  else
    v45 = (std::string *)v103.__r_.__value_.__r.__words[0];
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  else
    v46 = v103.__r_.__value_.__l.__size_;
  v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v45, v46);
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v110;
  else
    v48 = (std::string *)v110.__r_.__value_.__r.__words[0];
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
  else
    v49 = v110.__r_.__value_.__l.__size_;
  v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
  v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n\t\tlabel=<", 10);
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n\t\t\t<font point-size='13' face='Arial Rounded MT Bold'>", 55);
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v109;
  else
    v53 = (std::string *)v109.__r_.__value_.__r.__words[0];
  if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
  else
    v54 = v109.__r_.__value_.__l.__size_;
  v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"</font><br/><br align='left'/>", 30);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  v56 = v111;
  for (i = v112; v56 != i; v56 += 48)
  {
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)"\n\t\t\t<font face='Arial Rounded MT Bold'>", 39);
    v59 = v56[23];
    if (v59 >= 0)
      v60 = (uint64_t)v56;
    else
      v60 = *(_QWORD *)v56;
    if (v59 >= 0)
      v61 = v56[23];
    else
      v61 = *((_QWORD *)v56 + 1);
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)":</font> ", 9);
    v64 = v56[47];
    if (v64 >= 0)
      v65 = (uint64_t)(v56 + 24);
    else
      v65 = *((_QWORD *)v56 + 3);
    if (v64 >= 0)
      v66 = v56[47];
    else
      v66 = *((_QWORD *)v56 + 4);
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"<br align='left'/>", 18);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)"\n\t\t>\n", 5);
  std::string::basic_string[abi:ne180100]<0>(&v103, "<");
  std::string::basic_string[abi:ne180100]<0>(&v102, "white");
  if (*v25)
  {
    std::string::append(&v103, "Original", 8uLL);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    {
      v102.__r_.__value_.__l.__size_ = 3;
      v68 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v102.__r_.__value_.__s + 23) = 3;
      v68 = &v102;
    }
    LODWORD(v68->__r_.__value_.__l.__data_) = 6579570;
  }
  else
  {
    std::string::append(&v103, "Original | Transposed", 0x15uLL);
  }
  std::string::append(&v103, ">", 1uLL);
  std::to_string(&v89, v114);
  v69 = std::string::insert(&v89, 0, "\t\t\"node_", 8uLL);
  v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  v90.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  v71 = std::string::append(&v90, "\" [label=", 9uLL);
  v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = &v103;
  else
    v73 = (std::string *)v103.__r_.__value_.__r.__words[0];
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v74 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  else
    v74 = v103.__r_.__value_.__l.__size_;
  v75 = std::string::append(&v91, (const std::string::value_type *)v73, v74);
  v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  v77 = std::string::append(&v92, ",shape=box,style=filled,fillcolor=", 0x22uLL);
  v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v79 = &v102;
  else
    v79 = (std::string *)v102.__r_.__value_.__r.__words[0];
  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
  else
    v80 = v102.__r_.__value_.__l.__size_;
  v81 = std::string::append(&v93, (const std::string::value_type *)v79, v80);
  v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v94.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  v83 = std::string::append(&v94, ",fontname=\"Consolas, monospace, bold\",fontsize=11]", 0x32uLL);
  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v95.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v85 = &v95;
  else
    v85 = (std::string *)v95.__r_.__value_.__r.__words[0];
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  else
    v86 = v95.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)v85, v86);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96.__r_.__value_.__r.__words[2], (uint64_t)";\n",
          2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"\t}\n", 3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p, a3);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  v96.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
  v88 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + *(_QWORD *)(v96.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v96.__r_.__value_.__r.__words[2] = v88;
  __p = (void *)(MEMORY[0x24BEDB848] + 16);
  if (v100 < 0)
    operator delete(v99);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](&v101);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v110.__r_.__value_.__l.__data_);
  v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
}

void sub_206FAE444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 201) < 0)
    operator delete(*(void **)(v37 - 224));
  if (*(char *)(v37 - 137) < 0)
    operator delete(*(void **)(v37 - 160));
  if (*(char *)(v37 - 113) < 0)
    operator delete(*(void **)(v37 - 136));
  a37 = v37 - 112;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  int64x2_t v24;
  std::pair<std::string, std::string> *v25;
  std::__split_buffer<std::pair<std::string, std::string>> v26;

  v6 = (unint64_t)a1[2];
  v4 = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  v5 = v6;
  v7 = *((_QWORD *)v4 - 1);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v26.__end_cap_.__value_ = v4;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Group>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = *a1;
    v19 = (unint64_t)a1[1];
    if ((char *)v19 == *a1)
    {
      v24 = vdupq_n_s64(v19);
      v21 = &v15[48 * v11];
    }
    else
    {
      v21 = &v15[48 * v11];
      do
      {
        v22 = *(_OWORD *)(v19 - 48);
        *((_QWORD *)v21 - 4) = *(_QWORD *)(v19 - 32);
        *((_OWORD *)v21 - 3) = v22;
        *(_QWORD *)(v19 - 40) = 0;
        *(_QWORD *)(v19 - 32) = 0;
        *(_QWORD *)(v19 - 48) = 0;
        v23 = *(_OWORD *)(v19 - 24);
        *((_QWORD *)v21 - 1) = *(_QWORD *)(v19 - 8);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 48;
        *(_QWORD *)(v19 - 16) = 0;
        *(_QWORD *)(v19 - 8) = 0;
        *(_QWORD *)(v19 - 24) = 0;
        v19 -= 48;
      }
      while ((char *)v19 != v20);
      v24 = *(int64x2_t *)a1;
    }
    v10 = v16 + 48;
    *a1 = v21;
    a1[1] = v16 + 48;
    *(int64x2_t *)&v26.__begin_ = v24;
    v25 = (std::pair<std::string, std::string> *)a1[2];
    a1[2] = &v15[48 * v14];
    v26.__end_cap_.__value_ = v25;
    v26.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v24.i64[0];
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v26);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
}

void CpTransposeGraph::CreateDotStringLayerNode(CpTransposeGraph *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v5;
  _QWORD *LayerTruthTable;
  _QWORD *v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  uint64_t **v11;
  char *v12;
  unint64_t **v13;
  unint64_t **v14;
  unint64_t v15;
  std::string *v16;
  __int128 v17;
  uint64_t **v18;
  unint64_t ***v19;
  unint64_t **v20;
  unint64_t ***v21;
  _QWORD *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  std::string *v30;
  std::string::size_type v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string *v35;
  std::string::size_type v36;
  _QWORD *v37;
  char *v38;
  char *i;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  const char *v50;
  size_t v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  const char *v58;
  size_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  const char *v66;
  size_t v67;
  _QWORD *v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  const char *v74;
  size_t v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  unsigned int v80;
  const char *v81;
  size_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  const char *v89;
  size_t v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  const char *v97;
  size_t v98;
  _QWORD *v99;
  _QWORD *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  const char *v105;
  size_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  const char *v113;
  size_t v114;
  _QWORD *v115;
  _QWORD *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  const char *v121;
  size_t v122;
  _QWORD *v123;
  _QWORD *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  const char *v129;
  size_t v130;
  _QWORD *v131;
  _QWORD *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  const char *v137;
  size_t v138;
  _QWORD *v139;
  _QWORD *v140;
  char *v141;
  char *v142;
  int v143;
  char *v144;
  uint64_t v145;
  std::string *v146;
  __int128 v147;
  std::string *v148;
  __int128 v149;
  void **v150;
  std::string::size_type v151;
  std::string *v152;
  __int128 v153;
  std::string *v154;
  __int128 v155;
  std::string *v156;
  std::string::size_type v157;
  _QWORD *v158;
  void *v159;
  void *v160;
  uint64_t v161;
  void *v162;
  void *v163[2];
  unsigned __int8 v164;
  std::string v165;
  std::string v166;
  std::string v167;
  void *v168[2];
  int64_t v169;
  _QWORD v170[10];
  char v171;
  uint64_t v172;
  std::string v173;
  std::string v174;
  void *v175[2];
  uint64_t v176;
  void *__p;
  char v178;
  void *v179;
  char v180;
  uint64_t v181;
  std::string v182;
  std::string v183;
  std::string v184;
  std::string v185;
  std::string v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;

  v189 = 0;
  v190 = a2;
  v187 = 0;
  v188 = 0;
  v5 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v186, "style=\"rounded,filled\"");
  std::string::append(v5, "\n\t\tfontname=\"Arial Unicode MS\"\n\t\tfontsize=11\n\t\tfontcolor=\"#222222\"\n\t\tpad=4", 0x4AuLL);
  std::string::append(&v186, "\n\t\tbgcolor=\"#EEEEEE\"\n\t", 0x16uLL);
  std::string::basic_string[abi:ne180100]<0>(&v185, &byte_207AF6795);
  CpGraph::GetLayerName((uint64_t)this, v190, &v185);
  LayerTruthTable = CpTransposeGraph::GetLayerTruthTable(this, v190);
  v7 = LayerTruthTable;
  if (*((char *)LayerTruthTable + 47) < 0)
    std::string::__init_copy_ctor_external(&v184, (const std::string::value_type *)LayerTruthTable[3], LayerTruthTable[4]);
  else
    v184 = *(std::string *)((_BYTE *)LayerTruthTable + 1);
  size = HIBYTE(v185.__r_.__value_.__r.__words[2]);
  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v185.__r_.__value_.__l.__size_;
  std::string::replace(&v184, 0, size + 1, &byte_207AF6795, 0);
  v9 = HIBYTE(v184.__r_.__value_.__r.__words[2]);
  if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v184;
  else
    v10 = (std::string *)v184.__r_.__value_.__r.__words[0];
  if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = v184.__r_.__value_.__l.__size_;
  for (; v9; --v9)
  {
    if (v10->__r_.__value_.__s.__data_[0] == 58)
      v10->__r_.__value_.__s.__data_[0] = 44;
    v10 = (std::string *)((char *)v10 + 1);
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(v175, "Constraints", (__int128 *)&v184);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v187, (__int128 *)v175);
  if (v178 < 0)
    operator delete(__p);
  if (SHIBYTE(v176) < 0)
    operator delete(v175[0]);
  v168[0] = &v190;
  v11 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)this + 8, (unint64_t **)v168);
  if (v11)
    v12 = (char *)(v11 + 3);
  else
    v12 = (char *)this + 104;
  std::string::basic_string[abi:ne180100]<0>(&v183, &byte_207AF6795);
  v13 = *(unint64_t ***)v12;
  v14 = (unint64_t **)*((_QWORD *)v12 + 1);
  if (*(unint64_t ***)v12 != v14)
  {
    v15 = 1;
    do
    {
      CpGraph::GetTensorName((uint64_t)this, **v13, &v183);
      std::to_string(&v182, v15);
      v16 = std::string::insert(&v182, 0, "Input ", 6uLL);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v169 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)v168 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string,std::string&,0>((uint64_t)v175, (__int128 *)v168, (__int128 *)&v183);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v187, (__int128 *)v175);
      if (v178 < 0)
        operator delete(__p);
      if (SHIBYTE(v176) < 0)
        operator delete(v175[0]);
      if (SHIBYTE(v169) < 0)
        operator delete(v168[0]);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v182.__r_.__value_.__l.__data_);
      ++v13;
      ++v15;
    }
    while (v13 != v14);
  }
  v168[0] = &v190;
  v18 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::__unordered_map_hasher<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::hash<std::reference_wrapper<unsigned long long const>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,true>,std::__unordered_map_equal<std::reference_wrapper<unsigned long long const>,std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>,std::equal_to<std::reference_wrapper<unsigned long long const>>,std::hash<std::reference_wrapper<unsigned long long const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<unsigned long long const>,std::vector<std::reference_wrapper<unsigned long long const>>>>>::find<std::reference_wrapper<unsigned long long const>>((_QWORD *)this + 3, (unint64_t **)v168);
  std::string::basic_string[abi:ne180100]<0>(&v182, &byte_207AF6795);
  v19 = (unint64_t ***)(v18 + 3);
  if (!v18)
    v19 = (unint64_t ***)((char *)this + 104);
  v21 = v19;
  v20 = *v19;
  if ((char *)v21[1] - (char *)v20 == 8)
  {
    CpGraph::GetTensorName((uint64_t)this, **v20, &v182);
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(v175, "Output", (__int128 *)&v182);
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v187, (__int128 *)v175);
    if (v178 < 0)
      operator delete(__p);
    if (SHIBYTE(v176) < 0)
      operator delete(v175[0]);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v175);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)"\tsubgraph ", 10);
  std::to_string(&v173, v190);
  v23 = std::string::insert(&v173, 0, "cluster_", 8uLL);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v174.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v174, " {", 2uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v169 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)v168 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v169 >= 0)
    v27 = v168;
  else
    v27 = (void **)v168[0];
  if (v169 >= 0)
    v28 = HIBYTE(v169);
  else
    v28 = (uint64_t)v168[1];
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v27, v28);
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = &v186;
  else
    v30 = (std::string *)v186.__r_.__value_.__r.__words[0];
  if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
  else
    v31 = v186.__r_.__value_.__l.__size_;
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"\n\t\tlabel=<", 10);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\n\t\t\t<font point-size='13' face='Arial Rounded MT Bold'>", 55);
  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v185;
  else
    v35 = (std::string *)v185.__r_.__value_.__r.__words[0];
  if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
  else
    v36 = v185.__r_.__value_.__l.__size_;
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"</font><br/><br align='left'/>", 30);
  if (SHIBYTE(v169) < 0)
    operator delete(v168[0]);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  v38 = v187;
  for (i = v188; v38 != i; v38 += 48)
  {
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)"\n\t\t\t<font face='Arial Rounded MT Bold'>", 39);
    v41 = v38[23];
    if (v41 >= 0)
      v42 = (uint64_t)v38;
    else
      v42 = *(_QWORD *)v38;
    if (v41 >= 0)
      v43 = v38[23];
    else
      v43 = *((_QWORD *)v38 + 1);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)":</font> ", 9);
    v46 = v38[47];
    if (v46 >= 0)
      v47 = (uint64_t)(v38 + 24);
    else
      v47 = *((_QWORD *)v38 + 3);
    if (v46 >= 0)
      v48 = v38[47];
    else
      v48 = *((_QWORD *)v38 + 4);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"<br align='left'/>", 18);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)"\n\t\t>\n", 5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v168);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<", 1);
  if (*((_QWORD *)v12 + 1) - *(_QWORD *)v12 == 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Input 1    \t| Output     \t| Valid<br align='left'/>", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Original   \t| ", 28);
    if (*(_BYTE *)(*v7 + 24) || *(_BYTE *)(*v7 + 25))
      v50 = "T";
    else
      v50 = "<font color='red'>F</font>";
    v51 = strlen(v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v50, v51);
    if (*(_QWORD *)(*v7 + 32) != -1 && *(_QWORD *)(*v7 + 40) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v52 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" m:", 3);
      v53 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 25))
        v54 = " (materialize transposed domain)";
      else
        v54 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v54, 32 * *(unsigned __int8 *)(*v7 + 25));
      if (*(_QWORD *)(*v7 + 40))
        v55 = &byte_207AF6795;
      else
        v55 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v55, 16 * (*(_QWORD *)(*v7 + 40) == 0));
      if (*(_BYTE *)(*v7 + 26))
        v56 = &byte_207AF6795;
      else
        v56 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 26))
        v57 = 0;
      else
        v57 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v56, v57);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Transposed \t| ", 28);
    if (*(_BYTE *)(*v7 + 96) || *(_BYTE *)(*v7 + 97))
      v58 = "T";
    else
      v58 = "<font color='red'>F</font>";
    v59 = strlen(v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v58, v59);
    if (*(_QWORD *)(*v7 + 104) != -1 && *(_QWORD *)(*v7 + 112) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v60 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" m:", 3);
      v61 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 97))
        v62 = " (materialize transposed domain)";
      else
        v62 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v62, 32 * *(unsigned __int8 *)(*v7 + 97));
      if (*(_QWORD *)(*v7 + 112))
        v63 = &byte_207AF6795;
      else
        v63 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v63, 16 * (*(_QWORD *)(*v7 + 112) == 0));
      if (*(_BYTE *)(*v7 + 98))
        v64 = &byte_207AF6795;
      else
        v64 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 98))
        v65 = 0;
      else
        v65 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v64, v65);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Original   \t| ", 28);
    if (*(_BYTE *)(*v7 + 168) || *(_BYTE *)(*v7 + 169))
      v66 = "T";
    else
      v66 = "<font color='red'>F</font>";
    v67 = strlen(v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v66, v67);
    if (*(_QWORD *)(*v7 + 176) != -1 && *(_QWORD *)(*v7 + 184) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v68 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" m:", 3);
      v69 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 169))
        v70 = " (materialize transposed domain)";
      else
        v70 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v70, 32 * *(unsigned __int8 *)(*v7 + 169));
      if (*(_QWORD *)(*v7 + 184))
        v71 = &byte_207AF6795;
      else
        v71 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v71, 16 * (*(_QWORD *)(*v7 + 184) == 0));
      if (*(_BYTE *)(*v7 + 170))
        v72 = &byte_207AF6795;
      else
        v72 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 170))
        v73 = 0;
      else
        v73 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v72, v73);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Transposed \t| ", 28);
    if (*(_BYTE *)(*v7 + 240) || *(_BYTE *)(*v7 + 241))
      v74 = "T";
    else
      v74 = "<font color='red'>F</font>";
    v75 = strlen(v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v74, v75);
    if (*(_QWORD *)(*v7 + 248) != -1 && *(_QWORD *)(*v7 + 256) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v76 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" m:", 3);
      v77 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 241))
        v78 = " (materialize transposed domain)";
      else
        v78 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v78, 32 * *(unsigned __int8 *)(*v7 + 241));
      if (*(_QWORD *)(*v7 + 256))
        v79 = &byte_207AF6795;
      else
        v79 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v79, 16 * (*(_QWORD *)(*v7 + 256) == 0));
      v80 = 3;
LABEL_283:
      v143 = *(unsigned __int8 *)(*v7 + 72 * v80 + 26);
      if (v143)
        v144 = &byte_207AF6795;
      else
        v144 = " (has transpose=false)";
      if (v143)
        v145 = 0;
      else
        v145 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v144, v145);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Input 1    \t| Input 2    \t| Output    \t| Valid<br align='left'/>", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Original   \t| Original  \t| ", 41);
    if (*(_BYTE *)(*v7 + 24) || *(_BYTE *)(*v7 + 25))
      v81 = "T";
    else
      v81 = "<font color='red'>F</font>";
    v82 = strlen(v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v81, v82);
    if (*(_QWORD *)(*v7 + 32) != -1 && *(_QWORD *)(*v7 + 40) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v83 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" m:", 3);
      v84 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 25))
        v85 = " (materialize transposed domain)";
      else
        v85 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v85, 32 * *(unsigned __int8 *)(*v7 + 25));
      if (*(_QWORD *)(*v7 + 40))
        v86 = &byte_207AF6795;
      else
        v86 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v86, 16 * (*(_QWORD *)(*v7 + 40) == 0));
      if (*(_BYTE *)(*v7 + 26))
        v87 = &byte_207AF6795;
      else
        v87 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 26))
        v88 = 0;
      else
        v88 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v87, v88);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Original   \t| Transposed\t| ", 41);
    if (*(_BYTE *)(*v7 + 96) || *(_BYTE *)(*v7 + 97))
      v89 = "T";
    else
      v89 = "<font color='red'>F</font>";
    v90 = strlen(v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v89, v90);
    if (*(_QWORD *)(*v7 + 104) != -1 && *(_QWORD *)(*v7 + 112) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" m:", 3);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 97))
        v93 = " (materialize transposed domain)";
      else
        v93 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v93, 32 * *(unsigned __int8 *)(*v7 + 97));
      if (*(_QWORD *)(*v7 + 112))
        v94 = &byte_207AF6795;
      else
        v94 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v94, 16 * (*(_QWORD *)(*v7 + 112) == 0));
      if (*(_BYTE *)(*v7 + 98))
        v95 = &byte_207AF6795;
      else
        v95 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 98))
        v96 = 0;
      else
        v96 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v95, v96);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Transposed \t| Original  \t| ", 41);
    if (*(_BYTE *)(*v7 + 168) || *(_BYTE *)(*v7 + 169))
      v97 = "T";
    else
      v97 = "<font color='red'>F</font>";
    v98 = strlen(v97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v97, v98);
    if (*(_QWORD *)(*v7 + 176) != -1 && *(_QWORD *)(*v7 + 184) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v99 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)" m:", 3);
      v100 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 169))
        v101 = " (materialize transposed domain)";
      else
        v101 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v101, 32 * *(unsigned __int8 *)(*v7 + 169));
      if (*(_QWORD *)(*v7 + 184))
        v102 = &byte_207AF6795;
      else
        v102 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v102, 16 * (*(_QWORD *)(*v7 + 184) == 0));
      if (*(_BYTE *)(*v7 + 170))
        v103 = &byte_207AF6795;
      else
        v103 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 170))
        v104 = 0;
      else
        v104 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v103, v104);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Original   \t| Transposed \t| Transposed\t| ", 41);
    if (*(_BYTE *)(*v7 + 240) || *(_BYTE *)(*v7 + 241))
      v105 = "T";
    else
      v105 = "<font color='red'>F</font>";
    v106 = strlen(v105);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v105, v106);
    if (*(_QWORD *)(*v7 + 248) != -1 && *(_QWORD *)(*v7 + 256) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v107 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)" m:", 3);
      v108 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 241))
        v109 = " (materialize transposed domain)";
      else
        v109 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v109, 32 * *(unsigned __int8 *)(*v7 + 241));
      if (*(_QWORD *)(*v7 + 256))
        v110 = &byte_207AF6795;
      else
        v110 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v110, 16 * (*(_QWORD *)(*v7 + 256) == 0));
      if (*(_BYTE *)(*v7 + 242))
        v111 = &byte_207AF6795;
      else
        v111 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 242))
        v112 = 0;
      else
        v112 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v111, v112);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Original   \t| Original  \t| ", 41);
    if (*(_BYTE *)(*v7 + 312) || *(_BYTE *)(*v7 + 313))
      v113 = "T";
    else
      v113 = "<font color='red'>F</font>";
    v114 = strlen(v113);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v113, v114);
    if (*(_QWORD *)(*v7 + 320) != -1 && *(_QWORD *)(*v7 + 328) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v115 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)" m:", 3);
      v116 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 313))
        v117 = " (materialize transposed domain)";
      else
        v117 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v117, 32 * *(unsigned __int8 *)(*v7 + 313));
      if (*(_QWORD *)(*v7 + 328))
        v118 = &byte_207AF6795;
      else
        v118 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v118, 16 * (*(_QWORD *)(*v7 + 328) == 0));
      if (*(_BYTE *)(*v7 + 314))
        v119 = &byte_207AF6795;
      else
        v119 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 314))
        v120 = 0;
      else
        v120 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v119, v120);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Original   \t| Transposed\t| ", 41);
    if (*(_BYTE *)(*v7 + 384) || *(_BYTE *)(*v7 + 385))
      v121 = "T";
    else
      v121 = "<font color='red'>F</font>";
    v122 = strlen(v121);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v121, v122);
    if (*(_QWORD *)(*v7 + 392) != -1 && *(_QWORD *)(*v7 + 400) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v123 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)" m:", 3);
      v124 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 385))
        v125 = " (materialize transposed domain)";
      else
        v125 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v125, 32 * *(unsigned __int8 *)(*v7 + 385));
      if (*(_QWORD *)(*v7 + 400))
        v126 = &byte_207AF6795;
      else
        v126 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v126, 16 * (*(_QWORD *)(*v7 + 400) == 0));
      if (*(_BYTE *)(*v7 + 386))
        v127 = &byte_207AF6795;
      else
        v127 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 386))
        v128 = 0;
      else
        v128 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v127, v128);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Transposed \t| Original  \t| ", 41);
    if (*(_BYTE *)(*v7 + 456) || *(_BYTE *)(*v7 + 457))
      v129 = "T";
    else
      v129 = "<font color='red'>F</font>";
    v130 = strlen(v129);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v129, v130);
    if (*(_QWORD *)(*v7 + 464) != -1 && *(_QWORD *)(*v7 + 472) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v131 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" m:", 3);
      v132 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 457))
        v133 = " (materialize transposed domain)";
      else
        v133 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v133, 32 * *(unsigned __int8 *)(*v7 + 457));
      if (*(_QWORD *)(*v7 + 472))
        v134 = &byte_207AF6795;
      else
        v134 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v134, 16 * (*(_QWORD *)(*v7 + 472) == 0));
      if (*(_BYTE *)(*v7 + 458))
        v135 = &byte_207AF6795;
      else
        v135 = " (has transpose=false)";
      if (*(_BYTE *)(*v7 + 458))
        v136 = 0;
      else
        v136 = 22;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v135, v136);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"Transposed \t| Transposed \t| Transposed\t| ", 41);
    if (*(_BYTE *)(*v7 + 528) || *(_BYTE *)(*v7 + 529))
      v137 = "T";
    else
      v137 = "<font color='red'>F</font>";
    v138 = strlen(v137);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v137, v138);
    if (*(_QWORD *)(*v7 + 536) != -1 && *(_QWORD *)(*v7 + 544) != -1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)" (p:", 4);
      v139 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)" m:", 3);
      v140 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)")", 1);
      if (*(_BYTE *)(*v7 + 529))
        v141 = " (materialize transposed domain)";
      else
        v141 = &byte_207AF6795;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v141, 32 * *(unsigned __int8 *)(*v7 + 529));
      if (*(_QWORD *)(*v7 + 544))
        v142 = &byte_207AF6795;
      else
        v142 = " (dce candidate)";
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)v142, 16 * (*(_QWORD *)(*v7 + 544) == 0));
      v80 = 7;
      goto LABEL_283;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)"<br align='left'/>", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v169, (uint64_t)">", 1);
  std::to_string(&v165, v190);
  v146 = std::string::insert(&v165, 0, "\t\t\"node_", 8uLL);
  v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
  v166.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v147;
  v146->__r_.__value_.__l.__size_ = 0;
  v146->__r_.__value_.__r.__words[2] = 0;
  v146->__r_.__value_.__r.__words[0] = 0;
  v148 = std::string::append(&v166, "\" [label=", 9uLL);
  v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
  v167.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v149;
  v148->__r_.__value_.__l.__size_ = 0;
  v148->__r_.__value_.__r.__words[2] = 0;
  v148->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v170, v163);
  if ((v164 & 0x80u) == 0)
    v150 = v163;
  else
    v150 = (void **)v163[0];
  if ((v164 & 0x80u) == 0)
    v151 = v164;
  else
    v151 = (std::string::size_type)v163[1];
  v152 = std::string::append(&v167, (const std::string::value_type *)v150, v151);
  v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
  v173.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v153;
  v152->__r_.__value_.__l.__size_ = 0;
  v152->__r_.__value_.__r.__words[2] = 0;
  v152->__r_.__value_.__r.__words[0] = 0;
  v154 = std::string::append(&v173, ",shape=box,style=filled,fillcolor=white,fontname=\"Consolas, monospace, bold\",fontsize=11]", 0x59uLL);
  v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  v174.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v156 = &v174;
  else
    v156 = (std::string *)v174.__r_.__value_.__r.__words[0];
  if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v157 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
  else
    v157 = v174.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)v156, v157);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v173.__r_.__value_.__l.__data_);
  if ((char)v164 < 0)
    operator delete(v163[0]);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v176, (uint64_t)";\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"\t}\n", 3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p, a3);
  v159 = (void *)*MEMORY[0x24BEDB7F0];
  v168[0] = v159;
  v160 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v161 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)v168 + *((_QWORD *)v159 - 3)) = v160;
  v162 = (void *)(MEMORY[0x24BEDB848] + 16);
  v169 = v161;
  v170[0] = MEMORY[0x24BEDB848] + 16;
  if (v171 < 0)
    operator delete((void *)v170[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](&v172);
  v175[0] = v159;
  *(void **)((char *)v175 + *((_QWORD *)v159 - 3)) = v160;
  v176 = v161;
  __p = v162;
  if (v180 < 0)
    operator delete(v179);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD0022C](&v181);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v185.__r_.__value_.__l.__data_);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v186.__r_.__value_.__l.__data_);
  v175[0] = &v187;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v175);
}

void sub_206FB0030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  uint64_t a66;
  uint64_t v66;

  if (*(char *)(v66 - 153) < 0)
    operator delete(*(void **)(v66 - 176));
  if (*(char *)(v66 - 129) < 0)
    operator delete(*(void **)(v66 - 152));
  a66 = v66 - 128;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a66);
  _Unwind_Resume(a1);
}

uint64_t CpTransposeGraph::CreateDotString@<X0>(CpTransposeGraph *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  const std::locale::facet *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t **v18;
  unint64_t **v19;
  unint64_t **v20;
  unint64_t *locale;
  unint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _BYTE *v28;
  _BOOL4 v29;
  uint64_t v30;
  _QWORD *v32;
  std::locale v33;
  unint64_t **v34;
  unint64_t **v35;
  uint64_t v36;
  void *__p;
  void *v38;
  unsigned __int8 v39;
  void *v40;
  _BYTE *v41;
  char v42;
  unint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  _QWORD v46[10];
  char v47;
  uint64_t v48;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"digraph D {", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v33, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\tfontname=\"Arial Unicode MS\"", 28);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v33, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\tgraph[compound=true];",
          22);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v33, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  v12 = *(_QWORD **)a1;
  if (*(CpTransposeGraph **)a1 != (CpTransposeGraph *)((char *)a1 + 8))
  {
    do
    {
      v43 = v12[4];
      if (!a2[3]
        || std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, &v43))
      {
        std::string::basic_string[abi:ne180100]<0>(&v33, &byte_207AF6795);
        std::string::basic_string[abi:ne180100]<0>(&v40, &byte_207AF6795);
        __p = (void *)v43;
        if (std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>((_QWORD *)a1 + 19, (unint64_t *)&__p))
        {
          CpTransposeGraph::CreateDotStringLayerNode(a1, v43, &__p);
          if ((v39 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v39 & 0x80u) == 0)
            v14 = v39;
          else
            v14 = (uint64_t)v38;
        }
        else
        {
          CpTransposeGraph::CreateDotStringRootTensorNode(a1, v43, &__p);
          if ((v39 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v39 & 0x80u) == 0)
            v14 = v39;
          else
            v14 = (uint64_t)v38;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)p_p, v14);
        if ((char)v39 < 0)
          operator delete(__p);
        if (v42 < 0)
          operator delete(v40);
        if (SHIBYTE(v35) < 0)
          operator delete(v33.__locale_);
      }
      v15 = (_QWORD *)v12[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v12[2];
          v17 = *v16 == (_QWORD)v12;
          v12 = v16;
        }
        while (!v17);
      }
      v12 = v16;
    }
    while (v16 != (_QWORD *)((char *)a1 + 8));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\n", 1);
  v32 = a3;
  v18 = (uint64_t **)*((_QWORD *)a1 + 5);
  if (!v18)
    goto LABEL_48;
  do
  {
    v33.__locale_ = (std::locale::__imp *)v18[2];
    v35 = 0;
    v36 = 0;
    v34 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v34, v18[3], (uint64_t)v18[4], v18[4] - v18[3]);
    v19 = v34;
    v20 = v35;
    if (v34 == v35)
      goto LABEL_45;
    locale = (unint64_t *)v33.__locale_;
    do
    {
      v22 = *v19;
      if (a2[3]
        && (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, locale)|| !std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(a2, v22)))
      {
        goto LABEL_43;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\t\"node_", 7);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\" -> \"node_", 11);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\"", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" [ltail=\"cluster_", 17);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\", lhead=\"cluster_", 18);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\"", 1);
      CpGraph::GetInputTensors(a1, (unint64_t *)*v22, (uint64_t)&v40);
      v28 = v40;
      if (v41 - (_BYTE *)v40 == 16)
      {
        CpGraph::GetInputTensors(a1, (unint64_t *)*v22, (uint64_t)&__p);
        v29 = *((_QWORD *)__p + 1) == *locale;
        v38 = __p;
        operator delete(__p);
        v28 = v40;
        if (!v40)
          goto LABEL_40;
LABEL_39:
        v41 = v28;
        operator delete(v28);
        goto LABEL_40;
      }
      v29 = 0;
      if (v40)
        goto LABEL_39;
LABEL_40:
      if (v29)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)", color=blue", 12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"];\n", 3);
LABEL_43:
      ++v19;
    }
    while (v19 != v20);
    v19 = v34;
LABEL_45:
    if (v19)
    {
      v35 = v19;
      operator delete(v19);
    }
    v18 = (uint64_t **)*v18;
  }
  while (v18);
LABEL_48:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"}", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v46, v32);
  v44[0] = *MEMORY[0x24BEDB7F0];
  v30 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v45 = v30;
  v46[0] = MEMORY[0x24BEDB848] + 16;
  if (v47 < 0)
    operator delete((void *)v46[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v48);
}

void sub_206FB0790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  std::locale::~locale(&a12);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>::pair[abi:ne180100]<unsigned long long &,CpTransposeUtils::LayerTruthTable const&,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  *a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<CpTransposeUtils::LayerConstraint>::__init_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(a1 + 1, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  v5 = (std::string *)(a1 + 4);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 24);
    a1[6] = *(_QWORD *)(a3 + 40);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_206FB08E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<CpTransposeUtils::LayerConstraint>::__assign_with_size[abi:ne180100]<CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<CpTransposeUtils::LayerConstraint>::__vdeallocate((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v10;
    std::vector<ANEDebugInfo::DebugInfoInMem::TD>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<CpTransposeUtils::LayerConstraint>,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*,CpTransposeUtils::LayerConstraint*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_206FB0A88(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_206FB0A90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<CpTransposeUtils::LayerConstraint>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        std::__destroy_at[abi:ne180100]<CpTransposeUtils::LayerConstraint,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *,CpTransposeUtils::LayerConstraint *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
        std::vector<std::pair<unsigned long,CpTransposeUtils::TransposeType>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,CpTransposeUtils::TransposeType>*,std::pair<unsigned long,CpTransposeUtils::TransposeType>*>((_QWORD *)a4, *(__int128 **)v5, *(__int128 **)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 4);
      v7 = *(_OWORD *)(v5 + 24);
      *(_QWORD *)(a4 + 40) = *(_QWORD *)(v5 + 40);
      *(_OWORD *)(a4 + 24) = v7;
      std::string::operator=((std::string *)(a4 + 48), (const std::string *)(v5 + 48));
      v5 += 72;
      a4 += 72;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<std::pair<unsigned long,CpTransposeUtils::TransposeType>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,CpTransposeUtils::TransposeType>*,std::pair<unsigned long,CpTransposeUtils::TransposeType>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_QWORD *)v25 = *(_QWORD *)v6;
          *((_DWORD *)v25 + 2) = *((_DWORD *)v6 + 2);
          v24 += 16;
          ++v6;
          v25 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v24 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_QWORD *)result = *(_QWORD *)v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6++ + 2);
          result += 16;
        }
        while (v6 != v20);
      }
      v21 = v12;
      if (v20 != a3)
      {
        v22 = v12;
        do
        {
          v23 = *v20++;
          *(_OWORD *)v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned long,unsigned long>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer i;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin;

  begin = this->__begin_;
  for (i = this->__end_; i != begin; i = this->__end_)
  {
    this->__end_ = i - 1;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)&i[-1]);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],std::string&,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_206FB0D8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::pair[abi:ne180100]<std::string,std::string&,0>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  v5 = (std::string *)(a1 + 24);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_206FB0E04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>,0>(uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = (void **)(a1 + 8);
  std::vector<CpTransposeUtils::LayerConstraint>::__destroy_vector::operator()[abi:ne180100](&v2);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::TensorDimensions>>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x40uLL);
  *v10 = 0;
  v10[1] = v6;
  v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = a3[2];
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_206FB1154(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::TensorDimensions>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  int64x2_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  v13 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v11 + 24) = v13;
  *(int64x2_t *)(v11 + 40) = v13;
  *((_QWORD *)v11 + 7) = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_206FB1384(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::RootTensorConstraint>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x38uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *(_QWORD *)a3;
  *((_BYTE *)v10 + 24) = *(_BYTE *)(a3 + 8);
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a3 + 16);
  v10[6] = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_206FB15E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::RootTensorConstraint>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_206FB1830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SpatialSplitMode>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = (char *)operator new(0x48uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_QWORD *)v13 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v13 + 5) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_OWORD *)v13 + 3) = *(_OWORD *)(a3 + 32);
  *((_QWORD *)v13 + 8) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v10 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100]((uint64_t)v23, 0);
  return v10;
}

void sub_206FB1AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,CpTransposeUtils::LayerTruthTable>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x48uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_206FB1D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CpTransposeUtils::LayerTruthTable>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__int128 *ZinIrHalT0::GetParams(ZinIrHalT0 *this)
{
  unsigned __int8 v1;
  _OWORD v3[2];
  int64x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  _OWORD v9[2];
  _OWORD v10[3];
  int v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  int v15;
  int64x2_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  {
    ZinIrHalT0::GetParams(void)const::ZinIrHalT0Parameters = xmmword_207AB06B0;
    dword_254527650 = 8;
    unk_254527658 = xmmword_207A895F0;
    unk_254527668 = xmmword_207A7D330;
    unk_254527678 = xmmword_207A7D340;
    unk_254527688 = xmmword_207A7D350;
    unk_254527698 = xmmword_207A7D360;
    unk_2545276A8 = xmmword_207A7D340;
    unk_2545276B8 = vdupq_n_s64(1uLL);
    unk_2545276C8 = xmmword_207A89600;
    unk_2545276D8 = xmmword_207A89610;
    unk_2545276E8 = unk_2545276B8;
    unk_2545276F8 = vdupq_n_s64(4uLL);
    qword_254527708 = 1;
    xmmword_254527710 = xmmword_207AB06E0;
    unk_254527720 = unk_207AB06F0;
    xmmword_254527730 = xmmword_207AB06E0;
    unk_254527740 = unk_207AB06F0;
    qword_254527760 = 4;
    xmmword_254527750 = xmmword_207AB0700;
    xmmword_254527768 = xmmword_207A89620;
    xmmword_254527778 = xmmword_207A7D3C0;
    xmmword_254527788 = xmmword_207A7D3C0;
    xmmword_254527798 = unk_2545276B8;
    xmmword_2545277A8 = xmmword_207A7D3D0;
    xmmword_2545277B8 = xmmword_207A7D3E0;
    xmmword_2545277C8 = xmmword_207AB06C0;
    xmmword_2545277D8 = xmmword_207A7D400;
    xmmword_2545277E8 = xmmword_207A7D410;
    xmmword_2545277F8 = xmmword_207A7D420;
    xmmword_254527808 = xmmword_207A89640;
    xmmword_254527818 = xmmword_207A89650;
    xmmword_254527828 = xmmword_207A89660;
    xmmword_254527838 = xmmword_207A7D460;
    xmmword_254527848 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_254527858 = xmmword_207A80420;
    xmmword_254527868 = xmmword_207A89670;
    xmmword_254527878 = (__int128)vdupq_n_s64(0x20uLL);
    xmmword_254527888 = xmmword_207A7D4A0;
    qword_2545278A8 = 0;
    xmmword_254527898 = 0u;
    xmmword_2545278B0 = xmmword_207AB06D0;
    word_2545278C0 = 257;
    xmmword_2545278C8 = xmmword_207A7D4C0;
    xmmword_2545278D8 = xmmword_207A7D4D0;
    xmmword_2545278E8 = xmmword_207A7D4E0;
    qword_2545278F8 = 0x10000;
    byte_254527900 = 8;
    xmmword_254527908 = xmmword_207A7D4F0;
    dword_254527918 = 520097776;
    qword_25452791C = 0xFFFFFFEB0000000BLL;
    xmmword_254527928 = xmmword_207A89680;
    xmmword_254527938 = xmmword_207A89690;
    xmmword_254527948 = xmmword_207A7D520;
    v16 = vdupq_n_s64(8uLL);
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_254527958, (uint64_t)&v16, 1uLL);
    xmmword_254527970 = xmmword_207A7D530;
    unk_254527980 = xmmword_207A7D540;
    xmmword_254527990 = (__int128)vdupq_n_s64(0x20uLL);
    unk_2545279A0 = xmmword_207A7D370;
    xmmword_2545279B0 = (__int128)vdupq_n_s64(8uLL);
    unk_2545279C0 = xmmword_207A7D550;
    qword_2545279D0 = 1;
    unk_2545279D8 = 0u;
    unk_2545279E8 = 0u;
    unk_2545279F8 = 0u;
    unk_254527A08 = 0u;
    unk_254527A18 = 0u;
    unk_254527A28 = 0u;
    unk_254527A38 = 0u;
    unk_254527A48 = xmmword_207A7F3C0;
    unk_254527A58 = xmmword_207A7D4F0;
    xmmword_254527A68 = 0u;
    xmmword_254527A78 = 0u;
    qword_254527A88 = 12;
    word_254527A90 = 257;
    dword_254527A92 = 0;
    byte_254527A96 = 0;
    dword_254527A97 = 257;
    byte_254527A9B = 1;
    xmmword_254527A9C = 0u;
    dword_254527AAC = 0;
    byte_254527AB0 = 1;
    dword_254527AB1 = 0;
    byte_254527AB5 = 1;
    word_254527ABA = 0;
    dword_254527AB6 = 0;
    dword_254527ABC = 257;
    xmmword_254527AC0 = xmmword_207A7D5D0;
    unk_254527AD0 = xmmword_207A7D5E0;
    qword_254527AE0 = 40;
    *(_QWORD *)((char *)&xmmword_254527AE8 + 13) = 0;
    xmmword_254527AE8 = 0u;
    dword_254527AFD = 1;
    xmmword_254527B08 = 0u;
    dword_254527B18 = 0;
    word_254527B1C = 1;
    byte_254527B1E = 1;
    qword_254527B1F = 0;
    byte_254527B27 = 0;
    dword_254527B28 = 65793;
    word_254527B2C = 0;
    byte_254527B2E = 1;
    dword_254527B2F = 0;
    byte_254527B33 = 1;
    dword_254527B34 = 0;
    word_254527B38 = 0;
    qword_254527B40 = 128;
    unk_254527B48 = -1;
    qword_254527B50 = -1;
    word_254527B58 = 0;
    dword_254527B5C = 0;
    word_254527B60 = 257;
    *(uint64_t *)((char *)&qword_254527B62 + 7) = 0;
    qword_254527B62 = 0;
    dword_254527B71 = 1542;
    byte_254527B75 = 1;
    dword_254527B76 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_254527B80, "None");
    qword_254527B98 = 0;
    dword_254527BA4 = 0;
    unk_254527BA8 = 0;
    dword_254527BA0 = 1071225242;
    unk_254527BB0 = xmmword_207A7D5F0;
    unk_254527BC0 = vdupq_n_s64(0x40uLL);
    unk_254527BD0 = xmmword_207A7D530;
    qword_254527BE0 = 8;
    byte_254527BE8 = 0;
    unk_254527BEC = 1048576000;
    byte_254527BF4 = 0;
    v14 = 0x200000001;
    v15 = 4;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_254527BF8, &v14, 3uLL);
    v12 = xmmword_207AB0718;
    v13[0] = unk_207AB0728;
    *(_OWORD *)((char *)v13 + 12) = unk_207AB0734;
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_254527C10, &v12, 0xBuLL);
    v11 = 7;
    v10[0] = xmmword_207AB0744;
    v10[1] = unk_207AB0754;
    v10[2] = xmmword_207AB0764;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_254527C28, v10, 0xDuLL);
    v8[0] = xmmword_207AB0778;
    v8[1] = unk_207AB0788;
    v9[0] = xmmword_207AB0798;
    *(_OWORD *)((char *)v9 + 12) = *(__int128 *)((char *)&xmmword_207AB0798 + 12);
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_254527C40, v8, 0xFuLL);
    xmmword_254527C88 = 0u;
    unk_254527C98 = 0u;
    unk_254527CB0 = xmmword_207AB07B8;
    qword_254527C68 = 0;
    qword_254527C60 = 0;
    qword_254527C58 = (uint64_t)&qword_254527C60;
    word_254527C70 = 0;
    byte_254527C72 = 1;
    *(_DWORD *)algn_254527C73 = 0;
    qword_254527C78 = 0;
    dword_254527C80 = 0;
    word_254527CA8 = 1;
    unk_254527CC0 = unk_207AB07C8;
    qword_254527CD0 = 8;
    xmmword_254527CD8 = xmmword_207A896A0;
    v7 = 0x41C7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_254527CE8, &v7, 1uLL);
    v6 = 0x41C7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_254527D00, &v6, 1uLL);
    v5 = 0x41C7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_254527D18, &v5, 1uLL);
    v4 = vdupq_n_s64(0x41C7D78400000000uLL);
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_254527D30, (double *)v4.i64, 1);
    xmmword_254527D48 = xmmword_207A7D640;
    v3[0] = xmmword_207AB07E0;
    *(_OWORD *)((char *)v3 + 12) = *(__int128 *)((char *)&xmmword_207AB07E0 + 12);
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_254527D58, v3, 7uLL);
    xmmword_254527D70 = xmmword_207A7D4F0;
    xmmword_254527D80 = xmmword_207A7D650;
    qword_254527D90 = 64;
    dword_254527E50 = 0;
    word_254527E54 = 0;
    qword_254527E70 = 0;
    byte_254527E78 = 0;
    qword_254527E80 = 0;
    byte_254527E88 = 0;
    qword_254527D98 = 0;
    *(uint64_t *)((char *)&qword_254527D98 + 6) = 0;
    dword_254527E48 = 0;
    xmmword_254527DA8 = 0u;
    unk_254527DB8 = 0u;
    xmmword_254527DC8 = 0u;
    unk_254527DD8 = 0u;
    xmmword_254527DE8 = 0u;
    unk_254527DF8 = 0u;
    xmmword_254527E08 = 0u;
    unk_254527E18 = 0u;
    xmmword_254527E28 = 0u;
    unk_254527E38 = 0u;
    byte_254527E68 = 0;
    xmmword_254527E58 = 0u;
    word_254527E89 = 257;
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalT0::GetParams(void)const::ZinIrHalT0Parameters, &dword_2069AB000);
  }
  return &ZinIrHalT0::GetParams(void)const::ZinIrHalT0Parameters;
}

void sub_206FB2524(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  if (qword_254527D18)
  {
    qword_254527D20 = qword_254527D18;
    operator delete((void *)qword_254527D18);
  }
  if (qword_254527D00)
  {
    qword_254527D08 = qword_254527D00;
    operator delete((void *)qword_254527D00);
  }
  if (qword_254527CE8)
  {
    qword_254527CF0 = qword_254527CE8;
    operator delete((void *)qword_254527CE8);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v1 + 24, *(_QWORD **)(v1 + 32));
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    qword_254527C48 = *(_QWORD *)v1;
    operator delete(v4);
  }
  if (qword_254527C28)
  {
    qword_254527C30 = qword_254527C28;
    operator delete((void *)qword_254527C28);
  }
  if (qword_254527C10)
  {
    qword_254527C18 = qword_254527C10;
    operator delete((void *)qword_254527C10);
  }
  if (qword_254527BF8)
  {
    qword_254527C00 = qword_254527BF8;
    operator delete((void *)qword_254527BF8);
  }
  if (byte_254527B97 < 0)
    operator delete((void *)qword_254527B80);
  if (qword_254527958)
  {
    qword_254527960 = qword_254527958;
    operator delete((void *)qword_254527958);
  }
  _Unwind_Resume(a1);
}

void sub_206FB2668()
{
  JUMPOUT(0x206FB263CLL);
}

void sub_206FB2670()
{
  JUMPOUT(0x206FB2654);
}

uint64_t ZinIrOpt::RemoveIdentityDivMul(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(&v8, a2);
  v9[0] = &off_24C060270;
  v9[1] = &v8;
  v10 = v9;
  v3 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v9, 1);
  v4 = v10;
  if (v10 == v9)
  {
    v5 = 4;
    v4 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  return v3;
}

void sub_206FB2744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  ZinIrOpt::ReplaceSqrtEWDiv(&a9);
  _Unwind_Resume(a1);
}

uint64_t *ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char **v18;
  char v19;
  _BYTE v20[24];
  _BYTE *v21;
  _QWORD v22[3];
  _QWORD v23[4];
  uint64_t v24;
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD *v27;
  _BYTE v28[40];
  _QWORD v29[23];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  std::string::basic_string[abi:ne180100]<0>(v22, "div");
  v23[0] = &unk_24C060170;
  v23[3] = v23;
  v14 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v24, &v14, 1);
  std::string::basic_string[abi:ne180100]<0>(v25, "mul");
  v26[0] = &unk_24C0601F0;
  v27 = v26;
  v13 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)v28, &v13, 1);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = &v15;
  v19 = 0;
  v15 = (char *)operator new(0xC0uLL);
  v16 = (uint64_t)v15;
  v17 = v15 + 192;
  v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItemDesc const>,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*,ZinLinearPattern::AtomItemDesc const*>((uint64_t)&v17, (uint64_t)v22, (uint64_t)v29, (uint64_t)v15);
  v21 = 0;
  ZinLinearPattern::ZinLinearPattern(v29, &v15, a2, 0, v20, 0);
  v4 = operator new();
  ZinPattern::ZinPattern((ZinPattern *)v4, (const ZinPattern *)v29);
  *(_QWORD *)v4 = &off_24C01BCC8;
  *(_OWORD *)(v4 + 184) = v30;
  *(_QWORD *)(v4 + 200) = v31;
  v30 = 0uLL;
  v31 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  v29[0] = &off_24C01BCC8;
  v18 = (char **)&v30;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  ZinPattern::~ZinPattern((ZinPattern *)v29);
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
    goto LABEL_7;
  }
  if (v21)
  {
    v7 = 5;
LABEL_7:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v18 = &v15;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  for (i = 0; i != -24; i -= 12)
  {
    v9 = &v22[i];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v28[i * 8]);
    v10 = *(_QWORD **)&v28[i * 8 - 8];
    if (&v26[i] == v10)
    {
      v10 = v9 + 15;
      v11 = 4;
    }
    else
    {
      if (!v10)
        goto LABEL_14;
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_14:
    if (SHIBYTE(v25[i + 2]) < 0)
      operator delete((void *)v9[12]);
  }
  return a1;
}

void sub_206FB2A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t *v44;
  uint64_t v45;
  char *v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;

  MEMORY[0x20BD002F8](v45, 0x10F3C4065438FD5);
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)&a44);
  v47 = a19;
  if (a19 == &a16)
  {
    v48 = 4;
    v47 = &a16;
  }
  else
  {
    if (!a19)
    {
LABEL_6:
      a14 = (void **)&a11;
      std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&a14);
      for (i = 96; i != -96; i -= 96)
        ZinLinearPattern::AtomItemDesc::~AtomItemDesc((ZinLinearPattern::AtomItemDesc *)(&a20 + i));
      v50 = *v44;
      *v44 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 48))(v50);
      _Unwind_Resume(a1);
    }
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
  goto LABEL_6;
}

_QWORD *std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C060170;
  return result;
}

void std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C060170;
}

uint64_t std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<MatchStatus,false>::__call[abi:ne180100]<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1} &,MatchParams const&>(a1 + 8, a2);
}

uint64_t std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1}>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MatchStatus,false>::__call[abi:ne180100]<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#1} &,MatchParams const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int16 v4;
  int v5;

  v2 = *(_QWORD **)(a2 + 8);
  v3 = v2[8];
  if (*(_DWORD *)(v3 + 8) == 5 && v2[15] - v2[14] < 9uLL && *(_DWORD *)(v3 + 12) == 6)
  {
    LOBYTE(v4) = 1;
    v5 = 1;
  }
  else
  {
    v4 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
    v5 = HIBYTE(v4);
  }
  return v4 | (v5 << 8);
}

_QWORD *std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24C0601F0;
  return result;
}

void std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24C0601F0;
}

uint64_t std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}::operator()(a1 + 8, a2);
}

uint64_t std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2},std::allocator<ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}>,MatchStatus ()(MatchParams const&)>::target_type()
{
}

uint64_t ZinIrOpt::IdentityDivMulRemover::IdentityDivMulRemover(ZinIrParameters const&)::{lambda(MatchParams const&)#2}::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  void *__p[2];
  char v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = *(_QWORD **)(a2 + 8);
  if (v2[12] - v2[11] != 16)
    goto LABEL_20;
  v3 = v2[8];
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 == 6)
  {
    if (*(_DWORD *)(v3 + 12) != 1
      || *(float *)(v3 + 16) != 1.0
      || *(float *)(v3 + 20) != 1.0
      || *(float *)(v3 + 24) != 0.0
      || *(_BYTE *)(v3 + 28)
      || *(_BYTE *)(v3 + 29))
    {
      goto LABEL_20;
    }
  }
  else if (v4 != 5 || *(_DWORD *)(v3 + 12) != 2)
  {
    goto LABEL_20;
  }
  v5 = *(_QWORD **)(a2 + 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "div");
  ZinPattern::State::GetMatch(v5, (unsigned __int8 *)__p, &v16);
  if (v17 == v16)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v6 = *v16;
  v17 = v16;
  operator delete(v16);
  if (v15 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD *)(v6 + 88);
  if ((unint64_t)(*(_QWORD *)(v6 + 96) - v7) <= 8)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v8 = (_QWORD *)v2[11];
  v9 = v2[12] - (_QWORD)v8;
  if (!v9)
LABEL_22:
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v10 = *(_QWORD *)(v7 + 8);
  if (v10 != *v8)
  {
    if (v9 > 8)
    {
      if (v10 == v8[1])
        goto LABEL_13;
LABEL_20:
      v12 = ZinPatternAtom::NoMatch((ZinPatternAtom *)1);
      v11 = HIBYTE(v12);
      return v12 | (v11 << 8);
    }
    goto LABEL_22;
  }
LABEL_13:
  v11 = 0;
  LOBYTE(v12) = 1;
  return v12 | (v11 << 8);
}

void sub_206FB2E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C060270;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C060270;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t ***a2, ZinIrOpLayer **a3)
{
  uint64_t **v3;
  ZinIrOpLayer *v4;
  ZinIrOpt::IdentityDivMulRemover *v5;

  v3 = *a2;
  v4 = *a3;
  v5 = *(ZinIrOpt::IdentityDivMulRemover **)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD, uint64_t **, ZinIrOpLayer *))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5, *a2, *a3))
  {
    ZinIrOpt::IdentityDivMulRemover::Replace(v5, v3, v4);
  }
  return 0;
}

uint64_t std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0,std::allocator<ZinIrOpt::RemoveIdentityDivMul(ZinIrControlFlowGraph *,ZinIrParameters const&)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinIrOpt::IdentityDivMulRemover::Replace(ZinIrOpt::IdentityDivMulRemover *this, uint64_t **a2, ZinIrOpLayer *a3)
{
  size_t v6;
  void **v7;
  char *v8;
  uint64_t v9;
  ZinIrOpLayer *SingleMatch;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  unint64_t v14;
  ZinIrOpLayer *v15;
  uint64_t *v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t Dimension;
  void *v21;
  int v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  ZinIrOpLayer *Broadcast;
  _BOOL4 v29;
  int v30;
  int v31;
  _BOOL4 v32;
  ZinIrOpLayer *v33;
  _QWORD *v34;
  _QWORD *v35;
  _OWORD v36[2];
  int v37;
  void *v38;
  uint64_t v39;
  char *v40;
  _OWORD v41[2];
  int v42;
  uint64_t v43;
  _QWORD v44[3];
  char v45;
  _QWORD v46[2];
  void *__p[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a3 + 47) >= 0)
    v6 = *((unsigned __int8 *)a3 + 47);
  else
    v6 = *((_QWORD *)a3 + 4);
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 24);
  if (SBYTE7(v48) < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*((char *)a3 + 47) >= 0)
      v8 = (char *)a3 + 24;
    else
      v8 = (char *)*((_QWORD *)a3 + 3);
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "_remove_identity_div_mul");
  ZinObjectNameFactory::ZinObjectNameFactory(v44, __p);
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "div");
  SingleMatch = (ZinIrOpLayer *)ZinPattern::GetSingleMatch(v9, (unsigned __int8 *)__p);
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  v11 = *(_QWORD *)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "mul");
  v12 = (uint64_t **)ZinPattern::GetSingleMatch(v11, (unsigned __int8 *)__p);
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  v13 = *((_QWORD *)SingleMatch + 11);
  v14 = *((_QWORD *)SingleMatch + 12) - v13;
  if (!v14)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  if (v14 <= 8)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v15 = *(ZinIrOpLayer **)v13;
  v43 = *(_QWORD *)(v13 + 8);
  v16 = (uint64_t *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0)
                  + 48);
  v17 = (uint64_t *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v12)[4])(v12, 0, 0) + 48);
  if (ZinTensorDimensions::operator!=(v16, v17))
  {
    v18 = operator new(0x14uLL);
    v19 = 0;
    v18[4] = 4;
    *(_OWORD *)v18 = xmmword_207AB0A7C;
    memset(v41, 0, sizeof(v41));
    v42 = 1065353216;
    do
    {
      Dimension = ZinTensorDimensions::GetDimension(v16, v18[v19]);
      v21 = (void *)ZinTensorDimensions::GetDimension(v17, v18[v19]);
      if ((void *)Dimension != v21)
      {
        if (Dimension != 1)
          ZinAssertImpl("Error: invalid dimension size for broadcast. Input size = %zd, output size = %zd", Dimension, (size_t)v21);
        LODWORD(__p[0]) = v18[v19];
        __p[1] = v21;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v41, (int *)__p, __p);
      }
      ++v19;
    }
    while (v19 != 5);
    v22 = *(_DWORD *)(((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*v12)[4])(v12, 0, 0) + 88);
    v23 = *((_QWORD *)a3 + 2);
    (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v15 + 80))(__p, v15, 0, 0);
    v24 = operator new(0x78uLL);
    v39 = (uint64_t)v24 + 120;
    v40 = (char *)v24 + 120;
    v25 = v52;
    v24[4] = v51;
    v24[5] = v25;
    v24[6] = v53;
    *((_DWORD *)v24 + 28) = v54;
    v26 = v48;
    *v24 = *(_OWORD *)__p;
    v24[1] = v26;
    v27 = v50;
    v24[2] = v49;
    v24[3] = v27;
    v38 = v24;
    Broadcast = (ZinIrOpLayer *)ZinBuilder::CreateBroadcast(v23, (uint64_t)v44, (uint64_t *)&v38, (uint64_t)v41, v22);
    if (v38)
    {
      v39 = (uint64_t)v38;
      operator delete(v38);
    }
    v46[0] = SingleMatch;
    v46[1] = v12;
    v38 = v46;
    v39 = 2;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v38);
    v29 = ZinIrOpLayerGraph::AddNode(a2, Broadcast, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)&v48 = __p[1];
      operator delete(__p[1]);
    }
    v30 = v29 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v15, (uint64_t)Broadcast, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v41);
    operator delete(v18);
    v15 = Broadcast;
  }
  else
  {
    v30 = 1;
  }
  memset(v36, 0, sizeof(v36));
  v37 = 1065353216;
  v31 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, v12, v15, v36);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v36);
  v32 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, (ZinIrOpLayer *)v12, 0);
  if ((v30 & v31 & v32 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, SingleMatch, 0) & 1) == 0)
    ZinAssertImpl("Error: graph manipulation failed when removing identity div-mul");
  v48 = 0u;
  v49 = 0u;
  *(_OWORD *)__p = 0u;
  std::deque<ZinIrOpLayer *>::push_back(__p, &v43);
  while (*((_QWORD *)&v49 + 1))
  {
    v33 = *(ZinIrOpLayer **)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v49 >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v49 & 0x1FF));
    *(_QWORD *)&v49 = v49 + 1;
    --*((_QWORD *)&v49 + 1);
    if ((unint64_t)v49 >= 0x400)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(_QWORD *)&v49 = v49 - 512;
    }
    if (*((_QWORD *)v33 + 15) == *((_QWORD *)v33 + 14))
    {
      v34 = (_QWORD *)*((_QWORD *)v33 + 11);
      v35 = (_QWORD *)*((_QWORD *)v33 + 12);
      while (v34 != v35)
      {
        *(_QWORD *)&v41[0] = 0;
        *(_QWORD *)&v41[0] = *v34;
        std::deque<ZinIrOpLayer *>::push_back(__p, v41);
        ++v34;
      }
      if (!ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, v33, 0))
        ZinAssertImpl("Error: graph manipulation failed when removing identity div-mul");
    }
  }
  std::deque<unsigned long>::~deque[abi:ne180100](__p);
  v44[0] = off_24C01FBB0;
  if (v45 < 0)
    operator delete((void *)v44[1]);
}

void sub_206FB3478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void (**a26)(ZinObjectNameFactory *__hidden this),void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  void *v38;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a19);
  operator delete(v38);
  a26 = off_24C01FBB0;
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

ZinPadLayerUtils::PadDecomposedDesc *ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(ZinPadLayerUtils::PadDecomposedDesc *this, ZinIrConcatUnitInfo *a2)
{
  __int128 v4;
  int v5;
  int v6;

  *((_OWORD *)this + 21) = xmmword_207AB0AF0;
  *(_QWORD *)this = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = v5;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *(_QWORD *)this = off_24C01EAB0;
  v6 = *((_DWORD *)a2 + 20);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_DWORD *)this + 20) = v6;
  return this;
}

void sub_206FB3660(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinPadLayerUtils::PadDecomposedDesc *ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(ZinPadLayerUtils::PadDecomposedDesc *this, ZinIrInputViewUnitInfo *a2)
{
  __int128 v4;
  int v5;

  *((_OWORD *)this + 21) = xmmword_207AB0B00;
  *(_QWORD *)this = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = v5;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *(_QWORD *)this = off_24C021970;
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_206FB3744(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinPadLayerUtils::PadDecomposedDesc *ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(ZinPadLayerUtils::PadDecomposedDesc *this, ZinIrTransposeUnitInfo *a2)
{
  __int128 v4;
  int v5;

  *((_OWORD *)this + 21) = xmmword_207AB0B10;
  *(_QWORD *)this = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = v5;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *(_QWORD *)this = off_24C021A98;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
  return this;
}

void sub_206FB383C(_Unwind_Exception *a1)
{
  void **v1;

  ZinIrUnitInfo::~ZinIrUnitInfo(v1);
  _Unwind_Resume(a1);
}

void ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc(ZinPadLayerUtils::PadDecomposedDesc *this)
{
  int v2;
  void *v3;
  void *v4;

  v2 = *((_DWORD *)this + 87);
  if (v2 > 16)
  {
    if (v2 == 17)
      goto LABEL_14;
    if (v2 != 21)
      return;
    *(_QWORD *)this = off_24C021A98;
    v3 = (void *)*((_QWORD *)this + 10);
    if (!v3)
      goto LABEL_14;
    *((_QWORD *)this + 11) = v3;
LABEL_13:
    operator delete(v3);
    goto LABEL_14;
  }
  if (v2 == 1)
  {
    *(_QWORD *)this = off_24C01ED88;
    v4 = (void *)*((_QWORD *)this + 19);
    if (v4)
    {
      *((_QWORD *)this + 20) = v4;
      operator delete(v4);
    }
    v3 = (void *)*((_QWORD *)this + 16);
    if (!v3)
      goto LABEL_14;
    *((_QWORD *)this + 17) = v3;
    goto LABEL_13;
  }
  if (v2 == 3)
LABEL_14:
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this);
}

ZinPadLayerUtils::PadDecomposedDesc *ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(ZinPadLayerUtils::PadDecomposedDesc *this, const ZinPadLayerUtils::PadDecomposedDesc *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *((_QWORD *)this + 42) = 0;
  *((_DWORD *)this + 86) = 0;
  v4 = *((_DWORD *)a2 + 87);
  *((_DWORD *)this + 87) = v4;
  if (v4 > 16)
  {
    if (v4 == 17)
    {
      *(_QWORD *)this = off_24C017CA0;
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        v12 = *(_OWORD *)((char *)a2 + 8);
        *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
        *(_OWORD *)((char *)this + 8) = v12;
      }
      v16 = *((_DWORD *)a2 + 8);
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 8) = v16;
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
      *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
      *(_QWORD *)this = off_24C021970;
      *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
    }
    else if (v4 == 21)
    {
      *(_QWORD *)this = off_24C017CA0;
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        v6 = *(_OWORD *)((char *)a2 + 8);
        *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
        *(_OWORD *)((char *)this + 8) = v6;
      }
      v15 = *((_DWORD *)a2 + 8);
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 8) = v15;
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
      *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
      *(_QWORD *)this = off_24C021A98;
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 10) = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    }
  }
  else if (v4 == 1)
  {
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo(this, a2);
    *(_QWORD *)this = off_24C01CAD8;
    v7 = *((_OWORD *)a2 + 16);
    *((_OWORD *)this + 15) = *((_OWORD *)a2 + 15);
    *((_OWORD *)this + 16) = v7;
    v8 = *((_OWORD *)a2 + 17);
    v9 = *((_OWORD *)a2 + 18);
    v10 = *((_OWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 316) = *(_OWORD *)((char *)a2 + 316);
    *((_OWORD *)this + 18) = v9;
    *((_OWORD *)this + 19) = v10;
    *((_OWORD *)this + 17) = v8;
    v11 = *((_QWORD *)a2 + 42);
    *((_DWORD *)this + 86) = *((_DWORD *)a2 + 86);
    *((_QWORD *)this + 42) = v11;
  }
  else if (v4 == 3)
  {
    *(_QWORD *)this = off_24C017CA0;
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    }
    else
    {
      v5 = *(_OWORD *)((char *)a2 + 8);
      *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
      *(_OWORD *)((char *)this + 8) = v5;
    }
    v13 = *((_DWORD *)a2 + 8);
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 8) = v13;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
    *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
    *(_QWORD *)this = off_24C01EAB0;
    v14 = *((_DWORD *)a2 + 20);
    *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
    *((_DWORD *)this + 20) = v14;
  }
  return this;
}

void sub_206FB3BA8(_Unwind_Exception *a1)
{
  void **v1;

  ZinIrUnitInfo::~ZinIrUnitInfo(v1);
  _Unwind_Resume(a1);
}

BOOL ZinPadLayerUtils::IsReflectivePad(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 200);
  v1 = *(_QWORD *)(a1 + 208);
  if (v2 == v1)
    return 1;
  v3 = v2 + 8;
  do
  {
    v4 = *(_DWORD *)(v3 - 4);
    result = v4 == 6;
    v6 = v4 != 6 || v3 == v1;
    v3 += 8;
  }
  while (!v6);
  return result;
}

uint64_t ZinPadLayerUtils::DecomposeReflectivePad(__int128 *a1, _DWORD *a2, uint64_t *a3, char **a4, int a5)
{
  uint64_t i;
  int v8;
  int v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  int v27;
  int v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  int v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  _DWORD *v89;
  char *v90;
  uint64_t v91;
  void *v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  __int128 v144;
  __int128 v145;
  int v146;
  int j;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  __int128 v162;
  __int128 v163;
  int v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  __int128 v180;
  __int128 v181;
  int v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  __int128 v239;
  __int128 v240;
  uint64_t v242;
  uint64_t v243;
  __int128 *v244;
  unint64_t *v245;
  _DWORD *v246;
  void *v247;
  char *v248;
  char *v249;
  void (**v250)(ZinIrInputViewUnitInfo *__hidden);
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  __int128 v258;
  void *__p[2];
  _QWORD v260[2];
  __int128 v261;
  uint64_t v262;
  uint64_t v263;

  v263 = *MEMORY[0x24BDAC8D0];
  for (i = *((_QWORD *)a2 + 25); i != *((_QWORD *)a2 + 26); i += 8)
  {
    if (*(_DWORD *)(i + 4) != 6)
      return 0;
  }
  if (*(_QWORD *)(a2 + 43))
    return 0;
  v8 = a2[41];
  v244 = a1;
  v246 = a2;
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = (__int128 *)((char *)a1 + 24);
    v242 = (uint64_t)(a4 + 2);
    do
    {
      v251 = 0;
      v252 = 0;
      v254 = 0;
      v253 = 0;
      v255 = 0u;
      v256 = 0u;
      v257 = -1;
      v250 = off_24C021970;
      HIDWORD(v258) = 3;
      LODWORD(v258) = ++v9;
      *(_QWORD *)((char *)&v258 + 4) = 0x100000001;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrInputViewUnitInfo *)&v250);
      v11 = a3[1];
      if (v11 >= a3[2])
      {
        v12 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
        v12 = v11 + 352;
        a3[1] = v11 + 352;
      }
      a3[1] = v12;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      v261 = *v244;
      *(_OWORD *)__p = *v10;
      v13 = (unint64_t)a4[1];
      v14 = (unint64_t)a4[2];
      if (v13 >= v14)
      {
        v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (_QWORD)*a4) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (_QWORD)*a4) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x333333333333333)
          v19 = 0x666666666666666;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>(v242, v19);
        else
          v20 = 0;
        v21 = &v20[40 * v16];
        *(_OWORD *)v21 = v261;
        *((_QWORD *)v21 + 2) = 1;
        *(_OWORD *)(v21 + 24) = *(_OWORD *)__p;
        v23 = *a4;
        v22 = a4[1];
        v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 40);
            v26 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v26;
            *(_OWORD *)(v24 - 40) = v25;
            v24 -= 40;
            v22 -= 40;
          }
          while (v22 != v23);
          v22 = *a4;
        }
        v15 = v21 + 40;
        *a4 = v24;
        a4[1] = v21 + 40;
        a4[2] = &v20[40 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *v244;
        *(_QWORD *)(v13 + 16) = 1;
        *(_OWORD *)(v13 + 24) = *(_OWORD *)__p;
        v15 = (char *)(v13 + 40);
      }
      a4[1] = v15;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
      v8 = v246[41];
    }
    while (v9 < v8);
    a1 = v244;
    a2 = v246;
  }
  v27 = a2[42];
  if (v27 >= 1)
  {
    v28 = 0;
    v29 = (__int128 *)((char *)a1 + 24);
    do
    {
      v251 = 0;
      v252 = 0;
      v254 = 0;
      v253 = 0;
      v255 = 0u;
      v256 = 0u;
      v257 = -1;
      v250 = off_24C021970;
      HIDWORD(v258) = 3;
      LODWORD(v258) = *((_DWORD *)a1 + 4) - v28 - 2;
      *(_QWORD *)((char *)&v258 + 4) = 0x100000001;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrInputViewUnitInfo *)&v250);
      v30 = a3[1];
      if (v30 >= a3[2])
      {
        v31 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
        v31 = v30 + 352;
        a3[1] = v30 + 352;
      }
      a3[1] = v31;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      v261 = *v244;
      *(_OWORD *)__p = *v29;
      v32 = (unint64_t)a4[1];
      v33 = (unint64_t)a4[2];
      if (v32 >= v33)
      {
        v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - (_QWORD)*a4) >> 3);
        v36 = v35 + 1;
        if (v35 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - (_QWORD)*a4) >> 3);
        if (2 * v37 > v36)
          v36 = 2 * v37;
        if (v37 >= 0x333333333333333)
          v38 = 0x666666666666666;
        else
          v38 = v36;
        if (v38)
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v38);
        else
          v39 = 0;
        v40 = &v39[40 * v35];
        *(_OWORD *)v40 = v261;
        *((_QWORD *)v40 + 2) = 1;
        *(_OWORD *)(v40 + 24) = *(_OWORD *)__p;
        v42 = *a4;
        v41 = a4[1];
        v43 = v40;
        if (v41 != *a4)
        {
          do
          {
            v44 = *(_OWORD *)(v41 - 40);
            v45 = *(_OWORD *)(v41 - 24);
            *((_QWORD *)v43 - 1) = *((_QWORD *)v41 - 1);
            *(_OWORD *)(v43 - 24) = v45;
            *(_OWORD *)(v43 - 40) = v44;
            v43 -= 40;
            v41 -= 40;
          }
          while (v41 != v42);
          v41 = *a4;
        }
        v34 = v40 + 40;
        *a4 = v43;
        a4[1] = v40 + 40;
        a4[2] = &v39[40 * v38];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *(_OWORD *)v32 = *v244;
        *(_QWORD *)(v32 + 16) = 1;
        *(_OWORD *)(v32 + 24) = *(_OWORD *)__p;
        v34 = (char *)(v32 + 40);
      }
      a4[1] = v34;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
      ++v28;
      a1 = v244;
      v27 = v246[42];
    }
    while (v28 < v27);
    v8 = v246[41];
  }
  if (v8 >= 1)
  {
    v46 = 0;
    v47 = (unint64_t *)(a4 + 2);
    do
    {
      v251 = 0;
      v252 = 0;
      v253 = 0;
      v255 = 0u;
      v256 = 0u;
      v257 = -1;
      v250 = off_24C01EAB0;
      BYTE4(v258) = 0;
      v254 = 3;
      LODWORD(v258) = 3;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrConcatUnitInfo *)&v250);
      v48 = a3[1];
      if (v48 >= a3[2])
      {
        v49 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
        v49 = v48 + 352;
        a3[1] = v48 + 352;
      }
      a3[1] = v49;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      v50 = (unint64_t)a4[1];
      v261 = *(_OWORD *)(v50 - 40);
      v51 = *(_QWORD *)(v50 - 24);
      *(_OWORD *)__p = *(_OWORD *)(v50 - 16);
      if (!v46)
      {
        v261 = *v244;
        v51 = *((_QWORD *)v244 + 2);
        *(_OWORD *)__p = *(__int128 *)((char *)v244 + 24);
      }
      v52 = v51 + 1;
      if (v50 >= *v47)
      {
        v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50 - (_QWORD)*a4) >> 3);
        v55 = v54 + 1;
        if (v54 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(*v47 - (_QWORD)*a4) >> 3) > v55)
          v55 = 0x999999999999999ALL * ((uint64_t)(*v47 - (_QWORD)*a4) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v47 - (_QWORD)*a4) >> 3) >= 0x333333333333333)
          v56 = 0x666666666666666;
        else
          v56 = v55;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v56);
        else
          v57 = 0;
        v58 = &v57[40 * v54];
        *(_OWORD *)v58 = v261;
        *((_QWORD *)v58 + 2) = v52;
        *(_OWORD *)(v58 + 24) = *(_OWORD *)__p;
        v60 = *a4;
        v59 = a4[1];
        v61 = v58;
        if (v59 != *a4)
        {
          do
          {
            v62 = *(_OWORD *)(v59 - 40);
            v63 = *(_OWORD *)(v59 - 24);
            *((_QWORD *)v61 - 1) = *((_QWORD *)v59 - 1);
            *(_OWORD *)(v61 - 24) = v63;
            *(_OWORD *)(v61 - 40) = v62;
            v61 -= 40;
            v59 -= 40;
          }
          while (v59 != v60);
          v59 = *a4;
        }
        v53 = v58 + 40;
        *a4 = v61;
        a4[1] = v58 + 40;
        a4[2] = &v57[40 * v56];
        if (v59)
          operator delete(v59);
      }
      else
      {
        *(_OWORD *)v50 = v261;
        *(_QWORD *)(v50 + 16) = v52;
        *(_OWORD *)(v50 + 24) = *(_OWORD *)__p;
        v53 = (char *)(v50 + 40);
      }
      a4[1] = v53;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
      ++v46;
    }
    while (v46 < v246[41]);
    v27 = v246[42];
  }
  if (v27 >= 1)
  {
    v64 = 0;
    do
    {
      v251 = 0;
      v252 = 0;
      v253 = 0;
      v255 = 0u;
      v256 = 0u;
      v257 = -1;
      v250 = off_24C01EAB0;
      BYTE4(v258) = 0;
      v254 = 3;
      LODWORD(v258) = 3;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrConcatUnitInfo *)&v250);
      v65 = a3[1];
      if (v65 >= a3[2])
      {
        v66 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
        v66 = v65 + 352;
        a3[1] = v65 + 352;
      }
      a3[1] = v66;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      v67 = (unint64_t)a4[1];
      v68 = (unint64_t)a4[2];
      v261 = *(_OWORD *)(v67 - 40);
      v69 = *(_QWORD *)(v67 - 24);
      *(_OWORD *)__p = *(_OWORD *)(v67 - 16);
      v70 = v69 + 1;
      if (v67 >= v68)
      {
        v72 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - (_QWORD)*a4) >> 3);
        v73 = v72 + 1;
        if (v72 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v74 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - (_QWORD)*a4) >> 3);
        if (2 * v74 > v73)
          v73 = 2 * v74;
        if (v74 >= 0x333333333333333)
          v75 = 0x666666666666666;
        else
          v75 = v73;
        if (v75)
          v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a4 + 2), v75);
        else
          v76 = 0;
        v77 = &v76[40 * v72];
        *(_OWORD *)v77 = v261;
        *((_QWORD *)v77 + 2) = v70;
        *(_OWORD *)(v77 + 24) = *(_OWORD *)__p;
        v79 = *a4;
        v78 = a4[1];
        v80 = v77;
        if (v78 != *a4)
        {
          do
          {
            v81 = *(_OWORD *)(v78 - 40);
            v82 = *(_OWORD *)(v78 - 24);
            *((_QWORD *)v80 - 1) = *((_QWORD *)v78 - 1);
            *(_OWORD *)(v80 - 24) = v82;
            *(_OWORD *)(v80 - 40) = v81;
            v80 -= 40;
            v78 -= 40;
          }
          while (v78 != v79);
          v78 = *a4;
        }
        v71 = v77 + 40;
        *a4 = v80;
        a4[1] = v77 + 40;
        a4[2] = &v76[40 * v75];
        if (v78)
          operator delete(v78);
      }
      else
      {
        *(_OWORD *)v67 = *(_OWORD *)(v67 - 40);
        *(_QWORD *)(v67 + 16) = v70;
        *(_OWORD *)(v67 + 24) = *(_OWORD *)(v67 - 16);
        v71 = (char *)(v67 + 40);
      }
      a4[1] = v71;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
      ++v64;
    }
    while (v64 < v246[42]);
  }
  __p[0] = 0;
  __p[1] = 0;
  v260[0] = 0;
  v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v260, 1uLL);
  v85 = &v84[8 * v83];
  *(_QWORD *)v84 = 0x200000004;
  v86 = v84 + 8;
  v88 = (char *)__p[0];
  v87 = (char *)__p[1];
  v89 = v246;
  v90 = v84;
  if (__p[1] != __p[0])
  {
    do
    {
      v91 = *((_QWORD *)v87 - 1);
      v87 -= 8;
      *((_QWORD *)v90 - 1) = v91;
      v90 -= 8;
    }
    while (v87 != v88);
    v87 = (char *)__p[0];
  }
  __p[0] = v90;
  __p[1] = v84 + 8;
  v260[0] = &v84[8 * v83];
  if (v87)
  {
    operator delete(v87);
    v85 = (char *)v260[0];
  }
  __p[1] = v84 + 8;
  if (v86 >= v85)
  {
    v94 = (v86 - (char *)__p[0]) >> 3;
    if ((unint64_t)(v94 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v95 = v85 - (char *)__p[0];
    v96 = v95 >> 2;
    if (v95 >> 2 <= (unint64_t)(v94 + 1))
      v96 = v94 + 1;
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
      v97 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v97 = v96;
    if (v97)
      v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v260, v97);
    else
      v98 = 0;
    v99 = &v98[8 * v94];
    v100 = &v98[8 * v97];
    *(_QWORD *)v99 = 0x400000002;
    v92 = v99 + 8;
    v102 = (char *)__p[0];
    v101 = (char *)__p[1];
    if (__p[1] != __p[0])
    {
      do
      {
        v103 = *((_QWORD *)v101 - 1);
        v101 -= 8;
        *((_QWORD *)v99 - 1) = v103;
        v99 -= 8;
      }
      while (v101 != v102);
      v101 = (char *)__p[0];
    }
    __p[0] = v99;
    __p[1] = v92;
    v260[0] = v100;
    if (v101)
      operator delete(v101);
  }
  else
  {
    *((_QWORD *)v84 + 1) = 0x400000002;
    v92 = v84 + 16;
  }
  __p[1] = v92;
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v250, (uint64_t)__p, a5);
  ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrTransposeUnitInfo *)&v250);
  v104 = a3[1];
  if (v104 >= a3[2])
  {
    v105 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
  }
  else
  {
    ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
    v105 = v104 + 352;
    a3[1] = v104 + 352;
  }
  a3[1] = v105;
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
  v106 = *a4;
  v107 = a4[1];
  v108 = (uint64_t *)(v107 - 40);
  v109 = v107 - *a4;
  if (v107 == *a4)
    v108 = (uint64_t *)v244;
  v111 = *v108;
  v110 = v108[1];
  v112 = v108[2];
  v113 = v108[3];
  v114 = v108[4];
  v115 = (unint64_t)a4[2];
  v245 = (unint64_t *)(a4 + 2);
  if ((unint64_t)v107 >= v115)
  {
    v117 = v109 / 40;
    v118 = v109 / 40 + 1;
    if (v118 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v119 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v115 - (_QWORD)v106) >> 3);
    if (2 * v119 > v118)
      v118 = 2 * v119;
    if (v119 >= 0x333333333333333)
      v120 = 0x666666666666666;
    else
      v120 = v118;
    if (v120)
    {
      v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v245, v120);
      v106 = *a4;
      v107 = a4[1];
    }
    else
    {
      v121 = 0;
    }
    v122 = &v121[40 * v117];
    *(_QWORD *)v122 = v111;
    *((_QWORD *)v122 + 1) = v113;
    v123 = &v121[40 * v120];
    *((_QWORD *)v122 + 2) = v112;
    *((_QWORD *)v122 + 3) = v110;
    *((_QWORD *)v122 + 4) = v114;
    v116 = v122 + 40;
    if (v107 == v106)
    {
      v89 = v246;
    }
    else
    {
      v89 = v246;
      do
      {
        v124 = *(_OWORD *)(v107 - 40);
        v125 = *(_OWORD *)(v107 - 24);
        *((_QWORD *)v122 - 1) = *((_QWORD *)v107 - 1);
        *(_OWORD *)(v122 - 24) = v125;
        *(_OWORD *)(v122 - 40) = v124;
        v122 -= 40;
        v107 -= 40;
      }
      while (v107 != v106);
      v106 = *a4;
    }
    *a4 = v122;
    a4[1] = v116;
    a4[2] = v123;
    if (v106)
      operator delete(v106);
  }
  else
  {
    *(_QWORD *)v107 = v111;
    *((_QWORD *)v107 + 1) = v113;
    *((_QWORD *)v107 + 2) = v112;
    *((_QWORD *)v107 + 3) = v110;
    v116 = v107 + 40;
    *((_QWORD *)v107 + 4) = v114;
  }
  a4[1] = v116;
  v250 = off_24C021A98;
  if ((_QWORD)v258)
  {
    *((_QWORD *)&v258 + 1) = v258;
    operator delete((void *)v258);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v126 = a4[1];
  v127 = *((_QWORD *)v126 - 5);
  v243 = *((_QWORD *)v126 - 4);
  *(_OWORD *)__p = *(_OWORD *)(v126 - 24);
  v260[0] = *((_QWORD *)v126 - 1);
  v128 = v89[39];
  if (v128 >= 1)
  {
    v129 = 0;
    do
    {
      v251 = 0;
      v252 = 0;
      v254 = 0;
      v253 = 0;
      v255 = 0u;
      v256 = 0u;
      v257 = -1;
      v250 = off_24C021970;
      HIDWORD(v258) = 2;
      LODWORD(v258) = ++v129;
      *(_QWORD *)((char *)&v258 + 4) = 0x100000001;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrInputViewUnitInfo *)&v250);
      v130 = a3[1];
      if (v130 >= a3[2])
      {
        v131 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
        v131 = v130 + 352;
        a3[1] = v130 + 352;
      }
      a3[1] = v131;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      v132 = (unint64_t)a4[1];
      v133 = (unint64_t)a4[2];
      if (v132 >= v133)
      {
        v135 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v132 - (_QWORD)*a4) >> 3);
        v136 = v135 + 1;
        if (v135 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v137 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v133 - (_QWORD)*a4) >> 3);
        if (2 * v137 > v136)
          v136 = 2 * v137;
        if (v137 >= 0x333333333333333)
          v138 = 0x666666666666666;
        else
          v138 = v136;
        if (v138)
          v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v245, v138);
        else
          v139 = 0;
        v140 = &v139[40 * v135];
        *(_QWORD *)v140 = v127;
        *((_QWORD *)v140 + 1) = 1;
        *((_OWORD *)v140 + 1) = *(_OWORD *)__p;
        *((_QWORD *)v140 + 4) = v260[0];
        v142 = *a4;
        v141 = a4[1];
        v143 = v140;
        if (v141 != *a4)
        {
          do
          {
            v144 = *(_OWORD *)(v141 - 40);
            v145 = *(_OWORD *)(v141 - 24);
            *((_QWORD *)v143 - 1) = *((_QWORD *)v141 - 1);
            *(_OWORD *)(v143 - 24) = v145;
            *(_OWORD *)(v143 - 40) = v144;
            v143 -= 40;
            v141 -= 40;
          }
          while (v141 != v142);
          v141 = *a4;
        }
        v134 = v140 + 40;
        *a4 = v143;
        a4[1] = v140 + 40;
        a4[2] = &v139[40 * v138];
        if (v141)
          operator delete(v141);
      }
      else
      {
        *(_QWORD *)v132 = v127;
        *(_QWORD *)(v132 + 8) = 1;
        *(_OWORD *)(v132 + 16) = *(_OWORD *)__p;
        *(_QWORD *)(v132 + 32) = v260[0];
        v134 = (char *)(v132 + 40);
      }
      a4[1] = v134;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
      v128 = v246[39];
    }
    while (v129 < v128);
    v89 = v246;
  }
  v146 = v89[40];
  if (v146 >= 1)
  {
    for (j = 0; j < v146; ++j)
    {
      v251 = 0;
      v252 = 0;
      v254 = 0;
      v253 = 0;
      v255 = 0u;
      v256 = 0u;
      v257 = -1;
      v250 = off_24C021970;
      HIDWORD(v258) = 2;
      LODWORD(v258) = v243 - 2 - j;
      *(_QWORD *)((char *)&v258 + 4) = 0x100000001;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrInputViewUnitInfo *)&v250);
      v148 = a3[1];
      if (v148 >= a3[2])
      {
        v149 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
        v149 = v148 + 352;
        a3[1] = v148 + 352;
      }
      a3[1] = v149;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      v150 = (unint64_t)a4[1];
      v151 = (unint64_t)a4[2];
      if (v150 >= v151)
      {
        v153 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v150 - (_QWORD)*a4) >> 3);
        v154 = v153 + 1;
        if (v153 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v155 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v151 - (_QWORD)*a4) >> 3);
        if (2 * v155 > v154)
          v154 = 2 * v155;
        if (v155 >= 0x333333333333333)
          v156 = 0x666666666666666;
        else
          v156 = v154;
        if (v156)
          v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v245, v156);
        else
          v157 = 0;
        v158 = &v157[40 * v153];
        *(_QWORD *)v158 = v127;
        *((_QWORD *)v158 + 1) = 1;
        *((_OWORD *)v158 + 1) = *(_OWORD *)__p;
        *((_QWORD *)v158 + 4) = v260[0];
        v160 = *a4;
        v159 = a4[1];
        v161 = v158;
        if (v159 != *a4)
        {
          do
          {
            v162 = *(_OWORD *)(v159 - 40);
            v163 = *(_OWORD *)(v159 - 24);
            *((_QWORD *)v161 - 1) = *((_QWORD *)v159 - 1);
            *(_OWORD *)(v161 - 24) = v163;
            *(_OWORD *)(v161 - 40) = v162;
            v161 -= 40;
            v159 -= 40;
          }
          while (v159 != v160);
          v159 = *a4;
        }
        v152 = v158 + 40;
        *a4 = v161;
        a4[1] = v158 + 40;
        a4[2] = &v157[40 * v156];
        if (v159)
          operator delete(v159);
      }
      else
      {
        *(_QWORD *)v150 = v127;
        *(_QWORD *)(v150 + 8) = 1;
        *(_OWORD *)(v150 + 16) = *(_OWORD *)__p;
        *(_QWORD *)(v150 + 32) = v260[0];
        v152 = (char *)(v150 + 40);
      }
      a4[1] = v152;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
      v146 = v246[40];
    }
    v89 = v246;
    v128 = v246[39];
  }
  if (v128 >= 1)
  {
    v164 = 0;
    do
    {
      v251 = 0;
      v252 = 0;
      v253 = 0;
      v255 = 0u;
      v256 = 0u;
      v257 = -1;
      v250 = off_24C01EAB0;
      BYTE4(v258) = 0;
      v254 = 3;
      LODWORD(v258) = 2;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrConcatUnitInfo *)&v250);
      v165 = a3[1];
      if (v165 >= a3[2])
      {
        v166 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
        v166 = v165 + 352;
        a3[1] = v165 + 352;
      }
      a3[1] = v166;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      v167 = (unint64_t)a4[1];
      v169 = *(_QWORD *)(v167 - 40);
      v168 = *(_QWORD *)(v167 - 32);
      v261 = *(_OWORD *)(v167 - 24);
      v262 = *(_QWORD *)(v167 - 8);
      if (!v164)
      {
        v261 = *(_OWORD *)__p;
        v262 = v260[0];
        v168 = v243;
        v169 = v127;
      }
      v170 = v168 + 1;
      if (v167 >= *v245)
      {
        v172 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v167 - (_QWORD)*a4) >> 3);
        v173 = v172 + 1;
        if (v172 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(*v245 - (_QWORD)*a4) >> 3) > v173)
          v173 = 0x999999999999999ALL * ((uint64_t)(*v245 - (_QWORD)*a4) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v245 - (_QWORD)*a4) >> 3) >= 0x333333333333333)
          v174 = 0x666666666666666;
        else
          v174 = v173;
        if (v174)
          v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v245, v174);
        else
          v175 = 0;
        v176 = &v175[40 * v172];
        *(_QWORD *)v176 = v169;
        *((_QWORD *)v176 + 1) = v170;
        *((_OWORD *)v176 + 1) = v261;
        *((_QWORD *)v176 + 4) = v262;
        v178 = *a4;
        v177 = a4[1];
        v179 = v176;
        if (v177 == *a4)
        {
          v89 = v246;
        }
        else
        {
          v89 = v246;
          do
          {
            v180 = *(_OWORD *)(v177 - 40);
            v181 = *(_OWORD *)(v177 - 24);
            *((_QWORD *)v179 - 1) = *((_QWORD *)v177 - 1);
            *(_OWORD *)(v179 - 24) = v181;
            *(_OWORD *)(v179 - 40) = v180;
            v179 -= 40;
            v177 -= 40;
          }
          while (v177 != v178);
          v177 = *a4;
        }
        v171 = v176 + 40;
        *a4 = v179;
        a4[1] = v176 + 40;
        a4[2] = &v175[40 * v174];
        if (v177)
          operator delete(v177);
      }
      else
      {
        *(_QWORD *)v167 = v169;
        *(_QWORD *)(v167 + 8) = v170;
        *(_OWORD *)(v167 + 16) = v261;
        *(_QWORD *)(v167 + 32) = v262;
        v171 = (char *)(v167 + 40);
      }
      a4[1] = v171;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
      ++v164;
    }
    while (v164 < v89[39]);
    v146 = v89[40];
  }
  if (v146 >= 1)
  {
    v182 = 0;
    do
    {
      v251 = 0;
      v252 = 0;
      v253 = 0;
      v255 = 0u;
      v256 = 0u;
      v257 = -1;
      v250 = off_24C01EAB0;
      BYTE4(v258) = 0;
      v254 = 3;
      LODWORD(v258) = 2;
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrConcatUnitInfo *)&v250);
      v183 = a3[1];
      if (v183 >= a3[2])
      {
        v184 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      }
      else
      {
        ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
        v184 = v183 + 352;
        a3[1] = v183 + 352;
      }
      a3[1] = v184;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
      v185 = (unint64_t)a4[1];
      v186 = (unint64_t)a4[2];
      v188 = *(_QWORD *)(v185 - 40);
      v187 = *(_QWORD *)(v185 - 32);
      v261 = *(_OWORD *)(v185 - 24);
      v262 = *(_QWORD *)(v185 - 8);
      v189 = v187 + 1;
      if (v185 >= v186)
      {
        v191 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v185 - (_QWORD)*a4) >> 3);
        v192 = v191 + 1;
        if (v191 + 1 > 0x666666666666666)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v193 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v186 - (_QWORD)*a4) >> 3);
        if (2 * v193 > v192)
          v192 = 2 * v193;
        if (v193 >= 0x333333333333333)
          v194 = 0x666666666666666;
        else
          v194 = v192;
        if (v194)
          v195 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v245, v194);
        else
          v195 = 0;
        v196 = &v195[40 * v191];
        *(_QWORD *)v196 = v188;
        *((_QWORD *)v196 + 1) = v189;
        *((_OWORD *)v196 + 1) = v261;
        *((_QWORD *)v196 + 4) = v262;
        v198 = *a4;
        v197 = a4[1];
        v199 = v196;
        if (v197 != *a4)
        {
          do
          {
            v200 = *(_OWORD *)(v197 - 40);
            v201 = *(_OWORD *)(v197 - 24);
            *((_QWORD *)v199 - 1) = *((_QWORD *)v197 - 1);
            *(_OWORD *)(v199 - 24) = v201;
            *(_OWORD *)(v199 - 40) = v200;
            v199 -= 40;
            v197 -= 40;
          }
          while (v197 != v198);
          v197 = *a4;
        }
        v190 = v196 + 40;
        *a4 = v199;
        a4[1] = v196 + 40;
        a4[2] = &v195[40 * v194];
        if (v197)
          operator delete(v197);
      }
      else
      {
        *(_QWORD *)v185 = v188;
        *(_QWORD *)(v185 + 8) = v189;
        *(_OWORD *)(v185 + 16) = *(_OWORD *)(v185 - 24);
        *(_QWORD *)(v185 + 32) = *(_QWORD *)(v185 - 8);
        v190 = (char *)(v185 + 40);
      }
      a4[1] = v190;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
      ++v182;
    }
    while (v182 < v246[40]);
  }
  v247 = 0;
  v248 = 0;
  v249 = 0;
  v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v249, 1uLL);
  v204 = &v203[8 * v202];
  *(_QWORD *)v203 = 0x200000004;
  v205 = v203 + 8;
  v207 = (char *)v247;
  v206 = v248;
  v208 = v203;
  if (v248 != v247)
  {
    do
    {
      v209 = *((_QWORD *)v206 - 1);
      v206 -= 8;
      *((_QWORD *)v208 - 1) = v209;
      v208 -= 8;
    }
    while (v206 != v207);
    v206 = (char *)v247;
  }
  v247 = v208;
  v248 = v203 + 8;
  v249 = &v203[8 * v202];
  if (v206)
  {
    operator delete(v206);
    v204 = v249;
  }
  v248 = v203 + 8;
  if (v205 >= v204)
  {
    v211 = (v205 - (_BYTE *)v247) >> 3;
    if ((unint64_t)(v211 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v212 = v204 - (_BYTE *)v247;
    v213 = v212 >> 2;
    if (v212 >> 2 <= (unint64_t)(v211 + 1))
      v213 = v211 + 1;
    if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF8)
      v214 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v214 = v213;
    if (v214)
      v215 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v249, v214);
    else
      v215 = 0;
    v216 = &v215[8 * v211];
    v217 = &v215[8 * v214];
    *(_QWORD *)v216 = 0x400000002;
    v210 = v216 + 8;
    v219 = (char *)v247;
    v218 = v248;
    if (v248 != v247)
    {
      do
      {
        v220 = *((_QWORD *)v218 - 1);
        v218 -= 8;
        *((_QWORD *)v216 - 1) = v220;
        v216 -= 8;
      }
      while (v218 != v219);
      v218 = (char *)v247;
    }
    v247 = v216;
    v248 = v210;
    v249 = v217;
    if (v218)
      operator delete(v218);
  }
  else
  {
    *((_QWORD *)v203 + 1) = 0x400000002;
    v210 = v203 + 16;
  }
  v248 = v210;
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v250, (uint64_t)&v247, a5);
  ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261, (ZinIrTransposeUnitInfo *)&v250);
  v221 = a3[1];
  if (v221 >= a3[2])
  {
    v222 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(a3, (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
  }
  else
  {
    ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)a3[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&v261);
    v222 = v221 + 352;
    a3[1] = v221 + 352;
  }
  a3[1] = v222;
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v261);
  v224 = a4[1];
  v223 = (unint64_t)a4[2];
  v226 = *((_QWORD *)v224 - 5);
  v225 = *((_QWORD *)v224 - 4);
  v227 = *((_QWORD *)v224 - 3);
  v228 = *((_QWORD *)v224 - 2);
  v229 = *((_QWORD *)v224 - 1);
  if ((unint64_t)v224 >= v223)
  {
    v231 = *a4;
    v232 = 0xCCCCCCCCCCCCCCCDLL * ((v224 - *a4) >> 3);
    v233 = v232 + 1;
    if (v232 + 1 > 0x666666666666666)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v234 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v223 - (_QWORD)v231) >> 3);
    if (2 * v234 > v233)
      v233 = 2 * v234;
    if (v234 >= 0x333333333333333)
      v235 = 0x666666666666666;
    else
      v235 = v233;
    if (v235)
    {
      v236 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)v245, v235);
      v231 = *a4;
      v224 = a4[1];
    }
    else
    {
      v236 = 0;
    }
    v237 = &v236[40 * v232];
    *(_QWORD *)v237 = v226;
    *((_QWORD *)v237 + 1) = v228;
    v238 = &v236[40 * v235];
    *((_QWORD *)v237 + 2) = v227;
    *((_QWORD *)v237 + 3) = v225;
    *((_QWORD *)v237 + 4) = v229;
    v230 = v237 + 40;
    if (v224 != v231)
    {
      do
      {
        v239 = *(_OWORD *)(v224 - 40);
        v240 = *(_OWORD *)(v224 - 24);
        *((_QWORD *)v237 - 1) = *((_QWORD *)v224 - 1);
        *(_OWORD *)(v237 - 24) = v240;
        *(_OWORD *)(v237 - 40) = v239;
        v237 -= 40;
        v224 -= 40;
      }
      while (v224 != v231);
      v231 = *a4;
    }
    *a4 = v237;
    a4[1] = v230;
    a4[2] = v238;
    if (v231)
      operator delete(v231);
  }
  else
  {
    *(_QWORD *)v224 = v226;
    *((_QWORD *)v224 + 1) = v228;
    *((_QWORD *)v224 + 2) = v227;
    *((_QWORD *)v224 + 3) = v225;
    v230 = v224 + 40;
    *((_QWORD *)v224 + 4) = v229;
  }
  a4[1] = v230;
  v250 = off_24C021A98;
  if ((_QWORD)v258)
  {
    *((_QWORD *)&v258 + 1) = v258;
    operator delete((void *)v258);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v250);
  if (v247)
  {
    v248 = (char *)v247;
    operator delete(v247);
  }
  return 1;
}

void sub_206FB5304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&a33);
  ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinPadLayerUtils::DecomposePad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char **a5, int a6)
{
  uint64_t i;
  uint64_t v11;
  char **v12;
  char *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  int v36;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _QWORD *v53;
  int v54;
  int v55;
  int v56;
  BOOL v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  BOOL v64;
  int v65;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int *v86;
  int *v87;
  int *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  int *v93;
  char *v94;
  __int128 v95;
  int *v96;
  int *v97;
  void *v98;
  int v99;
  int *v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  int *v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  BOOL v116;
  char v118;
  BOOL v119;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v128;
  int v129;
  int v131;
  int v132;
  int v134;
  int v135;
  __int128 v136;
  int v137;
  int v138;
  int v139;
  char **v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  __int128 v154;
  __int128 v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  char **v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  BOOL v165;
  char v166;
  void *v167;
  _QWORD *v168;
  char *v169;
  _QWORD *v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  uint64_t *v180;
  int v181;
  uint64_t v182;
  int v183;
  _DWORD *v184;
  int v186;
  int v187;
  char v188;
  int v189;
  int v190;
  int v191;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  void *v196[4];
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  int v212;
  char v213;
  __int16 v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  __int128 v221;
  __int128 v222;
  _BYTE v223[32];
  _BYTE v224[28];
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  void *__p;
  int *v229;
  _QWORD v230[8];
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  _OWORD v235[2];
  __int128 v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  v11 = *a4;
  for (i = a4[1];
        i != v11;
  a4[1] = v11;
  v12 = a5;
  v13 = *a5;
  a5[1] = *a5;
  v14 = (unint64_t)a5[2];
  if ((unint64_t)v13 >= v14)
  {
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (_QWORD)v13) >> 3);
    v19 = 2 * v18;
    if (2 * v18 <= 1)
      v19 = 1;
    if (v18 >= 0x333333333333333)
      v20 = 0x666666666666666;
    else
      v20 = v19;
    v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v20);
    v23 = &v21[40 * v22];
    v12 = a5;
    v24 = *(_OWORD *)a1;
    v25 = *(_OWORD *)(a1 + 16);
    *((_QWORD *)v21 + 4) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v21 = v24;
    *((_OWORD *)v21 + 1) = v25;
    v17 = v21 + 40;
    v27 = *a5;
    v26 = a5[1];
    if (v26 != *a5)
    {
      do
      {
        v28 = *(_OWORD *)(v26 - 40);
        v29 = *(_OWORD *)(v26 - 24);
        *((_QWORD *)v21 - 1) = *((_QWORD *)v26 - 1);
        *(_OWORD *)(v21 - 24) = v29;
        *(_OWORD *)(v21 - 40) = v28;
        v21 -= 40;
        v26 -= 40;
      }
      while (v26 != v27);
      v26 = *a5;
    }
    *a5 = v21;
    a5[1] = v17;
    a5[2] = v23;
    if (v26)
    {
      operator delete(v26);
      v12 = a5;
    }
  }
  else
  {
    v15 = *(_OWORD *)a1;
    v16 = *(_OWORD *)(a1 + 16);
    *((_QWORD *)v13 + 4) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v13 = v15;
    *((_OWORD *)v13 + 1) = v16;
    v17 = v13 + 40;
  }
  v12[1] = v17;
  v30 = *(_QWORD *)(a2 + 200);
  v31 = *(_QWORD *)(a2 + 208);
  if (v30 != v31)
  {
    v32 = *(_QWORD *)(a2 + 200);
    do
    {
      if (*(_DWORD *)(v32 + 4) == 2)
        ZinAssertImpl("Error: decomposition failed. Negative padding mode is not supported");
      v32 += 8;
    }
    while (v32 != v31);
  }
  v33 = *(_DWORD **)(a3 + 1464);
  v34 = *(_DWORD **)(a3 + 1472);
  v35 = v33;
  if (v33 != v34)
  {
    v35 = *(_DWORD **)(a3 + 1464);
    while (*v35 != 9)
    {
      if (++v35 == v34)
      {
        v35 = *(_DWORD **)(a3 + 1472);
        break;
      }
    }
  }
  v36 = *(unsigned __int8 *)(a3 + 1893);
  v38 = a6 == 12 || (a6 - 1) < 2;
  v39 = v35 != v34 && v38;
  if (v30 != v31)
  {
    v40 = *(_QWORD *)(a2 + 200);
    while (*(_DWORD *)(v40 + 4) != 5)
    {
      v40 += 8;
      if (v40 == v31)
        goto LABEL_38;
    }
    if (!*(_BYTE *)(a3 + 1893))
      ZinAssertImpl("Error: decomposition failed. Symmetric padding mode is not supported");
    return 1;
  }
LABEL_38:
  if (v33 != v34)
  {
    while (*v33 != 3)
    {
      if (++v33 == v34)
      {
        v33 = *(_DWORD **)(a3 + 1472);
        break;
      }
    }
  }
  if (v33 == v34)
  {
    if (v30 != v31)
    {
      v44 = *(_QWORD *)(a2 + 200);
      while (*(_DWORD *)(v44 + 4) != 3)
      {
        v44 += 8;
        if (v44 == v31)
          goto LABEL_43;
      }
      if (!*(_BYTE *)(a3 + 1893))
        ZinAssertImpl("Error: decomposition failed. Replication padding mode is not supported");
      return 1;
    }
    v41 = (_WORD *)(a2 + 224);
  }
  else
  {
LABEL_43:
    v41 = (_WORD *)(a2 + 224);
    if (v30 != v31)
    {
      v42 = *(_QWORD *)(a2 + 200);
      while (*(_DWORD *)(v42 + 4) != 7 || (*v41 & 0x7FFF) == 0)
      {
        v42 += 8;
        if (v42 == v31)
          goto LABEL_60;
      }
      if (!v39)
      {
        if (!*(_BYTE *)(a3 + 1893))
          ZinAssertImpl("Error: decomposition failed. Do not support background padding mode with non-zero value since constant padding mode is not supported");
        return 1;
      }
LABEL_60:
      v45 = *(_DWORD *)(v30 + 4);
      v46 = *(_QWORD *)(a2 + 200);
      while (*(_DWORD *)(v46 + 4) == v45)
      {
        v46 += 8;
        if (v46 == v31)
          goto LABEL_68;
      }
      if (!*(_BYTE *)(a3 + 1893))
        ZinAssertImpl("Error: decomposition failed. Do not support multiple padding modes at different axes");
      return 1;
    }
  }
  v45 = *(_DWORD *)(v30 + 4);
LABEL_68:
  if (v45 == 7)
  {
    if ((*v41 & 0x7FFF) != 0)
      v45 = 9;
    else
      v45 = 1;
  }
  if (a6 == 3)
  {
    v47 = *(_DWORD *)(a3 + 136);
  }
  else
  {
    v47 = GetMaxLogicalKernelWidthForLargeKernelMode(a3, a6) - 1;
    v30 = *(_QWORD *)(a2 + 200);
    v31 = *(_QWORD *)(a2 + 208);
  }
  v48 = *(_DWORD *)(a3 + 144);
  if (v47 >= v48)
    v49 = *(_DWORD *)(a3 + 144);
  else
    v49 = v47;
  if (*(_DWORD *)(a3 + 112) - 1 >= *(_DWORD *)(a3 + 152))
    v50 = *(_DWORD *)(a3 + 152);
  else
    v50 = *(_DWORD *)(a3 + 112) - 1;
  v51 = *(_DWORD *)(a3 + 160);
  if (*(_DWORD *)(a3 + 128) - 1 < v51)
    v51 = *(_DWORD *)(a3 + 128) - 1;
  while (v30 != v31)
  {
    if (*(_DWORD *)(v30 + 4) != 6)
    {
      v186 = v49;
      v177 = v51;
      v181 = v45;
      v183 = a6;
      v180 = a4;
      v53 = operator new(0x18uLL);
      v169 = (char *)(v53 + 3);
      *(_OWORD *)v53 = *(_OWORD *)(a2 + 156);
      v53[2] = *(_QWORD *)(a2 + 172);
      v54 = *(_DWORD *)(a2 + 156);
      v56 = *(_DWORD *)(a2 + 164);
      v55 = *(_DWORD *)(a2 + 168);
      v189 = *(_DWORD *)(a2 + 160);
      v57 = v54 == v189 && v56 == v55;
      v184 = (_DWORD *)a3;
      v182 = a2;
      if (v57)
      {
        v55 = *(_DWORD *)(a2 + 164);
        if (*(_DWORD *)(a2 + 172) == *(_DWORD *)(a2 + 176))
          goto LABEL_205;
      }
      v174 = v36;
      v167 = v53;
      v58 = v189 + v54;
      v59 = v55 + v56;
      v60 = a2;
      v61 = *(_DWORD *)(a2 + 172);
      v62 = *(_DWORD *)(v60 + 176);
      v63 = v62 + v61;
      v64 = v189 + v54 <= v186 && v59 <= v50;
      v65 = v177;
      if (!v64 || v63 > v177)
      {
        v229 = 0;
        __p = 0;
        v230[0] = 0;
        if (v183 == 3)
        {
          v67 = v50;
          v68 = v184[34];
        }
        else
        {
          v68 = GetMaxLogicalKernelWidthForLargeKernelMode((uint64_t)v184, v183) - 1;
          v48 = v184[36];
          v69 = v184[32];
          v65 = v184[40];
          if (v184[28] - 1 >= v184[38])
            v67 = v184[38];
          else
            v67 = v184[28] - 1;
          if (v69 - 1 < v65)
            v65 = v69 - 1;
        }
        if (v68 >= v48)
          v70 = v48;
        else
          v70 = v68;
        v71 = v189;
        v178 = v65;
        v176 = v70;
        v175 = v67;
        while (v54 != v71 || v58 > v70 || v56 != v55 || v59 > v67 || v61 != v62 || v63 > v65)
        {
          v190 = v71;
          if (v54 >= v71)
          {
            if (v71 >= v70)
              v73 = v70;
            else
              v73 = v71;
            if (((v70 - v73) & ~((v70 - v73) >> 31)) >= v54)
              v72 = v54;
            else
              v72 = (v70 - v73) & ~((v70 - v73) >> 31);
          }
          else
          {
            if (v54 >= v70)
              v72 = v70;
            else
              v72 = v54;
            if (((v70 - v72) & ~((v70 - v72) >> 31)) >= v71)
              v73 = v71;
            else
              v73 = (v70 - v72) & ~((v70 - v72) >> 31);
          }
          if (v55 >= v67)
            v74 = v67;
          else
            v74 = v55;
          v75 = (v67 - v74) & ~((v67 - v74) >> 31);
          if (v75 >= v56)
            v75 = v56;
          if (v56 >= v67)
            v76 = v67;
          else
            v76 = v56;
          v77 = (v67 - v76) & ~((v67 - v76) >> 31);
          if (v77 >= v55)
            v77 = v55;
          if (v56 < v55)
            v78 = v76;
          else
            v78 = v75;
          if (v56 < v55)
            v79 = v77;
          else
            v79 = v74;
          if (v62 >= v65)
            v80 = v65;
          else
            v80 = v62;
          v81 = (v65 - v80) & ~((v65 - v80) >> 31);
          if (v81 >= v61)
            v81 = v61;
          if (v61 >= v65)
            v82 = v65;
          else
            v82 = v61;
          v83 = (v65 - v82) & ~((v65 - v82) >> 31);
          if (v83 >= v62)
            v83 = v62;
          if (v61 < v62)
            v84 = v82;
          else
            v84 = v81;
          if (v61 < v62)
            v85 = v83;
          else
            v85 = v80;
          v86 = v229;
          if ((unint64_t)v229 >= v230[0])
          {
            v179 = v84;
            v187 = v85;
            v88 = (int *)__p;
            v89 = 0xAAAAAAAAAAAAAAABLL * (((char *)v229 - (_BYTE *)__p) >> 3);
            v90 = v89 + 1;
            if (v89 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v230[0] - (_QWORD)__p) >> 3) > v90)
              v90 = 0x5555555555555556 * ((uint64_t)(v230[0] - (_QWORD)__p) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v230[0] - (_QWORD)__p) >> 3) >= 0x555555555555555)
              v91 = 0xAAAAAAAAAAAAAAALL;
            else
              v91 = v90;
            if (v91)
            {
              v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v230, v91);
              v86 = v229;
              v88 = (int *)__p;
            }
            else
            {
              v92 = 0;
            }
            v93 = (int *)&v92[8 * (((char *)v229 - (_BYTE *)__p) >> 3)];
            *v93 = v72;
            v93[1] = v73;
            v93[2] = v78;
            v93[3] = v79;
            v93[4] = v179;
            v93[5] = v187;
            v94 = &v92[24 * v89];
            if (v86 != v88)
            {
              do
              {
                v95 = *(_OWORD *)(v86 - 6);
                *((_QWORD *)v94 - 1) = *((_QWORD *)v86 - 1);
                *(_OWORD *)(v94 - 24) = v95;
                v94 -= 24;
                v86 -= 6;
              }
              while (v86 != v88);
              v88 = (int *)__p;
            }
            v87 = v93 + 6;
            __p = v94;
            v229 = v93 + 6;
            v230[0] = &v92[24 * v91];
            if (v88)
              operator delete(v88);
            v65 = v178;
            v70 = v176;
            v67 = v175;
            v85 = v187;
            v84 = v179;
          }
          else
          {
            *v229 = v72;
            v86[1] = v73;
            v86[2] = v78;
            v86[3] = v79;
            v87 = v86 + 6;
            v86[4] = v84;
            v86[5] = v85;
          }
          v54 -= v72;
          v229 = v87;
          v56 -= v78;
          v55 -= v79;
          v61 -= v84;
          v71 = v190 - v73;
          v62 -= v85;
          v58 = v190 - v73 + v54;
          v59 = v55 + v56;
          v63 = v62 + v61;
        }
        v96 = v229;
        if ((unint64_t)v229 >= v230[0])
        {
          v100 = (int *)__p;
          v101 = 0xAAAAAAAAAAAAAAABLL * (((char *)v229 - (_BYTE *)__p) >> 3) + 1;
          a3 = (uint64_t)v184;
          v99 = v174;
          if (v101 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v230[0] - (_QWORD)__p) >> 3) > v101)
            v101 = 0x5555555555555556 * ((uint64_t)(v230[0] - (_QWORD)__p) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v230[0] - (_QWORD)__p) >> 3) >= 0x555555555555555)
            v102 = 0xAAAAAAAAAAAAAAALL;
          else
            v102 = v101;
          if (v102)
          {
            v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v230, v102);
            v96 = v229;
            v100 = (int *)__p;
          }
          else
          {
            v103 = 0;
          }
          v104 = (int *)&v103[8 * (((char *)v229 - (_BYTE *)__p) >> 3)];
          *v104 = v71;
          v104[1] = v71;
          v104[2] = v55;
          v104[3] = v55;
          v105 = &v103[24 * v102];
          v104[4] = v62;
          v104[5] = v62;
          v97 = v104 + 6;
          if (v96 == v100)
          {
            v98 = v167;
          }
          else
          {
            v98 = v167;
            do
            {
              v106 = *(_OWORD *)(v96 - 6);
              *((_QWORD *)v104 - 1) = *((_QWORD *)v96 - 1);
              *(_OWORD *)(v104 - 6) = v106;
              v104 -= 6;
              v96 -= 6;
            }
            while (v96 != v100);
            v100 = (int *)__p;
          }
          __p = v104;
          v229 = v97;
          v230[0] = v105;
          if (v100)
            operator delete(v100);
        }
        else
        {
          *v229 = v71;
          v96[1] = v71;
          v96[2] = v55;
          v96[3] = v55;
          v97 = v96 + 6;
          v96[4] = v62;
          v96[5] = v62;
          a3 = (uint64_t)v184;
          v98 = v167;
          v99 = v174;
        }
        v229 = v97;
        operator delete(v98);
        v53 = __p;
        v169 = (char *)v97;
        if (v97 == __p)
        {
          if (!v99)
            ZinAssertImpl("Error: pad decomposition failed for large asymmetric pad");
        }
        else
        {
LABEL_205:
          v107 = *(_OWORD *)(a1 + 16);
          v225 = *(_OWORD *)a1;
          v226 = v107;
          v227 = *(_QWORD *)(a1 + 32);
          v168 = v53;
          do
          {
            v108 = *((_DWORD *)v53 + 1);
            v110 = *((_DWORD *)v53 + 2);
            v109 = *((_DWORD *)v53 + 3);
            v112 = *((_DWORD *)v53 + 4);
            v111 = *((_DWORD *)v53 + 5);
            v170 = v53;
            v113 = v108 + *(_DWORD *)v53;
            v114 = v109 + v110;
            v115 = v111 + v112;
            v172 = v110;
            v173 = *(_DWORD *)v53;
            v116 = *(_DWORD *)v53 == v108 && v110 == v109;
            v171 = *((_DWORD *)v53 + 4);
            v118 = !v116 || v112 != v111;
            v188 = v118;
            if (v113)
              v119 = 0;
            else
              v119 = v114 == 0;
            if (!v119 || v115 != 0)
            {
              v121 = v111 + v112;
              v122 = v109 + v110;
              v123 = v113;
              do
              {
                if (v183 == 3)
                  v124 = *(_DWORD *)(a3 + 136);
                else
                  v124 = GetMaxLogicalKernelWidthForLargeKernelMode(a3, v183) - 1;
                if (v124 >= *(_DWORD *)(a3 + 144))
                  v124 = *(_DWORD *)(a3 + 144);
                v125 = *(_DWORD *)(a3 + 112) - 1;
                if (v125 >= *(_DWORD *)(a3 + 152))
                  v125 = *(_DWORD *)(a3 + 152);
                v126 = *(_DWORD *)(a3 + 128) - 1;
                if (v126 >= *(_DWORD *)(a3 + 160))
                  v126 = *(_DWORD *)(a3 + 160);
                v128 = v123 > v124 || v113 > v124;
                v129 = v124 & ~v128;
                v196[1] = 0;
                v196[2] = 0;
                v131 = v122 > v125 || v114 > v125;
                v197 = 0;
                v132 = v125 & ~v131;
                v196[3] = 0;
                v134 = v121 > v126 || v115 > v126;
                v199 = 0;
                v200 = 0;
                v135 = v126 & ~v134;
                v198 = 0;
                v204 = -1;
                v205 = -1;
                v206 = -1;
                v207 = -1;
                v208 = 0u;
                v209 = 0u;
                v210 = 0u;
                v211 = 0;
                v212 = 1;
                v213 = 0;
                v214 = 0;
                v215 = -1;
                v216 = -1;
                v217 = -1;
                v218 = -1;
                v219 = 0x3F80000000000006;
                v196[0] = off_24C01CAD8;
                BYTE4(v221) = 0;
                v220 = 0;
                LODWORD(v221) = 2;
                v201 = *(_QWORD *)(v182 + 64);
                *(_QWORD *)&v136 = 0x100000001;
                *((_QWORD *)&v136 + 1) = 0x100000001;
                *(_OWORD *)&v223[8] = v136;
                *(_QWORD *)&v223[24] = 0x100000001;
                if (v129 >= v123)
                  v137 = v123;
                else
                  v137 = v129;
                if (v129 >= v113)
                  v129 = v113;
                if (v132 >= v122)
                  v138 = v122;
                else
                  v138 = v132;
                if (v132 >= v114)
                  v132 = v114;
                if (v135 >= v121)
                  v139 = v121;
                else
                  v139 = v135;
                if (v135 >= v115)
                  v135 = v115;
                *(_DWORD *)v224 = v137;
                *(_DWORD *)&v224[4] = v129;
                *(_DWORD *)&v224[8] = v138;
                *(_DWORD *)&v224[12] = v132;
                *(_DWORD *)&v224[16] = v139;
                *(_DWORD *)&v224[20] = v135;
                v203 = *(_QWORD *)"";
                v202 = *(_QWORD *)(a1 + 8);
                *((_QWORD *)&v221 + 1) = v202;
                *(_QWORD *)&v222 = v137 + 1;
                *((_QWORD *)&v222 + 1) = v138 + 1;
                *(_QWORD *)v223 = v139 + 1;
                *(_DWORD *)&v224[24] = v181;
                __p = (void *)0x100000001;
                LODWORD(v229) = 1;
                ZinGetOutputTensorDimension((uint64_t)&v225, &v222, (unsigned int *)&v223[20], (unsigned int *)&v223[20], (int *)v224, v202, (int *)&__p, (uint64_t)&v193);
                v140 = a5;
                if ((v188 & 1) != 0)
                {
                  v141 = (*(_DWORD *)v224 - v173) & ~((*(_DWORD *)v224 - v173) >> 31) | ((unint64_t)((*(_DWORD *)&v224[8] - v172) & ~((*(_DWORD *)&v224[8] - v172) >> 31)) << 32);
                  LODWORD(v142) = *(_DWORD *)&v224[16] - v171;
                }
                else
                {
                  v141 = ((*((_QWORD *)&v222 + 1) + (v222 < 0)) << 31) & 0xFFFFFFFF00000000 | ((uint64_t)v222 / 2);
                  v142 = (*(_QWORD *)v223 + (unint64_t)(*(uint64_t *)v223 < 0)) >> 1;
                }
                v191 = v142;
                v143 = a5[1];
                v144 = a5[2];
                if (v143 >= v144)
                {
                  v148 = 0xCCCCCCCCCCCCCCCDLL * ((v143 - *a5) >> 3);
                  v149 = v148 + 1;
                  if (v148 + 1 > 0x666666666666666)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v150 = 0xCCCCCCCCCCCCCCCDLL * ((v144 - *a5) >> 3);
                  if (2 * v150 > v149)
                    v149 = 2 * v150;
                  if (v150 >= 0x333333333333333)
                    v151 = 0x666666666666666;
                  else
                    v151 = v149;
                  if (v151)
                    v152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a5 + 2), v151);
                  else
                    v152 = 0;
                  v153 = &v152[40 * v148];
                  v154 = v193;
                  v155 = v194;
                  *((_QWORD *)v153 + 4) = v195;
                  *(_OWORD *)v153 = v154;
                  *((_OWORD *)v153 + 1) = v155;
                  v157 = *a5;
                  v156 = a5[1];
                  v158 = v153;
                  if (v156 == *a5)
                  {
                    v161 = a5;
                  }
                  else
                  {
                    do
                    {
                      v159 = *(_OWORD *)(v156 - 40);
                      v160 = *(_OWORD *)(v156 - 24);
                      *((_QWORD *)v158 - 1) = *((_QWORD *)v156 - 1);
                      *(_OWORD *)(v158 - 24) = v160;
                      *(_OWORD *)(v158 - 40) = v159;
                      v158 -= 40;
                      v156 -= 40;
                    }
                    while (v156 != v157);
                    v161 = a5;
                    v156 = *a5;
                  }
                  v147 = v153 + 40;
                  *v161 = v158;
                  v161[1] = v153 + 40;
                  v161[2] = &v152[40 * v151];
                  if (v156)
                  {
                    operator delete(v156);
                    v140 = a5;
                  }
                  else
                  {
                    v140 = v161;
                  }
                }
                else
                {
                  v145 = v193;
                  v146 = v194;
                  *((_QWORD *)v143 + 4) = v195;
                  *(_OWORD *)v143 = v145;
                  *((_OWORD *)v143 + 1) = v146;
                  v147 = v143 + 40;
                }
                v140[1] = v147;
                v236 = xmmword_207A896A0;
                ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)&__p, (const ZinIrKernelUnitInfo *)v196);
                v233 = *(_OWORD *)v223;
                v234 = *(_OWORD *)&v223[16];
                v235[0] = *(_OWORD *)v224;
                *(_OWORD *)((char *)v235 + 12) = *(_OWORD *)&v224[12];
                v231 = v221;
                v232 = v222;
                __p = off_24C01CAD8;
                *(_QWORD *)&v236 = v141;
                DWORD2(v236) = v191;
                v162 = v180[1];
                if (v162 >= v180[2])
                {
                  v163 = std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(v180, (const ZinPadLayerUtils::PadDecomposedDesc *)&__p);
                }
                else
                {
                  ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)v180[1], (const ZinPadLayerUtils::PadDecomposedDesc *)&__p);
                  v163 = v162 + 352;
                  v180[1] = v162 + 352;
                }
                v180[1] = v163;
                ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&__p);
                v123 -= *(_DWORD *)v224;
                v113 -= *(_DWORD *)&v224[4];
                v122 -= *(_DWORD *)&v224[8];
                v114 -= *(_DWORD *)&v224[12];
                v121 -= *(_DWORD *)&v224[16];
                v164 = *(_DWORD *)&v224[20];
                if (v123 | v113 | v122 | v114 | v121)
                  v165 = 0;
                else
                  v165 = v115 == *(_DWORD *)&v224[20];
                v166 = !v165;
                v225 = v193;
                v226 = v194;
                v227 = v195;
                v196[0] = off_24C01ED88;
                if ((_QWORD)v210)
                {
                  *((_QWORD *)&v210 + 1) = v210;
                  operator delete((void *)v210);
                }
                if (*((_QWORD *)&v208 + 1))
                {
                  *(_QWORD *)&v209 = *((_QWORD *)&v208 + 1);
                  operator delete(*((void **)&v208 + 1));
                }
                v115 -= v164;
                ZinIrUnitInfo::~ZinIrUnitInfo(v196);
                a3 = (uint64_t)v184;
              }
              while ((v166 & 1) != 0);
            }
            v53 = v170 + 3;
          }
          while (v170 + 3 != (_QWORD *)v169);
          v53 = v168;
        }
        if (v53)
          operator delete(v53);
        return 1;
      }
      a3 = (uint64_t)v184;
      goto LABEL_205;
    }
    v30 += 8;
  }
  if (v36)
    return 1;
  return ZinPadLayerUtils::DecomposeReflectivePad((__int128 *)a1, (_DWORD *)a2, a4, a5, a6);
}

void sub_206FB6334(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinPadLayerUtils::ApplyPadTransform(uint64_t **a1, uint64_t **a2, const ZinPadLayerUtils::PadDecomposedDesc **a3, uint64_t a4)
{
  ZinIrOpLayer *v7;
  uint64_t v8;
  __n128 v9;
  const ZinPadLayerUtils::PadDecomposedDesc *v10;
  unint64_t v11;
  size_t v12;
  std::string *v13;
  uint64_t *v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  ZinIrOpLayer *ChannelWiseConv;
  uint64_t *v30;
  ZinIrTensor *v31;
  ZinIrTensor::MirInfo *v32;
  char v33;
  const ZinPadLayerUtils::PadDecomposedDesc *v35;
  int U32BackgroundValue;
  _OWORD v38[2];
  int v39;
  ZinIrTensor::MirInfo *v40;
  void *__p[2];
  void *v42;
  std::string v43;
  std::string v44;
  void *v45[2];
  int64_t v46;
  std::string v47;
  std::string v48;
  _QWORD v49[3];
  char v50;
  std::string v51;
  std::string v52;
  _BYTE v53[336];
  unsigned int v54[4];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v7 = (ZinIrOpLayer *)*a2[11];
  v8 = *(a2[15] - 1);
  if (*(char *)(v8 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v8 + 24), *(_QWORD *)(v8 + 32));
  }
  else
  {
    v9 = *(__n128 *)(v8 + 24);
    *(__n128 *)&v51.__r_.__value_.__l.__data_ = v9;
    v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 40);
  }
  U32BackgroundValue = ZinPadLayerUtils::GetU32BackgroundValue((uint64_t)(a2[8] + 2), v9);
  v10 = *a3;
  v35 = a3[1];
  if (*a3 == v35)
    ZinAssertImpl("Error: failed to create channel-wise conv");
  v11 = 0;
  do
  {
    ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)v53, v10);
    if (v54[3] != 1)
      ZinAssertImpl("Error: invalid pad decomposition results. The decomposed unit is not convolution unit");
    if (*((char *)a2 + 47) >= 0)
      v12 = *((unsigned __int8 *)a2 + 47);
    else
      v12 = (size_t)a2[4];
    std::string::basic_string[abi:ne180100]((uint64_t)&v47, v12 + 2);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v47;
    else
      v13 = (std::string *)v47.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if (*((char *)a2 + 47) >= 0)
        v14 = (uint64_t *)(a2 + 3);
      else
        v14 = a2[3];
      memmove(v13, v14, v12);
    }
    strcpy((char *)v13 + v12, "__");
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v51;
    else
      v15 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    else
      size = v51.__r_.__value_.__l.__size_;
    v17 = std::string::append(&v47, (const std::string::value_type *)v15, size);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v44, "padtoconv");
    v19 = std::string::append(&v44, "_xfm", 4uLL);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v46 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)v45 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v46 >= 0)
      v21 = v45;
    else
      v21 = (void **)v45[0];
    if (v46 >= 0)
      v22 = HIBYTE(v46);
    else
      v22 = (std::string::size_type)v45[1];
    v23 = std::string::append(&v52, (const std::string::value_type *)v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v43, v11);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v43;
    else
      v25 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      v26 = v43.__r_.__value_.__l.__size_;
    v27 = std::string::append(&v48, (const std::string::value_type *)v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v42 = (void *)v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(v49, __p);
    if (SHIBYTE(v42) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46) < 0)
      operator delete(v45[0]);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    ChannelWiseConv = (ZinIrOpLayer *)ZinPadLayerUtils::CreateChannelWiseConv(v7, (uint64_t)v53, a4, v54, U32BackgroundValue, (uint64_t)v49);
    if (!ChannelWiseConv)
      ZinAssertImpl("Error: failed to create channel-wise conv");
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
    v48.__r_.__value_.__l.__size_ = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v48);
    ZinIrOpLayerGraph::AddNode(a1, ChannelWiseConv, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      v42 = __p[1];
      operator delete(__p[1]);
    }
    ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)v7, (uint64_t)ChannelWiseConv, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    v49[0] = off_24C01FBB0;
    if (v50 < 0)
      operator delete((void *)v49[1]);
    ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)v53);
    v10 = (const ZinPadLayerUtils::PadDecomposedDesc *)((char *)v10 + 352);
    ++v11;
    v7 = ChannelWiseConv;
  }
  while (v10 != v35);
  v30 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ChannelWiseConv + 32))(ChannelWiseConv, 0, 0);
  v31 = (ZinIrTensor *)((uint64_t (*)(uint64_t **, _QWORD, _QWORD))(*a2)[4])(a2, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v31, &v40);
  ZinIrTensor::SetTensorMirInfo(v30, &v40);
  v32 = v40;
  v40 = 0;
  if (v32)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v40, v32);
  memset(v38, 0, sizeof(v38));
  v39 = 1065353216;
  v33 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, a2, ChannelWiseConv, v38);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v38);
  if ((v33 & 1) == 0)
    ZinAssertImpl("Error: Failed in moving outgoing edges");
  ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)a2, 0);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  return 0;
}

void sub_206FB6864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ZinPadLayerUtils::GetU32BackgroundValue(uint64_t a1, __n128 a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 64);
  switch(v2)
  {
    case 12:
      a2.n128_u16[0] = *(_WORD *)(a1 + 224);
      return ZinF16ToE4M3(1, 0, a2);
    case 2:
      _H0 = *(_WORD *)(a1 + 224);
      __asm { FCVT            S0, H0 }
      return (int)_S0;
    case 1:
      _H0 = *(_WORD *)(a1 + 224);
      __asm { FCVT            S0, H0 }
      return (int)_S0;
    default:
      return *(unsigned __int16 *)(a1 + 224);
  }
}

uint64_t ZinPadLayerUtils::CreateChannelWiseConv(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4, int a5, uint64_t a6)
{
  uint64_t v12;
  __int128 v13;
  int v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  ZinIrConvolutionInfo *v27;
  uint64_t v28;
  int v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  void **v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  ZinIrConvolutionInfo *v53;
  ZinIrKernel *v54;
  std::string v56;
  void *__p[2];
  int64_t v58;
  std::string v59;
  std::string v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::string v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  ZinIrConvolutionInfo *v69;
  std::string v70;
  ZinIrKernel *v71;
  std::string v72;
  uint64_t v73;
  uint64_t v74;
  std::string v75;
  __int128 v76;
  int64_t v77;
  __int128 v78;
  std::string::size_type v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  char v90;
  char v91;
  int v92;

  v12 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 32))(a1, 0, 0);
  v86 = 0x100000001;
  v80 = *(_OWORD *)(a2 + 256);
  v81 = *(_QWORD *)(a2 + 272);
  v84 = *(_OWORD *)(a2 + 304);
  v85 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)&v13 = 0x100000001;
  *((_QWORD *)&v13 + 1) = 0x100000001;
  v82 = v13;
  v83 = 0x100000001;
  v90 = *(_BYTE *)(a2 + 244);
  v91 = 0;
  v89 = *(_QWORD *)(a2 + 248);
  v14 = *(_DWORD *)(a2 + 328);
  v87 = 1;
  v88 = v14;
  v92 = a5;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(&v63, a6, 2);
  v15 = std::string::append(&v63, "_", 1uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v75, "cwise_conv");
  v17 = std::string::append(&v75, "_xfm", 4uLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v77 = v17->__r_.__value_.__r.__words[2];
  v76 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v77 >= 0)
    v19 = (const std::string::value_type *)&v76;
  else
    v19 = (const std::string::value_type *)v76;
  if (v77 >= 0)
    v20 = HIBYTE(v77);
  else
    v20 = *((_QWORD *)&v76 + 1);
  v21 = std::string::append(&v70, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v72, "_kernel", 7uLL);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v79 = v23->__r_.__value_.__r.__words[2];
  v78 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77) < 0)
    operator delete((void *)v76);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  *(int64x2_t *)&v72.__r_.__value_.__l.__data_ = vdupq_n_s64(1uLL);
  v25 = *(_QWORD *)(a2 + 256);
  v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 264);
  v73 = v25;
  v74 = *(_QWORD *)(a2 + 272);
  LODWORD(v70.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::vector(&v76, v25 * v72.__r_.__value_.__r.__words[2] * v74, &v70);
  *(_DWORD *)(v76 + 4 * (a4[2] + (*a4 + v73 * a4[1]) * v74)) = 1065353216;
  ZinIrKernel::CreateDynamicKernel(&v78, (uint64_t)&v80, (float **)&v76, *(unsigned int *)(a2 + 84), (int64x2_t *)&v72, 2uLL, a3, 1, (uint64_t *)&v71);
  v26 = *(_QWORD *)(v12 + 56);
  v63.__r_.__value_.__r.__words[0] = 0x100000001;
  LODWORD(v63.__r_.__value_.__r.__words[1]) = 1;
  ZinGetOutputTensorDimension(v12 + 48, &v80, (unsigned int *)&v82, (unsigned int *)&v82 + 3, (int *)&v84, v26, (int *)&v63, (uint64_t)&v70);
  v27 = (ZinIrConvolutionInfo *)operator new();
  ZinIrConvolutionInfo::ZinIrConvolutionInfo(v27);
  v69 = v27;
  v28 = a1[2];
  v29 = *(_DWORD *)(v12 + 88);
  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a6 + 16))(&v75, a6, 0);
  v66 = 0;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0uLL;
  LODWORD(v63.__r_.__value_.__l.__data_) = 0;
  v64 = 0;
  *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = 0uLL;
  v65 = 0;
  ZinIrTensor::CreateTensor(v28, v29, (__int128 *)&v70, (__int128 *)&v75, &v66, (uint64_t *)&v60, (unsigned int *)&v63, &v67);
  size = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
  if (v60.__r_.__value_.__l.__size_)
  {
    v31 = (unint64_t *)(v60.__r_.__value_.__l.__size_ + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v33 = v66;
  v66 = 0;
  if (v33)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v66, v33);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  v34 = operator new();
  v61 = v67;
  v62 = v68;
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(&v59, a6, 1);
  v37 = std::string::append(&v59, "_", 1uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v56, "cwise_conv");
  v39 = std::string::append(&v56, "_xfm", 4uLL);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v58 = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (v58 >= 0)
    v41 = __p;
  else
    v41 = (void **)__p[0];
  if (v58 >= 0)
    v42 = HIBYTE(v58);
  else
    v42 = (std::string::size_type)__p[1];
  v43 = std::string::append(&v60, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  v45 = std::string::append(&v75, "_layer", 6uLL);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  ZinConvLayer::ZinConvLayer(v34, &v69, &v61, &v63, &v71);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v47 = v62;
  if (v62)
  {
    v48 = (unint64_t *)&v62->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v68;
  if (v68)
  {
    v51 = (unint64_t *)&v68->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v69;
  v69 = 0;
  if (v53)
    (*(void (**)(ZinIrConvolutionInfo *))(*(_QWORD *)v53 + 8))(v53);
  v54 = v71;
  v71 = 0;
  if (v54)
  {
    ZinIrKernel::~ZinIrKernel(v54);
    MEMORY[0x20BD002F8]();
  }
  if ((_QWORD)v76)
  {
    *((_QWORD *)&v76 + 1) = v76;
    operator delete((void *)v76);
  }
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
  return v34;
}

void sub_206FB7038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,ZinIrKernel *a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  void *v71;

  if (a42 < 0)
    operator delete(__p);
  if (a67 < 0)
    operator delete(a62);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  MEMORY[0x20BD002F8](v67, 0x10B3C4024B96488);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  v70 = a49;
  a49 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a55, 0);
  v71 = *(void **)(v68 - 256);
  if (v71)
  {
    *(_QWORD *)(v68 - 248) = v71;
    operator delete(v71);
  }
  if (*(char *)(v68 - 201) < 0)
    operator delete(*(void **)(v68 - 224));
  _Unwind_Resume(a1);
}

void ZinPadLayerUtils::GetConvChain(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  __n128 v8;
  int U32BackgroundValue;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  uint64_t ChannelWiseConv;
  uint64_t v22;
  char *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  std::string v34;
  void *__p[2];
  std::string::size_type v36;
  _QWORD v37[3];
  char v38;
  void *v39[2];
  char *v40;

  v39[0] = 0;
  v39[1] = 0;
  v40 = 0;
  std::vector<ZinIrOpLayer *>::reserve(v39, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 5));
  v7 = **(_QWORD **)(a1 + 88);
  U32BackgroundValue = ZinPadLayerUtils::GetU32BackgroundValue(*(_QWORD *)(a1 + 64) + 16, v8);
  v10 = *a2;
  v11 = a2[1];
  if (*a2 == v11)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v12 = U32BackgroundValue;
    while (1)
    {
      if (*(char *)(v7 + 47) >= 0)
        v13 = *(unsigned __int8 *)(v7 + 47);
      else
        v13 = *(_QWORD *)(v7 + 32);
      std::string::basic_string[abi:ne180100]((uint64_t)&v34, v13 + 2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v34;
      else
        v14 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if (v13)
      {
        if (*(char *)(v7 + 47) >= 0)
          v15 = (const void *)(v7 + 24);
        else
          v15 = *(const void **)(v7 + 24);
        memmove(v14, v15, v13);
      }
      strcpy((char *)v14 + v13, "__");
      v16 = *(char *)(a1 + 47);
      if (v16 >= 0)
        v17 = (const std::string::value_type *)(a1 + 24);
      else
        v17 = *(const std::string::value_type **)(a1 + 24);
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(a1 + 47);
      else
        v18 = *(_QWORD *)(a1 + 32);
      v19 = std::string::append(&v34, v17, v18);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v36 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      ZinObjectNameFactory::ZinObjectNameFactory(v37, __p);
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      ChannelWiseConv = ZinPadLayerUtils::CreateChannelWiseConv((_QWORD *)v7, v10, a3, (unsigned int *)(v10 + 336), v12, (uint64_t)v37);
      v22 = ChannelWiseConv;
      if (ChannelWiseConv)
      {
        v23 = (char *)v39[1];
        if (v39[1] >= v40)
        {
          v25 = ((char *)v39[1] - (char *)v39[0]) >> 3;
          if ((unint64_t)(v25 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v26 = (v40 - (char *)v39[0]) >> 2;
          if (v26 <= v25 + 1)
            v26 = v25 + 1;
          if ((unint64_t)(v40 - (char *)v39[0]) >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v40, v27);
          else
            v28 = 0;
          v29 = (uint64_t *)&v28[8 * v25];
          *v29 = v22;
          v24 = v29 + 1;
          v31 = (char *)v39[0];
          v30 = (char *)v39[1];
          if (v39[1] != v39[0])
          {
            do
            {
              v32 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *--v29 = v32;
            }
            while (v30 != v31);
            v30 = (char *)v39[0];
          }
          v39[0] = v29;
          v39[1] = v24;
          v40 = &v28[8 * v27];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_QWORD *)v39[1] = ChannelWiseConv;
          v24 = v23 + 8;
        }
        v39[1] = v24;
        v7 = v22;
      }
      else
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
      }
      v37[0] = off_24C01FBB0;
      if (v38 < 0)
        operator delete((void *)v37[1]);
      if (!v22)
        break;
      v10 += 352;
      if (v10 == v11)
      {
        *(_OWORD *)a4 = *(_OWORD *)v39;
        a4[2] = v40;
        return;
      }
    }
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
}

void sub_206FB74FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x2_t ZinPadLayerUtils::FuseConvWithConsumer@<D0>(ZinPadLayerUtils *this@<X0>, const ZinIrPadding *a2@<X1>, uint64_t a3@<X8>)
{
  int32x2_t result;

  *(int32x4_t *)a3 = vsraq_n_s32(*(int32x4_t *)a2, (int32x4_t)vsraq_n_u32(*(uint32x4_t *)this, *(uint32x4_t *)this, 0x1FuLL), 1uLL);
  result = (int32x2_t)vsra_n_u32(*(uint32x2_t *)((char *)this + 16), *(uint32x2_t *)((char *)this + 16), 0x1FuLL);
  *(int32x2_t *)(a3 + 16) = vsra_n_s32(*(int32x2_t *)((char *)a2 + 16), result, 1uLL);
  return result;
}

int32x2_t ZinPadLayerUtils::FusePadWithConsumer@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int *a4@<X3>, uint64_t a5@<X8>, int32x4_t a6@<Q0>)
{
  signed int v6;
  int32x2_t result;

  if (a3)
  {
    if (*a4 >= 2 && *(_QWORD *)a2
      || a4[1] >= 2 && *(_QWORD *)(a2 + 8)
      || (v6 = a4[2], a6.i64[0] = *(_QWORD *)a4, v6 >= 2) && *(_QWORD *)(a2 + 16))
    {
      ZinAssertImpl("Unsupported pad to deconv fusion");
    }
  }
  else
  {
    a6.i64[0] = 0x100000001;
    v6 = 1;
  }
  *(int32x4_t *)a5 = vmlaq_s32(*(int32x4_t *)a2, *(int32x4_t *)(a1 + 156), vzip1q_s32(a6, a6));
  result = *(int32x2_t *)(a1 + 172);
  *(int32x2_t *)(a5 + 16) = vmla_s32(*(int32x2_t *)(a2 + 16), result, vdup_n_s32(v6));
  return result;
}

uint64_t ZinPadLayerUtils::ApplyReflectivePadTransform(uint64_t **a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void **v10;
  const void *v11;
  uint64_t v12;
  int v13;
  ZinIrOpLayer *ViewFromOffset;
  _BOOL4 v15;
  int v16;
  char *v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  ZinIrOpLayer **v23;
  char *v24;
  char *v25;
  ZinIrOpLayer *v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  ZinIrOpLayer *v30;
  _BOOL4 v31;
  int v32;
  char *v33;
  void *v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  ZinIrOpLayer **v39;
  char *v40;
  char *v41;
  ZinIrOpLayer *v42;
  _OWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  _QWORD *v48;
  uint64_t Interleave;
  char v50;
  char v51;
  uint64_t Hal;
  uint64_t v53;
  __int128 v54;
  _QWORD *v55;
  int v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  _QWORD *v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _OWORD *v75;
  ZinIrOpLayer *Transpose;
  _BOOL4 v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  ZinIrOpLayer *v82;
  _BOOL4 v83;
  int v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  ZinIrOpLayer **v91;
  char *v92;
  char *v93;
  ZinIrOpLayer *v94;
  int v95;
  ZinIrOpLayer *v96;
  _BOOL4 v97;
  int v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  ZinIrOpLayer **v105;
  char *v106;
  char *v107;
  ZinIrOpLayer *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  _QWORD *v120;
  int v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  char v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  _QWORD *v134;
  int v135;
  _QWORD *v136;
  uint64_t v137;
  __int128 v138;
  _OWORD *v139;
  ZinIrOpLayer *v140;
  _BOOL4 v141;
  int v142;
  int v143;
  _BOOL4 v144;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  ZinIrTensor *v154;
  ZinIrOpLayer **v156;
  uint64_t v158;
  _OWORD v159[2];
  int v160;
  _QWORD *v161;
  _QWORD *v162;
  _BYTE v163[40];
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  _QWORD *v173;
  void *v174;
  uint64_t v175;
  _QWORD *v176;
  void *v177;
  char *v178;
  char *v179;
  void *v180;
  char *v181;
  char *v182;
  void *v183;
  void *v184;
  _OWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  void *v188;
  void *v189;
  unint64_t v190;
  void *v191;
  void *v192;
  unint64_t v193;
  _QWORD v194[3];
  char v195;
  void *v196;
  _BYTE *v197;
  ZinIrOpLayer **v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  __int16 v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  void *v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  void *v216;
  void *v217;
  void *v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  int v223;
  void *v224[2];
  __int128 v225;
  uint64_t v226;
  void *__p[2];
  char v228;
  int v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 64);
  if (*(_DWORD *)(v3 + 8) != 58)
LABEL_248:
    ZinAssertImpl("Error: reflective pad lowering failed. The layer is not a pad layer with reflective padding");
  for (i = *(_QWORD *)(v3 + 216); i != *(_QWORD *)(v3 + 224); i += 8)
  {
    if (*(_DWORD *)(i + 4) != 6)
      goto LABEL_248;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 96) - 8);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v149 = *(unsigned int *)(v3 + 172);
  v8 = *(unsigned int *)(v3 + 180);
  v148 = *(unsigned int *)(v3 + 176);
  v150 = *(unsigned int *)(v3 + 184);
  v154 = (ZinIrTensor *)v7;
  v153 = *(_DWORD *)(v7 + 88);
  v158 = *(_QWORD *)(a2 + 16);
  v156 = (ZinIrOpLayer **)a2;
  if (*(char *)(a2 + 47) >= 0)
    v9 = *(unsigned __int8 *)(a2 + 47);
  else
    v9 = *(_QWORD *)(a2 + 32);
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 15);
  if (v228 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v9)
  {
    if (*(char *)(a2 + 47) >= 0)
      v11 = (const void *)(a2 + 24);
    else
      v11 = *(const void **)(a2 + 24);
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "_reflectivepad_");
  ZinObjectNameFactory::ZinObjectNameFactory(v194, __p);
  if (v228 < 0)
    operator delete(__p[0]);
  v192 = 0;
  v191 = 0;
  v193 = 0;
  v189 = 0;
  v188 = 0;
  v190 = 0;
  v151 = v8;
  if ((int)v8 < 1)
  {
    v27 = 0;
    v13 = 1;
  }
  else
  {
    v12 = 0;
    v13 = 1;
    do
    {
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + 352 * v12));
      if (v232 != 17)
        ZinAssertImpl("Error: invalid decomposition results for reflective padding. An input view unit is expected");
      ViewFromOffset = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(v158, (uint64_t)v194, (uint64_t)v154, v231, v229, v230);
      v198 = v156;
      *(_QWORD *)v163 = &v198;
      *(_QWORD *)&v163[8] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v216, v163);
      v15 = ZinIrOpLayerGraph::AddNode(a1, ViewFromOffset, (ZinIrOpLayer ***)&v216);
      v216 = &unk_24C02BB18;
      if (v217)
      {
        v218 = v217;
        operator delete(v217);
      }
      v16 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v6, (uint64_t)ViewFromOffset, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v17 = (char *)v192;
      if ((unint64_t)v192 >= v193)
      {
        v19 = ((_BYTE *)v192 - (_BYTE *)v191) >> 3;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v20 = (uint64_t)(v193 - (_QWORD)v191) >> 2;
        if (v20 <= v19 + 1)
          v20 = v19 + 1;
        if (v193 - (unint64_t)v191 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v193, v21);
        else
          v22 = 0;
        v23 = (ZinIrOpLayer **)&v22[8 * v19];
        *v23 = ViewFromOffset;
        v18 = v23 + 1;
        v24 = (char *)v192;
        v25 = (char *)v191;
        if (v192 != v191)
        {
          do
          {
            v26 = (ZinIrOpLayer *)*((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v23 = v26;
          }
          while (v24 != v25);
          v24 = (char *)v191;
        }
        v191 = v23;
        v192 = v18;
        v193 = (unint64_t)&v22[8 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_QWORD *)v192 = ViewFromOffset;
        v18 = v17 + 8;
      }
      ++v12;
      v192 = v18;
      v13 &= v15 & v16;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p);
    }
    while (v12 != v8);
    v27 = v8;
  }
  if ((int)v150 >= 1)
  {
    v28 = v27;
    v29 = v27 + v150;
    do
    {
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + 352 * v28));
      if (v232 != 17)
        ZinAssertImpl("Error: invalid decomposition results for reflective padding. An input view unit is expected");
      v30 = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(v158, (uint64_t)v194, (uint64_t)v154, v231, v229, v230);
      v198 = v156;
      *(_QWORD *)v163 = &v198;
      *(_QWORD *)&v163[8] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v216, v163);
      v31 = ZinIrOpLayerGraph::AddNode(a1, v30, (ZinIrOpLayer ***)&v216);
      v216 = &unk_24C02BB18;
      if (v217)
      {
        v218 = v217;
        operator delete(v217);
      }
      v32 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v6, (uint64_t)v30, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v33 = (char *)v189;
      if ((unint64_t)v189 >= v190)
      {
        v35 = ((_BYTE *)v189 - (_BYTE *)v188) >> 3;
        if ((unint64_t)(v35 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v36 = (uint64_t)(v190 - (_QWORD)v188) >> 2;
        if (v36 <= v35 + 1)
          v36 = v35 + 1;
        if (v190 - (unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v36;
        if (v37)
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v190, v37);
        else
          v38 = 0;
        v39 = (ZinIrOpLayer **)&v38[8 * v35];
        *v39 = v30;
        v34 = v39 + 1;
        v40 = (char *)v189;
        v41 = (char *)v188;
        if (v189 != v188)
        {
          do
          {
            v42 = (ZinIrOpLayer *)*((_QWORD *)v40 - 1);
            v40 -= 8;
            *--v39 = v42;
          }
          while (v40 != v41);
          v40 = (char *)v188;
        }
        v188 = v39;
        v189 = v34;
        v190 = (unint64_t)&v38[8 * v37];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_QWORD *)v189 = v30;
        v34 = v33 + 8;
      }
      ++v28;
      ++v27;
      v189 = v34;
      v13 &= v31 & v32;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p);
    }
    while (v27 != v29);
    v27 = v28;
    LODWORD(v8) = v151;
  }
  v43 = (_OWORD *)((char *)v154 + 48);
  if ((int)v8 >= 1)
  {
    v44 = 0;
    v146 = v27;
    v45 = 352 * v27;
    do
    {
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + v45));
      if (v232 != 3 || v229 != 3)
        ZinAssertImpl("Error: invalid decomposition results for reflective padding. A concat unit at height axis is expected");
      v47 = *((_QWORD *)v191 + v44);
      v48 = operator new(0x10uLL);
      v212 = v48 + 2;
      *v48 = v47;
      v48[1] = v6;
      v210 = v48;
      v211 = (uint64_t)(v48 + 2);
      v183 = 0;
      Interleave = ZinIrTensor::GetInterleave(v154);
      v51 = v50;
      Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(v158 + 160));
      v198 = (ZinIrOpLayer **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
      v199 = (unint64_t)(v158 + 176);
      v200 = 0uLL;
      LODWORD(v201) = 0;
      if (v51)
        v53 = Interleave;
      else
        v53 = 1;
      *(_DWORD *)v163 = v153;
      v54 = *((_OWORD *)v154 + 4);
      *(_OWORD *)&v163[8] = *v43;
      *(_OWORD *)&v163[24] = v54;
      v164 = *((_QWORD *)v154 + 10);
      v165 = 0;
      v166 = v53;
      v167 = 1;
      v168 = 0;
      v169 = 0;
      v172 = 0;
      ++v44;
      v170 = 0;
      v171 = 0;
      std::vector<ZinIrTensorInfo>::vector(v224, v44, (__int128 *)v163);
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)&v216, (uint64_t)&v198, (uint64_t)__p, v224[0], 0xEEEEEEEEEEEEEEEFLL * (((char *)v224[1] - (char *)v224[0]) >> 3));
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v216);
      if (v219)
        ZinAssertImpl("Concat layer validation failed.");
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)&v216);
      if (v224[0])
      {
        v224[1] = v224[0];
        operator delete(v224[0]);
      }
      if (SHIBYTE(v200) < 0)
        operator delete(*((void **)&v199 + 1));
      v187 = 0;
      ZinBuilder::CreateConcat(v158, (uint64_t)v194, (char **)&v210, 2, 1, &v187, 0, (uint64_t)&v216);
      v55 = v187;
      v187 = 0;
      if (v55)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v187, v55);
      v224[0] = v156;
      v198 = (ZinIrOpLayer **)v224;
      *(_QWORD *)&v199 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v163, &v198);
      v56 = ZinBuilder::AddConcatToGraph(a1, (uint64_t *)&v210, &v216, (ZinIrOpLayer ***)v163);
      *(_QWORD *)v163 = &unk_24C02BB18;
      if (*(_QWORD *)&v163[8])
      {
        *(_QWORD *)&v163[16] = *(_QWORD *)&v163[8];
        operator delete(*(void **)&v163[8]);
      }
      v6 = *((_QWORD *)v217 - 1);
      if ((_BYTE)v219 && v216)
      {
        v217 = v216;
        operator delete(v216);
      }
      v57 = v183;
      v183 = 0;
      if (v57)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v183, v57);
      if (v210)
      {
        v211 = (uint64_t)v210;
        operator delete(v210);
      }
      v13 &= v56;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p);
      v45 += 352;
    }
    while (v151 != v44);
    v27 = v146 + v44;
    LODWORD(v8) = v151;
  }
  if ((int)v150 >= 1)
  {
    v58 = 0;
    v147 = v27;
    v59 = 352 * v27;
    do
    {
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + v59));
      if (v232 != 3 || v229 != 3)
        ZinAssertImpl("Error: invalid decomposition results for reflective padding. A concat unit at height axis is expected");
      v61 = *((_QWORD *)v188 + v58);
      v62 = operator new(0x10uLL);
      v212 = v62 + 2;
      *v62 = v6;
      v62[1] = v61;
      v210 = v62;
      v211 = (uint64_t)(v62 + 2);
      v183 = 0;
      v63 = ZinIrTensor::GetInterleave(v154);
      v65 = v64;
      v66 = ZinIrTarget::GetHal(*(ZinIrTarget **)(v158 + 160));
      v198 = (ZinIrOpLayer **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
      v199 = (unint64_t)(v158 + 176);
      v200 = 0uLL;
      LODWORD(v201) = 0;
      if (v65)
        v67 = v63;
      else
        v67 = 1;
      *(_DWORD *)v163 = v153;
      v68 = *((_OWORD *)v154 + 4);
      *(_OWORD *)&v163[8] = *v43;
      *(_OWORD *)&v163[24] = v68;
      v164 = *((_QWORD *)v154 + 10);
      v165 = 0;
      v166 = v67;
      v167 = 1;
      v168 = 0;
      v169 = 0;
      v172 = 0;
      ++v58;
      v170 = 0;
      v171 = 0;
      std::vector<ZinIrTensorInfo>::vector(v224, v58, (__int128 *)v163);
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)&v216, (uint64_t)&v198, (uint64_t)__p, v224[0], 0xEEEEEEEEEEEEEEEFLL * (((char *)v224[1] - (char *)v224[0]) >> 3));
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v216);
      if (v219)
        ZinAssertImpl("Concat layer validation failed");
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)&v216);
      if (v224[0])
      {
        v224[1] = v224[0];
        operator delete(v224[0]);
      }
      if (SHIBYTE(v200) < 0)
        operator delete(*((void **)&v199 + 1));
      v186 = 0;
      ZinBuilder::CreateConcat(v158, (uint64_t)v194, (char **)&v210, 2, 1, &v186, 0, (uint64_t)&v216);
      v69 = v186;
      v186 = 0;
      if (v69)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v186, v69);
      v224[0] = v156;
      v198 = (ZinIrOpLayer **)v224;
      *(_QWORD *)&v199 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v163, &v198);
      v70 = ZinBuilder::AddConcatToGraph(a1, (uint64_t *)&v210, &v216, (ZinIrOpLayer ***)v163);
      *(_QWORD *)v163 = &unk_24C02BB18;
      if (*(_QWORD *)&v163[8])
      {
        *(_QWORD *)&v163[16] = *(_QWORD *)&v163[8];
        operator delete(*(void **)&v163[8]);
      }
      v6 = *((_QWORD *)v217 - 1);
      if ((_BYTE)v219 && v216)
      {
        v217 = v216;
        operator delete(v216);
      }
      v71 = v183;
      v183 = 0;
      if (v71)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v183, v71);
      if (v210)
      {
        v211 = (uint64_t)v210;
        operator delete(v210);
      }
      v13 &= v70;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p);
      v59 += 352;
    }
    while (v150 != v58);
    v27 = v147 + v58;
    LODWORD(v8) = v151;
  }
  ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + 352 * v27));
  if (v232 != 21)
    ZinAssertImpl("Error: invalid decomposition results for reflective padding. A transpose unit is expected");
  v72 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0);
  v73 = *(_OWORD *)(v72 + 48);
  v225 = *(_OWORD *)(v72 + 64);
  *(_OWORD *)v224 = v73;
  v226 = *(_QWORD *)(v72 + 80);
  v74 = *((_QWORD *)v154 + 8);
  if ((_QWORD)v225 != (int)v150 + (uint64_t)(int)v8 + v74)
    ZinAssertImpl("Error: invalid decomposition results for reflective padding. The padded height = %zd is not equal to the expected height = %zd with top padding = %d and bot padding = %d", v74, (size_t)v225, v8, v150);
  v75 = operator new(0x10uLL);
  v183 = v75;
  *v75 = xmmword_207A8A860;
  v184 = v75 + 1;
  v185 = v75 + 1;
  Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v158, (uint64_t)v194, (uint64_t)v224, v153, (uint64_t)&v183);
  v198 = v156;
  *(_QWORD *)v163 = &v198;
  *(_QWORD *)&v163[8] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v216, v163);
  v77 = ZinIrOpLayerGraph::AddNode(a1, Transpose, (ZinIrOpLayer ***)&v216);
  v216 = &unk_24C02BB18;
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  v78 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, v6, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v180 = 0;
  v181 = 0;
  v182 = 0;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v152 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
  v79 = v13 & v77 & v78;
  v80 = v27 + 1;
  if ((int)v149 >= 1)
  {
    v81 = 0;
    do
    {
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + 352 * v80));
      if (v223 != 17)
        ZinAssertImpl("Error: invalid decomposition results for reflective padding. An input view unit is expected");
      v82 = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(v158, (uint64_t)v194, v152, v222, v220, v221);
      v210 = v156;
      v198 = (ZinIrOpLayer **)&v210;
      *(_QWORD *)&v199 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v163, &v198);
      v83 = ZinIrOpLayerGraph::AddNode(a1, v82, (ZinIrOpLayer ***)v163);
      *(_QWORD *)v163 = &unk_24C02BB18;
      if (*(_QWORD *)&v163[8])
      {
        *(_QWORD *)&v163[16] = *(_QWORD *)&v163[8];
        operator delete(*(void **)&v163[8]);
      }
      v84 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)Transpose, (uint64_t)v82, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v85 = v181;
      if (v181 >= v182)
      {
        v87 = (v181 - (_BYTE *)v180) >> 3;
        if ((unint64_t)(v87 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v88 = (v182 - (_BYTE *)v180) >> 2;
        if (v88 <= v87 + 1)
          v88 = v87 + 1;
        if ((unint64_t)(v182 - (_BYTE *)v180) >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        if (v89)
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v182, v89);
        else
          v90 = 0;
        v91 = (ZinIrOpLayer **)&v90[8 * v87];
        *v91 = v82;
        v86 = (char *)(v91 + 1);
        v93 = (char *)v180;
        v92 = v181;
        if (v181 != v180)
        {
          do
          {
            v94 = (ZinIrOpLayer *)*((_QWORD *)v92 - 1);
            v92 -= 8;
            *--v91 = v94;
          }
          while (v92 != v93);
          v92 = (char *)v180;
        }
        v180 = v91;
        v181 = v86;
        v182 = &v90[8 * v89];
        if (v92)
          operator delete(v92);
      }
      else
      {
        *(_QWORD *)v181 = v82;
        v86 = v85 + 8;
      }
      v181 = v86;
      v79 &= v83 & v84;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216);
      ++v81;
      ++v80;
    }
    while (v81 != (_DWORD)v149);
  }
  if ((int)v148 >= 1)
  {
    v95 = 0;
    v80 = (int)v80;
    do
    {
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + 352 * v80));
      if (v223 != 17)
        ZinAssertImpl("Error: invalid decomposition results for reflective padding. An input view unit is expected");
      v96 = (ZinIrOpLayer *)ZinBuilder::CreateViewFromOffset(v158, (uint64_t)v194, v152, v222, v220, v221);
      v210 = v156;
      v198 = (ZinIrOpLayer **)&v210;
      *(_QWORD *)&v199 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(v163, &v198);
      v97 = ZinIrOpLayerGraph::AddNode(a1, v96, (ZinIrOpLayer ***)v163);
      *(_QWORD *)v163 = &unk_24C02BB18;
      if (*(_QWORD *)&v163[8])
      {
        *(_QWORD *)&v163[16] = *(_QWORD *)&v163[8];
        operator delete(*(void **)&v163[8]);
      }
      v98 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)Transpose, (uint64_t)v96, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      v99 = v178;
      if (v178 >= v179)
      {
        v101 = (v178 - (_BYTE *)v177) >> 3;
        if ((unint64_t)(v101 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v102 = (v179 - (_BYTE *)v177) >> 2;
        if (v102 <= v101 + 1)
          v102 = v101 + 1;
        if ((unint64_t)(v179 - (_BYTE *)v177) >= 0x7FFFFFFFFFFFFFF8)
          v103 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v103 = v102;
        if (v103)
          v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v179, v103);
        else
          v104 = 0;
        v105 = (ZinIrOpLayer **)&v104[8 * v101];
        *v105 = v96;
        v100 = (char *)(v105 + 1);
        v107 = (char *)v177;
        v106 = v178;
        if (v178 != v177)
        {
          do
          {
            v108 = (ZinIrOpLayer *)*((_QWORD *)v106 - 1);
            v106 -= 8;
            *--v105 = v108;
          }
          while (v106 != v107);
          v106 = (char *)v177;
        }
        v177 = v105;
        v178 = v100;
        v179 = &v104[8 * v103];
        if (v106)
          operator delete(v106);
      }
      else
      {
        *(_QWORD *)v178 = v96;
        v100 = v99 + 8;
      }
      ++v80;
      v178 = v100;
      v79 &= v97 & v98;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216);
      ++v95;
    }
    while (v95 != (_DWORD)v148);
  }
  if ((int)v149 >= 1)
  {
    v109 = 0;
    v110 = 352 * (int)v80;
    do
    {
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + v110));
      if (v223 != 3 || v220 != 2)
        ZinAssertImpl("Error: invalid decomposition results for reflective padding. A concat unit at channel axis is expected");
      v112 = *((_QWORD *)v180 + v109);
      v113 = operator new(0x10uLL);
      v175 = (uint64_t)(v113 + 2);
      v176 = v113 + 2;
      *v113 = v112;
      v113[1] = Transpose;
      v173 = 0;
      v174 = v113;
      v114 = ZinIrTensor::GetInterleave(v154);
      v116 = v115;
      v117 = ZinIrTarget::GetHal(*(ZinIrTarget **)(v158 + 160));
      v210 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 16))(v117);
      v211 = v158 + 176;
      v213 = 0;
      v214 = 0;
      v212 = 0;
      v215 = 0;
      if (v116)
        v118 = v114;
      else
        v118 = 1;
      LODWORD(v198) = v153;
      v119 = *((_OWORD *)v154 + 4);
      v199 = *v43;
      v200 = v119;
      v201 = *((_QWORD *)v154 + 10);
      v202 = 0;
      v203 = v118;
      v204 = 1;
      v205 = 0;
      v206 = 0;
      v209 = 0;
      ++v109;
      v207 = 0;
      v208 = 0;
      std::vector<ZinIrTensorInfo>::vector(&v196, v109, (__int128 *)&v198);
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)v163, (uint64_t)&v210, (uint64_t)&v216, v196, 0xEEEEEEEEEEEEEEEFLL * ((v197 - (_BYTE *)v196) >> 3));
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)v163);
      if (*(_QWORD *)&v163[24])
        ZinAssertImpl("Concat layer validation failed");
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)v163);
      if (v196)
      {
        v197 = v196;
        operator delete(v196);
      }
      if (SHIBYTE(v214) < 0)
        operator delete(v212);
      v162 = 0;
      ZinBuilder::CreateConcat(v158, (uint64_t)v194, (char **)&v174, 0, 1, &v162, 0, (uint64_t)v163);
      v120 = v162;
      v162 = 0;
      if (v120)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v162, v120);
      v196 = v156;
      v210 = &v196;
      v211 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v198, &v210);
      v121 = ZinBuilder::AddConcatToGraph(a1, (uint64_t *)&v174, v163, &v198);
      v198 = (ZinIrOpLayer **)&unk_24C02BB18;
      if ((_QWORD)v199)
      {
        *((_QWORD *)&v199 + 1) = v199;
        operator delete((void *)v199);
      }
      Transpose = *(ZinIrOpLayer **)(*(_QWORD *)&v163[8] - 8);
      if (v163[24] && *(_QWORD *)v163)
      {
        *(_QWORD *)&v163[8] = *(_QWORD *)v163;
        operator delete(*(void **)v163);
      }
      v122 = v173;
      v173 = 0;
      if (v122)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v173, v122);
      if (v174)
      {
        v175 = (uint64_t)v174;
        operator delete(v174);
      }
      v79 &= v121;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216);
      v110 += 352;
    }
    while (v149 != v109);
    LODWORD(v80) = v80 + v109;
  }
  if ((int)v148 >= 1)
  {
    v123 = 0;
    v124 = 352 * (int)v80;
    do
    {
      ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + v124));
      if (v223 != 3 || v220 != 2)
        ZinAssertImpl("Error: invalid decomposition results for reflective padding. A concat unit at channel axis is expected");
      v126 = *((_QWORD *)v177 + v123);
      v127 = operator new(0x10uLL);
      v175 = (uint64_t)(v127 + 2);
      v176 = v127 + 2;
      *v127 = Transpose;
      v127[1] = v126;
      v173 = 0;
      v174 = v127;
      v128 = ZinIrTensor::GetInterleave(v154);
      v130 = v129;
      v131 = ZinIrTarget::GetHal(*(ZinIrTarget **)(v158 + 160));
      v210 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 16))(v131);
      v211 = v158 + 176;
      v213 = 0;
      v214 = 0;
      v212 = 0;
      v215 = 0;
      if (v130)
        v132 = v128;
      else
        v132 = 1;
      LODWORD(v198) = v153;
      v133 = *((_OWORD *)v154 + 4);
      v199 = *v43;
      v200 = v133;
      v201 = *((_QWORD *)v154 + 10);
      v202 = 0;
      v203 = v132;
      v204 = 1;
      v205 = 0;
      v206 = 0;
      v209 = 0;
      ++v123;
      v207 = 0;
      v208 = 0;
      std::vector<ZinIrTensorInfo>::vector(&v196, v123, (__int128 *)&v198);
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)v163, (uint64_t)&v210, (uint64_t)&v216, v196, 0xEEEEEEEEEEEEEEEFLL * ((v197 - (_BYTE *)v196) >> 3));
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)v163);
      if (*(_QWORD *)&v163[24])
        ZinAssertImpl("Concat layer validation failed");
      ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)v163);
      if (v196)
      {
        v197 = v196;
        operator delete(v196);
      }
      if (SHIBYTE(v214) < 0)
        operator delete(v212);
      v161 = 0;
      ZinBuilder::CreateConcat(v158, (uint64_t)v194, (char **)&v174, 0, 1, &v161, 0, (uint64_t)v163);
      v134 = v161;
      v161 = 0;
      if (v134)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v161, v134);
      v196 = v156;
      v210 = &v196;
      v211 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&v198, &v210);
      v135 = ZinBuilder::AddConcatToGraph(a1, (uint64_t *)&v174, v163, &v198);
      v198 = (ZinIrOpLayer **)&unk_24C02BB18;
      if ((_QWORD)v199)
      {
        *((_QWORD *)&v199 + 1) = v199;
        operator delete((void *)v199);
      }
      Transpose = *(ZinIrOpLayer **)(*(_QWORD *)&v163[8] - 8);
      if (v163[24] && *(_QWORD *)v163)
      {
        *(_QWORD *)&v163[8] = *(_QWORD *)v163;
        operator delete(*(void **)v163);
      }
      v136 = v173;
      v173 = 0;
      if (v136)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v173, v136);
      if (v174)
      {
        v175 = (uint64_t)v174;
        operator delete(v174);
      }
      v79 &= v135;
      ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216);
      v124 += 352;
    }
    while (v148 != v123);
    LODWORD(v80) = v80 + v123;
  }
  ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216, (const ZinPadLayerUtils::PadDecomposedDesc *)(*a3 + 352 * (int)v80));
  if (v223 != 21)
    ZinAssertImpl("Error: invalid decomposition results for reflective padding. A transpose unit is expected");
  v137 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
  v138 = *(_OWORD *)(v137 + 64);
  *(_OWORD *)v163 = *(_OWORD *)(v137 + 48);
  *(_OWORD *)&v163[16] = v138;
  *(_QWORD *)&v163[32] = *(_QWORD *)(v137 + 80);
  if (*(_QWORD *)&v163[8] != (int)v148 + (uint64_t)(int)v149 + *(_QWORD *)(v152 + 56))
    ZinAssertImpl("Error: invalid decomposition results for reflective padding. The padded height = %zd is not equal to the expected height = %zd with top padding = %d and bot padding = %d", *((_QWORD *)v154 + 7), (size_t)v224[1], v149, v148);
  v139 = operator new(0x10uLL);
  v210 = v139;
  *v139 = xmmword_207A8A860;
  v212 = v139 + 1;
  v211 = (uint64_t)(v139 + 1);
  v140 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v158, (uint64_t)v194, (uint64_t)v163, v153, (uint64_t)&v210);
  v196 = v156;
  v174 = &v196;
  v175 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v198, &v174);
  v141 = ZinIrOpLayerGraph::AddNode(a1, v140, &v198);
  v198 = (ZinIrOpLayer **)&unk_24C02BB18;
  if ((_QWORD)v199)
  {
    *((_QWORD *)&v199 + 1) = v199;
    operator delete((void *)v199);
  }
  v142 = ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)Transpose, (uint64_t)v140, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  memset(v159, 0, sizeof(v159));
  v160 = 1065353216;
  v143 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v156, v140, v159);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v159);
  v144 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)v156, 0);
  if (v210)
  {
    v211 = (uint64_t)v210;
    operator delete(v210);
  }
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&v216);
  if (v177)
  {
    v178 = (char *)v177;
    operator delete(v177);
  }
  if (v180)
  {
    v181 = (char *)v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)__p);
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  v194[0] = off_24C01FBB0;
  if (v195 < 0)
    operator delete((void *)v194[1]);
  if ((v79 & v141 & v142 & v143 & v144) != 0)
    return 0;
  else
    return 3;
}

void sub_206FB8D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t a64;
  void *a66;
  uint64_t a67;
  void *a69;
  uint64_t a70;
  void *v71;
  void *v72;
  void *v73;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a29);
  v71 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v71;
    operator delete(v71);
  }
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&STACK[0x320]);
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)&STACK[0x4B0]);
  v72 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v72;
    operator delete(v72);
  }
  v73 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v73;
    operator delete(v73);
  }
  STACK[0x238] = (unint64_t)off_24C01FBB0;
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  _Unwind_Resume(a1);
}

_DWORD *ZinPadLayerUtils::GetPaddingInfoAtDim(int a1, uint64_t a2)
{
  _DWORD *result;

  for (result = *(_DWORD **)(a2 + 200); result != *(_DWORD **)(a2 + 208); result += 2)
  {
    if (*result == a1)
      return result;
  }
  return 0;
}

void ZinPadLayerUtils::LowerChannelPadding(uint64_t **a1, ZinIrOpLayer **a2, uint64_t a3, int *a4, uint64_t a5)
{
  _DWORD *v5;
  _DWORD *v6;
  ZinIrOpLayer *v12;
  size_t v13;
  void *p_p;
  ZinIrOpLayer *v15;
  __n128 v16;
  int v17;
  _DWORD *i;
  uint64_t **v19;
  ZinIrOpLayer *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BOOL4 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  ZinIrOpLayer *Transpose;
  int *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int8x16_t v60;
  ZinIrOpLayerGraph *v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  ZinIrOpLayer *PadLayer;
  _BOOL4 v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  ZinIrOpLayer *v72;
  _BOOL4 v73;
  int v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  uint64_t v79;
  _QWORD v80[4];
  int v81;
  _BYTE v82[32];
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  void *v87[3];
  void *__p;
  void *v89;
  void *v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[26];
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  void *v103;
  char *v104;
  unint64_t v105;
  __int16 v106;
  _QWORD v107[3];
  char v108;
  ZinIrOpLayer **v109;
  _QWORD v110[2];
  ZinIrOpLayer **v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  int v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD **)(a5 + 200);
  v5 = *(_DWORD **)(a5 + 208);
  if (v6 == v5)
    goto LABEL_4;
  while (*v6 != 2)
  {
    v6 += 2;
    if (v6 == v5)
      goto LABEL_4;
  }
  if (*(int *)(a5 + 180) <= 0 && *(_DWORD *)(a5 + 184) <= 0)
LABEL_4:
    ZinAssertImpl("Error: the pad layer does not contain channel padding");
  v12 = *(ZinIrOpLayer **)a2[11];
  if (!v12)
    ZinAssertImpl("Error: failed to get the incoming layer for the channel padding layer");
  if (*((char *)a2 + 47) >= 0)
    v13 = *((unsigned __int8 *)a2 + 47);
  else
    v13 = (size_t)a2[4];
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v13 + 17);
  if (SHIBYTE(v90) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v13)
  {
    if (*((char *)a2 + 47) >= 0)
      v15 = (ZinIrOpLayer *)(a2 + 3);
    else
      v15 = a2[3];
    memmove(p_p, v15, v13);
  }
  strcpy((char *)p_p + v13, "_channel_padding_");
  v16 = ZinObjectNameFactory::ZinObjectNameFactory(v107, &__p);
  if (SHIBYTE(v90) < 0)
    operator delete(__p);
  v79 = (uint64_t)a2[2];
  v17 = *(_DWORD *)((*((uint64_t (**)(ZinIrOpLayer **, _QWORD, _QWORD, __n128))*a2 + 4))(a2, 0, 0, v16)
                  + 88);
  for (i = *(_DWORD **)(a5 + 200); ; i += 2)
  {
    if (i == *(_DWORD **)(a5 + 208))
    {
      v19 = a1;
      v20 = 0;
      v78 = 1;
      goto LABEL_40;
    }
    if (*i == 3)
      break;
  }
  v92 = 0;
  v90 = 0;
  v91 = 0;
  v94 = 0u;
  v93 = 0u;
  __p = &off_24C01BAC0;
  v89 = 0;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  memset(v99, 0, sizeof(v99));
  v100 = 0u;
  v101 = 0u;
  v102 = 0;
  v95 = -1;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  *((_QWORD *)&v100 + 1) = *(_QWORD *)(a5 + 164);
  v106 = *(_WORD *)(a5 + 224);
  v21 = i[1];
  v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v105, 1uLL);
  v24 = &v22[8 * v23];
  *(_QWORD *)v22 = (v21 << 32) | 3;
  v25 = v22 + 8;
  v27 = (char *)v103;
  v26 = v104;
  if (v104 != v103)
  {
    do
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      *((_QWORD *)v22 - 1) = v28;
      v22 -= 8;
    }
    while (v26 != v27);
    v26 = (char *)v103;
  }
  v19 = a1;
  v103 = v22;
  v104 = v25;
  v105 = (unint64_t)v24;
  if (v26)
    operator delete(v26);
  v104 = v25;
  v29 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
  v30 = *(_OWORD *)(v29 + 64);
  v84 = *(_OWORD *)(v29 + 48);
  v85 = v30;
  v31 = v30 + *(int *)(a5 + 168) + (uint64_t)*(int *)(a5 + 164);
  v86 = *(_QWORD *)(v29 + 80);
  *(_QWORD *)&v85 = v31;
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 80))(&v114, v12, 0, 0);
  v32 = operator new(0x78uLL);
  *(_QWORD *)&v82[8] = (char *)v32 + 120;
  *(_QWORD *)&v82[16] = (char *)v32 + 120;
  v33 = v119;
  v32[4] = v118;
  v32[5] = v33;
  v32[6] = v120;
  *((_DWORD *)v32 + 28) = v121;
  v34 = v115;
  *v32 = v114;
  v32[1] = v34;
  v35 = v117;
  v32[2] = v116;
  v32[3] = v35;
  *(_QWORD *)v82 = v32;
  v20 = (ZinIrOpLayer *)ZinBuilder::CreatePadLayer(v79, (uint64_t)v107, (uint64_t)v82, &v84, v17, (const ZinIrPadUnitInfo *)&__p);
  if (*(_QWORD *)v82)
  {
    *(_QWORD *)&v82[8] = *(_QWORD *)v82;
    operator delete(*(void **)v82);
  }
  v111 = a2;
  *(_QWORD *)v82 = &v111;
  *(_QWORD *)&v82[8] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v114, v82);
  v36 = ZinIrOpLayerGraph::AddNode(v19, v20, (ZinIrOpLayer ***)&v114);
  *(_QWORD *)&v114 = &unk_24C02BB18;
  if (*((_QWORD *)&v114 + 1))
  {
    *(_QWORD *)&v115 = *((_QWORD *)&v114 + 1);
    operator delete(*((void **)&v114 + 1));
  }
  v78 = v36 & ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)v19, (ZinIrOpLayer *)a2, v20);
  __p = &off_24C01BAC0;
  if (v103)
  {
    v104 = (char *)v103;
    operator delete(v103);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&__p);
LABEL_40:
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v84, 2u, 3u, *a4);
  if (v20)
    v12 = v20;
  v37 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
  v38 = *(_OWORD *)(v37 + 64);
  *(_OWORD *)v82 = *(_OWORD *)(v37 + 48);
  *(_OWORD *)&v82[16] = v38;
  v83 = *(_QWORD *)(v37 + 80);
  *(int8x16_t *)&v82[8] = vextq_s8(*(int8x16_t *)&v82[8], *(int8x16_t *)&v82[8], 8uLL);
  v39 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0, 0);
  Transpose = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v79, (uint64_t)v107, v39 + 48, v17, (uint64_t)v87);
  v111 = a2;
  *(_QWORD *)&v114 = &v111;
  *((_QWORD *)&v114 + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v114);
  v77 = ZinIrOpLayerGraph::AddNode(v19, Transpose, (ZinIrOpLayer ***)&__p);
  __p = &unk_24C02BB18;
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if (v20)
    v76 = ZinIrOpLayerGraph::AddEdge((uint64_t)v19, (uint64_t)v20, (uint64_t)Transpose, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  else
    v76 = ZinIrOpLayerGraph::MoveIncomingEdges((ZinIrOpLayerGraph *)v19, (ZinIrOpLayer *)a2, Transpose);
  v41 = a4;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&__p, (const ZinIrTextureUnitInfo *)a5);
  v100 = *(_OWORD *)(a5 + 156);
  v101 = *(_OWORD *)(a5 + 172);
  v102 = *(_QWORD *)(a5 + 188);
  __p = &off_24C01BAC0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v103, *(const void **)(a5 + 200), *(_QWORD *)(a5 + 208), (uint64_t)(*(_QWORD *)(a5 + 208) - *(_QWORD *)(a5 + 200)) >> 3);
  v106 = *(_WORD *)(a5 + 224);
  *((_QWORD *)&v100 + 1) = *(_QWORD *)(a5 + 180);
  *((_QWORD *)&v101 + 1) = 0;
  v43 = (char *)v103;
  v42 = v104;
  if (v103 == v104)
  {
    v44 = (char *)v103;
  }
  else
  {
    v44 = v104;
    do
    {
      if ((*(_DWORD *)v43 & 0xFFFFFFFE) == 2)
      {
        if (v44 != v43 + 8)
          memmove(v43, v43 + 8, v44 - (v43 + 8));
        v44 -= 8;
        v43 -= 8;
        v104 = v44;
      }
      v43 += 8;
      v42 = v44;
    }
    while (v43 != v44);
  }
  v45 = v6[1];
  if ((unint64_t)v44 >= v105)
  {
    v47 = (v42 - (_BYTE *)v103) >> 3;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v49 = v105 - (_QWORD)v103;
    if ((uint64_t)(v105 - (_QWORD)v103) >> 2 > v48)
      v48 = v49 >> 2;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v105, v50);
    else
      v51 = 0;
    v52 = (uint64_t *)&v51[8 * v47];
    v53 = &v51[8 * v50];
    *v52 = (v45 << 32) | 3;
    v46 = (char *)(v52 + 1);
    v55 = (char *)v103;
    v54 = v104;
    if (v104 != v103)
    {
      do
      {
        v56 = *((_QWORD *)v54 - 1);
        v54 -= 8;
        *--v52 = v56;
      }
      while (v54 != v55);
      v54 = (char *)v103;
    }
    v103 = v52;
    v104 = v46;
    v105 = (unint64_t)v53;
    if (v54)
      operator delete(v54);
  }
  else
  {
    *(_QWORD *)v44 = (v45 << 32) | 3;
    v46 = v44 + 8;
  }
  v104 = v46;
  v57 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 32))(Transpose, 0, 0);
  v58 = *(_OWORD *)(v57 + 64);
  *(_OWORD *)v82 = *(_OWORD *)(v57 + 48);
  *(_OWORD *)&v82[16] = v58;
  v59 = *(_QWORD *)(v57 + 80);
  *(int32x2_t *)&v58 = vadd_s32(*(int32x2_t *)((char *)&v100 + 4), (int32x2_t)__PAIR64__(HIDWORD(v100), v100));
  v60.i64[0] = (int)v58;
  v60.i64[1] = SDWORD1(v58);
  *(int64x2_t *)&v82[16] = vaddq_s64(*(int64x2_t *)&v82[16], (int64x2_t)vextq_s8(v60, v60, 8uLL));
  v83 = v59 + SDWORD1(v101) + (uint64_t)(int)v101;
  (*(void (**)(__int128 *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Transpose + 80))(&v114, Transpose, 0, 0);
  v61 = (ZinIrOpLayerGraph *)v19;
  v62 = operator new(0x78uLL);
  v112 = (uint64_t)v62 + 120;
  v113 = (uint64_t)v62 + 120;
  v63 = v119;
  v62[4] = v118;
  v62[5] = v63;
  v62[6] = v120;
  *((_DWORD *)v62 + 28) = v121;
  v64 = v115;
  *v62 = v114;
  v62[1] = v64;
  v65 = v117;
  v62[2] = v116;
  v62[3] = v65;
  v111 = (ZinIrOpLayer **)v62;
  PadLayer = (ZinIrOpLayer *)ZinBuilder::CreatePadLayer(v79, (uint64_t)v107, (uint64_t)&v111, (__int128 *)v82, v17, (const ZinIrPadUnitInfo *)&__p);
  if (v111)
  {
    v112 = (uint64_t)v111;
    operator delete(v111);
  }
  v110[0] = a2;
  v111 = (ZinIrOpLayer **)v110;
  v112 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v114, &v111);
  v67 = ZinIrOpLayerGraph::AddNode(v19, PadLayer, (ZinIrOpLayer ***)&v114);
  *(_QWORD *)&v114 = &unk_24C02BB18;
  if (*((_QWORD *)&v114 + 1))
  {
    *(_QWORD *)&v115 = *((_QWORD *)&v114 + 1);
    operator delete(*((void **)&v114 + 1));
  }
  v68 = ZinIrOpLayerGraph::AddEdge((uint64_t)v19, (uint64_t)Transpose, (uint64_t)PadLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v114, 3u, 2u, *v41);
  v69 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PadLayer + 32))(PadLayer, 0, 0);
  v70 = *(_OWORD *)(v69 + 64);
  *(_OWORD *)v82 = *(_OWORD *)(v69 + 48);
  *(_OWORD *)&v82[16] = v70;
  v83 = *(_QWORD *)(v69 + 80);
  *(int8x16_t *)&v82[8] = vextq_s8(*(int8x16_t *)&v82[8], *(int8x16_t *)&v82[8], 8uLL);
  v71 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PadLayer + 32))(PadLayer, 0, 0);
  v72 = (ZinIrOpLayer *)ZinBuilder::CreateTranspose(v79, (uint64_t)v107, v71 + 48, v17, (uint64_t)&v119);
  v109 = a2;
  v110[0] = &v109;
  v110[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v111, v110);
  v73 = ZinIrOpLayerGraph::AddNode(v19, v72, &v111);
  v111 = (ZinIrOpLayer **)&unk_24C02BB18;
  if (v112)
  {
    v113 = v112;
    operator delete((void *)v112);
  }
  v74 = ZinIrOpLayerGraph::AddEdge((uint64_t)v61, (uint64_t)PadLayer, (uint64_t)v72, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  memset(v80, 0, sizeof(v80));
  v81 = 1065353216;
  v75 = ZinIrOpLayerGraph::MoveOutgoingEdges(v61, (uint64_t **)a2, v72, v80);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v80);
  if ((v78 & v77 & v76 & v67 & v68 & v73 & v74 & v75 & ZinIrOpLayerGraph::RemoveNode(v61, (ZinIrOpLayer *)a2, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: pad layer graph manipulation error");
  *(_QWORD *)&v114 = off_24C021A98;
  if ((_QWORD)v119)
  {
    *((_QWORD *)&v119 + 1) = v119;
    operator delete((void *)v119);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v114);
  __p = &off_24C01BAC0;
  if (v103)
  {
    v104 = (char *)v103;
    operator delete(v103);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&__p);
  *(_QWORD *)&v84 = off_24C021A98;
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v84);
  v107[0] = off_24C01FBB0;
  if (v108 < 0)
    operator delete((void *)v107[1]);
}

void sub_206FB9BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  void *__p;
  char a72;
  uint64_t v72;
  void *v74;

  *(_QWORD *)(v72 - 224) = &unk_24C02BB18;
  v74 = *(void **)(v72 - 216);
  if (v74)
  {
    *(_QWORD *)(v72 - 208) = v74;
    operator delete(v74);
  }
  ZinIrPadUnitInfo::~ZinIrPadUnitInfo((ZinIrPadUnitInfo *)&a38);
  a67 = (uint64_t)off_24C01FBB0;
  if (a72 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__push_back_slow_path<ZinPadLayerUtils::PadDecomposedDesc>(uint64_t *a1, const ZinPadLayerUtils::PadDecomposedDesc *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ZinPadLayerUtils::PadDecomposedDesc *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xBA2E8BA2E8BA2ELL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5D1745D1745D17)
    v9 = 0xBA2E8BA2E8BA2ELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPerfUtil::TaskStats>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ZinPadLayerUtils::PadDecomposedDesc *)&v10[352 * v4];
  v16 = &v10[352 * v9];
  ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(v14, a2);
  v15 = (char *)v14 + 352;
  std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinPadLayerUtils::PadDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_206FB9E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinPadLayerUtils::PadDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinPadLayerUtils::PadDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinPadLayerUtils::PadDecomposedDesc>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinPadLayerUtils::PadDecomposedDesc>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>,std::reverse_iterator<ZinPadLayerUtils::PadDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  ZinPadLayerUtils::PadDecomposedDesc *v12;

  v10 = 0;
  v11 = a7 - 352;
  while (a3 + v10 != a5)
  {
    v12 = (ZinPadLayerUtils::PadDecomposedDesc *)(v11 + v10);
    v10 -= 352;
    ZinPadLayerUtils::PadDecomposedDesc::PadDecomposedDesc(v12, (const ZinPadLayerUtils::PadDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinPadLayerUtils::PadDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 352;
    ZinPadLayerUtils::PadDecomposedDesc::~PadDecomposedDesc((ZinPadLayerUtils::PadDecomposedDesc *)(i - 352));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *ZinLiveOutLayer::ZinLiveOutLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  ZinIrKernel *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ZinIrKernel *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = a3[1];
  v14 = *a3;
  v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v13 = 0;
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, a2, &v14, a4, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    ZinIrKernel::~ZinIrKernel(v8);
    MEMORY[0x20BD002F8]();
  }
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = &off_24C01AFC8;
  return a1;
}

void sub_206FBA0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ZinIrKernel *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, ZinIrKernel *);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ZinLiveOutLayer::LowerEngine(ZinLiveOutLayer *a1, uint64_t **a2)
{
  const ZinIrHalParameters *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ZinIrTensor *v36;
  ZinIrTensor *RootTensor;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (ZinLiveOutLayer::HandleOutputExpansion(a1, a2))
  {
    v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v5)
      ZinLiveOutLayer::LowerEngine(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  else if (ZinLiveOutLayer::HandleUserSpecifiedLiveOutProperties(a1, a2, v4))
  {
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinLiveOutLayer::LowerEngine(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  else if (ZinLiveOutLayer::HandleViewLiveOut(a1, a2))
  {
    v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v21)
      ZinLiveOutLayer::LowerEngine(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  else if (ZinLiveOutLayer::HandleAnotherLiveOut(a1, a2))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinLiveOutLayer::LowerEngine((uint64_t)a1, v29, v30, v31, v32, v33, v34, v35);
  }
  else
  {
    v36 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
    RootTensor = ZinIrTensor::GetRootTensor(v36);
    result = ZinIrTensor::SetAllocationHint(RootTensor, 2, 1);
    if (!(_DWORD)result)
      return result;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinLiveOutLayer::LowerEngine((uint64_t)a1, v39, v40, v41, v42, v43, v44, v45);
  }
  return 3;
}

uint64_t ZinLiveOutLayer::HandleOutputExpansion(ZinLiveOutLayer *this, uint64_t **a2)
{
  ZinIrOpLayerGraph *v4;
  size_t v5;
  void *p_p;
  char *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  ZinIrTensor *v12;
  ZinIrOpLayer *v13;
  ZinIrTensor::MirInfo *v14;
  _QWORD v16[2];
  void *__p;
  void *v18;
  void *v19;
  _BYTE v20[172];
  ZinIrTensor::MirInfo *v21;
  void (**v22)(ZinObjectNameFactory *__hidden);
  void *v23;
  char v24;
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v4 = (ZinIrOpLayerGraph *)**((_QWORD **)this + 11);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayerGraph *))(*(_QWORD *)v4 + 208))(v26, v4);
  (*(void (**)(_QWORD *__return_ptr, ZinLiveOutLayer *))(*(_QWORD *)this + 208))(v25, this);
  if (ZinTensorDimensionsEqual(v26, v25))
    return 0;
  if (*((char *)this + 47) >= 0)
    v5 = *((unsigned __int8 *)this + 47);
  else
    v5 = *((_QWORD *)this + 4);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 11);
  if (SHIBYTE(v19) < 0)
    p_p = __p;
  if (v5)
  {
    if (*((char *)this + 47) >= 0)
      v7 = (char *)this + 24;
    else
      v7 = (char *)*((_QWORD *)this + 3);
    memmove(p_p, v7, v5);
  }
  strcpy((char *)p_p + v5, "_ane_hw_out");
  v8 = ZinObjectNameFactory::ZinObjectNameFactory(&v22, &__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  v9 = (*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)this + 32))(this, 0, 0, v8);
  v10 = *((_QWORD *)this + 2);
  v11 = *(_DWORD *)(v9 + 88);
  v12 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v12, &v21);
  v20[0] = 0;
  v20[168] = 0;
  v13 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v10, (uint64_t)&v22, (uint64_t)v4, v11, &v21, 0, (uint64_t)v20, 1.0);
  v14 = v21;
  v21 = 0;
  if (v14)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v21, v14);
  v27[0] = v4;
  v16[0] = v27;
  v16[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, v16);
  ZinIrOpLayerGraph::AddNode(a2, v13, (ZinIrOpLayer ***)&__p);
  __p = &unk_24C02BB18;
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v4, (uint64_t)v13, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  if ((ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a2, v4, v13, (uint64_t)this, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0) & 1) != 0)
  {
    *((_BYTE *)v13 + 440) = 1;
    v22 = off_24C01FBB0;
    if (v24 < 0)
      operator delete(v23);
    return 0;
  }
  v22 = off_24C01FBB0;
  if (v24 < 0)
    operator delete(v23);
  return 3;
}

void sub_206FBA49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v15 - 184) = off_24C01FBB0;
  if (*(char *)(v15 - 153) < 0)
    operator delete(*(void **)(v15 - 176));
  _Unwind_Resume(exception_object);
}

uint64_t ZinLiveOutLayer::HandleUserSpecifiedLiveOutProperties(ZinLiveOutLayer *this, uint64_t **a2, const ZinIrHalParameters *a3)
{
  ZinIrOpLayer *v5;
  ZinIrTensor *v6;
  uint64_t v7;
  const ZinIrTensor *v8;
  BOOL HasMatchedStrides;
  int v10;
  size_t v11;
  __int128 *p_buf;
  char *v13;
  BOOL v14;
  uint64_t Interleave;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  _BOOL4 HasCustomStrides;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t InterchangeDescriptor;
  uint64_t v49;
  ZinIrTensor *v50;
  uint64_t v51;
  char v52;
  char v53;
  ZinIrTensor *v54;
  uint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  ZinIrOpLayer *v61;
  _QWORD *v62;
  _BOOL4 v63;
  int v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  _BYTE v69[172];
  _QWORD *v70;
  _QWORD *v71;
  __int128 buf;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD v82[3];
  char v83;
  _BYTE v84[24];
  _BYTE *v85;
  _QWORD v86[4];

  v86[1] = *MEMORY[0x24BDAC8D0];
  v5 = (ZinIrOpLayer *)**((_QWORD **)this + 11);
  v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
  v7 = (*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  HasMatchedStrides = ZinIrTensor::HasMatchedStrides(v6, (const ZinIrTensor *)v7, v8);
  v10 = *(unsigned __int8 *)(v7 + 164);
  if (*((char *)this + 47) >= 0)
    v11 = *((unsigned __int8 *)this + 47);
  else
    v11 = *((_QWORD *)this + 4);
  p_buf = &buf;
  std::string::basic_string[abi:ne180100]((uint64_t)&buf, v11 + 15);
  if (SBYTE7(v73) < 0)
    p_buf = (__int128 *)buf;
  if (v11)
  {
    if (*((char *)this + 47) >= 0)
      v13 = (char *)this + 24;
    else
      v13 = (char *)*((_QWORD *)this + 3);
    memmove(p_buf, v13, v11);
  }
  strcpy((char *)p_buf + v11, "_liveout_decomp");
  ZinObjectNameFactory::ZinObjectNameFactory(v82, &buf);
  if (SBYTE7(v73) < 0)
    operator delete((void *)buf);
  v81 = 0;
  if (v10)
    v14 = 0;
  else
    v14 = HasMatchedStrides;
  if (v14)
  {
    if ((*(_DWORD *)(*((_QWORD *)v5 + 8) + 8) - 28) > 2)
    {
LABEL_75:
      v66 = 0;
      goto LABEL_77;
    }
    goto LABEL_70;
  }
  if (v10)
  {
    ZinIrTensor::GetInterchangeDescriptor((ZinIrTensor *)v7);
    ZinIrTensor::GetInterchangeDescriptor((ZinIrTensor *)v7);
    ZinIrTensor::GetInterchangeDescriptor((ZinIrTensor *)v7);
    Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)v7);
    v17 = v16;
    DimensionOrderHint::DimensionOrderHint(&v78, 0);
    v18 = operator new();
    v74 = 0;
    buf = 0u;
    v73 = 0u;
    ZinIrTensor::MirInfo::MirInfo(v18, 2, Interleave, v17, &v78, &buf);
    v86[0] = 0;
    v19 = v81;
    v81 = (_QWORD *)v18;
    if (v19)
    {
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v81, v19);
      v20 = (_QWORD *)v86[0];
      v86[0] = 0;
      if (v20)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v86, v20);
    }
    v21 = (void *)v78;
    if ((_QWORD)v78)
    {
      *((_QWORD *)&v78 + 1) = v78;
LABEL_40:
      operator delete(v21);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  v22 = *(__int128 **)(v7 + 104);
  if (v22)
  {
    v23 = *v22;
    v24 = v22[1];
    v80 = *((_QWORD *)v22 + 4);
    v78 = v23;
    v79 = v24;
    goto LABEL_32;
  }
  v85 = 0;
  ZinIrTensor::InferDescriptor((ZinIrTensor *)v7, (uint64_t)v84, (uint64_t)&buf);
  v78 = v75;
  v79 = v76;
  v80 = v77;
  v25 = v85;
  if (v85 == v84)
  {
    v26 = 4;
    v25 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_32;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_32:
  v27 = ZinIrTensor::GetInterleave((ZinIrTensor *)v7);
  if (v28)
    v29 = v27;
  else
    v29 = 1;
  FindDimensionOrderFromStrides((const ZinTensorDimensions *)&v78, (const ZinTensorDimensions *)(v7 + 48), v29, 1, (uint64_t)&buf);
  v30 = ZinIrTensor::GetInterleave((ZinIrTensor *)v7);
  v32 = v31;
  v33 = operator new();
  ZinIrTensor::MirInfo::MirInfo(v33, 2, v30, v32, &buf, &v78);
  v86[0] = 0;
  v34 = v81;
  v81 = (_QWORD *)v33;
  if (v34)
  {
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v81, v34);
    v35 = (_QWORD *)v86[0];
    v86[0] = 0;
    if (v35)
      std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)v86, v35);
  }
  v21 = (void *)buf;
  if ((_QWORD)buf)
  {
    *((_QWORD *)&buf + 1) = buf;
    goto LABEL_40;
  }
LABEL_41:
  if (ZinIrOpLayer::IsANELayer(v5))
  {
    if (ZinIrOpLayer::IsPELayer(v5))
      v36 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 408))(v5);
    else
      v36 = 0;
    v39 = *(_QWORD *)v5;
    if (*(_DWORD *)(*((_QWORD *)v5 + 8) + 8) == 85)
    {
      v40 = (*(uint64_t (**)(ZinIrOpLayer *))(v39 + 88))(v5);
      if (v40 != 1)
      {
        v41 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)+ 56);
        v42 = ZinIrTensor::GetInterleave((ZinIrTensor *)v7);
        if (v43)
          v44 = v42;
        else
          v44 = 1;
        if (v41 / v40 % v44)
          v45 = 0;
        else
          v45 = v36 == 0;
        if (!v45)
          goto LABEL_70;
LABEL_60:
        v46 = v81;
        v81 = 0;
        v71 = v46;
        ZinIrTensor::SetTensorMirInfo((uint64_t *)v6, &v71);
        v47 = v71;
        v71 = 0;
        if (v47)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v71, v47);
        InterchangeDescriptor = ZinIrTensor::GetInterchangeDescriptor((ZinIrTensor *)v7);
        if (!ZinIrTensor::SetInterchangeDescriptor((uint64_t)v6, InterchangeDescriptor, v49))
          goto LABEL_75;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Unable to set interchange descriptor.\n", (uint8_t *)&buf, 2u);
        }
        goto LABEL_76;
      }
    }
    else if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(v39 + 32))(v5, 0, 0) + 104))
    {
      goto LABEL_70;
    }
    if (v36)
      goto LABEL_70;
    goto LABEL_60;
  }
  if (*(_DWORD *)(*((_QWORD *)v5 + 8) + 8) == 7)
  {
    if (*(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0)
                   + 104))
    {
      v37 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
      HasCustomStrides = ZinIrTensor::MirInfo::HasCustomStrides(*(ZinIrTensor::MirInfo **)(v37 + 104));
    }
    else
    {
      HasCustomStrides = 0;
    }
    v50 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
    v51 = ZinIrTensor::GetInterleave(v50);
    v53 = v52;
    v54 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
    v55 = ZinIrTensor::GetInterleave(v54);
    v57 = (v53 != 0) ^ (v56 != 0);
    if (v53 && v56)
      v57 = v51 != v55;
    if (((HasCustomStrides | v57) & 1) == 0)
      goto LABEL_60;
  }
LABEL_70:
  v58 = *((_QWORD *)this + 2);
  v59 = *(_DWORD *)(v7 + 88);
  v60 = v81;
  v81 = 0;
  v70 = v60;
  v69[0] = 0;
  v69[168] = 0;
  v61 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v58, (uint64_t)v82, (uint64_t)v5, v59, &v70, 0, (uint64_t)v69, 1.0);
  v62 = v70;
  v70 = 0;
  if (v62)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v70, v62);
  v86[0] = v5;
  *(_QWORD *)&v78 = v86;
  *((_QWORD *)&v78 + 1) = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&buf, &v78);
  v63 = ZinIrOpLayerGraph::AddNode(a2, v61, (ZinIrOpLayer ***)&buf);
  *(_QWORD *)&buf = &unk_24C02BB18;
  if (*((_QWORD *)&buf + 1))
  {
    *(_QWORD *)&v73 = *((_QWORD *)&buf + 1);
    operator delete(*((void **)&buf + 1));
  }
  v64 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v5, (uint64_t)v61, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v65 = ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a2, v5, v61, (uint64_t)this, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  *((_BYTE *)v61 + 440) = 1;
  if ((v63 & v64 & v65 & 1) != 0)
    goto LABEL_75;
LABEL_76:
  v66 = 3;
LABEL_77:
  v67 = v81;
  v81 = 0;
  if (v67)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v81, v67);
  v82[0] = off_24C01FBB0;
  if (v83 < 0)
    operator delete((void *)v82[1]);
  return v66;
}

void sub_206FBABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  _QWORD *v46;

  v46 = *(_QWORD **)(v43 + 272);
  *(_QWORD *)(v43 + 272) = 0;
  if (v46)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100](v44 - 192, v46);
  *(_QWORD *)(v43 + 280) = off_24C01FBB0;
  if (*(char *)(v44 - 153) < 0)
    operator delete(*(void **)(v43 + 288));
  _Unwind_Resume(exception_object);
}

uint64_t ZinLiveOutLayer::HandleViewLiveOut(ZinLiveOutLayer *this, uint64_t **a2)
{
  ZinIrTensor *v4;
  char v5;
  void (**v6)(ZinObjectNameFactory *__hidden);
  uint64_t v7;
  ZinIrOpLayerGraph *v8;
  size_t v9;
  void *p_p;
  char *v11;
  __n128 v12;
  uint64_t v13;
  int v14;
  ZinIrTensor *v15;
  ZinIrOpLayer *v16;
  ZinIrTensor::MirInfo *v17;
  BOOL v18;
  char v19;
  char v20;
  _QWORD v22[2];
  void *__p;
  void *v24;
  void *v25;
  _BYTE v26[172];
  ZinIrTensor::MirInfo *v27;
  void (**v28)(ZinObjectNameFactory *__hidden);
  void (**v29)(ZinObjectNameFactory *__hidden);
  char v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x24BDAC8D0];
  v4 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ZinIrTensor::GetAllParentsInTree(v4, (void **)&v28);
  if (v28 == v29)
  {
    v5 = 0;
    if (v28)
    {
LABEL_5:
      v29 = v28;
      operator delete(v28);
    }
  }
  else
  {
    v5 = 0;
    v6 = v28;
    do
    {
      v7 = (uint64_t)*v6++;
      v5 |= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 96) + 64) + 8) == 36;
    }
    while (v6 != v29);
    if (v28)
      goto LABEL_5;
  }
  if ((v5 & 1) == 0)
    return 0;
  v8 = (ZinIrOpLayerGraph *)**((_QWORD **)this + 11);
  if (*((char *)this + 47) >= 0)
    v9 = *((unsigned __int8 *)this + 47);
  else
    v9 = *((_QWORD *)this + 4);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 17);
  if (SHIBYTE(v25) < 0)
    p_p = __p;
  if (v9)
  {
    if (*((char *)this + 47) >= 0)
      v11 = (char *)this + 24;
    else
      v11 = (char *)*((_QWORD *)this + 3);
    memmove(p_p, v11, v9);
  }
  strcpy((char *)p_p + v9, "_liveout_viewCopy");
  v12 = ZinObjectNameFactory::ZinObjectNameFactory(&v28, &__p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  v13 = *((_QWORD *)this + 2);
  v14 = *(_DWORD *)((*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)this + 32))(this, 0, 0, v12)+ 88);
  v15 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v15, &v27);
  v26[0] = 0;
  v26[168] = 0;
  v16 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v13, (uint64_t)&v28, (uint64_t)v8, v14, &v27, 0, (uint64_t)v26, 1.0);
  v17 = v27;
  v27 = 0;
  if (v17)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v27, v17);
  v31[0] = v8;
  v22[0] = v31;
  v22[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, v22);
  v18 = ZinIrOpLayerGraph::AddNode(a2, v16, (ZinIrOpLayer ***)&__p);
  __p = &unk_24C02BB18;
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  v19 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v8, (uint64_t)v16, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v20 = v18 & v19 & ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a2, v8, v16, (uint64_t)this, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  v28 = off_24C01FBB0;
  if (v30 < 0)
  {
    operator delete(v29);
    if ((v20 & 1) != 0)
      return 0;
  }
  else if ((v20 & 1) != 0)
  {
    return 0;
  }
  return 3;
}

void sub_206FBB058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v15 - 120) = off_24C01FBB0;
  if (*(char *)(v15 - 89) < 0)
    operator delete(*(void **)(v15 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t ZinLiveOutLayer::HandleAnotherLiveOut(ZinLiveOutLayer *this, uint64_t **a2)
{
  ZinIrTensor *v4;
  void (**v5)(ZinObjectNameFactory *__hidden);
  ZinLiveOutLayer *v6;
  _BOOL4 v8;
  ZinIrOpLayerGraph *v10;
  size_t v11;
  void *p_p;
  char *v13;
  __n128 v14;
  uint64_t v15;
  int v16;
  ZinIrTensor *v17;
  ZinIrOpLayer *v18;
  ZinIrTensor::MirInfo *v19;
  BOOL v20;
  char v21;
  char v22;
  _QWORD v24[2];
  void *__p;
  void *v26;
  void *v27;
  _BYTE v28[172];
  ZinIrTensor::MirInfo *v29;
  void (**v30)(ZinObjectNameFactory *__hidden);
  void (**v31)(ZinObjectNameFactory *__hidden);
  char v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x24BDAC8D0];
  v4 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ZinIrTensor::GetTensorFamily(v4, (uint64_t)&v30);
  if (v30 == v31)
  {
    LOBYTE(v8) = 1;
    if (v30)
    {
LABEL_15:
      v31 = v30;
      operator delete(v30);
    }
  }
  else
  {
    v5 = v30 + 1;
    do
    {
      v6 = (ZinLiveOutLayer *)*((_QWORD *)*(v5 - 1) + 12);
      v8 = v6 == this || *(_DWORD *)(*((_QWORD *)v6 + 8) + 8) != 31;
    }
    while (v8 && v5++ != v31);
    if (v30)
      goto LABEL_15;
  }
  if (v8)
    return 0;
  v10 = (ZinIrOpLayerGraph *)**((_QWORD **)this + 11);
  if (*((char *)this + 47) >= 0)
    v11 = *((unsigned __int8 *)this + 47);
  else
    v11 = *((_QWORD *)this + 4);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 21);
  if (SHIBYTE(v27) < 0)
    p_p = __p;
  if (v11)
  {
    if (*((char *)this + 47) >= 0)
      v13 = (char *)this + 24;
    else
      v13 = (char *)*((_QWORD *)this + 3);
    memmove(p_p, v13, v11);
  }
  strcpy((char *)p_p + v11, "_another_liveout_copy");
  v14 = ZinObjectNameFactory::ZinObjectNameFactory(&v30, &__p);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v15 = *((_QWORD *)this + 2);
  v16 = *(_DWORD *)((*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)this + 32))(this, 0, 0, v14)+ 88);
  v17 = (ZinIrTensor *)(*(uint64_t (**)(ZinLiveOutLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v17, &v29);
  v28[0] = 0;
  v28[168] = 0;
  v18 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v15, (uint64_t)&v30, (uint64_t)v10, v16, &v29, 0, (uint64_t)v28, 1.0);
  v19 = v29;
  v29 = 0;
  if (v19)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v29, v19);
  v33[0] = v10;
  v24[0] = v33;
  v24[1] = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&__p, v24);
  v20 = ZinIrOpLayerGraph::AddNode(a2, v18, (ZinIrOpLayer ***)&__p);
  __p = &unk_24C02BB18;
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v21 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)v10, (uint64_t)v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v22 = v20 & v21 & ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a2, v10, v18, (uint64_t)this, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  v30 = off_24C01FBB0;
  if (v32 < 0)
  {
    operator delete(v31);
    if ((v22 & 1) != 0)
      return 0;
  }
  else if ((v22 & 1) != 0)
  {
    return 0;
  }
  return 3;
}

void sub_206FBB3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;

  if (__p)
    operator delete(__p);
  *(_QWORD *)(v15 - 120) = off_24C01FBB0;
  if (*(char *)(v15 - 89) < 0)
    operator delete(*(void **)(v15 - 112));
  _Unwind_Resume(exception_object);
}

_QWORD *ZinLiveOutLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  const ZinIrOpLayerOpCode *v7;
  ZinIrOpLayerOpCode *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *GroupId;
  uint64_t v18[2];
  ZinIrOpLayerOpCode *v19;

  v6 = (_QWORD *)operator new();
  v7 = (const ZinIrOpLayerOpCode *)*((_QWORD *)a1 + 8);
  v8 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, v7);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v18[0] = v9;
  v18[1] = (uint64_t)v10;
  v19 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinLiveOutLayer::ZinLiveOutLayer(v6, (uint64_t *)&v19, v18, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = (uint64_t)v19;
  v19 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v6, *GroupId);
  return v6;
}

void sub_206FBB574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  _Unwind_Resume(a1);
}

BOOL ZinLiveOutLayer::NeedsTypeCastToRead(uint64_t a1, int a2)
{
  return *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0) + 88) != a2
      && !IsPrimaryFormat(a2);
}

uint64_t ZinLiveOutLayer::ValidateSemantics_Impl(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  ZinIrTensor *v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char v13;
  void *__p[3];

  if (a2[1] - *a2 != 120)
    ZinAssertImpl("Live out layer must have 1 input");
  v13 = 1;
  std::vector<BOOL>::vector(__p, &v13, 1);
  ZinLayerValidationUtils::ValidateTensorInfos(a2, a3, __p, 0);
  if (__p[0])
    operator delete(__p[0]);
  v6 = (ZinIrTensor *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  LODWORD(__p[0]) = *((_DWORD *)v6 + 22);
  ZinLayerValidationUtils::ValidateFormat((int *)__p, a3, 1);
  result = ZinIrTensor::GetInterleave(v6);
  v8 = 0;
  if (v9)
    v10 = result;
  else
    v10 = 1;
  v11 = a3 + 1648;
  while (*(_QWORD *)&v11[v8] != v10)
  {
    v8 += 8;
    if (v8 == 40)
    {
      v12 = a3 + 1688;
      goto LABEL_12;
    }
  }
  v12 = &v11[v8];
LABEL_12:
  if (v12 == a3 + 1688)
    ZinAssertImpl("Error: invalid input interleave factor:%zd; The valid interleave factor should be 1, 2, 3, 4, or 8",
      v10);
  return result;
}

void sub_206FBB744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinLiveOutLayer::LowerEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "allocation hint set is failed in live-out %s", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Failed in seperating another live-out from tensor family associated with live-out %s\n", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "View->LiveOut connected resolution failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "User specified live out property handling failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Output expansion handling failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinCompilerCoreJIT::ZinCompilerCoreJIT(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 *a11, uint64_t a12)
{
  std::string *v16;
  std::string *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  ZinCompilerCore::ZinCompilerCore(a1, a2, a3, a4, a5, a12);
  v16->__r_.__value_.__r.__words[0] = (std::string::size_type)off_24C01D8D0;
  v17 = v16 + 12;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v18 = *a6;
    v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a6 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
  }
  *(_DWORD *)(a1 + 312) = a7;
  *(_QWORD *)(a1 + 320) = a8;
  *(_QWORD *)(a1 + 328) = a9;
  *(_QWORD *)(a1 + 336) = a10;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  v19 = *a11;
  v20 = a11[2];
  *(_OWORD *)(a1 + 424) = a11[1];
  *(_OWORD *)(a1 + 440) = v20;
  *(_OWORD *)(a1 + 408) = v19;
  *(_BYTE *)(a1 + 456) = 0;
  return a1;
}

{
  return ZinCompilerCoreJIT::ZinCompilerCoreJIT(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_206FBB9B0(_Unwind_Exception *a1)
{
  ZinCompilerCore *v1;

  ZinCompilerCore::~ZinCompilerCore(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCoreJIT::BuildLayerGraph(ZinCompilerCoreJIT *this)
{
  ZinBarUsage *v2;
  uint64_t OrderedLayers;
  uint64_t *v4;
  uint64_t NumAnesUsed;
  uint64_t inited;
  ZinIrBindings *v7;
  ZinIrBindings *v8;
  __n128 *ConstTensorSymbols;
  uint64_t v10;
  std::string v12;
  void *__p[2];
  char v14;
  ZinIrBindings *v15[3];
  void *v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[344];

  kdebug_trace();
  if (ZinSerial::DeserializeBarUsage(*((ZinSerial **)this + 51), *((const unsigned __int8 **)this + 52), (ZinCompilerCoreJIT *)((char *)this + 64), v2))return 3;
  kdebug_trace();
  if (ZinBarUsage::HasBarIdForBarIdType((uint64_t)this + 64, 7))
  {
    if (!*((_BYTE *)this + 232))
    {
      *((_WORD *)this + 115) = 0;
      *(_DWORD *)((char *)this + 226) = 0;
      *((_BYTE *)this + 232) = 1;
    }
    *((_QWORD *)this + 27) = 0;
    *((_WORD *)this + 112) = 0;
    *((_WORD *)this + 112) = ZinBarUsage::GetBarIdForBarIdType((uint64_t)this + 64, 7);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 1);
  NumAnesUsed = ZinBondedUtils::GetNumAnesUsed(*(_QWORD **)(*((_QWORD *)this + 17) + 992), v4);
  inited = ZinIrRegAllocUtil::ZinIrInitAneMemoryConfig(v4, (uint64_t)this + 64, (_QWORD *)this + 43, NumAnesUsed, 0, 1);
  if ((_DWORD)inited)
  {
    OrderedLayers = inited;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinCompilerCoreJIT::BuildLayerGraph();
  }
  else
  {
    ZinIrFactoryJIT::ZinIrFactoryJIT((uint64_t)v19, *((_QWORD *)this + 17), (uint64_t)this + 288, *((_DWORD *)this + 78), *((_QWORD *)this + 40), *((_QWORD *)this + 41), *((_QWORD *)this + 42), (uint64_t)this + 344, *(_OWORD *)((char *)this + 424), *((_QWORD *)this + 55), *((_QWORD *)this + 56), *((ZinIrCompilationStatus **)this + 7));
    if (CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 7) + 8)) <= 0)
    {
      v17 = 0;
      v16 = 0;
      v18 = 0;
      OrderedLayers = ZinIrFactoryJIT::GetOrderedLayers((uint64_t)v19, (char *)&v16);
      if ((_DWORD)OrderedLayers)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinCompilerCoreJIT::BuildLayerGraph();
      }
      else
      {
        ZinIrFactoryBase::GetIrBindings((uint64_t)v19, v15);
        v7 = v15[0];
        v15[0] = 0;
        std::unique_ptr<ZinIrBindings>::reset[abi:ne180100]((ZinIrBindings **)this + 18, v7);
        v8 = v15[0];
        v15[0] = 0;
        if (v8)
        {
          ZinIrBindings::~ZinIrBindings(v8);
          MEMORY[0x20BD002F8]();
        }
        ZinIrControlFlowGraph::GetSheduleMapFromOrderedLayers((uint64_t **)&v16, (uint64_t)v15);
        ZinIrControlFlowGraph::SetScheduleMap(*(_QWORD **)(*((_QWORD *)this + 17) + 992), (uint64_t **)v15);
        *((_BYTE *)this + 456) = v19[336];
        ConstTensorSymbols = (__n128 *)ZinIrFactoryJIT::GetConstTensorSymbols((ZinIrFactoryJIT *)v19);
        std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__move_assign((uint64_t)this + 384, ConstTensorSymbols);
        v10 = *(_QWORD *)(*((_QWORD *)this + 17) + 992);
        std::string::basic_string[abi:ne180100]<0>(__p, "after_jit_creation");
        ZinIrCompilerParameters::ZinIrCompilerParameters(&v12, *(const ZinIrCompilerParameters **)(*((_QWORD *)this + 1) + 8));
        ZinVisualization::CreateDotGraphAndLogConditionally(v10, (std::string::size_type)__p, (ZinIrCompilerParameters *)&v12, *((_QWORD *)this + 17) + 24, 1);
        ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v12);
        if (v14 < 0)
          operator delete(__p[0]);
        std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v15, (_QWORD *)v15[1]);
      }
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
    }
    else
    {
      OrderedLayers = 3;
    }
    ZinIrFactoryJIT::~ZinIrFactoryJIT((ZinIrFactoryJIT *)v19);
  }
  return OrderedLayers;
}

void sub_206FBBC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v8;
  va_list va;

  va_start(va, a7);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)va);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&STACK[0x348], (_QWORD *)STACK[0x350]);
  v8 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v8;
    operator delete(v8);
  }
  ZinIrFactoryJIT::~ZinIrFactoryJIT((ZinIrFactoryJIT *)&STACK[0x378]);
  _Unwind_Resume(a1);
}

uint64_t ZinCompilerCoreJIT::CreateDynamicOffsetCustomBarCmd()
{
  return 0;
}

uint64_t ZinCompilerCoreJIT::RunRegisterAllocator(ZinCompilerCoreJIT *this, ZinIrControlFlowGraph *a2)
{
  ZinIrControlFlowGraph *v4;
  ZinIrControlFlowGraph *v5;
  ZinIrControlFlowGraph *v6;
  BOOL v7;
  _QWORD *PrivatePools;
  uint64_t v9;
  ZinIrLocalRegAlloc *v10;
  uint64_t LiveIOs;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string v26[32];
  std::string v27;
  std::string v28;
  std::string v29;
  __int128 v30;
  std::string::size_type v31;
  uint64_t v32;

  kdebug_trace();
  if (!*((_QWORD *)a2 + 43))
    ZinAssertImpl("Must run scheduler first");
  v4 = *(ZinIrControlFlowGraph **)a2;
  if (*(ZinIrControlFlowGraph **)a2 != (ZinIrControlFlowGraph *)((char *)a2 + 8))
  {
    do
    {
      *(_QWORD *)&v30 = *((_QWORD *)v4 + 4);
      if ((_QWORD *)((char *)a2 + 336) == std::__tree<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,std::__map_value_compare<ZinIrBasicBlock *,std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>,ScheduleComparator,true>,std::allocator<std::__value_type<ZinIrBasicBlock *,std::vector<ZinIrOpLayer *>>>>::find<ZinIrBasicBlock *>((uint64_t)a2 + 328, (uint64_t *)&v30))ZinAssertImpl("Missing basic block in the schedule_map.");
      v5 = (ZinIrControlFlowGraph *)*((_QWORD *)v4 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(ZinIrControlFlowGraph **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (ZinIrControlFlowGraph *)*((_QWORD *)v4 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (ZinIrControlFlowGraph *)((char *)a2 + 8));
  }
  PrivatePools = ZinIrMemoryPools::GetPrivatePools((_QWORD *)this + 43, 0);
  v9 = *((_QWORD *)this + 1);
  v10 = (ZinIrLocalRegAlloc *)operator new();
  ZinIrLocalRegAlloc::ZinIrLocalRegAlloc(v10, (char *)a2 + 328, PrivatePools, v9, (char *)this + 64);
  std::unique_ptr<ZinIrLocalRegAlloc>::reset[abi:ne180100]((ZinIrLocalRegAlloc **)this + 19, v10);
  LiveIOs = ZinIrLocalRegAlloc::AllocateLiveIOs(*((_QWORD *)this + 19), (uint64_t *)this + 18);
  if ((_DWORD)LiveIOs)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinCompilerCoreJIT::RunRegisterAllocator();
  }
  else
  {
    if (ZinIrLocalRegAlloc::LegalizeTileHeight(*((ZinIrLocalRegAlloc **)this + 19)))
      ZinAssertImpl("JIT tile height legalization failed");
    if ((*(_BYTE *)(*((_QWORD *)this + 2) + 96) & 0x10) != 0)
    {
      ZinMirValidateMirInfo::ZinMirValidateMirInfo(&v32, (uint64_t)a2);
      v12 = *((_QWORD *)this + 2);
      if (*(char *)(v12 + 47) >= 0)
        v13 = *(unsigned __int8 *)(v12 + 47);
      else
        v13 = *(_QWORD *)(v12 + 32);
      v14 = &v28;
      std::string::basic_string[abi:ne180100]((uint64_t)&v28, v13 + 9);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if (v13)
      {
        v17 = *(char **)(v12 + 24);
        v16 = (char *)(v12 + 24);
        v15 = v17;
        if (v16[23] >= 0)
          v18 = v16;
        else
          v18 = v15;
        memmove(v14, v18, v13);
      }
      strcpy((char *)v14 + v13, ".tensors_");
      ReplaceUnsupportedCharWithUnderscore(*((_QWORD *)this + 17) + 24, &v27);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v27;
      else
        v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      else
        size = v27.__r_.__value_.__l.__size_;
      v21 = std::string::append(&v28, (const std::string::value_type *)v19, size);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v29, ".json", 5uLL);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v31 = v23->__r_.__value_.__r.__words[2];
      v30 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v32);
      if (SHIBYTE(v31) < 0)
        operator delete((void *)v30);
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "after_reg_alloc");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v26, *(const ZinIrCompilerParameters **)(*((_QWORD *)this + 1) + 8));
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a2, (std::string::size_type)&v30, (ZinIrCompilerParameters *)v26, *((_QWORD *)this + 17) + 24, 16);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v26);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)v30);
    kdebug_trace();
  }
  return LiveIOs;
}

void sub_206FBC05C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(ZinObjectGeneration **this)
{
  uint64_t ComputeMutableProgram;
  ZinIrSymbol **v3;
  ZinIrSymbol **v4;
  ZinComputeMutableProgramWrapper *v5;
  int v6;
  ZinIrSymbol *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  unsigned __int16 *NextStabTypeno;
  int Stab;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _OWORD v60[13];
  _QWORD v61[66];

  v61[64] = *MEMORY[0x24BDAC8D0];
  ComputeMutableProgram = ZinObjectGeneration::GetComputeMutableProgram(this[30]);
  v4 = (ZinIrSymbol **)this[48];
  v3 = (ZinIrSymbol **)this[49];
  if (v3 == v4 || !*(_QWORD *)(*((_QWORD *)*v4 + 1) + 32))
    return 0;
  v5 = (ZinComputeMutableProgramWrapper *)ComputeMutableProgram;
  v6 = *((unsigned __int8 *)this[17] + 276);
  while (1)
  {
    v7 = *v4;
    if (!*((_QWORD *)*v4 + 23))
      ZinAssertImpl("const symbol must have size > 0\n");
    if (ZinIrSymbol::GetMemType(*v4) && ZinIrSymbol::GetMemType(v7) != 1)
      break;
    v8 = *((_QWORD *)v7 + 2);
    v9 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 128);
    v10 = (char *)v7 + 160;
    if (v6)
    {
      v11 = *((_OWORD *)v7 + 24);
      v60[10] = *((_OWORD *)v7 + 23);
      v60[11] = v11;
      v60[12] = *((_OWORD *)v7 + 25);
      v12 = *((_OWORD *)v7 + 20);
      v60[6] = *((_OWORD *)v7 + 19);
      v60[7] = v12;
      v13 = *((_OWORD *)v7 + 22);
      v60[8] = *((_OWORD *)v7 + 21);
      v60[9] = v13;
      v14 = *((_OWORD *)v7 + 16);
      v60[2] = *((_OWORD *)v7 + 15);
      v60[3] = v14;
      v15 = *((_OWORD *)v7 + 18);
      v60[4] = *((_OWORD *)v7 + 17);
      v60[5] = v15;
      v16 = *((_OWORD *)v7 + 14);
      v60[0] = *((_OWORD *)v7 + 13);
      v60[1] = v16;
      v17 = (char *)v7 + 160;
      if (*((char *)v7 + 183) < 0)
        v17 = *(const char **)v10;
      NextStabTypeno = (unsigned __int16 *)ZinComputeMutableProgramWrapper::GetNextStabTypeno(v5);
      Stab = ZinTensorDescriptorGetStab((uint64_t)v60, v17, NextStabTypeno, (char *)v61, 0x200uLL);
      if (Stab)
      {
        v29 = Stab;
        v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v30)
          ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(v30, v31, v32, v33, v34, v35, v36, v37);
        if (v29 == 14002 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrCodegenHandleKernelTensors(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&,ZinComputeMutableProgramWrapper &,KernelSerializeBuffer const&)::$_0::operator()((uint64_t)v7 + 183, (uint64_t)v7 + 160, v38, v39, v40, v41, v42, v43);
        goto LABEL_26;
      }
      v59[0] = 0x8000000000;
      HIWORD(v59[0]) = *(_WORD *)ZinComputeMutableProgramWrapper::GetNextStabTypeno(v5);
      v59[1] = v8;
      if (ZinComputeMutableProgramWrapper::AddSymbol((uint64_t)v5, 0, (uint64_t)v59, (uint64_t)v61, 0, 0, 0))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrCodegenHandleKernelTensors(ZinIrControlFlowGraph *,ZinIrCompilerParameters const&,ZinComputeMutableProgramWrapper &,KernelSerializeBuffer const&)::$_0::operator()((uint64_t)v61, v44, v45, v46, v47, v48, v49, v50);
LABEL_26:
        v51 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v51)
          ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(v51, v52, v53, v54, v55, v56, v57, v58);
        return 3;
      }
    }
    v61[0] = 0xF00000000;
    v61[1] = v8;
    if (*((char *)v7 + 183) < 0)
      v10 = *(const char **)v10;
    if (ZinComputeMutableProgramWrapper::AddSymbol((uint64_t)v5, v9, (uint64_t)v61, (uint64_t)v10, 0, *((_QWORD *)v7 + 23), 0))goto LABEL_26;
    if (++v4 == v3)
      return 0;
  }
  v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v21)
    ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(v21, v22, v23, v24, v25, v26, v27, v28);
  return 3;
}

uint64_t ZinCompilerCoreJIT::CompileProcedure(ZinCompilerCoreJIT *this)
{
  uint64_t v2;
  const char *v3;
  const __CFString *v4;
  uint64_t v5;
  ZinIrControlFlowGraph *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 7) + 8)) > 0)
    return 3;
  v3 = (char *)this + 288;
  if (*((char *)this + 311) < 0)
    v3 = *(const char **)v3;
  v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  *((_QWORD *)this + 32) = ZinIrCompilationStatus::AddNetwork(*((ZinIrCompilationStatus **)this + 7), v4);
  CFRelease(v4);
  v5 = (*(uint64_t (**)(ZinCompilerCoreJIT *))(*(_QWORD *)this + 24))(this);
  if ((_DWORD)v5)
  {
    v2 = v5;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinCompilerCoreJIT::CompileProcedure();
  }
  else
  {
    v6 = *(ZinIrControlFlowGraph **)(*((_QWORD *)this + 17) + 992);
    v7 = (*(uint64_t (**)(ZinCompilerCoreJIT *, ZinIrControlFlowGraph *))(*(_QWORD *)this + 56))(this, v6);
    if ((_DWORD)v7)
    {
      v2 = v7;
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinCompilerCoreJIT::CompileProcedure();
    }
    else
    {
      v8 = ZinCompilerCore::ValidateMirInfo((CFArrayRef **)this, v6);
      if ((_DWORD)v8)
      {
        v2 = v8;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinCompilerCoreJIT::CompileProcedure();
      }
      else if (*((_BYTE *)this + 456) && (v10 = ZinCompilerCore::RunHazardAnalysis(this, v6), (_DWORD)v10))
      {
        v2 = v10;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinCompilerCoreJIT::CompileProcedure();
      }
      else
      {
        v11 = ZinCompilerCore::DumpDebugProfilingInfo(this, v6);
        if ((_DWORD)v11)
        {
          v2 = v11;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinCompilerCoreJIT::CompileProcedure();
        }
        else
        {
          if (*((_BYTE *)this + 456))
            ZinCompilerCoreJIT::RunCachePrefetchLegalization(this, v6);
          v12 = ZinCompilerCore::RunContextSwitch(this, v6);
          if ((_DWORD)v12)
          {
            v2 = v12;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinCompilerCoreJIT::CompileProcedure();
          }
          else
          {
            v13 = (*(uint64_t (**)(ZinCompilerCoreJIT *))(*(_QWORD *)this + 64))(this);
            if ((_DWORD)v13)
            {
              v2 = v13;
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinCompilerCoreJIT::CompileProcedure();
            }
            else
            {
              v14 = ZinCompilerCore::QualifyOnImbalanceRatio((ZinIrHalParameters ***)this, v6);
              if ((_DWORD)v14)
              {
                v2 = v14;
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  ZinCompilerCoreJIT::CompileProcedure();
              }
              else
              {
                v15 = ZinCompilerCore::DumpLayerStats(this, v6);
                if ((_DWORD)v15)
                {
                  v2 = v15;
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinCompilerCoreJIT::CompileProcedure();
                }
                else
                {
                  ZinIrContext::SetPrivateMemoryPools(*((_QWORD *)this + 17), 0, *((_QWORD *)this + 19) + 104);
                  v16 = ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram((ZinObjectGeneration **)this);
                  if ((_DWORD)v16)
                  {
                    v2 = v16;
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                      ZinCompilerCoreJIT::CompileProcedure();
                  }
                  else
                  {
                    v17 = ZinCompilerCore::RunCodeGenObjectGen(this);
                    if ((_DWORD)v17)
                    {
                      v2 = v17;
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        ZinCompilerCoreJIT::CompileProcedure();
                    }
                    else if (CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 7) + 8)) <= 0)
                    {
                      v2 = ZinCompilerCore::SetLiveIOAttributes(this);
                      if ((_DWORD)v2 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        ZinCompilerCoreJIT::CompileProcedure();
                    }
                    else
                    {
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t ZinCompilerCoreJIT::RunCachePrefetchLegalization(ZinCompilerCoreJIT *this, ZinIrControlFlowGraph *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  ZinIrOpLayer *v5;
  uint64_t v6;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_BYTE *)(*v2 + 1271) && !*(_BYTE *)(v2[1] + 130))
  {
    v3 = *((_QWORD *)a2 + 44);
    v4 = *((_QWORD *)a2 + 45);
    if (v4 == v3)
      ZinAssertImpl("Must run scheduler first");
    while (v4 != v3)
    {
      v5 = *(ZinIrOpLayer **)(v4 - 8);
      v4 -= 8;
      if (ZinIrOpLayer::IsANELayer(v5))
      {
        v3 = v4 + 8;
        break;
      }
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 264);
    *(_BYTE *)(v6 + 1264) = 1;
    *(_QWORD *)(v6 + 1276) = 0;
    *(_QWORD *)(v6 + 1268) = 0;
    *(_QWORD *)(v6 + 1281) = 0;
    *(_QWORD *)(v6 + 1296) = 0;
    *(_BYTE *)(v6 + 1304) = 0;
    *(_QWORD *)(v6 + 1312) = 0;
    *(_WORD *)(v6 + 1320) = 0;
    *(_DWORD *)(v6 + 1348) = 0;
    *(_QWORD *)(v6 + 1352) = 0;
    *(_QWORD *)(v6 + 1328) = 0;
    *(_DWORD *)(v6 + 1335) = 0;
    *(_DWORD *)(v6 + 1340) = 0;
    *(_DWORD *)(v6 + 1343) = 0;
  }
  return 0;
}

uint64_t ZinCompilerCoreJIT::SetLiveIORankMap(ZinCompilerCoreJIT *this, const ZinIrLiveIORankMaps *a2)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v2)
    ZinCompilerCoreJIT::SetLiveIORankMap(v2, v3, v4, v5, v6, v7, v8, v9);
  return 3;
}

uint64_t ZinCompilerCoreJIT::GetLiveIORankMap(ZinCompilerCoreJIT *this)
{
  return 0;
}

void ZinCompilerCoreJIT::~ZinCompilerCoreJIT(ZinCompilerCoreJIT *this)
{
  void *v2;

  *(_QWORD *)this = off_24C01D8D0;
  v2 = (void *)*((_QWORD *)this + 48);
  if (v2)
  {
    *((_QWORD *)this + 49) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>>>::~__hash_table((uint64_t)this + 344);
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  ZinCompilerCore::~ZinCompilerCore(this);
}

{
  void *v2;

  *(_QWORD *)this = off_24C01D8D0;
  v2 = (void *)*((_QWORD *)this + 48);
  if (v2)
  {
    *((_QWORD *)this + 49) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::__unordered_map_hasher<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::__unordered_map_equal<ZinNamedType<unsigned long,AneIndexTag>,std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>,std::equal_to<ZinNamedType<unsigned long,AneIndexTag>>,std::hash<ZinNamedType<unsigned long,AneIndexTag>>,true>,std::allocator<std::__hash_value_type<ZinNamedType<unsigned long,AneIndexTag>,std::unordered_map<MemType,std::unique_ptr<ZinIrMemoryPool>>>>>::~__hash_table((uint64_t)this + 344);
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  ZinCompilerCore::~ZinCompilerCore(this);
  JUMPOUT(0x20BD002F8);
}

void ZinCompilerCoreJIT::BuildLayerGraph()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

void ZinCompilerCoreJIT::RunRegisterAllocator()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

void ZinCompilerCoreJIT::AddConstSymbolsToComputeProgram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Could not add constant tensor to symbol table\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Could not generate debug info string for constant tensor\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Const input tensor should be DRAM resident \n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinCompilerCoreJIT::CompileProcedure()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_1_2();
  OUTLINED_FUNCTION_0_1(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Function call to %s failed in %s:%u", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_10();
}

void ZinCompilerCoreJIT::SetLiveIORankMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "JIT compilation should never reach this\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

BOOL ZinMemCacheUtil::MemoryAllocationTracker::IntersectOrAdjacent(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 <= v2)
  {
    v4 = *a2;
    v5 = a2[1];
    if ((v3 >= v5 || v4 > v5 || v4 >= v2) && v3 != v5)
      return v2 == v4;
    return 1;
  }
  if (v3 == a2[1])
    return 1;
  v4 = *a2;
  return v2 == v4;
}

void ZinMemCacheUtil::MemoryAllocationTracker::AddChunk(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  __int128 *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  unint64_t *v22;
  char *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t *i;
  unint64_t *__p;
  unint64_t *v29;
  unint64_t *v30;
  __int128 v31;
  uint64_t v32;

  v31 = *a2;
  v32 = *((_QWORD *)a2 + 2);
  __p = 0;
  v29 = 0;
  v30 = 0;
  v3 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)a1;
  if (*(_QWORD *)a1 == a1 + 8)
    goto LABEL_46;
  v5 = 0;
  do
  {
    v6 = *((_QWORD *)&v31 + 1);
    v7 = v31;
    if ((unint64_t)v31 <= *((_QWORD *)&v31 + 1))
    {
      v8 = v4[4];
      v9 = v4[5];
      v11 = v8 <= v9;
      if ((unint64_t)v31 >= v9)
        v11 = 0;
      v12 = v8 < *((_QWORD *)&v31 + 1) && v11;
      if ((_QWORD)v31 == v9)
      {
        v10 = v4[5];
      }
      else
      {
        v10 = v4[5];
        if (!v12)
        {
LABEL_13:
          v10 = v9;
          v13 = *((_QWORD *)&v31 + 1) == v8;
          v8 = *((_QWORD *)&v31 + 1);
          if (!v13)
            goto LABEL_37;
        }
      }
    }
    else
    {
      v8 = v4[4];
      v9 = v4[5];
      v10 = v31;
      if ((_QWORD)v31 != v9)
        goto LABEL_13;
    }
    v14 = (__int128 *)(v4 + 4);
    if (v8 < (unint64_t)v31)
      v7 = v8;
    if (*((_QWORD *)&v31 + 1) <= v10)
      v6 = v10;
    *(_QWORD *)&v31 = v7;
    *((_QWORD *)&v31 + 1) = v6;
    if (v5 >= v30)
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * (v5 - __p);
      v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (v30 - __p) > v17)
        v17 = 0x5555555555555556 * (v30 - __p);
      if (0xAAAAAAAAAAAAAAABLL * (v30 - __p) >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v30, v18);
      else
        v19 = 0;
      v20 = &v19[24 * v16];
      v21 = *v14;
      *((_QWORD *)v20 + 2) = v4[6];
      *(_OWORD *)v20 = v21;
      v22 = v29;
      v23 = v20;
      if (v29 != __p)
      {
        do
        {
          v24 = *(_OWORD *)(v22 - 3);
          *((_QWORD *)v23 - 1) = *(v22 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v22 -= 3;
        }
        while (v22 != __p);
        v22 = __p;
      }
      v5 = (unint64_t *)(v20 + 24);
      __p = (unint64_t *)v23;
      v30 = (unint64_t *)&v19[24 * v18];
      if (v22)
        operator delete(v22);
    }
    else
    {
      v15 = *v14;
      v5[2] = v4[6];
      *(_OWORD *)v5 = v15;
      v5 += 3;
    }
    v29 = v5;
LABEL_37:
    v25 = (uint64_t *)v4[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        v26 = (uint64_t *)v4[2];
        v13 = *v26 == (_QWORD)v4;
        v4 = v26;
      }
      while (!v13);
    }
    v4 = v26;
  }
  while (v26 != v3);
  for (i = __p; i != v5; i += 3)
  {
    *(_QWORD *)(a1 + 24) += *i - i[1];
    std::__tree<ZinSpaceRange>::__erase_unique<ZinSpaceRange>((uint64_t **)a1, i);
  }
LABEL_46:
  *(_QWORD *)(a1 + 24) += *((_QWORD *)&v31 + 1) - v31;
  std::__tree<ZinSpaceRange>::__emplace_unique_key_args<ZinSpaceRange,ZinSpaceRange const&>((uint64_t **)a1, (unint64_t *)&v31, (uint64_t)&v31);
  if (__p)
    operator delete(__p);
}

void sub_206FBD3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *ZinMemCacheUtil::MemoryAllocationTracker::RemoveChunk(_OWORD *result, unint64_t *a2)
{
  unint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v28;
  _QWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  _OWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v2 = a2;
  v4 = (_QWORD *)result + 1;
  v3 = (_QWORD *)*((_QWORD *)result + 1);
  if (v3)
  {
    v5 = a2[1];
    do
    {
      v6 = v3[4];
      if (v6 == v5)
        v6 = v3[5];
      v7 = v5 > v6;
      if (v5 <= v6)
        v8 = v3;
      else
        v8 = v3 + 1;
      if (!v7)
        v4 = v3;
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
  }
  if (v4 != *(_QWORD **)result)
  {
    v9 = (_QWORD *)*v4;
    if (*v4)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v11 = v4;
      do
      {
        v10 = (_QWORD *)v11[2];
        v12 = *v10 == (_QWORD)v11;
        v11 = v10;
      }
      while (v12);
    }
    v38 = 0;
    v39 = 0;
    v14 = v10[4];
    v15 = v10[5];
    v13 = v10 + 4;
    v40 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    if (v14 <= v15)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v33 = v2;
      do
      {
        v25 = *v2;
        v24 = v2[1];
        v26 = *v2 >= v15 || v25 > v24;
        if (v26 || v14 >= v24)
          break;
        if (v25 > v14)
        {
          v18 = v25 - v14;
          v19 = *v2;
          v22 = v14;
          v20 = 1;
        }
        if (v15 > v24)
        {
          v16 = v15 - v24;
          v17 = v15;
          v23 = v2[1];
          v21 = 1;
        }
        if (v10 == *(_QWORD **)result)
        {
          v39 = v19;
          v40 = v18;
          v37 = v16;
          v38 = v22;
          v35 = v23;
          v36 = v17;
          *((_QWORD *)result + 3) += v14 - v15;
          v32 = result;
          std::__tree<ZinSpaceRange>::__erase_unique<ZinSpaceRange>((uint64_t **)result, v13);
          result = v32;
          if ((v20 & 1) == 0)
          {
LABEL_38:
            if ((v21 & 1) != 0)
            {
              *((_QWORD *)result + 3) += v17 - v23;
              return std::__tree<ZinSpaceRange>::__emplace_hint_unique_key_args<ZinSpaceRange,ZinSpaceRange const&>((uint64_t **)result, v4, &v35, (uint64_t)&v35);
            }
            return result;
          }
LABEL_37:
          *((_QWORD *)result + 3) += v19 - v22;
          v31 = result;
          std::__tree<ZinSpaceRange>::__emplace_hint_unique_key_args<ZinSpaceRange,ZinSpaceRange const&>((uint64_t **)result, v4, &v38, (uint64_t)&v38);
          result = v31;
          goto LABEL_38;
        }
        v34 = v17;
        v28 = (_QWORD *)*v10;
        if (*v10)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)v28[1];
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v10[2];
            v12 = *v29 == (_QWORD)v10;
            v10 = v29;
          }
          while (v12);
        }
        *((_QWORD *)result + 3) += v14 - v15;
        v30 = result;
        std::__tree<ZinSpaceRange>::__erase_unique<ZinSpaceRange>((uint64_t **)result, v13);
        result = v30;
        v14 = v29[4];
        v15 = v29[5];
        v13 = v29 + 4;
        v10 = v29;
        v2 = v33;
        v17 = v34;
      }
      while (v14 <= v15);
      v39 = v19;
      v40 = v18;
      v37 = v16;
      v38 = v22;
      v35 = v23;
      v36 = v17;
      if ((v20 & 1) == 0)
        goto LABEL_38;
      goto LABEL_37;
    }
  }
  return result;
}

uint64_t ZinMemCacheUtil::MemoryAllocationTracker::SizeOfChunkNotYetAllocated(_QWORD *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v7;
  __int128 *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *__p;
  char *v28;
  char *v29;

  v2 = *a2;
  v3 = a2[1];
  __p = 0;
  v28 = 0;
  v29 = 0;
  v4 = a1 + 1;
  v5 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
  {
    v22 = 0;
    return v3 - v2 - v22;
  }
  v7 = 0;
  do
  {
    v8 = (__int128 *)(v5 + 4);
    if (ZinMemCacheUtil::MemoryAllocationTracker::IntersectOrAdjacent(a2, v5 + 4))
    {
      if (v5[4] < v2)
        v2 = v5[4];
      if (v3 <= v5[5])
        v3 = v5[5];
      if (v7 >= v29)
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * ((v7 - __p) >> 3);
        v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v29 - __p) >> 3) > v11)
          v11 = 0x5555555555555556 * ((v29 - __p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v29 - __p) >> 3) >= 0x555555555555555)
          v12 = 0xAAAAAAAAAAAAAAALL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v29, v12);
        else
          v13 = 0;
        v14 = &v13[24 * v10];
        v15 = *v8;
        *((_QWORD *)v14 + 2) = v5[6];
        *(_OWORD *)v14 = v15;
        v16 = v28;
        v17 = v14;
        if (v28 != __p)
        {
          do
          {
            v18 = *(_OWORD *)(v16 - 24);
            *((_QWORD *)v17 - 1) = *((_QWORD *)v16 - 1);
            *(_OWORD *)(v17 - 24) = v18;
            v17 -= 24;
            v16 -= 24;
          }
          while (v16 != __p);
          v16 = __p;
        }
        v7 = v14 + 24;
        __p = v17;
        v29 = &v13[24 * v12];
        if (v16)
          operator delete(v16);
      }
      else
      {
        v9 = *v8;
        *((_QWORD *)v7 + 2) = v5[6];
        *(_OWORD *)v7 = v9;
        v7 += 24;
      }
      v28 = v7;
    }
    v19 = (_QWORD *)v5[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (_QWORD *)v5[2];
        v21 = *v20 == (_QWORD)v5;
        v5 = v20;
      }
      while (!v21);
    }
    v5 = v20;
  }
  while (v20 != v4);
  if (__p == v7)
  {
    v22 = 0;
    if (!__p)
      return v3 - v2 - v22;
LABEL_38:
    operator delete(__p);
    return v3 - v2 - v22;
  }
  v22 = 0;
  v23 = __p;
  do
  {
    v25 = *(_QWORD *)v23;
    v24 = *((_QWORD *)v23 + 1);
    v23 += 24;
    v22 = v24 + v22 - v25;
  }
  while (v23 != v7);
  if (__p)
    goto LABEL_38;
  return v3 - v2 - v22;
}

void sub_206FBD824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *ZinMemCacheUtil::MemCacheAllocationState::GetAllocationsForSymbol@<X0>(const ZinIrSymbol *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  uint64_t AlignPower2;
  uint64_t v9;
  _QWORD *result;

  v7 = *((_QWORD *)a1 + 3);
  AlignPower2 = ZinLastAlignPower2(v7, a2);
  v9 = ZinAlignPower2(*((_QWORD *)a1 + 23) + v7, a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = operator new(0x18uLL);
  a3[1] = result + 3;
  a3[2] = result + 3;
  *result = AlignPower2;
  result[1] = v9;
  result[2] = v9 - AlignPower2;
  *a3 = result;
  return result;
}

void ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(ZinMemCacheUtil::MemCacheAllocationState *this, const ZinIrSymbol *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  _OWORD *v13;
  unint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;

  v19 = *(unsigned __int8 *)(*((_QWORD *)a2 + 1) + 56);
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(this, &v19))
  {
    v15 = (uint64_t *)&v16;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v20 = &v19;
    v6 = std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this, &v19, (uint64_t)&std::piecewise_construct, (uint64_t **)&v20);
    v7 = v6 + 4;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v6 + 3), (_QWORD *)v6[4]);
    v8 = v16;
    v6[3] = &v16;
    v6[4] = v8;
    v9 = v17;
    v6[5] = v17;
    if (v9)
    {
      v8[2] = (uint64_t)v7;
      v15 = (uint64_t *)&v16;
      v16 = 0;
      v17 = 0;
      v8 = 0;
    }
    else
    {
      v6[3] = v7;
    }
    v6[6] = v18;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v15, v8);
  }
  v15 = (uint64_t *)&v19;
  v10 = std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this, &v19, (uint64_t)&std::piecewise_construct, &v15);
  ZinMemCacheUtil::MemCacheAllocationState::GetAllocationsForSymbol(a2, a3, &v15);
  v11 = v15;
  v12 = v16;
  if (v15 != v16)
  {
    v13 = v10 + 3;
    v14 = (unint64_t *)v15;
    do
    {
      ZinMemCacheUtil::MemoryAllocationTracker::RemoveChunk(v13, v14);
      v14 += 3;
    }
    while (v14 != (unint64_t *)v12);
  }
  if (v11)
    operator delete(v11);
}

void sub_206FBDA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(ZinMemCacheUtil::MemCacheAllocationState *this, const ZinIrSymbol *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;

  v19 = *(unsigned __int8 *)(*((_QWORD *)a2 + 1) + 56);
  if (!std::__hash_table<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CpAllocUtils::AllocationType>>>::find<unsigned long long>(this, &v19))
  {
    v15 = (uint64_t *)&v16;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v20 = &v19;
    v6 = std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this, &v19, (uint64_t)&std::piecewise_construct, (uint64_t **)&v20);
    v7 = v6 + 4;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)(v6 + 3), (_QWORD *)v6[4]);
    v8 = v16;
    v6[3] = &v16;
    v6[4] = v8;
    v9 = v17;
    v6[5] = v17;
    if (v9)
    {
      v8[2] = (uint64_t)v7;
      v15 = (uint64_t *)&v16;
      v16 = 0;
      v17 = 0;
      v8 = 0;
    }
    else
    {
      v6[3] = v7;
    }
    v6[6] = v18;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v15, v8);
  }
  v15 = (uint64_t *)&v19;
  v10 = std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this, &v19, (uint64_t)&std::piecewise_construct, &v15);
  ZinMemCacheUtil::MemCacheAllocationState::GetAllocationsForSymbol(a2, a3, &v15);
  v11 = v15;
  v12 = v16;
  if (v15 != v16)
  {
    v13 = (uint64_t)(v10 + 3);
    v14 = (__int128 *)v15;
    do
    {
      ZinMemCacheUtil::MemoryAllocationTracker::AddChunk(v13, v14);
      v14 = (__int128 *)((char *)v14 + 24);
    }
    while (v14 != (__int128 *)v12);
  }
  if (v11)
    operator delete(v11);
}

void sub_206FBDB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ZinMemCacheUtil::MemCacheAllocationState::CalculateSize(ZinMemCacheUtil::MemCacheAllocationState *this)
{
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v1)
    return 0;
  result = 0;
  do
  {
    result += v1[6];
    v1 = (_QWORD *)*v1;
  }
  while (v1);
  return result;
}

BOOL ZinMemCacheUtil::IsAllocated(int a1)
{
  return a1 == 0;
}

void ZinMemCacheUtil::AddAllocsToActiveTensors(ZinMemCacheUtil *this, const ZinANELayer *a2, ZinMemCacheUtil::MemCacheAllocationState *a3)
{
  uint64_t Hal;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const ZinIrSymbol **v12;
  const ZinIrSymbol *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 528);
  v8 = *((_QWORD *)this + 33);
  if (!*(_DWORD *)(v8 + 1412))
    ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(a2, *(const ZinIrSymbol **)(v8 + 944), v7);
  v9 = (_DWORD *)*((_QWORD *)this + 33);
  v10 = v8 + 712;
  v19 = 0;
  if (!v9[350])
  {
    if (ZinMemSourceIndexTranslator::GetDMASrcIndex(this, 0, &v19, v6))
      goto LABEL_20;
    ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(a2, *(const ZinIrSymbol **)(v10 + 96 * v19 + 40), v7);
    v9 = (_DWORD *)*((_QWORD *)this + 33);
  }
  if (v9[355])
    goto LABEL_9;
  if (ZinMemSourceIndexTranslator::GetDMASrcIndex(this, (const ZinANELayer *)1, &v19, v6))
LABEL_20:
    ZinAssertImpl("Invalid source index");
  ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(a2, *(const ZinIrSymbol **)(v10 + 96 * v19 + 40), v7);
  v9 = (_DWORD *)*((_QWORD *)this + 33);
LABEL_9:
  if (!v9[354])
  {
    (*(void (**)(uint64_t *__return_ptr, ZinMemCacheUtil *))(*(_QWORD *)this + 128))(&v17, this);
    v11 = *(_QWORD *)(v17 + 104);
    if (!v11 || (v12 = *(const ZinIrSymbol ***)(v11 + 40), v12 == *(const ZinIrSymbol ***)(v11 + 48)))
      v13 = 0;
    else
      v13 = *v12;
    ZinMemCacheUtil::MemCacheAllocationState::AddAllocation(a2, v13, v7);
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_206FBDD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinMemCacheUtil::RemoveDepriAndDropsFromActiveTensors(ZinMemCacheUtil *this, const ZinANELayer *a2, ZinMemCacheUtil::MemCacheAllocationState *a3)
{
  uint64_t Hal;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const ZinIrSymbol **v12;
  const ZinIrSymbol *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 528);
  v8 = *((_QWORD *)this + 33);
  if ((*(_DWORD *)(v8 + 1412) & 0xFFFFFFFE) == 2)
    ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(a2, *(const ZinIrSymbol **)(v8 + 944), v7);
  v9 = (_DWORD *)*((_QWORD *)this + 33);
  v10 = v8 + 712;
  v19 = 0;
  if ((v9[350] & 0xFFFFFFFE) == 2)
  {
    if (ZinMemSourceIndexTranslator::GetDMASrcIndex(this, 0, &v19, v6))
      goto LABEL_21;
    ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(a2, *(const ZinIrSymbol **)(v10 + 96 * v19 + 40), v7);
    v9 = (_DWORD *)*((_QWORD *)this + 33);
  }
  if ((v9[355] & 0xFFFFFFFE) == 2)
  {
    if (!ZinMemSourceIndexTranslator::GetDMASrcIndex(this, (const ZinANELayer *)1, &v19, v6))
    {
      ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(a2, *(const ZinIrSymbol **)(v10 + 96 * v19 + 40), v7);
      v9 = (_DWORD *)*((_QWORD *)this + 33);
      goto LABEL_9;
    }
LABEL_21:
    ZinAssertImpl("Invalid source index");
  }
LABEL_9:
  if (v9[340] != 1 && (v9[354] & 0xFFFFFFFE) == 2)
  {
    (*(void (**)(uint64_t *__return_ptr, ZinMemCacheUtil *))(*(_QWORD *)this + 128))(&v17, this);
    v11 = *(_QWORD *)(v17 + 104);
    if (!v11 || (v12 = *(const ZinIrSymbol ***)(v11 + 40), v12 == *(const ZinIrSymbol ***)(v11 + 48)))
      v13 = 0;
    else
      v13 = *v12;
    ZinMemCacheUtil::MemCacheAllocationState::RemoveAllocation(a2, v13, v7);
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_206FBDF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t ZinMemCacheUtil::CalculateExpectedMemCacheSize(ZinIrOpLayer ***a1)
{
  ZinIrOpLayer **v1;
  ZinIrOpLayer **v2;
  unint64_t v3;
  ZinMemCacheUtil *v4;
  ZinMemCacheUtil::MemCacheAllocationState *v5;
  ZinMemCacheUtil::MemCacheAllocationState *v6;
  _QWORD *v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;
  int v12;

  v10 = 0u;
  v11 = 0u;
  v12 = 1065353216;
  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = *v1;
      if (ZinIrOpLayer::IsANELayer(*v1))
      {
        ZinMemCacheUtil::AddAllocsToActiveTensors(v4, (const ZinANELayer *)&v10, v5);
        ZinMemCacheUtil::RemoveDepriAndDropsFromActiveTensors(v4, (const ZinANELayer *)&v10, v6);
        v7 = (_QWORD *)v11;
        if ((_QWORD)v11)
        {
          v8 = 0;
          do
          {
            v8 += v7[6];
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          v8 = 0;
        }
        if (v3 <= v8)
          v3 = v8;
      }
      ++v1;
    }
    while (v1 != v2);
  }
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)&v10);
  return v3;
}

void sub_206FBE018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<ZinSpaceRange>::__emplace_unique_key_args<ZinSpaceRange,ZinSpaceRange const&>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<ZinSpaceRange>::__find_equal<ZinSpaceRange>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::__tree<ZinSpaceRange>::__erase_unique<ZinSpaceRange>(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = std::__tree<ZinSpaceRange>::find<ZinSpaceRange>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,std::__map_value_compare<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>,HazardEdgeCompare,true>,std::allocator<std::__value_type<std::pair<std::shared_ptr<ZinIrHazardNode>,std::shared_ptr<ZinIrHazardNode>>,ZinIrHazardGraph::EdgeType>>>::__remove_node_pointer(a1, v3);
  operator delete(v4);
  return 1;
}

_QWORD *std::__tree<ZinSpaceRange>::find<ZinSpaceRange>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = v3[4];
    v10 = v8 == v5;
    v9 = v8 < v5;
    if (v10)
      v9 = v3[5] < v6;
    v10 = !v9;
    if (v9)
      v11 = v3 + 1;
    else
      v11 = v3;
    if (v10)
      v7 = v3;
    v3 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = v7[4];
  v13 = v6 < v7[5];
  v10 = v5 == v12;
  v14 = v5 < v12;
  if (v10)
    v14 = v13;
  if (v14)
    return v2;
  return v7;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,ZinMemCacheUtil::MemoryAllocationTracker>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_206FBE3B4(_Unwind_Exception *a1)
{
  _QWORD **v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ZinIrDimension,std::set<long>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void ZinIrPEElementWiseUnit::ZinIrPEElementWiseUnit(ZinIrPEElementWiseUnit *this, const ZinIrPEElementWiseUnitInfo *a2)
{
  _QWORD *v4;

  ZinIrPEUnit::ZinIrPEUnit(this, a2);
  *v4 = &off_24C0219C8;
  ZinIrPEUnitInfo::ZinIrPEUnitInfo((ZinIrPEUnitInfo *)(v4 + 130), a2);
  *((_QWORD *)this + 130) = &unk_24C023BB8;
  std::__optional_copy_base<ZinIrScaledEWUnitInfo,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 2008, (uint64_t)a2 + 968);
  std::__optional_copy_base<ZinIrReductionUnitInfo,false>::__optional_copy_base[abi:ne180100]((_BYTE *)this + 2120, (uint64_t)a2 + 1080);
}

void sub_206FBE448(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(_BYTE *)(v1 + 2112))
    ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);
  ZinIrPEUnit::~ZinIrPEUnit((ZinIrKernel **)v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEElementWiseUnit::TensorDimensions(ZinIrPEElementWiseUnit *this, const ZinIrHalParameters *a2, int8x16_t *a3, CFArrayRef *a4)
{
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  int8x16_t v13;
  char *v14;
  __int128 v15;
  void *v17;
  void *v18;
  char *v19;
  void *__p[6];
  _QWORD v21[7];
  void *v22[13];
  _BYTE v23[23];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 2112))
  {
    v9 = *((_QWORD *)this + 1);
    v10 = *(int8x16_t *)(v9 + 8);
    v11 = *(int8x16_t *)(v9 + 24);
    a3[2].i64[0] = *(_QWORD *)(v9 + 40);
    *a3 = v10;
    a3[1] = v11;
LABEL_7:
    if (!*((_BYTE *)this + 2224))
      return 0;
    memset(__p, 0, 24);
    ZinIrReductionUnit::ZinIrReductionUnit(v21, (char *)this + 2120, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v12 = **((_DWORD **)this + 1);
    v13 = a3[1];
    *(int8x16_t *)((char *)__p + 4) = *a3;
    *(int8x16_t *)((char *)&__p[2] + 4) = v13;
    *(uint64_t *)((char *)&__p[4] + 4) = a3[2].i64[0];
    memset(&v23[3], 0, 20);
    v14 = (char *)operator new(0x78uLL);
    v15 = *(_OWORD *)&__p[2];
    *(_OWORD *)(v14 + 4) = *(_OWORD *)__p;
    v18 = v14 + 120;
    v19 = v14 + 120;
    *(_DWORD *)v14 = v12;
    *(_OWORD *)(v14 + 20) = v15;
    *((_OWORD *)v14 + 2) = *(_OWORD *)((char *)&__p[3] + 4);
    *((_WORD *)v14 + 24) = 0;
    *(int64x2_t *)(v14 + 56) = vdupq_n_s64(1uLL);
    v14[72] = 0;
    v14[92] = 0;
    *(_OWORD *)(v14 + 93) = *(_OWORD *)v23;
    *(_QWORD *)(v14 + 108) = *(_QWORD *)&v23[15];
    v17 = v14;
    ZinIrUnit::SetBottomInfo((uint64_t)v21, (uint64_t)&v17);
    v8 = ZinIrReductionUnit::TensorDimensions((ZinIrReductionUnit *)v21, a2, (ZinTensorDimensions *)a3, a4);
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    v21[0] = &off_24C01E100;
    ZinIrUnitInfo::~ZinIrUnitInfo(v22);
    ZinIrUnit::~ZinIrUnit((ZinIrUnit *)v21);
    if (!(_DWORD)v8)
      return 0;
    return v8;
  }
  memset(__p, 0, 24);
  ZinIrScaledEWUnit::ZinIrScaledEWUnit(v21, (char *)this + 2008, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  ZinIrUnit::SetBottomInfo((uint64_t)v21, (uint64_t)this + 8);
  v8 = ZinIrScaledEWUnit::TensorDimensions((ZinIrScaledEWUnit *)v21, a2, a3, (ZinIrUnitStatus *)a4);
  v21[0] = &off_24C01CE58;
  ZinIrUnitInfo::~ZinIrUnitInfo(v22);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)v21);
  if (!(_DWORD)v8)
    goto LABEL_7;
  return v8;
}

void sub_206FBE6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(ZinIrReductionUnit *__hidden this), uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  a19 = &off_24C01E100;
  ZinIrUnitInfo::~ZinIrUnitInfo(&a26);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)&a19);
  _Unwind_Resume(a1);
}

void ZinIrPEElementWiseUnit::CreateBroadcastLayers(ZinIrPEElementWiseUnit *this, ZinIrTensor *a2, ZinBroadcastLayer **a3, ZinBroadcastLayer **a4)
{
  uint64_t v6;
  ZinBroadcastLayerUtils *v9;
  ZinBroadcastLayerUtils *v10;
  size_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  size_t v20;
  void **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *__p[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  void *v40;
  void *v41;
  char *v42;
  void (**v43)(ZinObjectNameFactory *__hidden);
  void *v44;
  char v45;
  _BYTE v46[40];
  char v47;
  _BYTE v48[40];
  char v49;
  _OWORD v50[2];
  uint64_t v51;

  v6 = *((_QWORD *)this + 1);
  if (0xEEEEEEEEEEEEEEEFLL * ((*((_QWORD *)this + 2) - v6) >> 3) > 1)
  {
    v9 = (ZinBroadcastLayerUtils *)(v6 + 8);
    v10 = (ZinBroadcastLayerUtils *)(v6 + 128);
    v50[0] = vdupq_n_s64(1uLL);
    v50[1] = v50[0];
    v51 = 1;
    if (InferEWOutputDimsWithImplicitBroadcast((const ZinTensorDimensions *)(v6 + 8), (const ZinTensorDimensions *)(v6 + 128), (ZinTensorDimensions *)v50))ZinAssertImpl("Cannot infer ElementWise output dimension");
    ZinBroadcastLayerUtils::GetBroadcastDimensionMap(v9, (const ZinTensorDimensions *)v50, v48);
    ZinBroadcastLayerUtils::GetBroadcastDimensionMap(v10, (const ZinTensorDimensions *)v50, v46);
    if (v49)
    {
      if (*((char *)a2 + 47) >= 0)
        v11 = *((unsigned __int8 *)a2 + 47);
      else
        v11 = *((_QWORD *)a2 + 4);
      v12 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 7);
      if (SBYTE7(v33) < 0)
        v12 = (void **)__p[0];
      if (v11)
      {
        if (*((char *)a2 + 47) >= 0)
          v13 = (char *)a2 + 24;
        else
          v13 = (char *)*((_QWORD *)a2 + 3);
        memmove(v12, v13, v11);
      }
      strcpy((char *)v12 + v11, "_bcast0");
      ZinObjectNameFactory::ZinObjectNameFactory(&v43, __p);
      if (SBYTE7(v33) < 0)
        operator delete(__p[0]);
      v14 = *((_QWORD *)a2 + 2);
      v15 = *((_QWORD *)this + 1);
      v36 = *(_OWORD *)(v15 + 64);
      v37 = *(_OWORD *)(v15 + 80);
      v38 = *(_OWORD *)(v15 + 96);
      v39 = *(_DWORD *)(v15 + 112);
      *(_OWORD *)__p = *(_OWORD *)v15;
      v33 = *(_OWORD *)(v15 + 16);
      v34 = *(_OWORD *)(v15 + 32);
      v35 = *(_OWORD *)(v15 + 48);
      v16 = operator new(0x78uLL);
      v41 = (char *)v16 + 120;
      v42 = (char *)v16 + 120;
      v17 = v37;
      v16[4] = v36;
      v16[5] = v17;
      v16[6] = v38;
      *((_DWORD *)v16 + 28) = v39;
      v18 = v33;
      *v16 = *(_OWORD *)__p;
      v16[1] = v18;
      v19 = v35;
      v16[2] = v34;
      v16[3] = v19;
      v40 = v16;
      *a3 = (ZinBroadcastLayer *)ZinBuilder::CreateBroadcast(v14, (uint64_t)&v43, (uint64_t *)&v40, (uint64_t)v48, *((_DWORD *)a2 + 22));
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v43 = off_24C01FBB0;
      if (v45 < 0)
        operator delete(v44);
    }
    if (v47)
    {
      if (*((char *)a2 + 47) >= 0)
        v20 = *((unsigned __int8 *)a2 + 47);
      else
        v20 = *((_QWORD *)a2 + 4);
      v21 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v20 + 7);
      if (SBYTE7(v33) < 0)
        v21 = (void **)__p[0];
      if (v20)
      {
        if (*((char *)a2 + 47) >= 0)
          v22 = (char *)a2 + 24;
        else
          v22 = (char *)*((_QWORD *)a2 + 3);
        memmove(v21, v22, v20);
      }
      strcpy((char *)v21 + v20, "_bcast1");
      ZinObjectNameFactory::ZinObjectNameFactory(&v43, __p);
      if (SBYTE7(v33) < 0)
        operator delete(__p[0]);
      v23 = *((_QWORD *)a2 + 2);
      v24 = *((_QWORD *)this + 1);
      v25 = *(_OWORD *)(v24 + 200);
      v36 = *(_OWORD *)(v24 + 184);
      v37 = v25;
      v38 = *(_OWORD *)(v24 + 216);
      v39 = *(_DWORD *)(v24 + 232);
      v26 = *(_OWORD *)(v24 + 136);
      *(_OWORD *)__p = *(_OWORD *)(v24 + 120);
      v33 = v26;
      v27 = *(_OWORD *)(v24 + 168);
      v34 = *(_OWORD *)(v24 + 152);
      v35 = v27;
      v28 = operator new(0x78uLL);
      v41 = (char *)v28 + 120;
      v42 = (char *)v28 + 120;
      v29 = v37;
      v28[4] = v36;
      v28[5] = v29;
      v28[6] = v38;
      *((_DWORD *)v28 + 28) = v39;
      v30 = v33;
      *v28 = *(_OWORD *)__p;
      v28[1] = v30;
      v31 = v35;
      v28[2] = v34;
      v28[3] = v31;
      v40 = v28;
      *a4 = (ZinBroadcastLayer *)ZinBuilder::CreateBroadcast(v23, (uint64_t)&v43, (uint64_t *)&v40, (uint64_t)v46, *((_DWORD *)a2 + 22));
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v43 = off_24C01FBB0;
      if (v45 < 0)
        operator delete(v44);
      if (v47)
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v46);
    }
    if (v49)
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v48);
  }
  else
  {
    *a3 = 0;
    *a4 = 0;
  }
}

void sub_206FBEAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;

  if (__p)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a44)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a39);
  if (*(_BYTE *)(v44 - 120))
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v44 - 160);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrPEElementWiseUnit::CreateReductionLayer(uint64_t a1, const ZinIrHalParameters *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int **v10;
  int v11;
  char *v12;
  __int128 v13;
  ZinIrKernel *v14;
  void *v16;
  void *v17;
  char *v18;
  void *v19[6];
  _BYTE v20[24];
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  void *v27;
  _BYTE v28[23];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2224))
    std::__throw_bad_optional_access[abi:ne180100]();
  v8 = a1 + 2120;
  v9 = operator new();
  __p = 0;
  v25 = 0;
  v26 = 0;
  ZinIrReductionUnit::ZinIrReductionUnit(v9, v8, &__p);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 2112))
  {
    memset(v19, 0, 24);
    ZinIrScaledEWUnit::ZinIrScaledEWUnit(&__p, a1 + 2008, v19);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    v10 = (int **)(a1 + 8);
    ZinIrUnit::SetBottomInfo((uint64_t)&__p, (uint64_t)v10);
    v21 = (int8x16_t)vdupq_n_s64(1uLL);
    v22 = v21;
    v23 = 1;
    ZinIrUnitStatus::ZinIrUnitStatus((ZinIrUnitStatus *)v20);
    if (ZinIrScaledEWUnit::TensorDimensions((ZinIrScaledEWUnit *)&__p, a2, &v21, (ZinIrUnitStatus *)v20))
      ZinAssertImpl("Failed to get the dimensions of the Scaled EW subunit");
    v11 = **v10;
    *(int8x16_t *)((char *)v19 + 4) = v21;
    *(int8x16_t *)((char *)&v19[2] + 4) = v22;
    *(void **)((char *)&v19[4] + 4) = (void *)v23;
    memset(&v28[3], 0, 20);
    v12 = (char *)operator new(0x78uLL);
    v13 = *(_OWORD *)&v19[2];
    *(_OWORD *)(v12 + 4) = *(_OWORD *)v19;
    v17 = v12 + 120;
    v18 = v12 + 120;
    *(_DWORD *)v12 = v11;
    *(_OWORD *)(v12 + 20) = v13;
    *((_OWORD *)v12 + 2) = *(_OWORD *)((char *)&v19[3] + 4);
    *((_WORD *)v12 + 24) = 0;
    *(int64x2_t *)(v12 + 56) = vdupq_n_s64(1uLL);
    v12[72] = 0;
    v12[92] = 0;
    *(_OWORD *)(v12 + 93) = *(_OWORD *)v28;
    *(_QWORD *)(v12 + 108) = *(_QWORD *)&v28[15];
    v16 = v12;
    ZinIrUnit::SetBottomInfo(v9, (uint64_t)&v16);
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
    ZinIrUnitStatus::~ZinIrUnitStatus((ZinIrUnitStatus *)v20);
    __p = &off_24C01CE58;
    ZinIrUnitInfo::~ZinIrUnitInfo(&v27);
    ZinIrUnit::~ZinIrUnit((ZinIrUnit *)&__p);
  }
  else
  {
    ZinIrUnit::SetBottomInfo(v9, a1 + 8);
  }
  __p = 0;
  *a4 = (*(uint64_t (**)(uint64_t, const ZinIrHalParameters *, uint64_t, void **))(*(_QWORD *)v9 + 80))(v9, a2, a3, &__p);
  v14 = (ZinIrKernel *)__p;
  __p = 0;
  if (v14)
  {
    ZinIrKernel::~ZinIrKernel(v14);
    MEMORY[0x20BD002F8]();
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

void sub_206FBEDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;

  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEElementWiseUnit::CreateLayer(uint64_t a1, const ZinIrHalParameters *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  __int128 __p;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  __int128 v37;
  uint64_t v38;
  ZinBroadcastLayer *v39;
  __int128 v40;
  uint64_t v41;
  ZinBroadcastLayer *v42;
  _QWORD v43[7];

  if (*(_BYTE *)(a1 + 2112))
  {
    v8 = operator new();
    __p = 0uLL;
    v24 = 0;
    ZinIrScaledEWUnit::ZinIrScaledEWUnit(v8, a1 + 2008, &__p);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    ZinIrUnit::SetBottomInfo(v8, a1 + 8);
    v9 = (*(uint64_t (**)(uint64_t, const ZinIrHalParameters *, uint64_t, uint64_t))(*(_QWORD *)v8 + 80))(v8, a2, a3, a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    v9 = 0;
  }
  ZinIrPEUnit::CreateCommonSubLayers(a1, (uint64_t)a2, a3, (uint64_t)v43);
  *(_QWORD *)&v40 = 0;
  *((_QWORD *)&v40 + 1) = v43[0];
  v41 = 0;
  v42 = 0;
  *(_QWORD *)&v37 = 0;
  *((_QWORD *)&v37 + 1) = v43[1];
  v38 = 0;
  v39 = 0;
  ZinIrPEElementWiseUnit::CreateBroadcastLayers((ZinIrPEElementWiseUnit *)a1, **(ZinIrTensor ***)a3, &v42, &v39);
  v32 = v43[3];
  v33 = v43[5];
  memset(v36, 0, sizeof(v36));
  v26 = 0;
  LOBYTE(v27) = 0;
  v28 = 0;
  v29 = 0;
  v24 = 0;
  __p = v43[2];
  LOBYTE(v25) = 0;
  v30 = 0;
  v31 = 0;
  v34 = 0;
  v35 = v43[6];
  if (*(_BYTE *)(a1 + 2224))
  {
    ZinIrPEElementWiseUnit::CreateReductionLayer(a1, a2, a3, &v24);
    v25 = *(_DWORD *)(a1 + 2208);
    v26 = 1;
    v27 = *(_DWORD *)(a1 + 2212);
    v28 = 1;
    v29 = ReductionPostProcessOpToNonLinearMode(*(_DWORD *)(a1 + 2204));
  }
  ZinPELayer::GetPostScaleAndBiasFromGOC((ZinGOCLayer *)v43[4], &v22);
  v10 = operator new();
  v11 = v10;
  v12 = *(_QWORD *)(a3 + 8);
  v20 = *(_QWORD *)(v12 - 16);
  v13 = *(std::__shared_weak_count **)(v12 - 8);
  v21 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  ZinPEElementWiseLayer::ZinPEElementWiseLayer(v10, &v20, (__int128 *)(a1 + 1048), &v40, &v37, v9, &__p, (uint64_t)v36, &v22);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v11;
}

void sub_206FBF12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  if (__p)
    operator delete(__p);
  MEMORY[0x20BD002F8](v16, 0x10B3C40268D61AFLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrPEElementWiseUnit::CreateKernel(ZinIrPEUnit *a1, const ZinIrHalParameters *a2, ZinIrFileManager *a3, const ZinWeightFileInfo *a4, uint64_t a5, uint64_t a6, ZinIrUnitStatus *a7)
{
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a5)
    ZinAssertImpl("PEElementWise does not support Espresso scale & bias format", a2, a3, a4, a5, a6, a7, v7, v8);
  return ZinIrPEUnit::CreateCommonSubKernels(a1, a2, a3, a4, a7);
}

void ZinIrPEElementWiseUnit::~ZinIrPEElementWiseUnit(ZinIrPEElementWiseUnit *this)
{
  ZinIrPEElementWiseUnit::~ZinIrPEElementWiseUnit(this);
  JUMPOUT(0x20BD002F8);
}

{
  void **v2;

  *(_QWORD *)this = &off_24C0219C8;
  v2 = (void **)((char *)this + 1040);
  *((_QWORD *)this + 130) = &unk_24C023BB8;
  if (*((_BYTE *)this + 2224))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 265);
  if (*((_BYTE *)this + 2112))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 251);
  ZinIrPEUnitInfo::~ZinIrPEUnitInfo(v2);
  ZinIrPEUnit::~ZinIrPEUnit((ZinIrKernel **)this);
}

uint64_t ZinIrSpaceToBatchUnit::ZinIrSpaceToBatchUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  __int128 v6;
  int v7;
  uint64_t v8;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C020AE8;
  v5[7] = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5[10] = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v5 + 4) = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 96), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = off_24C023830;
  v8 = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 136) = v8;
  return a1;
}

void sub_206FBF31C(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;

  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSpaceToBatchUnit::TensorDimensions(ZinIrSpaceToBatchUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - (_QWORD)v4 == 120)
  {
    result = 0;
    *((_QWORD *)a3 + 4) = v4[5];
    v7 = v4[2];
    v9 = *((int *)this + 34);
    v8 = *((int *)this + 35);
    *(_QWORD *)a3 = v4[1] * v9 * v8;
    *((_QWORD *)a3 + 1) = v7;
    v10 = v4[3] / v8;
    v11 = v4[4] / v9;
    *((_QWORD *)a3 + 2) = v10;
    *((_QWORD *)a3 + 3) = v11;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, CFSTR("InvalidBottomCount"));
    return 3;
  }
  return result;
}

uint64_t ZinIrSpaceToBatchUnit::CreateOpcode@<X0>(ZinIrSpaceToBatchUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v4 = (uint64_t *)((char *)this + 136);
  v5 = operator new();
  result = ZinIrSpaceToBatchInfo::ZinIrSpaceToBatchInfo(v5, v4);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  return result;
}

void sub_206FBF40C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40468F112ELL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrSpaceToBatchUnit::CreateLayer(ZinIrSpaceToBatchUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  int v28;
  uint64_t v29;

  ZinIrSpaceToBatchUnit::CreateOpcode(a1, (uint64_t)&v28);
  if (v28)
  {
    v5 = 0;
  }
  else
  {
    v6 = operator new();
    v5 = v6;
    v7 = (std::__shared_weak_count *)(*a3)[1];
    v26 = **a3;
    v27 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ZinSpaceToBatchLayer::ZinSpaceToBatchLayer(v6, &v29, &v26, (char *)a1 + 64);
    v10 = v27;
    if (v27)
    {
      v11 = (unint64_t *)&v27->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (__int128 *)*((_QWORD *)a1 + 1);
    v21 = v13[4];
    v22 = v13[5];
    v23 = v13[6];
    v24 = *((_DWORD *)v13 + 28);
    v17 = *v13;
    v18 = v13[1];
    v19 = v13[2];
    v20 = v13[3];
    v14 = operator new(0x78uLL);
    v14[4] = v21;
    v14[5] = v22;
    v14[6] = v23;
    *((_DWORD *)v14 + 28) = v24;
    *v14 = v17;
    v14[1] = v18;
    v14[2] = v19;
    v14[3] = v20;
    v25 = v14;
    ZinIrOpLayer::ValidateSemantics(v5);
    if (v25)
      operator delete(v25);
  }
  v15 = v29;
  v29 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v5;
}

void sub_206FBF5B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

void ZinIrSpaceToBatchUnit::~ZinIrSpaceToBatchUnit(void **this)
{
  *this = &off_24C020AE8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C020AE8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

BOOL ZinSpaceToBatchLayerUtils::CanBeDecomposedToReshapeTranspose(ZinSpaceToBatchLayerUtils *this, ZinSpaceToBatchLayerUtils **a2, ZinSpaceToBatchLayer *a3)
{
  uint64_t v5;
  uint64_t v6;
  ZinIrOpLayer *v7;

  if (*((_BYTE *)this + 1880)
    && (v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)a2[11] + 32))(*(_QWORD *)a2[11], 0, 0), v6 = (*((uint64_t (**)(ZinSpaceToBatchLayerUtils **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0), *(_QWORD *)(v5 + 72) <= *((_QWORD *)this + 46))&& *(_QWORD *)(v5 + 56) <= *((_QWORD *)this + 40)&& *(_QWORD *)(v6 + 48) <= *((_QWORD *)this + 48))
  {
    return ZinSpaceToBatchLayerUtils::IsTransposeEfficient(a2[2], this, (const std::string::value_type **)a2, v7);
  }
  else
  {
    return 0;
  }
}

BOOL ZinSpaceToBatchLayerUtils::IsTransposeEfficient(ZinSpaceToBatchLayerUtils *this, ZinIrContext *a2, const std::string::value_type **a3, ZinIrOpLayer *a4)
{
  uint64_t InputTensor;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  const std::string::value_type *v16;
  char *v17;
  const std::string::value_type *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _QWORD *v28;
  ZinIrTensor *v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *__p[2];
  std::string::size_type v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  _QWORD *v43;
  ZinIrTensor *v44;
  std::__shared_weak_count *v45;
  std::string v46;
  _QWORD v47[3];
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a3, 0);
  ZinIrTensor::GetDimensionOrderHint((ZinIrTensor *)InputTensor, (uint64_t)&v49);
  ZinIrTensor::GetTensorSizeInBytesFromResidency((ZinIrTensor *)InputTensor, 2, (uint64_t)&v49, 0);
  v9 = v8;
  if ((_QWORD)v49)
  {
    *((_QWORD *)&v49 + 1) = v49;
    operator delete((void *)v49);
  }
  v10 = *(_OWORD *)(InputTensor + 64);
  v49 = *(_OWORD *)(InputTensor + 48);
  v50 = v10;
  v11 = *(_QWORD *)(InputTensor + 80);
  v12 = *(_QWORD *)(InputTensor + 56);
  *((_QWORD *)&v49 + 1) = *(_QWORD *)(InputTensor + 72);
  *((_QWORD *)&v50 + 1) = v12;
  v51 = v11;
  if (*(char *)(InputTensor + 47) >= 0)
    v13 = *(unsigned __int8 *)(InputTensor + 47);
  else
    v13 = *(_QWORD *)(InputTensor + 32);
  v14 = &v46;
  std::string::basic_string[abi:ne180100]((uint64_t)&v46, v13 + 9);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*(char *)(InputTensor + 47) >= 0)
      v15 = (const void *)(InputTensor + 24);
    else
      v15 = *(const void **)(InputTensor + 24);
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "_c_w_test");
  v18 = a3[3];
  v17 = (char *)(a3 + 3);
  v16 = v18;
  v19 = v17[23];
  if (v19 >= 0)
    v20 = v17;
  else
    v20 = v16;
  if (v19 >= 0)
    v21 = v17[23];
  else
    v21 = *((_QWORD *)v17 + 1);
  v22 = std::string::append(&v46, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v38 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v47, __p);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  v24 = *(_DWORD *)(InputTensor + 88);
  ZinObjectNameFactory::CreateName((uint64_t)v47, 0, &v46);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  LODWORD(__p[0]) = 0;
  v38 = 0;
  v39 = 0;
  __p[1] = 0;
  v40 = 0;
  ZinIrTensor::CreateTensor((uint64_t)this, v24, &v49, (__int128 *)&v46, &v43, &v41, (unsigned int *)__p, (uint64_t *)&v44);
  v25 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v43;
  v43 = 0;
  if (v28)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v43, v28);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  v29 = v44;
  ZinIrTensor::GetDimensionOrderHint(v44, (uint64_t)__p);
  ZinIrTensor::GetTensorSizeInBytesFromResidency(v29, 2, (uint64_t)__p, 0);
  v31 = v30;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v32 = (unint64_t)v9 < *((_QWORD *)a2 + 51) || (float)((float)v31 / (float)v9) <= 1.5;
  v33 = v45;
  if (v45)
  {
    v34 = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v47[0] = off_24C01FBB0;
  if (v48 < 0)
    operator delete((void *)v47[1]);
  return v32;
}

void sub_206FBFA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void (**a28)(ZinObjectNameFactory *__hidden this),void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  a28 = off_24C01FBB0;
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

ZinEngineLayerMirInfo *ZinIrLayerSplitInfo::Part::Constraints::ApplyTo(ZinIrLayerSplitInfo::Part::Constraints *this, ZinNEConvLayer *a2)
{
  uint64_t Hal;
  unint64_t v5;
  ZinEngineLayerMirInfo *v6;
  ZinEngineLayerMirInfo *v7;
  ZinEngineLayerMirInfo *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  ZinEngineLayerMirInfo *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  ZinMirConvUtils *v18;
  ZinMirConvUtils *v19;
  ZinMirConvUtils *v20;
  BOOL IsChannelwiseConvolution;
  unint64_t v22;
  ZinEngineLayerMirInfo *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  ZinEngineLayerMirInfo *result;
  ZinEngineLayerMirInfo *v29;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
  v5 = *(int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 8);
  v6 = (ZinEngineLayerMirInfo *)operator new();
  ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v6, v5);
  v29 = v6;
  ZinEngineLayerMirInfo::SetOCGSize(v6, *((_QWORD *)this + 1));
  ZinEngineLayerMirInfo::SetNumNeededNEs(v6, *(_QWORD *)this);
  *((_QWORD *)v6 + 13) = *((int *)this + 154);
  ZinMirL2Config::NE::SetSmallSourceMode((uint64_t)v6 + 120, *((_DWORD *)this + 4));
  ZinIrKernel::SetSmallSourceMode(*(_QWORD *)(*((_QWORD *)a2 + 54) + 136), *((_DWORD *)this + 4));
  v7 = v29;
  *((_DWORD *)v29 + 28) = *((_DWORD *)this + 156);
  ZinMirL2Config::ZinMirSetFormats((ZinEngineLayerMirInfo *)((char *)v7 + 120), a2);
  if (*((_BYTE *)this + 54))
  {
    v8 = v29;
    *(_OWORD *)((char *)v29 + 120) = *(_OWORD *)((char *)this + 24);
    v9 = *(_OWORD *)((char *)this + 56);
    v10 = *(_OWORD *)((char *)this + 72);
    v11 = *(_OWORD *)((char *)this + 88);
    *(_OWORD *)((char *)v8 + 136) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)((char *)v8 + 184) = v11;
    *(_OWORD *)((char *)v8 + 168) = v10;
    *(_OWORD *)((char *)v8 + 152) = v9;
  }
  if (*((_BYTE *)this + 55))
  {
    v12 = v29;
  }
  else
  {
    v12 = v29;
    if (!*((_BYTE *)this + 54))
      goto LABEL_7;
  }
  *((_BYTE *)v12 + 151) = 1;
LABEL_7:
  if (*((_BYTE *)this + 160))
  {
    v13 = *((_OWORD *)this + 9);
    *((_BYTE *)v12 + 256) = *((_BYTE *)this + 160);
    *((_OWORD *)v12 + 15) = v13;
  }
  if (*((_BYTE *)this + 137))
  {
    v14 = *(_OWORD *)((char *)this + 104);
    v15 = *(_OWORD *)((char *)this + 120);
    *((_WORD *)v12 + 116) = *((_WORD *)this + 68);
    *(_OWORD *)((char *)v12 + 216) = v15;
    *(_OWORD *)((char *)v12 + 200) = v14;
  }
  *((_BYTE *)v12 + 1680) = 1;
  ZinEngineLayerMirInfo::SetChannelAssignmentLock(v12, 1);
  v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0);
  v17 = (*(uint64_t (**)(ZinNEConvLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v18 = *(ZinMirConvUtils **)(v16 + 56);
  v19 = *(ZinMirConvUtils **)(v17 + 56);
  v20 = (ZinMirConvUtils *)(*(uint64_t (**)(ZinNEConvLayer *))(*(_QWORD *)a2 + 88))(a2);
  IsChannelwiseConvolution = ZinMirConvUtils::IsChannelwiseConvolution(v18, v19, v20);
  v22 = *(_QWORD *)(v16 + 56);
  if (IsChannelwiseConvolution)
  {
    v23 = v29;
    *((_QWORD *)v29 + 10) = v22;
  }
  else
  {
    *((_QWORD *)v29 + 10) = v22 / (*(uint64_t (**)(ZinNEConvLayer *))(*(_QWORD *)a2 + 88))(a2);
    v24 = *(_QWORD *)(v17 + 56);
    v25 = (*(uint64_t (**)(ZinNEConvLayer *))(*(_QWORD *)a2 + 88))(a2);
    v23 = v29;
    v22 = v24 / v25;
  }
  *((_QWORD *)v23 + 11) = v22;
  *(_BYTE *)v23 = IsChannelwiseConvolution;
  *((_BYTE *)v23 + 2) = *((_BYTE *)this + 628);
  v26 = *(_OWORD *)((char *)this + 632);
  v27 = *(_OWORD *)((char *)this + 648);
  *(_OWORD *)((char *)v23 + 40) = *(_OWORD *)((char *)this + 664);
  *(_OWORD *)((char *)v23 + 24) = v27;
  *(_OWORD *)((char *)v23 + 8) = v26;
  if ((char *)v23 + 8 != (char *)this + 632)
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)v23 + 56, *((char **)this + 85), *((_QWORD *)this + 86), (uint64_t)(*((_QWORD *)this + 86) - *((_QWORD *)this + 85)) >> 3);
  ZinANELayer::SetMirInfo((uint64_t)a2, (int **)&v29);
  result = v29;
  v29 = 0;
  if (result)
  {
    ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(result);
    return (ZinEngineLayerMirInfo *)MEMORY[0x20BD002F8]();
  }
  return result;
}

void sub_206FBFDA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<ZinEngineLayerMirInfo>::reset[abi:ne180100]((ZinEngineLayerMirInfo **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLayerSplitInfo::AppendNonCompressed(uint64_t *a1, uint64_t a2, uint64_t a3, const ZinIrLayerSplitInfo::Part::Constraints *a4)
{
  unint64_t v6;
  uint64_t v8;
  _DWORD v9[180];

  ZinIrLayerSplitInfo::Part::CreateNonCompressed(a3, a4, (uint64_t)&v8);
  if (a2)
  {
    v6 = a1[1];
    do
    {
      if (v6 >= a1[2])
      {
        v6 = std::vector<ZinIrLayerSplitInfo::Part>::__push_back_slow_path<ZinIrLayerSplitInfo::Part const&>(a1, (uint64_t)&v8);
      }
      else
      {
        *(_QWORD *)v6 = v8;
        std::__optional_copy_base<ZinIrLayerSplitInfo::Part::Constraints,false>::__optional_copy_base[abi:ne180100]((ZinIrLayerSplitInfo::Part::Constraints *)(v6 + 8), (const ZinIrLayerSplitInfo::Part::Constraints *)v9);
        *(_DWORD *)(v6 + 720) = v9[178];
        v6 += 728;
        a1[1] = v6;
      }
      a1[1] = v6;
      --a2;
    }
    while (a2);
  }
  return std::__optional_destruct_base<ZinIrLayerSplitInfo::Part::Constraints,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v9);
}

void sub_206FBFE98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<ZinIrLayerSplitInfo::Part::Constraints,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrLayerSplitInfo::GetNumOfChannels(ZinIrLayerSplitInfo *this)
{
  _DWORD *v1;
  _DWORD *v2;
  int v3;

  v1 = *(_DWORD **)this;
  v2 = (_DWORD *)*((_QWORD *)this + 1);
  if (*(_DWORD **)this == v2)
    return 0;
  v3 = 0;
  do
  {
    v3 += *v1;
    v1 += 182;
  }
  while (v1 != v2);
  return v3;
}

void ZinIrLayerBatchSplitInfo::AppendBatchSplit(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v5 = *a3;
  v4 = a3[1];
  if (v4 == *a3)
  {
    if (a2)
    {
      v19 = 0;
      v20 = (_QWORD *)(a1 + 16);
      v21 = *(_QWORD **)(a1 + 8);
      do
      {
        if ((unint64_t)v21 >= *v20)
        {
          v23 = *(_QWORD **)a1;
          v24 = ((uint64_t)v21 - *(_QWORD *)a1) >> 3;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
LABEL_41:
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v26 = *v20 - (_QWORD)v23;
          if (v26 >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v27);
            v23 = *(_QWORD **)a1;
            v21 = *(_QWORD **)(a1 + 8);
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[8 * v24];
          *(_QWORD *)v29 = 1;
          v22 = v29 + 8;
          while (v21 != v23)
          {
            v30 = *--v21;
            *((_QWORD *)v29 - 1) = v30;
            v29 -= 8;
          }
          *(_QWORD *)a1 = v29;
          *(_QWORD *)(a1 + 8) = v22;
          *(_QWORD *)(a1 + 16) = &v28[8 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v21 = 1;
          v22 = v21 + 1;
        }
        *(_QWORD *)(a1 + 8) = v22;
        ++v19;
        v21 = v22;
      }
      while (v19 != a2);
    }
  }
  else
  {
    v6 = (_QWORD *)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    do
    {
      v8 = *v5;
      if ((unint64_t)v7 >= *v6)
      {
        v10 = *(_QWORD **)a1;
        v11 = ((uint64_t)v7 - *(_QWORD *)a1) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_41;
        v13 = *v6 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v14);
          v10 = *(_QWORD **)a1;
          v7 = *(_QWORD **)(a1 + 8);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v8;
        v9 = v16 + 8;
        while (v7 != v10)
        {
          v17 = *--v7;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a1 + 16) = &v15[8 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v7 = v8;
        v9 = v7 + 1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      ++v5;
      v7 = v9;
    }
    while (v5 != v4);
  }
}

BOOL ZinValidateKernelDimension::IsSmallKernelHeightForPool(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 28);
  if (v2 > *(_QWORD *)(a1 + 32) && v3 == 2)
    return 0;
  return v2 <= *(_QWORD *)(a1 + 8) || v3 != 1;
}

BOOL ZinValidateKernelDimension::IsSmallKernelWidthForPool(_QWORD *a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 24);
  if (*(_QWORD *)a2 > a1[3] && v2 == 2)
    return 0;
  return *(_QWORD *)a2 <= *a1 || v2 != 1;
}

uint64_t ZinValidateKernelDimension::IsSmallKernelDepthForPool(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t v3;
  int v4;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 32);
  if (a3)
  {
    if ((v3 <= a1[5] || v4 != 2) && (v3 <= a1[2] || v4 != 1))
      return 1;
  }
  else if ((v3 <= a1[6] || v4 != 1) && (v3 <= a1[7] || v4 != 2))
  {
    return 1;
  }
  return 0;
}

void **ZinValidateKernelDimension::DecomposeToParts@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X3>, uint64_t *a4@<X4>, unsigned int a5@<W5>, uint64_t a6@<X8>)
{
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  void **result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  float v23;
  __int128 v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  char v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  const char *v35;
  const char *v36;
  char *v37;
  char *__format;
  char v39;
  _BOOL4 v40;
  int64x2_t v41;
  unsigned int v42;
  uint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v12 = IsFullyConnected(a4[3], *(_QWORD *)a3, *(int *)(a3 + 48), *(int *)(a3 + 52));
  v13 = IsFullyConnected(a4[2], *(_QWORD *)(a3 + 8), *(int *)(a3 + 56), *(int *)(a3 + 60));
  v14 = IsFullyConnected(a4[4], *(_QWORD *)(a3 + 16), *(int *)(a3 + 64), *(int *)(a3 + 68));
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v42 = a2;
  v40 = v12;
  ZinMirPoolUtils::GetMaxKernelSize(a1, a2, (_DWORD *)a3, a5, v12, v13, v14, &v54, &v53, &v52);
  result = (void **)a6;
  v43 = 0;
  v16 = 0;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_DWORD *)(a6 + 24) = 1065353216;
  v17 = *(_QWORD *)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)a3 > v54;
  v21 = v18 > v53;
  v22 = v19 > v52;
  v23 = 1.0;
  v37 = "Kernel width must be a power of 2.";
  __format = "PadLeft (%d) and PadRight (%d) must be 0.";
  v41 = vdupq_n_s64(1uLL);
  v39 = !v14;
  do
  {
    v44 = v41;
    v45 = 1;
    *(_QWORD *)&v24 = 0x100000001;
    *((_QWORD *)&v24 + 1) = 0x100000001;
    v46 = v24;
    v47 = 0x100000001;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    v51 = v42;
    if (v20)
    {
      v44.i64[0] = 2;
      LODWORD(v46) = 2;
      LODWORD(v48) = 0;
      if ((v17 & v40) == 1)
      {
        HIDWORD(v48) = 1;
        v25 = (float)v17++;
        v23 = v23 * (float)((float)v17 / v25);
      }
      else if ((v17 & 1) != 0)
      {
        goto LABEL_48;
      }
      v26 = *(unsigned int *)(a3 + 48);
      v27 = *(unsigned int *)(a3 + 52);
      if (*(_QWORD *)(a3 + 48))
        goto LABEL_44;
      if (v17 >= 0)
        v29 = v17;
      else
        v29 = v17 + 1;
      v17 = v29 >> 1;
      v20 = v29 >> 1 > v54;
      if (!v21)
      {
LABEL_17:
        v21 = 0;
        if ((v43 & 0x100000000) == 0)
        {
          v44.i64[1] = v18;
          DWORD1(v46) = *(_DWORD *)(a3 + 28);
          v49 = *(_QWORD *)(a3 + 56);
        }
        HIDWORD(v43) = 1;
        if (v22)
        {
LABEL_20:
          v45 = 2;
          DWORD2(v46) = 2;
          HIDWORD(v47) = 1;
          v50 = 0;
          v26 = *(unsigned int *)(a3 + 64);
          v27 = *(unsigned int *)(a3 + 68);
          if (!*(_QWORD *)(a3 + 64))
          {
            v30 = v39;
            if ((v19 & 1) == 0)
              v30 = 1;
            if ((v30 & 1) == 0)
            {
              HIDWORD(v50) = 1;
              v31 = (float)v19++;
              v23 = (float)((float)v19 / v31) * v23;
LABEL_34:
              if (v19 >= 0)
                v33 = v19;
              else
                v33 = v19 + 1;
              v19 = v33 >> 1;
              v22 = v33 >> 1 > v52;
              goto LABEL_38;
            }
            if ((v19 & 1) == 0)
              goto LABEL_34;
            v36 = "Kernel depth must be a power of 2.";
LABEL_47:
            v37 = (char *)v36;
LABEL_48:
            ZinAssertImpl(v37);
          }
          v35 = "PadFront (%d) and PadBack (%d) must be 0.";
LABEL_43:
          __format = (char *)v35;
LABEL_44:
          ZinAssertImpl(__format, v26, v27);
        }
        goto LABEL_30;
      }
    }
    else
    {
      v20 = 0;
      if ((v16 & 1) == 0)
      {
        v44.i64[0] = v17;
        LODWORD(v46) = *(_DWORD *)(a3 + 24);
        v48 = *(_QWORD *)(a3 + 48);
      }
      v16 = 1;
      if (!v21)
        goto LABEL_17;
    }
    v44.i64[1] = 2;
    DWORD1(v46) = 2;
    LODWORD(v47) = 1;
    v49 = 0;
    v27 = *(unsigned int *)(a3 + 56);
    v26 = *(unsigned int *)(a3 + 60);
    if (*(_QWORD *)(a3 + 56))
    {
      v35 = "PadTop (%d) and PadBot (%d) must be 0.";
      goto LABEL_43;
    }
    if ((v18 & v13) == 1)
    {
      HIDWORD(v49) = 1;
      v28 = (float)v18++;
      v23 = (float)((float)v18 / v28) * v23;
    }
    else if ((v18 & 1) != 0)
    {
      v36 = "Kernel height must be a power of 2.";
      goto LABEL_47;
    }
    if (v18 >= 0)
      v32 = v18;
    else
      v32 = v18 + 1;
    v18 = v32 >> 1;
    v21 = v32 >> 1 > v53;
    if (v22)
      goto LABEL_20;
LABEL_30:
    v22 = 0;
    if ((v43 & 1) == 0)
    {
      v45 = v19;
      DWORD2(v46) = *(_DWORD *)(a3 + 32);
      v50 = *(_QWORD *)(a3 + 64);
    }
    LODWORD(v43) = 1;
LABEL_38:
    v34 = result;
    ZinIrKernelSizeSplitInfo::Append(result, &v44);
    result = v34;
  }
  while ((v16 & HIDWORD(v43) & v43 & 1) == 0);
  *((float *)v34 + 6) = v23;
  return result;
}

void sub_206FC0584(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ZinIrKernelSizeSplitInfo::Append(void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (_BYTE *)*a1) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x199999999999999)
      v15 = 0x333333333333333;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrCodegenTDPartitionStats>>(v4, v15);
    else
      v16 = 0;
    v17 = &v16[80 * v12];
    v18 = &v16[80 * v15];
    *(_OWORD *)v17 = *a2;
    v19 = a2[1];
    v20 = a2[2];
    v21 = a2[4];
    *((_OWORD *)v17 + 3) = a2[3];
    *((_OWORD *)v17 + 4) = v21;
    *((_OWORD *)v17 + 1) = v19;
    *((_OWORD *)v17 + 2) = v20;
    v11 = v17 + 80;
    v23 = (char *)*a1;
    v22 = (char *)a1[1];
    if (v22 != *a1)
    {
      do
      {
        *((_OWORD *)v17 - 5) = *((_OWORD *)v22 - 5);
        v24 = *((_OWORD *)v22 - 4);
        v25 = *((_OWORD *)v22 - 3);
        v26 = *((_OWORD *)v22 - 2);
        *(_OWORD *)(v17 - 20) = *(_OWORD *)(v22 - 20);
        *((_OWORD *)v17 - 3) = v25;
        *((_OWORD *)v17 - 2) = v26;
        *((_OWORD *)v17 - 4) = v24;
        v17 -= 80;
        v22 -= 80;
      }
      while (v22 != v23);
      v22 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v11;
    a1[2] = v18;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v7 = *a2;
    v8 = a2[1];
    v9 = a2[2];
    v10 = a2[4];
    v7[3] = a2[3];
    v7[4] = v10;
    v7[1] = v8;
    v7[2] = v9;
    v11 = v7 + 5;
  }
  a1[1] = v11;
}

uint64_t ZinIrCodegenHandleTds<4u>(uint64_t **a1, unsigned int a2, uint64_t a3, unsigned int *a4, CFArrayRef *a5)
{
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *j;
  ZinAneInstruction *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type size;
  std::string *v45;
  __int128 v46;
  std::string *p_p;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  int v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  uint64_t v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  void **v61;
  std::string::size_type v62;
  std::string *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  const std::string::value_type *v67;
  uint64_t v68;
  const std::string::value_type *v69;
  int v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  char v75;
  char *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _DWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t *i;
  ZinAneInstruction *v98;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t *v104;
  _BYTE v105[32];
  __int128 v106;
  void *v107[2];
  unsigned __int8 v108;
  std::string __p;
  std::string v110;
  std::string v111;
  std::string v112;
  __int128 v113;
  std::string::size_type v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  _QWORD v118[5];

  v118[2] = *MEMORY[0x24BDAC8D0];
  v115 = (uint64_t)&v115;
  v116 = &v115;
  v117 = 0;
  v8 = ZinIrCodegenHandleTdsMakeList<4u>(a1, a2, a3, &v115, (uint64_t)a4, a5);
  if ((_DWORD)v8)
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinIrCodegenHandleTds<4u>(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    v17 = *a4;
    if ((_DWORD)v17)
    {
      v18 = (char *)malloc_type_calloc(v17, 4uLL, 0x100004052888210uLL);
      if (v18)
      {
        v8 = ZinIrCodegenValidateTds<4u>(*a1, (uint64_t)a1[3], (uint64_t)&v115);
        if ((_DWORD)v8)
        {
          v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v19)
            ZinIrCodegenHandleTds<4u>(v19, v20, v21, v22, v23, v24, v25, v26);
          free(v18);
        }
        else
        {
          ZinIrMemoryPool::GetSections((uint64_t)a1[3], 1, v105);
          v37 = *(_QWORD *)(*(_QWORD *)&v105[8] + 16);
          std::__list_imp<ZinIrSection *>::clear(v105);
          v38 = v116;
          if (v116 != &v115)
          {
            v102 = 8 - (_QWORD)v18;
            v100 = v18;
            v101 = 144 - (_QWORD)v18;
            do
            {
              v39 = (uint64_t *)v38[1];
              if (v39 == &v115)
                v40 = 0;
              else
                v40 = v39[2];
              v41 = v38[2];
              v42 = *(_QWORD *)(v41 + 200);
              std::string::basic_string[abi:ne180100]<0>(&v111, "__nid0__tid");
              std::to_string(&v110, *(unsigned __int16 *)(v42 + 8));
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v43 = &v110;
              else
                v43 = (std::string *)v110.__r_.__value_.__r.__words[0];
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
              else
                size = v110.__r_.__value_.__l.__size_;
              v45 = std::string::append(&v111, (const std::string::value_type *)v43, size);
              v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v112.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&__p, "__");
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v48 = __p.__r_.__value_.__l.__size_;
              v49 = std::string::append(&v112, (const std::string::value_type *)p_p, v48);
              v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
              *(_QWORD *)&v105[16] = *((_QWORD *)&v49->__r_.__value_.__l + 2);
              *(_OWORD *)v105 = v50;
              v49->__r_.__value_.__l.__size_ = 0;
              v49->__r_.__value_.__r.__words[2] = 0;
              v49->__r_.__value_.__r.__words[0] = 0;
              v51 = *(char *)(v41 + 183);
              if (v51 >= 0)
                v52 = (const std::string::value_type *)(v41 + 160);
              else
                v52 = *(const std::string::value_type **)(v41 + 160);
              if (v51 >= 0)
                v53 = *(unsigned __int8 *)(v41 + 183);
              else
                v53 = *(_QWORD *)(v41 + 168);
              v54 = std::string::append((std::string *)v105, v52, v53);
              v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v114 = v54->__r_.__value_.__r.__words[2];
              v113 = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              if ((v105[23] & 0x80000000) != 0)
                operator delete(*(void **)v105);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v112.__r_.__value_.__l.__data_);
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v110.__r_.__value_.__l.__data_);
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v111.__r_.__value_.__l.__data_);
              memset(&v112, 0, sizeof(v112));
              if (v40)
              {
                v56 = *(_QWORD *)(v40 + 200);
                std::string::basic_string[abi:ne180100]<0>(&v110, "__nid0__tid");
                std::to_string(&__p, *(unsigned __int16 *)(v56 + 8));
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v57 = &__p;
                else
                  v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v58 = __p.__r_.__value_.__l.__size_;
                v59 = std::string::append(&v110, (const std::string::value_type *)v57, v58);
                v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
                v111.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v60;
                v59->__r_.__value_.__l.__size_ = 0;
                v59->__r_.__value_.__r.__words[2] = 0;
                v59->__r_.__value_.__r.__words[0] = 0;
                std::string::basic_string[abi:ne180100]<0>(v107, "__");
                if ((v108 & 0x80u) == 0)
                  v61 = v107;
                else
                  v61 = (void **)v107[0];
                if ((v108 & 0x80u) == 0)
                  v62 = v108;
                else
                  v62 = (std::string::size_type)v107[1];
                v63 = std::string::append(&v111, (const std::string::value_type *)v61, v62);
                v64 = v18;
                v65 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                *(_QWORD *)&v105[16] = *((_QWORD *)&v63->__r_.__value_.__l + 2);
                *(_OWORD *)v105 = v65;
                v63->__r_.__value_.__l.__size_ = 0;
                v63->__r_.__value_.__r.__words[2] = 0;
                v63->__r_.__value_.__r.__words[0] = 0;
                v66 = v40;
                v69 = *(const std::string::value_type **)(v40 + 160);
                v68 = v40 + 160;
                v67 = v69;
                v70 = *(char *)(v68 + 23);
                if (v70 >= 0)
                  v71 = (const std::string::value_type *)v68;
                else
                  v71 = v67;
                if (v70 >= 0)
                  v72 = *(unsigned __int8 *)(v68 + 23);
                else
                  v72 = *(_QWORD *)(v68 + 8);
                v73 = std::string::append((std::string *)v105, v71, v72);
                v74 = v73->__r_.__value_.__r.__words[0];
                v118[0] = v73->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v118 + 7) = *(std::string::size_type *)((char *)&v73->__r_.__value_.__r.__words[1]
                                                                          + 7);
                v75 = HIBYTE(v73->__r_.__value_.__r.__words[2]);
                v73->__r_.__value_.__l.__size_ = 0;
                v73->__r_.__value_.__r.__words[2] = 0;
                v73->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v112.__r_.__value_.__l.__data_);
                v112.__r_.__value_.__r.__words[0] = v74;
                v112.__r_.__value_.__l.__size_ = v118[0];
                *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v118 + 7);
                *((_BYTE *)&v112.__r_.__value_.__s + 23) = v75;
                if ((v105[23] & 0x80000000) != 0)
                  operator delete(*(void **)v105);
                v40 = v66;
                if ((char)v108 < 0)
                  operator delete(v107[0]);
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v111.__r_.__value_.__l.__data_);
                v18 = v64;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v110.__r_.__value_.__l.__data_);
              }
              v76 = &v18[*(_DWORD *)(v41 + 184) & 0xFFFFFFFC];
              *(_DWORD *)v76 = *(_DWORD *)(v42 + 8);
              *((_DWORD *)v76 + 1) = *(_DWORD *)(v42 + 12);
              *((_DWORD *)v76 + 2) = *(_DWORD *)(v42 + 16);
              *((_DWORD *)v76 + 3) = *(_DWORD *)(v42 + 20);
              *((_DWORD *)v76 + 4) = *(_DWORD *)(v42 + 24);
              if (v40)
                AddRelocation((uint64_t)&v112, v37, v76 + 20 - v18, 0, a1[7]);
              v104 = v38;
              *((_DWORD *)v76 + 5) = *(_DWORD *)(v42 + 28);
              *((_DWORD *)v76 + 6) = *(_DWORD *)(v42 + 32);
              if ((*(_BYTE *)(v42 + 27) & 1) != 0)
              {
                v77 = v76 + 32;
                *((_DWORD *)v76 + 7) = *(_DWORD *)(v42 + 36);
              }
              else
              {
                v77 = v76 + 28;
              }
              v78 = **a1;
              if (*(_DWORD *)(v78 + 8))
              {
                v79 = 0;
                v80 = 0;
                v81 = (uint64_t)v77 + v102;
                do
                {
                  v82 = (_QWORD *)(*(_QWORD *)(v42 + 40) + v79);
                  v83 = v82[1];
                  *(_QWORD *)v77 = *v82;
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v41 + 8) - *(_QWORD *)v41) >> 3) > v80)
                    AddRelocation(*(_QWORD *)v41 + v79, v37, v81, 0, a1[7]);
                  v84 = v77 + 4;
                  *((_QWORD *)v77 + 1) = v83;
                  ++v80;
                  v79 += 24;
                  v81 += 16;
                  v77 += 4;
                }
                while (v80 < *(unsigned int *)(v78 + 8));
                v77 = v84;
                v18 = v100;
              }
              v85 = *(_OWORD *)(v42 + 80);
              v86 = *(_OWORD *)(v42 + 96);
              *(_OWORD *)v77 = *(_OWORD *)(v42 + 64);
              *((_OWORD *)v77 + 1) = v85;
              *((_OWORD *)v77 + 2) = v86;
              v87 = *(_OWORD *)(v42 + 136);
              *(_OWORD *)v105 = *(_OWORD *)(v42 + 120);
              *(_OWORD *)&v105[16] = v87;
              v106 = *(_OWORD *)(v42 + 152);
              v88 = (char *)(v77 + 14);
              *((_QWORD *)v77 + 6) = *(_QWORD *)v105;
              v89 = **(_QWORD **)(v41 + 128);
              if (v89)
                AddRelocation(v89 + 160, v37, v88 - v18, 0, a1[7]);
              v90 = 0;
              *(_OWORD *)v88 = *(_OWORD *)&v105[8];
              do
              {
                v77[v90 + 18] = *(_DWORD *)&v105[v90 * 4 + 24];
                ++v90;
              }
              while (v90 != 4);
              v91 = *(_OWORD *)(v42 + 184);
              v92 = *(_QWORD *)(v42 + 200);
              *(_OWORD *)(v77 + 22) = *(_OWORD *)(v42 + 168);
              *(_OWORD *)(v77 + 26) = v91;
              *((_QWORD *)v77 + 15) = v92;
              *(_QWORD *)&v91 = *(_QWORD *)(v42 + 232);
              *((_OWORD *)v77 + 8) = *(_OWORD *)(v42 + 216);
              *((_QWORD *)v77 + 18) = v91;
              v93 = *(_OWORD *)(v42 + 256);
              *((_QWORD *)v77 + 19) = *(_QWORD *)(v42 + 248);
              v94 = *(_QWORD *)(v41 + 152);
              if (v94)
              {
                v103 = v93;
                AddRelocation(v94 + 160, v37, (uint64_t)v77 + v101 + 16, 0, a1[7]);
                v93 = v103;
              }
              *((_OWORD *)v77 + 10) = v93;
              v95 = *(unsigned int *)(v41 + 184);
              v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
              AddSymbol((uint64_t)&v113, v37, v95, 4 * v96, a1[7]);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v112.__r_.__value_.__l.__data_);
              if (SHIBYTE(v114) < 0)
                operator delete((void *)v113);
              v38 = (uint64_t *)v104[1];
            }
            while (v38 != &v115);
            for (i = v116; i != &v115; i = (uint64_t *)i[1])
            {
              v98 = (ZinAneInstruction *)i[2];
              if (v98)
              {
                ZinAneInstruction::~ZinAneInstruction(v98);
                MEMORY[0x20BD002F8]();
              }
            }
          }
          v8 = 0;
          *(_QWORD *)(v37 + 24) = v18;
        }
      }
      else
      {
        v27 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v27)
          ZinIrCodegenHandleTds<4u>(v27, v28, v29, v30, v31, v32, v33, v34);
        for (j = v116; j != &v115; j = (uint64_t *)j[1])
        {
          v36 = (ZinAneInstruction *)j[2];
          if (v36)
          {
            ZinAneInstruction::~ZinAneInstruction(v36);
            MEMORY[0x20BD002F8]();
          }
        }
        ZinIrNetworkStatus::SetError(a5, CFSTR("MemoryAllocationFailure"));
        v8 = 3;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v115);
  return v8;
}

void sub_206FC0E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  std::__list_imp<ZinIrSection *>::clear((_QWORD *)(v57 - 160));
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTdsMakeList<4u>(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, CFArrayRef *a6)
{
  uint64_t *v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer *v20;
  ZinAneInstruction *v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  char v25;
  ZinAneInstruction *v26;
  const std::string *v27;
  ZinIrOpLayer *v28;
  BOOL v29;
  ZinAneInstruction *v30;
  ZinIrOpLayer **v31;
  ZinIrOpLayer **v32;
  _WORD *v33;
  _BOOL4 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  ZinIrOpLayer *v41;
  _QWORD *v42;
  ZinAneInstruction *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  ZinAneInstruction *v61;
  const __CFString *v62;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t j;
  _QWORD *v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  BOOL v93;
  _QWORD *k;
  _BYTE *v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  float *v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  unsigned __int16 *v103;
  unint64_t v104;
  unsigned int v105;
  uint8x8_t v106;
  uint64_t v107;
  uint8x8_t v108;
  unsigned int v109;
  float v110;
  int v111;
  float v112;
  _QWORD *v113;
  _BOOL8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v124;
  ZinIrOpLayer *v127;
  uint64_t v129;
  ZinIrCompilerParameters *v130;
  _BYTE v132[16];
  uint64_t v133;
  ZinIrTensor *v134;
  std::__shared_weak_count *v135;
  _QWORD *v136;
  ZinAneInstruction *v137;
  ZinIrOpLayer *v138;
  void *__p;
  ZinIrOpLayer **v140;
  uint64_t v141;
  _OWORD v142[2];
  int v143;
  _QWORD v144[4];
  int v145;
  uint8_t buf[24];
  __int128 v147;
  char v148;
  uint64_t v149;
  char *v150;
  char *v151;
  _QWORD v152[5];

  v152[2] = *MEMORY[0x24BDAC8D0];
  v7 = a1[4];
  if (a4[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Warning: tds list is already populated\n", buf, 2u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Clearing list contents without explicit deallocation\n", buf, 2u);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(a4);
  v8 = (ZinIrOpLayer **)*v7;
  v9 = (ZinIrOpLayer **)v7[1];
  if ((ZinIrOpLayer **)*v7 == v9)
  {
    v11 = (ZinIrOpLayer **)*v7;
    v10 = (ZinIrOpLayer **)*v7;
  }
  else
  {
    while (!ZinIrOpLayer::IsANELayer(*v8))
    {
      if (++v8 == v9)
      {
        v8 = v9;
        break;
      }
    }
    v10 = v8;
    v8 = (ZinIrOpLayer **)*v7;
    v11 = (ZinIrOpLayer **)v7[1];
  }
  v127 = *v10;
  do
  {
    v12 = v11;
    if (v11 == v8)
      break;
    --v11;
  }
  while (!ZinIrOpLayer::IsANELayer(*(v12 - 1)));
  v13 = *(v12 - 1);
  v129 = **a1;
  v130 = (ZinIrCompilerParameters *)(*a1)[1];
  memset(v144, 0, sizeof(v144));
  v145 = 1065353216;
  memset(v142, 0, sizeof(v142));
  v143 = 1065353216;
  v14 = a1[5];
  v124 = a1[6];
  v16 = *v7;
  v15 = v7[1];
  v122 = (uint64_t)v7;
  v17 = (v15 - *v7) >> 3;
  __p = 0;
  v140 = 0;
  v141 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>,std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>>((char *)&__p, v15, v15, v16, v16, v17);
  v19 = (ZinIrOpLayer **)__p;
  v18 = v140;
  if (__p != v140)
  {
    v20 = 0;
    do
    {
      v138 = 0;
      v138 = *v19;
      if (!ZinIrOpLayer::IsANELayer(v138))
        goto LABEL_49;
      v137 = 0;
      v21 = (ZinAneInstruction *)operator new();
      v22 = (_QWORD *)operator new();
      v23 = *(_DWORD *)(v129 + 8);
      *v22 = &unk_24C027AF0;
      ZinAneTdHw_v6::ZinAneTdHw_v6((ZinAneTdHw_v6 *)(v22 + 1), v23);
      v22[35] = &target_hw_limits_v4;
      v22[37] = 0;
      v136 = v22;
      ZinAneInstruction::ZinAneInstruction(v21, &v136);
      v24 = v136;
      v136 = 0;
      if (v24)
        (*(void (**)(_QWORD *))(*v24 + 8))(v24);
      v137 = v21;
      v25 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v138 + 120))(v138);
      v26 = v137;
      v27 = (const std::string *)v138;
      *((_BYTE *)v137 + 24) = v25;
      std::string::operator=((std::string *)((char *)v26 + 160), v27 + 1);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,ZinAneInstruction *&>((uint64_t)v144, &v138, &v138, (uint64_t *)&v137);
      *(_QWORD *)buf = v138;
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,ZinAneInstruction *&>((uint64_t)v142, &v137, &v137, (uint64_t *)buf);
      v28 = v138;
      v29 = v138 == v13;
      v30 = v137;
      *((_BYTE *)v137 + 199) = v138 == v127;
      *((_BYTE *)v30 + 198) = v29;
      v32 = (ZinIrOpLayer **)*v14;
      v31 = (ZinIrOpLayer **)v14[1];
      if ((ZinIrOpLayer **)*v14 != v31)
      {
        while (*v32 != v28)
        {
          if (++v32 == v31)
          {
            v32 = (ZinIrOpLayer **)v14[1];
            break;
          }
        }
      }
      if (v32 != v31)
      {
        *((_BYTE *)v30 + 198) = 1;
        if (a4[2])
          *(_BYTE *)(*(_QWORD *)(a4[1] + 16) + 199) = 1;
      }
      if (*(_DWORD *)(*((_QWORD *)v28 + 8) + 8) == 82)
      {
        *((_BYTE *)v30 + 188) = 1;
        *((_DWORD *)v30 + 48) = *((_DWORD *)v28 + 98);
      }
      v33 = (_WORD *)*((_QWORD *)v30 + 25);
      v33[4] = *((_QWORD *)v28 + 45);
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v28 + 120))(v28))
      {
        (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v138 + 128))(buf);
        if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(*(ZinIrTensor **)buf) + 12) + 64) + 8) == 28)
        {
          v34 = 0;
        }
        else
        {
          (*(void (**)(ZinIrTensor **__return_ptr))(*(_QWORD *)v138 + 128))(&v134);
          v34 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(v134) + 12) + 64) + 8) != 29;
          v35 = v135;
          if (v135)
          {
            p_shared_owners = (unint64_t *)&v135->__shared_owners_;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
        }
        v38 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
            if (!v34)
              goto LABEL_43;
LABEL_42:
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v137 + 25) + 32))(*((_QWORD *)v137 + 25), 5, 1);
            goto LABEL_43;
          }
        }
        if (v34)
          goto LABEL_42;
      }
LABEL_43:
      v41 = v138;
      if (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *, uint64_t, ZinAneInstruction *, uint64_t, uint64_t **, CFArrayRef *))(**((_QWORD **)v137 + 25) + 320))(*((_QWORD *)v137 + 25), v138, a2, v137, a3, a1, a6) & 1) == 0)
      {
        for (i = a4[1]; (_QWORD *)i != a4; i = *(_QWORD *)(i + 8))
        {
          v61 = *(ZinAneInstruction **)(i + 16);
          if (v61)
          {
            ZinAneInstruction::~ZinAneInstruction(v61);
            MEMORY[0x20BD002F8]();
          }
        }
        if (v137)
        {
          ZinAneInstruction::~ZinAneInstruction(v137);
          MEMORY[0x20BD002F8]();
        }
        std::__list_imp<ZinIrSection *>::clear(a4);
        goto LABEL_72;
      }
      if (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *, _QWORD *, uint64_t *))(**((_QWORD **)v137 + 25) + 360))(*((_QWORD *)v137 + 25), v41, v144, a1[3]) & 1) == 0)
      {
        v62 = CFSTR("CodeGenerationFailure");
LABEL_71:
        ZinIrNetworkStatus::SetError(a6, v62);
        goto LABEL_72;
      }
      (*(void (**)(_WORD *, ZinIrOpLayer *))(*(_QWORD *)v33 + 40))(v33, v138);
      if (v28 != v13
        && !*((_BYTE *)v137 + 188)
        && !(*(unsigned int (**)(_QWORD, uint64_t *, ZinIrOpLayer *, ZinIrOpLayer *, uint64_t *, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)v137 + 25) + 384))(*((_QWORD *)v137 + 25), *a1, v41, v20, v124, v144, *((_QWORD *)v130 + 17), *((_QWORD *)v130 + 18)))
      {
        v62 = CFSTR("MemoryDependencyFailure");
        goto LABEL_71;
      }
      v42 = operator new(0x18uLL);
      v43 = v137;
      v44 = (_QWORD *)a4[1];
      *v42 = a4;
      v42[1] = v44;
      v42[2] = v43;
      *v44 = v42;
      v45 = a4[2] + 1;
      a4[1] = v42;
      a4[2] = v45;
      v20 = v41;
LABEL_49:
      ++v19;
    }
    while (v19 != v18);
  }
  ReassignTaskIDs<17u>((uint64_t)a4);
  if (!ZinIrCompilerParameters::getEnableKernelRewind(v130) && !*(_BYTE *)(v129 + 2088)
    || (v46 = ZinCodegenEnableInterKernelReuse(4, a1, (uint64_t)a4), !(_DWORD)v46))
  {
    v47 = *(_DWORD **)(*(_QWORD *)(a4[1] + 16) + 200);
    v47[44] |= 0x30u;
    v47[48] |= 0x30u;
    (*(void (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 24, 0);
    if ((_QWORD *)a4[1] != a4)
    {
      v48 = 0;
      v49 = a4;
      do
      {
        v50 = *(_QWORD *)(*(_QWORD *)(*v49 + 16) + 200);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 368))(v50, v48);
        v51 = *(_QWORD *)(*(_QWORD *)(*v49 + 16) + 200);
        v48 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51) - 1;
        v49 = (_QWORD *)*v49;
      }
      while (v49 != (_QWORD *)a4[1]);
    }
    if (SetInstructionMemOffset<6u>((uint64_t)a4, v129))
    {
      v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v52)
        ZinIrCodegenHandleTdsMakeList<4u>(v52, v53, v54, v55, v56, v57, v58, v59);
      goto LABEL_72;
    }
    v64 = *(_QWORD *)(*a4 + 16);
    v65 = *(_DWORD *)(v64 + 184);
    v66 = v65 + 4 * (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v64 + 200) + 16))(*(_QWORD *)(v64 + 200));
    if ((v65 & 3) != 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrCodegenHandleTdsMakeList<6u>(v66);
      goto LABEL_72;
    }
    *(_DWORD *)a5 = v66 >> 2;
    memset(buf, 0, sizeof(buf));
    v147 = xmmword_207A7FF30;
    v148 = 0;
    v149 = 0;
    v151 = 0;
    v152[0] = 0;
    v150 = 0;
    *(_DWORD *)buf = a4[2];
    *(_DWORD *)&buf[4] = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 16))(v47) - 1;
    *(_DWORD *)&buf[8] = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v47 + 24))(v47, 8);
    std::vector<ZinIrOpLayer *>::reserve((void **)&v150, a4[2]);
    for (j = a4[1]; (_QWORD *)j != a4; j = *(_QWORD *)(j + 8))
    {
      v134 = *(ZinIrTensor **)(j + 16);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v142, &v134))ZinAssertImpl("Incorrect internal states: codegen");
      v68 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v142, &v134);
      v69 = v68;
      if (!v68)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v70 = v151;
      if ((unint64_t)v151 >= v152[0])
      {
        v72 = (v151 - v150) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v73 = (uint64_t)(v152[0] - (_QWORD)v150) >> 2;
        if (v73 <= v72 + 1)
          v73 = v72 + 1;
        if (v152[0] - (_QWORD)v150 >= 0x7FFFFFFFFFFFFFF8uLL)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        if (v74)
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v152, v74);
        else
          v75 = 0;
        v76 = &v75[8 * v72];
        *(_QWORD *)v76 = v69[3];
        v71 = v76 + 8;
        v78 = v150;
        v77 = v151;
        if (v151 != v150)
        {
          do
          {
            v79 = *((_QWORD *)v77 - 1);
            v77 -= 8;
            *((_QWORD *)v76 - 1) = v79;
            v76 -= 8;
          }
          while (v77 != v78);
          v77 = v150;
        }
        v150 = v76;
        v151 = v71;
        v152[0] = &v75[8 * v74];
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_QWORD *)v151 = v68[3];
        v71 = v70 + 8;
      }
      v151 = v71;
    }
    v80 = a1[8];
    v81 = v80[1];
    if (v81 >= v80[2])
    {
      v82 = std::vector<ZinIrCodegenTDPartitionStats>::__push_back_slow_path<ZinIrCodegenTDPartitionStats const&>(a1[8], (__int128 *)buf);
    }
    else
    {
      std::vector<ZinIrCodegenTDPartitionStats>::__construct_one_at_end[abi:ne180100]<ZinIrCodegenTDPartitionStats const&>((uint64_t)a1[8], (__int128 *)buf);
      v82 = v81 + 80;
    }
    v80[1] = v82;
    if (v150)
    {
      v151 = v150;
      operator delete(v150);
    }
    v83 = *a1;
    std::unordered_map<ZinIrOpLayer *,ZinAneInstruction *>::unordered_map((uint64_t)v132, (uint64_t)v144);
    v84 = v83[1];
    buf[5] = *(_BYTE *)(v84 + 472);
    *(_WORD *)&buf[3] = *(_WORD *)(v84 + 100);
    v85 = *(unsigned __int8 *)(v84 + 95);
    v86 = (char)v85;
    if ((v85 & 0x80u) != 0)
      v85 = *(_QWORD *)(v84 + 80);
    if (v85 == 9)
    {
      v89 = *(_QWORD *)(v84 + 72);
      v87 = v84 + 72;
      v88 = v89;
      if (v86 < 0)
        v87 = v88;
      v90 = *(_QWORD *)v87;
      v91 = *(unsigned __int8 *)(v87 + 8);
      v93 = v90 == 0x30336E2E67343168 && v91 == 49;
    }
    else
    {
      v93 = 0;
    }
    buf[6] = v93;
    for (k = (_QWORD *)a4[1]; k != a4; k = (_QWORD *)k[1])
    {
      v95 = (_BYTE *)k[2];
      v96 = &v133;
      while (1)
      {
        v96 = (uint64_t *)*v96;
        if (!v96)
          break;
        if ((_BYTE *)v96[3] == v95)
        {
          v97 = v96[2];
          goto LABEL_123;
        }
      }
      v97 = 0;
LABEL_123:
      buf[0] = v95[199];
      buf[2] = v95[196];
      buf[1] = v95[198];
      ZinAneInstruction::HandleEventLogs((uint64_t)v95, v83, v97, (uint64_t)buf);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v132);
    v98 = (_QWORD *)a4[1];
    if (v98 == a4)
    {
LABEL_141:
      v46 = ZinIrContextSwitchValidator<4u>((uint64_t)a4);
      if ((_DWORD)v46)
      {
        v114 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v114)
          ZinIrCodegenHandleTdsMakeList<4u>(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        v46 = SetTensorKernelDependency<4u>(v122, v144, a6);
        if (!(_DWORD)v46)
        {
          if ((*((_BYTE *)v130 + 97) & 0x20) != 0)
            ZinIrCodegen::PrintContextSwitchInfo((uint64_t)a4);
          v46 = 0;
        }
      }
    }
    else
    {
      v100 = **a1;
      v99 = (float *)(*a1)[1];
      v101 = MEMORY[0x24BDACB70];
      while (1)
      {
        v102 = v98[2];
        v103 = *(unsigned __int16 **)(v102 + 200);
        v104 = 4 * (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v103 + 16))(v103);
        if (*(_QWORD *)(v100 + 296) > v104 || *(_QWORD *)(v100 + 304) < v104)
          break;
        v106 = (uint8x8_t)vcnt_s8((int8x8_t)v103[10]);
        v106.i16[0] = vaddlv_u8(v106);
        v107 = *(_QWORD *)(a5 + 16);
        *(_QWORD *)(a5 + 8) += v106.u32[0];
        v108 = (uint8x8_t)vcnt_s8((int8x8_t)v103[8]);
        v108.i16[0] = vaddlv_u8(v108);
        *(_QWORD *)(a5 + 16) = v107 + v108.u32[0];
        v109 = v103[6];
        if (*(_DWORD *)(a5 + 32) > v109)
          v109 = *(_DWORD *)(a5 + 32);
        *(_DWORD *)(a5 + 32) = v109;
        v110 = v99[97];
        if (v110 > 0.0)
        {
          LOWORD(v105) = v103[6];
          if (v110 < (float)v105)
            ++*(_DWORD *)(a5 + 36);
        }
        LODWORD(v134) = 0;
        if (ZinIrCompilerParameters::getEnforcedTdLatency((ZinIrCompilerParameters *)v99, (float *)&v134))
        {
          v111 = v103[6];
          v112 = *(float *)&v134;
          if (*(float *)&v134 < (float)v111 && os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
          {
            v113 = (_QWORD *)(v102 + 160);
            if (*(char *)(v102 + 183) < 0)
              v113 = (_QWORD *)*v113;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v113;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v112;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&v147 = (double)v111;
            _os_log_error_impl(&dword_2069AB000, v101, OS_LOG_TYPE_ERROR, "Latency for Task %s is too large (>%.0f us) (%.0f)", buf, 0x20u);
          }
        }
        v98 = (_QWORD *)v98[1];
        if (v98 == a4)
          goto LABEL_141;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrCodegenHandleTdsMakeList<6u>();
      ZinIrNetworkStatus::SetError(a6, CFSTR("InvalidTotalTDSize"));
LABEL_72:
      v46 = 3;
    }
  }
  if (__p)
  {
    v140 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v142);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v144);
  return v46;
}

void sub_206FC1C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_206FC1D78()
{
  JUMPOUT(0x206FC1D70);
}

uint64_t ZinIrCodegenValidateTds<4u>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a3 + 8);
  if (v4 == a3)
  {
LABEL_10:
    v13 = ZinValidateTd<4u>::CheckKernelRewind(a3);
    if ((_DWORD)v13)
    {
      v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v14)
        ZinIrCodegenValidateTds<4u>(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  else
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v8 + 200);
      v11 = *(unsigned __int16 *)(v9 + 8);
      v10 = v9 + 8;
      if (v11 != v7)
        break;
      if (!*(_BYTE *)(v8 + 188))
      {
        v12 = ZinValidateTd<4u>::Test(a1, a2, v10);
        if ((_DWORD)v12)
        {
          v13 = v12;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrCodegenValidateTds<6u>();
          return v13;
        }
      }
      if (*(_BYTE *)(v8 + 198))
        v7 = 0;
      else
        ++v7;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == a3)
        goto LABEL_10;
    }
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinIrCodegenValidateTds<1u>(v22, v23, v24, v25, v26, v27, v28, v29);
    return 3;
  }
  return v13;
}

uint64_t ZinIrContextSwitchValidator<4u>(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  int v26;
  uint64_t i;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  void *__p;
  uint64_t v50;

  v48 = &v48;
  __p = &v48;
  v50 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != a1)
  {
    v47 = 0;
    v46 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 1;
    v7 = 1;
    while (1)
    {
      v8 = *(_QWORD *)(v2 + 16);
      v9 = *(_DWORD **)(v8 + 200);
      if (!v6)
      {
        if ((v5 & 1) == 0)
        {
          v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v29)
            ZinIrContextSwitchValidator<4u>(v29, v30, v31, v32, v33, v34, v35, v36);
LABEL_63:
          v18 = 3;
LABEL_64:
          std::__list_imp<ZinIrSection *>::clear(&v48);
          return v18;
        }
        if (!*(_BYTE *)(v8 + 188)
          && !(*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 1)
          && (!(*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 17)
           || !(*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 18)
           || !(*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 15)
           || !(*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 16)))
        {
          goto LABEL_49;
        }
      }
      if (!(v7 & 1 | ((v5 & 1) == 0)))
      {
        v10 = v9[31];
        if ((v10 & 0x3000000) == 0x1000000)
        {
          if ((v10 & 1) == 0 && !(*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 1))
          {
            v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v38)
              ZinIrContextSwitchValidator<4u>(v38, v39, v40, v41, v42, v43, v44, v45);
            goto LABEL_63;
          }
          v7 = 1;
        }
        else
        {
          v7 = 0;
        }
      }
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 2))
      {
        if (((v5 | v4) & 1) != 0)
          goto LABEL_49;
        ++HIDWORD(v47);
        v4 = 1;
      }
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 3))
      {
        if (v5 & 1 | ((v4 & 1) == 0))
          goto LABEL_49;
        v11 = *(_QWORD *)(v2 + 16);
        if (!*(_QWORD *)(v11 + 152))
          goto LABEL_49;
        v12 = operator new(0x18uLL);
        v7 = 0;
        v13 = *(_QWORD *)(v11 + 152);
        v12[1] = &v48;
        v12[2] = v13;
        v14 = v48;
        *v12 = v48;
        v14[1] = v12;
        v48 = v12;
        ++v50;
        ++v3;
      }
      v15 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 4);
      v6 = v15 == 0;
      if (v15)
      {
        if (v5 & 1 | ((v4 & 1) == 0))
          goto LABEL_49;
        v4 = 0;
        LODWORD(v47) = v47 + 1;
        v5 = 1;
      }
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 24))(v9, 1))
      {
        v16 = *(_QWORD **)(*(_QWORD *)(v2 + 16) + 128);
        if (*v16)
          v17 = 1;
        else
          v17 = v16[1] != 0;
        v18 = 2;
        if (v4 & 1 | ((v5 & 1) == 0) || !v17 || (v7 & 1) == 0 && (v9[31] & 0x3000000) != 0x1000000)
          goto LABEL_64;
        v19 = (uint64_t *)__p;
        while (v19 != (uint64_t *)&v48)
        {
          v20 = v19[2];
          v21 = *(_QWORD **)(*(_QWORD *)(v2 + 16) + 128);
          if (v20 == *v21 || v20 == v21[1])
          {
            v22 = *v19;
            v23 = (uint64_t *)v19[1];
            *(_QWORD *)(v22 + 8) = v23;
            *(_QWORD *)v19[1] = v22;
            --v50;
            operator delete(v19);
            --v3;
            v19 = v23;
          }
          else
          {
            v19 = (uint64_t *)v19[1];
          }
        }
        v7 = 1;
      }
      if ((*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)v9 + 24))(v9, 0))
      {
        v18 = 2;
        if ((v5 & ~v4 & 1) == 0 || v3 || v50)
          goto LABEL_64;
        v5 = 0;
        v3 = 0;
        ++v46;
      }
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == a1)
      {
        v25 = v47;
        v24 = HIDWORD(v47);
        v26 = v46;
        if (!v3)
          goto LABEL_51;
LABEL_49:
        v18 = 2;
        goto LABEL_64;
      }
    }
  }
  v25 = 0;
  v24 = 0;
  v26 = 0;
LABEL_51:
  v18 = 2;
  if (v24 != v25 || v24 != v26)
    goto LABEL_64;
  for (i = *(_QWORD *)(a1 + 8); i != a1; i = *(_QWORD *)(i + 8))
  {
    v28 = *(_QWORD *)(i + 16);
    if (*(_BYTE *)(v28 + 199))
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v28 + 200) + 32))(*(_QWORD *)(v28 + 200), 0, 1);
    if (*(_BYTE *)(v28 + 198))
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v28 + 200) + 32))(*(_QWORD *)(v28 + 200), 2, 1);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v28 + 200) + 32))(*(_QWORD *)(v28 + 200), 4, 1);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v48);
  return 0;
}

void sub_206FC22CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SetTensorKernelDependency<4u>(uint64_t a1, _QWORD *a2, CFArrayRef *a3)
{
  _QWORD **v3;
  _QWORD **v4;
  ZinIrTensor *RootTensor;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  ZinIrTensor **v17;
  char *v18;
  char *v19;
  ZinIrTensor *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ZinIrTensor *v37;
  void *__p;
  void *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  ZinIrTensor *v44;
  _QWORD *v45;
  _OWORD v46[2];
  int v47;
  ZinIrTensor **v48;

  memset(v46, 0, sizeof(v46));
  v47 = 1065353216;
  v3 = *(_QWORD ***)a1;
  v4 = *(_QWORD ***)(a1 + 8);
  if (*(_QWORD ***)a1 == v4)
  {
LABEL_40:
    v26 = 0;
  }
  else
  {
    while (1)
    {
      v45 = *v3;
      if (((*(uint64_t (**)(_QWORD *))(*v45 + 120))(v45) & 1) != 0)
      {
        v44 = 0;
        (*(void (**)(ZinIrTensor **__return_ptr))(*v45 + 128))(&v37);
        RootTensor = ZinIrTensor::GetRootTensor(v37);
        v7 = (std::__shared_weak_count *)__p;
        if (__p)
        {
          v8 = (unint64_t *)((char *)__p + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v44 = RootTensor;
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)RootTensor + 12) + 64) + 8) & 0xFFFFFFFE) != 0x1C)
        {
          v10 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v46, &v44);
          if (!v10)
          {
            ZinIrTensor::GetAllChildrenInTree(v44, (uint64_t *)&v37);
            ZinIrTensor::ConvertRawVectorFromPtrVector((uint64_t **)&v37, (char **)&v41);
            v48 = &v37;
            std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
            v11 = v42;
            if (v42 >= v43)
            {
              v13 = (v42 - (_BYTE *)v41) >> 3;
              if ((unint64_t)(v13 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v14 = (v43 - (_BYTE *)v41) >> 2;
              if (v14 <= v13 + 1)
                v14 = v13 + 1;
              if ((unint64_t)(v43 - (_BYTE *)v41) >= 0x7FFFFFFFFFFFFFF8)
                v15 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v15 = v14;
              if (v15)
                v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v43, v15);
              else
                v16 = 0;
              v17 = (ZinIrTensor **)&v16[8 * v13];
              *v17 = v44;
              v12 = (uint64_t)(v17 + 1);
              v19 = (char *)v41;
              v18 = v42;
              if (v42 != v41)
              {
                do
                {
                  v20 = (ZinIrTensor *)*((_QWORD *)v18 - 1);
                  v18 -= 8;
                  *--v17 = v20;
                }
                while (v18 != v19);
                v18 = (char *)v41;
              }
              v41 = v17;
              v42 = (char *)v12;
              v43 = &v16[8 * v15];
              if (v18)
                operator delete(v18);
            }
            else
            {
              *(_QWORD *)v42 = v44;
              v12 = (uint64_t)(v11 + 8);
            }
            v42 = (char *)v12;
            v37 = v44;
            v39 = 0;
            v40 = 0;
            __p = 0;
            std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v41, v12, (v12 - (uint64_t)v41) >> 3);
            v10 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::__emplace_unique_key_args<ZinIrTensor *,std::pair<ZinIrTensor * const,std::vector<ZinIrTensor *>>>((uint64_t)v46, &v37, (uint64_t)&v37);
            if (__p)
            {
              v39 = __p;
              operator delete(__p);
            }
            if (v41)
            {
              v42 = (char *)v41;
              operator delete(v41);
            }
          }
          v41 = 0;
          v22 = v10[3];
          v21 = v10[4];
          while (v22 != v21)
          {
            v23 = *(_QWORD **)(*(_QWORD *)v22 + 96);
            if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)v23)
              && v23[45] <= v45[45]
              && (!v41 || *((_QWORD *)v41 + 6) < v23[6]))
            {
              v41 = v23;
            }
            v22 += 8;
          }
          v24 = *(_QWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(a2, &v41)[3]+ 200);
          v37 = (ZinIrTensor *)&v45;
          v25 = std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,std::piecewise_construct_t const&,std::tuple<ZinIrOpLayer * const&>,std::tuple<>>((uint64_t)a2, &v45, (uint64_t)&std::piecewise_construct, (_QWORD **)&v37)[3];
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v25 + 200) + 32))(*(_QWORD *)(v25 + 200), 8, *(unsigned __int16 *)(v24 + 8));
          if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 200) + 24))(*(_QWORD *)(v25 + 200), 5) != 1)break;
        }
      }
      if (++v3 == v4)
        goto LABEL_40;
    }
    v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v28)
      SetTensorKernelDependency<4u>(v28, v29, v30, v31, v32, v33, v34, v35);
    ZinIrNetworkStatus::SetError(a3, CFSTR("InvalidHWHeader"));
    v26 = 3;
  }
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)v46);
  return v26;
}

void sub_206FC2658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t ZinAneTd<4u>::GetField(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  switch(a2)
  {
    case 0:
      return (*(_DWORD *)(a1 + 24) >> 11) & 1;
    case 1:
      return (*(_DWORD *)(a1 + 24) >> 13) & 1;
    case 2:
      v3 = *(_DWORD *)(a1 + 24);
      return (v3 >> 15) & 1;
    case 3:
      return (*(_DWORD *)(a1 + 24) >> 14) & 1;
    case 4:
      return (*(_DWORD *)(a1 + 24) >> 12) & 1;
    case 5:
      v4 = *(_DWORD *)(a1 + 24);
      goto LABEL_26;
    case 6:
      return (*(_DWORD *)(a1 + 24) >> 28) & 1;
    case 7:
      return (*(_DWORD *)(a1 + 24) >> 29) & 1;
    case 8:
      return *(unsigned __int16 *)(a1 + 36);
    case 9:
      return *(unsigned __int16 *)(a1 + 34);
    case 10:
      v3 = *(_DWORD *)(a1 + 32);
      return (v3 >> 15) & 1;
    case 11:
      return (*(_DWORD *)(a1 + 32) >> 12) & 7;
    case 12:
      return (*(_DWORD *)(a1 + 176) >> 2) & 1;
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return *(unsigned __int16 *)(a1 + 16);
    case 15:
      v5 = *(_DWORD *)(a1 + 176);
      goto LABEL_21;
    case 16:
      v6 = *(_DWORD *)(a1 + 176);
      goto LABEL_23;
    case 17:
      v5 = *(_DWORD *)(a1 + 192);
LABEL_21:
      result = (v5 >> 4) & 1;
      break;
    case 18:
      v6 = *(_DWORD *)(a1 + 192);
LABEL_23:
      result = (v6 >> 5) & 1;
      break;
    case 23:
      result = *(unsigned __int8 *)(a1 + 14);
      break;
    case 24:
      v4 = *(_DWORD *)(a1 + 8);
LABEL_26:
      result = HIBYTE(v4) & 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinAneTd<4u>::SetField(uint64_t result, int a2, __int16 a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  switch(a2)
  {
    case 0:
      v3 = *(_DWORD *)(result + 24) & 0xFFFFF7FF | ((a3 & 1) << 11);
      goto LABEL_12;
    case 1:
      v3 = *(_DWORD *)(result + 24) & 0xFFFFDFFF | ((a3 & 1) << 13);
      goto LABEL_12;
    case 2:
      v3 = *(_DWORD *)(result + 24) & 0xFFFF7FFF | ((a3 & 1) << 15);
      goto LABEL_12;
    case 3:
      v3 = *(_DWORD *)(result + 24) & 0xFFFFBFFF | ((a3 & 1) << 14);
      goto LABEL_12;
    case 4:
      v3 = *(_DWORD *)(result + 24) & 0xFFFFEFFF | ((a3 & 1) << 12);
      goto LABEL_12;
    case 5:
      v3 = *(_DWORD *)(result + 24) & 0xFEFFFFFF | ((a3 & 1) << 24);
      goto LABEL_12;
    case 6:
      v3 = *(_DWORD *)(result + 24) & 0xEFFFFFFF | ((a3 & 1) << 28);
      goto LABEL_12;
    case 7:
      v3 = *(_DWORD *)(result + 24) & 0xDFFFFFFF | ((a3 & 1) << 29);
LABEL_12:
      *(_DWORD *)(result + 24) = v3;
      return result;
    case 8:
      *(_WORD *)(result + 36) = a3;
      return result;
    case 9:
      *(_WORD *)(result + 34) = a3;
      return result;
    case 10:
      v4 = *(_DWORD *)(result + 32) & 0xFFFF7FFF | ((a3 & 1) << 15);
      goto LABEL_17;
    case 11:
      v4 = *(_DWORD *)(result + 32) & 0xFFFF8FFF | ((a3 & 7) << 12);
LABEL_17:
      *(_DWORD *)(result + 32) = v4;
      return result;
    case 12:
      v5 = *(_DWORD *)(result + 176) & 0xFFFFFFFB | (4 * (a3 & 1));
      goto LABEL_21;
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
      return result;
    case 15:
      v5 = *(_DWORD *)(result + 176) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_21;
    case 16:
      v5 = *(_DWORD *)(result + 176) & 0xFFFFFFDF | (32 * (a3 & 1));
LABEL_21:
      *(_DWORD *)(result + 176) = v5;
      return result;
    case 17:
      v6 = *(_DWORD *)(result + 192) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_24;
    case 18:
      v6 = *(_DWORD *)(result + 192) & 0xFFFFFFDF | (32 * (a3 & 1));
LABEL_24:
      *(_DWORD *)(result + 192) = v6;
      break;
    case 23:
      *(_BYTE *)(result + 14) = a3;
      break;
    case 24:
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFEFFFFFF | ((a3 & 1) << 24);
      break;
    default:
      if (a2 == 50)
        *(_WORD *)(result + 16) = a3;
      break;
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleCommonMACBypassMode(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  uint64_t v5;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (unsigned __int8 *)a2[33];
  if (v2)
  {
    ZinAneTd<4u>::SetUnicastEn(a1, *v2);
    *(_DWORD *)(a1 + 88) &= 0xF00FFFFF;
    ZinAneTd<4u>::SetCommonConvCfgSx(a1, 1uLL);
    ZinAneTd<4u>::SetCommonConvCfgSy(a1, 1uLL);
    ZinAneTd<4u>::SetCommonConvCfgOx(a1, 1uLL);
    ZinAneTd<4u>::SetCommonConvCfgOy(a1, 1uLL);
    v5 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
    if (ZinAneTd<4u>::SetOrReturnNumGroups(a1, *(_QWORD *)(v5 + 48))
      && ZinAneTd<4u>::SetCommonConvCfgKw(a1, 1uLL)
      && ZinAneTd<4u>::SetCommonConvCfgKh(a1, 1uLL))
    {
      return ZinAneTd<4u>::SetUnicastCin(a1, *(_QWORD *)(a2[33] + 96));
    }
  }
  else
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      ZinAneTd<4u>::HandleCommonMACBypassMode(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  return 0;
}

BOOL ZinAneTd<4u>::HandleCommonPoolOpcode(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15[3];
  uint64_t v16;
  int v17;

  if (!a2[33])
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinAneTd<4u>::HandleCommonPoolOpcode(result, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  v5 = *((_QWORD *)a2[54] + 8);
  result = ZinAneTd<4u>::SetOrReturnNumGroups(a1, a3);
  if (!result)
    return result;
  result = ZinAneTd<4u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
  if (!result)
    return result;
  result = ZinAneTd<4u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
  if (!result)
    return result;
  result = ZinAneTd<4u>::SetCommonConvCfgOx(a1, 1uLL);
  if (!result)
    return result;
  result = ZinAneTd<4u>::SetCommonConvCfgOy(a1, 1uLL);
  if (!result)
    return result;
  if (*(_DWORD *)(v5 + 104) != 2)
  {
    result = ZinAneTd<4u>::SetCommonConvCfgKw(a1, *(_QWORD *)(v5 + 16));
    if (!result)
      return result;
    result = ZinAneTd<4u>::SetCommonConvCfgKh(a1, *(_QWORD *)(v5 + 24));
    if (!result)
      return result;
    result = ZinAneTd<4u>::SetCommonConvCfgPadLeft(a1, *(int *)(v5 + 64));
    if (!result)
      return result;
    result = ZinAneTd<4u>::SetCommonConvCfgPadTop(a1, *(int *)(v5 + 72));
    if (!result)
      return result;
    goto LABEL_21;
  }
  (*((void (**)(uint64_t *__return_ptr, unsigned __int8 **))*a2 + 44))(&v16, a2);
  (*((void (**)(unint64_t *__return_ptr, unsigned __int8 **))*a2 + 41))(v15, a2);
  if (!ZinAneTd<4u>::SetCommonConvCfgKw(a1, v15[0])
    || !ZinAneTd<4u>::SetCommonConvCfgKh(a1, v15[1])
    || !ZinAneTd<4u>::SetCommonConvCfgPadLeft(a1, (int)v16)
    || !ZinAneTd<4u>::SetCommonConvCfgPadTop(a1, v17))
  {
    return 0;
  }
LABEL_21:
  ZinAneTd<4u>::SetUnicastEn(a1, *a2[33]);
  v14 = a2[33];
  if (!*v14)
    return 1;
  ZinAneTd<4u>::SetUnicastCin(a1, *((_QWORD *)v14 + 12));
  LODWORD(v16) = 0;
  result = ZinCodegenUtil::ValueToRegister(*((_QWORD *)a2[33] + 10), (unsigned int *)(*(_QWORD *)(a1 + 280) + 32), &v16);
  if (result)
  {
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 76) & 0xFFFE0000 | v16 & 0x1FFFF;
    LODWORD(v16) = 0;
    result = ZinCodegenUtil::ValueToRegister(*((_QWORD *)a2[33] + 11), (unsigned int *)(*(_QWORD *)(a1 + 280) + 40), &v16);
    if (result)
    {
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80) & 0xFFFE0000 | v16 & 0x1FFFF;
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleCommonConvOpcode(uint64_t a1, _QWORD *a2)
{
  int *v4;
  unint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17[3];
  uint64_t v18;
  int v19;

  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a2 + 352))(&v18, a2);
  (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*a2 + 328))(v17, a2);
  if (a2[33])
  {
    v4 = (int *)a2[17];
    v5 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 368))(a2, 4);
    result = ZinAneTd<4u>::SetOrReturnWout(a1, v5);
    if (result)
    {
      result = ZinAneTd<4u>::SetCommonConvCfgKw(a1, v17[0]);
      if (result)
      {
        result = ZinAneTd<4u>::SetCommonConvCfgPadLeft(a1, (int)v18);
        if (result)
        {
          v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 368))(a2, 3);
          result = ZinAneTd<4u>::SetOrReturnHout(a1, v7);
          if (result)
          {
            result = ZinAneTd<4u>::SetCommonConvCfgKh(a1, v17[1]);
            if (result)
            {
              result = ZinAneTd<4u>::SetCommonConvCfgPadTop(a1, v19);
              if (result)
              {
                ZinAneTd<4u>::SetCommonConvCfgSx(a1, v4[82]);
                ZinAneTd<4u>::SetCommonConvCfgSy(a1, v4[83]);
                ZinAneTd<4u>::SetCommonConvCfgOx(a1, v4[85]);
                ZinAneTd<4u>::SetCommonConvCfgOy(a1, v4[86]);
                v16 = 0;
                result = ZinCodegenUtil::ValueToRegister(*(_QWORD *)(a2[33] + 80), (unsigned int *)(*(_QWORD *)(a1 + 280) + 32), &v16);
                if (result)
                {
                  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a1 + 76) & 0xFFFE0000 | v16 & 0x1FFFF;
                  v16 = 0;
                  result = ZinCodegenUtil::ValueToRegister(*(_QWORD *)(a2[33] + 88), (unsigned int *)(*(_QWORD *)(a1 + 280) + 40), &v16);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 80) & 0xFFFE0000 | v16 & 0x1FFFF;
                    result = ZinAneTd<4u>::SetOrReturnNumGroups(a1, *(_QWORD *)(a2[33] + 104));
                    if (result)
                    {
                      v8 = (unsigned __int8 *)a2[33];
                      if (*((_DWORD *)v8 + 28) == 2)
                      {
                        ZinAneTd<4u>::SetUnicastEn(a1, *v8);
                        ZinAneTd<4u>::SetUnicastCin(a1, *(_QWORD *)(a2[33] + 96));
                      }
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<4u>::HandleCommonConvOpcode(result, v9, v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleCommonConfigTileAndTaskInfo(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL8 result;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t NumNeededNEs;
  int Pow2Log2;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  MirInfoChannelAssignment *v15;
  uint64_t v16;
  int v17;
  int8x8_t v18;
  int v19;

  *(_DWORD *)(a1 + 96) = 0;
  v4 = ZinAneTd<4u>::SetTileHeight(a1, *(_QWORD *)(a2 + 200));
  result = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 100) = 0;
    ZinAneTd<4u>::SetNESmallSourceMode(a1, *(_DWORD *)(a2 + 144));
    v19 = 0;
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
    Pow2Log2 = ZinRoundUpToNextPow2Log2(NumNeededNEs);
    result = ZinCodegenUtil::ValueToRegister(Pow2Log2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 184), &v19);
    if (result)
    {
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 100) & 0xFFC7FFFF | ((v19 & 7) << 19);
      v19 = 0;
      v9 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 136));
      v10 = v9 >= 4 ? 4 : v9;
      result = ZinCodegenUtil::ValueToRegister(v10, (unsigned int *)(*(_QWORD *)(a1 + 280) + 160), &v19);
      if (result)
      {
        *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 100) & 0xFFFFF8FF | ((v19 & 7) << 8);
        v19 = 0;
        v11 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 120));
        v12 = v11 >= 4 ? 4 : v11;
        result = ZinCodegenUtil::ValueToRegister(v12, (unsigned int *)(*(_QWORD *)(a1 + 280) + 168), &v19);
        if (result)
        {
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 100) & 0xFFFF8FFF | ((v19 & 7) << 12);
          v19 = 0;
          v13 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 128));
          if (v13 >= 4)
            v14 = 4;
          else
            v14 = v13;
          result = ZinCodegenUtil::ValueToRegister(v14, (unsigned int *)(*(_QWORD *)(a1 + 280) + 176), &v19);
          if (result)
          {
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 100) & 0xFFF8FFFF | ((v19 & 7) << 16);
            v19 = 0;
            v15 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
            v16 = MirInfoChannelAssignment::GetNumNeededNEs(v15);
            v17 = ZinRoundUpToNextPow2Log2(v16);
            result = ZinCodegenUtil::ValueToRegister(v17, (unsigned int *)(*(_QWORD *)(a1 + 280) + 184), &v19);
            if (result)
            {
              v18.i32[1] = 0x100000;
              v18.i32[0] = (v19 & 7) << 19;
              *(int8x8_t *)(a1 + 100) = vorr_s8(vand_s8(*(int8x8_t *)(a1 + 100), (int8x8_t)0xF00FFFFFFFC7FFFFLL), v18);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<4u>::HandleTileDmaSrcConfig(uint64_t a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t InputTensor;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _OWORD v90[13];

  if (!ZinIrOpLayer::IsNELayer(this))
    ZinAssertImpl("Only NE layers allowed\n");
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) >= 0x18uLL)
  {
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinAneTd<4u>::HandleTileDmaSrcConfig(v23, v24, v25, v26, v27, v28, v29, v30);
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a3 + 528);
  InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
  v12 = *((_QWORD *)this + 33);
  v13 = *(_QWORD *)(v12 + 752);
  v14 = *(_BYTE *)(v12 + 1392);
  if ((v14 & 8) != 0 && (v14 & 7) != 0)
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinAneTd<4u>::HandleTileDmaSrcConfig(v15, v16, v17, v18, v19, v20, v21, v22);
LABEL_9:
    v31 = 0;
    v32 = 1;
    goto LABEL_10;
  }
  v34 = *(_DWORD *)(InputTensor + 88);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFFF7F | ((v13 != 0) << 7);
  if (v13)
  {
    if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v13)
      && ZinIrSymbol::GetMemType((ZinIrSymbol *)v13) != 1)
    {
      v61 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v61)
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v61, v62, v63, v64, v65, v66, v67, v68);
      goto LABEL_9;
    }
    if (!ZinIrSection::HasValidBarId(*(ZinIrSection **)(v13 + 8)))
    {
      v53 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v53)
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v53, v54, v55, v56, v57, v58, v59, v60);
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFFF8F | (16 * (*(_BYTE *)(*(_QWORD *)(v13 + 8) + 56) & 7));
    v35 = *(_OWORD *)(v13 + 384);
    v90[10] = *(_OWORD *)(v13 + 368);
    v90[11] = v35;
    v90[12] = *(_OWORD *)(v13 + 400);
    v36 = *(_OWORD *)(v13 + 320);
    v90[6] = *(_OWORD *)(v13 + 304);
    v90[7] = v36;
    v37 = *(_OWORD *)(v13 + 352);
    v90[8] = *(_OWORD *)(v13 + 336);
    v90[9] = v37;
    v38 = *(_OWORD *)(v13 + 256);
    v90[2] = *(_OWORD *)(v13 + 240);
    v90[3] = v38;
    v39 = *(_OWORD *)(v13 + 288);
    v90[4] = *(_OWORD *)(v13 + 272);
    v90[5] = v39;
    v40 = *(_OWORD *)(v13 + 224);
    v90[0] = *(_OWORD *)(v13 + 208);
    v90[1] = v40;
    if (ZinEngineLayerMirInfo::HasDmaRead(*((_QWORD *)this + 33), 0))
      *(_DWORD *)(a1 + 124) |= 1u;
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFFFF0FFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 1, *(_DWORD *)(*((_QWORD *)this + 33) + 1400)) & 0xF) << 12);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFFF0FFFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 2, *(_DWORD *)(*((_QWORD *)this + 33) + 1404)) & 0xF) << 16);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFF0FFFFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 3, *(_DWORD *)(*((_QWORD *)this + 33) + 1408)) & 0xF) << 20);
    **(_QWORD **)(a5 + 128) = v13;
    v41 = *((_QWORD *)this + 33);
    v42 = *(_QWORD *)(v41 + 720);
    if (v42 % v10 || (v43 = *(_QWORD *)(v41 + 728), v44 = v43 / v10, v43 % v10))
    {
      v45 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v45)
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      v89 = 0;
      if (ZinCodegenUtil::ValueToRegister(v42 / v10, (unsigned int *)(*(_QWORD *)(a1 + 280) + 248), &v89))
      {
        *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 132) & 0xC000003F | ((v89 & 0xFFFFFF) << 6);
        v89 = 0;
        if (ZinCodegenUtil::ValueToRegister(v44, (unsigned int *)(*(_QWORD *)(a1 + 280) + 256), &v89))
        {
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 136) & 0xC000003F | ((v89 & 0xFFFFFF) << 6);
          switch(v34)
          {
            case 1:
              v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCFFC | 0x1000;
              goto LABEL_47;
            case 2:
              v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCFFC;
              goto LABEL_47;
            case 3:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              v71 = 8241;
              goto LABEL_46;
            case 4:
              v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC | 1;
              goto LABEL_47;
            case 5:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              v71 = 257;
              goto LABEL_46;
            case 6:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              v71 = 17;
              goto LABEL_46;
            case 7:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              v71 = 273;
              goto LABEL_46;
            case 8:
              v72 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v72)
                ZinCodegen::SetSecondarySourceDMA<7u>(v72, v73, v74, v75, v76, v77, v78, v79);
              goto LABEL_42;
            case 9:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              v71 = 4145;
              goto LABEL_46;
            case 10:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              v71 = 49;
LABEL_46:
              v69 = v70 | v71;
LABEL_47:
              *(_DWORD *)(a1 + 140) = v69;
              v80 = ZinTensorDescriptorDmaInterleave((uint64_t)v90);
              if (v80 >= 1)
              {
                v32 = 0;
                *(_DWORD *)(a1 + 140) = *(_DWORD *)(a1 + 140) & 0xF0FFFFFF | ((v80 & 0xF) << 24);
                goto LABEL_24;
              }
              v81 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v81)
                ZinCodegen::SetSecondarySourceDMA<7u>(v81, v82, v83, v84, v85, v86, v87, v88);
              break;
            default:
LABEL_42:
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinAneTd<6u>::HandleTileDmaSrcConfig();
              break;
          }
        }
      }
    }
    v32 = 1;
LABEL_24:
    v31 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFF000FFF | 0x222000;
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a1 + 140) & 0xF0FFFFFF | 0x1000000;
    v32 = 1;
    v31 = 1;
  }
LABEL_10:
  if (v32)
    return v31;
  else
    return 1;
}

BOOL ZinAneTd<4u>::HandleL2Config(uint64_t a1, ZinIrOpLayer *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int L2RdMode;
  int *InputTensor;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t L2RdSymbol;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  ZinIrSymbol *L2WrSymbol;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int OCGSize;
  unsigned int NumNeededNEs;
  uint64_t *v82;
  _BOOL8 L2RowStride;
  uint64_t v85;
  _OWORD v86[13];
  _BYTE v87[24];
  _BYTE *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = *(_DWORD *)(*((_QWORD *)a2 + 8) + 8);
  if (v6 != 85)
  {
    if (v6 != 89)
      goto LABEL_22;
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 54) + 64);
    v8 = *(_DWORD *)(v7 + 104);
    if (v8)
    {
      if (v8 != 1)
      {
        v9 = *(_DWORD *)(v7 + 100);
        goto LABEL_20;
      }
      if (*(_DWORD *)(v7 + 100) == 4)
      {
        v9 = 4;
LABEL_20:
        v21 = a1;
        v22 = 0;
        goto LABEL_21;
      }
    }
    else if (*(_DWORD *)(v7 + 100) == 2)
    {
      v9 = 2;
      goto LABEL_20;
    }
    v56 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v56)
      ZinAneTd<4u>::HandleL2Config(v56, v57, v58, v59, v60, v61, v62, v63);
    return 0;
  }
  if (!*((_QWORD *)a2 + 54))
    goto LABEL_22;
  v10 = *((_QWORD *)a2 + 17);
  v9 = *(_DWORD *)(v10 + 376);
  v11 = (_DWORD *)a3[183];
  v12 = (_DWORD *)a3[184];
  if (v11 != v12)
  {
    while (*v11 != v9)
    {
      if (++v11 == v12)
      {
        v11 = (_DWORD *)a3[184];
        break;
      }
    }
  }
  if (v11 == v12 || v9 == 4 || v9 == 2)
  {
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinAneTd<4u>::HandleL2Config(v13, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  v22 = *(_DWORD *)(v10 + 380);
  v21 = a1;
LABEL_21:
  ZinAneTd<4u>::SetPaddingMode(v21, v9, v22);
LABEL_22:
  L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(*((_QWORD *)a2 + 33), 0);
  ZinAneTd<4u>::SetL2Src1SourceType(a1, L2RdMode);
  if (!ZinCodegen::SetPrimaryL2SourceBuffer<4u>((uint64_t)a3, (uint64_t)a2, (ZinIrHalH13g *)a1))
  {
    v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v28)
      ZinAneTd<1u>::HandleNEControlCommon(v28, v29, v30, v31, v32, v33, v34, v35);
    return 0;
  }
  InputTensor = (int *)ZinIrOpLayer::GetInputTensor(a2, 0);
  ZinAneTd<4u>::SetL2Src1DmaFormat(a1, InputTensor[22]);
  v88 = 0;
  ZinIrTensor::InferDescriptor((ZinIrTensor *)InputTensor, (uint64_t)v87, (uint64_t)v86);
  v25 = ZinTensorDescriptorDmaInterleave((uint64_t)v86);
  v26 = v88;
  if (v88 == v87)
  {
    v27 = 4;
    v26 = v87;
  }
  else
  {
    if (!v88)
      goto LABEL_30;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_30:
  if (v25 <= 0)
  {
    v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v48)
      return 0;
    goto LABEL_44;
  }
  ZinAneTd<4u>::SetL2Src1Interleave(a1, v25);
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 90 && *((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) == 16)
  {
    v36 = *(_QWORD *)(ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)a2 + 33), 0) + 16);
    v38 = a3[51];
    v37 = a3[52];
    L2RdSymbol = ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)a2 + 33), 1);
    v40 = v36 % v38 / v37;
    v41 = *(_QWORD *)(L2RdSymbol + 16) % a3[51] / a3[52];
    if ((int)v40 - (int)v41 >= 0)
      v42 = v40 - v41;
    else
      v42 = v41 - v40;
    if (v41 > v40)
      LODWORD(v41) = v40;
    ZinAneTd<4u>::SetL2SrcBaseAddress(a1, v41);
    ZinAneTd<4u>::SetL2Src1ChannelStride(a1, v42);
  }
  v43 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)a2 + 33));
  v45 = (uint64_t)L2WrSymbol;
  if (!L2WrSymbol)
  {
    v64 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v64)
      ZinAneTd<4u>::HandleL2Config(v64, v65, v66, v67, v68, v69, v70, v71);
    return 0;
  }
  if (ZinIrSymbol::GetMemType(L2WrSymbol) != 2)
  {
    v72 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v72)
      ZinAneTd<17u>::HandleL2Config(v72, v73, v74, v75, v76, v77, v78, v79);
    return 0;
  }
  ZinAneTd<4u>::SetL2ResultType(a1, *(_DWORD *)(*((_QWORD *)a2 + 33) + 1632));
  ZinAneTd<4u>::SetL2BfrMode(a1, *(unsigned __int8 *)(*((_QWORD *)a2 + 33) + 312));
  ZinAneTd<4u>::SetL2ResultCfgDmaFmt(a1, *(_DWORD *)(v43 + 88));
  ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a1, *(_QWORD *)(*((_QWORD *)a2 + 33) + 320));
  if ((*(_DWORD *)(*((_QWORD *)a2 + 33) + 1632) - 1) > 1)
  {
    v47 = 1;
  }
  else
  {
    v46 = ZinTensorDescriptorDmaInterleave(*(_QWORD *)(*((_QWORD *)a2 + 33) + 944) + 208);
    v47 = v46;
    if (!v46)
    {
      v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v48)
        return 0;
LABEL_44:
      ZinAneTd<6u>::HandleL2Config(v48, v49, v50, v51, v52, v53, v54, v55);
      return 0;
    }
  }
  ZinAneTd<4u>::SetL2ResultInterleave(a1, v47);
  ZinAneTd<4u>::SetL2ResultBaseAddr(a1, *(_QWORD *)(v45 + 16) % a3[51] / a3[52]);
  ZinAneTd<4u>::SetL2ResultChannelStride(a1, *(_DWORD *)(*((_QWORD *)a2 + 33) + 280));
  v86[0] = *(_OWORD *)(v45 + 520);
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)v86);
  NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v86);
  ZinAneTd<4u>::SetL2ResultWrapAddrOffset(a1, OCGSize);
  ZinAneTd<4u>::SetL2ResultWrapAddr(a1, NumNeededNEs);
  if ((ZinCodegen::SetL2ResultWrapInfo<4u>(a1, v45) & 1) == 0)
    return 0;
  v85 = 0;
  L2RowStride = ZinCodegen::GetL2RowStride((ZinCodegen *)(v43 + 48), *(const ZinTensorDimensions **)(*((_QWORD *)a2 + 33) + 272), *(unsigned int *)(*(_QWORD *)(a1 + 280) + 236), &v85, v82);
  if (L2RowStride)
  {
    ZinAneTd<4u>::SetL2ResultRowStride(a1, v85);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
    if (*((_QWORD *)a2 + 47))
      *(_DWORD *)(a1 + 172) |= 1u;
  }
  return L2RowStride;
}

void sub_206FC38C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL ZinAneTd<4u>::HandleNEConfig(ZinIrHalH13g *a1, ZinIrKernel **a2, const ZinIrHalParameters *a3)
{
  ZinIrKernel **v6;
  ZinIrKernel *v7;
  unsigned int v8;
  int v9;
  int v10;
  int ShouldUseSparseBinaryForCompression;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  int MacCfgOpMode;
  _BOOL8 result;
  int MacCfgKernelMode;
  _BOOL4 MacCfgPassthroughEnable;
  int KernelCfgKernelFmt;
  uint64_t v20;
  ZinIrKernel *v21;
  int v22;
  int v23;
  ZinIrKernel *v24;
  unsigned int v25;
  uint64_t InputTensor;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  ZinDeQuantLayer *v44;
  int ScalarZeroPoint;
  unint64_t v46;
  char v47;
  unsigned __int8 v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  ZinGOCLayer *v52;
  uint64_t v53;
  int HasZeroPoint;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;

  (*(void (**)(ZinIrHalH13g *))(*(_QWORD *)a1 + 88))(a1);
  v6 = a2 + 17;
  v7 = a2[17];
  if (!v7)
  {
    v13 = 0;
    v10 = 0;
    v64 = 0;
    goto LABEL_7;
  }
  v8 = *((unsigned __int8 *)v7 + 448);
  v9 = (v8 >> 3) & 1;
  v10 = (v8 >> 4) & 1;
  if ((v8 & 4) == 0)
  {
    v64 = (v8 >> 3) & 1;
    if (ZinIrKernel::HasPerCoutScale(v7) || ZinIrKernel::HasPerCoutBias(v7))
    {
      ShouldUseSparseBinaryForCompression = 0;
      v12 = 0;
      v13 = *(_QWORD *)((*((uint64_t (**)(ZinIrKernel **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0) + 48) > 1;
LABEL_8:
      v14 = 4;
      goto LABEL_9;
    }
    v13 = 0;
LABEL_7:
    ShouldUseSparseBinaryForCompression = 0;
    v12 = 0;
    goto LABEL_8;
  }
  v23 = *((_DWORD *)a2[8] + 2);
  if (v23 == 90)
  {
    InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a2, 0);
    v25 = 0;
    LODWORD(v24) = *(_QWORD *)(InputTensor + 48) > 1;
    v7 = a2[17];
  }
  else if (v23 == 85)
  {
    v24 = a2[54];
    if (v24)
    {
      v25 = v8 >> 7;
      if (*((_DWORD *)a2[33] + 28) != 1)
        v25 = 0;
      LODWORD(v24) = 0;
    }
    else
    {
      v25 = 0;
    }
  }
  else
  {
    v25 = 0;
    LODWORD(v24) = 0;
  }
  v13 = (v25 | v24) != 0;
  v34 = *(unsigned __int8 **)(*((_QWORD *)v7 + 98) + 40);
  if (!v34)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    GetKernelCfgKernelFmt(result, v36, v37, v38, v39, v40, v41, v42);
    return 0;
  }
  v64 = v9;
  v14 = *((_DWORD *)v7 + 44);
  v35 = *v34;
  v12 = v35 != 0;
  if (v35)
  {
    ShouldUseSparseBinaryForCompression = ZinIrKernel::ShouldUseSparseBinaryForCompression(v7);
    v7 = *v6;
  }
  else
  {
    ShouldUseSparseBinaryForCompression = 0;
  }
  if (ZinIrKernel::HasVectorPalettizedWeight(v7))
  {
    v43 = ZinLog2OfPow2(*((_QWORD *)*v6 + 52));
    ZinAneTd<4u>::SetPaletteBlockSize((uint64_t)a1, v43);
  }
LABEL_9:
  ZinAneTd<4u>::SetKernelPalettizedEn((uint64_t)a1, v14);
  ZinAneTd<4u>::SetKernelPalettizedBits((uint64_t)a1, v14);
  ZinAneTd<4u>::SetKernelSparseFmt((uint64_t)a1, v12);
  ZinAneTd<4u>::SetKernelSparseBinary((uint64_t)a1, ShouldUseSparseBinaryForCompression);
  ZinAneTd<4u>::SetGroupKernelReuse((uint64_t)a1, v13);
  v66 = 0;
  MacCfgOpMode = GetMacCfgOpMode((ZinIrOpLayer *)a2, (uint64_t)a3, &v66);
  result = 0;
  if (!MacCfgOpMode)
  {
    ZinAneTd<4u>::SetOpMode((uint64_t)a1, v66);
    MacCfgKernelMode = GetMacCfgKernelMode((uint64_t)a2, (uint64_t)a3);
    ZinAneTd<4u>::SetKernelMode((uint64_t)a1, MacCfgKernelMode);
    MacCfgPassthroughEnable = GetMacCfgPassthroughEnable((const ZinNELayer *)a2, a3);
    ZinAneTd<1u>::SetPassthroughEnable((uint64_t)a1, MacCfgPassthroughEnable);
    v65 = 0;
    KernelCfgKernelFmt = GetKernelCfgKernelFmt((const ZinNELayer *)a2, a3, v66, &v65);
    result = 0;
    if (!KernelCfgKernelFmt)
    {
      ZinAneTd<4u>::SetKernelFmt((uint64_t)a1, v65);
      v20 = *(uint64_t *)((char *)a2 + 420);
      if ((v20 & 0xFF00000000) == 0)
        ZinAssertImpl("Binary point is missing from NE layer.");
      ZinAneTd<4u>::SetNEBinaryPoint((uint64_t)a1, v20);
      if (((*(uint64_t (**)(ZinIrHalH13g *, ZinIrKernel **))(*(_QWORD *)a1 + 296))(a1, a2) & 1) == 0)
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        ZinAneTd<4u>::HandleNEConfig(result, v27, v28, v29, v30, v31, v32, v33);
        return 0;
      }
      v21 = a2[49];
      if (v21)
        v22 = *((_DWORD *)v21 + 48);
      else
        v22 = 0;
      ZinAneTd<4u>::SetNENonLinearMode((uint64_t)a1, v22, (uint64_t)a3 + 1536);
      v44 = a2[51];
      if (v44)
      {
        ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v44);
        ZinAneTd<4u>::SetQuantizationOutputZeroOffset((uint64_t)a1, 1, ScalarZeroPoint);
      }
      if (v64)
      {
        v46 = *(_QWORD *)((char *)*v6 + 180);
        v47 = 1;
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
      ZinAneTd<4u>::SetNEPostScale((uint64_t)a1, v46, v47);
      if (v10)
      {
        v48 = *((_BYTE *)*v6 + 192);
        LOBYTE(ShouldUseSparseBinaryForCompression) = *((_BYTE *)*v6 + 193);
        v10 = *((_DWORD *)*v6 + 47) >> 8;
        v49 = (unint64_t)*((unsigned __int16 *)*v6 + 97) << 48;
        v50 = *((_DWORD *)*v6 + 47);
        v51 = 1;
        LODWORD(v7) = v10;
      }
      else
      {
        v48 = 0;
        v50 = 0;
        v49 = 0;
        v51 = 0;
      }
      if (*((_DWORD *)a2[8] + 2) == 85)
      {
        v52 = a2[48];
        if (v52)
        {
          if (ZinGOCLayer::IsDynamicBias(v52))
          {
            LODWORD(v7) = v10;
            LOBYTE(ShouldUseSparseBinaryForCompression) = 1;
            v51 = 1;
          }
        }
      }
      ZinAneTd<4u>::SetNEBias((uint64_t)a1, v49 | ((unint64_t)ShouldUseSparseBinaryForCompression << 40) | ((unint64_t)v48 << 32) | v50 & 0xFFFFFFFF000000FFLL | (((unint64_t)v7 & 0xFFFFFF) << 8), v51);
      if (*((_DWORD *)a2[8] + 2) == 85)
        v53 = ZinPEElementWiseLayer::GetSecondOperandBroadcast((ZinPEElementWiseLayer *)a2) & 0xFFFFFFFFFFLL;
      else
        v53 = 0;
      ZinAneTd<4u>::SetNEMatrixVectorBias((uint64_t)a1, a2 + 17, v53);
      if (*v6)
        HasZeroPoint = ZinIrKernel::HasZeroPoint(*v6);
      else
        HasZeroPoint = 0;
      ZinAneTd<4u>::SetKernelAsymQuantEn((uint64_t)a1, HasZeroPoint);
      v56 = *v6 && (v55 = (unsigned __int8 *)*((_QWORD *)*v6 + 98)) != 0 && *v55 != 0;
      ZinAneTd<4u>::SetKernelDetectZeros((uint64_t)a1, v56);
      ZinAneTd<4u>::SetDoubleInt8Enable((uint64_t)a1, *((unsigned __int8 *)a2[33] + 1));
      if (*((_DWORD *)a2[8] + 2) == 89)
      {
        ZinIrHalH13g::~ZinIrHalH13g(a1);
        ZinIrHalH13g::~ZinIrHalH13g(a1);
      }
      if (((*(uint64_t (**)(ZinIrHalH13g *, ZinIrKernel **))(*(_QWORD *)a1 + 288))(a1, a2) & 1) != 0)
        return 1;
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneTd<4u>::HandleNEConfig(result, v57, v58, v59, v60, v61, v62, v63);
        return 0;
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<4u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) == 93)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a2 + 432) + 64);
    v3 = *(_QWORD **)(v2 + 48);
    if (v3 != (_QWORD *)(v2 + 56))
    {
      v4 = 0;
      do
      {
        v5 = v3[4];
        if (v5 >= 8)
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        v6 = (_QWORD *)v3[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v3[2];
            v8 = *v7 == (_QWORD)v3;
            v3 = v7;
          }
          while (!v8);
        }
        v4 |= 1 << v5;
        v3 = v7;
      }
      while (v7 != (_QWORD *)(v2 + 56));
    }
    ZinAneTd<1u>::SetRcasKeyMask();
  }
  return 1;
}

BOOL ZinAneTd<4u>::HandleTileDmaDstConfig(uint64_t a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  ZinIrSection **v13;
  int v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v64;
  int v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _OWORD v75[13];

  if (!ZinIrOpLayer::IsNELayer(this) && !ZinIrOpLayer::IsTransposeEngineLayer(this))
    ZinAssertImpl("Only NE and TransposeEngineLayer allowed\n");
  v10 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v11 = *((_QWORD *)this + 32);
  if (v11)
    v12 = *(_DWORD *)(*(_QWORD *)(v11 + 64) + 8) == 102;
  else
    v12 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v13 = *(ZinIrSection ***)(*((_QWORD *)this + 33) + 944);
  v14 = *(_DWORD *)(v10 + 88);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFF7FF | ((v13 != 0) << 11);
  if (!v13)
  {
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 252) & 0xFFFF0FFF | 0x3000;
    *(_DWORD *)(a1 + 268) = *(_DWORD *)(a1 + 268) & 0xF0FFFFFF | 0x1000000;
    goto LABEL_24;
  }
  if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v13) == 2)
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinCodegen::SetResultDMA<7u>(v15, v16, v17, v18, v19, v20, v21, v22);
    goto LABEL_24;
  }
  if (!ZinIrSection::HasValidBarId(v13[1]))
  {
    v53 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v53)
      ZinCodegen::SetResultDMA<7u>(v53, v54, v55, v56, v57, v58, v59, v60);
    goto LABEL_24;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFF8FF | ((*((_BYTE *)v13[1] + 56) & 7) << 8);
  v23 = *((_QWORD *)this + 33);
  v24 = *(_OWORD **)(v23 + 944);
  v25 = v24[24];
  v75[10] = v24[23];
  v75[11] = v25;
  v75[12] = v24[25];
  v26 = v24[20];
  v75[6] = v24[19];
  v75[7] = v26;
  v27 = v24[22];
  v75[8] = v24[21];
  v75[9] = v27;
  v28 = v24[16];
  v75[2] = v24[15];
  v75[3] = v28;
  v29 = v24[18];
  v75[4] = v24[17];
  v75[5] = v29;
  v30 = v24[14];
  v75[0] = v24[13];
  v75[1] = v30;
  if ((*(_DWORD *)(v23 + 1632) - 1) <= 1)
  {
    *(_DWORD *)(a1 + 252) |= 1u;
    v23 = *((_QWORD *)this + 33);
  }
  v31 = *(_DWORD *)(a1 + 252) & 0xFFFF0FFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 0, *(_DWORD *)(v23 + 1412)) & 0xF) << 12);
  *(_DWORD *)(a1 + 252) = v31;
  *(_DWORD *)(a1 + 252) = v31 & 0xFBFFFFFF | (*(unsigned __int8 *)(*((_QWORD *)this + 33) + 312) << 26);
  *(_QWORD *)(a5 + 152) = v13;
  v32 = *((_QWORD *)this + 33);
  v33 = *(_QWORD *)(v32 + 912);
  v34 = *(_QWORD *)(v32 + 920);
  if (v33 < 1 || v34 <= 0)
  {
    v35 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v35)
      ZinAneTd<4u>::HandleTileDmaDstConfig(v35, v36, v37, v38, v39, v40, v41, v42);
  }
  v43 = *(_QWORD *)(a3 + 528);
  if (v33 % v43 || (v44 = v34 / v43, v34 % v43))
  {
    v45 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v45)
      ZinAneTd<4u>::HandleTileDmaDstConfig(v45, v46, v47, v48, v49, v50, v51, v52);
    goto LABEL_24;
  }
  v74 = 0;
  if (!ZinCodegenUtil::ValueToRegister(v33 / v43, (unsigned int *)(*(_QWORD *)(a1 + 280) + 272), &v74)
    || (*(_DWORD *)(a1 + 260) = *(_DWORD *)(a1 + 260) & 0xC000003F | ((v74 & 0xFFFFFF) << 6),
        v74 = 0,
        !ZinCodegenUtil::ValueToRegister(v44, (unsigned int *)(*(_QWORD *)(a1 + 280) + 256), &v74)))
  {
LABEL_24:
    v61 = 1;
    return !v13 || v61 == 0;
  }
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a1 + 264) & 0xC000003F | ((v74 & 0xFFFFFF) << 6);
  ZinAneTd<4u>::SetTileDmaDstFormat(a1, v14, v12);
  v64 = ZinTensorDescriptorDmaInterleave((uint64_t)v75);
  if (v64 < 1)
  {
    v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v66)
      ZinCodegen::SetSecondarySourceDMA<7u>(v66, v67, v68, v69, v70, v71, v72, v73);
    goto LABEL_24;
  }
  v65 = *(_DWORD *)(a1 + 268) & 0xF0FFFFFF | ((v64 & 0xF) << 24);
  *(_DWORD *)(a1 + 268) = v65;
  *(_DWORD *)(a1 + 268) = v65 & 0xFFF8FFFF | ((*(_DWORD *)(*((_QWORD *)this + 33) + 1456) & 7) << 16);
  ZinAneTd<4u>::SetTileDmaDstZeroPad(a1, (_DWORD *)(*((_QWORD *)this + 33) + 1488));
  v61 = 0;
  return !v13 || v61 == 0;
}

uint64_t ZinAneTd<4u>::HandleKernelDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, std::vector<std::string> *a5)
{
  char v10;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, *(int *)(*a3 + 8));
  v10 = 0;
  ZinAneTd<4u>::HandleKernelDmaSrcConfigCoeffBuffer(a1, (ZinEngineLayerMirInfo **)a2, a3, (uint64_t)a5, (uint64_t *)(a2 + 136), &v10);
  if (v10)
  {
    ZinAneTd<6u>::AddKernelSymbols(a1, (ZinIrKernel **)a2, a3, a5);
    if (*(_BYTE *)(*a3 + 1271))
      ZinAneTd<4u>::SetKernelDmaSrcConfigPrefetch();
  }
  return 1;
}

uint64_t ZinAneTd<4u>::HandleEngineLayer(uint64_t a1, uint64_t a2, unint64_t a3, ZinAneInstruction *a4, uint64_t a5, _QWORD **a6, CFArrayRef *a7)
{
  ZinIrSection *v14;
  uint64_t result;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  _QWORD v25[3];

  if (!*(_QWORD *)(a2 + 264))
  {
    v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v16)
      ZinAneTd<4u>::HandleEngineLayer(v16, v17, v18, v19, v20, v21, v22, v23);
    v24 = CFSTR("CodeGenerationFailure");
    goto LABEL_13;
  }
  ZinIrMemoryPool::GetSections((uint64_t)a6[3], 1, v25);
  v14 = *(ZinIrSection **)(v25[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v25);
  if ((ZinAneInstruction::HandleTdHeader((uint64_t)a4, (ZinEngineLayerMirInfo **)a2, a3, *a6, v14) & 1) == 0)
  {
    v24 = CFSTR("InvalidHWHeader");
LABEL_13:
    ZinIrNetworkStatus::SetError(a7, v24);
    return 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a2))
    ZinAssertImpl("Error: PE is not supported");
  if (!ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2))
    ZinAssertImpl("TransposeEngineLayer based graph should not need DMA buffer\n");
  if (!HandleNELayer<4u>((const ZinIrOpLayer *)a2, a3, a4, (const ZinIrHalParameters **)*a6, (ZinIrMemoryPool *)a6[3], a5, a7))return 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 328))(a1, **a6, a2);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, a2);
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 352))(a1, a2, a6[2]);
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<4u>::HandleKernelDmaSrcConfigCoeffBuffer(_BOOL8 result, ZinEngineLayerMirInfo **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v9 = result;
  v10 = *a3;
  v11 = *a5;
  if (*a5 && (v12 = *(_QWORD *)(v11 + 784)) != 0)
    v13 = *(_QWORD *)(v12 + 40);
  else
    v13 = 0;
  if (v11)
    v14 = v13 == 0;
  else
    v14 = 1;
  v15 = !v14;
  if (*(_DWORD *)(v10 + 8))
  {
    v16 = 0;
    v17 = *(_QWORD *)(v10 + 528);
    v18 = 40;
    while (v15)
    {
      ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
      if (MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) <= v16)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + v18);
      v21 = v20 != 0;
      *a6 |= v21;
      ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaEn(v9, v21, v16);
      ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
      if (!v20)
        goto LABEL_22;
      v22 = *(_QWORD *)(v13 + 32);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v13 + 40) - v22) >> 3) <= v16)
        ZinAssertImpl("Kernel DMA NE number greater than kernel data prepped\n");
      if (*(_BYTE *)(*a3 + 1255))
      {
        if (*((_BYTE *)a2[33] + 2))
        {
          if (((*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 15))(a2) & 1) != 0)
          {
            v23 = ZinDivRoundUp(*((_QWORD *)a2[33] + 6), v17);
            ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v23, v16);
            ZinDivRoundUp(*(_QWORD *)(*((_QWORD *)a2[33] + 7) + 8 * v16), v17);
            goto LABEL_28;
          }
          v22 = *(_QWORD *)(v13 + 32);
        }
        v26 = ZinDivRoundUp(*(_QWORD *)(v22 + v18), v17);
        ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v26, v16);
LABEL_28:
        ZinAneTd<4u>::SetKernelDmaSrcCoeffBaseOffset();
      }
      v25 = ZinDivRoundUp(*(_QWORD *)(v22 + v18), v17);
      v24 = v9;
LABEL_23:
      result = ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v24, v25, v16++);
      v18 += 56;
      if (v16 >= *(unsigned int *)(*a3 + 8))
        return result;
    }
    ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaEn(v9, 0, v16);
    ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
LABEL_22:
    v24 = v9;
    v25 = 1;
    goto LABEL_23;
  }
  return result;
}

BOOL HandleNELayer<4u>(const ZinIrOpLayer *a1, int a2, ZinAneInstruction *a3, const ZinIrHalParameters **a4, ZinIrMemoryPool *a5, uint64_t a6, CFArrayRef *a7)
{
  ZinIrHalH13g *v13;
  const __CFString *v14;
  _BOOL8 result;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  ZinIrKernel *v22;
  uint64_t v23;
  ZinDynamicRange **v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;

  v13 = (ZinIrHalH13g *)*((_QWORD *)a3 + 25);
  v31 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock(a1, a5, &v31)
    || (v30 = 0, ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a1, a5, &v30)))
  {
LABEL_3:
    v14 = CFSTR("CodeGenerationFailure");
LABEL_4:
    ZinIrNetworkStatus::SetError(a7, v14);
    return 0;
  }
  v16 = *((_QWORD *)a1 + 17);
  if (v16 && *(_QWORD *)(v16 + 784))
  {
    ZinAneTd<4u>::SetKernelBaseHeader((uint64_t)v13, v31);
    v17 = *(_QWORD **)(*((_QWORD *)a1 + 17) + 784);
    if (v17[1])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[2])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[4])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[3])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
  }
  if ((ZinAneInstruction::HandleCommonConfig(a3, a1, *a4, a7) & 1) != 0)
  {
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, const ZinIrHalParameters **, ZinIrMemoryPool *, ZinAneInstruction *))(*(_QWORD *)v13 + 312))(v13, a1, a4, a5, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("KernelDMASourceAllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, const ZinIrHalParameters *, uint64_t, ZinAneInstruction *))(*(_QWORD *)v13 + 248))(v13, a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("TileDMASourceAllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, const ZinIrHalParameters *))(**((_QWORD **)a3 + 25)
                                                                                              + 256))(*((_QWORD *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("L2AllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, const ZinIrHalParameters *))(**((_QWORD **)a3 + 25)
                                                                                              + 264))(*((_QWORD *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("NEConfigFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, const ZinIrHalParameters *, uint64_t, ZinAneInstruction *))(**((_QWORD **)a3 + 25) + 304))(*((_QWORD *)a3 + 25), a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("TileDMADestinationAllocationFailure");
      goto LABEL_4;
    }
    if (!ZinAneTd<4u>::ValidateOCGSizes(v13, a1))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      goto LABEL_3;
    }
    ZinAneTd<4u>::SetDoubleBufferingBasedOnOtherRegisters(v13, *((_DWORD *)*a4 + 4));
    if ((*((_DWORD *)v13 + 18) & 3) == 3
      || (v29 = dword_207AB0BD8[*((_DWORD *)v13 + 18) & 3], v18 = *((_DWORD *)v13 + 55) & 3, v18 == 3))
    {
      ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      return 0;
    }
    v19 = (char)(*((_DWORD *)v13 + 56) >> 5) >> 3;
    v20 = ZinMirPrepareBinaryPoint::CalculateBinaryPointAdjustment(v18, &v29);
    v21 = *((_DWORD *)v13 + 59);
    if (ZinIrOpLayer::IsNELayer(a1) && v20 + v19 + (HIWORD(v21) & 0x1F) >= 0x20u)
    {
      ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      return 0;
    }
    v22 = (ZinIrKernel *)*((_QWORD *)a1 + 17);
    if (v22)
    {
      if (ZinIrKernel::HasBias(v22))
      {
        v23 = *((_QWORD *)a1 + 17);
        if (*(_QWORD *)(v23 + 576))
        {
          v24 = (ZinDynamicRange **)(v23 + 576);
          v25 = ldexp(1.0, v20 + v19 + ((int)(*((_DWORD *)v13 + 58) << 11) >> 27));
          if (!ZinIrCodegenValidBiasShift(v24, v25, v26, v27, v28))
          {
            ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              HandleNELayer<17u>();
            return 0;
          }
        }
      }
    }
    if (!*((_BYTE *)*a4 + 1243) || (ZinAneTd<6u>::SetDPE((uint64_t)v13, (uint64_t)a1) & 1) != 0)
      return 1;
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  return result;
}

BOOL ZinAneTd<4u>::ValidateOCGSizes(_DWORD *a1, _QWORD *a2)
{
  int v2;
  BOOL v3;
  _BOOL4 v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_DWORD *)(a2[8] + 8);
  v3 = (v2 - 85) > 5 || ((1 << (v2 - 85)) & 0x31) == 0;
  if (v3 && !a2[48])
    return 1;
  v4 = 1;
  if ((v2 - 89) >= 2 && v2 != 92)
    v4 = v2 == 85 && a2[54] == 0;
  v5 = a1[22];
  v6 = (v5 >> 12) & 7;
  if ((a1[25] & 4) != 0)
  {
    if (!v6)
      return 1;
    result = 1;
    if ((v5 & 0x6000) == 0x2000)
      return result;
    if (v6 == 4)
      return result;
    if (v6 == 5)
      return result;
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
LABEL_86:
    ZinAneTd<17u>::ValidateOCGSizes(result, v12, v13, v14, v15, v16, v17, v18);
    return 0;
  }
  v7 = a1[23];
  v8 = *(_DWORD *)(a2[33] + 112);
  v9 = (v5 >> 28) & 3;
  v10 = v5 >> 30;
  if ((a1[18] & 3u) < 2)
  {
    if ((v7 & 0x4000) == 0)
    {
      if (v9 == 1 && v10 == 1)
      {
        if (v6 >= 4)
        {
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          goto LABEL_86;
        }
        return 1;
      }
      if (v9 == 1 && v10 == 2 || v9 == 2 && v10 == 1)
      {
        if (v6 >= 3)
        {
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          goto LABEL_86;
        }
        return 1;
      }
      if (v9 == 2 && v10 == 2)
      {
        if (v6 >= 2)
        {
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          goto LABEL_86;
        }
        return 1;
      }
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
        goto LABEL_82;
      return result;
    }
    if (v4)
    {
      if (v6)
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        goto LABEL_86;
      }
      return 1;
    }
    if (v8)
    {
      if (v6 >= 4)
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        goto LABEL_86;
      }
      return 1;
    }
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    goto LABEL_68;
  }
  if ((a1[18] & 3) != 2)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinAneTd<4u>::ValidateOCGSizes(result, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  if ((v7 & 0x4000) != 0)
  {
    if (v4)
    {
      if (v6)
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        goto LABEL_86;
      }
      return 1;
    }
    if (v8)
    {
      if (v6 >= 5)
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        goto LABEL_86;
      }
      return 1;
    }
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
LABEL_68:
    ZinAneTd<6u>::ValidateOCGSizes(result, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  if (v9 == 1 && v10 == 1)
  {
    if (v6 >= 5)
    {
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      goto LABEL_86;
    }
    return 1;
  }
  if (v9 == 1 && v10 == 2 || v9 == 2 && v10 == 1)
  {
    if (v6 >= 4)
    {
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      goto LABEL_86;
    }
    return 1;
  }
  if (v9 == 2 && v10 == 2)
  {
    if (v6 < 3)
      return 1;
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    goto LABEL_86;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
LABEL_82:
    ZinAneTd<6u>::ValidateOCGSizes(result, v33, v34, v35, v36, v37, v38, v39);
    return 0;
  }
  return result;
}

uint64_t ZinValidateTd<4u>::Test(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int HasWorkUnitWidthOf8;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t WUCost;
  _BOOL8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  _BOOL8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BOOL8 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL8 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BOOL8 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BOOL8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL8 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BOOL8 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _BOOL8 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BOOL8 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _BOOL8 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _BOOL8 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _BOOL8 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL8 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BOOL8 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BOOL8 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _BOOL8 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _BOOL8 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _BOOL8 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  _BOOL8 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  _BOOL8 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _BOOL8 v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _BOOL8 v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _BOOL8 v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _BOOL8 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  __int16 v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _BOOL8 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _BOOL8 v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _BOOL8 v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _BOOL8 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _BOOL4 v361;
  _BOOL8 v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  _BOOL8 v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _BOOL8 v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _BOOL8 v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  _BOOL8 v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _BOOL8 v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _BOOL8 v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _BOOL8 v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _BOOL8 v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  _BOOL8 v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _BOOL8 v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  _BOOL8 v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  _BOOL8 v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  _BOOL8 v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _BOOL8 v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  _BOOL8 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  _BOOL8 v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  _BOOL8 v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  _BOOL8 v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  unint64_t v519;
  float v520;
  BOOL v521;
  uint64_t v522;
  _BOOL8 v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  char v534;
  uint64_t v535;
  BOOL v536;
  uint64_t v537;
  _BOOL8 v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  _BOOL8 v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  _BOOL8 v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  char v563;
  _BOOL8 v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  _BOOL8 v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  _BOOL8 v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  int v589;
  __int16 v590;
  __int16 v591;
  __int16 v592;
  __int16 v593;
  uint64_t v594;
  uint64_t v595;
  unsigned int v596;
  int v597;
  unsigned int v598;
  unsigned int v599;
  char v600;
  char v601;
  unsigned int v602;
  unsigned int v603;
  uint64_t v604;
  unint64_t v605;
  int v606;
  int v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  _QWORD v612[5];

  v612[3] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a3 + 92);
  v4 = (v3 >> 8) & 7;
  v5 = (v3 >> 12) & 7;
  if (v5 > v4)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinValidateTd<4u>::Test(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  v14 = (v3 >> 16) & 7;
  if (v5 > v14)
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinValidateTd<4u>::Test(v15, v16, v17, v18, v19, v20, v21, v22);
    return 3;
  }
  if (v4 > v14)
  {
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinValidateTd<4u>::Test(v23, v24, v25, v26, v27, v28, v29, v30);
    return 3;
  }
  v32 = *(_DWORD *)(a3 + 64);
  v33 = v32 & 3;
  if ((v32 & 3) == 3)
  {
    v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v34)
      ZinValidateTd<4u>::Test(v34, v35, v36, v37, v38, v39, v40, v41);
    return 3;
  }
  v44 = *a1;
  v45 = *(unsigned int *)(a3 + 60);
  v46 = *(unsigned int *)(a3 + 76);
  v47 = *(unsigned int *)(a3 + 80);
  v48 = (v46 >> 16) & 0x7FFF;
  v49 = v46 & 0x7FFF;
  v51 = *(_DWORD *)(a3 + 68);
  v50 = *(_DWORD *)(a3 + 72);
  v52 = v47 & 0x1F;
  v53 = (v47 >> 28) & 3;
  v54 = v47 >> 30;
  v55 = *(_DWORD *)(a3 + 84);
  v56 = *(_DWORD *)(a3 + 88) & 0x7FFFLL;
  v57 = *(_DWORD *)(a3 + 184);
  v58 = *(_DWORD *)(a3 + 260);
  v59 = (v3 >> 2) & 1;
  v61 = *(_DWORD *)(a3 + 212);
  v60 = *(_DWORD *)(a3 + 216);
  v62 = dword_207AB0BD8[v33];
  if ((v3 & 4) != 0)
  {
    if ((v55 & 0x4000) != 0
      || (_DWORD)v53 != 1
      || (_DWORD)v54 != 1
      || (_DWORD)v4 != 4
      || (_DWORD)v5 != 4
      || (_DWORD)v14 != 4)
    {
      v104 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v104)
        ZinValidateTd<4u>::Test(v104, v105, v106, v107, v108, v109, v110, v111);
      return 3;
    }
    if (v52 >= 9)
    {
      v120 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v120)
        ZinValidateTd<4u>::Test(v120, v121, v122, v123, v124, v125, v126, v127);
      return 3;
    }
    v607 = v55;
    v591 = v61;
    v593 = v60;
    v595 = *a1;
    v597 = v56;
    v609 = v45;
    v611 = v46 & 0x7FFF;
    v599 = v58;
    v601 = v57;
    v588 = v51;
    v589 = v50;
    WUCost = NERasterization::GetWUCost(0x10uLL, 0x10uLL, 0x10uLL, v56, (v3 >> 2) & 1, 0, v49, v48, 0, 0, v62, *a1);
    v59 = (v3 >> 2) & 1;
    LOWORD(v61) = v591;
    LOWORD(v60) = v593;
    v51 = v588;
    v50 = v589;
    v55 = v607;
    v45 = v609;
    v53 = (v47 >> 28) & 3;
    v52 = v47 & 0x1F;
    v49 = v611;
    LODWORD(v33) = v32 & 3;
    v54 = v47 >> 30;
    v58 = v599;
    LOBYTE(v57) = v601;
    v44 = v595;
    LODWORD(v56) = v597;
    if (WUCost != 1)
    {
      v77 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v77)
        ZinValidateTd<4u>::Test(v77, v78, v79, v80, v81, v82, v83, v84);
      return 3;
    }
  }
  v608 = v45;
  v603 = v54;
  v604 = v53;
  v598 = v58;
  v600 = v57;
  v596 = v56;
  v63 = v32 & 0x30;
  v602 = v33;
  if ((_DWORD)v33 == 2 && v63 != 32)
  {
    v590 = v61;
    v592 = v60;
    v605 = v52;
    v606 = v55;
    v64 = v62;
    v594 = v44;
    v610 = v49;
    v65 = v50;
    v66 = v51;
    HasWorkUnitWidthOf8 = NERasterization::HasWorkUnitWidthOf8(v44, v64, 1 << (BYTE2(v3) & 7), 1 << v5, 1 << v4, v59, 0, v48, v49, 0, 0);
    LOWORD(v61) = v590;
    LOWORD(v60) = v592;
    v51 = v66;
    v50 = v65;
    v52 = v605;
    v55 = v606;
    v49 = v610;
    v44 = v594;
    if (HasWorkUnitWidthOf8)
    {
      v68 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v68)
        ZinValidateTd<4u>::Test(v68, v69, v70, v71, v72, v73, v74, v75);
      return 3;
    }
  }
  v85 = (v47 >> 12) & 7;
  v86 = *(_QWORD *)&v51 & 0x1FFFFLL;
  v87 = (v47 >> 6) & 0x1F;
  v88 = *(_QWORD *)&v50 & 0x1FFFFLL;
  v89 = (v47 >> 16) & 3;
  v90 = (v47 >> 18) & 3;
  v91 = (v47 >> 20) & 0xF;
  v92 = (v47 >> 24) & 0xF;
  v93 = v55 & 0x1FFF;
  v94 = v60 & 7;
  v95 = HIWORD(v55);
  if ((v61 & 0x400) != 0)
  {
    if (v93 <= 1)
    {
      v128 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v128)
        ZinValidateTd<4u>::Test(v128, v129, v130, v131, v132, v133, v134, v135);
      return 3;
    }
    if ((v60 & 7) != 0)
    {
      v112 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v112)
        ZinValidateTd<4u>::Test(v112, v113, v114, v115, v116, v117, v118, v119);
      return 3;
    }
    if ((*(_DWORD *)(a3 + 216) & 0x4018) == 8)
    {
      v136 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v136)
        ZinValidateTd<4u>::Test(v136, v137, v138, v139, v140, v141, v142, v143);
      return 3;
    }
    goto LABEL_174;
  }
  if (v94 != 1)
  {
    if (v94 != 2)
      goto LABEL_174;
    if (v86 != 2 * v88)
    {
      v144 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v144)
        ZinValidateTd<4u>::Test(v144, v145, v146, v147, v148, v149, v150, v151);
      return 3;
    }
    if (v85)
    {
      v96 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v96)
        return 3;
LABEL_37:
      ZinValidateTd<17u>::Test(v96, v97, v98, v99, v100, v101, v102, v103);
      return 3;
    }
    if ((_DWORD)v52 == 1)
    {
      if ((_DWORD)v87 == 1)
      {
        if ((_DWORD)v89 == 1)
        {
          if ((_DWORD)v90 == 1)
          {
            if ((_DWORD)v91)
            {
              v160 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v160)
                return 3;
LABEL_65:
              ZinValidateTd<17u>::Test(v160, v161, v162, v163, v164, v165, v166, v167);
              return 3;
            }
            if ((_DWORD)v92)
            {
              v200 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v200)
                return 3;
LABEL_91:
              ZinValidateTd<17u>::Test(v200, v201, v202, v203, v204, v205, v206, v207);
              return 3;
            }
            if ((_DWORD)v604 == 1)
            {
              if (v603 == 1)
              {
                if ((v55 & 0x4000) == 0)
                {
                  v208 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v208)
                    return 3;
LABEL_99:
                  ZinValidateTd<10u>::Test(v208, v209, v210, v211, v212, v213, v214, v215);
                  return 3;
                }
                if (HIWORD(v55) != 2)
                {
                  v240 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (v240)
                    ZinValidateTd<4u>::Test(v240, v241, v242, v243, v244, v245, v246, v247);
                  return 3;
                }
                if ((v3 & 4) == 0)
                {
                  if (((*(_DWORD *)(a3 + 212) ^ *(_DWORD *)(a3 + 64)) & 3) != 0)
                  {
                    v232 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v232)
                      return 3;
LABEL_117:
                    ZinValidateTd<17u>::Test(v232, v233, v234, v235, v236, v237, v238, v239);
                    return 3;
                  }
                  if ((v60 & 8) == 0)
                  {
                    v264 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v264)
                      return 3;
LABEL_133:
                    ZinValidateTd<6u>::Test(v264, v265, v266, v267, v268, v269, v270, v271);
                    return 3;
                  }
                  if ((v60 & 0x10) == 0)
                  {
                    if ((v60 & 0x4000) == 0)
                    {
                      v272 = *(_DWORD *)(a3 + 88) & 0x7FFF;
                      if (v272 != 1)
                        v272 = v48 % v272 == 1;
                      if (!(_DWORD)v14)
                        v272 = 1;
                      if ((_DWORD)v5 || !v272)
                        goto LABEL_174;
                      if (v602 <= 1)
                      {
                        if (v49 % *(_QWORD *)(v44 + 1864) <= *(_QWORD *)(v44 + 1856))
                        {
                          v273 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (!v273)
                            return 3;
LABEL_148:
                          ZinValidateTd<6u>::Test(v273, v274, v275, v276, v277, v278, v279, v280);
                          return 3;
                        }
                        goto LABEL_174;
                      }
                      if (v49 % *(_QWORD *)(v44 + 1856) > *(_QWORD *)(v44 + 1872))
                        goto LABEL_174;
                      v298 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (!v298)
                        return 3;
LABEL_171:
                      ZinValidateTd<10u>::Test(v298, v299, v300, v301, v302, v303, v304, v305);
                      return 3;
                    }
                    v290 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v290)
                      return 3;
LABEL_166:
                    ZinValidateTd<6u>::Test(v290, v291, v292, v293, v294, v295, v296, v297);
                    return 3;
                  }
                  v282 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v282)
                    return 3;
LABEL_162:
                  ZinValidateTd<6u>::Test(v282, v283, v284, v285, v286, v287, v288, v289);
                  return 3;
                }
                v256 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v256)
                  return 3;
LABEL_128:
                ZinValidateTd<10u>::Test(v256, v257, v258, v259, v260, v261, v262, v263);
                return 3;
              }
              v224 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v224)
                return 3;
LABEL_110:
              ZinValidateTd<17u>::Test(v224, v225, v226, v227, v228, v229, v230, v231);
              return 3;
            }
            v216 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!v216)
              return 3;
LABEL_106:
            ZinValidateTd<17u>::Test(v216, v217, v218, v219, v220, v221, v222, v223);
            return 3;
          }
          v192 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v192)
            return 3;
LABEL_86:
          ZinValidateTd<17u>::Test(v192, v193, v194, v195, v196, v197, v198, v199);
          return 3;
        }
        v184 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v184)
          return 3;
LABEL_82:
        ZinValidateTd<17u>::Test(v184, v185, v186, v187, v188, v189, v190, v191);
        return 3;
      }
      v176 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v176)
        return 3;
LABEL_78:
      ZinValidateTd<17u>::Test(v176, v177, v178, v179, v180, v181, v182, v183);
      return 3;
    }
    v168 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v168)
      return 3;
LABEL_74:
    ZinValidateTd<17u>::Test(v168, v169, v170, v171, v172, v173, v174, v175);
    return 3;
  }
  if ((_DWORD)v86 != (_DWORD)v88)
  {
    v152 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v152)
      ZinValidateTd<10u>::Test(v152, v153, v154, v155, v156, v157, v158, v159);
    return 3;
  }
  if (v85)
  {
    v96 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v96)
      return 3;
    goto LABEL_37;
  }
  if ((_DWORD)v52 != 1)
  {
    v168 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v168)
      return 3;
    goto LABEL_74;
  }
  if ((_DWORD)v87 != 1)
  {
    v176 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v176)
      return 3;
    goto LABEL_78;
  }
  if ((_DWORD)v89 != 1)
  {
    v184 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v184)
      return 3;
    goto LABEL_82;
  }
  if ((_DWORD)v90 != 1)
  {
    v192 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v192)
      return 3;
    goto LABEL_86;
  }
  if ((_DWORD)v91)
  {
    v160 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v160)
      return 3;
    goto LABEL_65;
  }
  if ((_DWORD)v92)
  {
    v200 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v200)
      return 3;
    goto LABEL_91;
  }
  if ((_DWORD)v604 != 1)
  {
    v216 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v216)
      return 3;
    goto LABEL_106;
  }
  if (v603 != 1)
  {
    v224 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v224)
      return 3;
    goto LABEL_110;
  }
  if ((v55 & 0x4000) == 0)
  {
    v208 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v208)
      return 3;
    goto LABEL_99;
  }
  if (HIWORD(v55) != 1)
  {
    v248 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v248)
      ZinValidateTd<4u>::Test(v248, v249, v250, v251, v252, v253, v254, v255);
    return 3;
  }
  if ((v3 & 4) != 0)
  {
    v256 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v256)
      return 3;
    goto LABEL_128;
  }
  if (((*(_DWORD *)(a3 + 212) ^ *(_DWORD *)(a3 + 64)) & 3) != 0)
  {
    v232 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v232)
      return 3;
    goto LABEL_117;
  }
  if ((v60 & 8) == 0)
  {
    v264 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v264)
      return 3;
    goto LABEL_133;
  }
  if ((v60 & 0x10) != 0)
  {
    v282 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v282)
      return 3;
    goto LABEL_162;
  }
  if ((v60 & 0x4000) != 0)
  {
    v290 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v290)
      return 3;
    goto LABEL_166;
  }
  v281 = *(_DWORD *)(a3 + 88) & 0x7FFF;
  if (v281 != 1)
    v281 = v48 % v281 == 1;
  if (!(_DWORD)v14)
    v281 = 1;
  if ((_DWORD)v5 || !v281)
    goto LABEL_174;
  if (v602 > 1)
  {
    if (v49 % *(_QWORD *)(v44 + 1856) > *(_QWORD *)(v44 + 1872))
      goto LABEL_174;
    v298 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v298)
      return 3;
    goto LABEL_171;
  }
  if (v49 % *(_QWORD *)(v44 + 1864) <= *(_QWORD *)(v44 + 1856))
  {
    v273 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v273)
      return 3;
    goto LABEL_148;
  }
LABEL_174:
  if (v91 >= v52 || *(_QWORD *)(v44 + 144) < v91)
  {
    v306 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v306)
      ZinValidateTd<4u>::Test(v306, v307, v308, v309, v310, v311, v312, v313);
    return 3;
  }
  if (v92 >= v87 || *(_QWORD *)(v44 + 152) < v92)
  {
    v314 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v314)
      ZinValidateTd<4u>::Test(v314, v315, v316, v317, v318, v319, v320, v321);
    return 3;
  }
  v322 = v55;
  v323 = ((int)v49 - 1) * (uint64_t)(int)v89 - v91;
  if (v323 >= (int64_t)(v608 & 0x7FFF))
  {
    v334 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v334)
      ZinValidateTd<4u>::Test(v334, v335, v336, v337, v338, v339, v340, v341);
    return 3;
  }
  v324 = (v608 >> 16) & 0x7FFF;
  v325 = ((int)v48 - 1) * (uint64_t)(int)v90 - v92;
  if (v325 >= v324)
  {
    v342 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v342)
      ZinValidateTd<4u>::Test(v342, v343, v344, v345, v346, v347, v348, v349);
    return 3;
  }
  if ((uint64_t)(v323 + ((v52 + v89 - 1) & -v89)) < (int64_t)(v608 & 0x7FFF))
  {
    v326 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v326)
      ZinValidateTd<6u>::Test(v326, v327, v328, v329, v330, v331, v332, v333);
    return 3;
  }
  if ((uint64_t)(v325 + ((v90 + v87 - 1) & -v90)) < v324)
  {
    v350 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v350)
      ZinValidateTd<6u>::Test(v350, v351, v352, v353, v354, v355, v356, v357);
    return 3;
  }
  v358 = v44;
  v359 = (v3 >> 19) & 7;
  if ((v322 & 0x4000) != 0)
  {
    v370 = v86 / v95;
    if (v86 % v95)
    {
      v371 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v371)
        ZinValidateTd<4u>::Test(v371, v372, v373, v374, v375, v376, v377, v378);
      return 3;
    }
    v387 = v88 / v370;
    if (v88 % v370)
    {
      v388 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v388)
        ZinValidateTd<4u>::Test(v388, v389, v390, v391, v392, v393, v394, v395);
      return 3;
    }
    if (v387 > 1 << v85)
    {
      v396 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v396)
        ZinValidateTd<4u>::Test(v396, v397, v398, v399, v400, v401, v402, v403);
      return 3;
    }
    if (v387 < 1 << v85 && v387 << v359 < (unint64_t)v88)
    {
      v476 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v476)
        ZinValidateTd<4u>::Test(v476, v477, v478, v479, v480, v481, v482, v483);
      return 3;
    }
    if (v85 && (v370 & ((1 << v359) + 0x1FFFF)) != 0)
    {
      v494 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v494)
        ZinValidateTd<4u>::Test(v494, v495, v496, v497, v498, v499, v500, v501);
      return 3;
    }
  }
  v361 = (_DWORD)v89 == 2 && (_DWORD)v604 == 2;
  if (v602 == 2)
  {
    if (v361)
    {
      if (*(_QWORD *)(v44 + 80) >= v52)
      {
        if (*(_QWORD *)(v44 + 72) > v52)
        {
          v412 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v412)
            ZinValidateTd<4u>::Test(v412, v413, v414, v415, v416, v417, v418, v419);
          return 3;
        }
        goto LABEL_241;
      }
      v379 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v379)
        return 3;
    }
    else
    {
      if ((_DWORD)v89 != 2 || (_DWORD)v604 != 1)
      {
        if (*(_QWORD *)(v44 + 88) < v52)
        {
          v428 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v428)
            ZinValidateTd<4u>::Test(v428, v429, v430, v431, v432, v433, v434, v435);
          return 3;
        }
        goto LABEL_241;
      }
      if (*(_QWORD *)(v44 + 80) >= v52)
        goto LABEL_241;
      v379 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v379)
        return 3;
    }
    ZinValidateTd<6u>::Test(v379, v380, v381, v382, v383, v384, v385, v386);
    return 3;
  }
  if (v361)
  {
    if (*(_QWORD *)(v44 + 56) < v52)
    {
      v362 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v362)
        return 3;
LABEL_205:
      ZinValidateTd<6u>::Test(v362, v363, v364, v365, v366, v367, v368, v369);
      return 3;
    }
    if (*(_QWORD *)(v44 + 48) > v52)
    {
      v404 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v404)
        ZinValidateTd<6u>::Test(v404, v405, v406, v407, v408, v409, v410, v411);
      return 3;
    }
  }
  else if ((_DWORD)v89 == 2 && (_DWORD)v604 == 1)
  {
    if (*(_QWORD *)(v44 + 56) < v52)
    {
      v362 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v362)
        return 3;
      goto LABEL_205;
    }
  }
  else if (*(_QWORD *)(v44 + 64) < v52)
  {
    v420 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v420)
      ZinValidateTd<4u>::Test(v420, v421, v422, v423, v424, v425, v426, v427);
    return 3;
  }
LABEL_241:
  if ((_DWORD)v90 == 2 && v603 == 2)
  {
    if (*(_QWORD *)(v44 + 104) < v87)
    {
      v436 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v436)
        return 3;
LABEL_245:
      ZinValidateTd<6u>::Test(v436, v437, v438, v439, v440, v441, v442, v443);
      return 3;
    }
    if (*(_QWORD *)(v44 + 96) > v87)
    {
      v444 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v444)
        ZinValidateTd<6u>::Test(v444, v445, v446, v447, v448, v449, v450, v451);
      return 3;
    }
  }
  else if ((_DWORD)v90 == 2 && v603 == 1)
  {
    if (*(_QWORD *)(v44 + 104) < v87)
    {
      v436 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v436)
        return 3;
      goto LABEL_245;
    }
  }
  else if (*(_QWORD *)(v44 + 112) < v87)
  {
    v452 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v452)
      ZinValidateTd<4u>::Test(v452, v453, v454, v455, v456, v457, v458, v459);
    return 3;
  }
  if (v604 * (unint64_t)v49 > *(_QWORD *)(v44 + 320))
  {
    v460 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v460)
      ZinValidateTd<4u>::Test(v460, v461, v462, v463, v464, v465, v466, v467);
    return 3;
  }
  if (v603 * (unint64_t)v48 > *(_QWORD *)(v44 + 336))
  {
    v468 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v468)
      ZinValidateTd<4u>::Test(v468, v469, v470, v471, v472, v473, v474, v475);
    return 3;
  }
  v484 = (v90 * v86 * v89) * (unint64_t)v93;
  v485 = *(_QWORD *)(v44 + 368);
  if (v484 > v485)
  {
    v486 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v486)
      ZinValidateTd<6u>::Test(v486, v487, v488, v489, v490, v491, v492, v493);
    return 3;
  }
  if (v603 * v88 * v604 * (unint64_t)v93 > v485)
  {
    v502 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v502)
      ZinValidateTd<6u>::Test(v502, v503, v504, v505, v506, v507, v508, v509);
    return 3;
  }
  if ((v600 & 8) != 0)
  {
    v518 = v598 & 3;
    v519 = HIBYTE(v598) & 0xF;
    v520 = 1.0;
    if (v518 == 1)
      v520 = 2.0;
    if (v518 == 2)
      v520 = 1.25;
    v521 = v518 == 1 && v63 == 32;
    v612[0] = 0x100u >> v5;
    v612[1] = 0x100u >> (BYTE2(v3) & 7);
    v612[2] = 0x100u >> v4;
    if (v521)
      v520 = 2.0;
    if (v602 == 2)
      v522 = 2;
    else
      v522 = 1;
    if (!*(_BYTE *)(v44 + 1313) || (_DWORD)v519 != 3)
    {
      v531 = 0;
      while ((uint64_t)(((uint64_t)(float)(v520 * (float)(v612[v531] / v522 * v604)) * v519) & 0x800000000000003FLL) < 1)
      {
        if (++v531 == 3)
        {
          v532 = (1 << v359 << v85);
          if (v93 == 1
            && ((unint64_t)(v532 - 1) + v88) >> (v359 + v85) == 1)
          {
            goto LABEL_278;
          }
          v533 = 0;
          v534 = 1;
          v535 = 4;
          do
          {
            if ((*(_QWORD *)&v534 & (v598 >> 28)) != 0)
              ++v533;
            v534 *= 2;
            --v535;
          }
          while (v535);
          v536 = v519 >= v533;
          v537 = v519 - v533;
          if (v537 != 0 && v536)
          {
            if (v532 % v537)
            {
              v538 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v538)
                ZinValidateTd<4u>::Test(v538, v539, v540, v541, v542, v543, v544, v545);
            }
            else
            {
              if (!(v88 % v537))
                goto LABEL_278;
              v580 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v580)
                ZinValidateTd<4u>::Test(v580, v581, v582, v583, v584, v585, v586, v587);
            }
          }
          else
          {
            v572 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v572)
              ZinValidateTd<6u>::Test(v572, v573, v574, v575, v576, v577, v578, v579);
          }
          return 3;
        }
      }
    }
    v523 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v523)
      ZinValidateTd<17u>::Test(v523, v524, v525, v526, v527, v528, v529, v530);
    return 3;
  }
LABEL_278:
  if ((*(_BYTE *)(a3 + 262) & 7) != 0)
  {
    v510 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v510)
      ZinValidateTd<6u>::Test(v510, v511, v512, v513, v514, v515, v516, v517);
    return 3;
  }
  if (!v596)
  {
    v554 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v554)
      ZinValidateTd<6u>::Test(v554, v555, v556, v557, v558, v559, v560, v561);
    return 3;
  }
  if (v596 > v48)
  {
    v546 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v546)
      ZinValidateTd<6u>::Test(v546, v547, v548, v549, v550, v551, v552, v553);
    return 3;
  }
  v562 = *(_DWORD *)(a3 + 212);
  if ((v562 & 3) == 2)
    v563 = v562 >> 4;
  else
    v563 = (v562 >> 4) + 1;
  if (*(_QWORD *)(v44 + 488) < (unint64_t)(1 << v563))
  {
    v564 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v564)
      ZinValidateTd<4u>::Test(v564, v565, v566, v567, v568, v569, v570, v571);
    return 3;
  }
  result = ZinValidateTd<4u>::CheckKMEMBufferSizes(v44, a3);
  if (!(_DWORD)result)
    return ZinValidateTd<6u>::CheckInRangeDmaAccess(v358, a2, a3);
  return result;
}

uint64_t ZinValidateTd<4u>::CheckKernelRewind(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  char v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == a1)
    return 0;
  LOBYTE(v2) = 0;
  while (1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 200);
    v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x4000) != 0)
      break;
LABEL_8:
    v2 = (v4 >> 12) & 1;
    v1 = *(_QWORD *)(v1 + 8);
    if (v1 == a1)
      return 0;
  }
  if ((v2 & 1) != 0)
  {
    v5 = 1 << (((unint64_t)*(unsigned int *)(v3 + 100) >> 19) & 7);
    v6 = (char *)(*(_QWORD *)(v3 + 40) + 4);
    while (1)
    {
      v7 = *v6;
      v6 += 24;
      if ((v7 & 1) != 0)
        break;
      if (!--v5)
        goto LABEL_8;
    }
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinValidateTd<6u>::CheckKernelRewind(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinValidateTd<4u>::CheckKernelRewind(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  return 3;
}

uint64_t ZinValidateTd<4u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  void *__p[3];

  v4 = (*(_DWORD *)(a2 + 92) >> 19) & 7;
  v5 = (1 << ((*(_DWORD *)(a2 + 92) >> 19) & 7));
  v6 = *(_DWORD *)(a2 + 212);
  v7 = *(int *)(a1 + 8);
  v42 = 0;
  std::vector<unsigned long>::vector(__p, v7, &v42);
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = (unint64_t *)__p[0];
  v11 = (unsigned int *)(v9 + 12);
  do
  {
    v12 = *v11;
    v11 += 6;
    v10[v8++] = ((unint64_t)v12 >> 6) & 0x7FF;
  }
  while (v5 != v8);
  v13 = *(int *)(a1 + 8);
  if (v5 < v13)
  {
    v14 = v13 - v5;
    v15 = (char *)(v9 + 24 * v5 + 4);
    while (1)
    {
      v16 = *v15;
      v15 += 24;
      if ((v16 & 1) != 0)
        break;
      if (!--v14)
        goto LABEL_7;
    }
    v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v25)
      ZinValidateTd<6u>::CheckKernelRewind(v25, v26, v27, v28, v29, v30, v31, v32);
    goto LABEL_19;
  }
LABEL_7:
  v17 = 0;
  if ((v6 & 0x100) == 0 && v4)
  {
    v18 = 2;
    if (v5 > 2)
      v18 = v5;
    v21 = *v10;
    v19 = v10 + 1;
    v20 = v21;
    v22 = v18 - 1;
    while (1)
    {
      v24 = *v19++;
      v23 = v24;
      if (v24 > v20)
        break;
      v20 = v23;
      if (!--v22)
      {
        v17 = 0;
        goto LABEL_20;
      }
    }
    v33 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v33)
      ZinValidateTd<4u>::CheckKMEMBufferSizes(v33, v34, v35, v36, v37, v38, v39, v40);
LABEL_19:
    v17 = 3;
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v17;
}

void ZinIrCodegenHandleTds<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Out of memory during network codegen\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Invalid TD exists\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Error during network codegen\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrCodegenHandleTdsMakeList<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ZinIrContextSwitchValidator failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Instruction offset could not be calculated\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrCodegenValidateTds<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation kernel rewind check failure.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrContextSwitchValidator<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "DMA dependency bit set without an RDMA.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Cannot have a pending L2 alias errata resolution when outside a context switch IN sequence", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void SetTensorKernelDependency<4u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "invalid hw td_header\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::HandleCommonMACBypassMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing mir_info in NE Bypass layer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::HandleCommonPoolOpcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing Mir Info in NEPool layer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::HandleCommonConvOpcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing mir info in a NE conv layer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::HandleTileDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Internal Error: kANECNetNetworkStatus_TileDMASourceAllocationFailure - stride not aligned\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid Bar id\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "RDMA Src should be in DRAM\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid context switch mode\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Oplayer shouldn't have more than 2 inputs at codegen\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::HandleL2Config(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Output missing L2 location\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Max/Min Pooling should always be used with negative/positive padding mode.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid Padding mode for Conv\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::HandleNEConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "HandleNEConfigRCASCfg failed./n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed to set NE Round Cfg registers", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unknown RCAS Direction.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::HandleTileDmaDstConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Internal Error: ZinIrCodegenHandleTileDmaDstConfig - stride not aligned", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Stride should be greater than zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::HandleEngineLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Oplayer does not have ANE kernel info\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<4u>::ValidateOCGSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "unexpected format\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinValidateTd<4u>::Test(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<4u>::CheckKernelRewind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<4u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

uint64_t ZinIrCodegenHandleTds<5u>(uint64_t **a1, unsigned int a2, uint64_t a3, unsigned int *a4, CFArrayRef *a5)
{
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *j;
  ZinAneInstruction *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type size;
  std::string *v45;
  __int128 v46;
  std::string *p_p;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  int v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  uint64_t v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  void **v61;
  std::string::size_type v62;
  std::string *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  const std::string::value_type *v67;
  uint64_t v68;
  const std::string::value_type *v69;
  int v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  char v75;
  char *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _DWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t *i;
  ZinAneInstruction *v98;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t *v104;
  _BYTE v105[32];
  __int128 v106;
  void *v107[2];
  unsigned __int8 v108;
  std::string __p;
  std::string v110;
  std::string v111;
  std::string v112;
  __int128 v113;
  std::string::size_type v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  _QWORD v118[5];

  v118[2] = *MEMORY[0x24BDAC8D0];
  v115 = (uint64_t)&v115;
  v116 = &v115;
  v117 = 0;
  v8 = ZinIrCodegenHandleTdsMakeList<5u>(a1, a2, a3, &v115, (uint64_t)a4, a5);
  if ((_DWORD)v8)
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinIrCodegenHandleTds<4u>(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    v17 = *a4;
    if ((_DWORD)v17)
    {
      v18 = (char *)malloc_type_calloc(v17, 4uLL, 0x100004052888210uLL);
      if (v18)
      {
        v8 = ZinIrCodegenValidateTds<5u>(*a1, (uint64_t)a1[3], (uint64_t)&v115);
        if ((_DWORD)v8)
        {
          v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v19)
            ZinIrCodegenHandleTds<4u>(v19, v20, v21, v22, v23, v24, v25, v26);
          free(v18);
        }
        else
        {
          ZinIrMemoryPool::GetSections((uint64_t)a1[3], 1, v105);
          v37 = *(_QWORD *)(*(_QWORD *)&v105[8] + 16);
          std::__list_imp<ZinIrSection *>::clear(v105);
          v38 = v116;
          if (v116 != &v115)
          {
            v102 = 8 - (_QWORD)v18;
            v100 = v18;
            v101 = 144 - (_QWORD)v18;
            do
            {
              v39 = (uint64_t *)v38[1];
              if (v39 == &v115)
                v40 = 0;
              else
                v40 = v39[2];
              v41 = v38[2];
              v42 = *(_QWORD *)(v41 + 200);
              std::string::basic_string[abi:ne180100]<0>(&v111, "__nid0__tid");
              std::to_string(&v110, *(unsigned __int16 *)(v42 + 8));
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v43 = &v110;
              else
                v43 = (std::string *)v110.__r_.__value_.__r.__words[0];
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
              else
                size = v110.__r_.__value_.__l.__size_;
              v45 = std::string::append(&v111, (const std::string::value_type *)v43, size);
              v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v112.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&__p, "__");
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              else
                v48 = __p.__r_.__value_.__l.__size_;
              v49 = std::string::append(&v112, (const std::string::value_type *)p_p, v48);
              v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
              *(_QWORD *)&v105[16] = *((_QWORD *)&v49->__r_.__value_.__l + 2);
              *(_OWORD *)v105 = v50;
              v49->__r_.__value_.__l.__size_ = 0;
              v49->__r_.__value_.__r.__words[2] = 0;
              v49->__r_.__value_.__r.__words[0] = 0;
              v51 = *(char *)(v41 + 183);
              if (v51 >= 0)
                v52 = (const std::string::value_type *)(v41 + 160);
              else
                v52 = *(const std::string::value_type **)(v41 + 160);
              if (v51 >= 0)
                v53 = *(unsigned __int8 *)(v41 + 183);
              else
                v53 = *(_QWORD *)(v41 + 168);
              v54 = std::string::append((std::string *)v105, v52, v53);
              v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v114 = v54->__r_.__value_.__r.__words[2];
              v113 = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              if ((v105[23] & 0x80000000) != 0)
                operator delete(*(void **)v105);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v112.__r_.__value_.__l.__data_);
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v110.__r_.__value_.__l.__data_);
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v111.__r_.__value_.__l.__data_);
              memset(&v112, 0, sizeof(v112));
              if (v40)
              {
                v56 = *(_QWORD *)(v40 + 200);
                std::string::basic_string[abi:ne180100]<0>(&v110, "__nid0__tid");
                std::to_string(&__p, *(unsigned __int16 *)(v56 + 8));
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v57 = &__p;
                else
                  v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  v58 = __p.__r_.__value_.__l.__size_;
                v59 = std::string::append(&v110, (const std::string::value_type *)v57, v58);
                v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
                v111.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v60;
                v59->__r_.__value_.__l.__size_ = 0;
                v59->__r_.__value_.__r.__words[2] = 0;
                v59->__r_.__value_.__r.__words[0] = 0;
                std::string::basic_string[abi:ne180100]<0>(v107, "__");
                if ((v108 & 0x80u) == 0)
                  v61 = v107;
                else
                  v61 = (void **)v107[0];
                if ((v108 & 0x80u) == 0)
                  v62 = v108;
                else
                  v62 = (std::string::size_type)v107[1];
                v63 = std::string::append(&v111, (const std::string::value_type *)v61, v62);
                v64 = v18;
                v65 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                *(_QWORD *)&v105[16] = *((_QWORD *)&v63->__r_.__value_.__l + 2);
                *(_OWORD *)v105 = v65;
                v63->__r_.__value_.__l.__size_ = 0;
                v63->__r_.__value_.__r.__words[2] = 0;
                v63->__r_.__value_.__r.__words[0] = 0;
                v66 = v40;
                v69 = *(const std::string::value_type **)(v40 + 160);
                v68 = v40 + 160;
                v67 = v69;
                v70 = *(char *)(v68 + 23);
                if (v70 >= 0)
                  v71 = (const std::string::value_type *)v68;
                else
                  v71 = v67;
                if (v70 >= 0)
                  v72 = *(unsigned __int8 *)(v68 + 23);
                else
                  v72 = *(_QWORD *)(v68 + 8);
                v73 = std::string::append((std::string *)v105, v71, v72);
                v74 = v73->__r_.__value_.__r.__words[0];
                v118[0] = v73->__r_.__value_.__l.__size_;
                *(_QWORD *)((char *)v118 + 7) = *(std::string::size_type *)((char *)&v73->__r_.__value_.__r.__words[1]
                                                                          + 7);
                v75 = HIBYTE(v73->__r_.__value_.__r.__words[2]);
                v73->__r_.__value_.__l.__size_ = 0;
                v73->__r_.__value_.__r.__words[2] = 0;
                v73->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v112.__r_.__value_.__l.__data_);
                v112.__r_.__value_.__r.__words[0] = v74;
                v112.__r_.__value_.__l.__size_ = v118[0];
                *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v118 + 7);
                *((_BYTE *)&v112.__r_.__value_.__s + 23) = v75;
                if ((v105[23] & 0x80000000) != 0)
                  operator delete(*(void **)v105);
                v40 = v66;
                if ((char)v108 < 0)
                  operator delete(v107[0]);
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v111.__r_.__value_.__l.__data_);
                v18 = v64;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v110.__r_.__value_.__l.__data_);
              }
              v76 = &v18[*(_DWORD *)(v41 + 184) & 0xFFFFFFFC];
              *(_DWORD *)v76 = *(_DWORD *)(v42 + 8);
              *((_DWORD *)v76 + 1) = *(_DWORD *)(v42 + 12);
              *((_DWORD *)v76 + 2) = *(_DWORD *)(v42 + 16);
              *((_DWORD *)v76 + 3) = *(_DWORD *)(v42 + 20);
              *((_DWORD *)v76 + 4) = *(_DWORD *)(v42 + 24);
              if (v40)
                AddRelocation((uint64_t)&v112, v37, v76 + 20 - v18, 0, a1[7]);
              v104 = v38;
              *((_DWORD *)v76 + 5) = *(_DWORD *)(v42 + 28);
              *((_DWORD *)v76 + 6) = *(_DWORD *)(v42 + 32);
              if ((*(_BYTE *)(v42 + 27) & 1) != 0)
              {
                v77 = v76 + 32;
                *((_DWORD *)v76 + 7) = *(_DWORD *)(v42 + 36);
              }
              else
              {
                v77 = v76 + 28;
              }
              v78 = **a1;
              if (*(_DWORD *)(v78 + 8))
              {
                v79 = 0;
                v80 = 0;
                v81 = (uint64_t)v77 + v102;
                do
                {
                  v82 = (_QWORD *)(*(_QWORD *)(v42 + 40) + v79);
                  v83 = v82[1];
                  *(_QWORD *)v77 = *v82;
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v41 + 8) - *(_QWORD *)v41) >> 3) > v80)
                    AddRelocation(*(_QWORD *)v41 + v79, v37, v81, 0, a1[7]);
                  v84 = v77 + 4;
                  *((_QWORD *)v77 + 1) = v83;
                  ++v80;
                  v79 += 24;
                  v81 += 16;
                  v77 += 4;
                }
                while (v80 < *(unsigned int *)(v78 + 8));
                v77 = v84;
                v18 = v100;
              }
              v85 = *(_OWORD *)(v42 + 80);
              v86 = *(_OWORD *)(v42 + 96);
              *(_OWORD *)v77 = *(_OWORD *)(v42 + 64);
              *((_OWORD *)v77 + 1) = v85;
              *((_OWORD *)v77 + 2) = v86;
              v87 = *(_OWORD *)(v42 + 136);
              *(_OWORD *)v105 = *(_OWORD *)(v42 + 120);
              *(_OWORD *)&v105[16] = v87;
              v106 = *(_OWORD *)(v42 + 152);
              v88 = (char *)(v77 + 14);
              *((_QWORD *)v77 + 6) = *(_QWORD *)v105;
              v89 = **(_QWORD **)(v41 + 128);
              if (v89)
                AddRelocation(v89 + 160, v37, v88 - v18, 0, a1[7]);
              v90 = 0;
              *(_OWORD *)v88 = *(_OWORD *)&v105[8];
              do
              {
                v77[v90 + 18] = *(_DWORD *)&v105[v90 * 4 + 24];
                ++v90;
              }
              while (v90 != 4);
              v91 = *(_OWORD *)(v42 + 184);
              v92 = *(_QWORD *)(v42 + 200);
              *(_OWORD *)(v77 + 22) = *(_OWORD *)(v42 + 168);
              *(_OWORD *)(v77 + 26) = v91;
              *((_QWORD *)v77 + 15) = v92;
              *(_QWORD *)&v91 = *(_QWORD *)(v42 + 232);
              *((_OWORD *)v77 + 8) = *(_OWORD *)(v42 + 216);
              *((_QWORD *)v77 + 18) = v91;
              v93 = *(_OWORD *)(v42 + 256);
              *((_QWORD *)v77 + 19) = *(_QWORD *)(v42 + 248);
              v94 = *(_QWORD *)(v41 + 152);
              if (v94)
              {
                v103 = v93;
                AddRelocation(v94 + 160, v37, (uint64_t)v77 + v101 + 16, 0, a1[7]);
                v93 = v103;
              }
              *((_OWORD *)v77 + 10) = v93;
              v95 = *(unsigned int *)(v41 + 184);
              v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
              AddSymbol((uint64_t)&v113, v37, v95, 4 * v96, a1[7]);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v112.__r_.__value_.__l.__data_);
              if (SHIBYTE(v114) < 0)
                operator delete((void *)v113);
              v38 = (uint64_t *)v104[1];
            }
            while (v38 != &v115);
            for (i = v116; i != &v115; i = (uint64_t *)i[1])
            {
              v98 = (ZinAneInstruction *)i[2];
              if (v98)
              {
                ZinAneInstruction::~ZinAneInstruction(v98);
                MEMORY[0x20BD002F8]();
              }
            }
          }
          v8 = 0;
          *(_QWORD *)(v37 + 24) = v18;
        }
      }
      else
      {
        v27 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v27)
          ZinIrCodegenHandleTds<4u>(v27, v28, v29, v30, v31, v32, v33, v34);
        for (j = v116; j != &v115; j = (uint64_t *)j[1])
        {
          v36 = (ZinAneInstruction *)j[2];
          if (v36)
          {
            ZinAneInstruction::~ZinAneInstruction(v36);
            MEMORY[0x20BD002F8]();
          }
        }
        ZinIrNetworkStatus::SetError(a5, CFSTR("MemoryAllocationFailure"));
        v8 = 3;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v115);
  return v8;
}

void sub_206FC8028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  std::__list_imp<ZinIrSection *>::clear((_QWORD *)(v57 - 160));
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTdsMakeList<5u>(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, CFArrayRef *a6)
{
  uint64_t *v7;
  ZinIrOpLayer **v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer *v20;
  ZinAneInstruction *v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  char v25;
  ZinAneInstruction *v26;
  const std::string *v27;
  ZinIrOpLayer *v28;
  BOOL v29;
  ZinAneInstruction *v30;
  ZinIrOpLayer **v31;
  ZinIrOpLayer **v32;
  _WORD *v33;
  _BOOL4 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  ZinIrOpLayer *v41;
  _QWORD *v42;
  ZinAneInstruction *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  ZinAneInstruction *v61;
  const __CFString *v62;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t j;
  _QWORD *v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  BOOL v93;
  _QWORD *k;
  _BYTE *v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  float *v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  unsigned __int16 *v103;
  unint64_t v104;
  unsigned int v105;
  uint8x8_t v106;
  uint64_t v107;
  uint8x8_t v108;
  unsigned int v109;
  float v110;
  int v111;
  float v112;
  _QWORD *v113;
  _BOOL8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v124;
  ZinIrOpLayer *v127;
  uint64_t v129;
  ZinIrCompilerParameters *v130;
  _BYTE v132[16];
  uint64_t v133;
  ZinIrTensor *v134;
  std::__shared_weak_count *v135;
  _QWORD *v136;
  ZinAneInstruction *v137;
  ZinIrOpLayer *v138;
  void *__p;
  ZinIrOpLayer **v140;
  uint64_t v141;
  _OWORD v142[2];
  int v143;
  _QWORD v144[4];
  int v145;
  uint8_t buf[24];
  __int128 v147;
  char v148;
  uint64_t v149;
  char *v150;
  char *v151;
  _QWORD v152[5];

  v152[2] = *MEMORY[0x24BDAC8D0];
  v7 = a1[4];
  if (a4[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Warning: tds list is already populated\n", buf, 2u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Clearing list contents without explicit deallocation\n", buf, 2u);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(a4);
  v8 = (ZinIrOpLayer **)*v7;
  v9 = (ZinIrOpLayer **)v7[1];
  if ((ZinIrOpLayer **)*v7 == v9)
  {
    v11 = (ZinIrOpLayer **)*v7;
    v10 = (ZinIrOpLayer **)*v7;
  }
  else
  {
    while (!ZinIrOpLayer::IsANELayer(*v8))
    {
      if (++v8 == v9)
      {
        v8 = v9;
        break;
      }
    }
    v10 = v8;
    v8 = (ZinIrOpLayer **)*v7;
    v11 = (ZinIrOpLayer **)v7[1];
  }
  v127 = *v10;
  do
  {
    v12 = v11;
    if (v11 == v8)
      break;
    --v11;
  }
  while (!ZinIrOpLayer::IsANELayer(*(v12 - 1)));
  v13 = *(v12 - 1);
  v129 = **a1;
  v130 = (ZinIrCompilerParameters *)(*a1)[1];
  memset(v144, 0, sizeof(v144));
  v145 = 1065353216;
  memset(v142, 0, sizeof(v142));
  v143 = 1065353216;
  v14 = a1[5];
  v124 = a1[6];
  v16 = *v7;
  v15 = v7[1];
  v122 = (uint64_t)v7;
  v17 = (v15 - *v7) >> 3;
  __p = 0;
  v140 = 0;
  v141 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>,std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>>((char *)&__p, v15, v15, v16, v16, v17);
  v19 = (ZinIrOpLayer **)__p;
  v18 = v140;
  if (__p != v140)
  {
    v20 = 0;
    do
    {
      v138 = 0;
      v138 = *v19;
      if (!ZinIrOpLayer::IsANELayer(v138))
        goto LABEL_49;
      v137 = 0;
      v21 = (ZinAneInstruction *)operator new();
      v22 = (_QWORD *)operator new();
      v23 = *(_DWORD *)(v129 + 8);
      *v22 = &unk_24C027CB0;
      ZinAneTdHw_v6::ZinAneTdHw_v6((ZinAneTdHw_v6 *)(v22 + 1), v23);
      v22[35] = &target_hw_limits_v5;
      v22[37] = 0;
      v136 = v22;
      ZinAneInstruction::ZinAneInstruction(v21, &v136);
      v24 = v136;
      v136 = 0;
      if (v24)
        (*(void (**)(_QWORD *))(*v24 + 8))(v24);
      v137 = v21;
      v25 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v138 + 120))(v138);
      v26 = v137;
      v27 = (const std::string *)v138;
      *((_BYTE *)v137 + 24) = v25;
      std::string::operator=((std::string *)((char *)v26 + 160), v27 + 1);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,ZinAneInstruction *&>((uint64_t)v144, &v138, &v138, (uint64_t *)&v137);
      *(_QWORD *)buf = v138;
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,ZinAneInstruction *&>((uint64_t)v142, &v137, &v137, (uint64_t *)buf);
      v28 = v138;
      v29 = v138 == v13;
      v30 = v137;
      *((_BYTE *)v137 + 199) = v138 == v127;
      *((_BYTE *)v30 + 198) = v29;
      v32 = (ZinIrOpLayer **)*v14;
      v31 = (ZinIrOpLayer **)v14[1];
      if ((ZinIrOpLayer **)*v14 != v31)
      {
        while (*v32 != v28)
        {
          if (++v32 == v31)
          {
            v32 = (ZinIrOpLayer **)v14[1];
            break;
          }
        }
      }
      if (v32 != v31)
      {
        *((_BYTE *)v30 + 198) = 1;
        if (a4[2])
          *(_BYTE *)(*(_QWORD *)(a4[1] + 16) + 199) = 1;
      }
      if (*(_DWORD *)(*((_QWORD *)v28 + 8) + 8) == 82)
      {
        *((_BYTE *)v30 + 188) = 1;
        *((_DWORD *)v30 + 48) = *((_DWORD *)v28 + 98);
      }
      v33 = (_WORD *)*((_QWORD *)v30 + 25);
      v33[4] = *((_QWORD *)v28 + 45);
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v28 + 120))(v28))
      {
        (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v138 + 128))(buf);
        if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(*(ZinIrTensor **)buf) + 12) + 64) + 8) == 28)
        {
          v34 = 0;
        }
        else
        {
          (*(void (**)(ZinIrTensor **__return_ptr))(*(_QWORD *)v138 + 128))(&v134);
          v34 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(v134) + 12) + 64) + 8) != 29;
          v35 = v135;
          if (v135)
          {
            p_shared_owners = (unint64_t *)&v135->__shared_owners_;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
        }
        v38 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
            if (!v34)
              goto LABEL_43;
LABEL_42:
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v137 + 25) + 32))(*((_QWORD *)v137 + 25), 5, 1);
            goto LABEL_43;
          }
        }
        if (v34)
          goto LABEL_42;
      }
LABEL_43:
      v41 = v138;
      if (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *, uint64_t, ZinAneInstruction *, uint64_t, uint64_t **, CFArrayRef *))(**((_QWORD **)v137 + 25) + 320))(*((_QWORD *)v137 + 25), v138, a2, v137, a3, a1, a6) & 1) == 0)
      {
        for (i = a4[1]; (_QWORD *)i != a4; i = *(_QWORD *)(i + 8))
        {
          v61 = *(ZinAneInstruction **)(i + 16);
          if (v61)
          {
            ZinAneInstruction::~ZinAneInstruction(v61);
            MEMORY[0x20BD002F8]();
          }
        }
        if (v137)
        {
          ZinAneInstruction::~ZinAneInstruction(v137);
          MEMORY[0x20BD002F8]();
        }
        std::__list_imp<ZinIrSection *>::clear(a4);
        goto LABEL_72;
      }
      if (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *, _QWORD *, uint64_t *))(**((_QWORD **)v137 + 25) + 360))(*((_QWORD *)v137 + 25), v41, v144, a1[3]) & 1) == 0)
      {
        v62 = CFSTR("CodeGenerationFailure");
LABEL_71:
        ZinIrNetworkStatus::SetError(a6, v62);
        goto LABEL_72;
      }
      (*(void (**)(_WORD *, ZinIrOpLayer *))(*(_QWORD *)v33 + 40))(v33, v138);
      if (v28 != v13
        && !*((_BYTE *)v137 + 188)
        && !(*(unsigned int (**)(_QWORD, uint64_t *, ZinIrOpLayer *, ZinIrOpLayer *, uint64_t *, _QWORD *, _QWORD, _QWORD))(**((_QWORD **)v137 + 25) + 384))(*((_QWORD *)v137 + 25), *a1, v41, v20, v124, v144, *((_QWORD *)v130 + 17), *((_QWORD *)v130 + 18)))
      {
        v62 = CFSTR("MemoryDependencyFailure");
        goto LABEL_71;
      }
      v42 = operator new(0x18uLL);
      v43 = v137;
      v44 = (_QWORD *)a4[1];
      *v42 = a4;
      v42[1] = v44;
      v42[2] = v43;
      *v44 = v42;
      v45 = a4[2] + 1;
      a4[1] = v42;
      a4[2] = v45;
      v20 = v41;
LABEL_49:
      ++v19;
    }
    while (v19 != v18);
  }
  ReassignTaskIDs<17u>((uint64_t)a4);
  if (!ZinIrCompilerParameters::getEnableKernelRewind(v130) && !*(_BYTE *)(v129 + 2088)
    || (v46 = ZinCodegenEnableInterKernelReuse(5, a1, (uint64_t)a4), !(_DWORD)v46))
  {
    v47 = *(_DWORD **)(*(_QWORD *)(a4[1] + 16) + 200);
    v47[44] |= 0x30u;
    v47[48] |= 0x30u;
    (*(void (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, 24, 0);
    if ((_QWORD *)a4[1] != a4)
    {
      v48 = 0;
      v49 = a4;
      do
      {
        v50 = *(_QWORD *)(*(_QWORD *)(*v49 + 16) + 200);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 368))(v50, v48);
        v51 = *(_QWORD *)(*(_QWORD *)(*v49 + 16) + 200);
        v48 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51) - 1;
        v49 = (_QWORD *)*v49;
      }
      while (v49 != (_QWORD *)a4[1]);
    }
    if (SetInstructionMemOffset<6u>((uint64_t)a4, v129))
    {
      v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v52)
        ZinIrCodegenHandleTdsMakeList<4u>(v52, v53, v54, v55, v56, v57, v58, v59);
      goto LABEL_72;
    }
    v64 = *(_QWORD *)(*a4 + 16);
    v65 = *(_DWORD *)(v64 + 184);
    v66 = v65 + 4 * (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v64 + 200) + 16))(*(_QWORD *)(v64 + 200));
    if ((v65 & 3) != 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrCodegenHandleTdsMakeList<6u>(v66);
      goto LABEL_72;
    }
    *(_DWORD *)a5 = v66 >> 2;
    memset(buf, 0, sizeof(buf));
    v147 = xmmword_207A7FF30;
    v148 = 0;
    v149 = 0;
    v151 = 0;
    v152[0] = 0;
    v150 = 0;
    *(_DWORD *)buf = a4[2];
    *(_DWORD *)&buf[4] = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 16))(v47) - 1;
    *(_DWORD *)&buf[8] = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v47 + 24))(v47, 8);
    std::vector<ZinIrOpLayer *>::reserve((void **)&v150, a4[2]);
    for (j = a4[1]; (_QWORD *)j != a4; j = *(_QWORD *)(j + 8))
    {
      v134 = *(ZinIrTensor **)(j + 16);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v142, &v134))ZinAssertImpl("Incorrect internal states: codegen");
      v68 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v142, &v134);
      v69 = v68;
      if (!v68)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v70 = v151;
      if ((unint64_t)v151 >= v152[0])
      {
        v72 = (v151 - v150) >> 3;
        if ((unint64_t)(v72 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v73 = (uint64_t)(v152[0] - (_QWORD)v150) >> 2;
        if (v73 <= v72 + 1)
          v73 = v72 + 1;
        if (v152[0] - (_QWORD)v150 >= 0x7FFFFFFFFFFFFFF8uLL)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        if (v74)
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v152, v74);
        else
          v75 = 0;
        v76 = &v75[8 * v72];
        *(_QWORD *)v76 = v69[3];
        v71 = v76 + 8;
        v78 = v150;
        v77 = v151;
        if (v151 != v150)
        {
          do
          {
            v79 = *((_QWORD *)v77 - 1);
            v77 -= 8;
            *((_QWORD *)v76 - 1) = v79;
            v76 -= 8;
          }
          while (v77 != v78);
          v77 = v150;
        }
        v150 = v76;
        v151 = v71;
        v152[0] = &v75[8 * v74];
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_QWORD *)v151 = v68[3];
        v71 = v70 + 8;
      }
      v151 = v71;
    }
    v80 = a1[8];
    v81 = v80[1];
    if (v81 >= v80[2])
    {
      v82 = std::vector<ZinIrCodegenTDPartitionStats>::__push_back_slow_path<ZinIrCodegenTDPartitionStats const&>(a1[8], (__int128 *)buf);
    }
    else
    {
      std::vector<ZinIrCodegenTDPartitionStats>::__construct_one_at_end[abi:ne180100]<ZinIrCodegenTDPartitionStats const&>((uint64_t)a1[8], (__int128 *)buf);
      v82 = v81 + 80;
    }
    v80[1] = v82;
    if (v150)
    {
      v151 = v150;
      operator delete(v150);
    }
    v83 = *a1;
    std::unordered_map<ZinIrOpLayer *,ZinAneInstruction *>::unordered_map((uint64_t)v132, (uint64_t)v144);
    v84 = v83[1];
    buf[5] = *(_BYTE *)(v84 + 472);
    *(_WORD *)&buf[3] = *(_WORD *)(v84 + 100);
    v85 = *(unsigned __int8 *)(v84 + 95);
    v86 = (char)v85;
    if ((v85 & 0x80u) != 0)
      v85 = *(_QWORD *)(v84 + 80);
    if (v85 == 9)
    {
      v89 = *(_QWORD *)(v84 + 72);
      v87 = v84 + 72;
      v88 = v89;
      if (v86 < 0)
        v87 = v88;
      v90 = *(_QWORD *)v87;
      v91 = *(unsigned __int8 *)(v87 + 8);
      v93 = v90 == 0x30336E2E67343168 && v91 == 49;
    }
    else
    {
      v93 = 0;
    }
    buf[6] = v93;
    for (k = (_QWORD *)a4[1]; k != a4; k = (_QWORD *)k[1])
    {
      v95 = (_BYTE *)k[2];
      v96 = &v133;
      while (1)
      {
        v96 = (uint64_t *)*v96;
        if (!v96)
          break;
        if ((_BYTE *)v96[3] == v95)
        {
          v97 = v96[2];
          goto LABEL_123;
        }
      }
      v97 = 0;
LABEL_123:
      buf[0] = v95[199];
      buf[2] = v95[196];
      buf[1] = v95[198];
      ZinAneInstruction::HandleEventLogs((uint64_t)v95, v83, v97, (uint64_t)buf);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v132);
    v98 = (_QWORD *)a4[1];
    if (v98 == a4)
    {
LABEL_141:
      v46 = ZinIrContextSwitchValidator<4u>((uint64_t)a4);
      if ((_DWORD)v46)
      {
        v114 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v114)
          ZinIrCodegenHandleTdsMakeList<4u>(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        v46 = SetTensorKernelDependency<4u>(v122, v144, a6);
        if (!(_DWORD)v46)
        {
          if ((*((_BYTE *)v130 + 97) & 0x20) != 0)
            ZinIrCodegen::PrintContextSwitchInfo((uint64_t)a4);
          v46 = 0;
        }
      }
    }
    else
    {
      v100 = **a1;
      v99 = (float *)(*a1)[1];
      v101 = MEMORY[0x24BDACB70];
      while (1)
      {
        v102 = v98[2];
        v103 = *(unsigned __int16 **)(v102 + 200);
        v104 = 4 * (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v103 + 16))(v103);
        if (*(_QWORD *)(v100 + 296) > v104 || *(_QWORD *)(v100 + 304) < v104)
          break;
        v106 = (uint8x8_t)vcnt_s8((int8x8_t)v103[10]);
        v106.i16[0] = vaddlv_u8(v106);
        v107 = *(_QWORD *)(a5 + 16);
        *(_QWORD *)(a5 + 8) += v106.u32[0];
        v108 = (uint8x8_t)vcnt_s8((int8x8_t)v103[8]);
        v108.i16[0] = vaddlv_u8(v108);
        *(_QWORD *)(a5 + 16) = v107 + v108.u32[0];
        v109 = v103[6];
        if (*(_DWORD *)(a5 + 32) > v109)
          v109 = *(_DWORD *)(a5 + 32);
        *(_DWORD *)(a5 + 32) = v109;
        v110 = v99[97];
        if (v110 > 0.0)
        {
          LOWORD(v105) = v103[6];
          if (v110 < (float)v105)
            ++*(_DWORD *)(a5 + 36);
        }
        LODWORD(v134) = 0;
        if (ZinIrCompilerParameters::getEnforcedTdLatency((ZinIrCompilerParameters *)v99, (float *)&v134))
        {
          v111 = v103[6];
          v112 = *(float *)&v134;
          if (*(float *)&v134 < (float)v111 && os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
          {
            v113 = (_QWORD *)(v102 + 160);
            if (*(char *)(v102 + 183) < 0)
              v113 = (_QWORD *)*v113;
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v113;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v112;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&v147 = (double)v111;
            _os_log_error_impl(&dword_2069AB000, v101, OS_LOG_TYPE_ERROR, "Latency for Task %s is too large (>%.0f us) (%.0f)", buf, 0x20u);
          }
        }
        v98 = (_QWORD *)v98[1];
        if (v98 == a4)
          goto LABEL_141;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrCodegenHandleTdsMakeList<6u>();
      ZinIrNetworkStatus::SetError(a6, CFSTR("InvalidTotalTDSize"));
LABEL_72:
      v46 = 3;
    }
  }
  if (__p)
  {
    v140 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v142);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v144);
  return v46;
}

void sub_206FC8E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_206FC8F40()
{
  JUMPOUT(0x206FC8F38);
}

uint64_t ZinIrCodegenValidateTds<5u>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a3 + 8);
  if (v4 == a3)
  {
LABEL_10:
    v13 = ZinValidateTd<5u>::CheckKernelRewind(a3);
    if ((_DWORD)v13)
    {
      v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v14)
        ZinIrCodegenValidateTds<4u>(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  else
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v8 + 200);
      v11 = *(unsigned __int16 *)(v9 + 8);
      v10 = v9 + 8;
      if (v11 != v7)
        break;
      if (!*(_BYTE *)(v8 + 188))
      {
        v12 = ZinValidateTd<5u>::Test(a1, a2, v10);
        if ((_DWORD)v12)
        {
          v13 = v12;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrCodegenValidateTds<6u>();
          return v13;
        }
      }
      if (*(_BYTE *)(v8 + 198))
        v7 = 0;
      else
        ++v7;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == a3)
        goto LABEL_10;
    }
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinIrCodegenValidateTds<1u>(v22, v23, v24, v25, v26, v27, v28, v29);
    return 3;
  }
  return v13;
}

uint64_t ZinAneTd<5u>::GetField(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  switch(a2)
  {
    case 0:
      return (*(_DWORD *)(a1 + 24) >> 11) & 1;
    case 1:
      return (*(_DWORD *)(a1 + 24) >> 13) & 1;
    case 2:
      v3 = *(_DWORD *)(a1 + 24);
      return (v3 >> 15) & 1;
    case 3:
      return (*(_DWORD *)(a1 + 24) >> 14) & 1;
    case 4:
      return (*(_DWORD *)(a1 + 24) >> 12) & 1;
    case 5:
      v4 = *(_DWORD *)(a1 + 24);
      goto LABEL_26;
    case 6:
      return (*(_DWORD *)(a1 + 24) >> 28) & 1;
    case 7:
      return (*(_DWORD *)(a1 + 24) >> 29) & 1;
    case 8:
      return *(unsigned __int16 *)(a1 + 36);
    case 9:
      return *(unsigned __int8 *)(a1 + 34);
    case 10:
      v3 = *(_DWORD *)(a1 + 32);
      return (v3 >> 15) & 1;
    case 11:
      return (*(_DWORD *)(a1 + 32) >> 12) & 7;
    case 12:
      return (*(_DWORD *)(a1 + 176) >> 2) & 1;
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return *(unsigned __int16 *)(a1 + 16);
    case 15:
      v5 = *(_DWORD *)(a1 + 176);
      goto LABEL_21;
    case 16:
      v6 = *(_DWORD *)(a1 + 176);
      goto LABEL_23;
    case 17:
      v5 = *(_DWORD *)(a1 + 192);
LABEL_21:
      result = (v5 >> 4) & 1;
      break;
    case 18:
      v6 = *(_DWORD *)(a1 + 192);
LABEL_23:
      result = (v6 >> 5) & 1;
      break;
    case 23:
      result = *(unsigned __int8 *)(a1 + 14);
      break;
    case 24:
      v4 = *(_DWORD *)(a1 + 8);
LABEL_26:
      result = HIBYTE(v4) & 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinAneTd<5u>::SetField(uint64_t result, int a2, __int16 a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  switch(a2)
  {
    case 0:
      v3 = *(_DWORD *)(result + 24) & 0xFFFFF7FF | ((a3 & 1) << 11);
      goto LABEL_12;
    case 1:
      v3 = *(_DWORD *)(result + 24) & 0xFFFFDFFF | ((a3 & 1) << 13);
      goto LABEL_12;
    case 2:
      v3 = *(_DWORD *)(result + 24) & 0xFFFF7FFF | ((a3 & 1) << 15);
      goto LABEL_12;
    case 3:
      v3 = *(_DWORD *)(result + 24) & 0xFFFFBFFF | ((a3 & 1) << 14);
      goto LABEL_12;
    case 4:
      v3 = *(_DWORD *)(result + 24) & 0xFFFFEFFF | ((a3 & 1) << 12);
      goto LABEL_12;
    case 5:
      v3 = *(_DWORD *)(result + 24) & 0xFEFFFFFF | ((a3 & 1) << 24);
      goto LABEL_12;
    case 6:
      v3 = *(_DWORD *)(result + 24) & 0xEFFFFFFF | ((a3 & 1) << 28);
      goto LABEL_12;
    case 7:
      v3 = *(_DWORD *)(result + 24) & 0xDFFFFFFF | ((a3 & 1) << 29);
LABEL_12:
      *(_DWORD *)(result + 24) = v3;
      return result;
    case 8:
      *(_WORD *)(result + 36) = a3;
      return result;
    case 9:
      *(_BYTE *)(result + 34) = a3;
      return result;
    case 10:
      v4 = *(_DWORD *)(result + 32) & 0xFFFF7FFF | ((a3 & 1) << 15);
      goto LABEL_17;
    case 11:
      v4 = *(_DWORD *)(result + 32) & 0xFFFF8FFF | ((a3 & 7) << 12);
LABEL_17:
      *(_DWORD *)(result + 32) = v4;
      return result;
    case 12:
      v5 = *(_DWORD *)(result + 176) & 0xFFFFFFFB | (4 * (a3 & 1));
      goto LABEL_21;
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 22:
      return result;
    case 15:
      v5 = *(_DWORD *)(result + 176) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_21;
    case 16:
      v5 = *(_DWORD *)(result + 176) & 0xFFFFFFDF | (32 * (a3 & 1));
LABEL_21:
      *(_DWORD *)(result + 176) = v5;
      return result;
    case 17:
      v6 = *(_DWORD *)(result + 192) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_24;
    case 18:
      v6 = *(_DWORD *)(result + 192) & 0xFFFFFFDF | (32 * (a3 & 1));
LABEL_24:
      *(_DWORD *)(result + 192) = v6;
      break;
    case 23:
      *(_BYTE *)(result + 14) = a3;
      break;
    case 24:
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFEFFFFFF | ((a3 & 1) << 24);
      break;
    default:
      if (a2 == 50)
        *(_WORD *)(result + 16) = a3;
      break;
  }
  return result;
}

BOOL ZinAneTd<5u>::HandleCommonConfigTileAndTaskInfo(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL8 result;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t NumNeededNEs;
  int Pow2Log2;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  MirInfoChannelAssignment *v15;
  uint64_t v16;
  int v17;
  int8x8_t v18;
  int v19;

  *(_DWORD *)(a1 + 96) = 0;
  v4 = ZinAneTd<4u>::SetTileHeight(a1, *(_QWORD *)(a2 + 200));
  result = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 100) = 0;
    ZinAneTd<5u>::SetNESmallSourceMode(a1, *(_DWORD *)(a2 + 144));
    v19 = 0;
    ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
    NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
    Pow2Log2 = ZinRoundUpToNextPow2Log2(NumNeededNEs);
    result = ZinCodegenUtil::ValueToRegister(Pow2Log2, (unsigned int *)(*(_QWORD *)(a1 + 280) + 184), &v19);
    if (result)
    {
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 100) & 0xFFE7FFFF | ((v19 & 3) << 19);
      v19 = 0;
      v9 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 136));
      v10 = v9 >= 4 ? 4 : v9;
      result = ZinCodegenUtil::ValueToRegister(v10, (unsigned int *)(*(_QWORD *)(a1 + 280) + 160), &v19);
      if (result)
      {
        *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 100) & 0xFFFFF8FF | ((v19 & 7) << 8);
        v19 = 0;
        v11 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 120));
        v12 = v11 >= 4 ? 4 : v11;
        result = ZinCodegenUtil::ValueToRegister(v12, (unsigned int *)(*(_QWORD *)(a1 + 280) + 168), &v19);
        if (result)
        {
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 100) & 0xFFFF8FFF | ((v19 & 7) << 12);
          v19 = 0;
          v13 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 128));
          if (v13 >= 4)
            v14 = 4;
          else
            v14 = v13;
          result = ZinCodegenUtil::ValueToRegister(v14, (unsigned int *)(*(_QWORD *)(a1 + 280) + 176), &v19);
          if (result)
          {
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 100) & 0xFFF8FFFF | ((v19 & 7) << 16);
            v19 = 0;
            v15 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
            v16 = MirInfoChannelAssignment::GetNumNeededNEs(v15);
            v17 = ZinRoundUpToNextPow2Log2(v16);
            result = ZinCodegenUtil::ValueToRegister(v17, (unsigned int *)(*(_QWORD *)(a1 + 280) + 184), &v19);
            if (result)
            {
              v18.i32[1] = 0x100000;
              v18.i32[0] = (v19 & 3) << 19;
              *(int8x8_t *)(a1 + 100) = vorr_s8(vand_s8(*(int8x8_t *)(a1 + 100), (int8x8_t)0xF00FFFFFFFE7FFFFLL), v18);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<5u>::HandleTileDmaSrcConfig(uint64_t a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t InputTensor;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _OWORD v90[13];

  if (!ZinIrOpLayer::IsNELayer(this))
    ZinAssertImpl("Only NE layers allowed\n");
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) >= 0x18uLL)
  {
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinAneTd<4u>::HandleTileDmaSrcConfig(v23, v24, v25, v26, v27, v28, v29, v30);
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(a3 + 528);
  InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
  v12 = *((_QWORD *)this + 33);
  v13 = *(_QWORD *)(v12 + 752);
  v14 = *(_BYTE *)(v12 + 1392);
  if ((v14 & 8) != 0 && (v14 & 7) != 0)
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinAneTd<4u>::HandleTileDmaSrcConfig(v15, v16, v17, v18, v19, v20, v21, v22);
LABEL_9:
    v31 = 0;
    v32 = 1;
    goto LABEL_10;
  }
  v34 = *(_DWORD *)(InputTensor + 88);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFFF7F | ((v13 != 0) << 7);
  if (v13)
  {
    if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v13)
      && ZinIrSymbol::GetMemType((ZinIrSymbol *)v13) != 1)
    {
      v61 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v61)
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v61, v62, v63, v64, v65, v66, v67, v68);
      goto LABEL_9;
    }
    if (!ZinIrSection::HasValidBarId(*(ZinIrSection **)(v13 + 8)))
    {
      v53 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v53)
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v53, v54, v55, v56, v57, v58, v59, v60);
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFFF8F | (16 * (*(_BYTE *)(*(_QWORD *)(v13 + 8) + 56) & 7));
    v35 = *(_OWORD *)(v13 + 384);
    v90[10] = *(_OWORD *)(v13 + 368);
    v90[11] = v35;
    v90[12] = *(_OWORD *)(v13 + 400);
    v36 = *(_OWORD *)(v13 + 320);
    v90[6] = *(_OWORD *)(v13 + 304);
    v90[7] = v36;
    v37 = *(_OWORD *)(v13 + 352);
    v90[8] = *(_OWORD *)(v13 + 336);
    v90[9] = v37;
    v38 = *(_OWORD *)(v13 + 256);
    v90[2] = *(_OWORD *)(v13 + 240);
    v90[3] = v38;
    v39 = *(_OWORD *)(v13 + 288);
    v90[4] = *(_OWORD *)(v13 + 272);
    v90[5] = v39;
    v40 = *(_OWORD *)(v13 + 224);
    v90[0] = *(_OWORD *)(v13 + 208);
    v90[1] = v40;
    if (ZinEngineLayerMirInfo::HasDmaRead(*((_QWORD *)this + 33), 0))
      *(_DWORD *)(a1 + 124) |= 1u;
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFFFF0FFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 1, *(_DWORD *)(*((_QWORD *)this + 33) + 1400)) & 0xF) << 12);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFFF0FFFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 2, *(_DWORD *)(*((_QWORD *)this + 33) + 1404)) & 0xF) << 16);
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFF0FFFFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 3, *(_DWORD *)(*((_QWORD *)this + 33) + 1408)) & 0xF) << 20);
    **(_QWORD **)(a5 + 128) = v13;
    v41 = *((_QWORD *)this + 33);
    v42 = *(_QWORD *)(v41 + 720);
    if (v42 % v10 || (v43 = *(_QWORD *)(v41 + 728), v44 = v43 / v10, v43 % v10))
    {
      v45 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v45)
        ZinAneTd<4u>::HandleTileDmaSrcConfig(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      v89 = 0;
      if (ZinCodegenUtil::ValueToRegister(v42 / v10, (unsigned int *)(*(_QWORD *)(a1 + 280) + 248), &v89))
      {
        *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 132) & 0xC000003F | ((v89 & 0xFFFFFF) << 6);
        v89 = 0;
        if (ZinCodegenUtil::ValueToRegister(v44, (unsigned int *)(*(_QWORD *)(a1 + 280) + 256), &v89))
        {
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 136) & 0xC000003F | ((v89 & 0xFFFFFF) << 6);
          switch(v34)
          {
            case 1:
              v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCFFC | 0x1000;
              goto LABEL_47;
            case 2:
              v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCFFC;
              goto LABEL_47;
            case 3:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              v71 = 8241;
              goto LABEL_46;
            case 4:
              v69 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC | 1;
              goto LABEL_47;
            case 5:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              v71 = 257;
              goto LABEL_46;
            case 6:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              v71 = 17;
              goto LABEL_46;
            case 7:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCECC;
              v71 = 273;
              goto LABEL_46;
            case 8:
              v72 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v72)
                ZinCodegen::SetSecondarySourceDMA<7u>(v72, v73, v74, v75, v76, v77, v78, v79);
              goto LABEL_42;
            case 9:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              v71 = 4145;
              goto LABEL_46;
            case 10:
              v70 = *(_DWORD *)(a1 + 140) & 0xFFFFCFCC;
              v71 = 49;
LABEL_46:
              v69 = v70 | v71;
LABEL_47:
              *(_DWORD *)(a1 + 140) = v69;
              v80 = ZinTensorDescriptorDmaInterleave((uint64_t)v90);
              if (v80 >= 1)
              {
                v32 = 0;
                *(_DWORD *)(a1 + 140) = *(_DWORD *)(a1 + 140) & 0xF0FFFFFF | ((v80 & 0xF) << 24);
                goto LABEL_24;
              }
              v81 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v81)
                ZinCodegen::SetSecondarySourceDMA<7u>(v81, v82, v83, v84, v85, v86, v87, v88);
              break;
            default:
LABEL_42:
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinAneTd<6u>::HandleTileDmaSrcConfig();
              break;
          }
        }
      }
    }
    v32 = 1;
LABEL_24:
    v31 = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a1 + 124) & 0xFF000FFF | 0x222000;
    *(_DWORD *)(a1 + 140) = *(_DWORD *)(a1 + 140) & 0xF0FFFFFF | 0x1000000;
    v32 = 1;
    v31 = 1;
  }
LABEL_10:
  if (v32)
    return v31;
  else
    return 1;
}

BOOL ZinAneTd<5u>::HandleL2Config(uint64_t a1, ZinIrOpLayer *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int L2RdMode;
  int *InputTensor;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t L2RdSymbol;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  ZinIrSymbol *L2WrSymbol;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int OCGSize;
  unsigned int NumNeededNEs;
  uint64_t *v82;
  _BOOL8 L2RowStride;
  uint64_t v85;
  _OWORD v86[13];
  _BYTE v87[24];
  _BYTE *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = *(_DWORD *)(*((_QWORD *)a2 + 8) + 8);
  if (v6 != 85)
  {
    if (v6 != 89)
      goto LABEL_22;
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 54) + 64);
    v8 = *(_DWORD *)(v7 + 104);
    if (v8)
    {
      if (v8 != 1)
      {
        v9 = *(_DWORD *)(v7 + 100);
        goto LABEL_20;
      }
      if (*(_DWORD *)(v7 + 100) == 4)
      {
        v9 = 4;
LABEL_20:
        v21 = a1;
        v22 = 0;
        goto LABEL_21;
      }
    }
    else if (*(_DWORD *)(v7 + 100) == 2)
    {
      v9 = 2;
      goto LABEL_20;
    }
    v56 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v56)
      ZinAneTd<4u>::HandleL2Config(v56, v57, v58, v59, v60, v61, v62, v63);
    return 0;
  }
  if (!*((_QWORD *)a2 + 54))
    goto LABEL_22;
  v10 = *((_QWORD *)a2 + 17);
  v9 = *(_DWORD *)(v10 + 376);
  v11 = (_DWORD *)a3[183];
  v12 = (_DWORD *)a3[184];
  if (v11 != v12)
  {
    while (*v11 != v9)
    {
      if (++v11 == v12)
      {
        v11 = (_DWORD *)a3[184];
        break;
      }
    }
  }
  if (v11 == v12 || v9 == 4 || v9 == 2)
  {
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinAneTd<4u>::HandleL2Config(v13, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  v22 = *(_DWORD *)(v10 + 380);
  v21 = a1;
LABEL_21:
  ZinAneTd<5u>::SetPaddingMode(v21, v9, v22);
LABEL_22:
  L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(*((_QWORD *)a2 + 33), 0);
  ZinAneTd<5u>::SetL2Src1SourceType(a1, L2RdMode);
  if (!ZinCodegen::SetPrimaryL2SourceBuffer<4u>((uint64_t)a3, (uint64_t)a2, (ZinIrHalH13g *)a1))
  {
    v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v28)
      ZinAneTd<1u>::HandleNEControlCommon(v28, v29, v30, v31, v32, v33, v34, v35);
    return 0;
  }
  InputTensor = (int *)ZinIrOpLayer::GetInputTensor(a2, 0);
  ZinAneTd<5u>::SetL2Src1DmaFormat(a1, InputTensor[22]);
  v88 = 0;
  ZinIrTensor::InferDescriptor((ZinIrTensor *)InputTensor, (uint64_t)v87, (uint64_t)v86);
  v25 = ZinTensorDescriptorDmaInterleave((uint64_t)v86);
  v26 = v88;
  if (v88 == v87)
  {
    v27 = 4;
    v26 = v87;
  }
  else
  {
    if (!v88)
      goto LABEL_30;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_30:
  if (v25 <= 0)
  {
    v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v48)
      return 0;
    goto LABEL_44;
  }
  ZinAneTd<4u>::SetL2Src1Interleave(a1, v25);
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) == 90 && *((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) == 16)
  {
    v36 = *(_QWORD *)(ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)a2 + 33), 0) + 16);
    v38 = a3[51];
    v37 = a3[52];
    L2RdSymbol = ZinEngineLayerMirInfo::GetL2RdSymbol(*((_QWORD *)a2 + 33), 1);
    v40 = v36 % v38 / v37;
    v41 = *(_QWORD *)(L2RdSymbol + 16) % a3[51] / a3[52];
    if ((int)v40 - (int)v41 >= 0)
      v42 = v40 - v41;
    else
      v42 = v41 - v40;
    if (v41 > v40)
      LODWORD(v41) = v40;
    ZinAneTd<4u>::SetL2SrcBaseAddress(a1, v41);
    ZinAneTd<4u>::SetL2Src1ChannelStride(a1, v42);
  }
  v43 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol(*((ZinEngineLayerMirInfo **)a2 + 33));
  v45 = (uint64_t)L2WrSymbol;
  if (!L2WrSymbol)
  {
    v64 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v64)
      ZinAneTd<4u>::HandleL2Config(v64, v65, v66, v67, v68, v69, v70, v71);
    return 0;
  }
  if (ZinIrSymbol::GetMemType(L2WrSymbol) != 2)
  {
    v72 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v72)
      ZinAneTd<17u>::HandleL2Config(v72, v73, v74, v75, v76, v77, v78, v79);
    return 0;
  }
  ZinAneTd<4u>::SetL2ResultType(a1, *(_DWORD *)(*((_QWORD *)a2 + 33) + 1632));
  ZinAneTd<4u>::SetL2BfrMode(a1, *(unsigned __int8 *)(*((_QWORD *)a2 + 33) + 312));
  ZinAneTd<5u>::SetL2ResultCfgDmaFmt(a1, *(_DWORD *)(v43 + 88));
  ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a1, *(_QWORD *)(*((_QWORD *)a2 + 33) + 320));
  if ((*(_DWORD *)(*((_QWORD *)a2 + 33) + 1632) - 1) > 1)
  {
    v47 = 1;
  }
  else
  {
    v46 = ZinTensorDescriptorDmaInterleave(*(_QWORD *)(*((_QWORD *)a2 + 33) + 944) + 208);
    v47 = v46;
    if (!v46)
    {
      v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v48)
        return 0;
LABEL_44:
      ZinAneTd<6u>::HandleL2Config(v48, v49, v50, v51, v52, v53, v54, v55);
      return 0;
    }
  }
  ZinAneTd<4u>::SetL2ResultInterleave(a1, v47);
  ZinAneTd<4u>::SetL2ResultBaseAddr(a1, *(_QWORD *)(v45 + 16) % a3[51] / a3[52]);
  ZinAneTd<4u>::SetL2ResultChannelStride(a1, *(_DWORD *)(*((_QWORD *)a2 + 33) + 280));
  v86[0] = *(_OWORD *)(v45 + 520);
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)v86);
  NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)v86);
  ZinAneTd<4u>::SetL2ResultWrapAddrOffset(a1, OCGSize);
  ZinAneTd<4u>::SetL2ResultWrapAddr(a1, NumNeededNEs);
  if ((ZinCodegen::SetL2ResultWrapInfo<4u>(a1, v45) & 1) == 0)
    return 0;
  v85 = 0;
  L2RowStride = ZinCodegen::GetL2RowStride((ZinCodegen *)(v43 + 48), *(const ZinTensorDimensions **)(*((_QWORD *)a2 + 33) + 272), *(unsigned int *)(*(_QWORD *)(a1 + 280) + 236), &v85, v82);
  if (L2RowStride)
  {
    ZinAneTd<4u>::SetL2ResultRowStride(a1, v85);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
    if (*((_QWORD *)a2 + 47))
      *(_DWORD *)(a1 + 172) |= 1u;
  }
  return L2RowStride;
}

void sub_206FC9D7C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL ZinAneTd<5u>::HandleNEConfig(ZinIrHalH13g *a1, ZinIrKernel **a2, const ZinIrHalParameters *a3)
{
  ZinIrKernel **v6;
  ZinIrKernel *v7;
  unsigned int v8;
  int v9;
  int v10;
  int ShouldUseSparseBinaryForCompression;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  int MacCfgOpMode;
  _BOOL8 result;
  int MacCfgKernelMode;
  _BOOL4 MacCfgPassthroughEnable;
  int KernelCfgKernelFmt;
  uint64_t v20;
  ZinIrKernel *v21;
  int v22;
  int v23;
  ZinIrKernel *v24;
  unsigned int v25;
  uint64_t InputTensor;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  ZinDeQuantLayer *v44;
  int ScalarZeroPoint;
  unint64_t v46;
  char v47;
  unsigned __int8 v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  ZinGOCLayer *v52;
  uint64_t v53;
  int HasZeroPoint;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;

  (*(void (**)(ZinIrHalH13g *))(*(_QWORD *)a1 + 88))(a1);
  v6 = a2 + 17;
  v7 = a2[17];
  if (!v7)
  {
    v13 = 0;
    v10 = 0;
    v64 = 0;
    goto LABEL_7;
  }
  v8 = *((unsigned __int8 *)v7 + 448);
  v9 = (v8 >> 3) & 1;
  v10 = (v8 >> 4) & 1;
  if ((v8 & 4) == 0)
  {
    v64 = (v8 >> 3) & 1;
    if (ZinIrKernel::HasPerCoutScale(v7) || ZinIrKernel::HasPerCoutBias(v7))
    {
      ShouldUseSparseBinaryForCompression = 0;
      v12 = 0;
      v13 = *(_QWORD *)((*((uint64_t (**)(ZinIrKernel **, _QWORD, _QWORD))*a2 + 4))(a2, 0, 0) + 48) > 1;
LABEL_8:
      v14 = 4;
      goto LABEL_9;
    }
    v13 = 0;
LABEL_7:
    ShouldUseSparseBinaryForCompression = 0;
    v12 = 0;
    goto LABEL_8;
  }
  v23 = *((_DWORD *)a2[8] + 2);
  if (v23 == 90)
  {
    InputTensor = ZinIrOpLayer::GetInputTensor((ZinIrOpLayer *)a2, 0);
    v25 = 0;
    LODWORD(v24) = *(_QWORD *)(InputTensor + 48) > 1;
    v7 = a2[17];
  }
  else if (v23 == 85)
  {
    v24 = a2[54];
    if (v24)
    {
      v25 = v8 >> 7;
      if (*((_DWORD *)a2[33] + 28) != 1)
        v25 = 0;
      LODWORD(v24) = 0;
    }
    else
    {
      v25 = 0;
    }
  }
  else
  {
    v25 = 0;
    LODWORD(v24) = 0;
  }
  v13 = (v25 | v24) != 0;
  v34 = *(unsigned __int8 **)(*((_QWORD *)v7 + 98) + 40);
  if (!v34)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    GetKernelCfgKernelFmt(result, v36, v37, v38, v39, v40, v41, v42);
    return 0;
  }
  v64 = v9;
  v14 = *((_DWORD *)v7 + 44);
  v35 = *v34;
  v12 = v35 != 0;
  if (v35)
  {
    ShouldUseSparseBinaryForCompression = ZinIrKernel::ShouldUseSparseBinaryForCompression(v7);
    v7 = *v6;
  }
  else
  {
    ShouldUseSparseBinaryForCompression = 0;
  }
  if (ZinIrKernel::HasVectorPalettizedWeight(v7))
  {
    v43 = ZinLog2OfPow2(*((_QWORD *)*v6 + 52));
    ZinAneTd<4u>::SetPaletteBlockSize((uint64_t)a1, v43);
  }
LABEL_9:
  ZinAneTd<5u>::SetKernelPalettizedEn((uint64_t)a1, v14);
  ZinAneTd<5u>::SetKernelPalettizedBits((uint64_t)a1, v14);
  ZinAneTd<4u>::SetKernelSparseFmt((uint64_t)a1, v12);
  ZinAneTd<4u>::SetKernelSparseBinary((uint64_t)a1, ShouldUseSparseBinaryForCompression);
  ZinAneTd<4u>::SetGroupKernelReuse((uint64_t)a1, v13);
  v66 = 0;
  MacCfgOpMode = GetMacCfgOpMode((ZinIrOpLayer *)a2, (uint64_t)a3, &v66);
  result = 0;
  if (!MacCfgOpMode)
  {
    ZinAneTd<5u>::SetOpMode((uint64_t)a1, v66);
    MacCfgKernelMode = GetMacCfgKernelMode((uint64_t)a2, (uint64_t)a3);
    ZinAneTd<4u>::SetKernelMode((uint64_t)a1, MacCfgKernelMode);
    MacCfgPassthroughEnable = GetMacCfgPassthroughEnable((const ZinNELayer *)a2, a3);
    ZinAneTd<1u>::SetPassthroughEnable((uint64_t)a1, MacCfgPassthroughEnable);
    v65 = 0;
    KernelCfgKernelFmt = GetKernelCfgKernelFmt((const ZinNELayer *)a2, a3, v66, &v65);
    result = 0;
    if (!KernelCfgKernelFmt)
    {
      ZinAneTd<5u>::SetKernelFmt((uint64_t)a1, v65);
      v20 = *(uint64_t *)((char *)a2 + 420);
      if ((v20 & 0xFF00000000) == 0)
        ZinAssertImpl("Binary point is missing from NE layer.");
      ZinAneTd<4u>::SetNEBinaryPoint((uint64_t)a1, v20);
      if (((*(uint64_t (**)(ZinIrHalH13g *, ZinIrKernel **))(*(_QWORD *)a1 + 296))(a1, a2) & 1) == 0)
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        ZinAneTd<4u>::HandleNEConfig(result, v27, v28, v29, v30, v31, v32, v33);
        return 0;
      }
      v21 = a2[49];
      if (v21)
        v22 = *((_DWORD *)v21 + 48);
      else
        v22 = 0;
      ZinAneTd<4u>::SetNENonLinearMode((uint64_t)a1, v22, (uint64_t)a3 + 1536);
      v44 = a2[51];
      if (v44)
      {
        ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v44);
        ZinAneTd<4u>::SetQuantizationOutputZeroOffset((uint64_t)a1, 1, ScalarZeroPoint);
      }
      if (v64)
      {
        v46 = *(_QWORD *)((char *)*v6 + 180);
        v47 = 1;
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
      ZinAneTd<4u>::SetNEPostScale((uint64_t)a1, v46, v47);
      if (v10)
      {
        v48 = *((_BYTE *)*v6 + 192);
        LOBYTE(ShouldUseSparseBinaryForCompression) = *((_BYTE *)*v6 + 193);
        v10 = *((_DWORD *)*v6 + 47) >> 8;
        v49 = (unint64_t)*((unsigned __int16 *)*v6 + 97) << 48;
        v50 = *((_DWORD *)*v6 + 47);
        v51 = 1;
        LODWORD(v7) = v10;
      }
      else
      {
        v48 = 0;
        v50 = 0;
        v49 = 0;
        v51 = 0;
      }
      if (*((_DWORD *)a2[8] + 2) == 85)
      {
        v52 = a2[48];
        if (v52)
        {
          if (ZinGOCLayer::IsDynamicBias(v52))
          {
            LODWORD(v7) = v10;
            LOBYTE(ShouldUseSparseBinaryForCompression) = 1;
            v51 = 1;
          }
        }
      }
      ZinAneTd<4u>::SetNEBias((uint64_t)a1, v49 | ((unint64_t)ShouldUseSparseBinaryForCompression << 40) | ((unint64_t)v48 << 32) | v50 & 0xFFFFFFFF000000FFLL | (((unint64_t)v7 & 0xFFFFFF) << 8), v51);
      if (*((_DWORD *)a2[8] + 2) == 85)
        v53 = ZinPEElementWiseLayer::GetSecondOperandBroadcast((ZinPEElementWiseLayer *)a2) & 0xFFFFFFFFFFLL;
      else
        v53 = 0;
      ZinAneTd<4u>::SetNEMatrixVectorBias((uint64_t)a1, a2 + 17, v53);
      if (*v6)
        HasZeroPoint = ZinIrKernel::HasZeroPoint(*v6);
      else
        HasZeroPoint = 0;
      ZinAneTd<4u>::SetKernelAsymQuantEn((uint64_t)a1, HasZeroPoint);
      v56 = *v6 && (v55 = (unsigned __int8 *)*((_QWORD *)*v6 + 98)) != 0 && *v55 != 0;
      ZinAneTd<4u>::SetKernelDetectZeros((uint64_t)a1, v56);
      ZinAneTd<4u>::SetDoubleInt8Enable((uint64_t)a1, *((unsigned __int8 *)a2[33] + 1));
      if (*((_DWORD *)a2[8] + 2) == 89)
      {
        ZinIrHalH13g::~ZinIrHalH13g(a1);
        ZinIrHalH13g::~ZinIrHalH13g(a1);
      }
      if (((*(uint64_t (**)(ZinIrHalH13g *, ZinIrKernel **))(*(_QWORD *)a1 + 288))(a1, a2) & 1) != 0)
        return 1;
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneTd<4u>::HandleNEConfig(result, v57, v58, v59, v60, v61, v62, v63);
        return 0;
      }
    }
  }
  return result;
}

BOOL ZinAneTd<5u>::HandleTileDmaDstConfig(uint64_t a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  ZinIrSection **v13;
  int v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v64;
  int v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _OWORD v75[13];

  if (!ZinIrOpLayer::IsNELayer(this) && !ZinIrOpLayer::IsTransposeEngineLayer(this))
    ZinAssertImpl("Only NE and TransposeEngineLayer allowed\n");
  v10 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v11 = *((_QWORD *)this + 32);
  if (v11)
    v12 = *(_DWORD *)(*(_QWORD *)(v11 + 64) + 8) == 102;
  else
    v12 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v13 = *(ZinIrSection ***)(*((_QWORD *)this + 33) + 944);
  v14 = *(_DWORD *)(v10 + 88);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFF7FF | ((v13 != 0) << 11);
  if (!v13)
  {
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a1 + 252) & 0xFFFF0FFF | 0x3000;
    *(_DWORD *)(a1 + 268) = *(_DWORD *)(a1 + 268) & 0xF0FFFFFF | 0x1000000;
    goto LABEL_24;
  }
  if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v13) == 2)
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinCodegen::SetResultDMA<7u>(v15, v16, v17, v18, v19, v20, v21, v22);
    goto LABEL_24;
  }
  if (!ZinIrSection::HasValidBarId(v13[1]))
  {
    v53 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v53)
      ZinCodegen::SetResultDMA<7u>(v53, v54, v55, v56, v57, v58, v59, v60);
    goto LABEL_24;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0xFFFFF8FF | ((*((_BYTE *)v13[1] + 56) & 7) << 8);
  v23 = *((_QWORD *)this + 33);
  v24 = *(_OWORD **)(v23 + 944);
  v25 = v24[24];
  v75[10] = v24[23];
  v75[11] = v25;
  v75[12] = v24[25];
  v26 = v24[20];
  v75[6] = v24[19];
  v75[7] = v26;
  v27 = v24[22];
  v75[8] = v24[21];
  v75[9] = v27;
  v28 = v24[16];
  v75[2] = v24[15];
  v75[3] = v28;
  v29 = v24[18];
  v75[4] = v24[17];
  v75[5] = v29;
  v30 = v24[14];
  v75[0] = v24[13];
  v75[1] = v30;
  if ((*(_DWORD *)(v23 + 1632) - 1) <= 1)
  {
    *(_DWORD *)(a1 + 252) |= 1u;
    v23 = *((_QWORD *)this + 33);
  }
  v31 = *(_DWORD *)(a1 + 252) & 0xFFFF0FFF | ((ZinIrCacheHintTable::GetCacheHintRegisterValue(a4, 0, *(_DWORD *)(v23 + 1412)) & 0xF) << 12);
  *(_DWORD *)(a1 + 252) = v31;
  *(_DWORD *)(a1 + 252) = v31 & 0xFBFFFFFF | (*(unsigned __int8 *)(*((_QWORD *)this + 33) + 312) << 26);
  *(_QWORD *)(a5 + 152) = v13;
  v32 = *((_QWORD *)this + 33);
  v33 = *(_QWORD *)(v32 + 912);
  v34 = *(_QWORD *)(v32 + 920);
  if (v33 < 1 || v34 <= 0)
  {
    v35 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v35)
      ZinAneTd<4u>::HandleTileDmaDstConfig(v35, v36, v37, v38, v39, v40, v41, v42);
  }
  v43 = *(_QWORD *)(a3 + 528);
  if (v33 % v43 || (v44 = v34 / v43, v34 % v43))
  {
    v45 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v45)
      ZinAneTd<4u>::HandleTileDmaDstConfig(v45, v46, v47, v48, v49, v50, v51, v52);
    goto LABEL_24;
  }
  v74 = 0;
  if (!ZinCodegenUtil::ValueToRegister(v33 / v43, (unsigned int *)(*(_QWORD *)(a1 + 280) + 272), &v74)
    || (*(_DWORD *)(a1 + 260) = *(_DWORD *)(a1 + 260) & 0xC000003F | ((v74 & 0xFFFFFF) << 6),
        v74 = 0,
        !ZinCodegenUtil::ValueToRegister(v44, (unsigned int *)(*(_QWORD *)(a1 + 280) + 256), &v74)))
  {
LABEL_24:
    v61 = 1;
    return !v13 || v61 == 0;
  }
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a1 + 264) & 0xC000003F | ((v74 & 0xFFFFFF) << 6);
  ZinAneTd<5u>::SetTileDmaDstFormat(a1, v14, v12);
  v64 = ZinTensorDescriptorDmaInterleave((uint64_t)v75);
  if (v64 < 1)
  {
    v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v66)
      ZinCodegen::SetSecondarySourceDMA<7u>(v66, v67, v68, v69, v70, v71, v72, v73);
    goto LABEL_24;
  }
  v65 = *(_DWORD *)(a1 + 268) & 0xF0FFFFFF | ((v64 & 0xF) << 24);
  *(_DWORD *)(a1 + 268) = v65;
  *(_DWORD *)(a1 + 268) = v65 & 0xFFF8FFFF | ((*(_DWORD *)(*((_QWORD *)this + 33) + 1456) & 7) << 16);
  ZinAneTd<4u>::SetTileDmaDstZeroPad(a1, (_DWORD *)(*((_QWORD *)this + 33) + 1488));
  v61 = 0;
  return !v13 || v61 == 0;
}

uint64_t ZinAneTd<5u>::HandleKernelDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, std::vector<std::string> *a5)
{
  char v10;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, *(int *)(*a3 + 8));
  v10 = 0;
  ZinAneTd<5u>::HandleKernelDmaSrcConfigCoeffBuffer(a1, (ZinEngineLayerMirInfo **)a2, a3, (uint64_t)a5, (uint64_t *)(a2 + 136), &v10);
  if (v10)
  {
    ZinAneTd<6u>::AddKernelSymbols(a1, (ZinIrKernel **)a2, a3, a5);
    if (*(_BYTE *)(*a3 + 1271))
      ZinAneTd<4u>::SetKernelDmaSrcConfigPrefetch();
  }
  return 1;
}

uint64_t ZinAneTd<5u>::HandleEngineLayer(uint64_t a1, uint64_t a2, unint64_t a3, ZinAneInstruction *a4, uint64_t a5, _QWORD **a6, CFArrayRef *a7)
{
  ZinIrSection *v14;
  uint64_t result;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  _QWORD v25[3];

  if (!*(_QWORD *)(a2 + 264))
  {
    v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v16)
      ZinAneTd<4u>::HandleEngineLayer(v16, v17, v18, v19, v20, v21, v22, v23);
    v24 = CFSTR("CodeGenerationFailure");
    goto LABEL_13;
  }
  ZinIrMemoryPool::GetSections((uint64_t)a6[3], 1, v25);
  v14 = *(ZinIrSection **)(v25[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v25);
  if ((ZinAneInstruction::HandleTdHeader((uint64_t)a4, (ZinEngineLayerMirInfo **)a2, a3, *a6, v14) & 1) == 0)
  {
    v24 = CFSTR("InvalidHWHeader");
LABEL_13:
    ZinIrNetworkStatus::SetError(a7, v24);
    return 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a2))
    ZinAssertImpl("Error: PE is not supported");
  if (!ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2))
    ZinAssertImpl("TransposeEngineLayer based graph should not need DMA buffer\n");
  if (!HandleNELayer<5u>((const ZinIrOpLayer *)a2, a3, a4, (const ZinIrHalParameters **)*a6, (ZinIrMemoryPool *)a6[3], a5, a7))return 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 328))(a1, **a6, a2);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 344))(a1, a2);
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 352))(a1, a2, a6[2]);
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<5u>::HandleKernelDmaSrcConfigCoeffBuffer(_BOOL8 result, ZinEngineLayerMirInfo **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v9 = result;
  v10 = *a3;
  v11 = *a5;
  if (*a5 && (v12 = *(_QWORD *)(v11 + 784)) != 0)
    v13 = *(_QWORD *)(v12 + 40);
  else
    v13 = 0;
  if (v11)
    v14 = v13 == 0;
  else
    v14 = 1;
  v15 = !v14;
  if (*(_DWORD *)(v10 + 8))
  {
    v16 = 0;
    v17 = *(_QWORD *)(v10 + 528);
    v18 = 40;
    while (v15)
    {
      ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
      if (MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) <= v16)
        break;
      v20 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + v18);
      v21 = v20 != 0;
      *a6 |= v21;
      ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaEn(v9, v21, v16);
      ZinAneTd<5u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
      if (!v20)
        goto LABEL_22;
      v22 = *(_QWORD *)(v13 + 32);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v13 + 40) - v22) >> 3) <= v16)
        ZinAssertImpl("Kernel DMA NE number greater than kernel data prepped\n");
      if (*(_BYTE *)(*a3 + 1255))
      {
        if (*((_BYTE *)a2[33] + 2))
        {
          if (((*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 15))(a2) & 1) != 0)
          {
            v23 = ZinDivRoundUp(*((_QWORD *)a2[33] + 6), v17);
            ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v23, v16);
            ZinDivRoundUp(*(_QWORD *)(*((_QWORD *)a2[33] + 7) + 8 * v16), v17);
            goto LABEL_28;
          }
          v22 = *(_QWORD *)(v13 + 32);
        }
        v26 = ZinDivRoundUp(*(_QWORD *)(v22 + v18), v17);
        ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v26, v16);
LABEL_28:
        ZinAneTd<4u>::SetKernelDmaSrcCoeffBaseOffset();
      }
      v25 = ZinDivRoundUp(*(_QWORD *)(v22 + v18), v17);
      v24 = v9;
LABEL_23:
      result = ZinAneTd<4u>::SetKernelDmaSrcCoeffMemBufferSize(v24, v25, v16++);
      v18 += 56;
      if (v16 >= *(unsigned int *)(*a3 + 8))
        return result;
    }
    ZinAneTd<4u>::SetKernelDmaSrcCoeffDmaEn(v9, 0, v16);
    ZinAneTd<5u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
LABEL_22:
    v24 = v9;
    v25 = 1;
    goto LABEL_23;
  }
  return result;
}

BOOL HandleNELayer<5u>(const ZinIrOpLayer *a1, int a2, ZinAneInstruction *a3, const ZinIrHalParameters **a4, ZinIrMemoryPool *a5, uint64_t a6, CFArrayRef *a7)
{
  ZinIrHalH13g *v13;
  const __CFString *v14;
  _BOOL8 result;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  ZinIrKernel *v22;
  uint64_t v23;
  ZinDynamicRange **v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 v31;

  v13 = (ZinIrHalH13g *)*((_QWORD *)a3 + 25);
  v31 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock(a1, a5, &v31)
    || (v30 = 0, ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a1, a5, &v30)))
  {
LABEL_3:
    v14 = CFSTR("CodeGenerationFailure");
LABEL_4:
    ZinIrNetworkStatus::SetError(a7, v14);
    return 0;
  }
  v16 = *((_QWORD *)a1 + 17);
  if (v16 && *(_QWORD *)(v16 + 784))
  {
    ZinAneTd<4u>::SetKernelBaseHeader((uint64_t)v13, v31);
    v17 = *(_QWORD **)(*((_QWORD *)a1 + 17) + 784);
    if (v17[1])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[2])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[4])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[3])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
  }
  if ((ZinAneInstruction::HandleCommonConfig(a3, a1, *a4, a7) & 1) != 0)
  {
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, const ZinIrHalParameters **, ZinIrMemoryPool *, ZinAneInstruction *))(*(_QWORD *)v13 + 312))(v13, a1, a4, a5, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("KernelDMASourceAllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, const ZinIrHalParameters *, uint64_t, ZinAneInstruction *))(*(_QWORD *)v13 + 248))(v13, a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("TileDMASourceAllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, const ZinIrHalParameters *))(**((_QWORD **)a3 + 25)
                                                                                              + 256))(*((_QWORD *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("L2AllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, const ZinIrHalParameters *))(**((_QWORD **)a3 + 25)
                                                                                              + 264))(*((_QWORD *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("NEConfigFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, const ZinIrHalParameters *, uint64_t, ZinAneInstruction *))(**((_QWORD **)a3 + 25) + 304))(*((_QWORD *)a3 + 25), a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("TileDMADestinationAllocationFailure");
      goto LABEL_4;
    }
    if (!ZinAneTd<4u>::ValidateOCGSizes(v13, a1))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      goto LABEL_3;
    }
    ZinAneTd<4u>::SetDoubleBufferingBasedOnOtherRegisters(v13, *((_DWORD *)*a4 + 4));
    if ((*((_DWORD *)v13 + 18) & 3) == 3
      || (v29 = dword_207AB0C3C[*((_DWORD *)v13 + 18) & 3], v18 = *((_DWORD *)v13 + 55) & 3, v18 == 3))
    {
      ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      return 0;
    }
    v19 = (char)(*((_DWORD *)v13 + 56) >> 5) >> 3;
    v20 = ZinMirPrepareBinaryPoint::CalculateBinaryPointAdjustment(v18, &v29);
    v21 = *((_DWORD *)v13 + 59);
    if (ZinIrOpLayer::IsNELayer(a1) && v20 + v19 + (HIWORD(v21) & 0x1F) >= 0x20u)
    {
      ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      return 0;
    }
    v22 = (ZinIrKernel *)*((_QWORD *)a1 + 17);
    if (v22)
    {
      if (ZinIrKernel::HasBias(v22))
      {
        v23 = *((_QWORD *)a1 + 17);
        if (*(_QWORD *)(v23 + 576))
        {
          v24 = (ZinDynamicRange **)(v23 + 576);
          v25 = ldexp(1.0, v20 + v19 + ((int)(*((_DWORD *)v13 + 58) << 11) >> 27));
          if (!ZinIrCodegenValidBiasShift(v24, v25, v26, v27, v28))
          {
            ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              HandleNELayer<17u>();
            return 0;
          }
        }
      }
    }
    if (!*((_BYTE *)*a4 + 1243) || (ZinAneTd<6u>::SetDPE((uint64_t)v13, (uint64_t)a1) & 1) != 0)
      return 1;
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  return result;
}

uint64_t ZinValidateTd<5u>::Test(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int HasWorkUnitWidthOf8;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t WUCost;
  _BOOL8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  _BOOL8 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BOOL8 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL8 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BOOL8 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BOOL8 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL8 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BOOL8 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _BOOL8 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BOOL8 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _BOOL8 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _BOOL8 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _BOOL8 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL8 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BOOL8 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BOOL8 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _BOOL8 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _BOOL8 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _BOOL8 v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  _BOOL8 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  _BOOL8 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _BOOL8 v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _BOOL8 v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _BOOL8 v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _BOOL8 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  __int16 v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _BOOL8 v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _BOOL8 v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _BOOL8 v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _BOOL8 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _BOOL4 v361;
  _BOOL8 v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  _BOOL8 v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _BOOL8 v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _BOOL8 v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  _BOOL8 v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _BOOL8 v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _BOOL8 v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _BOOL8 v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _BOOL8 v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  _BOOL8 v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  _BOOL8 v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  _BOOL8 v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  _BOOL8 v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  _BOOL8 v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  _BOOL8 v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  _BOOL8 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  _BOOL8 v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  _BOOL8 v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  _BOOL8 v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  unint64_t v519;
  float v520;
  BOOL v521;
  uint64_t v522;
  _BOOL8 v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  char v534;
  uint64_t v535;
  BOOL v536;
  uint64_t v537;
  _BOOL8 v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  _BOOL8 v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  _BOOL8 v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  char v563;
  _BOOL8 v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  _BOOL8 v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  _BOOL8 v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  int v589;
  __int16 v590;
  __int16 v591;
  __int16 v592;
  __int16 v593;
  uint64_t v594;
  uint64_t v595;
  unsigned int v596;
  int v597;
  unsigned int v598;
  unsigned int v599;
  char v600;
  char v601;
  unsigned int v602;
  unsigned int v603;
  uint64_t v604;
  unint64_t v605;
  int v606;
  int v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  _QWORD v612[5];

  v612[3] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a3 + 92);
  v4 = (v3 >> 8) & 7;
  v5 = (v3 >> 12) & 7;
  if (v5 > v4)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinValidateTd<5u>::Test(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  v14 = (v3 >> 16) & 7;
  if (v5 > v14)
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinValidateTd<4u>::Test(v15, v16, v17, v18, v19, v20, v21, v22);
    return 3;
  }
  if (v4 > v14)
  {
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinValidateTd<4u>::Test(v23, v24, v25, v26, v27, v28, v29, v30);
    return 3;
  }
  v32 = *(_DWORD *)(a3 + 64);
  v33 = v32 & 3;
  if ((v32 & 3) == 3)
  {
    v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v34)
      ZinValidateTd<4u>::Test(v34, v35, v36, v37, v38, v39, v40, v41);
    return 3;
  }
  v44 = *a1;
  v45 = *(unsigned int *)(a3 + 60);
  v46 = *(unsigned int *)(a3 + 76);
  v47 = *(unsigned int *)(a3 + 80);
  v48 = (v46 >> 16) & 0x7FFF;
  v49 = v46 & 0x7FFF;
  v51 = *(_DWORD *)(a3 + 68);
  v50 = *(_DWORD *)(a3 + 72);
  v52 = v47 & 0x1F;
  v53 = (v47 >> 28) & 3;
  v54 = v47 >> 30;
  v55 = *(_DWORD *)(a3 + 84);
  v56 = *(_DWORD *)(a3 + 88) & 0x7FFFLL;
  v57 = *(_DWORD *)(a3 + 184);
  v58 = *(_DWORD *)(a3 + 260);
  v59 = (v3 >> 2) & 1;
  v61 = *(_DWORD *)(a3 + 212);
  v60 = *(_DWORD *)(a3 + 216);
  v62 = dword_207AB0C3C[v33];
  if ((v3 & 4) != 0)
  {
    if ((v55 & 0x4000) != 0
      || (_DWORD)v53 != 1
      || (_DWORD)v54 != 1
      || (_DWORD)v4 != 4
      || (_DWORD)v5 != 4
      || (_DWORD)v14 != 4)
    {
      v104 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v104)
        ZinValidateTd<4u>::Test(v104, v105, v106, v107, v108, v109, v110, v111);
      return 3;
    }
    if (v52 >= 9)
    {
      v120 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v120)
        ZinValidateTd<4u>::Test(v120, v121, v122, v123, v124, v125, v126, v127);
      return 3;
    }
    v607 = v55;
    v591 = v61;
    v593 = v60;
    v595 = *a1;
    v597 = v56;
    v609 = v45;
    v611 = v46 & 0x7FFF;
    v599 = v58;
    v601 = v57;
    v588 = v51;
    v589 = v50;
    WUCost = NERasterization::GetWUCost(0x10uLL, 0x10uLL, 0x10uLL, v56, (v3 >> 2) & 1, 0, v49, v48, 0, 0, v62, *a1);
    v59 = (v3 >> 2) & 1;
    LOWORD(v61) = v591;
    LOWORD(v60) = v593;
    v51 = v588;
    v50 = v589;
    v55 = v607;
    v45 = v609;
    v53 = (v47 >> 28) & 3;
    v52 = v47 & 0x1F;
    v49 = v611;
    LODWORD(v33) = v32 & 3;
    v54 = v47 >> 30;
    v58 = v599;
    LOBYTE(v57) = v601;
    v44 = v595;
    LODWORD(v56) = v597;
    if (WUCost != 1)
    {
      v77 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v77)
        ZinValidateTd<4u>::Test(v77, v78, v79, v80, v81, v82, v83, v84);
      return 3;
    }
  }
  v608 = v45;
  v603 = v54;
  v604 = v53;
  v598 = v58;
  v600 = v57;
  v596 = v56;
  v63 = v32 & 0x30;
  v602 = v33;
  if ((_DWORD)v33 == 2 && v63 != 32)
  {
    v590 = v61;
    v592 = v60;
    v605 = v52;
    v606 = v55;
    v64 = v62;
    v594 = v44;
    v610 = v49;
    v65 = v50;
    v66 = v51;
    HasWorkUnitWidthOf8 = NERasterization::HasWorkUnitWidthOf8(v44, v64, 1 << (BYTE2(v3) & 7), 1 << v5, 1 << v4, v59, 0, v48, v49, 0, 0);
    LOWORD(v61) = v590;
    LOWORD(v60) = v592;
    v51 = v66;
    v50 = v65;
    v52 = v605;
    v55 = v606;
    v49 = v610;
    v44 = v594;
    if (HasWorkUnitWidthOf8)
    {
      v68 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v68)
        ZinValidateTd<4u>::Test(v68, v69, v70, v71, v72, v73, v74, v75);
      return 3;
    }
  }
  v85 = (v47 >> 12) & 7;
  v86 = *(_QWORD *)&v51 & 0x1FFFFLL;
  v87 = (v47 >> 6) & 0x1F;
  v88 = *(_QWORD *)&v50 & 0x1FFFFLL;
  v89 = (v47 >> 16) & 3;
  v90 = (v47 >> 18) & 3;
  v91 = (v47 >> 20) & 0xF;
  v92 = (v47 >> 24) & 0xF;
  v93 = v55 & 0x1FFF;
  v94 = v60 & 7;
  v95 = HIWORD(v55);
  if ((v61 & 0x400) != 0)
  {
    if (v93 <= 1)
    {
      v128 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v128)
        ZinValidateTd<4u>::Test(v128, v129, v130, v131, v132, v133, v134, v135);
      return 3;
    }
    if ((v60 & 7) != 0)
    {
      v112 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v112)
        ZinValidateTd<4u>::Test(v112, v113, v114, v115, v116, v117, v118, v119);
      return 3;
    }
    if ((*(_DWORD *)(a3 + 216) & 0x4018) == 8)
    {
      v136 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v136)
        ZinValidateTd<4u>::Test(v136, v137, v138, v139, v140, v141, v142, v143);
      return 3;
    }
    goto LABEL_174;
  }
  if (v94 != 1)
  {
    if (v94 != 2)
      goto LABEL_174;
    if (v86 != 2 * v88)
    {
      v144 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v144)
        ZinValidateTd<4u>::Test(v144, v145, v146, v147, v148, v149, v150, v151);
      return 3;
    }
    if (v85)
    {
      v96 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v96)
        return 3;
LABEL_37:
      ZinValidateTd<17u>::Test(v96, v97, v98, v99, v100, v101, v102, v103);
      return 3;
    }
    if ((_DWORD)v52 == 1)
    {
      if ((_DWORD)v87 == 1)
      {
        if ((_DWORD)v89 == 1)
        {
          if ((_DWORD)v90 == 1)
          {
            if ((_DWORD)v91)
            {
              v160 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v160)
                return 3;
LABEL_65:
              ZinValidateTd<17u>::Test(v160, v161, v162, v163, v164, v165, v166, v167);
              return 3;
            }
            if ((_DWORD)v92)
            {
              v200 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v200)
                return 3;
LABEL_91:
              ZinValidateTd<17u>::Test(v200, v201, v202, v203, v204, v205, v206, v207);
              return 3;
            }
            if ((_DWORD)v604 == 1)
            {
              if (v603 == 1)
              {
                if ((v55 & 0x4000) == 0)
                {
                  v208 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v208)
                    return 3;
LABEL_99:
                  ZinValidateTd<10u>::Test(v208, v209, v210, v211, v212, v213, v214, v215);
                  return 3;
                }
                if (HIWORD(v55) != 2)
                {
                  v240 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (v240)
                    ZinValidateTd<4u>::Test(v240, v241, v242, v243, v244, v245, v246, v247);
                  return 3;
                }
                if ((v3 & 4) == 0)
                {
                  if (((*(_DWORD *)(a3 + 212) ^ *(_DWORD *)(a3 + 64)) & 3) != 0)
                  {
                    v232 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v232)
                      return 3;
LABEL_117:
                    ZinValidateTd<17u>::Test(v232, v233, v234, v235, v236, v237, v238, v239);
                    return 3;
                  }
                  if ((v60 & 8) == 0)
                  {
                    v264 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v264)
                      return 3;
LABEL_133:
                    ZinValidateTd<6u>::Test(v264, v265, v266, v267, v268, v269, v270, v271);
                    return 3;
                  }
                  if ((v60 & 0x10) == 0)
                  {
                    if ((v60 & 0x4000) == 0)
                    {
                      v272 = *(_DWORD *)(a3 + 88) & 0x7FFF;
                      if (v272 != 1)
                        v272 = v48 % v272 == 1;
                      if (!(_DWORD)v14)
                        v272 = 1;
                      if ((_DWORD)v5 || !v272)
                        goto LABEL_174;
                      if (v602 <= 1)
                      {
                        if (v49 % *(_QWORD *)(v44 + 1864) <= *(_QWORD *)(v44 + 1856))
                        {
                          v273 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (!v273)
                            return 3;
LABEL_148:
                          ZinValidateTd<6u>::Test(v273, v274, v275, v276, v277, v278, v279, v280);
                          return 3;
                        }
                        goto LABEL_174;
                      }
                      if (v49 % *(_QWORD *)(v44 + 1856) > *(_QWORD *)(v44 + 1872))
                        goto LABEL_174;
                      v298 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (!v298)
                        return 3;
LABEL_171:
                      ZinValidateTd<10u>::Test(v298, v299, v300, v301, v302, v303, v304, v305);
                      return 3;
                    }
                    v290 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v290)
                      return 3;
LABEL_166:
                    ZinValidateTd<6u>::Test(v290, v291, v292, v293, v294, v295, v296, v297);
                    return 3;
                  }
                  v282 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v282)
                    return 3;
LABEL_162:
                  ZinValidateTd<6u>::Test(v282, v283, v284, v285, v286, v287, v288, v289);
                  return 3;
                }
                v256 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v256)
                  return 3;
LABEL_128:
                ZinValidateTd<10u>::Test(v256, v257, v258, v259, v260, v261, v262, v263);
                return 3;
              }
              v224 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v224)
                return 3;
LABEL_110:
              ZinValidateTd<17u>::Test(v224, v225, v226, v227, v228, v229, v230, v231);
              return 3;
            }
            v216 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!v216)
              return 3;
LABEL_106:
            ZinValidateTd<17u>::Test(v216, v217, v218, v219, v220, v221, v222, v223);
            return 3;
          }
          v192 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v192)
            return 3;
LABEL_86:
          ZinValidateTd<17u>::Test(v192, v193, v194, v195, v196, v197, v198, v199);
          return 3;
        }
        v184 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v184)
          return 3;
LABEL_82:
        ZinValidateTd<17u>::Test(v184, v185, v186, v187, v188, v189, v190, v191);
        return 3;
      }
      v176 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v176)
        return 3;
LABEL_78:
      ZinValidateTd<17u>::Test(v176, v177, v178, v179, v180, v181, v182, v183);
      return 3;
    }
    v168 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v168)
      return 3;
LABEL_74:
    ZinValidateTd<17u>::Test(v168, v169, v170, v171, v172, v173, v174, v175);
    return 3;
  }
  if ((_DWORD)v86 != (_DWORD)v88)
  {
    v152 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v152)
      ZinValidateTd<10u>::Test(v152, v153, v154, v155, v156, v157, v158, v159);
    return 3;
  }
  if (v85)
  {
    v96 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v96)
      return 3;
    goto LABEL_37;
  }
  if ((_DWORD)v52 != 1)
  {
    v168 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v168)
      return 3;
    goto LABEL_74;
  }
  if ((_DWORD)v87 != 1)
  {
    v176 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v176)
      return 3;
    goto LABEL_78;
  }
  if ((_DWORD)v89 != 1)
  {
    v184 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v184)
      return 3;
    goto LABEL_82;
  }
  if ((_DWORD)v90 != 1)
  {
    v192 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v192)
      return 3;
    goto LABEL_86;
  }
  if ((_DWORD)v91)
  {
    v160 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v160)
      return 3;
    goto LABEL_65;
  }
  if ((_DWORD)v92)
  {
    v200 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v200)
      return 3;
    goto LABEL_91;
  }
  if ((_DWORD)v604 != 1)
  {
    v216 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v216)
      return 3;
    goto LABEL_106;
  }
  if (v603 != 1)
  {
    v224 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v224)
      return 3;
    goto LABEL_110;
  }
  if ((v55 & 0x4000) == 0)
  {
    v208 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v208)
      return 3;
    goto LABEL_99;
  }
  if (HIWORD(v55) != 1)
  {
    v248 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v248)
      ZinValidateTd<4u>::Test(v248, v249, v250, v251, v252, v253, v254, v255);
    return 3;
  }
  if ((v3 & 4) != 0)
  {
    v256 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v256)
      return 3;
    goto LABEL_128;
  }
  if (((*(_DWORD *)(a3 + 212) ^ *(_DWORD *)(a3 + 64)) & 3) != 0)
  {
    v232 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v232)
      return 3;
    goto LABEL_117;
  }
  if ((v60 & 8) == 0)
  {
    v264 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v264)
      return 3;
    goto LABEL_133;
  }
  if ((v60 & 0x10) != 0)
  {
    v282 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v282)
      return 3;
    goto LABEL_162;
  }
  if ((v60 & 0x4000) != 0)
  {
    v290 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v290)
      return 3;
    goto LABEL_166;
  }
  v281 = *(_DWORD *)(a3 + 88) & 0x7FFF;
  if (v281 != 1)
    v281 = v48 % v281 == 1;
  if (!(_DWORD)v14)
    v281 = 1;
  if ((_DWORD)v5 || !v281)
    goto LABEL_174;
  if (v602 > 1)
  {
    if (v49 % *(_QWORD *)(v44 + 1856) > *(_QWORD *)(v44 + 1872))
      goto LABEL_174;
    v298 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v298)
      return 3;
    goto LABEL_171;
  }
  if (v49 % *(_QWORD *)(v44 + 1864) <= *(_QWORD *)(v44 + 1856))
  {
    v273 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v273)
      return 3;
    goto LABEL_148;
  }
LABEL_174:
  if (v91 >= v52 || *(_QWORD *)(v44 + 144) < v91)
  {
    v306 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v306)
      ZinValidateTd<4u>::Test(v306, v307, v308, v309, v310, v311, v312, v313);
    return 3;
  }
  if (v92 >= v87 || *(_QWORD *)(v44 + 152) < v92)
  {
    v314 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v314)
      ZinValidateTd<4u>::Test(v314, v315, v316, v317, v318, v319, v320, v321);
    return 3;
  }
  v322 = v55;
  v323 = ((int)v49 - 1) * (uint64_t)(int)v89 - v91;
  if (v323 >= (int64_t)(v608 & 0x7FFF))
  {
    v334 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v334)
      ZinValidateTd<4u>::Test(v334, v335, v336, v337, v338, v339, v340, v341);
    return 3;
  }
  v324 = (v608 >> 16) & 0x7FFF;
  v325 = ((int)v48 - 1) * (uint64_t)(int)v90 - v92;
  if (v325 >= v324)
  {
    v342 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v342)
      ZinValidateTd<4u>::Test(v342, v343, v344, v345, v346, v347, v348, v349);
    return 3;
  }
  if ((uint64_t)(v323 + ((v52 + v89 - 1) & -v89)) < (int64_t)(v608 & 0x7FFF))
  {
    v326 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v326)
      ZinValidateTd<6u>::Test(v326, v327, v328, v329, v330, v331, v332, v333);
    return 3;
  }
  if ((uint64_t)(v325 + ((v90 + v87 - 1) & -v90)) < v324)
  {
    v350 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v350)
      ZinValidateTd<6u>::Test(v350, v351, v352, v353, v354, v355, v356, v357);
    return 3;
  }
  v358 = v44;
  v359 = (v3 >> 19) & 3;
  if ((v322 & 0x4000) != 0)
  {
    v370 = v86 / v95;
    if (v86 % v95)
    {
      v371 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v371)
        ZinValidateTd<4u>::Test(v371, v372, v373, v374, v375, v376, v377, v378);
      return 3;
    }
    v387 = v88 / v370;
    if (v88 % v370)
    {
      v388 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v388)
        ZinValidateTd<4u>::Test(v388, v389, v390, v391, v392, v393, v394, v395);
      return 3;
    }
    if (v387 > 1 << v85)
    {
      v396 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v396)
        ZinValidateTd<4u>::Test(v396, v397, v398, v399, v400, v401, v402, v403);
      return 3;
    }
    if (v387 < 1 << v85 && v387 << v359 < (unint64_t)v88)
    {
      v476 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v476)
        ZinValidateTd<4u>::Test(v476, v477, v478, v479, v480, v481, v482, v483);
      return 3;
    }
    if (v85 && (v370 & ((1 << v359) + 0x1FFFF)) != 0)
    {
      v494 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v494)
        ZinValidateTd<4u>::Test(v494, v495, v496, v497, v498, v499, v500, v501);
      return 3;
    }
  }
  v361 = (_DWORD)v89 == 2 && (_DWORD)v604 == 2;
  if (v602 == 2)
  {
    if (v361)
    {
      if (*(_QWORD *)(v44 + 80) >= v52)
      {
        if (*(_QWORD *)(v44 + 72) > v52)
        {
          v412 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v412)
            ZinValidateTd<4u>::Test(v412, v413, v414, v415, v416, v417, v418, v419);
          return 3;
        }
        goto LABEL_241;
      }
      v379 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v379)
        return 3;
    }
    else
    {
      if ((_DWORD)v89 != 2 || (_DWORD)v604 != 1)
      {
        if (*(_QWORD *)(v44 + 88) < v52)
        {
          v428 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v428)
            ZinValidateTd<4u>::Test(v428, v429, v430, v431, v432, v433, v434, v435);
          return 3;
        }
        goto LABEL_241;
      }
      if (*(_QWORD *)(v44 + 80) >= v52)
        goto LABEL_241;
      v379 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v379)
        return 3;
    }
    ZinValidateTd<6u>::Test(v379, v380, v381, v382, v383, v384, v385, v386);
    return 3;
  }
  if (v361)
  {
    if (*(_QWORD *)(v44 + 56) < v52)
    {
      v362 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v362)
        return 3;
LABEL_205:
      ZinValidateTd<6u>::Test(v362, v363, v364, v365, v366, v367, v368, v369);
      return 3;
    }
    if (*(_QWORD *)(v44 + 48) > v52)
    {
      v404 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v404)
        ZinValidateTd<6u>::Test(v404, v405, v406, v407, v408, v409, v410, v411);
      return 3;
    }
  }
  else if ((_DWORD)v89 == 2 && (_DWORD)v604 == 1)
  {
    if (*(_QWORD *)(v44 + 56) < v52)
    {
      v362 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v362)
        return 3;
      goto LABEL_205;
    }
  }
  else if (*(_QWORD *)(v44 + 64) < v52)
  {
    v420 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v420)
      ZinValidateTd<4u>::Test(v420, v421, v422, v423, v424, v425, v426, v427);
    return 3;
  }
LABEL_241:
  if ((_DWORD)v90 == 2 && v603 == 2)
  {
    if (*(_QWORD *)(v44 + 104) < v87)
    {
      v436 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v436)
        return 3;
LABEL_245:
      ZinValidateTd<6u>::Test(v436, v437, v438, v439, v440, v441, v442, v443);
      return 3;
    }
    if (*(_QWORD *)(v44 + 96) > v87)
    {
      v444 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v444)
        ZinValidateTd<6u>::Test(v444, v445, v446, v447, v448, v449, v450, v451);
      return 3;
    }
  }
  else if ((_DWORD)v90 == 2 && v603 == 1)
  {
    if (*(_QWORD *)(v44 + 104) < v87)
    {
      v436 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v436)
        return 3;
      goto LABEL_245;
    }
  }
  else if (*(_QWORD *)(v44 + 112) < v87)
  {
    v452 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v452)
      ZinValidateTd<4u>::Test(v452, v453, v454, v455, v456, v457, v458, v459);
    return 3;
  }
  if (v604 * (unint64_t)v49 > *(_QWORD *)(v44 + 320))
  {
    v460 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v460)
      ZinValidateTd<4u>::Test(v460, v461, v462, v463, v464, v465, v466, v467);
    return 3;
  }
  if (v603 * (unint64_t)v48 > *(_QWORD *)(v44 + 336))
  {
    v468 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v468)
      ZinValidateTd<4u>::Test(v468, v469, v470, v471, v472, v473, v474, v475);
    return 3;
  }
  v484 = (v90 * v86 * v89) * (unint64_t)v93;
  v485 = *(_QWORD *)(v44 + 368);
  if (v484 > v485)
  {
    v486 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v486)
      ZinValidateTd<6u>::Test(v486, v487, v488, v489, v490, v491, v492, v493);
    return 3;
  }
  if (v603 * v88 * v604 * (unint64_t)v93 > v485)
  {
    v502 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v502)
      ZinValidateTd<6u>::Test(v502, v503, v504, v505, v506, v507, v508, v509);
    return 3;
  }
  if ((v600 & 8) != 0)
  {
    v518 = v598 & 3;
    v519 = HIBYTE(v598) & 0xF;
    v520 = 1.0;
    if (v518 == 1)
      v520 = 2.0;
    if (v518 == 2)
      v520 = 1.25;
    v521 = v518 == 1 && v63 == 32;
    v612[0] = 0x100u >> v5;
    v612[1] = 0x100u >> (BYTE2(v3) & 7);
    v612[2] = 0x100u >> v4;
    if (v521)
      v520 = 2.0;
    if (v602 == 2)
      v522 = 2;
    else
      v522 = 1;
    if (!*(_BYTE *)(v44 + 1313) || (_DWORD)v519 != 3)
    {
      v531 = 0;
      while ((uint64_t)(((uint64_t)(float)(v520 * (float)(v612[v531] / v522 * v604)) * v519) & 0x800000000000003FLL) < 1)
      {
        if (++v531 == 3)
        {
          v532 = (1 << v359 << v85);
          if (v93 == 1
            && ((unint64_t)(v532 - 1) + v88) >> (v359 + v85) == 1)
          {
            goto LABEL_278;
          }
          v533 = 0;
          v534 = 1;
          v535 = 4;
          do
          {
            if ((*(_QWORD *)&v534 & (v598 >> 28)) != 0)
              ++v533;
            v534 *= 2;
            --v535;
          }
          while (v535);
          v536 = v519 >= v533;
          v537 = v519 - v533;
          if (v537 != 0 && v536)
          {
            if (v532 % v537)
            {
              v538 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v538)
                ZinValidateTd<4u>::Test(v538, v539, v540, v541, v542, v543, v544, v545);
            }
            else
            {
              if (!(v88 % v537))
                goto LABEL_278;
              v580 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v580)
                ZinValidateTd<4u>::Test(v580, v581, v582, v583, v584, v585, v586, v587);
            }
          }
          else
          {
            v572 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v572)
              ZinValidateTd<6u>::Test(v572, v573, v574, v575, v576, v577, v578, v579);
          }
          return 3;
        }
      }
    }
    v523 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v523)
      ZinValidateTd<17u>::Test(v523, v524, v525, v526, v527, v528, v529, v530);
    return 3;
  }
LABEL_278:
  if ((*(_BYTE *)(a3 + 262) & 7) != 0)
  {
    v510 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v510)
      ZinValidateTd<6u>::Test(v510, v511, v512, v513, v514, v515, v516, v517);
    return 3;
  }
  if (!v596)
  {
    v554 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v554)
      ZinValidateTd<6u>::Test(v554, v555, v556, v557, v558, v559, v560, v561);
    return 3;
  }
  if (v596 > v48)
  {
    v546 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v546)
      ZinValidateTd<6u>::Test(v546, v547, v548, v549, v550, v551, v552, v553);
    return 3;
  }
  v562 = *(_DWORD *)(a3 + 212);
  if ((v562 & 3) == 2)
    v563 = v562 >> 4;
  else
    v563 = (v562 >> 4) + 1;
  if (*(_QWORD *)(v44 + 488) < (unint64_t)(1 << v563))
  {
    v564 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v564)
      ZinValidateTd<4u>::Test(v564, v565, v566, v567, v568, v569, v570, v571);
    return 3;
  }
  result = ZinValidateTd<5u>::CheckKMEMBufferSizes(v44, a3);
  if (!(_DWORD)result)
    return ZinValidateTd<6u>::CheckInRangeDmaAccess(v358, a2, a3);
  return result;
}

uint64_t ZinValidateTd<5u>::CheckKernelRewind(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  char v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == a1)
    return 0;
  LOBYTE(v2) = 0;
  while (1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 200);
    v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x4000) != 0)
      break;
LABEL_8:
    v2 = (v4 >> 12) & 1;
    v1 = *(_QWORD *)(v1 + 8);
    if (v1 == a1)
      return 0;
  }
  if ((v2 & 1) != 0)
  {
    v5 = 1 << (((unint64_t)*(unsigned int *)(v3 + 100) >> 19) & 3);
    v6 = (char *)(*(_QWORD *)(v3 + 40) + 4);
    while (1)
    {
      v7 = *v6;
      v6 += 24;
      if ((v7 & 1) != 0)
        break;
      if (!--v5)
        goto LABEL_8;
    }
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinValidateTd<6u>::CheckKernelRewind(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v17)
      ZinValidateTd<4u>::CheckKernelRewind(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  return 3;
}

uint64_t ZinValidateTd<5u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  void *__p[3];

  v4 = (*(_DWORD *)(a2 + 92) >> 19) & 3;
  v5 = (1 << ((*(_DWORD *)(a2 + 92) >> 19) & 3));
  v6 = *(_DWORD *)(a2 + 212);
  v7 = *(int *)(a1 + 8);
  v42 = 0;
  std::vector<unsigned long>::vector(__p, v7, &v42);
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = (unint64_t *)__p[0];
  v11 = (unsigned int *)(v9 + 12);
  do
  {
    v12 = *v11;
    v11 += 6;
    v10[v8++] = ((unint64_t)v12 >> 6) & 0x7FF;
  }
  while (v5 != v8);
  v13 = *(int *)(a1 + 8);
  if (v5 < v13)
  {
    v14 = v13 - v5;
    v15 = (char *)(v9 + 24 * v5 + 4);
    while (1)
    {
      v16 = *v15;
      v15 += 24;
      if ((v16 & 1) != 0)
        break;
      if (!--v14)
        goto LABEL_7;
    }
    v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v25)
      ZinValidateTd<6u>::CheckKernelRewind(v25, v26, v27, v28, v29, v30, v31, v32);
    goto LABEL_19;
  }
LABEL_7:
  v17 = 0;
  if ((v6 & 0x100) == 0 && v4)
  {
    v18 = 2;
    if (v5 > 2)
      v18 = v5;
    v21 = *v10;
    v19 = v10 + 1;
    v20 = v21;
    v22 = v18 - 1;
    while (1)
    {
      v24 = *v19++;
      v23 = v24;
      if (v24 > v20)
        break;
      v20 = v23;
      if (!--v22)
      {
        v17 = 0;
        goto LABEL_20;
      }
    }
    v33 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v33)
      ZinValidateTd<4u>::CheckKMEMBufferSizes(v33, v34, v35, v36, v37, v38, v39, v40);
LABEL_19:
    v17 = 3;
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v17;
}

void ZinValidateTd<5u>::Test(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

uint64_t GetPadMode<ZinIrConvUnitInfo>(uint64_t a1)
{
  return *(unsigned int *)(a1 + 328);
}

uint64_t IsChannelWise<ZinIrConvUnitInfo>(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 240) < 7u) & (0x54u >> *(_DWORD *)(a1 + 240));
}

BOOL IsDeconv<ZinIrConvUnitInfo>(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 240) - 3) < 2;
}

BOOL IsDilatedConv<ZinIrConvUnitInfo>(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 240) - 5) < 2;
}

uint64_t IsCompressed<ZinIrConvUnitInfo>(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 80) < 0xFu) & (0x7604u >> *(_DWORD *)(a1 + 80));
}

uint64_t *ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ValidatePaddingMode(uint64_t *result)
{
  int v1;
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  const __CFString *v12;

  v1 = *((_DWORD *)result + 126);
  if (v1 != 1)
  {
    v2 = result;
    v3 = *(_QWORD *)result[4];
    if (v1 == 9)
    {
      v6 = *(_DWORD **)(v3 + 1464);
      v7 = *(_DWORD **)(v3 + 1472);
      if (v6 != v7)
      {
        while (*v6 != 9)
        {
          if (++v6 == v7)
          {
            v6 = v7;
            break;
          }
        }
      }
      if (v6 == v7)
      {
        v12 = CFSTR("InvalidPaddingMode");
        result = std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)result + 1, (unint64_t *)&v12, (uint64_t *)&v12);
        *((_DWORD *)v2 + 126) = 1;
      }
      v8 = *((_DWORD *)v2 + 60);
      v9 = v8 > 0xC;
      v10 = (1 << v8) & 0x1006;
      if (v9 || v10 == 0)
        goto LABEL_9;
    }
    else
    {
      if (v1 != 3)
        goto LABEL_9;
      v4 = *(_DWORD **)(v3 + 1464);
      v5 = *(_DWORD **)(v3 + 1472);
      if (v4 != v5)
      {
        while (*v4 != 3)
        {
          if (++v4 == v5)
          {
            v4 = v5;
            break;
          }
        }
      }
      if (v4 == v5)
      {
LABEL_9:
        v12 = CFSTR("InvalidPaddingMode");
        result = std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)v2 + 1, (unint64_t *)&v12, (uint64_t *)&v12);
        *((_DWORD *)v2 + 126) = 1;
      }
    }
  }
  return result;
}

uint64_t *ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ValidateKernelFormat(uint64_t a1)
{
  unsigned int v2;
  uint64_t *result;
  uint64_t v4;
  int Upcasted4bitPaletteFormatFrom3bitPaletteFormat;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;

  v2 = *(_DWORD *)(a1 + 260);
  if (!v2)
  {
    *(_QWORD *)(a1 + 256) = 0x400000001;
    v2 = 4;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 180) && (FormatValidForMutableLayer(v2) & 1) == 0)
  {
    v14 = CFSTR("MutableInvalidFormat");
    result = std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v14, (uint64_t *)&v14);
    *(_BYTE *)(a1 + 356) = 0;
  }
  else
  {
    result = (uint64_t *)ZinKernelFormatIsPalette(v2);
    if ((_DWORD)result)
    {
      result = (uint64_t *)ZinIrHalParameters::IsSupportedPaletteFormat(**(_QWORD **)(a1 + 32), v2);
      if ((result & 1) == 0)
      {
        if (!Is3bitPaletteKernelFormat(v2)
          || (v4 = **(_QWORD **)(a1 + 32),
              Upcasted4bitPaletteFormatFrom3bitPaletteFormat = GetUpcasted4bitPaletteFormatFrom3bitPaletteFormat(v2),
              result = (uint64_t *)ZinIrHalParameters::IsSupportedPaletteFormat(v4, Upcasted4bitPaletteFormatFrom3bitPaletteFormat), (result & 1) == 0))
        {
          v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v6)
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ValidateKernelFormat(v6, v7, v8, v9, v10, v11, v12, v13);
          v14 = CFSTR("InvalidKernelType");
          return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v14, (uint64_t *)&v14);
        }
      }
    }
  }
  return result;
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::GetKernelFormat(uint64_t a1)
{
  return *(unsigned int *)(a1 + 260);
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ValidateKernelFootprint@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  int v9;
  char v10;
  char v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int CanUseKernelStreaming;
  char *v21;
  uint64_t v23[74];
  char v24;
  _QWORD *v25;
  char v26;
  int v27;
  unint64_t v28[5];
  _OWORD v29[2];
  uint64_t v30;
  unsigned int v31[3];
  unsigned int v32[3];
  _BYTE v33[8];
  uint64_t *v34;
  int8x16_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = **(_QWORD ***)(a1 + 32);
  ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)v33, a1);
  GetLogicalInputAndOutputSteps(a1 + 176, (uint64_t)v31);
  v5 = *(_DWORD *)(a1 + 416);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_OWORD *)(v6 + 24);
  v29[0] = *(_OWORD *)(v6 + 8);
  v29[1] = v7;
  v30 = *(_QWORD *)(v6 + 40);
  ZinGetOutputTensorDimension((uint64_t)v29, (_QWORD *)(a1 + 432), v31, v32, (int *)(a1 + 480), *(_QWORD *)(a1 + 248), (int *)(a1 + 456), (uint64_t)v28);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)*(unsigned __int8 *)(a1 + 360));
  v9 = v8;
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)*(unsigned __int8 *)(a1 + 361));
  v11 = v10;
  v12 = v5 - 3;
  if (ZinKernelFitsInKMEM(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) / *(uint64_t *)(*(_QWORD *)(a1 + 48) + 248), (v5 - 3) < 2, 0, (int *)(a1 + 468), (int8x16_t *)(a1 + 432), **(_DWORD **)(a1 + 40), *(_DWORD *)(a1 + 260), v4, v9, v10, *(unsigned int *)(a1 + 352)))
  {
    ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v39, (uint64_t)v33);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v25 = a2;
    v26 = 0;
    v13 = (char *)operator new(0x200uLL);
    *a2 = v13;
    a2[1] = v13;
    a2[2] = v13 + 512;
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>,ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo> const*,ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo> const*,ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>*>((uint64_t)(a2 + 2), (uint64_t)&v39, (uint64_t)&v41, (uint64_t)v13);
  }
  else
  {
    ZinKernelComputeStrideExpansion(v4, (int *)(a1 + 468), (unint64_t *)(a1 + 432), **(_DWORD **)(a1 + 40), v12 < 2, (int *)&v25);
    v15 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 384);
    v16 = *(_BYTE *)(a1 + 420);
    v17 = *(_QWORD *)(a1 + 424);
    v18 = *(_QWORD *)(a1 + 448);
    v19 = **(_DWORD **)(a1 + 40);
    LOBYTE(v23[0]) = 0;
    v24 = 0;
    CanUseKernelStreaming = ZinMirConvUtils::CanUseKernelStreaming(v16, v17, v18, v27, v28[0], v28[4], v28[2], v28[3], v19, (uint64_t)v4, v15, v23);
    std::__optional_destruct_base<ZinMirL2Config,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v23);
    if ((!CanUseKernelStreaming
       || !ZinKernelFitsInKMEM(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) / *(uint64_t *)(*(_QWORD *)(a1 + 48) + 248), v12 < 2, 1, (int *)(a1 + 468), (int8x16_t *)(a1 + 432), **(_DWORD **)(a1 + 40), *(_DWORD *)(a1 + 260), v4, v9, v11, *(unsigned int *)(a1 + 352)))&& *(_DWORD *)(a1 + 256) == 1)
    {
      v39.i64[0] = (uint64_t)CFSTR("InvalidKernelDimensions");
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(&v34, (unint64_t *)&v39, v39.i64);
      ZinKernelGetEstimatedFootprintPerCoutElement(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) / *(uint64_t *)(*(_QWORD *)(a1 + 48) + 248), v12 < 2, (int *)(a1 + 468), (int8x16_t *)(a1 + 432), **(_DWORD **)(a1 + 40), *(_DWORD *)(a1 + 260), v4, v9, v11, *(unsigned int *)(a1 + 352));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ValidateKernelFootprint();
      FindValidKMEMDesc(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) / *(uint64_t *)(*(_QWORD *)(a1 + 48) + 248), v12 < 2, (int *)(a1 + 468), (int8x16_t *)(a1 + 432), **(_DWORD **)(a1 + 40), *(_DWORD *)(a1 + 260), v4, v9, &v39, v11, *(unsigned int *)(a1 + 352));
      v35 = v39;
      v36 = v40;
    }
    ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v39, (uint64_t)v33);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v37 = a2;
    v38 = 0;
    v21 = (char *)operator new(0x200uLL);
    *a2 = v21;
    a2[1] = v21;
    a2[2] = v21 + 512;
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>,ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo> const*,ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo> const*,ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>*>((uint64_t)(a2 + 2), (uint64_t)&v39, (uint64_t)&v41, (uint64_t)v21);
  }
  a2[1] = v14;
  ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&v39);
  return ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)v33);
}

void sub_206FCCAD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  std::vector<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x508]);
  ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&STACK[0x518]);
  ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&STACK[0x308]);
  _Unwind_Resume(a1);
}

void sub_206FCCB68()
{
  JUMPOUT(0x206FCCB60);
}

BOOL FindValidKMEMDesc@<W0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, _QWORD *a7@<X6>, unsigned __int8 a8@<W7>, int8x16_t *a9@<X8>, char a10, uint64_t a11)
{
  _BOOL8 result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int8x16_t *v24;

  *a9 = *a4;
  a9[1].i64[0] = a4[1].i64[0];
  v24 = a9 + 1;
  result = ZinKernelFitsInKMEM(a1, a2, 0, a3, a9, a5, a6, a7, a8, a10, a11);
  if (!result)
  {
    v20 = &a9->i64[1];
    do
    {
      v21 = a9->i64[0];
      v22 = (uint64_t *)a9;
      if (a9->i64[0] == 1)
      {
        v21 = *v20;
        v22 = &a9->i64[1];
        if (*v20 == 1)
        {
          v22 = (uint64_t *)v24;
          v21 = v24->i64[0];
          if (v24->i64[0] == 1)
            break;
        }
      }
      v23 = v21 / 2;
      if (v23 <= 1)
        v23 = 1;
      *v22 = v23;
      result = ZinKernelFitsInKMEM(a1, a2, 0, a3, a9, a5, a6, a7, a8, a10, a11);
    }
    while (!result);
  }
  return result;
}

void ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::SetConvType(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 240) = a3;
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::SetValidDescKernelFormat(uint64_t result, int a2)
{
  *(_DWORD *)(result + 260) = a2;
  return result;
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::SetValidDescKernelPerCoutScaleFormat(uint64_t result, int a2)
{
  *(_DWORD *)(result + 400) = a2;
  return result;
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ResetValidDescQuantizationScale(uint64_t result, char a2)
{
  *(_DWORD *)(result + 404) = 1065353216;
  if ((a2 & 1) == 0)
    *(_BYTE *)(result + 360) = 0;
  return result;
}

uint64_t ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ResetValidDescQuantizationZeroPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 408) = 0;
  if ((a2 & 1) == 0)
    *(_BYTE *)(result + 361) = 0;
  return result;
}

__n128 ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::Desc2UnitInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;

  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(a2 + 8));
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 32);
  if (a3 != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a3 + 40), *(std::string **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
    v5 = *(_OWORD *)(a2 + 80);
    v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a3 + 112) = v6;
    *(_OWORD *)(a3 + 80) = v5;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a3 + 152), *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3);
  }
  v7 = *(_OWORD *)(a2 + 176);
  v8 = *(_OWORD *)(a2 + 192);
  v9 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a3 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a3 + 192) = v8;
  *(_OWORD *)(a3 + 208) = v9;
  *(_OWORD *)(a3 + 176) = v7;
  v11 = *(_OWORD *)(a2 + 288);
  v10 = *(_OWORD *)(a2 + 304);
  v12 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a3 + 316) = *(_OWORD *)(a2 + 316);
  *(_OWORD *)(a3 + 288) = v11;
  *(_OWORD *)(a3 + 304) = v10;
  *(_OWORD *)(a3 + 272) = v12;
  result = *(__n128 *)(a2 + 240);
  v14 = *(_OWORD *)(a2 + 256);
  *(__n128 *)(a3 + 240) = result;
  *(_OWORD *)(a3 + 256) = v14;
  return result;
}

BOOL IsCompressed<ANECConvLayerDesc>(uint64_t a1)
{
  return ZinCFStringEquals(*(const __CFString **)(a1 + 8), CFSTR("Sparse"))
      || ZinCFStringEquals(*(const __CFString **)(a1 + 8), CFSTR("Palette2Sparse"))
      || ZinCFStringEquals(*(const __CFString **)(a1 + 8), CFSTR("Palette4Sparse"))
      || ZinCFStringEquals(*(const __CFString **)(a1 + 8), CFSTR("Palette16Sparse"))
      || ZinCFStringEquals(*(const __CFString **)(a1 + 8), CFSTR("Palette64Sparse"))
      || ZinCFStringEquals(*(const __CFString **)(a1 + 8), CFSTR("Palette256Sparse"));
}

uint64_t GetPadMode<ANECConvLayerDesc>(uint64_t a1)
{
  if (ZinCFStringEquals(*(const __CFString **)(a1 + 24), CFSTR("Replication")))
    return 3;
  ZinCFStringEquals(*(const __CFString **)(a1 + 24), CFSTR("Zero"));
  return 1;
}

uint64_t ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::GetKernelFormat(uint64_t a1)
{
  return ZinGetKernelFormat(*(const __CFString **)(a1 + 136), *(const __CFString **)(a1 + 128));
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvType(uint64_t a1, _QWORD *a2, int a3)
{
  if ((a3 - 1) <= 5)
    *a2 = *((_QWORD *)&off_24C0606E0 + a3 - 1);
}

const __CFString *ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetValidDescKernelFormat(uint64_t a1, unsigned int a2)
{
  const __CFString *result;

  result = ZinIrKernelFormatToCFString(a2);
  *(_QWORD *)(a1 + 136) = result;
  return result;
}

const __CFString *ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetValidDescKernelPerCoutScaleFormat(uint64_t a1, unsigned int a2)
{
  const __CFString *result;

  result = ZinIrKernelFormatToCFString(a2);
  *(_QWORD *)(a1 + 272) = result;
  return result;
}

uint64_t ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ResetValidDescQuantizationScale(uint64_t result, char a2)
{
  *(_DWORD *)(result + 268) = 1065353216;
  if ((a2 & 1) == 0)
    *(_BYTE *)(result + 264) = 0;
  return result;
}

uint64_t ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ResetValidDescQuantizationZeroPoint(uint64_t result, char a2)
{
  *(_DWORD *)(result + 284) = 0;
  if ((a2 & 1) == 0)
    *(_BYTE *)(result + 280) = 0;
  return result;
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::~ZinConvValidator(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> const*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> const*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      *(_QWORD *)(a4 + v7) = &unk_24C01C7C8;
      std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(a4 + v7 + 8), a2 + v7 + 8);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + v7 + 32);
      *(_QWORD *)v8 = &unk_24C01B6F0;
      v9 = *(_OWORD *)(a2 + v7 + 40);
      v10 = *(_OWORD *)(a2 + v7 + 56);
      v11 = *(_OWORD *)(a2 + v7 + 72);
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + v7 + 88);
      *(_OWORD *)(v8 + 72) = v11;
      *(_OWORD *)(v8 + 56) = v10;
      *(_OWORD *)(v8 + 40) = v9;
      v12 = *(_OWORD *)(a2 + v7 + 104);
      v13 = *(_OWORD *)(a2 + v7 + 120);
      v14 = *(_OWORD *)(a2 + v7 + 136);
      *(_OWORD *)(v8 + 152) = *(_OWORD *)(a2 + v7 + 152);
      *(_OWORD *)(v8 + 136) = v14;
      *(_OWORD *)(v8 + 120) = v13;
      *(_OWORD *)(v8 + 104) = v12;
      v15 = *(_OWORD *)(a2 + v7 + 168);
      v16 = *(_OWORD *)(a2 + v7 + 184);
      v17 = *(_OWORD *)(a2 + v7 + 200);
      *(_OWORD *)(v8 + 216) = *(_OWORD *)(a2 + v7 + 216);
      *(_OWORD *)(v8 + 200) = v17;
      *(_OWORD *)(v8 + 184) = v16;
      *(_OWORD *)(v8 + 168) = v15;
      v18 = *(_OWORD *)(a2 + v7 + 232);
      v19 = *(_OWORD *)(a2 + v7 + 248);
      v20 = *(_OWORD *)(a2 + v7 + 280);
      *(_OWORD *)(v8 + 264) = *(_OWORD *)(a2 + v7 + 264);
      *(_OWORD *)(v8 + 280) = v20;
      *(_OWORD *)(v8 + 248) = v19;
      *(_OWORD *)(v8 + 232) = v18;
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206FCD0B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 296;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 296;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void (***v2)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = *a1;
  v2 = (void (***)(_QWORD))**a1;
  if (v2)
  {
    v4 = (void (***)(_QWORD))v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 37;
      do
      {
        (**v6)(v6);
        v7 = v6 == v2;
        v6 -= 37;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ValidateKernelFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: 1 and 2 bit palettes not supported.\n", a5, a6, a7, a8, 0);
}

void ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ValidateKernelFootprint()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Convolution configuration cannot fit in KMEM (Given: %zub, Max: %zub)\n", v1, v2, v3, v4, v5);
}

uint64_t ZinPEPatterns::BinaryPool::AnalyzeBinaryPool(int a1, int a2, ZinPattern *this)
{
  uint64_t result;
  uint64_t SingleMatch;
  ZinDeQuantLayer *v6;
  uint64_t v7;
  ZinDeQuantLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;

  result = ZinPattern::MatchCount(this);
  if (result)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "dequant1");
    SingleMatch = ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)__p);
    v6 = (ZinDeQuantLayer *)SingleMatch;
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if (!v6)
        goto LABEL_7;
    }
    else if (!SingleMatch)
    {
      goto LABEL_7;
    }
    if ((ZinDeQuantLayer::HasScale(v6) & 1) != 0)
      return 0;
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(__p, "dequant2");
    v7 = ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)__p);
    v8 = (ZinDeQuantLayer *)v7;
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if (!v8)
      {
LABEL_12:
        std::string::basic_string[abi:ne180100]<0>(__p, "main");
        v9 = ZinPattern::GetSingleMatch((uint64_t)this, (unsigned __int8 *)__p);
        v10 = v9;
        if ((v13 & 0x80000000) == 0)
        {
          if (!v9)
            return 0;
LABEL_16:
          v11 = *(_QWORD *)(v10 + 64);
          return !*(_BYTE *)(v11 + 116) && *(float *)(v11 + 112) == 1.0;
        }
        operator delete(__p[0]);
        if (v10)
          goto LABEL_16;
        return 0;
      }
    }
    else if (!v7)
    {
      goto LABEL_12;
    }
    if ((ZinDeQuantLayer::HasScale(v8) & 1) != 0)
      return 0;
    goto LABEL_12;
  }
  return result;
}

void sub_206FCD328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double ZinPEPatterns::BinaryPool::SharedClone@<D0>(ZinPEPatterns::BinaryPool *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinPEPatterns::BinaryPool,std::allocator<ZinPEPatterns::BinaryPool>,ZinPEPatterns::BinaryPool const&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

ZinPatternUtils *ZinPEPatterns::BinaryPool::Fuse(ZinANELayer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleMatch;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  ZinIrOpLayer *v11;
  uint64_t v12;
  ZinIrOpLayer *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  ZinPatternUtils *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t Pool;
  const char *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::string v54;
  void *v55[2];
  int64_t v56;
  std::string v57;
  void *__p[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  std::string v65;
  __int128 v66;
  std::string::size_type v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72[3];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  _BYTE v77[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v77, "texture");
  SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a1, v77);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  v73 = 0;
  v74 = 0;
  v75 = 0;
  std::string::basic_string[abi:ne180100]<0>(v77, "dequant1");
  *(_QWORD *)&v76 = ZinPattern::GetSingleMatch((uint64_t)a1, v77);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  std::string::basic_string[abi:ne180100]<0>(v77, "irelu1");
  *((_QWORD *)&v76 + 1) = ZinPattern::GetSingleMatch((uint64_t)a1, v77);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  std::string::basic_string[abi:ne180100]<0>(v77, "dequant2");
  v73 = ZinPattern::GetSingleMatch((uint64_t)a1, v77);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  std::string::basic_string[abi:ne180100]<0>(v77, "irelu2");
  v74 = ZinPattern::GetSingleMatch((uint64_t)a1, v77);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  std::string::basic_string[abi:ne180100]<0>(v77, "itranspose2");
  v75 = ZinPattern::GetSingleMatch((uint64_t)a1, v77);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  std::string::basic_string[abi:ne180100]<0>(v77, "main");
  v7 = ZinPattern::GetSingleMatch((uint64_t)a1, v77);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  std::string::basic_string[abi:ne180100]<0>(v77, "orelu");
  v8 = ZinPattern::GetSingleMatch((uint64_t)a1, v77);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  std::string::basic_string[abi:ne180100]<0>(__p, "ogoc");
  ZinPattern::GetMatch((uint64_t)a1, (unsigned __int8 *)__p, v77);
  ZinPatternUtils::ToGOC((uint64_t **)v77, v72);
  if (*(_QWORD *)v77)
  {
    *(_QWORD *)&v77[8] = *(_QWORD *)v77;
    operator delete(*(void **)v77);
  }
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  v9 = ZinMergeGOCSequence(a2, a3, (uint64_t)v72);
  std::string::basic_string[abi:ne180100]<0>(v77, "abs_or_zero_compare");
  v10 = ZinPattern::GetSingleMatch((uint64_t)a1, v77);
  *(_QWORD *)&v68 = ZinPatternUtils::GetAbsFromAbsOrZeroCompare(v10, v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "abs_or_zero_compare");
  v12 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)__p);
  *((_QWORD *)&v68 + 1) = ZinPatternUtils::GetZeroCompareFromAbsOrZeroCompare(v12, v13);
  v69 = v8;
  std::string::basic_string[abi:ne180100]<0>(&v66, "postogocrelu");
  v70 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v66);
  std::string::basic_string[abi:ne180100]<0>(&v65, "oquant");
  v71 = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&v65);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  v14 = *(_OWORD **)(v7 + 64);
  v16 = v14[4];
  v15 = v14[5];
  v17 = v14[6];
  v64 = v14[7];
  v18 = v14[1];
  v19 = v14[3];
  v59 = v14[2];
  v60 = v19;
  v62 = v15;
  v63 = v17;
  v61 = v16;
  *(_OWORD *)__p = v18;
  BYTE4(v64) = 1;
  LODWORD(v64) = 1065353216;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v57, a3, 1);
  v20 = *(char *)(v7 + 47);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)(v7 + 24);
  else
    v21 = *(const std::string::value_type **)(v7 + 24);
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v7 + 47);
  else
    v22 = *(_QWORD *)(v7 + 32);
  v23 = std::string::insert(&v57, 0, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v65, "_", 1uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  *(_QWORD *)&v77[16] = *((_QWORD *)&v25->__r_.__value_.__l + 2);
  *(_OWORD *)v77 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v54, "pe_bin_pool");
  v27 = std::string::append(&v54, "_xfm", 4uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v56 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)v55 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (v56 >= 0)
    v29 = v55;
  else
    v29 = (void **)v55[0];
  if (v56 >= 0)
    v30 = HIBYTE(v56);
  else
    v30 = (std::string::size_type)v55[1];
  v31 = std::string::append((std::string *)v77, (const std::string::value_type *)v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v67 = v31->__r_.__value_.__r.__words[2];
  v66 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  ZinPELayer::GetPostScaleAndBiasFromGOC((ZinGOCLayer *)v9, &v65);
  v33 = (ZinPatternUtils *)operator new();
  v34 = (*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)a1 + 56))(a1);
  v35 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v34 + 40))(v34, 0, 0);
  v36 = v35[1];
  v52 = *v35;
  v53 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(_QWORD *)(v7 + 16);
  (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v7 + 88) + 80))(v77, **(_QWORD **)(v7 + 88), 0, 0);
  v40 = operator new(0x78uLL);
  v57.__r_.__value_.__l.__size_ = (std::string::size_type)(v40 + 30);
  v57.__r_.__value_.__r.__words[2] = (std::string::size_type)(v40 + 30);
  v40[28] = v83;
  v41 = v82;
  v42 = v80;
  *((_OWORD *)v40 + 5) = v81;
  *((_OWORD *)v40 + 6) = v41;
  v43 = *(_OWORD *)&v77[16];
  *(_OWORD *)v40 = *(_OWORD *)v77;
  *((_OWORD *)v40 + 1) = v43;
  v44 = v79;
  *((_OWORD *)v40 + 2) = v78;
  *((_OWORD *)v40 + 3) = v44;
  *((_OWORD *)v40 + 4) = v42;
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
  v45 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
  Pool = ZinBuilder::CreatePool(v39, a3, (uint64_t *)&v57, (uint64_t)__p, *(_DWORD *)(v45 + 88));
  ZinPEPoolLayer::ZinPEPoolLayer((uint64_t)v33, &v52, &v66, SingleMatch, &v76, (uint64_t)&v73, Pool, &v68, (__int128 *)&v65);
  if (v57.__r_.__value_.__r.__words[0])
  {
    v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  v48 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  ZinPatternUtils::AssignDmaLayers(v33, a1, (const ZinPattern *)"dma_conv_input", 0, "dma_conv_output", v47);
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  return v33;
}

void sub_206FCD9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;
  uint64_t v60;
  void *v62;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v59, 0x10B3C40D0B38099);
  if (a59 < 0)
    operator delete(__p);
  v62 = *(void **)(v60 - 256);
  if (v62)
  {
    *(_QWORD *)(v60 - 248) = v62;
    operator delete(v62);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinPEPatterns::ElementWiseAdd::AnalyzeEW(uint64_t a1, uint64_t a2, ZinPattern *this)
{
  uint64_t matched;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  uint64_t *v10;
  char v11;
  float v12;
  uint64_t CanFoldPreScales;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  _BYTE v19[6];
  void *v20;
  unint64_t v21;
  void *v22[2];
  char v23;
  std::string v24;
  __int128 v25;
  std::string::size_type v26;
  void (**v27)(ZinObjectNameFactory *__hidden);
  void *v28;
  char v29;
  char v30;

  matched = ZinPattern::MatchCount(this);
  if (!matched)
    return 0;
  v7 = matched;
  std::string::basic_string[abi:ne180100]<0>(&v27, "dma_conv_input1");
  v19[0] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)&v27);
  std::string::basic_string[abi:ne180100]<0>(&v25, "irelu1");
  v19[1] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)&v25);
  std::string::basic_string[abi:ne180100]<0>(&v24, "dma_conv_input2");
  v19[2] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)&v24);
  std::string::basic_string[abi:ne180100]<0>(v22, "irelu2");
  v19[3] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)v22);
  std::string::basic_string[abi:ne180100]<0>(v17, "orelu");
  v19[4] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)v17);
  std::string::basic_string[abi:ne180100]<0>(__p, "dma_conv_output");
  v19[5] = ZinPattern::HasMatched((uint64_t)this, (unsigned __int8 *)__p);
  std::vector<BOOL>::vector(&v20, v19, 6);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  if (v29 < 0)
    operator delete(v27);
  LOBYTE(v22[0]) = 1;
  v27 = (void (**)(ZinObjectNameFactory *__hidden))v20;
  LODWORD(v28) = 0;
  *(_QWORD *)&v25 = (char *)v20 + 8 * (v21 >> 6);
  DWORD2(v25) = v21 & 0x3F;
  if (v7 != std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,false,BOOL,std::__identity,0>((uint64_t *)&v27, (uint64_t)&v25, v22))
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "presc_tmp");
    v8 = std::string::append(&v24, "_xfm", 4uLL);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v26 = v8->__r_.__value_.__r.__words[2];
    v25 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    ZinObjectNameFactory::ZinObjectNameFactory(&v27, &v25);
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v22, "prescale2");
    ZinPattern::GetMatch((uint64_t)this, (unsigned __int8 *)v22, &v24);
    ZinPatternUtils::ToGOC((uint64_t **)&v24, (uint64_t **)&v25);
    v10 = ZinMergeGOCSequence(a1, (uint64_t)&v27, (uint64_t)&v25);
    if ((_QWORD)v25)
    {
      *((_QWORD *)&v25 + 1) = v25;
      operator delete((void *)v25);
    }
    if (v24.__r_.__value_.__r.__words[0])
    {
      v24.__r_.__value_.__l.__size_ = v24.__r_.__value_.__r.__words[0];
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (v23 < 0)
      operator delete(v22[0]);
    LODWORD(v25) = 0;
    if (!v10
      || !ZinGOCLayer::GetOnlyGlobalScale((ZinGOCLayer *)v10, (float *)&v25)
      || (v11 = 0, v12 = fabsf(*(float *)&v25), v12 >= 0.1) && v12 <= 10.0)
    {
      v11 = 1;
    }
    v27 = off_24C01FBB0;
    if (v30 < 0)
    {
      operator delete(v28);
      if ((v11 & 1) != 0)
        goto LABEL_32;
    }
    else if ((v11 & 1) != 0)
    {
LABEL_32:
      CanFoldPreScales = ZinPEPatterns::ElementWise::CanFoldPreScales(a1, (uint64_t)this, a2);
      goto LABEL_36;
    }
  }
  CanFoldPreScales = 0;
LABEL_36:
  if (v20)
    operator delete(v20);
  return CanFoldPreScales;
}

void sub_206FCDEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  *(_QWORD *)(v36 - 72) = off_24C01FBB0;
  if (*(char *)(v36 - 41) < 0)
    operator delete(*(void **)(v36 - 64));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double ZinPEPatterns::ElementWiseAdd::SharedClone@<D0>(ZinPEPatterns::ElementWiseAdd *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWiseAdd,std::allocator<ZinPEPatterns::ElementWiseAdd>,ZinPEPatterns::ElementWiseAdd const&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

double ZinPEPatterns::ElementWise::SharedClone@<D0>(ZinPEPatterns::ElementWise *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWise,std::allocator<ZinPEPatterns::ElementWise>,ZinPEPatterns::ElementWise const&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinPEPatterns::ElementWise::ToScaledElementWise(uint64_t a1, ZinGOCLayer *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  float v18;
  float v19;

  v18 = 0.0;
  v19 = 1.0;
  ZinGOCLayer::UnshiftSingularScale(this, &v19);
  ZinGOCLayer::UnshiftSingularBias(this, &v18);
  v4 = operator new();
  ZinIrScaledEWInfo::ZinIrScaledEWInfo(v4, 0, 0, 0, 1.0, v19, v18);
  v17 = v4;
  v5 = operator new();
  v6 = (uint64_t *)(*(uint64_t (**)(ZinGOCLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, 0, 0);
  v7 = (std::__shared_weak_count *)v6[1];
  v15 = *v6;
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  ZinScaledElementWiseLayer::ZinScaledElementWiseLayer(v5, &v17, &v15, a1);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v5;
}

void sub_206FCE204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v11, 0x10B3C4024B96488);
  v13 = a11;
  a11 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinPEPatterns::ElementWise::ToScaledElementWise(uint64_t a1, _QWORD *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = 0;
  v5 = 0;
  switch(*(_DWORD *)(a2[8] + 12))
  {
    case 1:
      break;
    case 2:
      v5 = 0;
      v4 = 1;
      break;
    case 3:
      v5 = 0;
      v4 = 2;
      break;
    case 4:
      v4 = 0;
      v5 = 1;
      break;
    case 7:
      v5 = 0;
      v4 = 3;
      break;
    case 8:
      v5 = 0;
      v4 = 4;
      break;
    default:
      ZinAssertImpl("Unknown ElementWise opcode mapped to ScaledEW");
  }
  v6 = operator new();
  ZinIrScaledEWInfo::ZinIrScaledEWInfo(v6, v4, 0, v5, 1.0, 1.0, 0.0);
  v19 = v6;
  v7 = operator new();
  v8 = (uint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 40))(a2, 0, 0);
  v9 = (std::__shared_weak_count *)v8[1];
  v17 = *v8;
  v18 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ZinScaledElementWiseLayer::ZinScaledElementWiseLayer(v7, &v19, &v17, a1);
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  v19 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v7;
}

void sub_206FCE428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t ZinPEPatterns::ElementWise::UpdateScaledElementWise(uint64_t a1, uint64_t a2, ZinIrKernel **this, ZinGOCLayer *a4, ZinGOCLayer *a5, BOOL *a6)
{
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v20 = 0;
  if ((ZinPEPatterns::ElementWise::GenerateUpdatedScaleEWInfo(a2, this, a4, a5, &v20, a6) & 1) != 0)
  {
    v8 = operator new();
    v9 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 40))(a2, 0, 0);
    v10 = (std::__shared_weak_count *)v9[1];
    v18 = *v9;
    v19 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    ZinScaledElementWiseLayer::ZinScaledElementWiseLayer(v8, &v20, &v18, a1);
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v16 = v20;
  v20 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return v8;
}

void sub_206FCE5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinPEPatterns::ElementWise::GetPreScaleEffects(ZinIrKernel **this, const ZinGOCLayer *a2, const ZinGOCLayer *a3, float *a4, BOOL *a5, BOOL *a6)
{
  int HasScale;
  float SingularVal;

  *(_BYTE *)a4 = 0;
  *a5 = 0;
  *(_DWORD *)a3 = 1065353216;
  if (!this)
  {
LABEL_4:
    if (!a2)
      return;
    goto LABEL_9;
  }
  if (ZinOpLayerUtils::IsNegateGOC((ZinOpLayerUtils *)this, a2))
  {
    *(_BYTE *)a4 = 1;
    goto LABEL_4;
  }
  HasScale = ZinIrKernel::HasScale(this[17]);
  SingularVal = 1.0;
  if (HasScale)
    SingularVal = ZinIrVector::GetSingularVal(*((ZinIrVector **)this[17] + 71));
  *(float *)a3 = SingularVal;
  if (a2)
  {
LABEL_9:
    if (ZinOpLayerUtils::IsNegateGOC(a2, a2))
      *a5 = 1;
  }
}

uint64_t ZinPEPatterns::ElementWise::GenerateUpdatedScaleEWInfo(uint64_t a1, ZinIrKernel **this, ZinGOCLayer *a3, ZinGOCLayer *a4, uint64_t *a5, BOOL *a6)
{
  uint64_t v9;
  int v10;
  int v11;
  float v12;
  float v13;
  float v14;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  unsigned __int8 v22[10];

  v9 = *(_QWORD *)(a1 + 64);
  *(_WORD *)v22 = 0;
  v20 = 1.0;
  v21 = 1.0;
  if (a4)
    ZinGOCLayer::UnshiftSingularScale(a4, &v20);
  if (*(_DWORD *)(v9 + 12))
  {
    ZinPEPatterns::ElementWise::GetPreScaleEffects(this, a3, (const ZinGOCLayer *)&v21, (float *)&v22[1], (BOOL *)v22, a6);
    v10 = v22[1] != *(unsigned __int8 *)(v9 + 28);
    v11 = v22[0] != *(unsigned __int8 *)(v9 + 29);
    v12 = *(float *)(v9 + 16) * v21;
    v13 = *(float *)(v9 + 20) * v20;
  }
  else
  {
    v18 = 1.0;
    v19 = 1.0;
    if (this)
      ZinGOCLayer::UnshiftSingularScale((ZinGOCLayer *)this, &v19);
    if (a3)
    {
      ZinGOCLayer::UnshiftSingularScale(a3, &v18);
      v14 = v18;
    }
    else
    {
      v14 = 1.0;
    }
    v10 = *(unsigned __int8 *)(v9 + 28);
    v11 = *(unsigned __int8 *)(v9 + 29);
    v12 = (float)(*(float *)(v9 + 16) * v19) / v14;
    v13 = (float)(v14 * *(float *)(v9 + 20)) * v20;
  }
  if (ZinF16OutOfBounds(v12) || ZinF16OutOfBounds(v13))
    return 0;
  v16 = operator new();
  ZinIrScaledEWInfo::ZinIrScaledEWInfo(v16, *(_DWORD *)(v9 + 12), v10 != 0, v11 != 0, v12, v13, *(float *)(v9 + 24));
  v17 = *a5;
  *a5 = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return 1;
}

void sub_206FCE840(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40752B76BFLL);
  _Unwind_Resume(a1);
}

double ZinPEPatterns::ElementWiseMirror::SharedClone@<D0>(ZinPEPatterns::ElementWiseMirror *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWiseMirror,std::allocator<ZinPEPatterns::ElementWiseMirror>,ZinPEPatterns::ElementWiseMirror const&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

ZinPatternUtils *ZinPEPatterns::ElementWiseMirror::Fuse(ZinPEPatterns::ElementWise *a1, const ZinPattern *a2, const ZinIrOpLayerGraph *a3)
{
  ZinObjectNameFactory *v6;
  uint64_t SingleMatch;
  uint64_t v8;
  char v9;
  void *__p[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(__p, "scaled_ew");
  SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SingleMatch)
  {
    v8 = *(_QWORD *)(SingleMatch + 64);
    if (*(_DWORD *)(v8 + 8) == 6)
    {
      v9 = *(_BYTE *)(v8 + 28);
      *(_BYTE *)(v8 + 28) = *(_BYTE *)(v8 + 29);
      *(_BYTE *)(v8 + 29) = v9;
    }
  }
  return ZinPEPatterns::ElementWise::CreatePEEW(a1, a2, a3, v6);
}

void sub_206FCE938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinPEPatterns::ElementWiseMirror::GetInputEdges(ZinPEPatterns::ElementWiseMirror *this@<X0>, char **a2@<X8>)
{
  uint64_t FirstMatch;
  uint64_t v5;
  uint64_t v6;
  ZinMirTensorTransform *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t SinglePreviousLayer;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  void *__p;
  __int128 *v25;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  FirstMatch = ZinPattern::GetFirstMatch((ZinPEPatterns::ElementWiseMirror *)((char *)this + 216));
  v5 = *((_QWORD *)this + 24);
  v6 = v5 - *((_QWORD *)this + 23);
  if (v6)
  {
    v7 = (ZinMirTensorTransform *)FirstMatch;
    v8 = 0x4EC4EC4EC4EC4EC5 * (v6 >> 4);
    do
    {
      v9 = *(_QWORD *)(v5 - 208);
      v5 -= 208;
      (*(void (**)(void **__return_ptr, uint64_t))(v9 + 24))(&__p, v5);
      --v8;
      if (v25 == __p)
      {
        SinglePreviousLayer = ZinMirTensorTransform::GetSinglePreviousLayer(v7, v8);
        v11 = SinglePreviousLayer;
        if (SinglePreviousLayer)
        {
          v13 = (uint64_t *)a2[1];
          v12 = (unint64_t)a2[2];
          if ((unint64_t)v13 >= v12)
          {
            v15 = ((char *)v13 - *a2) >> 4;
            v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 60)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v17 = v12 - (_QWORD)*a2;
            if (v17 >> 3 > v16)
              v16 = v17 >> 3;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
              v18 = 0xFFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a2 + 2), v18);
            else
              v19 = 0;
            v20 = (uint64_t *)&v19[16 * v15];
            *v20 = v11;
            v20[1] = (uint64_t)v7;
            v22 = *a2;
            v21 = a2[1];
            v23 = v20;
            if (v21 != *a2)
            {
              do
              {
                *((_OWORD *)v23 - 1) = *((_OWORD *)v21 - 1);
                v23 -= 2;
                v21 -= 16;
              }
              while (v21 != v22);
              v21 = *a2;
            }
            v14 = (char *)(v20 + 2);
            *a2 = (char *)v23;
            a2[1] = (char *)(v20 + 2);
            a2[2] = &v19[16 * v18];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *v13 = SinglePreviousLayer;
            v13[1] = (uint64_t)v7;
            v14 = (char *)(v13 + 2);
          }
          a2[1] = v14;
        }
      }
      else
      {
        std::vector<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>,std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>>(a2, (uint64_t)a2[1], (__int128 *)__p, v25, ((char *)v25 - (_BYTE *)__p) >> 4);
      }
      if (__p)
      {
        v25 = (__int128 *)__p;
        operator delete(__p);
      }
    }
    while (v5 != *((_QWORD *)this + 23));
  }
}

void sub_206FCEB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

double ZinPEPatterns::GOC::SharedClone@<D0>(ZinPEPatterns::GOC *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinPEPatterns::GOC,std::allocator<ZinPEPatterns::GOC>,ZinPEPatterns::GOC const&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinPEPatterns::GOC::Fuse(uint64_t a1, uint64_t a2, const ZinGOCLayer *a3, void **a4)
{
  ZinDeQuantLayer *SingleMatch;
  uint64_t v9;
  uint64_t v10;
  uint64_t TernaryDynamicGOCLayer;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  ZinIrOpLayer *v50;
  uint64_t v51;
  ZinIrOpLayer *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  ZinObjectNameFactory *v57;
  ZinPEPatterns::GOC *v58;
  uint64_t ConstInLayer;
  unint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  __n128 DecoupledDynamicGOCScaleBiasTensorInfo;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  void **v79;
  std::string::size_type v80;
  std::string *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  int v86;
  int v87;
  int v88;
  void *v89;
  std::string::size_type v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  ZinDeQuantLayer *v95;
  uint64_t v96;
  std::string::size_type v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::string::size_type v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::string v104;
  void *v105[2];
  int64_t v106;
  std::string v107;
  std::string v108;
  void *v109[2];
  int64_t v110;
  char v111;
  _BYTE v112[32];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  int v118;
  __int128 v119;
  std::string::size_type v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  _BYTE v132[24];
  void *v133[3];
  void *v134;
  uint64_t *v135;
  unint64_t v136;
  std::string __p[15];
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "dequant1");
  SingleMatch = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "irelu1");
  v9 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "dequant2");
  v10 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "irelu2");
  v101 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "itranspose");
  v100 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  v99 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_goc");
  TernaryDynamicGOCLayer = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v121, "goc");
  ZinPattern::GetMatch(a1, (unsigned __int8 *)&v121, __p);
  ZinPatternUtils::ToGOC((uint64_t **)__p, (uint64_t **)&v134);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v122) < 0)
    operator delete((void *)v121);
  std::string::basic_string[abi:ne180100]<0>(__p, "per_channel_quant");
  v12 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  v13 = (_QWORD *)v12;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v13)
      goto LABEL_40;
  }
  else if (!v12)
  {
    goto LABEL_40;
  }
  v14 = ZinPatternUtils::ConvertQuantToGOC(v13, 0);
  v15 = v14;
  v16 = v135;
  if ((unint64_t)v135 >= v136)
  {
    v18 = ((char *)v135 - (_BYTE *)v134) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v19 = (uint64_t)(v136 - (_QWORD)v134) >> 2;
    if (v19 <= v18 + 1)
      v19 = v18 + 1;
    if (v136 - (unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v136, v20);
    else
      v21 = 0;
    v22 = (uint64_t *)&v21[8 * v18];
    v23 = &v21[8 * v20];
    *v22 = v15;
    v17 = v22 + 1;
    v24 = (char *)v135;
    v25 = (char *)v134;
    if (v135 != v134)
    {
      do
      {
        v26 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *--v22 = v26;
      }
      while (v24 != v25);
      v24 = (char *)v134;
    }
    v134 = v22;
    v135 = v17;
    v136 = (unint64_t)v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *v135 = v14;
    v17 = v16 + 1;
  }
  v135 = v17;
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(__p, "orelu");
  v98 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v121, "ogoc");
  ZinPattern::GetMatch(a1, (unsigned __int8 *)&v121, __p);
  ZinPatternUtils::ToGOC((uint64_t **)__p, (uint64_t **)v133);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v122) < 0)
    operator delete((void *)v121);
  v27 = ZinMergeGOCSequence(a2, (uint64_t)a3, (uint64_t)v133);
  ZinPELayer::GetPostScaleAndBiasFromGOC((ZinGOCLayer *)v27, v132);
  std::string::basic_string[abi:ne180100]<0>(__p, "otranspose");
  v97 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "oquant");
  v96 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v29 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v28 + 40))(v28, 0, 0);
  v30 = (std::__shared_weak_count *)v29[1];
  v130 = *v29;
  v131 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
  }
  if (TernaryDynamicGOCLayer)
    goto LABEL_54;
  v56 = ZinMergeGOCSequence(a2, (uint64_t)a3, (uint64_t)&v134);
  v58 = (ZinPEPatterns::GOC *)v56;
  if (v135 != v134 && v56 == 0)
    goto LABEL_135;
  ConstInLayer = ZinPatternUtils::CreateConstInLayer((ZinPatternUtils *)v56, a3, v57);
  v61 = (unint64_t)a4[2];
  v62 = (uint64_t *)a4[1];
  if ((unint64_t)v62 >= v61)
  {
    v64 = ((char *)v62 - (_BYTE *)*a4) >> 3;
    if ((unint64_t)(v64 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v65 = v61 - (_QWORD)*a4;
    v66 = v65 >> 2;
    if (v65 >> 2 <= (unint64_t)(v64 + 1))
      v66 = v64 + 1;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
      v67 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v67 = v66;
    if (v67)
      v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v67);
    else
      v68 = 0;
    v69 = (uint64_t *)&v68[8 * v64];
    v70 = &v68[8 * v67];
    *v69 = ConstInLayer;
    v63 = v69 + 1;
    v72 = (char *)*a4;
    v71 = (char *)a4[1];
    if (v71 != *a4)
    {
      do
      {
        v73 = *((_QWORD *)v71 - 1);
        v71 -= 8;
        *--v69 = v73;
      }
      while (v71 != v72);
      v71 = (char *)*a4;
    }
    *a4 = v69;
    a4[1] = v63;
    a4[2] = v70;
    if (v71)
      operator delete(v71);
  }
  else
  {
    *v62 = ConstInLayer;
    v63 = v62 + 1;
  }
  a4[1] = v63;
  ZinPEPatterns::GOC::ToDynamicGOCInfo(v58, &v129);
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(v28 + 88) + 80))(&v121, **(_QWORD **)(v28 + 88), 0, 0);
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a4[1] - 1) + 80))(&v119, *((_QWORD *)a4[1] - 1), 0, 0);
  DecoupledDynamicGOCScaleBiasTensorInfo = ZinPEGOCLayer::GetDecoupledDynamicGOCScaleBiasTensorInfo((uint64_t)&v119, 0, (uint64_t)v112);
  (*(void (**)(std::string *__return_ptr, const ZinGOCLayer *, uint64_t, __n128))(*(_QWORD *)a3 + 16))(&v107, a3, 1, DecoupledDynamicGOCScaleBiasTensorInfo);
  v75 = std::string::append(&v107, "_", 1uLL);
  v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v104, "dyngoc");
  v77 = std::string::append(&v104, "_xfm", 4uLL);
  v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v106 = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)v105 = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  if (v106 >= 0)
    v79 = v105;
  else
    v79 = (void **)v105[0];
  if (v106 >= 0)
    v80 = HIBYTE(v106);
  else
    v80 = (std::string::size_type)v105[1];
  v81 = std::string::append(&v108, (const std::string::value_type *)v79, v80);
  v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v109, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v106) < 0)
    operator delete(v105[0]);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  v95 = SingleMatch;
  v83 = *(_QWORD *)(v28 + 16);
  v84 = v129;
  v85 = *(float *)(v129 + 12);
  v86 = *(unsigned __int8 *)(v129 + 16);
  v87 = *(unsigned __int8 *)(v129 + 17);
  v88 = *(unsigned __int8 *)(v129 + 80);
  *(_OWORD *)&__p[2].__r_.__value_.__r.__words[2] = v125;
  *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1] = v126;
  *(_OWORD *)&__p[4].__r_.__value_.__l.__data_ = v127;
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v121;
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v122;
  *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = v123;
  *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = v124;
  *(_OWORD *)&__p[7].__r_.__value_.__l.__data_ = v114;
  *(_OWORD *)&__p[6].__r_.__value_.__r.__words[1] = v113;
  *(_OWORD *)&__p[5].__r_.__value_.__r.__words[2] = *(_OWORD *)&v112[16];
  *(_OWORD *)&__p[5].__r_.__value_.__l.__data_ = *(_OWORD *)v112;
  *(_OWORD *)&__p[9].__r_.__value_.__l.__data_ = v117;
  *(_OWORD *)&__p[8].__r_.__value_.__r.__words[1] = v116;
  *(_OWORD *)&__p[7].__r_.__value_.__r.__words[2] = v115;
  *(_OWORD *)&__p[11].__r_.__value_.__r.__words[1] = v113;
  *(_OWORD *)&__p[12].__r_.__value_.__l.__data_ = v114;
  LODWORD(__p[4].__r_.__value_.__r.__words[2]) = v128;
  LODWORD(__p[9].__r_.__value_.__r.__words[2]) = v118;
  *(_OWORD *)&__p[10].__r_.__value_.__l.__data_ = *(_OWORD *)v112;
  *(_OWORD *)&__p[10].__r_.__value_.__r.__words[2] = *(_OWORD *)&v112[16];
  LODWORD(__p[14].__r_.__value_.__r.__words[2]) = v118;
  *(_OWORD *)&__p[13].__r_.__value_.__r.__words[1] = v116;
  *(_OWORD *)&__p[14].__r_.__value_.__l.__data_ = v117;
  *(_OWORD *)&__p[12].__r_.__value_.__r.__words[2] = v115;
  v89 = operator new(0x168uLL);
  v90 = (std::string::size_type)v89 + 360;
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
  v108.__r_.__value_.__r.__words[2] = (std::string::size_type)v89 + 360;
  memcpy(v89, __p, 0x164uLL);
  v108.__r_.__value_.__l.__size_ = v90;
  TernaryDynamicGOCLayer = ZinBuilder::CreateTernaryDynamicGOCLayer(v83, (uint64_t)v109, v86 != 0, v87 != 0, v84 + 40, v88 != 0, (uint64_t *)&v108, 0, v85, 0);
  SingleMatch = v95;
  if (v108.__r_.__value_.__r.__words[0])
  {
    v108.__r_.__value_.__l.__size_ = v108.__r_.__value_.__r.__words[0];
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  v109[0] = off_24C01FBB0;
  if (v111 < 0)
    operator delete(v109[1]);
  (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  if (TernaryDynamicGOCLayer)
  {
LABEL_54:
    if (SingleMatch)
    {
      *(float *)(*(_QWORD *)(TernaryDynamicGOCLayer + 64) + 12) = ZinDeQuantLayer::GetScalarScale(SingleMatch)
                                                                  * *(float *)(*(_QWORD *)(TernaryDynamicGOCLayer + 64)
                                                                             + 12);
      ZinDeQuantLayer::RemoveScale(SingleMatch, a3);
    }
    (*(void (**)(_BYTE *__return_ptr, const ZinGOCLayer *, uint64_t))(*(_QWORD *)a3 + 16))(v112, a3, 1);
    v33 = *(char *)(TernaryDynamicGOCLayer + 47);
    if (v33 >= 0)
      v34 = (const std::string::value_type *)(TernaryDynamicGOCLayer + 24);
    else
      v34 = *(const std::string::value_type **)(TernaryDynamicGOCLayer + 24);
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(TernaryDynamicGOCLayer + 47);
    else
      v35 = *(_QWORD *)(TernaryDynamicGOCLayer + 32);
    v36 = std::string::append((std::string *)v112, v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(_QWORD *)&v122 = *((_QWORD *)&v36->__r_.__value_.__l + 2);
    v121 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append((std::string *)&v121, "_", 1uLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v108, "fuse_pegoc");
    v40 = std::string::append(&v108, "_xfm", 4uLL);
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v110 = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)v109 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (v110 >= 0)
      v42 = v109;
    else
      v42 = (void **)v109[0];
    if (v110 >= 0)
      v43 = HIBYTE(v110);
    else
      v43 = (std::string::size_type)v109[1];
    v44 = std::string::append(__p, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v120 = v44->__r_.__value_.__r.__words[2];
    v119 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v110) < 0)
      operator delete(v109[0]);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SBYTE7(v122) < 0)
      operator delete((void *)v121);
    if ((v112[23] & 0x80000000) != 0)
      operator delete(*(void **)v112);
    v46 = operator new();
    v102 = v130;
    v103 = v131;
    if (v131)
    {
      v47 = (unint64_t *)&v131->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    *(_QWORD *)&v121 = SingleMatch;
    *((_QWORD *)&v121 + 1) = v9;
    *(_QWORD *)&v122 = v100;
    *((_QWORD *)&v122 + 1) = v99;
    v107.__r_.__value_.__r.__words[0] = v10;
    v107.__r_.__value_.__l.__size_ = v101;
    std::string::basic_string[abi:ne180100]<0>(v112, "abs_or_zero_compare");
    v49 = ZinPattern::GetSingleMatch(a1, v112);
    __p[0].__r_.__value_.__r.__words[0] = ZinPatternUtils::GetAbsFromAbsOrZeroCompare(v49, v50);
    std::string::basic_string[abi:ne180100]<0>(v109, "abs_or_zero_compare");
    v51 = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)v109);
    __p[0].__r_.__value_.__l.__size_ = ZinPatternUtils::GetZeroCompareFromAbsOrZeroCompare(v51, v52);
    __p[0].__r_.__value_.__r.__words[2] = v98;
    std::string::basic_string[abi:ne180100]<0>(&v108, "postogocrelu");
    __p[1].__r_.__value_.__r.__words[0] = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&v108);
    __p[1].__r_.__value_.__l.__size_ = v97;
    __p[1].__r_.__value_.__r.__words[2] = v96;
    ZinPEGOCLayer::ZinPEGOCLayer(v46, &v102, &v119, &v121, &v107, TernaryDynamicGOCLayer, __p, v132);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if (SHIBYTE(v110) < 0)
      operator delete(v109[0]);
    if ((v112[23] & 0x80000000) != 0)
      operator delete(*(void **)v112);
    v53 = v103;
    if (v103)
    {
      v54 = (unint64_t *)&v103->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (SHIBYTE(v120) < 0)
      operator delete((void *)v119);
  }
  else
  {
LABEL_135:
    v46 = 0;
  }
  v91 = v131;
  if (v131)
  {
    v92 = (unint64_t *)&v131->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v133[0])
  {
    v133[1] = v133[0];
    operator delete(v133[0]);
  }
  if (v134)
  {
    v135 = (uint64_t *)v134;
    operator delete(v134);
  }
  return v46;
}

void sub_206FCF74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v42;
  void *v43;

  if (__p)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (STACK[0x270])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x270] + 8))(STACK[0x270]);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x278]);
  v42 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v42;
    operator delete(v42);
  }
  v43 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinPEPatterns::GOC::ToDynamicGOCInfo@<X0>(ZinPEPatterns::GOC *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  _OWORD v12[2];
  int v13;

  memset(v12, 0, sizeof(v12));
  v13 = 1065353216;
  v4 = (_QWORD *)(*(uint64_t (**)(ZinPEPatterns::GOC *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v5 = v4[6];
  if (v5 >= 2)
  {
    LODWORD(v11) = 0;
    *((_QWORD *)&v11 + 1) = v5;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v12, (int *)&v11, &v11);
  }
  v6 = v4[10];
  if (v6 >= 2)
  {
    LODWORD(v11) = 1;
    *((_QWORD *)&v11 + 1) = v6;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v12, (int *)&v11, &v11);
  }
  v7 = v4[8];
  if (v7 >= 2)
  {
    LODWORD(v11) = 3;
    *((_QWORD *)&v11 + 1) = v7;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v12, (int *)&v11, &v11);
  }
  v8 = v4[9];
  if (v8 >= 2)
  {
    LODWORD(v11) = 4;
    *((_QWORD *)&v11 + 1) = v8;
    std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::pair<ZinIrDimension const,unsigned long> const&>((uint64_t)v12, (int *)&v11, &v11);
  }
  v9 = operator new();
  ZinIrDynamicGOCInfo::ZinIrDynamicGOCInfo(v9, 1, 0, 0, v12, 1, 0, 0, 1.0);
  *a2 = v9;
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v12);
}

void sub_206FCFB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

double ZinPEPatterns::Dequant::SharedClone@<D0>(ZinPEPatterns::Dequant *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinPEPatterns::Dequant,std::allocator<ZinPEPatterns::Dequant>,ZinPEPatterns::Dequant const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

double ZinPEPatterns::DeQuantVector::SharedClone@<D0>(ZinPEPatterns::DeQuantVector *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinPEPatterns::DeQuantVector,std::allocator<ZinPEPatterns::DeQuantVector>,ZinPEPatterns::DeQuantVector const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinPEPatterns::DeQuantVector::Fuse(uint64_t a1, uint64_t a2, const ZinGOCLayer *a3, void **a4)
{
  uint64_t SingleMatch;
  uint64_t i;
  float NegatedZeroPoint;
  uint64_t v10;
  uint64_t v11;
  ZinPatternUtils *PerCoutGOC;
  ZinObjectNameFactory *v13;
  uint64_t ConstInLayer;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __n128 DecoupledDynamicGOCScaleBiasTensorInfo;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  int v40;
  int v41;
  int v42;
  char *v43;
  char *v44;
  uint64_t TernaryDynamicGOCLayer;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _BYTE v68[32];
  uint64_t v69;
  std::__shared_weak_count *v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  _QWORD v75[3];
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  _QWORD v85[15];
  _OWORD v86[7];
  int v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92[3];
  std::string __p[15];
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "vector_dequant");
  SingleMatch = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  for (i = *(_QWORD *)(SingleMatch + 112); i != *(_QWORD *)(SingleMatch + 120); i += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 8) != 31)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      ZinQuantizationLog::Log(SingleMatch, (int *)__p);
      break;
    }
  }
  ZinDeQuantLayer::GetScale((ZinDeQuantLayer *)SingleMatch, v92);
  v90 = 0;
  v89 = 0;
  v91 = 0;
  NegatedZeroPoint = ZinDeQuantLayer::GetNegatedZeroPoint((ZinDeQuantLayer *)SingleMatch, (uint64_t)&v89);
  v10 = *(_QWORD *)(SingleMatch + 16);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)SingleMatch + 32))(SingleMatch, 0, 0, NegatedZeroPoint);
  PerCoutGOC = (ZinPatternUtils *)ZinBuilder::CreatePerCoutGOC(v10, (uint64_t)a3, v11, (uint64_t)v92, (const void **)&v89, 0, 0, 4, 4u);
  ConstInLayer = ZinPatternUtils::CreateConstInLayer(PerCoutGOC, a3, v13);
  v15 = (unint64_t)a4[2];
  v16 = (uint64_t *)a4[1];
  if ((unint64_t)v16 >= v15)
  {
    v18 = ((char *)v16 - (_BYTE *)*a4) >> 3;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v19 = v15 - (_QWORD)*a4;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = ConstInLayer;
    v17 = v23 + 1;
    v26 = (char *)*a4;
    v25 = (char *)a4[1];
    if (v25 != *a4)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*a4;
    }
    *a4 = v23;
    a4[1] = v17;
    a4[2] = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v16 = ConstInLayer;
    v17 = v16 + 1;
  }
  a4[1] = v17;
  ZinPEPatterns::GOC::ToDynamicGOCInfo(PerCoutGOC, &v88);
  (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(SingleMatch + 88) + 80))(v86, **(_QWORD **)(SingleMatch + 88), 0, 0);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a4[1] - 1) + 80))(v85, *((_QWORD *)a4[1] - 1), 0, 0);
  DecoupledDynamicGOCScaleBiasTensorInfo = ZinPEGOCLayer::GetDecoupledDynamicGOCScaleBiasTensorInfo((uint64_t)v85, 0, (uint64_t)&v77);
  (*(void (**)(std::string *__return_ptr, const ZinGOCLayer *, uint64_t, __n128))(*(_QWORD *)a3 + 16))(&v74, a3, 1, DecoupledDynamicGOCScaleBiasTensorInfo);
  v29 = std::string::append(&v74, "_", 1uLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(_QWORD *)&v68[16] = *((_QWORD *)&v29->__r_.__value_.__l + 2);
  *(_OWORD *)v68 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v72, "dyngoc");
  v31 = std::string::append(&v72, "_xfm", 4uLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v73;
  else
    v33 = (std::string *)v73.__r_.__value_.__r.__words[0];
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  else
    size = v73.__r_.__value_.__l.__size_;
  v35 = std::string::append((std::string *)v68, (const std::string::value_type *)v33, size);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v75, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if ((v68[23] & 0x80000000) != 0)
    operator delete(*(void **)v68);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  v37 = *(_QWORD *)(SingleMatch + 16);
  v38 = v88;
  v39 = *(float *)(v88 + 12);
  v40 = *(unsigned __int8 *)(v88 + 16);
  v41 = *(unsigned __int8 *)(v88 + 17);
  v42 = *(unsigned __int8 *)(v88 + 80);
  *(_OWORD *)&__p[2].__r_.__value_.__r.__words[2] = v86[4];
  *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1] = v86[5];
  *(_OWORD *)&__p[4].__r_.__value_.__l.__data_ = v86[6];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v86[0];
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v86[1];
  *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = v86[2];
  *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = v86[3];
  *(_OWORD *)&__p[7].__r_.__value_.__l.__data_ = v80;
  *(_OWORD *)&__p[6].__r_.__value_.__r.__words[1] = v79;
  *(_OWORD *)&__p[5].__r_.__value_.__r.__words[2] = v78;
  *(_OWORD *)&__p[5].__r_.__value_.__l.__data_ = v77;
  *(_OWORD *)&__p[9].__r_.__value_.__l.__data_ = v83;
  *(_OWORD *)&__p[8].__r_.__value_.__r.__words[1] = v82;
  *(_OWORD *)&__p[7].__r_.__value_.__r.__words[2] = v81;
  *(_OWORD *)&__p[11].__r_.__value_.__r.__words[1] = v79;
  *(_OWORD *)&__p[12].__r_.__value_.__l.__data_ = v80;
  LODWORD(__p[4].__r_.__value_.__r.__words[2]) = v87;
  LODWORD(__p[9].__r_.__value_.__r.__words[2]) = v84;
  *(_OWORD *)&__p[10].__r_.__value_.__l.__data_ = v77;
  *(_OWORD *)&__p[10].__r_.__value_.__r.__words[2] = v78;
  LODWORD(__p[14].__r_.__value_.__r.__words[2]) = v84;
  *(_OWORD *)&__p[13].__r_.__value_.__r.__words[1] = v82;
  *(_OWORD *)&__p[14].__r_.__value_.__l.__data_ = v83;
  *(_OWORD *)&__p[12].__r_.__value_.__r.__words[2] = v81;
  v43 = (char *)operator new(0x168uLL);
  v44 = v43 + 360;
  *(_QWORD *)v68 = v43;
  *(_QWORD *)&v68[16] = v43 + 360;
  memcpy(v43, __p, 0x164uLL);
  *(_QWORD *)&v68[8] = v44;
  TernaryDynamicGOCLayer = ZinBuilder::CreateTernaryDynamicGOCLayer(v37, (uint64_t)v75, v40 != 0, v41 != 0, v38 + 40, v42 != 0, (uint64_t *)v68, 0, v39, 0);
  if (*(_QWORD *)v68)
  {
    *(_QWORD *)&v68[8] = *(_QWORD *)v68;
    operator delete(*(void **)v68);
  }
  (*(void (**)(std::string *__return_ptr, const ZinGOCLayer *, uint64_t))(*(_QWORD *)a3 + 16))(&v73, a3, 1);
  v46 = *(char *)(SingleMatch + 47);
  if (v46 >= 0)
    v47 = (const std::string::value_type *)(SingleMatch + 24);
  else
    v47 = *(const std::string::value_type **)(SingleMatch + 24);
  if (v46 >= 0)
    v48 = *(unsigned __int8 *)(SingleMatch + 47);
  else
    v48 = *(_QWORD *)(SingleMatch + 32);
  v49 = std::string::append(&v73, v47, v48);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  *(_QWORD *)&v68[16] = *((_QWORD *)&v49->__r_.__value_.__l + 2);
  *(_OWORD *)v68 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  v51 = std::string::append((std::string *)v68, "_", 1uLL);
  v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v71, "fuse_pegoc");
  v53 = std::string::append(&v71, "_xfm", 4uLL);
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v72;
  else
    v55 = (std::string *)v72.__r_.__value_.__r.__words[0];
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  else
    v56 = v72.__r_.__value_.__l.__size_;
  v57 = std::string::append(__p, (const std::string::value_type *)v55, v56);
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((v68[23] & 0x80000000) != 0)
    operator delete(*(void **)v68);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v59 = operator new();
  v60 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 40))(SingleMatch, 0, 0);
  v61 = (std::__shared_weak_count *)v60[1];
  v69 = *v60;
  v70 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldxr(p_shared_owners);
    while (__stxr(v63 + 1, p_shared_owners));
  }
  memset(v68, 0, sizeof(v68));
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = 0uLL;
  memset(__p, 0, 48);
  v73.__r_.__value_.__s.__data_[0] = 0;
  v73.__r_.__value_.__s.__data_[8] = 0;
  v73.__r_.__value_.__s.__data_[12] = 0;
  v73.__r_.__value_.__s.__data_[20] = 0;
  ZinPEGOCLayer::ZinPEGOCLayer(v59, &v69, &v74, v68, &v72, TernaryDynamicGOCLayer, __p, &v73);
  v64 = v70;
  if (v70)
  {
    v65 = (unint64_t *)&v70->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  v75[0] = off_24C01FBB0;
  if (v76 < 0)
    operator delete((void *)v75[1]);
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if (v92[0])
  {
    v92[1] = v92[0];
    operator delete(v92[0]);
  }
  return v59;
}

void sub_206FD0378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void *v43;
  void *v44;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x20BD002F8](v41, 0x10B3C404F75725BLL);
  if (a34 < 0)
    operator delete(__p);
  a35 = (uint64_t)off_24C01FBB0;
  if (a41 < 0)
    operator delete(a36);
  if (STACK[0x248])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x248] + 8))(STACK[0x248]);
  v43 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v43;
    operator delete(v43);
  }
  v44 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void sub_206FD055C()
{
  JUMPOUT(0x206FD0554);
}

ZinPatternUtils *ZinPEPatterns::Dequant::Fuse(ZinANELayer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleMatch;
  ZinDeQuantLayer *v6;
  unsigned int v7;
  uint64_t i;
  unsigned int ScalarZeroPoint;
  float ScalarScale;
  unsigned int v11;
  float v12;
  int v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  char v52;
  ZinPatternUtils *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::string __p;
  char v66;
  char v67;
  char v68;
  char v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[32];
  _BYTE v75[32];
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::string v80;
  __int128 v81;
  int64_t v82;
  _BYTE v83[24];
  uint64_t v84;
  _QWORD v85[3];

  v85[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "dequant");
  SingleMatch = ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "quant");
  v6 = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch((uint64_t)a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "quant");
  if ((ZinPattern::HasMatched((uint64_t)a1, (unsigned __int8 *)&__p) & 1) != 0)
  {
    v7 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v75, "dma_conv_output");
    v7 = ZinPattern::HasMatched((uint64_t)a1, v75) ^ 1;
    if ((v75[23] & 0x80000000) != 0)
      operator delete(*(void **)v75);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_18;
  }
  else if (!v7)
  {
    goto LABEL_18;
  }
  for (i = *(_QWORD *)(SingleMatch + 112); i != *(_QWORD *)(SingleMatch + 120); i += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)i + 64) + 8) != 31)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      ZinQuantizationLog::Log(SingleMatch, (int *)&__p);
      break;
    }
  }
LABEL_18:
  ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint((ZinDeQuantLayer *)SingleMatch);
  ScalarScale = ZinDeQuantLayer::GetScalarScale((ZinDeQuantLayer *)SingleMatch);
  if (v6)
  {
    v11 = ZinDeQuantLayer::GetScalarZeroPoint((ZinDeQuantLayer *)SingleMatch);
    v12 = ZinDeQuantLayer::GetScalarScale((ZinDeQuantLayer *)SingleMatch);
    v13 = ZinDeQuantLayer::GetScalarZeroPoint(v6);
    v14 = ZinDeQuantLayer::GetScalarScale(v6);
    v15 = (float)(v14 * (float)v13) + (float)((float)-v11 * v12);
    v16 = 1.0 / v14;
  }
  else
  {
    v16 = ScalarScale;
    v15 = (float)-ScalarZeroPoint;
    v12 = 1.0;
  }
  v17 = operator new();
  ZinIrScaledEWInfo::ZinIrScaledEWInfo(v17, 0, 0, 0, v12, v16, v15);
  v84 = v17;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(v74, a3, 1);
  v18 = *(char *)(SingleMatch + 47);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)(SingleMatch + 24);
  else
    v19 = *(const std::string::value_type **)(SingleMatch + 24);
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(SingleMatch + 47);
  else
    v20 = *(_QWORD *)(SingleMatch + 32);
  v21 = std::string::insert((std::string *)v74, 0, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  *(_QWORD *)&v75[16] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
  *(_OWORD *)v75 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append((std::string *)v75, "_", 1uLL);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v80, "convert_sew");
  v25 = std::string::append(&v80, "_xfm", 4uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v82 = v25->__r_.__value_.__r.__words[2];
  v81 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v82 >= 0)
    v27 = (const std::string::value_type *)&v81;
  else
    v27 = (const std::string::value_type *)v81;
  if (v82 >= 0)
    v28 = HIBYTE(v82);
  else
    v28 = *((_QWORD *)&v81 + 1);
  v29 = std::string::append(&__p, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(_QWORD *)&v83[16] = *((_QWORD *)&v29->__r_.__value_.__l + 2);
  *(_OWORD *)v83 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v75[23] & 0x80000000) != 0)
    operator delete(*(void **)v75);
  if ((v74[23] & 0x80000000) != 0)
    operator delete(*(void **)v74);
  v31 = operator new();
  v32 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 40))(SingleMatch, 0, 0);
  v33 = (std::__shared_weak_count *)v32[1];
  v78 = *v32;
  v79 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  ZinScaledElementWiseLayer::ZinScaledElementWiseLayer(v31, &v84, &v78, v83);
  v36 = v79;
  if (v79)
  {
    v37 = (unint64_t *)&v79->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(v74, a3, 1);
  v39 = *(char *)(SingleMatch + 47);
  if (v39 >= 0)
    v40 = (const std::string::value_type *)(SingleMatch + 24);
  else
    v40 = *(const std::string::value_type **)(SingleMatch + 24);
  if (v39 >= 0)
    v41 = *(unsigned __int8 *)(SingleMatch + 47);
  else
    v41 = *(_QWORD *)(SingleMatch + 32);
  v42 = std::string::insert((std::string *)v74, 0, v40, v41);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  *(_QWORD *)&v75[16] = *((_QWORD *)&v42->__r_.__value_.__l + 2);
  *(_OWORD *)v75 = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v44 = std::string::append((std::string *)v75, "_", 1uLL);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v80, "fuse_peew");
  v46 = std::string::append(&v80, "_xfm", 4uLL);
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v82 = v46->__r_.__value_.__r.__words[2];
  v81 = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (v82 >= 0)
    v48 = (const std::string::value_type *)&v81;
  else
    v48 = (const std::string::value_type *)v81;
  if (v82 >= 0)
    v49 = HIBYTE(v82);
  else
    v49 = *((_QWORD *)&v81 + 1);
  v50 = std::string::append(&__p, v48, v49);
  v51 = v50->__r_.__value_.__r.__words[0];
  v85[0] = v50->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v85 + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
  v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if ((v83[23] & 0x80000000) != 0)
    operator delete(*(void **)v83);
  *(_QWORD *)v83 = v51;
  *(_QWORD *)&v83[8] = v85[0];
  *(_QWORD *)&v83[15] = *(_QWORD *)((char *)v85 + 7);
  v83[23] = v52;
  if (SHIBYTE(v82) < 0)
    operator delete((void *)v81);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v75[23] & 0x80000000) != 0)
    operator delete(*(void **)v75);
  if ((v74[23] & 0x80000000) != 0)
    operator delete(*(void **)v74);
  v53 = (ZinPatternUtils *)operator new();
  v54 = (*(uint64_t (**)(ZinANELayer *))(*(_QWORD *)a1 + 56))(a1);
  v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v54 + 40))(v54, 0, 0);
  v56 = v55[1];
  v76 = *v55;
  v77 = (std::__shared_weak_count *)v56;
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  memset(v75, 0, sizeof(v75));
  memset(v74, 0, sizeof(v74));
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  memset(&__p, 0, sizeof(__p));
  v66 = 0;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v81 = 0uLL;
  v82 = 0;
  v80.__r_.__value_.__s.__data_[0] = 0;
  v80.__r_.__value_.__s.__data_[8] = 0;
  v80.__r_.__value_.__s.__data_[12] = 0;
  v80.__r_.__value_.__s.__data_[20] = 0;
  ZinPEElementWiseLayer::ZinPEElementWiseLayer((uint64_t)v53, &v76, (__int128 *)v83, v75, v74, v31, &__p, (uint64_t)&v81, (__int128 *)&v80);
  v60 = v77;
  if (v77)
  {
    v61 = (unint64_t *)&v77->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  ZinPatternUtils::AssignDmaLayers(v53, a1, (const ZinPattern *)"dma_conv_input", 0, "dma_conv_output", v59);
  if ((v83[23] & 0x80000000) != 0)
    operator delete(*(void **)v83);
  v63 = v84;
  v84 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  return v53;
}

void sub_206FD0C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a38 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

double ZinPEPatterns::QuantScalar::SharedClone@<D0>(ZinPEPatterns::QuantScalar *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinPEPatterns::QuantScalar,std::allocator<ZinPEPatterns::QuantScalar>,ZinPEPatterns::QuantScalar const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinPEPatterns::QuantScalar::Fuse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleMatch;
  float ScalarScale;
  int ScalarZeroPoint;
  float v8;
  uint64_t v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string *v40;
  __int128 v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::string __p;
  char v58;
  char v59;
  char v60;
  char v61;
  int v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[32];
  _BYTE v67[32];
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  char v73;
  char v74;
  __int128 v75;
  int64_t v76;
  _BYTE v77[24];
  uint64_t v78;
  _QWORD v79[3];

  v79[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "scalar_quant");
  SingleMatch = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(SingleMatch + 88) + 64) + 8) != 28)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    ZinQuantizationLog::Log(SingleMatch, (int *)&__p);
  }
  if ((ZinQuantLayer::HasPerCoutScale((ZinQuantLayer *)SingleMatch) & 1) != 0
    || ZinQuantLayer::HasPerCoutZeroPoint((ZinQuantLayer *)SingleMatch))
  {
    ZinAssertImpl("Unexpected perCout Scale or ZeroPoint");
  }
  ScalarScale = ZinDeQuantLayer::GetScalarScale((ZinDeQuantLayer *)SingleMatch);
  ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint((ZinDeQuantLayer *)SingleMatch);
  v8 = ZinDeQuantLayer::GetScalarScale((ZinDeQuantLayer *)SingleMatch);
  v9 = operator new();
  ZinIrScaledEWInfo::ZinIrScaledEWInfo(v9, 0, 0, 0, 1.0, 1.0 / ScalarScale, v8 * (float)ScalarZeroPoint);
  v78 = v9;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(v66, a3, 1);
  v10 = *(char *)(SingleMatch + 47);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)(SingleMatch + 24);
  else
    v11 = *(const std::string::value_type **)(SingleMatch + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(SingleMatch + 47);
  else
    v12 = *(_QWORD *)(SingleMatch + 32);
  v13 = std::string::insert((std::string *)v66, 0, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(_QWORD *)&v67[16] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)v67 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append((std::string *)v67, "_", 1uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "convert_sew");
  v18 = std::string::append(v17, "_xfm", 4uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v76 = v18->__r_.__value_.__r.__words[2];
  v75 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v76 >= 0)
    v20 = (const std::string::value_type *)&v75;
  else
    v20 = (const std::string::value_type *)v75;
  if (v76 >= 0)
    v21 = HIBYTE(v76);
  else
    v21 = *((_QWORD *)&v75 + 1);
  v22 = std::string::append(&__p, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  *(_QWORD *)&v77[16] = *((_QWORD *)&v22->__r_.__value_.__l + 2);
  *(_OWORD *)v77 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v76) < 0)
    operator delete((void *)v75);
  if (v74 < 0)
    operator delete((void *)v72);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v67[23] & 0x80000000) != 0)
    operator delete(*(void **)v67);
  if ((v66[23] & 0x80000000) != 0)
    operator delete(*(void **)v66);
  v24 = operator new();
  v25 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 40))(SingleMatch, 0, 0);
  v26 = (std::__shared_weak_count *)v25[1];
  v70 = *v25;
  v71 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  ZinScaledElementWiseLayer::ZinScaledElementWiseLayer(v24, &v78, &v70, v77);
  v29 = v71;
  if (v71)
  {
    v30 = (unint64_t *)&v71->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(v66, a3, 1);
  v32 = *(char *)(SingleMatch + 47);
  if (v32 >= 0)
    v33 = (const std::string::value_type *)(SingleMatch + 24);
  else
    v33 = *(const std::string::value_type **)(SingleMatch + 24);
  if (v32 >= 0)
    v34 = *(unsigned __int8 *)(SingleMatch + 47);
  else
    v34 = *(_QWORD *)(SingleMatch + 32);
  v35 = std::string::insert((std::string *)v66, 0, v33, v34);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  *(_QWORD *)&v67[16] = *((_QWORD *)&v35->__r_.__value_.__l + 2);
  *(_OWORD *)v67 = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append((std::string *)v67, "_", 1uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "fuse_peew");
  v40 = std::string::append(v39, "_xfm", 4uLL);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v76 = v40->__r_.__value_.__r.__words[2];
  v75 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (v76 >= 0)
    v42 = (const std::string::value_type *)&v75;
  else
    v42 = (const std::string::value_type *)v75;
  if (v76 >= 0)
    v43 = HIBYTE(v76);
  else
    v43 = *((_QWORD *)&v75 + 1);
  v44 = std::string::append(&__p, v42, v43);
  v45 = v44->__r_.__value_.__r.__words[0];
  v79[0] = v44->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v79 + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
  v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  *(_QWORD *)v77 = v45;
  *(_QWORD *)&v77[8] = v79[0];
  *(_QWORD *)&v77[15] = *(_QWORD *)((char *)v79 + 7);
  v77[23] = v46;
  if (SHIBYTE(v76) < 0)
    operator delete((void *)v75);
  if (v74 < 0)
    operator delete((void *)v72);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v67[23] & 0x80000000) != 0)
    operator delete(*(void **)v67);
  if ((v66[23] & 0x80000000) != 0)
    operator delete(*(void **)v66);
  v47 = operator new();
  v48 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 40))(SingleMatch, 0, 0);
  v49 = v48[1];
  v68 = *v48;
  v69 = (std::__shared_weak_count *)v49;
  if (v49)
  {
    v50 = (unint64_t *)(v49 + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  memset(v67, 0, sizeof(v67));
  memset(v66, 0, sizeof(v66));
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  memset(&__p, 0, sizeof(__p));
  v58 = 0;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v75 = 0uLL;
  v76 = 0;
  LOBYTE(v72) = 0;
  BYTE8(v72) = 0;
  BYTE12(v72) = 0;
  v73 = 0;
  ZinPEElementWiseLayer::ZinPEElementWiseLayer(v47, &v68, (__int128 *)v77, v67, v66, v24, &__p, (uint64_t)&v75, &v72);
  v52 = v69;
  if (v69)
  {
    v53 = (unint64_t *)&v69->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if ((v77[23] & 0x80000000) != 0)
    operator delete(*(void **)v77);
  v55 = v78;
  v78 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  return v47;
}

void sub_206FD144C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  MEMORY[0x20BD002F8](v43, 0x10B3C40E3B78B76);
  if (*(char *)(v44 - 105) < 0)
    operator delete(*(void **)(v44 - 128));
  v46 = *(_QWORD *)(v44 - 96);
  *(_QWORD *)(v44 - 96) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  _Unwind_Resume(a1);
}

double ZinPEPatterns::QuantVector::SharedClone@<D0>(ZinPEPatterns::QuantVector *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinPEPatterns::QuantVector,std::allocator<ZinPEPatterns::QuantVector>,ZinPEPatterns::QuantVector const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinPEPatterns::QuantVector::Fuse(uint64_t a1, uint64_t a2, const ZinGOCLayer *a3, void **a4)
{
  uint64_t SingleMatch;
  ZinPatternUtils *v8;
  ZinObjectNameFactory *v9;
  uint64_t ConstInLayer;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __n128 DecoupledDynamicGOCScaleBiasTensorInfo;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  uint64_t TernaryDynamicGOCLayer;
  int v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _BYTE v64[32];
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  _QWORD v71[3];
  char v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  _QWORD v81[15];
  _OWORD v82[7];
  int v83;
  uint64_t v84;
  std::string __p[15];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, "vector_quant");
  SingleMatch = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (*(_DWORD *)(*(_QWORD *)(**(_QWORD **)(SingleMatch + 88) + 64) + 8) != 28)
  {
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    ZinQuantizationLog::Log(SingleMatch, (int *)__p);
  }
  v8 = (ZinPatternUtils *)ZinPatternUtils::ConvertQuantToGOC((_QWORD *)SingleMatch, 0);
  ConstInLayer = ZinPatternUtils::CreateConstInLayer(v8, a3, v9);
  v11 = (unint64_t)a4[2];
  v12 = (uint64_t *)a4[1];
  if ((unint64_t)v12 >= v11)
  {
    v14 = ((char *)v12 - (_BYTE *)*a4) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v15 = v11 - (_QWORD)*a4;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a4 + 2), v17);
    else
      v18 = 0;
    v19 = (uint64_t *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = ConstInLayer;
    v13 = v19 + 1;
    v22 = (char *)*a4;
    v21 = (char *)a4[1];
    if (v21 != *a4)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)*a4;
    }
    *a4 = v19;
    a4[1] = v13;
    a4[2] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v12 = ConstInLayer;
    v13 = v12 + 1;
  }
  a4[1] = v13;
  ZinPEPatterns::GOC::ToDynamicGOCInfo(v8, &v84);
  (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(***(_QWORD ***)(SingleMatch + 88) + 80))(v82, **(_QWORD **)(SingleMatch + 88), 0, 0);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a4[1] - 1) + 80))(v81, *((_QWORD *)a4[1] - 1), 0, 0);
  DecoupledDynamicGOCScaleBiasTensorInfo = ZinPEGOCLayer::GetDecoupledDynamicGOCScaleBiasTensorInfo((uint64_t)v81, 0, (uint64_t)&v73);
  (*(void (**)(std::string *__return_ptr, const ZinGOCLayer *, uint64_t, __n128))(*(_QWORD *)a3 + 16))(&v70, a3, 1, DecoupledDynamicGOCScaleBiasTensorInfo);
  v25 = std::string::append(&v70, "_", 1uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  *(_QWORD *)&v64[16] = *((_QWORD *)&v25->__r_.__value_.__l + 2);
  *(_OWORD *)v64 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v68, "dyngoc");
  v27 = std::string::append(&v68, "_xfm", 4uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v69;
  else
    v29 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    size = v69.__r_.__value_.__l.__size_;
  v31 = std::string::append((std::string *)v64, (const std::string::value_type *)v29, size);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  ZinObjectNameFactory::ZinObjectNameFactory(v71, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if ((v64[23] & 0x80000000) != 0)
    operator delete(*(void **)v64);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  v33 = *(_QWORD *)(SingleMatch + 16);
  v34 = v84;
  v35 = *(float *)(v84 + 12);
  v36 = *(unsigned __int8 *)(v84 + 16);
  v37 = *(unsigned __int8 *)(v84 + 17);
  v38 = *(unsigned __int8 *)(v84 + 80);
  *(_OWORD *)&__p[2].__r_.__value_.__r.__words[2] = v82[4];
  *(_OWORD *)&__p[3].__r_.__value_.__r.__words[1] = v82[5];
  *(_OWORD *)&__p[4].__r_.__value_.__l.__data_ = v82[6];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v82[0];
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = v82[1];
  *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = v82[2];
  *(_OWORD *)&__p[2].__r_.__value_.__l.__data_ = v82[3];
  *(_OWORD *)&__p[7].__r_.__value_.__l.__data_ = v76;
  *(_OWORD *)&__p[6].__r_.__value_.__r.__words[1] = v75;
  *(_OWORD *)&__p[5].__r_.__value_.__r.__words[2] = v74;
  *(_OWORD *)&__p[5].__r_.__value_.__l.__data_ = v73;
  *(_OWORD *)&__p[9].__r_.__value_.__l.__data_ = v79;
  *(_OWORD *)&__p[8].__r_.__value_.__r.__words[1] = v78;
  *(_OWORD *)&__p[7].__r_.__value_.__r.__words[2] = v77;
  *(_OWORD *)&__p[11].__r_.__value_.__r.__words[1] = v75;
  *(_OWORD *)&__p[12].__r_.__value_.__l.__data_ = v76;
  LODWORD(__p[4].__r_.__value_.__r.__words[2]) = v83;
  LODWORD(__p[9].__r_.__value_.__r.__words[2]) = v80;
  *(_OWORD *)&__p[10].__r_.__value_.__l.__data_ = v73;
  *(_OWORD *)&__p[10].__r_.__value_.__r.__words[2] = v74;
  LODWORD(__p[14].__r_.__value_.__r.__words[2]) = v80;
  *(_OWORD *)&__p[13].__r_.__value_.__r.__words[1] = v78;
  *(_OWORD *)&__p[14].__r_.__value_.__l.__data_ = v79;
  *(_OWORD *)&__p[12].__r_.__value_.__r.__words[2] = v77;
  v39 = (char *)operator new(0x168uLL);
  v40 = v39 + 360;
  *(_QWORD *)v64 = v39;
  *(_QWORD *)&v64[16] = v39 + 360;
  memcpy(v39, __p, 0x164uLL);
  *(_QWORD *)&v64[8] = v40;
  TernaryDynamicGOCLayer = ZinBuilder::CreateTernaryDynamicGOCLayer(v33, (uint64_t)v71, v36 != 0, v37 != 0, v34 + 40, v38 != 0, (uint64_t *)v64, 0, v35, 0);
  if (*(_QWORD *)v64)
  {
    *(_QWORD *)&v64[8] = *(_QWORD *)v64;
    operator delete(*(void **)v64);
  }
  (*(void (**)(std::string *__return_ptr, const ZinGOCLayer *, uint64_t))(*(_QWORD *)a3 + 16))(&v69, a3, 1);
  v42 = *(char *)(SingleMatch + 47);
  if (v42 >= 0)
    v43 = (const std::string::value_type *)(SingleMatch + 24);
  else
    v43 = *(const std::string::value_type **)(SingleMatch + 24);
  if (v42 >= 0)
    v44 = *(unsigned __int8 *)(SingleMatch + 47);
  else
    v44 = *(_QWORD *)(SingleMatch + 32);
  v45 = std::string::append(&v69, v43, v44);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  *(_QWORD *)&v64[16] = *((_QWORD *)&v45->__r_.__value_.__l + 2);
  *(_OWORD *)v64 = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v47 = std::string::append((std::string *)v64, "_", 1uLL);
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v67, "fuse_pegoc");
  v49 = std::string::append(&v67, "_xfm", 4uLL);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &v68;
  else
    v51 = (std::string *)v68.__r_.__value_.__r.__words[0];
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
  else
    v52 = v68.__r_.__value_.__l.__size_;
  v53 = std::string::append(__p, (const std::string::value_type *)v51, v52);
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((v64[23] & 0x80000000) != 0)
    operator delete(*(void **)v64);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  v55 = operator new();
  v56 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)SingleMatch + 40))(SingleMatch, 0, 0);
  v57 = (std::__shared_weak_count *)v56[1];
  v65 = *v56;
  v66 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(p_shared_owners);
    while (__stxr(v59 + 1, p_shared_owners));
  }
  memset(v64, 0, sizeof(v64));
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = 0uLL;
  memset(__p, 0, 48);
  v69.__r_.__value_.__s.__data_[0] = 0;
  v69.__r_.__value_.__s.__data_[8] = 0;
  v69.__r_.__value_.__s.__data_[12] = 0;
  v69.__r_.__value_.__s.__data_[20] = 0;
  ZinPEGOCLayer::ZinPEGOCLayer(v55, &v65, &v70, v64, &v68, TernaryDynamicGOCLayer, __p, &v69);
  v60 = v66;
  if (v66)
  {
    v61 = (unint64_t *)&v66->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  v71[0] = off_24C01FBB0;
  if (v72 < 0)
    operator delete((void *)v71[1]);
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  return v55;
}

void sub_206FD1CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  MEMORY[0x20BD002F8](v41, 0x10B3C404F75725BLL);
  if (a34 < 0)
    operator delete(__p);
  a35 = (uint64_t)off_24C01FBB0;
  if (a41 < 0)
    operator delete(a36);
  if (STACK[0x248])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x248] + 8))(STACK[0x248]);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C055D50;
  return result;
}

uint64_t std::__function::__func<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Pool::Pool(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::Pool,std::allocator<ZinPEPatterns::Pool>,ZinPEPatterns::Pool const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::Pool>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::Pool const&,std::allocator<ZinPEPatterns::Pool>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD1F64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::Pool>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::Pool const&,std::allocator<ZinPEPatterns::Pool>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C640;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinPEPatterns::Pool,ZinPEPatterns::Pool const&,ZinPEPatterns::Pool*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206FD1FB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::Pool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::Pool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::Pool,ZinPEPatterns::Pool const&,ZinPEPatterns::Pool*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02BA68;
  return a1;
}

void sub_206FD2074(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::BinaryPool,std::allocator<ZinPEPatterns::BinaryPool>,ZinPEPatterns::BinaryPool const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2B0uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::BinaryPool const&,std::allocator<ZinPEPatterns::BinaryPool>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD20CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::BinaryPool const&,std::allocator<ZinPEPatterns::BinaryPool>,0>(_QWORD *a1, const ZinManyToOnePattern *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C448;
  a1[1] = 0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &off_24C02B750;
  return a1;
}

void sub_206FD2124(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::BinaryPool>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWiseAdd,std::allocator<ZinPEPatterns::ElementWiseAdd>,ZinPEPatterns::ElementWiseAdd const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2B0uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWiseAdd const&,std::allocator<ZinPEPatterns::ElementWiseAdd>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD21D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWiseAdd const&,std::allocator<ZinPEPatterns::ElementWiseAdd>,0>(_QWORD *a1, const ZinManyToOnePattern *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C560;
  a1[1] = 0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &off_24C02B908;
  return a1;
}

void sub_206FD222C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseAdd>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWise,std::allocator<ZinPEPatterns::ElementWise>,ZinPEPatterns::ElementWise const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2B0uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::ElementWise>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWise const&,std::allocator<ZinPEPatterns::ElementWise>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD22DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::ElementWise>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWise const&,std::allocator<ZinPEPatterns::ElementWise>,0>(_QWORD *a1, const ZinManyToOnePattern *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C480;
  a1[1] = 0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &off_24C02B7A8;
  return a1;
}

void sub_206FD2334(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::ElementWise>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::ElementWiseMirror,std::allocator<ZinPEPatterns::ElementWiseMirror>,ZinPEPatterns::ElementWiseMirror const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2B0uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWiseMirror const&,std::allocator<ZinPEPatterns::ElementWiseMirror>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD23E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::ElementWiseMirror const&,std::allocator<ZinPEPatterns::ElementWiseMirror>,0>(_QWORD *a1, const ZinManyToOnePattern *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C5D0;
  a1[1] = 0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &off_24C02B9B8;
  return a1;
}

void sub_206FD243C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C5D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C5D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::ElementWiseMirror>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::UnaryElementWise,std::allocator<ZinPEPatterns::UnaryElementWise>,ZinPEPatterns::UnaryElementWise const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::UnaryElementWise>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::UnaryElementWise const&,std::allocator<ZinPEPatterns::UnaryElementWise>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD24EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::UnaryElementWise>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::UnaryElementWise const&,std::allocator<ZinPEPatterns::UnaryElementWise>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C598;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinPEPatterns::UnaryElementWise,ZinPEPatterns::UnaryElementWise const&,ZinPEPatterns::UnaryElementWise*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206FD2538(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::UnaryElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::UnaryElementWise>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::UnaryElementWise,ZinPEPatterns::UnaryElementWise const&,ZinPEPatterns::UnaryElementWise*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B960;
  return a1;
}

void sub_206FD25FC(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C055CF8;
  return result;
}

void std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C055CF8;
}

uint64_t std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, ZinPattern **a4)
{
  uint64_t v4;
  ZinPattern *v5;
  uint64_t SingleMatch;
  _QWORD *v7;
  uint64_t *v8;
  BOOL HasShift;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  ZinDeQuantLayer *v15;
  ZinDeQuantLayer *v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  void *__p;
  void *v22;
  char v23;
  char v24;
  void *v25[2];
  char v26;
  void *v27;
  void *v28;

  v4 = *a2;
  v5 = *a4;
  std::string::basic_string[abi:ne180100]<0>(v25, "goc");
  ZinPattern::GetMatch((uint64_t)v5, (unsigned __int8 *)v25, &__p);
  ZinPatternUtils::ToGOC((uint64_t **)&__p, (uint64_t **)&v27);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v26 < 0)
    operator delete(v25[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "per_channel_quant");
  SingleMatch = ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
  v7 = (_QWORD *)SingleMatch;
  if (v23 < 0)
  {
    operator delete(__p);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (SingleMatch)
LABEL_9:
    ZinPatternUtils::ConvertQuantScaleToGOC(v7, &v27);
LABEL_10:
  if (v28 == v27)
    goto LABEL_19;
  ZinObjectNameFactory::ZinObjectNameFactory(&__p, *(_QWORD *)v27 + 24);
  v8 = ZinMergeGOCSequence(v4, (uint64_t)&__p, (uint64_t)&v27);
  if (v28 != v27 && !v8)
  {
    __p = off_24C01FBB0;
    if (v24 < 0)
      operator delete(v22);
    goto LABEL_39;
  }
  HasShift = ZinGOCLayer::HasShift((ZinIrKernel **)v8);
  v10 = HasShift;
  __p = off_24C01FBB0;
  if ((v24 & 0x80000000) == 0)
  {
    if (HasShift)
      goto LABEL_39;
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(&__p, "irelu2");
    v11 = ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
    if (v23 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "irelu3");
    v12 = ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
    if (v23 < 0)
      operator delete(__p);
    v13 = 0;
    if (v11 && v12)
      v13 = ZinIrActivationParams::operator==(v11 + 192, v12 + 192);
    if (v11 | v12)
      v14 = v13;
    else
      v14 = 1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "dequant2");
    v15 = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
    if (v23 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "dequant3");
    v16 = (ZinDeQuantLayer *)ZinPattern::GetSingleMatch((uint64_t)v5, (unsigned __int8 *)&__p);
    if (v23 < 0)
      operator delete(__p);
    v17 = v15 == v16;
    if (v15 != v16 && v15 && v16)
    {
      v17 = ZinDeQuantLayer::operator==(v15, v16);
    }
    else if (!v15)
    {
      goto LABEL_40;
    }
    if ((ZinDeQuantLayer::HasScale(v15) & 1) != 0)
      goto LABEL_39;
LABEL_40:
    if (ZinPattern::MatchCount(v5))
      v19 = v14;
    else
      v19 = 0;
    v18 = v19 & v17;
    goto LABEL_44;
  }
  operator delete(v22);
  if (!v10)
    goto LABEL_19;
LABEL_39:
  v18 = 0;
LABEL_44:
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  return v18;
}

void sub_206FD2910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_206FD2998(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    JUMPOUT(0x206FD298CLL);
  JUMPOUT(0x206FD2990);
}

uint64_t std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0,std::allocator<ZinPEPatterns::GOC::GOC(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&,unsigned long)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::GOC,std::allocator<ZinPEPatterns::GOC>,ZinPEPatterns::GOC const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2B0uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::GOC>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::GOC const&,std::allocator<ZinPEPatterns::GOC>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD2A50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::GOC>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::GOC const&,std::allocator<ZinPEPatterns::GOC>,0>(_QWORD *a1, const ZinManyToOnePattern *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C608;
  a1[1] = 0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  a1[3] = &off_24C02BA10;
  return a1;
}

void sub_206FD2AA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::GOC>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::GOC>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::GOC>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

void std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C055DA8;
  return result;
}

void std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C055DA8;
}

BOOL std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, ZinPattern **a4)
{
  return ZinPattern::MatchCount(*a4) != 0;
}

uint64_t std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::Dequant::Dequant(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::Dequant,std::allocator<ZinPEPatterns::Dequant>,ZinPEPatterns::Dequant const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::Dequant const&,std::allocator<ZinPEPatterns::Dequant>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD2C14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::Dequant const&,std::allocator<ZinPEPatterns::Dequant>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C678;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinPEPatterns::Dequant,ZinPEPatterns::Dequant const&,ZinPEPatterns::Dequant*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206FD2C60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::Dequant>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::Dequant,ZinPEPatterns::Dequant const&,ZinPEPatterns::Dequant*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02BAC0;
  return a1;
}

void sub_206FD2D34(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C055CA0;
  return result;
}

void std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C055CA0;
}

BOOL std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, ZinPattern **a4)
{
  return ZinPattern::MatchCount(*a4) != 0;
}

uint64_t std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::DeQuantVector::DeQuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::DeQuantVector,std::allocator<ZinPEPatterns::DeQuantVector>,ZinPEPatterns::DeQuantVector const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::DeQuantVector const&,std::allocator<ZinPEPatterns::DeQuantVector>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD2E48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::DeQuantVector const&,std::allocator<ZinPEPatterns::DeQuantVector>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C528;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinPEPatterns::DeQuantVector,ZinPEPatterns::DeQuantVector const&,ZinPEPatterns::DeQuantVector*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206FD2E94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::DeQuantVector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::DeQuantVector,ZinPEPatterns::DeQuantVector const&,ZinPEPatterns::DeQuantVector*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B8B0;
  return a1;
}

void sub_206FD2F68(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C055BF0;
  return result;
}

void std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C055BF0;
}

BOOL std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, ZinPattern **a4)
{
  return ZinPattern::MatchCount(*a4) != 0;
}

uint64_t std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantScalar::QuantScalar(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::QuantScalar,std::allocator<ZinPEPatterns::QuantScalar>,ZinPEPatterns::QuantScalar const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::QuantScalar const&,std::allocator<ZinPEPatterns::QuantScalar>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD307C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::QuantScalar const&,std::allocator<ZinPEPatterns::QuantScalar>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C4B8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinPEPatterns::QuantScalar,ZinPEPatterns::QuantScalar const&,ZinPEPatterns::QuantScalar*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206FD30C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C4B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C4B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::QuantScalar>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::QuantScalar,ZinPEPatterns::QuantScalar const&,ZinPEPatterns::QuantScalar*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B800;
  return a1;
}

void sub_206FD319C(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C055C48;
  return result;
}

void std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C055C48;
}

BOOL std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, ZinPattern **a4)
{
  return ZinPattern::MatchCount(*a4) != 0;
}

uint64_t std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0,std::allocator<ZinPEPatterns::QuantVector::QuantVector(ZinIrParameters const&,std::unordered_map<ZinIrOpLayer const*,std::shared_ptr<ZinPattern>> const&)::$_0>,BOOL ()(ZinIrOpLayerGraph const*,ZinIrParameters const&,ZinPattern const*)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinPEPatterns::QuantVector,std::allocator<ZinPEPatterns::QuantVector>,ZinPEPatterns::QuantVector const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::QuantVector const&,std::allocator<ZinPEPatterns::QuantVector>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD32B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::__shared_ptr_emplace[abi:ne180100]<ZinPEPatterns::QuantVector const&,std::allocator<ZinPEPatterns::QuantVector>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05C4F0;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinPEPatterns::QuantVector,ZinPEPatterns::QuantVector const&,ZinPEPatterns::QuantVector*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206FD32FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C4F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C05C4F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinPEPatterns::QuantVector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinPEPatterns::QuantVector,ZinPEPatterns::QuantVector const&,ZinPEPatterns::QuantVector*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24C02B858;
  return a1;
}

void sub_206FD33D0(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

__CFDictionary *ZinCreateCrossCorrelationUnit(uint64_t a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  CFNumberRef v4;
  __CFDictionary *Mutable;
  CFNumberRef v6;
  CFNumberRef v7;
  __int128 v9;
  uint64_t v10;
  int valuePtr;

  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  valuePtr = *(_QWORD *)(a1 + 80);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Unit, CFSTR("NumGroups"), v4);
  CFRelease(v4);
  Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (const void *)(a1 + 112));
  v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (const void *)(a1 + 116));
  CFDictionaryAddValue(Mutable, CFSTR("TemplateWidth"), v6);
  CFDictionaryAddValue(Mutable, CFSTR("TemplateHeight"), v7);
  CFRelease(v6);
  CFRelease(v7);
  v9 = *(_OWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 104);
  ZinAddPaddingToParamsDict(Mutable, (const ZinIrPadding *)&v9, 1);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

_QWORD *ZinSNELayer::ZinSNELayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  ZinIrKernel *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ZinIrKernel *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = a3[1];
  v14 = *a3;
  v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v13 = 0;
  ZinEngineLayer::ZinEngineLayer(a1, a2, &v14, a4, &v13);
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    ZinIrKernel::~ZinIrKernel(v8);
    MEMORY[0x20BD002F8]();
  }
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = off_24BFFDB40;
  return a1;
}

void sub_206FD35E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ZinIrKernel *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, ZinIrKernel *);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ZinSNELayer::Lower()
{
  return 0;
}

uint64_t ZinSNEConditionLayer::ZinSNEConditionLayer(uint64_t a1, int a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17[2];
  uint64_t v18;

  v8 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v8, 105);
  v9 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  v17[0] = v9;
  v17[1] = (uint64_t)v10;
  v18 = v8;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinSNELayer::ZinSNELayer((_QWORD *)a1, &v18, v17, a4);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = v18;
  v18 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *(_QWORD *)a1 = &off_24BFFDF18;
  *(_DWORD *)(a1 + 192) = a2;
  return a1;
}

void sub_206FD370C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void ZinSNEConditionLayer::Lower()
{
  ZinAssertImpl("Error: Use of unsupported layer.");
}

uint64_t ZinSNEConditionLayer::Clone(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16[2];

  v6 = operator new();
  v7 = v6;
  v8 = *(_DWORD *)(a1 + 192);
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v16[0] = v9;
  v16[1] = (uint64_t)v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ZinSNEConditionLayer::ZinSNEConditionLayer(v6, v8, v16, a3);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v7;
}

void sub_206FD382C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v9, 0x10B3C40CDBD2B31);
  _Unwind_Resume(a1);
}

uint64_t ZinSNEConditionLayer::ConvertNonLinearModeToPredicateOp(int a1)
{
  if ((a1 - 25) > 5)
    return 7;
  else
    return dword_207AB1C0C[a1 - 25];
}

void ZinMirLiveOutUnit::ZinMirLiveOutUnit(ZinMirLiveOutUnit *this, ZinMirUnit::CommonUnitInfo *a2)
{
  *(_QWORD *)ZinMirUnit::ZinMirUnit((uint64_t)this, 31, (__int128 *)a2) = &off_24C01D2C0;
}

uint64_t ZinMirLiveOutUnit::DynamicShapeOutputTensorDimensions(uint64_t a1, __int128 **a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  v3 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 40)
    return 3;
  result = 0;
  v5 = *v3;
  v6 = v3[1];
  *(_QWORD *)(a3 + 32) = *((_QWORD *)v3 + 4);
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t ZinMirLiveOutUnit::CreateLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 104))
    ZinAssertImpl("LiveOut layer should not have MIR info");
  v4 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v4, 31);
  v17 = v4;
  v5 = operator new();
  v6 = v5;
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 8);
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  ZinLiveOutLayer::ZinLiveOutLayer(v5, &v17, &v15, a1 + 8);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v6;
}

void sub_206FD39E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinMirBankConflictOptimizer::ComputeResidentSymbolStrides(ZinMirBankConflictOptimizer *this@<X0>, const ZinIrTensor *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10[2];
  void *__p;
  _QWORD *v12[3];
  _BYTE v13[88];
  __int128 v14[7];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  ZinIrTensor::GetDimensionOrderHint(this, (uint64_t)&__p);
  v16 = 0;
  ZinIrTensor::InferDescriptor((unsigned __int8 *)this, 1, (uint64_t)&__p, 1, 1, (uint64_t)v15, (uint64_t)v13);
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  if (__p)
  {
    v12[0] = __p;
    operator delete(__p);
  }
  v12[0] = 0;
  v12[1] = 0;
  v10[1] = 0;
  __p = v12;
  v9 = (uint64_t *)v10;
  v10[0] = 0;
  ZinMirBankConflictOptimizer::GetConsumersProducersForL2StrideOptimization(this, (uint64_t **)&__p, &v9);
  ZinMirBankConflictOptimizer::ComputeOptimizedL2Strides(this, v14, &__p, &v9, a2, a3);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v9, v10[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&__p, v12[0]);
}

void sub_206FD3B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a4);
  v7 = *(_QWORD **)(v5 - 64);
  if (v7 == v4)
  {
    v8 = 4;
    v7 = (_QWORD *)(v5 - 88);
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  ZinIrLocalRegAlloc::AllocateResidentSymbol((uint64_t)va);
  _Unwind_Resume(a1);
}

void ZinMirBankConflictOptimizer::GetConsumersProducersForL2StrideOptimization(ZinIrTensor *a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD **v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14[2];

  v6 = *((_QWORD *)a1 + 12);
  v7 = *(uint64_t **)(v6 + 112);
  v8 = *(uint64_t **)(v6 + 120);
  while (v7 != v8)
  {
    v13 = (_QWORD *)*v7;
    if (*(_DWORD *)(v13[8] + 8) != 7)
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(a2, (unint64_t *)&v13, (uint64_t *)&v13);
    ++v7;
  }
  if (!ZinIrTensor::IsLiveInLiveStateOrConstTensor(a1)
    && *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 12) + 64) + 8) != 7)
  {
    v13 = (_QWORD *)*((_QWORD *)a1 + 12);
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(a3, (unint64_t *)&v13, (uint64_t *)&v13);
  }
  ZinIrTensor::GetChildren(a1, (uint64_t)&v13);
  v9 = v13;
  if (v13 != v14)
  {
    do
    {
      ZinMirBankConflictOptimizer::GetConsumersProducersForL2StrideOptimization(v9[4], a2, a3);
      v10 = (_QWORD *)v9[1];
      if (v10)
      {
        do
        {
          v11 = (_QWORD **)v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD **)v9[2];
          v12 = *v11 == v9;
          v9 = v11;
        }
        while (!v12);
      }
      v9 = v11;
    }
    while (v11 != v14);
  }
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_206FD3D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::shared_ptr<ZinIrTensor>,ZinIrIdComparator<std::shared_ptr<ZinIrTensor>>,std::allocator<std::shared_ptr<ZinIrTensor>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void ZinMirBankConflictOptimizer::ComputeOptimizedL2Strides(ZinIrTensor *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const ZinANELayer *v10;
  uint64_t v11;
  ZinIrTensor **v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  ZinIrOpLayer *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int IsAllInputsResident;
  _QWORD *v23;
  _QWORD *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  ZinReshapeLayerUtils *v31;
  uint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  __int128 v35;
  int *v36;
  int *v37;
  unint64_t v38;
  _DWORD *v39;
  int64_t v40;
  int v41;
  __int128 v42;
  char *i;
  __int128 v44;
  int *v45;
  int *v46;
  int v47;
  _DWORD *v48;
  int v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _QWORD *v58;
  _QWORD *v60;
  void *__p;
  _BYTE *v63;
  void *v64;
  int *v65;
  _OWORD v66[2];
  uint64_t v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  _BYTE __dst[452];
  _BYTE v77[16];
  uint64_t *v78;
  int v79;
  int v80;
  _BYTE v81[16];
  uint64_t *v82;
  int v83;
  int v84;
  _BYTE v85[16];
  uint64_t *v86;
  int v87;
  void *v88[5];

  v7 = a5[53];
  *(_DWORD *)__dst = 0;
  std::vector<float>::vector(v88, v7, __dst);
  v9 = a3 + 1;
  v8 = (_QWORD *)*a3;
  v58 = a3 + 1;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    do
    {
      v10 = (const ZinANELayer *)v8[4];
      if (ZinIrOpLayer::IsANELayer(v10))
      {
        v11 = *((_QWORD *)v10 + 33);
        memcpy(__dst, (const void *)(v11 + 120), sizeof(__dst));
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v77, v11 + 576);
        v80 = *(_DWORD *)(v11 + 616);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v81, v11 + 624);
        v84 = *(_DWORD *)(v11 + 664);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v85, v11 + 672);
        ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v11 + 120), v10, 1);
        (*(void (**)(void **__return_ptr, const ZinANELayer *))(*(_QWORD *)v10 + 512))(&__p, v10);
        v12 = (ZinIrTensor **)__p;
        if (v63 == __p)
        {
LABEL_7:
          v13 = 0;
        }
        else
        {
          v13 = 0;
          while (ZinIrTensor::GetRootTensor(v12[v13]) != a1)
          {
            ++v13;
            v12 = (ZinIrTensor **)__p;
            if (v13 >= (v63 - (_BYTE *)__p) >> 3)
              goto LABEL_7;
          }
        }
        ZinMirL2Config::ZinMirGetL2BroadcastConflictCost(v11 + 120, (unint64_t)v88, (ZinEngineLayerMirInfo **)v10, v13 != 0);
        v9 = a3 + 1;
        memcpy((void *)(v11 + 120), __dst, 0x1C0uLL);
        *(_DWORD *)(v11 + 568) = *(_DWORD *)&__dst[448];
        if ((_BYTE *)(v11 + 120) == __dst)
        {
          *(_DWORD *)(v11 + 616) = v80;
          *(_DWORD *)(v11 + 664) = v84;
        }
        else
        {
          *(_DWORD *)(v11 + 608) = v79;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v11 + 576), v78, 0);
          *(_DWORD *)(v11 + 616) = v80;
          *(_DWORD *)(v11 + 656) = v83;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v11 + 624), v82, 0);
          *(_DWORD *)(v11 + 664) = v84;
          *(_DWORD *)(v11 + 704) = v87;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v11 + 672), v86, 0);
        }
        if (__p)
        {
          v63 = __p;
          operator delete(__p);
        }
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v85);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v81);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v77);
      }
      v14 = (_QWORD *)v8[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v8[2];
          v16 = *v15 == (_QWORD)v8;
          v8 = v15;
        }
        while (!v16);
      }
      v8 = v15;
    }
    while (v15 != v9);
  }
  v17 = (_QWORD *)*a4;
  v60 = a4 + 1;
  if (v17 != v60)
  {
    do
    {
      v18 = (ZinIrOpLayer *)v17[4];
      if (ZinIrOpLayer::IsANELayer(v18))
      {
        v19 = *((_QWORD *)v18 + 33);
        memcpy(__dst, (const void *)(v19 + 120), sizeof(__dst));
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v77, v19 + 576);
        v80 = *(_DWORD *)(v19 + 616);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v81, v19 + 624);
        v84 = *(_DWORD *)(v19 + 664);
        std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v85, v19 + 672);
        v20 = a3 + 1;
        while (1)
        {
          v20 = (_QWORD *)*v20;
          if (!v20)
            break;
          v21 = v20[4];
          if ((unint64_t)v18 >= v21)
          {
            if (v21 >= (unint64_t)v18)
              goto LABEL_28;
            ++v20;
          }
        }
        IsAllInputsResident = ZinIrOpLayer::IsAllInputsResident(v18);
        ZinMirL2Config::ZinMirSetTileHeight((ZinMirL2Config *)(v19 + 120), v18, IsAllInputsResident);
LABEL_28:
        ZinMirL2Config::ZinMirGetL2WritebackConflictCost(v19 + 120, (uint64_t *)v88, v18);
        memcpy((void *)(v19 + 120), __dst, 0x1C0uLL);
        *(_DWORD *)(v19 + 568) = *(_DWORD *)&__dst[448];
        if ((_BYTE *)(v19 + 120) == __dst)
        {
          *(_DWORD *)(v19 + 616) = v80;
          *(_DWORD *)(v19 + 664) = v84;
        }
        else
        {
          *(_DWORD *)(v19 + 608) = v79;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v19 + 576), v78, 0);
          *(_DWORD *)(v19 + 616) = v80;
          *(_DWORD *)(v19 + 656) = v83;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v19 + 624), v82, 0);
          *(_DWORD *)(v19 + 664) = v84;
          *(_DWORD *)(v19 + 704) = v87;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<ZinIrDimension,unsigned long>,void *> *>>((_QWORD *)(v19 + 672), v86, 0);
        }
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v85);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v81);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v77);
      }
      v23 = (_QWORD *)v17[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v17[2];
          v16 = *v24 == (_QWORD)v17;
          v17 = v24;
        }
        while (!v16);
      }
      v17 = v24;
    }
    while (v24 != v60);
  }
  v25 = *a2;
  v74 = *(__int128 *)((char *)a2 + 24);
  v75 = v25;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v26 = (_QWORD *)*a3;
  *(_QWORD *)__dst = &v68;
  if (v26 == v58)
  {
    v31 = (ZinIrTensor *)((char *)a1 + 48);
  }
  else
  {
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(v26[4] + 64) + 8) == 35)
        std::back_insert_iterator<std::vector<ZinIrOpLayer *>>::operator=[abi:ne180100]((void ***)__dst, v26 + 4);
      v27 = (_QWORD *)v26[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v26[2];
          v16 = *v28 == (_QWORD)v26;
          v26 = v28;
        }
        while (!v16);
      }
      v26 = v28;
    }
    while (v28 != v58);
    v29 = v68;
    v30 = v69;
    v31 = (ZinIrTensor *)((char *)a1 + 48);
    while (v29 != v30)
    {
      v32 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v29 + 32))(*v29, 0, 0);
      ZinIrTensor::GetDimensionOrderHint(a1, (uint64_t)__dst);
      ZinReshapeLayerUtils::GetReshapedDimensions(v31, (const ZinTensorDimensions *)(v32 + 48), (const ZinTensorDimensions *)__dst, (const DimensionOrderHint *)1, (char **)&__p);
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      v33 = __p;
      v34 = (v63 - (_BYTE *)__p) >> 2;
      if (v34 > (v72 - (_BYTE *)v71) >> 2)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v71, (char *)__p, (uint64_t)v63, v34);
        v33 = __p;
      }
      if (v33)
      {
        v63 = v33;
        operator delete(v33);
      }
      ++v29;
    }
  }
  v35 = *((_OWORD *)v31 + 1);
  v66[0] = *(_OWORD *)v31;
  v66[1] = v35;
  v67 = *((_QWORD *)v31 + 4);
  v36 = (int *)v71;
  v37 = (int *)v72;
  if (v71 == v72)
  {
    v40 = ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(*((_QWORD *)a2 + 2), (uint64_t *)v88, a5, 1uLL);
    goto LABEL_71;
  }
  v38 = 1;
  v39 = v71;
  while (*v39 != 3)
  {
    if (++v39 == (_DWORD *)v72)
      goto LABEL_68;
  }
  v41 = 1;
  do
  {
    if (*v36 != 3)
      v41 *= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v66, *v36);
    ++v36;
  }
  while (v36 != v37);
  v38 = v41;
  v36 = (int *)v71;
  v37 = (int *)v72;
LABEL_68:
  v40 = ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(*((_QWORD *)a2 + 2), (uint64_t *)v88, a5, v38);
  if (v36 == v37)
  {
LABEL_71:
    v42 = v74;
    *(_OWORD *)a6 = v75;
    *(_QWORD *)(a6 + 16) = v40;
    *(_OWORD *)(a6 + 24) = v42;
    goto LABEL_98;
  }
  ZinIrTensor::GetDimensionOrderHint(a1, (uint64_t)__dst);
  if (DimensionOrderHint::IsSet((DimensionOrderHint *)__dst))
    ZinIrTensor::GetDimensionOrderHint(a1, (uint64_t)&__p);
  else
    DimensionOrderHint::DimensionOrderHint(&__p, 1);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)&__p, &v64);
  if (__p)
  {
    v63 = __p;
    operator delete(__p);
  }
  if (*(_QWORD *)__dst)
  {
    *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
    operator delete(*(void **)__dst);
  }
  *(_OWORD *)__dst = v75;
  *(_QWORD *)&__dst[16] = v40;
  *(_OWORD *)&__dst[24] = v74;
  for (i = (char *)v71; ; i += 4)
  {
    if (i == v72)
    {
      v44 = v74;
      *(_OWORD *)a6 = v75;
      *(_QWORD *)(a6 + 16) = v40;
      *(_OWORD *)(a6 + 24) = v44;
      goto LABEL_96;
    }
    if (*(_DWORD *)i == 3)
      break;
  }
  v45 = (int *)v64;
  v46 = v65;
  if (v64 == v65)
  {
LABEL_94:
    v51 = *(_OWORD *)&__dst[16];
    v52 = a6;
    *(_OWORD *)a6 = *(_OWORD *)__dst;
    *(_OWORD *)(a6 + 16) = v51;
    v53 = *(_QWORD *)&__dst[32];
    goto LABEL_95;
  }
  v47 = 1;
  while (1)
  {
    v48 = v71;
    if (v71 == v72)
      goto LABEL_93;
    v49 = *v45;
    while (v49 != *v48)
    {
      if (++v48 == (_DWORD *)v72)
        goto LABEL_93;
    }
    if (v49 == 3)
      goto LABEL_93;
    v47 *= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v31, *v45);
    v50 = v40 / v47;
    if (v40 % v47 >= 1 || v50 % a5[52])
      break;
    SetValueAtDimension<ZinTensorDimensions>(__dst, v49, v50);
LABEL_93:
    if (++v45 == v46)
      goto LABEL_94;
  }
  v54 = a2[1];
  v52 = a6;
  *(_OWORD *)a6 = *a2;
  *(_OWORD *)(a6 + 16) = v54;
  v53 = *((_QWORD *)a2 + 4);
LABEL_95:
  *(_QWORD *)(v52 + 32) = v53;
LABEL_96:
  if (v64)
  {
    v65 = (int *)v64;
    operator delete(v64);
  }
LABEL_98:
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (v71)
  {
    v72 = (char *)v71;
    operator delete(v71);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
}

void sub_206FD4528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  uint64_t v42;
  void *v44;

  if (__p)
    operator delete(__p);
  if (a41)
    operator delete(a41);
  if (a31)
    operator delete(a31);
  if (a34)
    operator delete(a34);
  v44 = *(void **)(v42 - 120);
  if (v44)
  {
    *(_QWORD *)(v42 - 112) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirBankConflictOptimizer::ComputeChainSymbolRowStride(ZinMirBankConflictOptimizer *this, const ZinIrTensor *a2, const ZinIrHalParameters *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  uint64_t *v14;
  _QWORD *v15[2];
  uint64_t *v16;
  _QWORD *v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD **)(*((_QWORD *)this + 12) + 264);
  v6 = *((_QWORD *)a2 + 52);
  v7 = v6 * v5[36];
  v21 = v5[37] * v6;
  v9 = v5 + 34;
  v8 = v5[34];
  v10 = v9[1] * v6;
  *(_QWORD *)&v18 = v7;
  *((_QWORD *)&v18 + 1) = v10;
  v19 = v8 * v6;
  v20 = 1;
  v17[0] = 0;
  v17[1] = 0;
  v15[1] = 0;
  v16 = (uint64_t *)v17;
  v14 = (uint64_t *)v15;
  v15[0] = 0;
  ZinMirBankConflictOptimizer::GetConsumersProducersForL2StrideOptimization(this, &v16, &v14);
  ZinMirBankConflictOptimizer::ComputeOptimizedL2Strides(this, &v18, &v16, &v14, a2, (uint64_t)v13);
  v11 = v13[2] / *((_QWORD *)a2 + 52);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v16, v17[0]);
  return v11;
}

void sub_206FD472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, char a17, _QWORD *a18)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a14, a15);
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

unint64_t ZinMirBankConflictOptimizer::ComputeInputDmaBufferRowStride(ZinEngineLayerMirInfo **a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t TileSrc;
  unint64_t v10;
  unint64_t v11;
  int v13;
  void *__p[3];

  if (a3 >= 2)
    ZinAssertImpl("Invalid Buffer Calculation");
  v8 = a4[53];
  v13 = 0;
  std::vector<float>::vector(__p, v8, &v13);
  ZinMirL2Config::ZinMirGetL2BroadcastConflictCost(a2, (unint64_t)__p, a1, a3);
  TileSrc = ZinMirL2Config::GetTileSrc(a2, a3);
  v10 = a4[52];
  v11 = ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(v10 * *(_QWORD *)(TileSrc + 8), (uint64_t *)__p, a4, 1uLL);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11 / v10;
}

void sub_206FD4808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(unint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  unint64_t v14;
  unint64_t v15;

  if (!a4)
    return a1;
  v4 = a3[53];
  if (!v4)
    return a1;
  v5 = a4;
  v6 = a3[53];
  do
  {
    v7 = v6;
    v6 = v5;
    v5 = v7 % v5;
  }
  while (v5);
  v8 = v4 / v6 * a4;
  if (!v8)
    return a1;
  v9 = 0;
  v10 = a3[52];
  v11 = *a2;
  v12 = v10 * a4;
  v13 = 3.4028e38;
  v14 = a1;
  v15 = a1 / v10;
  do
  {
    if (a1 <= a3[59] && *(float *)(v11 + 4 * ((v15 + v9) % v4)) < v13)
    {
      v13 = *(float *)(v11 + 4 * ((v15 + v9) % v4));
      v14 = a1;
    }
    v9 += a4;
    a1 += v12;
  }
  while (v9 < v8);
  return v14;
}

unint64_t ZinMirBankConflictOptimizer::ComputeOutputDmaBufferRowStride(ZinMirBankConflictOptimizer *this, const ZinANELayer *a2, const ZinIrHalParameters *a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v10;
  void *__p[3];

  v5 = *((_QWORD *)a2 + 53);
  v10 = 0;
  std::vector<float>::vector(__p, v5, &v10);
  ZinMirL2Config::ZinMirGetL2WritebackConflictCost(*((_QWORD *)this + 33) + 120, (uint64_t *)__p, this);
  v6 = *(_QWORD *)(*((_QWORD *)this + 33) + 272);
  v7 = *((_QWORD *)a2 + 52);
  v8 = ZinMirBankConflictOptimizer::OptimizeL2StrideMinCost(v7 * v6, (uint64_t *)__p, a2, 1uLL);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v8 / v7;
}

void sub_206FD494C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirBankConflictOptimizer::IsQualifiedForBankConflictOpt(ZinIrTensor *this, int a2, ZinTensorFamilyUtil *a3)
{
  ZinIrTensor::MirInfo *v6;
  char v7;
  const void **TensorFamily;
  ZinIrTensor **v9;
  ZinIrTensor **v10;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  BOOL v15;
  _DWORD *v16;
  int *v17;
  char *v18;
  int v19;
  BOOL v20;
  ZinIrTensor **v21;
  ZinIrTensor **v22;
  int v23;
  int v24;
  ZinIrTensor *v25;
  char v26;
  ZinIrTensor **v27;
  ZinIrTensor **v28;
  ZinIrOpLayer *v29;
  void *__p;
  void *v32;
  char *v33;
  char *v34;
  char *v35;
  void *v36;
  void *v37;
  char *v38;
  void *v39;
  _BYTE *v40;
  void *v41;
  _BYTE *v42;
  ZinIrTensor **v43;
  ZinIrTensor **v44;
  uint64_t v45;

  v6 = (ZinIrTensor::MirInfo *)*((_QWORD *)this + 13);
  if (v6 && ZinIrTensor::MirInfo::HasCustomStrides(v6) || *((_QWORD *)this + 8) == 1)
  {
    v7 = 0;
    return v7 & 1;
  }
  if (*((_BYTE *)a3 + 104))
  {
    TensorFamily = (const void **)ZinTensorFamilyUtil::GetTensorFamily(a3, this);
    v44 = 0;
    v45 = 0;
    v43 = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v43, *TensorFamily, (uint64_t)TensorFamily[1], ((_BYTE *)TensorFamily[1] - (_BYTE *)*TensorFamily) >> 3);
  }
  else
  {
    ZinIrTensor::GetTensorFamily(this, (uint64_t)&v43);
  }
  v9 = v43;
  v10 = v44;
  while (v9 != v10)
  {
    if (ZinIrTensor::IsAlias(*v9))
    {
      v7 = 0;
      goto LABEL_56;
    }
    ++v9;
  }
  ZinIrTensor::GetDimensionOrderHint(this, (uint64_t)&v41);
  if (!DimensionOrderHint::IsSet((DimensionOrderHint *)&v41))
    goto LABEL_40;
  v12 = operator new(0x14uLL);
  v37 = v12 + 5;
  v38 = (char *)(v12 + 5);
  v12[4] = 4;
  *(_OWORD *)v12 = xmmword_207AB1C38;
  v36 = v12;
  DimensionOrderHint::DimensionOrderHint(&v39, &v36);
  v13 = v39;
  v14 = v41;
  if (v40 - (_BYTE *)v39 == v42 - (_BYTE *)v41)
  {
    if (v39 == v40)
    {
      v15 = 1;
      goto LABEL_35;
    }
    while (*v13 == *v14)
    {
      ++v13;
      ++v14;
      if (v13 == (_DWORD *)v40)
      {
        v15 = 1;
        goto LABEL_35;
      }
    }
  }
  v16 = operator new(0x14uLL);
  v32 = v16 + 5;
  v33 = (char *)(v16 + 5);
  v16[4] = 4;
  *(_OWORD *)v16 = xmmword_207AB1C4C;
  __p = v16;
  DimensionOrderHint::DimensionOrderHint(&v34, &__p);
  v17 = (int *)v41;
  if (v35 - v34 != v42 - (_BYTE *)v41)
  {
    v15 = 0;
    goto LABEL_29;
  }
  if (v34 != v35)
  {
    v18 = v34 + 4;
    do
    {
      v19 = *v17++;
      v15 = *((_DWORD *)v18 - 1) == v19;
      v20 = *((_DWORD *)v18 - 1) != v19 || v18 == v35;
      v18 += 4;
    }
    while (!v20);
LABEL_29:
    if (!v34)
      goto LABEL_31;
    goto LABEL_30;
  }
  v15 = 1;
  if (v34)
  {
LABEL_30:
    v35 = v34;
    operator delete(v34);
  }
LABEL_31:
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
LABEL_35:
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (!v15)
  {
LABEL_52:
    v7 = 0;
    goto LABEL_54;
  }
LABEL_40:
  v21 = v43;
  v22 = v44;
  if (v43 == v44)
  {
    v26 = 0;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = *v21;
      v23 |= ZinIrTensor::IsReshape(*v21);
      v24 |= ZinIrTensor::IsNoOpTranspose(v25);
      ++v21;
    }
    while (v21 != v22);
    v26 = v23 & v24;
  }
  v7 = v26 ^ 1;
  if ((v26 & 1) == 0 && a2)
  {
    v27 = v43;
    v28 = v44;
    while (v27 != v28)
    {
      v29 = (ZinIrOpLayer *)*((_QWORD *)*v27 + 12);
      if (*(_DWORD *)(*((_QWORD *)v29 + 8) + 8) == 35
        && !ZinReshapeLayerUtils::IsReshapeValidAfterStridePadding(v29, 3, 1))
      {
        goto LABEL_52;
      }
      ++v27;
    }
    v7 = 1;
  }
LABEL_54:
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
LABEL_56:
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  return v7 & 1;
}

void sub_206FD4C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a17)
    operator delete(a17);
  if (a24)
    operator delete(a24);
  v27 = *(void **)(v25 - 88);
  if (v27)
  {
    *(_QWORD *)(v25 - 80) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ZinMirBankConflictOptimizer::GetL2Requests(ZinMirBankConflictOptimizer *this, uint64_t a2, uint64_t a3, unint64_t a4)
{
  size_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t result;
  unint64_t v13;
  ZinMirBankConflictOptimizer *i;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  if (!a2)
    return 0;
  v10 = 0;
  v11 = 0;
  result = 0;
  do
  {
    v13 = v10;
    for (i = this; i; i = (ZinMirBankConflictOptimizer *)((char *)i - 1))
    {
      v15 = *(_QWORD *)&v9[8 * (v13 % a4)];
      *(_QWORD *)&v9[8 * (v13 % a4)] = v15 + 1;
      if (result <= v15 + 1)
        result = v15 + 1;
      ++v13;
    }
    ++v11;
    v10 += a3;
  }
  while (v11 != a2);
  return result;
}

unint64_t ZinMirBankConflictOptimizer::ComputeCostOfL2Fetch(unint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v29;
  ZinMirBankConflictOptimizer *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v23 = (uint64_t *)result;
  v11 = (_QWORD *)*a2;
  v29 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v22 = a6 * a5 * a9 * a10;
    do
    {
      v12 = v11[5];
      if (v12)
      {
        v13 = *((unsigned __int8 *)v11 + 34);
        v34[0] = a11 / v13;
        v34[1] = v13;
        result = std::function<L2Request ()(WorkUnitShape const&,unsigned long,unsigned long,unsigned long,unsigned long,ZinIrHalParameters const&)>::operator()(a3, (uint64_t)v34, a5, a6, a5, a8);
        v14 = *(_QWORD *)(a4 + 424);
        if (v14)
        {
          v15 = 0;
          v16 = 0;
          v17 = v22 * v12;
          v18 = *v23;
          do
          {
            result = ZinMirBankConflictOptimizer::GetL2Requests(v30, v31, v15 % v14, v14);
            *(float *)(v18 + 4 * v16) = *(float *)(v18 + 4 * v16) + (float)(v17 * result * v32);
            ++v16;
            v15 += v33;
          }
          while (v14 != v16);
        }
      }
      v19 = (_QWORD *)v11[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v11[2];
          v21 = *v20 == (_QWORD)v11;
          v11 = v20;
        }
        while (!v21);
      }
      v11 = v20;
    }
    while (v20 != v29);
  }
  return result;
}

uint64_t std::function<L2Request ()(WorkUnitShape const&,unsigned long,unsigned long,unsigned long,unsigned long,ZinIrHalParameters const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a3;
  v9 = a5;
  v10 = a4;
  v8 = a6;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, a2, &v11, &v10, &v9, &v8);
}

unint64_t ZinMirBankConflictOptimizer::ComputeCostOfL2WriteBack(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, unint64_t a10)
{
  unint64_t result;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v27 = 0;
  v26 = 0;
  ZinTensorFormatGetSize(a8, &v27);
  result = ZinTensorFormatGetSize(a9, &v26);
  v13 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      if (v13[5])
      {
        v14 = *((unsigned __int8 *)v13 + 34);
        v25[0] = a10 / v14;
        v25[1] = v14;
        result = std::function<L2Request ()(WorkUnitShape const&,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,ZinIrHalParameters const&)>::operator()(a3, (uint64_t)v25, a6, a7, a10, v27, v26);
        v15 = *(_QWORD *)(a4 + 424);
        if (v15)
        {
          v16 = 0;
          v17 = *a1;
          do
          {
            result = ZinMirBankConflictOptimizer::GetL2Requests(0, 0, v16, v15);
            *(float *)(v17 + 4 * v16) = *(float *)(v17 + 4 * v16) + (float)0;
            ++v16;
          }
          while (v15 != v16);
        }
      }
      v18 = (_QWORD *)v13[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v13[2];
          v20 = *v19 == (_QWORD)v13;
          v13 = v19;
        }
        while (!v20);
      }
      v13 = v19;
    }
    while (v19 != a2 + 1);
  }
  return result;
}

uint64_t std::function<L2Request ()(WorkUnitShape const&,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,ZinIrHalParameters const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a4;
  v13 = a3;
  v10 = a6;
  v11 = a5;
  v9 = a7;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, a2, &v13, &v12, &v11, &v10, &v9);
}

uint64_t ZinMemoryHeatMap::CreateMemoryHeatFile(ZinMemoryHeatMap *a1, ZinIrContext *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  ZinOpLayerUtils **v6;
  ZinOpLayerUtils **v7;
  ZinOpLayerUtils *v8;
  const ZinIrOpLayer *v9;
  uint64_t v10;
  ZinIrSymbol *v11;
  int MemType;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  __int128 *v24;
  char *v25;
  char *v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  std::ios_base *v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  _QWORD *v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  _QWORD *v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  _QWORD *v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  const std::locale::facet *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  std::string *v74;
  std::string::size_type size;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void **v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  const std::locale::facet *v90;
  void *__p[2];
  unsigned __int8 v92;
  std::string v93;
  void *v94;
  char *v95;
  unint64_t v96;
  _OWORD v97[2];
  int v98;
  _OWORD v99[8];
  uint64_t v100;
  _QWORD v101[22];

  v101[20] = *MEMORY[0x24BDAC8D0];
  result = ZinMemoryHeatMap::HasAllocated(a1, a2);
  if (!(_DWORD)result)
    return result;
  memset(v97, 0, sizeof(v97));
  v98 = 1065353216;
  v4 = *((_QWORD *)a1 + 124);
  if (*(_QWORD *)(v4 + 360) == *(_QWORD *)(v4 + 352))
    ZinAssertImpl("Must run scheduler first");
  ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges((ZinIrOpLayer ***)(v4 + 352), v97);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v5 = *((_QWORD *)a1 + 124);
  v7 = *(ZinOpLayerUtils ***)(v5 + 352);
  v6 = *(ZinOpLayerUtils ***)(v5 + 360);
  if (v6 == v7)
    ZinAssertImpl("Must run scheduler first");
  do
  {
    v8 = *v7;
    __p[0] = 0;
    __p[0] = (void *)(*(uint64_t (**)(ZinOpLayerUtils *, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
    if (ZinOpLayerUtils::IsConnectedToLiveOut(v8, v9))
      goto LABEL_27;
    v10 = *((_QWORD *)__p[0] + 13);
    if (v10)
    {
      v11 = **(ZinIrSymbol ***)(v10 + 40);
      if (*((_QWORD *)v11 + 64))
        goto LABEL_27;
    }
    else
    {
      if (MEMORY[0x200])
        goto LABEL_27;
      v11 = 0;
    }
    MemType = ZinIrSymbol::GetMemType(v11);
    v13 = __p[0];
    v14 = **(_QWORD **)(*((_QWORD *)__p[0] + 13) + 40);
    v15 = *(_QWORD *)(v14 + 24);
    v16 = *(_QWORD *)(v14 + 184);
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    v17 = v16 + v15;
    v99[0] = *(_OWORD *)(std::__hash_table<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,ZinLiveRange>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,ZinLiveRange>>>::__emplace_unique_key_args<ZinIrTensor *,std::piecewise_construct_t const&,std::tuple<ZinIrTensor * const&>,std::tuple<>>((uint64_t)v97, __p, (uint64_t)&std::piecewise_construct, &v93)+ 3);
    v18 = v95;
    if ((unint64_t)v95 >= v96)
    {
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v95 - (_BYTE *)v94) >> 4);
      v21 = v20 + 1;
      if (v20 + 1 > 0x555555555555555)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v96 - (_QWORD)v94) >> 4) > v21)
        v21 = 0x5555555555555556 * ((uint64_t)(v96 - (_QWORD)v94) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (_QWORD)v94) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v22 = 0x555555555555555;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Group>>((uint64_t)&v96, v22);
      else
        v23 = 0;
      v24 = (__int128 *)&v23[48 * v20];
      *(_QWORD *)v24 = v13;
      *(__int128 *)((char *)v24 + 8) = v99[0];
      *((_QWORD *)v24 + 3) = v15;
      *((_QWORD *)v24 + 4) = v17;
      *((_DWORD *)v24 + 10) = MemType;
      v26 = (char *)v94;
      v25 = v95;
      v27 = v24;
      if (v95 != v94)
      {
        do
        {
          v28 = *((_OWORD *)v25 - 3);
          v29 = *((_OWORD *)v25 - 2);
          *(__int128 *)((char *)v27 - 20) = *(_OWORD *)(v25 - 20);
          *(v27 - 3) = v28;
          *(v27 - 2) = v29;
          v27 -= 3;
          v25 -= 48;
        }
        while (v25 != v26);
        v25 = v26;
      }
      v19 = v24 + 3;
      v94 = v27;
      v95 = (char *)(v24 + 3);
      v96 = (unint64_t)&v23[48 * v22];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_QWORD *)v95 = v13;
      *(_OWORD *)(v18 + 8) = v99[0];
      *((_QWORD *)v18 + 3) = v15;
      *((_QWORD *)v18 + 4) = v17;
      *((_DWORD *)v18 + 10) = MemType;
      v19 = (__int128 *)(v18 + 48);
    }
    v95 = (char *)v19;
LABEL_27:
    ++v7;
  }
  while (v7 != v6);
  v30 = (__int128 *)v95;
  if (v94 != v95)
  {
    v31 = MEMORY[0x24BEDB840];
    v32 = MEMORY[0x24BEDB840] + 64;
    v33 = (_QWORD *)MEMORY[0x24BEDB7E8];
    v34 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
    v35 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
    v101[0] = MEMORY[0x24BEDB840] + 64;
    *(_QWORD *)&v99[0] = v34;
    *(_QWORD *)((char *)v99 + *(_QWORD *)(v34 - 24)) = v35;
    v36 = (std::ios_base *)((char *)v99 + *(_QWORD *)(*(_QWORD *)&v99[0] - 24));
    std::ios_base::init(v36, (char *)v99 + 8);
    v36[1].__vftable = 0;
    v36[1].__fmtflags_ = -1;
    *(_QWORD *)&v99[0] = v31 + 24;
    v101[0] = v32;
    MEMORY[0x20BCFFEA8]((char *)v99 + 8);
    std::ofstream::open();
    if (v100)
    {
      v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v95 - (_BYTE *)v94) >> 4));
      if (v95 == v94)
        v38 = 0;
      else
        v38 = v37;
      std::__introsort<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *,false>((uint64_t)v94, (__int128 *)v95, v38, 1);
      v39 = (char *)v94;
      if (v94 != v95)
      {
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = 0;
        do
        {
          v44 = *((_QWORD *)v39 + 4);
          v45 = v44 - *((_QWORD *)v39 + 3);
          if (v44 <= v41)
            v46 = v41;
          else
            v46 = *((_QWORD *)v39 + 4);
          v47 = v45 + v40;
          if (v44 <= v43)
            v44 = v43;
          v48 = v45 + v42;
          if (*((_DWORD *)v39 + 10))
          {
            v41 = v46;
            v40 = v47;
          }
          else
          {
            v43 = v44;
            v42 = v48;
          }
          v39 += 48;
        }
        while (v39 != v95);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"DRAM_PEAK(bss) = ", 17);
      v49 = (_QWORD *)std::ostream::operator<<();
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" B", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
      v51 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
      std::locale::~locale((std::locale *)&v93);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"DRAM_sum(no-reuse) = ", 21);
      v52 = (_QWORD *)std::ostream::operator<<();
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" B", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
      v54 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
      std::locale::~locale((std::locale *)&v93);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"L2_PEAK = ", 10);
      v55 = (_QWORD *)std::ostream::operator<<();
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" B", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(_QWORD *)(*v56 - 24)));
      v57 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
      std::locale::~locale((std::locale *)&v93);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"L2_sum(no-reuse) = ", 19);
      v58 = (_QWORD *)std::ostream::operator<<();
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" B", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
      v60 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
      std::locale::~locale((std::locale *)&v93);
      std::ostream::put();
      std::ostream::flush();
      std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
      v61 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
      std::locale::~locale((std::locale *)&v93);
      std::ostream::put();
      std::ostream::flush();
      v62 = (char *)v94;
      v63 = v95;
      if (v94 != v95)
      {
        v64 = 0;
        do
        {
          v65 = *(_QWORD *)(*(_QWORD *)v62 + 104);
          if (!v65 || (v66 = *(uint64_t **)(v65 + 40), v66 == *(uint64_t **)(v65 + 48)))
            v67 = 0;
          else
            v67 = *v66;
          if (*(char *)(v67 + 183) < 0)
            std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(v67 + 160), *(_QWORD *)(v67 + 168));
          else
            v93 = *(std::string *)(v67 + 160);
          v68 = *((_QWORD *)v62 + 1);
          v69 = *((_QWORD *)v62 + 2);
          v70 = *((_QWORD *)v62 + 3);
          v71 = *((_QWORD *)v62 + 4);
          if (*((_DWORD *)v62 + 10))
            v72 = "L2";
          else
            v72 = "DRAM";
          std::string::basic_string[abi:ne180100]<0>(__p, v72);
          v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Symbol_Name=", 12);
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v74 = &v93;
          else
            v74 = (std::string *)v93.__r_.__value_.__r.__words[0];
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
          else
            size = v93.__r_.__value_.__l.__size_;
          v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)":", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Time_Span=[", 11);
          v77 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)", ", 2);
          v78 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"] (", 3);
          v79 = v69 - v68;
          v80 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"):", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Space_Span=[", 12);
          v81 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)", ", 2);
          v82 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"] (", 3);
          v83 = v71 - v70;
          v84 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"):", 2);
          v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Mem_Type=[", 10);
          if ((v92 & 0x80u) == 0)
            v86 = __p;
          else
            v86 = (void **)__p[0];
          if ((v92 & 0x80u) == 0)
            v87 = v92;
          else
            v87 = (uint64_t)__p[1];
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v86, v87);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"]\n", 2);
          if ((char)v92 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          v64 += v83 * v79;
          v62 += 48;
        }
        while (v62 != v63);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"TotalCost(sum(t_space * t_time))=", 33);
      v33 = (_QWORD *)MEMORY[0x24BEDB7E8];
      v89 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(_QWORD *)(*v89 - 24)));
      v90 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
      std::locale::~locale((std::locale *)&v93);
      std::ostream::put();
      std::ostream::flush();
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)v99 + *(_QWORD *)(*(_QWORD *)&v99[0] - 24)), *(_DWORD *)((char *)&v99[2] + *(_QWORD *)(*(_QWORD *)&v99[0] - 24)) | 4);
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinMemoryHeatMap::CreateMemoryHeatFile();
    }
    *(_QWORD *)&v99[0] = *v33;
    *(_QWORD *)((char *)v99 + *(_QWORD *)(*(_QWORD *)&v99[0] - 24)) = v33[3];
    MEMORY[0x20BCFFEB4]((char *)v99 + 8);
    std::ostream::~ostream();
    MEMORY[0x20BD0022C](v101);
    v30 = (__int128 *)v94;
  }
  if (v30)
  {
    v95 = (char *)v30;
    operator delete(v30);
  }
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v97);
}

void sub_206FD5ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Unwind_Resume(exception_object);
}

uint64_t ZinMemoryHeatMap::HasAllocated(ZinMemoryHeatMap *this, ZinIrContext *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD **v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD **v18;
  _QWORD *v19[2];
  void *__p;
  void *__src;
  uint64_t v22;

  v2 = *((_QWORD *)this + 124);
  if (*(_QWORD *)(v2 + 360) == *(_QWORD *)(v2 + 352))
    ZinAssertImpl("Must run scheduler first", a2);
  __p = 0;
  __src = 0;
  v22 = 0;
  ZinIrControlFlowGraph::GetLiveInLayers((ZinIrControlFlowGraph **)v2, (uint64_t)&v18);
  v3 = v18;
  if (v18 != v19)
  {
    do
    {
      v17 = v3[4];
      std::vector<ZinIrOpLayer *>::insert((uint64_t)&__p, (char *)__src, (char *)&v17);
      v4 = (_QWORD *)v3[1];
      if (v4)
      {
        do
        {
          v5 = (_QWORD **)v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD **)v3[2];
          v6 = *v5 == v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != v19);
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v18, v19[0]);
  v8 = *(_QWORD **)(v2 + 352);
  v7 = *(_QWORD **)(v2 + 360);
  while (v8 != v7)
  {
    v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v8 + 32))(*v8, 0, 0) + 104);
    if (!v9)
      goto LABEL_21;
    v10 = *(_QWORD **)(v9 + 40);
    if (v10 == *(_QWORD **)(v9 + 48) || !*v10)
      goto LABEL_21;
    ++v8;
  }
  v11 = __p;
  v12 = __src;
  if (__p == __src)
  {
    v15 = 1;
    if (__p)
      goto LABEL_23;
  }
  else
  {
    while (1)
    {
      v13 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v11 + 32))(*v11, 0, 0)
                      + 104);
      if (!v13)
        break;
      v14 = *(_QWORD **)(v13 + 40);
      if (v14 == *(_QWORD **)(v13 + 48) || !*v14)
        break;
      if (++v11 == v12)
      {
        v15 = 1;
        goto LABEL_22;
      }
    }
LABEL_21:
    v15 = 0;
LABEL_22:
    v11 = __p;
    if (__p)
    {
LABEL_23:
      __src = v11;
      operator delete(v11);
    }
  }
  return v15;
}

void sub_206FD5D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinMemoryHeatMap::PrintPerSchedulePressure(uint64_t a1, int a2)
{
  uint64_t v2;
  ZinIrOpLayer **v5;
  ZinIrOpLayer **v6;
  ZinIrOpLayer *v7;
  ZinIrTensor *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t Hal;
  const ZinIrHalParameters *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::ios_base *v18;
  char *v19;
  size_t v20;
  std::string *v21;
  _QWORD *v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  uint64_t v30;
  std::string v31;
  std::string v32;
  void *__p[2];
  std::string::size_type v34;
  void *v35[2];
  unsigned __int8 v36;
  _OWORD v37[39];
  unint64_t v38;
  std::string v39;
  _QWORD v40[2];
  unsigned __int8 v41;
  _QWORD v42[4];
  int v43;
  _QWORD v44[4];
  int v45;
  _QWORD **v46;
  _QWORD *v47[2];
  char v48;
  _BYTE v49[32];
  int v50;
  uint64_t v51;
  _QWORD v52[51];
  _QWORD v53[20];

  v53[19] = *MEMORY[0x24BDAC8D0];
  v47[1] = 0;
  v48 = 0;
  v47[0] = 0;
  v46 = v47;
  memset(v49, 0, sizeof(v49));
  v50 = 1065353216;
  memset(v44, 0, sizeof(v44));
  v45 = 1065353216;
  v2 = *(_QWORD *)(a1 + 992);
  if (*(_QWORD *)(v2 + 360) == *(_QWORD *)(v2 + 352))
    ZinAssertImpl("Must run scheduler first");
  memset(v42, 0, sizeof(v42));
  v43 = 1065353216;
  ZinLiveRangeUtils<ZinIrOpLayer,ZinIrTensor>::ZinIrComputeLiveRanges((ZinIrOpLayer ***)(v2 + 352), v42);
  v5 = *(ZinIrOpLayer ***)(v2 + 352);
  v6 = *(ZinIrOpLayer ***)(v2 + 360);
  while (v5 != v6)
  {
    v7 = *v5;
    v39.__r_.__value_.__r.__words[0] = 0;
    v8 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, 0, 0);
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)ZinIrTensor::GetRootTensor(v8);
    if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v44, &v39))
    {
      std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v44, &v39, &v39);
      v9 = std::__hash_table<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::__unordered_map_hasher<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::hash<ZinIrTensor *>,std::equal_to<ZinIrTensor *>,true>,std::__unordered_map_equal<ZinIrTensor *,std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>,std::equal_to<ZinIrTensor *>,std::hash<ZinIrTensor *>,true>,std::allocator<std::__hash_value_type<ZinIrTensor *,std::vector<ZinIrTensor *>>>>::find<ZinIrTensor *>(v42, &v39);
      if (v9)
      {
        if (ZinIrOpLayer::IsANELayer(v7) && (a2 != 0) != (*(_DWORD *)(*((_QWORD *)v7 + 33) + 1632) == 3))
        {
          v10 = **(_QWORD **)(*(_QWORD *)(v39.__r_.__value_.__r.__words[0] + 104) + 40);
          v37[0] = *(_OWORD *)(v9 + 3);
          ZinIrMemoryPressureAnalyzer::AddTensorAllocation((ZinIrMemoryPressureAnalyzer *)&v46, *(_QWORD *)(v10 + 184), (const ZinLiveRange *)v37, (const ZinIrTensor *)v39.__r_.__value_.__l.__data_);
        }
      }
    }
    ++v5;
  }
  ZinIrCompilerParameters::ZinIrCompilerParameters(&v39, (const ZinIrCompilerParameters *)(a1 + 176));
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(a1 + 160));
  v12 = (const ZinIrHalParameters *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  ZinIrHalParameters::ZinIrHalParameters((ZinIrHalParameters *)v37, v12);
  v13 = MEMORY[0x24BEDB840];
  v14 = MEMORY[0x24BEDB840] + 64;
  v15 = (uint64_t *)MEMORY[0x24BEDB7E8];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v17 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  v53[0] = MEMORY[0x24BEDB840] + 64;
  v51 = v16;
  *(_QWORD *)((char *)&v52[-1] + *(_QWORD *)(v16 - 24)) = v17;
  v18 = (std::ios_base *)((char *)&v52[-1] + *(_QWORD *)(v51 - 24));
  std::ios_base::init(v18, v52);
  v18[1].__vftable = 0;
  v18[1].__fmtflags_ = -1;
  v51 = v13 + 24;
  v53[0] = v14;
  MEMORY[0x20BCFFEA8](v52);
  if (a2 == 1)
    v19 = "dram";
  else
    v19 = "l2";
  std::string::basic_string[abi:ne180100]<0>(v35, v19);
  if ((v41 & 0x80u) == 0)
    v20 = v41;
  else
    v20 = v40[1];
  v21 = &v31;
  std::string::basic_string[abi:ne180100]((uint64_t)&v31, v20 + 1);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v20)
  {
    if ((v41 & 0x80u) == 0)
      v22 = v40;
    else
      v22 = (_QWORD *)v40[0];
    memmove(v21, v22, v20);
  }
  *(_WORD *)((char *)&v21->__r_.__value_.__l.__data_ + v20) = 46;
  if ((v36 & 0x80u) == 0)
    v23 = v35;
  else
    v23 = (void **)v35[0];
  if ((v36 & 0x80u) == 0)
    v24 = v36;
  else
    v24 = (std::string::size_type)v35[1];
  v25 = std::string::append(&v31, (const std::string::value_type *)v23, v24);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v32, ".per_sched_pressure.txt", 0x17uLL);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v34 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  std::ofstream::open();
  if (v52[15])
  {
    ZinIrMemoryPressureAnalyzer::GetDebugString((ZinIrMemoryPressureAnalyzer *)&v46, v38, &v32);
    v29 = (v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v32
        : (std::string *)v32.__r_.__value_.__r.__words[0];
    v30 = (v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v32.__r_.__value_.__r.__words[2])
        : v32.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)v29, v30);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v52[-1] + *(_QWORD *)(v51 - 24)), *(_DWORD *)((char *)&v52[3] + *(_QWORD *)(v51 - 24)) | 4);
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  if ((char)v36 < 0)
    operator delete(v35[0]);
  v51 = *v15;
  *(_QWORD *)((char *)&v52[-1] + *(_QWORD *)(v51 - 24)) = v15[3];
  MEMORY[0x20BCFFEB4](v52);
  std::ostream::~ostream();
  MEMORY[0x20BD0022C](v53);
  ZinIrHalParameters::~ZinIrHalParameters((ZinIrHalParameters *)v37);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v39);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v42);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v44);
  std::__hash_table<std::__hash_value_type<ZinIrDimension,std::set<long>>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,std::set<long>>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,std::set<long>>>>::~__hash_table((uint64_t)v49);
  std::__tree<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>,ZinIrMemoryPressureAnalyzer::PointerComparator,std::allocator<std::unique_ptr<ZinIrMemoryPressureAnalyzer::Allocation const>>>::destroy((uint64_t)&v46, v47[0]);
}

void sub_206FD61D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,...)
{
  va_list va;

  va_start(va, a24);
  if (a11 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (a24 < 0)
    operator delete(a19);
  std::ofstream::~ofstream(&STACK[0xC70]);
  ZinIrHalParameters::~ZinIrHalParameters((ZinIrHalParameters *)va);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&STACK[0x8C0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0xBC0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&STACK[0xBF0]);
  ZinIrMemoryPressureAnalyzer::~ZinIrMemoryPressureAnalyzer((ZinIrMemoryPressureAnalyzer *)&STACK[0xC20]);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 *v28;
  unint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __int128 *v45;
  __int128 *v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  __int128 *v61;
  __int128 *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 *v71;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 v82;
  uint64_t v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  _OWORD *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int64_t v102;
  uint64_t v103;
  _OWORD *v104;
  uint64_t v105;
  __int128 *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  __int128 *v120;
  __int128 v121;
  __int128 v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _BYTE v147[32];
  _BYTE v148[32];
  _BYTE v149[32];
  _BYTE v150[32];
  _BYTE v151[32];
  _BYTE v152[32];
  _BYTE v153[32];
  _BYTE v154[32];
  uint64_t v155;
  uint64_t v156;
  _BYTE v157[32];
  uint64_t v158;

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  _BYTE v23[32];
  _BYTE v24[20];

  v3 = *((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3);
  v4 = *((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3);
  if (v3 <= *((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3))
  {
    if (v4 > v3)
    {
      v9 = *a2;
      *(_OWORD *)v21 = a2[1];
      *(_OWORD *)&v21[16] = a2[2];
      v10 = *(__int128 *)((char *)a3 + 28);
      v11 = a3[1];
      *a2 = *a3;
      a2[1] = v11;
      *(__int128 *)((char *)a2 + 28) = v10;
      *a3 = v9;
      a3[1] = *(_OWORD *)v21;
      result = *(__n128 *)&v21[12];
      *(__int128 *)((char *)a3 + 28) = *(_OWORD *)&v21[12];
      if (*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3) > *((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3))
      {
        v13 = *a1;
        *(_OWORD *)v22 = a1[1];
        *(_OWORD *)&v22[16] = a1[2];
        v14 = *(__int128 *)((char *)a2 + 28);
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        *(__int128 *)((char *)a1 + 28) = v14;
        *a2 = v13;
        a2[1] = *(_OWORD *)v22;
        result = *(__n128 *)&v22[12];
        *(__int128 *)((char *)a2 + 28) = *(_OWORD *)&v22[12];
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      v16 = *a1;
      *(_OWORD *)v23 = a1[1];
      *(_OWORD *)&v23[16] = a1[2];
      v17 = *(__int128 *)((char *)a2 + 28);
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      *(__int128 *)((char *)a1 + 28) = v17;
      *a2 = v16;
      a2[1] = *(_OWORD *)v23;
      result = *(__n128 *)&v23[12];
      *(__int128 *)((char *)a2 + 28) = *(_OWORD *)&v23[12];
      if (*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3) <= *((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3))
        return result;
      v5 = a2[1];
      v6 = *a2;
      *(_DWORD *)v24 = HIDWORD(v5);
      *(_OWORD *)&v24[4] = a2[2];
      v19 = *(__int128 *)((char *)a3 + 28);
      v20 = a3[1];
      *a2 = *a3;
      a2[1] = v20;
      *(__int128 *)((char *)a2 + 28) = v19;
    }
    else
    {
      v5 = a1[1];
      v6 = *a1;
      *(_DWORD *)v24 = HIDWORD(v5);
      *(_OWORD *)&v24[4] = a1[2];
      v7 = *(__int128 *)((char *)a3 + 28);
      v8 = a3[1];
      *a1 = *a3;
      a1[1] = v8;
      *(__int128 *)((char *)a1 + 28) = v7;
    }
    *a3 = v6;
    a3[1] = v5;
    result = *(__n128 *)v24;
    *(__int128 *)((char *)a3 + 28) = *(_OWORD *)v24;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[32];
  uint64_t v34;
  _BYTE v35[32];
  _BYTE v36[32];
  _BYTE v37[32];
  _BYTE v38[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_QWORD *)(a2 - 16) - *(_QWORD *)(a2 - 24) > *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)v33 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v33[16] = *(_OWORD *)(a1 + 32);
        v7 = *(_OWORD *)(a2 - 20);
        v8 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 28) = v7;
        *(_OWORD *)(a2 - 48) = v6;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v33;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v33[12];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(a1, a1 + 48, a1 + 96, a2 - 48);
      return 1;
    case 5uLL:
      v20 = (__int128 *)(a1 + 48);
      v21 = (__int128 *)(a1 + 96);
      v22 = (__int128 *)(a1 + 144);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(a1, a1 + 48, a1 + 96, a1 + 144);
      if (*(_QWORD *)(a2 - 16) - *(_QWORD *)(a2 - 24) > *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168))
      {
        v23 = *v22;
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 160);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 176);
        v24 = *(_OWORD *)(a2 - 20);
        v25 = *(_OWORD *)(a2 - 32);
        *v22 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 160) = v25;
        *(_OWORD *)(a1 + 172) = v24;
        *(_OWORD *)(a2 - 48) = v23;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v35;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v35[12];
        if (*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168) > *(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120))
        {
          v26 = *v21;
          *(_OWORD *)v36 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)&v36[16] = *(_OWORD *)(a1 + 128);
          v27 = *(_OWORD *)(a1 + 160);
          *v21 = *v22;
          *(_OWORD *)(a1 + 112) = v27;
          *(_OWORD *)(a1 + 124) = *(_OWORD *)(a1 + 172);
          *v22 = v26;
          *(_OWORD *)(a1 + 160) = *(_OWORD *)v36;
          *(_OWORD *)(a1 + 172) = *(_OWORD *)&v36[12];
          if (*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120) > *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72))
          {
            v28 = *v20;
            *(_OWORD *)v37 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)&v37[16] = *(_OWORD *)(a1 + 80);
            v29 = *(_OWORD *)(a1 + 112);
            *v20 = *v21;
            *(_OWORD *)(a1 + 64) = v29;
            *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
            *v21 = v28;
            *(_OWORD *)(a1 + 112) = *(_OWORD *)v37;
            *(_OWORD *)(a1 + 124) = *(_OWORD *)&v37[12];
            if (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72) > *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24))
            {
              v30 = *(_OWORD *)a1;
              *(_OWORD *)v38 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v38[16] = *(_OWORD *)(a1 + 32);
              v31 = *(_OWORD *)(a1 + 64);
              *(_OWORD *)a1 = *v20;
              *(_OWORD *)(a1 + 16) = v31;
              *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
              *v20 = v30;
              *(_OWORD *)(a1 + 64) = *(_OWORD *)v38;
              *(_OWORD *)(a1 + 76) = *(_OWORD *)&v38[12];
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96));
      v10 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)(v10 + 24);
    v13 = *(_QWORD *)(v10 + 32);
    if ((unint64_t)(v13 - v14) > *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24))
    {
      v32 = *(_OWORD *)v10;
      v34 = *(_QWORD *)(v10 + 16);
      v15 = *(_DWORD *)(v10 + 40);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_OWORD *)(a1 + v16 + 112);
        *(_OWORD *)(v17 + 144) = *(_OWORD *)(a1 + v16 + 96);
        *(_OWORD *)(v17 + 160) = v18;
        *(_OWORD *)(v17 + 172) = *(_OWORD *)(a1 + v16 + 124);
        if (v16 == -96)
          break;
        v16 -= 48;
        if ((unint64_t)(v13 - v14) <= *(_QWORD *)(v17 + 80) - *(_QWORD *)(v17 + 72))
        {
          v19 = a1 + v16 + 144;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(_OWORD *)v19 = v32;
      *(_QWORD *)(v19 + 16) = v34;
      *(_QWORD *)(v19 + 24) = v14;
      *(_QWORD *)(v19 + 32) = v13;
      *(_DWORD *)(v19 + 40) = v15;
      if (++v12 == 8)
        return v10 + 48 == a2;
    }
    v9 = v10;
    v11 += 48;
    v10 += 48;
    if (v10 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  _BYTE v19[32];
  _BYTE v20[32];

  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMemoryHeatMap::CreateMemoryHeatFile(ZinIrContext *,std::string const&)::$_0 &,ZinMemoryHeatMap::TensorHeatInfo *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3).n128_u64[0];
  if (*(_QWORD *)(a4 + 32) - *(_QWORD *)(a4 + 24) > *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24))
  {
    v9 = *(_OWORD *)a3;
    *(_OWORD *)v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v18[16] = *(_OWORD *)(a3 + 32);
    v10 = *(_OWORD *)(a4 + 28);
    v11 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 28) = v10;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v18;
    result = *(__n128 *)&v18[12];
    *(_OWORD *)(a4 + 28) = *(_OWORD *)&v18[12];
    if (*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24) > *(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24))
    {
      v12 = *(_OWORD *)a2;
      *(_OWORD *)v19 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
      v13 = *(_OWORD *)(a3 + 28);
      v14 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 28) = v13;
      *(_OWORD *)a3 = v12;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v19;
      result = *(__n128 *)&v19[12];
      *(_OWORD *)(a3 + 28) = *(_OWORD *)&v19[12];
      if (*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24) > *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24))
      {
        v15 = *(_OWORD *)a1;
        *(_OWORD *)v20 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v20[16] = *(_OWORD *)(a1 + 32);
        v16 = *(_OWORD *)(a2 + 28);
        v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 28) = v16;
        *(_OWORD *)a2 = v15;
        *(_OWORD *)(a2 + 16) = *(_OWORD *)v20;
        result = *(__n128 *)&v20[12];
        *(_OWORD *)(a2 + 28) = *(_OWORD *)&v20[12];
      }
    }
  }
  return result;
}

void ZinMemoryHeatMap::CreateMemoryHeatFile()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "reg-alloc log file creation is failed!\n", v0, 2u);
}

uint64_t ZinParseResampleUnit(const __CFDictionary *a1, void ***a2, CFArrayRef *a3)
{
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  CFTypeID v7;
  uint64_t result;
  const __CFArray *v9;
  const __CFArray *v10;
  CFTypeID v11;
  int Count;
  CFIndex v13;
  int *v14;
  _QWORD *v15;
  const __CFString *v16;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v18;
  CFTypeID v19;
  const __CFString *v20;
  const __CFString *v21;
  CFIndex v22;
  int *v23;
  _QWORD *v24;
  const __CFString *v25;
  CFTypeID v26;
  BOOL v27;
  int v28;
  const __CFString *v29;
  const __CFString *v30;
  CFTypeID v31;
  void **v32;
  void **v33;
  void **v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  void **v41;
  void **v42;
  void **v43;
  void *v44;
  const __CFString *v45;
  void ***v46;
  unsigned int *v47;
  unsigned int *v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  void **v58;
  void **v59;
  uint64_t v60;
  CFTypeID v61;
  CFTypeID v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const __CFArray *v104;
  void *value;

  v5 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (v5 && (v6 = v5, v7 = CFGetTypeID(v5), v7 == CFDictionaryGetTypeID()))
  {
    result = ZinParseTextureCommonUnit(v6, (ZinIrTextureUnitInfo *)a2, a3);
    if ((_DWORD)result)
      return result;
    v9 = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("CoordinateTypeInfo"));
    if (v9 && (v10 = v9, v11 = CFGetTypeID(v9), v11 == CFArrayGetTypeID()))
    {
      Count = CFArrayGetCount(v10);
      if (Count < 1)
      {
        v71 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v71)
          ZinParseResampleUnit(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        v13 = 0;
        v14 = (int *)&value + 1;
        v15 = a2 + 22;
        v103 = Count;
        v16 = CFSTR("Coordinate");
        v104 = v10;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v13);
          if (!ValueAtIndex)
            break;
          v18 = ValueAtIndex;
          v19 = CFGetTypeID(ValueAtIndex);
          if (v19 != CFDictionaryGetTypeID())
            break;
          v20 = (const __CFString *)CFDictionaryGetValue(v18, v16);
          v21 = v20;
          if (v20)
          {
            v22 = v13;
            v23 = v14;
            v24 = v15;
            v25 = v16;
            v26 = CFGetTypeID(v20);
            v27 = v26 == CFStringGetTypeID();
            v16 = v25;
            v15 = v24;
            v14 = v23;
            v13 = v22;
            v10 = v104;
            if (!v27)
              v21 = 0;
          }
          if (ZinCFStringEquals(v21, CFSTR("Height")))
          {
            v28 = 3;
          }
          else
          {
            if (!ZinCFStringEquals(v21, CFSTR("Width")))
            {
              v95 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v95)
                ZinParseResampleUnit(v95, v96, v97, v98, v99, v100, v101, v102);
              goto LABEL_80;
            }
            v28 = 4;
          }
          LODWORD(value) = v28;
          v29 = (const __CFString *)CFDictionaryGetValue(v18, CFSTR("CoordinateType"));
          if (!v29
            || (v30 = v29, v31 = CFGetTypeID(v29), v31 != CFStringGetTypeID())
            || (CFStringToZinIrCoordinateType(v30, v14) & 1) == 0)
          {
            v87 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v87)
              ZinParseResampleUnit(v87, v88, v89, v90, v91, v92, v93, v94);
LABEL_80:
            ZinIrUnitStatus::SetError(a3, CFSTR("InvalidCoordinateTypeInfo"));
            goto LABEL_81;
          }
          v32 = a2[20];
          v33 = a2[21];
          if (v32 != v33)
          {
            v34 = a2[20];
            while (*(_DWORD *)v34 != (_DWORD)value)
            {
              if (++v34 == v33)
                goto LABEL_24;
            }
            v79 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v79)
              ZinParseResampleUnit(v79, v80, v81, v82, v83, v84, v85, v86);
            goto LABEL_80;
          }
LABEL_24:
          if ((unint64_t)v33 >= *v15)
          {
            v36 = v33 - v32;
            if ((unint64_t)(v36 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v37 = *v15 - (_QWORD)v32;
            v38 = v37 >> 2;
            if (v37 >> 2 <= (unint64_t)(v36 + 1))
              v38 = v36 + 1;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v39 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v39 = v38;
            if (v39)
              v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v15, v39);
            else
              v40 = 0;
            v41 = (void **)&v40[8 * v36];
            *v41 = value;
            v35 = v41 + 1;
            v43 = a2[20];
            v42 = a2[21];
            if (v42 != v43)
            {
              do
              {
                v44 = *--v42;
                *--v41 = v44;
              }
              while (v42 != v43);
              v42 = a2[20];
            }
            a2[20] = v41;
            a2[21] = v35;
            a2[22] = (void **)&v40[8 * v39];
            if (v42)
              operator delete(v42);
          }
          else
          {
            *v33 = value;
            v35 = v33 + 1;
          }
          a2[21] = v35;
          if (++v13 == v103)
            goto LABEL_64;
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinParseResampleUnit(v13);
      }
LABEL_81:
      v45 = CFSTR("InvalidCoordinateTypeInfo");
    }
    else
    {
      v47 = (unsigned int *)a2[20];
      v48 = (unsigned int *)a2[21];
      v46 = a2 + 20;
      if (v47 != v48)
      {
        v49 = a2 + 22;
        v50 = (uint64_t *)a2[21];
        do
        {
          v51 = *v47;
          if ((unint64_t)v50 >= *v49)
          {
            v52 = ((char *)v50 - (char *)*v46) >> 3;
            if ((unint64_t)(v52 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v53 = *v49 - (_QWORD)*v46;
            v54 = v53 >> 2;
            if (v53 >> 2 <= (unint64_t)(v52 + 1))
              v54 = v52 + 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
              v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a2 + 22), v55);
            else
              v56 = 0;
            v57 = (uint64_t *)&v56[8 * v52];
            *v57 = v51 | 0x100000000;
            v50 = v57 + 1;
            v59 = a2[20];
            v58 = a2[21];
            if (v58 != v59)
            {
              do
              {
                v60 = (uint64_t)*--v58;
                *--v57 = v60;
              }
              while (v58 != v59);
              v58 = *v46;
            }
            a2[20] = (void **)v57;
            a2[21] = (void **)v50;
            a2[22] = (void **)&v56[8 * v55];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *v50++ = v51 | 0x100000000;
          }
          a2[21] = (void **)v50;
          v47 += 2;
        }
        while (v47 != v48);
      }
LABEL_64:
      value = (void *)CFDictionaryGetValue(v6, CFSTR("CoordinateMode"));
      if (!CFDictionaryGetValueIfPresent(v6, CFSTR("CoordinateMode"), (const void **)&value)
        || (v61 = CFGetTypeID(value), v61 == CFStringGetTypeID())
        && ZinCFStringEquals((const __CFString *)value, CFSTR("XY")))
      {
        result = 0;
        *((_DWORD *)a2 + 46) = 0;
        return result;
      }
      v62 = CFGetTypeID(value);
      if (v62 == CFStringGetTypeID() && ZinCFStringEquals((const __CFString *)value, CFSTR("YX")))
      {
        result = 0;
        *((_DWORD *)a2 + 46) = 1;
        return result;
      }
      v63 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v63)
        ZinParseResampleUnit(v63, v64, v65, v66, v67, v68, v69, v70);
      v45 = CFSTR("InvalidWarpCoordinateMode");
    }
  }
  else
  {
    v45 = CFSTR("InvalidParamSyntax");
  }
  ZinIrUnitStatus::SetError(a3, v45);
  return 3;
}

void ZinParseResampleUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid or unsupported warp coordinate mode for Resample unit\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Resample coordinate type info array cannot be empty.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ZinIrCoordinateTypeInfo dictionary has incorrect sampling information.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Duplicated coordinate type axis.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ZinIrCoordinateTypeInfo dictionary has incorrect coordinate information.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinParseResampleUnit(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Unable to parse coordinate type info at index #%d.\n", (uint8_t *)v1, 8u);
  OUTLINED_FUNCTION_1();
}

void ZinAssertImpl(const char *__format, ...)
{
  ZinException *exception;
  char __str[512];
  uint64_t v3;
  va_list va;

  va_start(va, __format);
  v3 = *MEMORY[0x24BDAC8D0];
  vsnprintf(__str, 0x200uLL, __format, va);
  __str[511] = 0;
  exception = (ZinException *)__cxa_allocate_exception(0x98uLL);
  ZinException::ZinException(exception, __str);
}

void sub_206FD7960(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrWeightBase::ZinIrWeightBase(uint64_t a1, uint64_t *a2, int a3, int64x2_t *a4, uint64_t a5, int a6, char a7)
{
  int64x2_t v13;
  _QWORD *v14;

  *(_QWORD *)a1 = &unk_24C01AFB0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  v13 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 56) = v13;
  *(int64x2_t *)(a1 + 72) = v13;
  *(int64x2_t *)(a1 + 88) = v13;
  *(int64x2_t *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 136) = 0;
  v14 = (_QWORD *)(a1 + 136);
  *(int64x2_t *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = a7;
  *(_DWORD *)(a1 + 156) = 1262703187;
  ZinIrTransformHistory::ZinIrTransformHistory((ZinIrTransformHistory *)(a1 + 160));
  std::shared_ptr<ZinIrConstData>::operator=[abi:ne180100](v14, a2);
  *(_DWORD *)(a1 + 156) = a6;
  ZinIrWeightBase::DescriptorInit(a1, a4, a3, a6, a5);
  return a1;
}

void sub_206FD7A50(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  ZinIrTransformHistory::~ZinIrTransformHistory(v2);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeightBase::DescriptorInit(uint64_t a1, int64x2_t *a2, int a3, int a4, uint64_t a5)
{
  int64x2_t v6;
  uint64_t result;
  int64x2_t v12;
  int64x2_t v13;
  uint64_t v14;

  v14 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v6 = vdupq_n_s64(1uLL);
  result = 14100;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_s64(v6, *a2), (int32x4_t)vcgtq_s64(v6, a2[1])))) & 1) == 0
    && a2[2].i64[0] >= 1)
  {
    if (ZinKernelFormatGetBitDepth(a3, &v14))
    {
      return 14100;
    }
    else
    {
      *(_DWORD *)(a1 + 8) = a3;
      v12 = *a2;
      v13 = a2[1];
      *(_QWORD *)(a1 + 88) = a2[2].i64[0];
      *(int64x2_t *)(a1 + 72) = v13;
      *(int64x2_t *)(a1 + 56) = v12;
      result = ZinKernelCalculateStrides(a2, a4, (_QWORD *)(a1 + 16), (uint64_t *)(a1 + 96));
      *(_QWORD *)(a1 + 16) = a5;
    }
  }
  return result;
}

void ZinIrTransformHistory::~ZinIrTransformHistory(void **this)
{
  void **v2;

  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t ZinIrWeightBase::UpdateDescriptorForPartialTransform(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  _QWORD *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a4 == 1)
  {
    v4 = a1 + 3;
    v5 = a1 + 8;
  }
  else
  {
    if (a4)
      return 3;
    v4 = a1 + 2;
    v5 = a1 + 7;
  }
  if (a3 < 0)
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinIrWeightBase::UpdateDescriptorForPartialTransform(v15, v16, v17, v18, v19, v20, v21, v22);
    return 3;
  }
  if ((a3 ^ 0x7FFFFFFFFFFFFFFFLL) <= *v4)
  {
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinIrWeightBase::UpdateDescriptorForPartialTransform(v23, v24, v25, v26, v27, v28, v29, v30);
    return 3;
  }
  if ((unint64_t)(a3 + a2) > *v5)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinIrWeightBase::UpdateDescriptorForPartialTransform(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  result = 0;
  *v4 += a3;
  *v5 = a2;
  return result;
}

void ZinIrWeightBase::SetupMutableHistory(uint64_t a1, uint64_t a2, __int128 **a3)
{
  ZinIrTransformHistory *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t SourceFileInfo;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15[3];
  std::string v16;
  __int128 v17;
  int v18;
  void **v19;

  *(_BYTE *)(a2 + 152) = 1;
  v6 = (ZinIrTransformHistory *)(a1 + 160);
  v7 = a2 + 160;
  if (a2 != a1)
    std::vector<std::shared_ptr<ZinIrConstData>>::__assign_with_size[abi:ne180100]<std::shared_ptr<ZinIrConstData> const*,std::shared_ptr<ZinIrConstData> const*>(v7, *(uint64_t **)(a1 + 160), *(uint64_t **)(a1 + 168), (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 4);
  std::string::operator=((std::string *)(a2 + 184), (const std::string *)(a1 + 184));
  v8 = *(_OWORD *)(a1 + 208);
  *(_DWORD *)(a2 + 224) = *(_DWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 208) = v8;
  v9 = *(_OWORD *)(a1 + 260);
  v10 = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a2 + 248) = v10;
  *(_OWORD *)(a2 + 260) = v9;
  if (ZinIrTransformHistory::Size(v6))
  {
    ZinIrTransformHistory::Append(v7, a3);
  }
  else
  {
    SourceFileInfo = ZinIrWeightBase::GetSourceFileInfo((ZinIrWeightBase *)a1);
    v12 = SourceFileInfo;
    if (*(char *)(SourceFileInfo + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)SourceFileInfo, *(_QWORD *)(SourceFileInfo + 8));
    }
    else
    {
      v13 = *(_OWORD *)SourceFileInfo;
      v16.__r_.__value_.__r.__words[2] = *(_QWORD *)(SourceFileInfo + 16);
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v13;
    }
    v14 = *(_OWORD *)(v12 + 24);
    v18 = *(_DWORD *)(v12 + 40);
    v17 = v14;
    memset(v15, 0, sizeof(v15));
    std::vector<std::shared_ptr<ZinIrTransform>>::__init_with_size[abi:ne180100]<std::shared_ptr<ZinIrTransform>*,std::shared_ptr<ZinIrTransform>*>((char *)v15, *a3, a3[1], a3[1] - *a3);
    ZinIrTransformHistory::Init(v7, (uint64_t)&v16, v15, a1 + 56, *(_DWORD *)(a1 + 8));
    v19 = (void **)v15;
    std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v19);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_206FD7DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v19 - 56) = v18;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 56));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrWeightBase::GetSourceFileInfo(ZinIrWeightBase *this)
{
  ZinIrTransformHistory *v2;

  v2 = (ZinIrWeightBase *)((char *)this + 160);
  if (ZinIrTransformHistory::Size((ZinIrWeightBase *)((char *)this + 160)))
    return ZinIrTransformHistory::GetSourceFileInfo(v2);
  else
    return *((_QWORD *)this + 17) + 8;
}

uint64_t ZinIrWeightBase::GetAt<float>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 40))(*(_QWORD *)(a1 + 136));
}

{
  uint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 40))(*(_QWORD *)(a1 + 136), v2);
}

uint64_t ZinIrWeightBase::GetElemAt<float>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 48))(*(_QWORD *)(a1 + 136));
}

uint64_t ZinIrWeightBase::GetAt<half>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 56))(*(_QWORD *)(a1 + 136));
}

{
  uint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 56))(*(_QWORD *)(a1 + 136), v2);
}

uint64_t ZinIrWeightBase::GetElemAt<half>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136));
}

uint64_t ZinIrWeightBase::GetAt<e4m3_t>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 88))(*(_QWORD *)(a1 + 136));
}

{
  uint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 88))(*(_QWORD *)(a1 + 136), v2);
}

uint64_t ZinIrWeightBase::GetElemAt<e4m3_t>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 96))(*(_QWORD *)(a1 + 136));
}

uint64_t ZinIrWeightBase::GetAt<unsigned char>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 120))(*(_QWORD *)(a1 + 136));
}

{
  uint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 120))(*(_QWORD *)(a1 + 136), v2);
}

uint64_t ZinIrWeightBase::GetElemAt<unsigned char>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 128))(*(_QWORD *)(a1 + 136));
}

uint64_t ZinIrWeightBase::GetAt<signed char>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 72))(*(_QWORD *)(a1 + 136));
}

{
  uint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 72))(*(_QWORD *)(a1 + 136), v2);
}

uint64_t ZinIrWeightBase::GetElemAt<signed char>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 80))(*(_QWORD *)(a1 + 136));
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint1_at(*(ZinIrConstData **)(a1 + 136), a2) & 1;
}

uint64_t ZinIrConstData::uint1_at(ZinIrConstData *this, unint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
    return (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, a2);
  else
    return ((*(unsigned int (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, a2 >> 3) >> (a2 & 7)) & 1;
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint1>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint1_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 1;
}

uint64_t ZinIrConstData::uint1_elem_at(ZinIrConstData *this, unint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
    return (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 128))(this, a2);
  else
    return ((*(unsigned int (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 128))(this, a2 >> 3) >> (a2 & 7)) & 1;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint2_at(*(ZinIrConstData **)(a1 + 136), a2) & 3;
}

uint64_t ZinIrConstData::uint2_at(ZinIrConstData *this, unint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
    return (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, a2);
  else
    return ((*(unsigned int (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, a2 >> 2) >> (2 * (a2 & 3))) & 3;
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint2>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint2_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 3;
}

uint64_t ZinIrConstData::uint2_elem_at(ZinIrConstData *this, unint64_t a2)
{
  if ((*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
    return (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 128))(this, a2);
  else
    return ((*(unsigned int (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 128))(this, a2 >> 2) >> (2 * (a2 & 3))) & 3;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(uint64_t a1, uint64_t a2)
{
  return ZinIrConstData::uint3_at(*(ZinIrConstData **)(a1 + 136), a2) & 7;
}

uint64_t ZinIrConstData::uint3_at(ZinIrConstData *this, uint64_t a2)
{
  if (!(*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
  {
    (*(void (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, (unint64_t)(3 * a2) >> 3);
    __asm { BR              X10 }
  }
  return (*(uint64_t (**)(ZinIrConstData *, uint64_t))(*(_QWORD *)this + 120))(this, a2);
}

uint64_t sub_206FD82BC(char a1)
{
  return a1 & 7;
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint3>(uint64_t a1, uint64_t a2)
{
  return ZinIrConstData::uint3_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 7;
}

uint64_t ZinIrConstData::uint3_elem_at(ZinIrConstData *this, uint64_t a2)
{
  if (!(*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
  {
    (*(void (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 128))(this, (unint64_t)(3 * a2) >> 3);
    __asm { BR              X10 }
  }
  return (*(uint64_t (**)(ZinIrConstData *, uint64_t))(*(_QWORD *)this + 128))(this, a2);
}

uint64_t sub_206FD83D8(char a1)
{
  return a1 & 7;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint4_at(*(ZinIrConstData **)(a1 + 136), a2) & 0xF;
}

uint64_t ZinIrConstData::uint4_at(ZinIrConstData *this, unint64_t a2)
{
  unsigned int v5;

  if ((*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
    return (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, a2);
  v5 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, a2 >> 1);
  if ((a2 & 1) != 0)
    return v5 >> 4;
  else
    return v5 & 0xF;
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint4>(uint64_t a1, unint64_t a2)
{
  return ZinIrConstData::uint4_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 0xF;
}

uint64_t ZinIrConstData::uint4_elem_at(ZinIrConstData *this, unint64_t a2)
{
  unsigned int v5;

  if ((*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
    return (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 128))(this, a2);
  v5 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 128))(this, a2 >> 1);
  if ((a2 & 1) != 0)
    return v5 >> 4;
  else
    return v5 & 0xF;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(uint64_t a1, uint64_t a2)
{
  return ZinIrConstData::uint6_at(*(ZinIrConstData **)(a1 + 136), a2) & 0x3F;
}

uint64_t ZinIrConstData::uint6_at(ZinIrConstData *this, uint64_t a2)
{
  unint64_t v5;
  unsigned int v6;

  if ((*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
    return (*(uint64_t (**)(ZinIrConstData *, uint64_t))(*(_QWORD *)this + 120))(this, a2);
  v5 = (unint64_t)(3 * a2) >> 2;
  v6 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, v5);
  if ((a2 & 3) == 2)
    return (v6 >> 4) & 0xFFFFFFCF | (16
                                   * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, v5 + 1) & 3));
  if ((a2 & 3) == 1)
    return (v6 >> 6) & 0xFFFFFFC3 | (4
                                   * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, v5 + 1) & 0xF));
  if ((a2 & 3) != 0)
    return v6 >> 2;
  return v6 & 0x3F;
}

uint64_t ZinIrWeightBase::GetElemAt<ZinIrWeightBase::uint6>(uint64_t a1, uint64_t a2)
{
  return ZinIrConstData::uint6_elem_at(*(ZinIrConstData **)(a1 + 136), a2) & 0x3F;
}

uint64_t ZinIrConstData::uint6_elem_at(ZinIrConstData *this, uint64_t a2)
{
  unint64_t v5;
  unsigned int v6;

  if ((*(unsigned int (**)(ZinIrConstData *))(*(_QWORD *)this + 192))(this))
    return (*(uint64_t (**)(ZinIrConstData *, uint64_t))(*(_QWORD *)this + 128))(this, a2);
  v5 = (unint64_t)(3 * a2) >> 2;
  v6 = (*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 128))(this, v5);
  if ((a2 & 3) == 2)
    return (v6 >> 4) & 0xFFFFFFCF | (16
                                   * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, v5 + 1) & 3));
  if ((a2 & 3) == 1)
    return (v6 >> 6) & 0xFFFFFFC3 | (4
                                   * ((*(uint64_t (**)(ZinIrConstData *, unint64_t))(*(_QWORD *)this + 120))(this, v5 + 1) & 0xF));
  if ((a2 & 3) != 0)
    return v6 >> 2;
  return v6 & 0x3F;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint1>(uint64_t a1)
{
  unint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint1_at(*(ZinIrConstData **)(a1 + 136), v2) & 1;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint2>(uint64_t a1)
{
  unint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint2_at(*(ZinIrConstData **)(a1 + 136), v2) & 3;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint3>(uint64_t a1)
{
  uint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint3_at(*(ZinIrConstData **)(a1 + 136), v2) & 7;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint4>(uint64_t a1)
{
  unint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint4_at(*(ZinIrConstData **)(a1 + 136), v2) & 0xF;
}

uint64_t ZinIrWeightBase::GetAt<ZinIrWeightBase::uint6>(uint64_t a1)
{
  uint64_t v2;

  v2 = (**(uint64_t (***)(uint64_t))a1)(a1);
  return ZinIrConstData::uint6_at(*(ZinIrConstData **)(a1 + 136), v2) & 0x3F;
}

void ZinIrWeightBase::UpdateDescriptorForPartialTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "channel offset should be >= 0.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "The range is beyond the original dimension size.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Overflow from subset offset", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinParseFlattenType(const __CFString *a1, _DWORD *a2)
{
  *a2 = 0;
  if (!ZinCFStringEquals(a1, CFSTR("NCHW")))
  {
    if (ZinCFStringEquals(a1, CFSTR("NHWC")))
      return 2;
    *a2 = 3;
  }
  return 1;
}

uint64_t ZinParseFlattenUnit(const __CFDictionary *a1, ZinIrFlattenUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    v20 = CFSTR("InvalidParamSyntax");
LABEL_13:
    ZinIrUnitStatus::SetError(a3, v20);
    return 3;
  }
  v8 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("Mode"));
  if (!v8 || (v9 = v8, v10 = CFGetTypeID(v8), v10 != CFStringGetTypeID()))
  {
    v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v21)
      ZinParseFlattenUnit(v21, v22, v23, v24, v25, v26, v27, v28);
    v20 = CFSTR("InvalidFlattenModeSyntax");
    goto LABEL_13;
  }
  v30 = 0;
  *((_DWORD *)a2 + 20) = ZinParseFlattenType(v9, &v30);
  v11 = v30;
  if (v30)
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinParseFlattenUnit(v12, v13, v14, v15, v16, v17, v18, v19);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidFlattenMode"));
  }
  return v11;
}

void ZinParseFlattenUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing required flatten mode in the parameter dictionary in a flatten layer.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unknown flatten mode!\n", a5, a6, a7, a8, 0);
}

uint64_t ZinSpatialSplitTransform::TransferShapeDependentTransformsToContext(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  BOOL v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD **)(result + 16);
  if (*(_BYTE *)(result + 40))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    do
    {
      v5 = v2[2];
      v6 = v2[3];
      v2[3] = 0;
      v7 = v6;
      ZinIrContext::InsertShapeDependentTransform(a2, v5, &v7);
      result = v7;
      v7 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_206FD8B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSpatialSplitTransform::GetOrCreateSpatialSplitTransform(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a1;
  v3 = std::__hash_table<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unordered_map<ZinDependencyOffsetDim,long>>>>::find<long>(a2, (unint64_t *)&v9);
  if (!v3)
  {
    v4 = operator new();
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)v4 = &off_24C0233A8;
    *(_QWORD *)(v4 + 8) = v4 + 16;
    v7 = v9;
    v8 = v4;
    v3 = std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::unique_ptr<ZinSpatialSplitTransform>>>((uint64_t)a2, (unint64_t *)&v7, &v7);
    v5 = v8;
    v8 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v3[3];
}

void sub_206FD8C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void ZinSpatialSplitTransform::AdjustViewToFit(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int Dimension;
  int v7;
  int v8;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      Dimension = ZinTensorDimensions::GetDimension(a3, *(_DWORD *)(*(_QWORD *)v3 + 92));
      v7 = *(_DWORD *)(*(_QWORD *)v3 + 80);
      v8 = *(_DWORD *)(*(_QWORD *)v3 + 88);
      if (v7 + (*(_DWORD *)(*(_QWORD *)v3 + 84) - 1) * v8 >= Dimension)
        *(_DWORD *)(*(_QWORD *)v3 + 84) = (Dimension - v7) / v8;
      v3 += 8;
    }
    while (v3 != v4);
  }
}

BOOL ZinSpatialSplitTransform::HasEachViewDimensionOnlyOnce(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  int v14;
  int *v15;
  int *v16;
  _BYTE *v17;
  uint64_t v18;
  char v20[8];
  _QWORD *v21;
  uint64_t v22;
  void *__p;
  int *v24;
  int *v25;

  __p = 0;
  v24 = 0;
  v25 = 0;
  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
  {
    v4 = 0;
    v15 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2;
      if (v4 >= v25)
      {
        v6 = (int *)__p;
        v7 = ((char *)v4 - (_BYTE *)__p) >> 2;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v9 = (char *)v25 - (_BYTE *)__p;
        if (((char *)v25 - (_BYTE *)__p) >> 1 > v8)
          v8 = v9 >> 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
        {
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v25, v10);
          v6 = (int *)__p;
          v4 = v24;
        }
        else
        {
          v11 = 0;
        }
        v12 = &v11[4 * v7];
        *(_DWORD *)v12 = *(_DWORD *)(v5 + 92);
        v13 = (int *)(v12 + 4);
        while (v4 != v6)
        {
          v14 = *--v4;
          *((_DWORD *)v12 - 1) = v14;
          v12 -= 4;
        }
        __p = v12;
        v24 = v13;
        v25 = (int *)&v11[4 * v10];
        if (v6)
          operator delete(v6);
        v4 = v13;
      }
      else
      {
        *v4++ = *(_DWORD *)(v5 + 92);
      }
      v24 = v4;
      ++v2;
    }
    while (v2 != v3);
    v15 = (int *)__p;
  }
  std::set<int>::set[abi:ne180100]<std::__wrap_iter<ZinIrDimension *>>((uint64_t)v20, v15, v4);
  v17 = __p;
  v16 = v24;
  v18 = v22;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v20, v21);
  if (__p)
  {
    v24 = (int *)__p;
    operator delete(__p);
  }
  return v18 == ((char *)v16 - v17) >> 2;
}

void sub_206FD8E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinSpatialSplitTransform::Run(uint64_t a1, uint64_t a2, ZinANELayer **a3, uint64_t **a4)
{
  uint64_t BondedInfo;
  _BOOL8 HasEachViewDimensionOnlyOnce;
  uint64_t *i;
  uint64_t **v11;
  ZinMirUnit ****v12;
  uint64_t *AotTensorDims;
  uint64_t v14;
  int v15;
  int Dimension;
  uint64_t Padding;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  int v24;
  int v25;
  ZinSpatialSplitTransform *v26;
  uint64_t PoolingInfo;
  int v28;
  ZinMirNEUnit *v29;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3) == 36)
  {
    BondedInfo = ZinANELayer::GetBondedInfo(*a3);
    HasEachViewDimensionOnlyOnce = ZinSpatialSplitTransform::HasEachViewDimensionOnlyOnce(BondedInfo, (uint64_t **)BondedInfo);
    if (!HasEachViewDimensionOnlyOnce)
      ZinAssertImpl("Each view should only contain each dimension once as part of the view vector");
    ZinSpatialSplitTransform::AdjustViewToFit(HasEachViewDimensionOnlyOnce, (uint64_t *)BondedInfo, *a4);
    for (i = *(uint64_t **)BondedInfo; i != *(uint64_t **)(BondedInfo + 8); ++i)
    {
      if (*(int *)(*i + 84) <= 0)
        goto LABEL_48;
    }
    goto LABEL_45;
  }
  if (*(_BYTE *)(a1 + 60)
    && (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3) == 89
     || *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3) == 85
     || *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3) == 83))
  {
    *(_QWORD *)&v31[0] = a3;
    v11 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)(a2 + 64), (unint64_t **)v31);
    v12 = (ZinMirUnit ****)(a2 + 104);
    if (v11)
      v12 = (ZinMirUnit ****)(v11 + 3);
    AotTensorDims = (uint64_t *)ZinMirUnit::GetAotTensorDims(***v12);
    v14 = 0;
    *(_QWORD *)&v31[0] = 0x400000003;
    DWORD2(v31[0]) = 1;
    while (1)
    {
      v15 = *(_DWORD *)((char *)v31 + v14);
      Dimension = ZinTensorDimensions::GetDimension(AotTensorDims, v15);
      Padding = GetPadding(a3);
      switch(v15)
      {
        case 1:
          v18 = (_DWORD *)(Padding + 20);
          break;
        case 4:
          v18 = (_DWORD *)(Padding + 4);
          break;
        case 3:
          v18 = (_DWORD *)(Padding + 12);
          break;
        default:
          ZinAssertImpl("Invalid dimension to set padding for", v31[0]);
      }
      v19 = *v18 + Dimension;
      if (ZinTensorDimensions::GetDimension(*a4, v15) >= v19)
        goto LABEL_44;
      v20 = ZinTensorDimensions::GetDimension(*a4, v15);
      if (!*(_BYTE *)(a1 + 60)
        || ((v21 = v19 - v20, v15 == 1)
          ? (*(_DWORD *)(a1 + 52) >= v21 ? (v22 = v19 - v20) : (v22 = *(_DWORD *)(a1 + 52)),
             v23 = (_DWORD *)(GetPadding(a3) + 20))
          : v15 == 3
          ? (*(_DWORD *)(a1 + 44) >= v21 ? (v22 = v19 - v20) : (v22 = *(_DWORD *)(a1 + 44)),
             v23 = (_DWORD *)(GetPadding(a3) + 12))
          : (*(_DWORD *)(a1 + 36) >= v21 ? (v22 = v19 - v20) : (v22 = *(_DWORD *)(a1 + 36)),
             v23 = (_DWORD *)(GetPadding(a3) + 4)),
            *v23 = v22,
            !*(_BYTE *)(a1 + 60)))
      {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      v24 = *(_DWORD *)(a1 + 56);
      v25 = *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a3);
      v26 = *a3;
      if (v25 == 89)
        break;
      v28 = *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(v26);
      v29 = *a3;
      if (v28 == 85)
      {
        *(_DWORD *)(ZinMirNEUnit::GetKernelDescriptor(v29) + 200) = v24;
      }
      else if (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(v29) == 83)
      {
        PoolingInfo = ZinMirPEPoolUnit::GetPoolingInfo(*a3);
        goto LABEL_43;
      }
LABEL_44:
      v14 += 4;
      if (v14 == 12)
        goto LABEL_45;
    }
    PoolingInfo = ZinMirNEPoolUnit::GetPoolingInfo(v26);
LABEL_43:
    *(_DWORD *)(PoolingInfo + 100) = v24;
    goto LABEL_44;
  }
LABEL_45:
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  if ((*(unsigned int (**)(ZinANELayer *, uint64_t **, _OWORD *))(*(_QWORD *)*a3 + 16))(*a3, a4, v31)
    || ZinTensorDimensions::IsValid((ZinTensorDimensions *)v31))
  {
    return 0;
  }
LABEL_48:
  if (ZinMirUnitGraph::RemoveNode(a2, a3))
    return 0;
  else
    return 3;
}

uint64_t ZinSpatialSplitTransform::GetPaddingInfo(ZinSpatialSplitTransform *this)
{
  return (uint64_t)this + 32;
}

uint64_t *ZinSpatialSplitTransform::AddViewId(uint64_t **this, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(this + 1, (unint64_t *)&v3, &v3);
}

uint64_t ZinSpatialSplitTransform::GetTransformType(ZinSpatialSplitTransform *this)
{
  return 1;
}

BOOL ZinSpatialSplitTransform::operator==(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a1[3] == *(_QWORD *)(a2 + 24))
  {
    v2 = (_QWORD *)a1[1];
    if (v2 == a1 + 2)
      return std::operator==[abi:ne180100]<ZinSpatialSplitTransformPadding,ZinSpatialSplitTransformPadding>((uint64_t)(a1 + 4), a2 + 32);
    v3 = *(_QWORD **)(a2 + 8);
    while (v2[4] == v3[4])
    {
      v4 = (_QWORD *)v2[1];
      v5 = v2;
      if (v4)
      {
        do
        {
          v2 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v2 = (_QWORD *)v5[2];
          v6 = *v2 == (_QWORD)v5;
          v5 = v2;
        }
        while (!v6);
      }
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v6 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v6);
      }
      v3 = v8;
      if (v2 == a1 + 2)
        return std::operator==[abi:ne180100]<ZinSpatialSplitTransformPadding,ZinSpatialSplitTransformPadding>((uint64_t)(a1 + 4), a2 + 32);
    }
  }
  return 0;
}

{
  int v4;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  return v4 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2)
      && ZinSpatialSplitTransform::operator==(a1, a2);
}

BOOL std::operator==[abi:ne180100]<ZinSpatialSplitTransformPadding,ZinSpatialSplitTransformPadding>(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  _BOOL8 result;

  if (*(_BYTE *)(a1 + 28))
    v2 = *(_BYTE *)(a2 + 28) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 28) != 0) == (*(_BYTE *)(a2 + 28) != 0);
  result = ZinIrPadding::operator==((_DWORD *)a1, (_DWORD *)a2);
  if (result)
    return *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t ZinSpatialSplitTransform::SetPaddingInfo(uint64_t result, _OWORD *a2)
{
  int v2;
  __int128 v3;

  v2 = *(unsigned __int8 *)(result + 60);
  v3 = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)(result + 32) = *a2;
  *(_OWORD *)(result + 44) = v3;
  if (!v2)
    *(_BYTE *)(result + 60) = 1;
  return result;
}

void ZinSpatialSplitTransform::~ZinSpatialSplitTransform(ZinSpatialSplitTransform *this)
{
  *(_QWORD *)this = &off_24C0233A8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = &off_24C0233A8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x20BD002F8);
}

uint64_t GetPadding(ZinSpatialSplitTransform **a1)
{
  int v2;
  ZinMirNEPoolUnit *v3;
  uint64_t PoolingInfo;
  int v5;
  ZinMirNEUnit *v6;

  v2 = *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(*a1);
  v3 = *a1;
  if (v2 == 89)
  {
    PoolingInfo = ZinMirNEPoolUnit::GetPoolingInfo(v3);
  }
  else
  {
    v5 = *(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(v3);
    v6 = *a1;
    if (v5 == 85)
      return ZinMirNEUnit::GetKernelDescriptor(v6) + 176;
    if (*(_DWORD *)ZinSpatialSplitTransform::GetPaddingInfo(v6) != 83)
      ZinAssertImpl("Invalid unit to get padding for");
    PoolingInfo = ZinMirPEPoolUnit::GetPoolingInfo(*a1);
  }
  return PoolingInfo + 64;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unique_ptr<ZinSpatialSplitTransform>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::unique_ptr<ZinSpatialSplitTransform>>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  v13 = *a3;
  v14 = a3[1];
  a3[1] = 0;
  *i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7)
        v23 %= v7;
    }
    else
    {
      v23 &= v7 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_206FD969C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MemType,std::unique_ptr<ZinIrMemoryPool>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::set<int>::set[abi:ne180100]<std::__wrap_iter<ZinIrDimension *>>(uint64_t a1, int *a2, int *a3)
{
  uint64_t *v4;
  int *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
      std::__tree<int>::__emplace_hint_unique_impl<ZinIrDimension &>((uint64_t **)a1, v4, v6++);
    while (v6 != a3);
  }
  return a1;
}

void sub_206FD971C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<int>::__emplace_hint_unique_impl<ZinIrDimension &>(uint64_t **a1, uint64_t *a2, int *a3)
{
  int *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = (int *)operator new(0x20uLL);
  v6[7] = *a3;
  v7 = (uint64_t **)std::__tree<ZinKernelFormat>::__find_equal<ZinKernelFormat>(a1, a2, &v11, &v10, v6 + 7);
  v8 = *v7;
  if (*v7)
  {
    operator delete(v6);
    return v8;
  }
  else
  {
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, (uint64_t)v11, v7, (uint64_t *)v6);
  }
  return (uint64_t *)v6;
}

void sub_206FD97C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinSNEPatterns::Condition::Condition(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string::__raw *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  void *__p[2];
  char v24;
  int v25;
  void *v26[2];
  char v27;
  int v28;
  void *v29[2];
  char v30;
  __int128 *v31;
  __int128 *v32;
  __int128 *v33;
  __int128 **v34;
  char v35;
  _BYTE v36[24];
  _BYTE *v37;
  std::string v38;
  _QWORD v39[3];
  _QWORD *v40;
  std::string v41;
  _QWORD v42[3];
  _QWORD *v43;
  std::string v44;
  _QWORD v45[3];
  _QWORD *v46;
  std::string v47[2];
  std::string v48[2];
  _QWORD *v49;
  uint64_t v50;
  std::string v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  std::string v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD v59[2];

  v59[1] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v29, "EW");
  ZinSNEAtoms::EWAtom::EWAtom(&v44, v29, a3);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v47, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
  else
    v47[0] = v44;
  v6 = v45;
  v7 = (uint64_t)v46;
  if (!v46)
    goto LABEL_7;
  if (v46 != v45)
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*v46 + 16))(v46);
LABEL_7:
    v49 = (_QWORD *)v7;
    goto LABEL_9;
  }
  v49 = (_QWORD *)v48;
  (*(void (**)(_QWORD *))(v45[0] + 24))(v45);
LABEL_9:
  v28 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v50, &v28, 1);
  std::string::basic_string[abi:ne180100]<0>(v26, "Activation");
  ZinSNEAtoms::ActivationAtom::ActivationAtom(&v41, v26, a3);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v51, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  else
    v51 = v41;
  v8 = v42;
  v9 = (uint64_t)v43;
  if (!v43)
    goto LABEL_15;
  if (v43 != v42)
  {
    v9 = (*(uint64_t (**)(_QWORD *))(*v43 + 16))(v43);
LABEL_15:
    v53 = (uint64_t *)v9;
    goto LABEL_17;
  }
  v53 = &v52;
  (*(void (**)(_QWORD *))(v42[0] + 24))(v42);
LABEL_17:
  v25 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v54, &v25, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "Cond");
  ZinSNEAtoms::ConditionAtom::ConditionAtom(&v38, __p, a3);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v55, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v55 = v38;
  v10 = v39;
  v11 = (uint64_t)v40;
  if (!v40)
    goto LABEL_23;
  if (v40 != v39)
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*v40 + 16))(v40);
LABEL_23:
    v57 = (uint64_t *)v11;
    goto LABEL_25;
  }
  v57 = &v56;
  (*(void (**)(_QWORD *))(v39[0] + 24))(v39);
LABEL_25:
  v22 = 1;
  std::unordered_set<Attribute>::unordered_set((uint64_t)&v58, &v22, 1);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = &v31;
  v35 = 0;
  v31 = (__int128 *)operator new(0x120uLL);
  v32 = v31;
  v33 = v31 + 18;
  v32 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinLinearPattern::AtomItem const>,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((uint64_t)&v33, (uint64_t)v47, (uint64_t)v59, (uint64_t)v31);
  v37 = 0;
  ZinLinearPattern::ZinLinearPattern((uint64_t)a1, &v31, a2, 0, (uint64_t)v36, 0);
  v12 = v37;
  if (v37 == v36)
  {
    v13 = 4;
    v12 = v36;
    goto LABEL_29;
  }
  if (v37)
  {
    v13 = 5;
LABEL_29:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  v34 = &v31;
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v14 = 36;
  do
  {
    v15 = &v47[v14 / 3];
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v44.__r_.__value_.__r.__words[v14 + 2]);
    v16 = (std::string::__raw *)v44.__r_.__value_.__r.__words[v14 + 1];
    if (&v42[v14 + 2] == (_QWORD *)v16)
    {
      v16 = (std::string::__raw *)&v15[-3];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_36;
      v17 = 5;
    }
    (*(void (**)(void))(v16->__words[0] + 8 * v17))();
LABEL_36:
    if (SHIBYTE(v42[v14 + 1]) < 0)
      operator delete(v15[-4].__r_.__value_.__l.__data_);
    v14 -= 12;
  }
  while (v14 * 8);
  if (v40 == v39)
  {
    v18 = 4;
LABEL_43:
    (*(void (**)(_QWORD *))(*v10 + 8 * v18))(v10);
  }
  else if (v40)
  {
    v18 = 5;
    v10 = v40;
    goto LABEL_43;
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(__p[0]);
  if (v43 == v42)
  {
    v19 = 4;
LABEL_52:
    (*(void (**)(_QWORD *))(*v8 + 8 * v19))(v8);
  }
  else if (v43)
  {
    v19 = 5;
    v8 = v43;
    goto LABEL_52;
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (v27 < 0)
    operator delete(v26[0]);
  if (v46 == v45)
  {
    v20 = 4;
LABEL_61:
    (*(void (**)(_QWORD *))(*v6 + 8 * v20))(v6);
  }
  else if (v46)
  {
    v20 = 5;
    v6 = v46;
    goto LABEL_61;
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (v30 < 0)
    operator delete(v29[0]);
  *a1 = &off_24BFFE588;
  return a1;
}

void sub_206FD9C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  ZinLinearPattern::AtomItemDesc *v60;

  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a39);
  if (a15 < 0)
    operator delete(__p);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a46);
  if (a22 < 0)
    operator delete(a17);
  ZinPatternAtomDesc::~ZinPatternAtomDesc((ZinPatternAtomDesc *)&a53);
  if (a29 < 0)
    operator delete(a24);
  while (v60 != (ZinLinearPattern::AtomItemDesc *)&a60)
  {
    v60 = (ZinLinearPattern::AtomItemDesc *)((char *)v60 - 96);
    ZinLinearPattern::AtomItemDesc::~AtomItemDesc(v60);
  }
  _Unwind_Resume(a1);
}

void sub_206FD9E1C()
{
  JUMPOUT(0x206FD9DDCLL);
}

void sub_206FD9E2C()
{
  JUMPOUT(0x206FD9E14);
}

double ZinSNEPatterns::Condition::SharedClone@<D0>(ZinSNEPatterns::Condition *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinSNEPatterns::Condition,std::allocator<ZinSNEPatterns::Condition>,ZinSNEPatterns::Condition const&,void>((uint64_t *)this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

uint64_t ZinSNEPatterns::Condition::Fuse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SingleMatch;
  uint64_t v6;
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "Activation");
  SingleMatch = ZinPattern::GetSingleMatch(a1, (unsigned __int8 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  v6 = ZinSNEConditionLayer::ConvertNonLinearModeToPredicateOp(*(_DWORD *)(SingleMatch + 192));
  return ZinBuilder::CreateSNEConditionLayer(*(_QWORD *)(SingleMatch + 16), a3, v6);
}

void sub_206FD9EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinSNEPatterns::Condition,std::allocator<ZinSNEPatterns::Condition>,ZinSNEPatterns::Condition const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xE8uLL);
  result = std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::__shared_ptr_emplace[abi:ne180100]<ZinSNEPatterns::Condition const&,std::allocator<ZinSNEPatterns::Condition>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_206FD9F44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::__shared_ptr_emplace[abi:ne180100]<ZinSNEPatterns::Condition const&,std::allocator<ZinSNEPatterns::Condition>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C005C98;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ZinSNEPatterns::Condition,ZinSNEPatterns::Condition const&,ZinSNEPatterns::Condition*>((ZinPattern *)(a1 + 3), a2);
  return a1;
}

void sub_206FD9F90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C005C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C005C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD002F8);
}

uint64_t std::__shared_ptr_emplace<ZinSNEPatterns::Condition>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 40))(a1 + 24);
}

ZinPattern *std::construct_at[abi:ne180100]<ZinSNEPatterns::Condition,ZinSNEPatterns::Condition const&,ZinSNEPatterns::Condition*>(ZinPattern *a1, uint64_t *a2)
{
  _QWORD *v4;

  ZinPattern::ZinPattern(a1, (const ZinPattern *)a2);
  *v4 = &off_24C01BCC8;
  v4[24] = 0;
  v4[25] = 0;
  v4[23] = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>(v4 + 23, a2[23], a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 5));
  *(_QWORD *)a1 = &off_24BFFE588;
  return a1;
}

void sub_206FDA064(_Unwind_Exception *a1)
{
  ZinPattern *v1;

  ZinPattern::~ZinPattern(v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrRingBufferUnitInfo::GetWrapAxes(_QWORD *a1, uint64_t a2)
{
  ZinIrRingBufferUnitInfo::GetStaticWrapAxes(a1, a2);
  return ZinIrRingBufferUnitInfo::GetDynamicWrapAxes(a1, a2);
}

_QWORD *ZinIrRingBufferUnitInfo::GetStaticWrapAxes(_QWORD *result, uint64_t a2)
{
  int *i;

  for (i = (int *)result[17]; i; i = *(int **)i)
  {
    if (*((_BYTE *)i + 32))
      result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>(a2, i + 4, i + 4);
  }
  return result;
}

_QWORD *ZinIrRingBufferUnitInfo::GetDynamicWrapAxes(_QWORD *result, uint64_t a2)
{
  int *i;

  for (i = (int *)result[12]; i; i = *(int **)i)
  {
    if (*((_BYTE *)i + 48))
      result = std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension const&>(a2, i + 4, i + 4);
  }
  return result;
}

void ZinIrCustomNeuronUnit::ZinIrCustomNeuronUnit(ZinIrCustomNeuronUnit *this, const ZinIrCustomNeuronUnitInfo *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *__p;
  void *v14;
  uint64_t v15;

  __p = 0;
  v14 = 0;
  v15 = 0;
  ZinIrUnit::ZinIrUnit(this, (uint64_t)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  *(_QWORD *)this = &off_24C0205D8;
  *((_QWORD *)this + 7) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 4) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 22) = v5;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 4, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 120) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 7) = &unk_24C0234E0;
  v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 152) = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)this + 136) = v6;
  v7 = *((_OWORD *)a2 + 7);
  v8 = *((_OWORD *)a2 + 8);
  v9 = *((_OWORD *)a2 + 9);
  *(_OWORD *)((char *)this + 216) = *((_OWORD *)a2 + 10);
  *(_OWORD *)((char *)this + 200) = v9;
  *(_OWORD *)((char *)this + 184) = v8;
  *(_OWORD *)((char *)this + 168) = v7;
  v10 = *((_OWORD *)a2 + 11);
  v11 = *((_OWORD *)a2 + 12);
  v12 = *((_OWORD *)a2 + 13);
  *(_OWORD *)((char *)this + 276) = *(_OWORD *)((char *)a2 + 220);
  *(_OWORD *)((char *)this + 264) = v12;
  *(_OWORD *)((char *)this + 248) = v11;
  *(_OWORD *)((char *)this + 232) = v10;
}

void sub_206FDA258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ZinIrUnit *v11;

  ZinIrUnit::~ZinIrUnit(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCustomNeuronUnit::Validate(ZinIrUnit *this, uint64_t a2, int a3, int a4, CFArrayRef *a5)
{
  uint64_t result;
  const char *v9;
  _QWORD v10[2];
  char v11;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 492)
    && (*(unsigned int (**)(ZinIrUnit *, CFArrayRef *))(*(_QWORD *)this + 144))(this, a5))
  {
    ZinIrUnit::GetUnitTypeString(this, v10);
    if (v11 >= 0)
      v9 = (const char *)v10;
    else
      v9 = (const char *)v10[0];
    ZinAssertImpl("Unit %s is not supported for dynamic shapes", v9);
  }
  result = ZinIrUnit::ValidateBottomCount(this, 1, a5);
  if (!(_DWORD)result)
  {
    result = ZinIrUnit::ValidateFormats(this, a5);
    if (!(_DWORD)result)
    {
      if (!(*(unsigned int (**)(ZinIrUnit *, uint64_t, CFArrayRef *))(*(_QWORD *)this + 120))(this, 1, a5))
      {
        if ((ZinIrCustomNeuronUnit::ValidateNeuron(this, *(const ZinIrHalParameters **)a2) & 1) != 0)
          return 0;
        ZinIrUnitStatus::SetError(a5, CFSTR("InvalidCustomNeuronLUT"));
      }
      return 3;
    }
  }
  return result;
}

void sub_206FDA398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCustomNeuronUnit::ValidateNeuron(ZinIrCustomNeuronUnit *this, const ZinIrHalParameters *a2)
{
  int v2;

  v2 = *((_DWORD *)this + 72);
  if (v2 != *((_DWORD *)a2 + 422))
    return 0;
  if (v2 == 1)
    return CustomLutV7UpUtil::Validate((unsigned __int16 *)this + 68);
  if (v2)
    return 1;
  return CustomLutV6DownUtil::Validate((__int16 *)this + 68);
}

uint64_t ZinIrCustomNeuronUnit::CreateOpcode@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v4, 4);
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

void sub_206FDA438(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCustomNeuronUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _BYTE v18[168];
  int v19;
  uint64_t v20;

  ZinIrCustomNeuronUnit::CreateOpcode((uint64_t)&v19);
  if (v19)
  {
    v5 = 0;
  }
  else
  {
    ZinIrActivationParams::ZinIrActivationParams((uint64_t)v18, 31);
    v8 = *(_DWORD *)(a1 + 288);
    if (v8)
    {
      if (v8 == 1)
        ZinIrActivationParams::SetCustomLutParams((uint64_t)v18, a1 + 136);
    }
    else
    {
      ZinIrActivationParams::SetCustomLutParams((uint64_t)v18, a1 + 136);
    }
    v9 = operator new();
    v5 = v9;
    v10 = (std::__shared_weak_count *)(*a3)[1];
    v16 = **a3;
    v17 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    ZinActivationLayer::ZinActivationLayer(v9, &v20, &v16, a1 + 64, v18);
    v13 = v17;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v6 = v20;
  v20 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v5;
}

void sub_206FDA594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x20BD002F8](v2, 0x10B3C407E37BC9ELL);
  v5 = *(_QWORD *)(v3 - 56);
  *(_QWORD *)(v3 - 56) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

void ZinIrCustomNeuronUnit::~ZinIrCustomNeuronUnit(void **this)
{
  *this = &off_24C0205D8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C0205D8;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinParseGlobalArgMinMaxUnit(CFDictionaryRef *a1, ZinIrGlobalArgMinMaxUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  int v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v29;
  const void *v30;
  CFTypeID v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinParseGlobalArgMinMaxUnit(v12, v13, v14, v15, v16, v17, v18, v19);
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
    return 3;
  }
  v8 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("Type"));
  if (!v8 || (v9 = v8, v10 = CFGetTypeID(v8), v10 != CFStringGetTypeID()))
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidGlobalArgType"));
    v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v20)
      ZinParseGlobalArgMinMaxUnit(v20, v21, v22, v23, v24, v25, v26, v27);
    return 3;
  }
  if (ZinCFStringEquals(v9, CFSTR("Min")))
  {
    v11 = 1;
  }
  else
  {
    if (!ZinCFStringEquals(v9, CFSTR("Max")))
    {
      ZinIrUnitStatus::SetError(a3, CFSTR("InvalidGlobalArgType"));
      v40 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v40)
        ZinParseGlobalArgMinMaxUnit(v40, v41, v42, v43, v44, v45, v46, v47);
      return 3;
    }
    v11 = 2;
  }
  *((_DWORD *)a2 + 20) = v11;
  v29 = CFDictionaryGetValue(v6, CFSTR("Dimension"));
  if (!v29 || (v30 = v29, v31 = CFGetTypeID(v29), v31 != CFStringGetTypeID()))
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidGlobalArgDimension"));
    v32 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v32)
      ZinParseGlobalArgMinMaxUnit(v32, v33, v34, v35, v36, v37, v38, v39);
    return 3;
  }
  if ((CFStringToZinIrDimension(v30, (char *)a2 + 84) & 1) == 0)
  {
    ZinIrUnitStatus::SetError(a3, CFSTR("InvalidGlobalArgDimension"));
    v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v48)
      ZinParseGlobalArgMinMaxUnit(v48, v49, v50, v51, v52, v53, v54, v55);
    return 3;
  }
  return 0;
}

void ZinParseGlobalArgMinMaxUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing global argmin/argmax type params\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing global argmin/argmax type\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing global argmin/argmax dimension\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unrecognized global argmin/max dimension\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unrecognized global argmin/max type\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

uint64_t ZinGetMaskBit(const unsigned __int8 *a1, unint64_t a2)
{
  return (a1[a2 >> 3] >> (a2 & 7)) & 1;
}

uint64_t ZinAneTd<11u>::HandleDramHazards(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  void *__p;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  _BYTE v27[40];

  v22 = a3;
  v6 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a4, &v22)[3];
  v7 = *(_QWORD *)(a3 + 264);
  LODWORD(v22) = *(_DWORD *)(v7 + 1000);
  v24 = 0;
  v25 = 0;
  v23 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v23, *(const void **)(v7 + 1008), *(_QWORD *)(v7 + 1016), (uint64_t)(*(_QWORD *)(v7 + 1016) - *(_QWORD *)(v7 + 1008)) >> 2);
  v26 = *(_DWORD *)(v7 + 1032);
  std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)v27, v7 + 1040);
  v8 = *(_QWORD *)(a3 + 264);
  LODWORD(v16) = *(_DWORD *)(v8 + 1080);
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, *(const void **)(v8 + 1088), *(_QWORD *)(v8 + 1096), (uint64_t)(*(_QWORD *)(v8 + 1096) - *(_QWORD *)(v8 + 1088)) >> 2);
  v20 = *(_DWORD *)(v8 + 1112);
  v9 = std::unordered_map<ZinDependencyOffsetDim,long>::unordered_map((uint64_t)&v21, v8 + 1120);
  if ((_DWORD)v16)
  {
    if ((_DWORD)v16 == (_DWORD)v22)
    {
      v10 = v26;
      if (v26 >= v20)
        v10 = v20;
      v26 = v10;
    }
    LODWORD(v22) = 2;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v9);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  v11 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(v6 + 200) + 160))(*(_QWORD *)(v6 + 200), v22, 0, v26, v27);
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(a3 + 264);
    v13 = *(unsigned int *)(v12 + 1160);
    v14 = *(unsigned int *)(v12 + 1192);
    v16 = 0;
    __p = 0;
    v18 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v16, *(const void **)(v12 + 1168), *(_QWORD *)(v12 + 1176), (uint64_t)(*(_QWORD *)(v12 + 1176) - *(_QWORD *)(v12 + 1168)) >> 2);
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, void **))(**(_QWORD **)(v6 + 200) + 168))(*(_QWORD *)(v6 + 200), *a2, v13, v14, &v16);
    if (v16)
    {
      __p = v16;
      operator delete(v16);
    }
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v27);
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  return v11;
}

void sub_206FDAB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  ZinDramDependentInfo::~ZinDramDependentInfo((ZinDramDependentInfo *)&a19);
  _Unwind_Resume(a1);
}

void sub_206FDAB5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x206FDAB54);
}

void DumpTask<11u>(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int **a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  ZinAneTdHw_v11 *v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  const std::string::value_type *p_p;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *i;
  unsigned int *v43;
  unsigned int *v44;
  _DWORD *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int *v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int AddressOfRelocationCommand;
  unsigned int RegisterValueFromAddress;
  unsigned int *v62;
  int v63;
  unsigned int v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  int *v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t **v80;
  int v81;
  uint64_t ***v82;
  uint64_t **v83;
  uint64_t **v84;
  uint64_t *v85;
  int v86;
  _DWORD *v87;
  _DWORD *v88;
  _OWORD *v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t *v92;
  int64_t v93;
  char *v94;
  uint64_t v95;
  const unsigned int *v96;
  unint64_t v97;
  uint64_t *v98;
  NSObject *v99;
  const unsigned int *v100;
  unsigned int v101;
  ZinAneRelocationCommand_v11 *v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t *v105;
  unsigned int v106;
  uint64_t *v108;
  uint64_t **v109;
  unsigned int *v110;
  char v111;
  _BYTE *v112;
  _BYTE *v113;
  size_t v114;
  uint64_t v115;
  std::string::size_type v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  void *v122;
  uint64_t v123;
  unint64_t v124;
  BOOL v125;
  _BOOL4 v126;
  unsigned int *v127;
  uint64_t v128;
  unsigned int *v129;
  _BYTE v130[16];
  unsigned int *v131;
  _QWORD v132[5];
  void *v133[2];
  std::string::size_type v134;
  void *v135[3];
  __int128 v136;
  int v137;
  void *v138[3];
  __int128 v139;
  int v140;
  void *v141[3];
  __int128 v142;
  int v143;
  void *__p;
  _DWORD *v145;
  _DWORD *v146;
  __int128 v147;
  int v148;
  std::string v149;
  __int128 v150;
  int v151;
  std::string v152;
  __int128 v153;
  int v154;
  std::string v155;
  __int128 v156;
  int v157;
  uint64_t **v158;
  uint64_t *v159;
  uint64_t v160;
  _QWORD v161[2];
  char v162;
  _OWORD v163[3];
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[10];

  v169[7] = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(a3 + 200);
  std::string::basic_string[abi:ne180100]<0>(&v152, "__nid0__tid");
  v16 = (ZinAneTdHw_v11 *)(v15 + 8);
  std::to_string(&v149, *(unsigned __int16 *)(v15 + 8));
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v149;
  else
    v17 = (std::string *)v149.__r_.__value_.__r.__words[0];
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  else
    size = v149.__r_.__value_.__l.__size_;
  v19 = std::string::append(&v152, (const std::string::value_type *)v17, size);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "__");
  if (SHIBYTE(v146) >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (SHIBYTE(v146) >= 0)
    v22 = HIBYTE(v146);
  else
    v22 = (std::string::size_type)v145;
  v23 = std::string::append(&v155, p_p, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&v163[1] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  v163[0] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(char *)(a3 + 183);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)(a3 + 160);
  else
    v26 = *(const std::string::value_type **)(a3 + 160);
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 183);
  else
    v27 = *(_QWORD *)(a3 + 168);
  v28 = std::string::append((std::string *)v163, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v134 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)v133 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v163[1]) < 0)
    operator delete(*(void **)&v163[0]);
  if (SHIBYTE(v146) < 0)
    operator delete(__p);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v155.__r_.__value_.__l.__data_);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  v30 = *(_DWORD *)(a3 + 184);
  v31 = (unsigned int *)(a9 + (v30 & 0xFFFFFFFC));
  *a7 = v31;
  v32 = **a2;
  if (*(_BYTE *)(v32 + 2057))
  {
    if ((ZinAlignPower2(((*(_DWORD *)v16 >> 14) & 0x1FFCu) + v30, *(_QWORD *)(v32 + 504)) & 0x3F) == 0)
      ZinAssertImpl("aligned_td_end_addr is divisible by 64");
    v31 = *a7;
  }
  v33 = *(_DWORD *)(v15 + 8);
  *a7 = v31 + 1;
  *v31 = v33;
  v34 = *(_DWORD *)(v15 + 12);
  *a7 = v31 + 2;
  v31[1] = v34;
  v35 = *(_DWORD *)(v15 + 16);
  *a7 = v31 + 3;
  v31[2] = v35;
  v36 = *(_DWORD *)(v15 + 20);
  *a7 = v31 + 4;
  v31[3] = v36;
  v37 = *(_DWORD *)(v15 + 24);
  *a7 = v31 + 5;
  v31[4] = v37;
  v38 = *(_DWORD *)(v15 + 28);
  *a7 = v31 + 6;
  v31[5] = v38;
  v39 = *(_DWORD *)(v15 + 32);
  *a7 = v31 + 7;
  v31[6] = v39;
  v40 = *(_DWORD *)(v15 + 36);
  *a7 = v31 + 8;
  v31[7] = v40;
  if ((*(_BYTE *)(v15 + 36) & 2) != 0)
  {
    v41 = *(_DWORD *)(v15 + 40);
    *a7 = v31 + 9;
    v31[8] = v41;
  }
  GetRegistersProgrammedAsRelocationCommands((uint64_t *)(v15 + 1008), (uint64_t)v132);
  ZinCodegen::GetDontCareRegisters<11u>((_DWORD *)v15, (uint64_t)v130);
  for (i = v131; i; i = *(unsigned int **)i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v132, i + 4, i + 4);
  v128 = a3;
  v43 = *a7;
  memset(v163, 0, 24);
  v127 = v43;
  v44 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 44, 0x46uLL, 6400, v43, 1, a6, a1, v132, 0, (__int32 **)v163)];
  *a7 = v44;
  if (*(_QWORD *)&v163[0])
  {
    *((_QWORD *)&v163[0] + 1) = *(_QWORD *)&v163[0];
    operator delete(*(void **)&v163[0]);
    v44 = *a7;
  }
  v45 = operator new(4uLL);
  *(_QWORD *)&v163[0] = v45;
  *v45 = 60;
  *(_QWORD *)&v163[1] = v45 + 1;
  *((_QWORD *)&v163[0] + 1) = v45 + 1;
  v46 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 492, 0x13uLL, 0, v44, 1, a6, a1, v132, 0, (__int32 **)v163)];
  *a7 = v46;
  if (*(_QWORD *)&v163[0])
  {
    *((_QWORD *)&v163[0] + 1) = *(_QWORD *)&v163[0];
    operator delete(*(void **)&v163[0]);
    v46 = *a7;
  }
  memset(v163, 0, 24);
  v47 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 576, 0x35uLL, 4352, v46, 1, a6, a1, v132, 0, (__int32 **)v163)];
  *a7 = v47;
  if (*(_QWORD *)&v163[0])
  {
    *((_QWORD *)&v163[0] + 1) = *(_QWORD *)&v163[0];
    operator delete(*(void **)&v163[0]);
    v47 = *a7;
  }
  memset(v163, 0, 24);
  v48 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 796, 0x19uLL, 1280, v47, 1, a6, a1, v132, 0, (__int32 **)v163)];
  *a7 = v48;
  if (*(_QWORD *)&v163[0])
  {
    *((_QWORD *)&v163[0] + 1) = *(_QWORD *)&v163[0];
    operator delete(*(void **)&v163[0]);
    v48 = *a7;
  }
  memset(v163, 0, 24);
  v49 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 904, 5uLL, 2304, v48, 1, a6, a1, v132, 0, (__int32 **)v163)];
  *a7 = v49;
  if (*(_QWORD *)&v163[0])
  {
    *((_QWORD *)&v163[0] + 1) = *(_QWORD *)&v163[0];
    operator delete(*(void **)&v163[0]);
    v49 = *a7;
  }
  memset(v163, 0, 24);
  v50 = &(*a7)[ZinRegisterPacking::ProcessRegisters(v15 + 932, 5uLL, 3328, v49, 1, a6, a1, v132, 0, (__int32 **)v163)];
  *a7 = v50;
  if (*(_QWORD *)&v163[0])
  {
    *((_QWORD *)&v163[0] + 1) = *(_QWORD *)&v163[0];
    operator delete(*(void **)&v163[0]);
    v50 = *a7;
  }
  v51 = *(_OWORD *)(v15 + 976);
  v163[0] = *(_OWORD *)(v15 + 960);
  v163[1] = v51;
  *(_OWORD *)((char *)&v163[1] + 12) = *(_OWORD *)(v15 + 988);
  memset(&v155, 0, sizeof(v155));
  *a7 += ZinRegisterPacking::ProcessRegisters((uint64_t)v163, 9uLL, 5376, v50, 1, a6, a1, v132, 0, (__int32 **)&v155);
  if (v155.__r_.__value_.__r.__words[0])
  {
    v155.__r_.__value_.__l.__size_ = v155.__r_.__value_.__r.__words[0];
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  v52 = *(_QWORD *)(v15 + 1056);
  *(_DWORD *)(v15 + 996) = 57005;
  if (v52 >= 8)
  {
    v53 = v52 >> 3;
    do
    {
      v54 = *a7;
      memset(v163, 0, 24);
      *a7 += ZinRegisterPacking::ProcessRegisters(v15 + 996, 1uLL, 5412, v54, 1, a6, a1, v132, 0, (__int32 **)v163);
      if (*(_QWORD *)&v163[0])
      {
        *((_QWORD *)&v163[0] + 1) = *(_QWORD *)&v163[0];
        operator delete(*(void **)&v163[0]);
      }
      --v53;
    }
    while (v53);
  }
  v55 = *(_QWORD *)(v15 + 1008);
  v56 = *(_QWORD *)(v15 + 1016);
  if (v55 != v56)
  {
    v57 = *a7;
    do
    {
      v58 = *(_DWORD *)(v55 + 32);
      *v57 = v58;
      *a7 = v57 + 1;
      if (*(_BYTE *)v55)
      {
        v59 = (uint64_t)v57 - a9 + 4;
        if (*(_BYTE *)(v55 + 1))
          AddBARRelocation(v55 + 8, a8, v59, (v58 & 0x8000) != 0, a2[7], 8 * ((_QWORD)v57 - a9) + 22, 7);
        else
          AddRelocation(v55 + 8, a8, v59, (v58 & 0x8000) != 0, a2[7]);
      }
      AddressOfRelocationCommand = GetAddressOfRelocationCommand((_DWORD *)(v55 + 32));
      RegisterValueFromAddress = ZinAneTdHw_v11::GetRegisterValueFromAddress(v16, AddressOfRelocationCommand);
      v62 = *a7;
      *v62 = RegisterValueFromAddress;
      v57 = v62 + 1;
      *a7 = v57;
      if ((v58 & 0x8000) != 0)
      {
        v63 = GetAddressOfRelocationCommand((_DWORD *)(v55 + 32));
        v64 = ZinAneTdHw_v11::GetRegisterValueFromAddress(v16, v63 + 4);
        v65 = *a7;
        *v65 = v64;
        v57 = v65 + 1;
        *a7 = v57;
      }
      v55 += 40;
    }
    while (v55 != v56);
  }
  v66 = *(unsigned int *)(v128 + 184);
  v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v128 + 200) + 16))(*(_QWORD *)(v128 + 200));
  AddSymbol((uint64_t)v133, a8, v66, 4 * v67, a2[7]);
  v68 = *a7;
  v157 = 1;
  v69 = operator new(4uLL);
  *v69 = 1;
  v155.__r_.__value_.__l.__size_ = (std::string::size_type)(v69 + 1);
  v155.__r_.__value_.__r.__words[2] = (std::string::size_type)(v69 + 1);
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  v156 = xmmword_207AB1D30;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)v163, &v157, (uint64_t)&v155);
  v154 = 0;
  v70 = operator new(0x14uLL);
  v152.__r_.__value_.__l.__size_ = (std::string::size_type)(v70 + 5);
  v152.__r_.__value_.__r.__words[2] = (std::string::size_type)(v70 + 5);
  v70[4] = 5;
  *(_OWORD *)v70 = xmmword_207AB1E50;
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  v153 = xmmword_207AB1D40;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v164, &v154, (uint64_t)&v152);
  v151 = 2;
  v71 = operator new(4uLL);
  *v71 = 2;
  v149.__r_.__value_.__l.__size_ = (std::string::size_type)(v71 + 1);
  v149.__r_.__value_.__r.__words[2] = (std::string::size_type)(v71 + 1);
  v149.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  v150 = xmmword_207AB1D50;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v165, &v151, (uint64_t)&v149);
  v148 = 3;
  v72 = operator new(4uLL);
  *v72 = 3;
  v145 = v72 + 1;
  v146 = v72 + 1;
  __p = v72;
  v147 = xmmword_207AB1D60;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v166, &v148, (uint64_t)&__p);
  v143 = 4;
  v73 = operator new(4uLL);
  *v73 = 4;
  v141[1] = v73 + 1;
  v141[2] = v73 + 1;
  v141[0] = v73;
  v142 = xmmword_207AB1D70;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v167, &v143, (uint64_t)v141);
  v140 = 5;
  v74 = operator new(4uLL);
  *v74 = 5;
  v138[1] = v74 + 1;
  v138[2] = v74 + 1;
  v138[0] = v74;
  v139 = xmmword_207AB1D80;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)&v168, &v140, (uint64_t)v138);
  v137 = 6;
  v75 = operator new(4uLL);
  v129 = v68;
  *v75 = 2;
  v135[1] = v75 + 1;
  v135[2] = v75 + 1;
  v135[0] = v75;
  v136 = xmmword_207AB1D90;
  std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>((uint64_t)v169, &v137, (uint64_t)v135);
  v76 = 0;
  v159 = 0;
  v160 = 0;
  v158 = &v159;
  do
  {
    v77 = (int *)&v163[3 * v76];
    v78 = &v159;
    if (v158 == &v159)
      goto LABEL_71;
    v79 = v159;
    v80 = &v159;
    if (v159)
    {
      do
      {
        v78 = (uint64_t **)v79;
        v79 = (uint64_t *)v79[1];
      }
      while (v79);
    }
    else
    {
      do
      {
        v78 = (uint64_t **)v80[2];
        v125 = *v78 == (uint64_t *)v80;
        v80 = v78;
      }
      while (v125);
    }
    v81 = *v77;
    if (*((_DWORD *)v78 + 8) < *v77)
    {
LABEL_71:
      v82 = &v158;
      if (v159)
      {
        v82 = (uint64_t ***)v78;
        v83 = v78 + 1;
      }
      else
      {
        v83 = &v159;
      }
      if (v82[1])
        goto LABEL_93;
      if (v159)
        v84 = v78;
      else
        v84 = &v159;
      v81 = *v77;
    }
    else if (v159)
    {
      v85 = v159;
      do
      {
        while (1)
        {
          v84 = (uint64_t **)v85;
          v86 = *((_DWORD *)v85 + 8);
          if (v81 >= v86)
            break;
          v85 = *v84;
          if (!*v84)
          {
            v83 = v84;
            goto LABEL_88;
          }
        }
        if (v86 >= v81)
          goto LABEL_93;
        v85 = v84[1];
      }
      while (v85);
      v83 = v84 + 1;
    }
    else
    {
      v83 = &v159;
      v84 = &v159;
    }
LABEL_88:
    v87 = operator new(0x50uLL);
    v88 = v87;
    v161[0] = v87;
    v161[1] = &v159;
    v162 = 0;
    v87[8] = v81;
    *((_QWORD *)v87 + 5) = 0;
    v89 = &v163[3 * v76];
    *((_QWORD *)v87 + 6) = 0;
    *((_QWORD *)v87 + 7) = 0;
    v91 = (_BYTE *)*((_QWORD *)v89 + 1);
    v90 = (_BYTE *)*((_QWORD *)v89 + 2);
    v92 = (uint64_t *)v87;
    v93 = v90 - v91;
    if (v90 != v91)
    {
      std::vector<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::allocator<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>>::__vallocate[abi:ne180100]((_QWORD *)v87 + 5, v93 >> 2);
      v94 = (char *)*((_QWORD *)v88 + 6);
      memmove(v94, v91, v93);
      *((_QWORD *)v88 + 6) = &v94[4 * (v93 >> 2)];
      v92 = (uint64_t *)v161[0];
    }
    *((_OWORD *)v88 + 4) = v163[3 * v76 + 2];
    v162 = 1;
    *v92 = 0;
    v92[1] = 0;
    v92[2] = (uint64_t)v84;
    *v83 = v92;
    if (*v158)
    {
      v158 = (uint64_t **)*v158;
      v92 = *v83;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v159, v92);
    ++v160;
    v161[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v161);
LABEL_93:
    ++v76;
  }
  while (v76 != 7);
  v95 = 42;
  v96 = v127;
  v97 = (unint64_t)v129;
  do
  {
    v98 = (&v159)[v95];
    if (v98)
    {
      v161[v95 - 1] = v98;
      operator delete(v98);
    }
    v95 -= 6;
  }
  while (v95 * 8);
  if (v135[0])
    operator delete(v135[0]);
  if (v138[0])
    operator delete(v138[0]);
  if (v141[0])
    operator delete(v141[0]);
  if (__p)
    operator delete(__p);
  if (v149.__r_.__value_.__r.__words[0])
    operator delete(v149.__r_.__value_.__l.__data_);
  if (v152.__r_.__value_.__r.__words[0])
    operator delete(v152.__r_.__value_.__l.__data_);
  if (v155.__r_.__value_.__r.__words[0])
    operator delete(v155.__r_.__value_.__l.__data_);
  v155.__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long>::vector(v163, 7uLL, &v155);
  v99 = MEMORY[0x24BDACB70];
  while (1)
  {
    v100 = v96;
    if ((unint64_t)v96 >= v97)
      break;
    v101 = *v96 >> 29;
    if (v101)
    {
      if (v101 == 1)
      {
        v102 = (ZinAneRelocationCommand_v11 *)operator new();
        ZinAneRelocationCommand_v11::ZinAneRelocationCommand_v11(v102, v96);
      }
      else
      {
        v102 = (ZinAneRelocationCommand_v11 *)operator new();
        ZinAneMaskCommand_v11::ZinAneMaskCommand_v11(v102, v96);
      }
    }
    else
    {
      v102 = (ZinAneRelocationCommand_v11 *)operator new();
      ZinAneSequentialCommand_v11::ZinAneSequentialCommand_v11(v102, v96);
    }
    v103 = (*(uint64_t (**)(ZinAneRelocationCommand_v11 *))(*(_QWORD *)v102 + 64))(v102);
    v104 = (*(uint64_t (**)(ZinAneRelocationCommand_v11 *))(*(_QWORD *)v102 + 16))(v102);
    memset(&v155, 0, sizeof(v155));
    v105 = (uint64_t *)v158;
    if (v158 == &v159)
    {
LABEL_131:
      v110 = 0;
    }
    else
    {
      v106 = v104;
      while (v105[8] > (unint64_t)v103 || v105[9] <= (unint64_t)v103)
      {
        v108 = (uint64_t *)v105[1];
        if (v108)
        {
          do
          {
            v109 = (uint64_t **)v108;
            v108 = (uint64_t *)*v108;
          }
          while (v108);
        }
        else
        {
          do
          {
            v109 = (uint64_t **)v105[2];
            v125 = *v109 == v105;
            v105 = (uint64_t *)v109;
          }
          while (!v125);
        }
        v105 = (uint64_t *)v109;
        if (v109 == &v159)
          goto LABEL_131;
      }
      v113 = (_BYTE *)v105[5];
      v112 = (_BYTE *)v105[6];
      v114 = v112 - v113;
      v115 = (v112 - v113) >> 2;
      if (v112 == v113)
      {
        v110 = 0;
        v116 = 0;
      }
      else
      {
        if ((v114 & 0x8000000000000000) != 0)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        std::vector<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::allocator<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>>::__vallocate[abi:ne180100](&v155, (v112 - v113) >> 2);
        v116 = v155.__r_.__value_.__l.__size_;
        memmove((void *)v155.__r_.__value_.__l.__size_, v113, v114);
        v110 = (unsigned int *)v155.__r_.__value_.__r.__words[0];
      }
      v117 = (unsigned int *)(v116 + 4 * v115);
      v97 = (unint64_t)v129;
      if (v110 != v117)
      {
        v118 = v106;
        v119 = *(_QWORD *)&v163[0];
        v120 = v110;
        do
        {
          v121 = *v120++;
          *(_QWORD *)(v119 + 8 * v121) += v106;
        }
        while (v120 != v117);
        v111 = 0;
        v96 = &v100[v118];
        if (!v110)
          goto LABEL_136;
        goto LABEL_135;
      }
    }
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
      DumpTask<11u>((uint8_t *)&v152, &v152.__r_.__value_.__s.__data_[1]);
    v111 = 1;
    v96 = v100;
    if (!v110)
      goto LABEL_136;
LABEL_135:
    v155.__r_.__value_.__l.__size_ = (std::string::size_type)v110;
    operator delete(v110);
LABEL_136:
    (*(void (**)(ZinAneRelocationCommand_v11 *))(*(_QWORD *)v102 + 8))(v102);
    if ((v111 & 1) != 0)
    {
      v126 = 0;
      v122 = *(void **)&v163[0];
      if (!*(_QWORD *)&v163[0])
        goto LABEL_158;
      goto LABEL_157;
    }
  }
  v122 = *(void **)&v163[0];
  if (*(_QWORD *)&v163[0] != *((_QWORD *)&v163[0] + 1))
  {
    v123 = *(_QWORD *)&v163[0] + 8;
    do
    {
      v124 = *(_QWORD *)(v123 - 8);
      v125 = v124 > 0x100 || v123 == *((_QWORD *)&v163[0] + 1);
      v123 += 8;
    }
    while (!v125);
    v126 = v124 > 0x100;
    if (!*(_QWORD *)&v163[0])
      goto LABEL_158;
LABEL_157:
    *((_QWORD *)&v163[0] + 1) = v122;
    operator delete(v122);
    goto LABEL_158;
  }
  v126 = 0;
  if (*(_QWORD *)&v163[0])
    goto LABEL_157;
LABEL_158:
  std::__tree<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::__map_value_compare<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::less<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>,true>,std::allocator<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>>>::destroy(v159);
  if ((unint64_t)v100 < v97 || v126)
    ZinAssertImpl("TD Programming can lead to internal buffer overflow\n");
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v130);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v132);
  if (SHIBYTE(v134) < 0)
    operator delete(v133[0]);
}

void sub_206FDB978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a20);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTds<11u>(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4, CFArrayRef *a5)
{
  __int128 *AddressDefaultValueMapping;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v21;
  void *v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *j;
  ZinAneInstruction *v40;
  uint64_t v41;
  uint64_t *i;
  ZinAneInstruction *v43;
  _QWORD v44[3];
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;

  v46 = (uint64_t)&v46;
  v47 = &v46;
  v48 = 0;
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 8));
  v11 = ZinIrCodegenHandleTdsMakeList<11u>((uint64_t **)a1, a2, a3, &v46, (uint64_t)a4, a5);
  if ((_DWORD)v11)
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinIrCodegenHandleTds<4u>(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    v21 = *a4;
    if ((_DWORD)v21)
    {
      v22 = malloc_type_calloc(v21, 4uLL, 0x100004052888210uLL);
      if (v22)
      {
        v11 = ZinIrCodegenValidateTds<11u>(*(uint64_t **)a1, *(_QWORD *)(a1 + 24), (uint64_t)&v46);
        if ((_DWORD)v11)
        {
          v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v23)
            ZinIrCodegenHandleTds<4u>(v23, v24, v25, v26, v27, v28, v29, v30);
          free(v22);
        }
        else
        {
          v45 = (uint64_t *)v22;
          ZinIrMemoryPool::GetSections(*(_QWORD *)(a1 + 24), 1, v44);
          v41 = *(_QWORD *)(v44[1] + 16);
          std::__list_imp<ZinIrSection *>::clear(v44);
          DumpSegment<11u>(AddressDefaultValueMapping, (uint64_t **)a1, (uint64_t)a4, (uint64_t)&v46, (uint64_t)a5, &v45, v41, (uint64_t)v22);
          for (i = v47; i != &v46; i = (uint64_t *)i[1])
          {
            v43 = (ZinAneInstruction *)i[2];
            if (v43)
            {
              ZinAneInstruction::~ZinAneInstruction(v43);
              MEMORY[0x20BD002F8]();
            }
          }
          v11 = 0;
          *(_QWORD *)(v41 + 24) = v22;
        }
      }
      else
      {
        v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v31)
          ZinIrCodegenHandleTds<4u>(v31, v32, v33, v34, v35, v36, v37, v38);
        for (j = v47; j != &v46; j = (uint64_t *)j[1])
        {
          v40 = (ZinAneInstruction *)j[2];
          if (v40)
          {
            ZinAneInstruction::~ZinAneInstruction(v40);
            MEMORY[0x20BD002F8]();
          }
        }
        ZinIrNetworkStatus::SetError(a5, CFSTR("MemoryAllocationFailure"));
        v11 = 3;
      }
    }
    else
    {
      v11 = 0;
    }
  }
  std::__list_imp<ZinIrSection *>::clear(&v46);
  return v11;
}

void sub_206FDBEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__list_imp<ZinIrSection *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenHandleTdsMakeList<11u>(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, CFArrayRef *a6)
{
  uint64_t *v8;
  ZinIrOpLayer **v9;
  ZinIrOpLayer **v10;
  ZinIrOpLayer **v11;
  ZinIrOpLayer **v12;
  ZinIrOpLayer **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer **v19;
  ZinIrOpLayer *v20;
  ZinAneInstruction *v21;
  int v22;
  _QWORD *v23;
  unsigned int v24;
  int v25;
  _QWORD *v26;
  char v27;
  ZinAneInstruction *v28;
  const std::string *v29;
  ZinIrOpLayer *v30;
  BOOL v31;
  ZinAneInstruction *v32;
  ZinIrOpLayer **v33;
  ZinIrOpLayer **v34;
  _WORD *v35;
  _BOOL4 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  ZinIrOpLayer *v43;
  _QWORD *v44;
  ZinAneInstruction *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  ZinAneInstruction *v65;
  const __CFString *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  BOOL v77;
  _QWORD *j;
  _BYTE *v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  float *v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int8x8_t v89;
  unsigned int v90;
  int8x8_t v91;
  uint64_t v92;
  uint8x8_t v93;
  unsigned int v94;
  float v95;
  int v96;
  float v97;
  _QWORD *v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t *v109;
  ZinIrOpLayer *v113;
  uint64_t v115;
  ZinIrCompilerParameters *v116;
  ZinIrOpLayer *v117;
  _BYTE v118[16];
  uint64_t v119;
  ZinIrTensor *v120;
  std::__shared_weak_count *v121;
  _QWORD *v122;
  ZinAneInstruction *v123;
  ZinIrOpLayer *v124;
  void *__p;
  ZinIrOpLayer **v126;
  uint64_t v127;
  _OWORD v128[2];
  int v129;
  _OWORD buf[2];
  int v131;
  _BYTE v132[22];
  __int16 v133;
  double v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v8 = a1[4];
  if (a4[2])
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Warning: tds list is already populated\n", (uint8_t *)buf, 2u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Clearing list contents without explicit deallocation\n", (uint8_t *)buf, 2u);
    }
  }
  std::__list_imp<ZinIrSection *>::clear(a4);
  v9 = (ZinIrOpLayer **)*v8;
  v10 = (ZinIrOpLayer **)v8[1];
  if ((ZinIrOpLayer **)*v8 == v10)
  {
    v12 = (ZinIrOpLayer **)*v8;
    v11 = (ZinIrOpLayer **)*v8;
  }
  else
  {
    while (!ZinIrOpLayer::IsANELayer(*v9))
    {
      if (++v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
    v11 = v9;
    v9 = (ZinIrOpLayer **)*v8;
    v12 = (ZinIrOpLayer **)v8[1];
  }
  v113 = *v11;
  do
  {
    v13 = v12;
    if (v12 == v9)
      break;
    --v12;
  }
  while (!ZinIrOpLayer::IsANELayer(*(v13 - 1)));
  v115 = **a1;
  v116 = (ZinIrCompilerParameters *)(*a1)[1];
  v117 = *(v13 - 1);
  memset(buf, 0, sizeof(buf));
  v131 = 1065353216;
  memset(v128, 0, sizeof(v128));
  v129 = 1065353216;
  v14 = a1[5];
  v108 = (uint64_t)v8;
  v109 = a1[6];
  v16 = *v8;
  v15 = v8[1];
  v17 = (v15 - *v8) >> 3;
  __p = 0;
  v126 = 0;
  v127 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>,std::reverse_iterator<std::__wrap_iter<ZinIrOpLayer * const*>>>((char *)&__p, v15, v15, v16, v16, v17);
  v18 = (ZinIrOpLayer **)__p;
  v19 = v126;
  if (__p != v126)
  {
    v20 = 0;
    do
    {
      v124 = 0;
      v124 = *v18;
      if (!ZinIrOpLayer::IsANELayer(v124))
        goto LABEL_49;
      v123 = 0;
      v21 = (ZinAneInstruction *)operator new();
      v22 = *((unsigned __int8 *)v116 + 366);
      v23 = (_QWORD *)operator new();
      v24 = *(_DWORD *)(v115 + 8);
      v25 = *((_DWORD *)a1 + 2);
      *v23 = &unk_24C0273F0;
      ZinAneTdHw_v11::ZinAneTdHw_v11((ZinAneTdHw_v11 *)(v23 + 1), v24, v22 == 0, v25);
      v23[130] = &target_hw_limits_v11;
      v23[132] = 0;
      v122 = v23;
      ZinAneInstruction::ZinAneInstruction(v21, &v122);
      v26 = v122;
      v122 = 0;
      if (v26)
        (*(void (**)(_QWORD *))(*v26 + 8))(v26);
      v123 = v21;
      v27 = (*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)v124 + 120))(v124);
      v28 = v123;
      v29 = (const std::string *)v124;
      *((_BYTE *)v123 + 24) = v27;
      std::string::operator=((std::string *)((char *)v28 + 160), v29 + 1);
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,ZinAneInstruction *&>((uint64_t)buf, &v124, &v124, (uint64_t *)&v123);
      *(_QWORD *)v132 = v124;
      std::__hash_table<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::__unordered_map_hasher<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::hash<ZinIrOpLayer *>,std::equal_to<ZinIrOpLayer *>,true>,std::__unordered_map_equal<ZinIrOpLayer *,std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>,std::equal_to<ZinIrOpLayer *>,std::hash<ZinIrOpLayer *>,true>,std::allocator<std::__hash_value_type<ZinIrOpLayer *,ZinAneInstruction *>>>::__emplace_unique_key_args<ZinIrOpLayer *,ZinIrOpLayer *&,ZinAneInstruction *&>((uint64_t)v128, &v123, &v123, (uint64_t *)v132);
      v30 = v124;
      v31 = v124 == v117;
      v32 = v123;
      *((_BYTE *)v123 + 199) = v124 == v113;
      *((_BYTE *)v32 + 198) = v31;
      v34 = (ZinIrOpLayer **)*v14;
      v33 = (ZinIrOpLayer **)v14[1];
      if ((ZinIrOpLayer **)*v14 != v33)
      {
        while (*v34 != v30)
        {
          if (++v34 == v33)
          {
            v34 = (ZinIrOpLayer **)v14[1];
            break;
          }
        }
      }
      if (v34 != v33)
      {
        *((_BYTE *)v32 + 198) = 1;
        if (a4[2])
          *(_BYTE *)(*(_QWORD *)(a4[1] + 16) + 199) = 1;
      }
      if (*(_DWORD *)(*((_QWORD *)v30 + 8) + 8) == 82)
      {
        *((_BYTE *)v32 + 188) = 1;
        *((_DWORD *)v32 + 48) = *((_DWORD *)v30 + 98);
      }
      v35 = (_WORD *)*((_QWORD *)v32 + 25);
      v35[4] = *((_QWORD *)v30 + 45);
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v30 + 120))(v30))
      {
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v124 + 128))(v132);
        if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(*(ZinIrTensor **)v132) + 12) + 64) + 8) == 28)
        {
          v36 = 0;
        }
        else
        {
          (*(void (**)(ZinIrTensor **__return_ptr))(*(_QWORD *)v124 + 128))(&v120);
          v36 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)ZinIrTensor::GetRootTensor(v120) + 12) + 64) + 8) != 29;
          v37 = v121;
          if (v121)
          {
            p_shared_owners = (unint64_t *)&v121->__shared_owners_;
            do
              v39 = __ldaxr(p_shared_owners);
            while (__stlxr(v39 - 1, p_shared_owners));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
        }
        v40 = *(std::__shared_weak_count **)&v132[8];
        if (*(_QWORD *)&v132[8])
        {
          v41 = (unint64_t *)(*(_QWORD *)&v132[8] + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
            if (!v36)
              goto LABEL_43;
LABEL_42:
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v123 + 25) + 32))(*((_QWORD *)v123 + 25), 5, 1);
            goto LABEL_43;
          }
        }
        if (v36)
          goto LABEL_42;
      }
LABEL_43:
      v43 = v124;
      if (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *, uint64_t, ZinAneInstruction *, uint64_t, uint64_t **, CFArrayRef *))(**((_QWORD **)v123 + 25) + 320))(*((_QWORD *)v123 + 25), v124, a2, v123, a3, a1, a6) & 1) == 0)
      {
        for (i = a4[1]; (_QWORD *)i != a4; i = *(_QWORD *)(i + 8))
        {
          v65 = *(ZinAneInstruction **)(i + 16);
          if (v65)
          {
            ZinAneInstruction::~ZinAneInstruction(v65);
            MEMORY[0x20BD002F8]();
          }
        }
        if (v123)
        {
          ZinAneInstruction::~ZinAneInstruction(v123);
          MEMORY[0x20BD002F8]();
        }
        std::__list_imp<ZinIrSection *>::clear(a4);
        goto LABEL_114;
      }
      if (((*(uint64_t (**)(_QWORD, ZinIrOpLayer *, _OWORD *, uint64_t *))(**((_QWORD **)v123 + 25) + 360))(*((_QWORD *)v123 + 25), v43, buf, a1[3]) & 1) == 0)
      {
        v66 = CFSTR("CodeGenerationFailure");
LABEL_71:
        ZinIrNetworkStatus::SetError(a6, v66);
        goto LABEL_114;
      }
      (*(void (**)(_WORD *, ZinIrOpLayer *))(*(_QWORD *)v35 + 40))(v35, v124);
      if (v30 != v117
        && !*((_BYTE *)v123 + 188)
        && !(*(unsigned int (**)(_QWORD, uint64_t *, ZinIrOpLayer *, ZinIrOpLayer *, uint64_t *, _OWORD *, _QWORD, _QWORD))(**((_QWORD **)v123 + 25) + 384))(*((_QWORD *)v123 + 25), *a1, v43, v20, v109, buf, *((_QWORD *)v116 + 17), *((_QWORD *)v116 + 18)))
      {
        v66 = CFSTR("MemoryDependencyFailure");
        goto LABEL_71;
      }
      v44 = operator new(0x18uLL);
      v45 = v123;
      v46 = (_QWORD *)a4[1];
      *v44 = a4;
      v44[1] = v46;
      v44[2] = v45;
      *v46 = v44;
      v47 = a4[2] + 1;
      a4[1] = v44;
      a4[2] = v47;
      v20 = v43;
LABEL_49:
      ++v18;
    }
    while (v18 != v19);
  }
  ReassignTaskIDs<17u>((uint64_t)a4);
  if (!ZinIrCompilerParameters::getEnableKernelRewind(v116) && !*(_BYTE *)(v115 + 2088)
    || (v48 = ZinCodegenEnableInterKernelReuse(11, a1, (uint64_t)a4), !(_DWORD)v48))
  {
    v49 = *(_QWORD *)(*(_QWORD *)(a4[1] + 16) + 200);
    v50 = *(_DWORD *)(v49 + 844);
    *(_DWORD *)(v49 + 800) |= 0x500030u;
    *(_DWORD *)(v49 + 844) = v50 | 0x500030;
    if ((_QWORD *)a4[1] != a4)
    {
      v51 = 0;
      v52 = a4;
      do
      {
        v53 = *(_QWORD *)(*(_QWORD *)(*v52 + 16) + 200);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 368))(v53, v51);
        v54 = *(_QWORD *)(*(_QWORD *)(*v52 + 16) + 200);
        v51 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54) - 1;
        v52 = (_QWORD *)*v52;
      }
      while (v52 != (_QWORD *)a4[1]);
    }
    v55 = ZinAlignPower2(2, *(_QWORD *)(v115 + 504));
    if (SetInstructionMemOffset<11u>((uint64_t)a4, v115, (*a1)[1], v55))
    {
      v56 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v56)
        ZinIrCodegenHandleTdsMakeList<4u>(v56, v57, v58, v59, v60, v61, v62, v63);
      goto LABEL_114;
    }
    LegalizeNetworks<11u>(a1, a4, (_DWORD *)a5, (uint64_t)a6, v128);
    v67 = *a1;
    std::unordered_map<ZinIrOpLayer *,ZinAneInstruction *>::unordered_map((uint64_t)v118, (uint64_t)buf);
    v68 = v67[1];
    v132[5] = *(_BYTE *)(v68 + 472);
    *(_WORD *)&v132[3] = *(_WORD *)(v68 + 100);
    v69 = *(unsigned __int8 *)(v68 + 95);
    v70 = (char)v69;
    if ((v69 & 0x80u) != 0)
      v69 = *(_QWORD *)(v68 + 80);
    if (v69 == 9)
    {
      v73 = *(_QWORD *)(v68 + 72);
      v71 = v68 + 72;
      v72 = v73;
      if (v70 < 0)
        v71 = v72;
      v74 = *(_QWORD *)v71;
      v75 = *(unsigned __int8 *)(v71 + 8);
      v77 = v74 == 0x30336E2E67343168 && v75 == 49;
    }
    else
    {
      v77 = 0;
    }
    v132[6] = v77;
    for (j = (_QWORD *)a4[1]; j != a4; j = (_QWORD *)j[1])
    {
      v79 = (_BYTE *)j[2];
      v80 = &v119;
      while (1)
      {
        v80 = (uint64_t *)*v80;
        if (!v80)
          break;
        if ((_BYTE *)v80[3] == v79)
        {
          v81 = v80[2];
          goto LABEL_90;
        }
      }
      v81 = 0;
LABEL_90:
      v132[0] = v79[199];
      v132[2] = v79[196];
      v132[1] = v79[198];
      ZinAneInstruction::HandleEventLogs((uint64_t)v79, v67, v81, (uint64_t)v132);
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v118);
    v82 = (_QWORD *)a4[1];
    if (v82 == a4)
    {
LABEL_108:
      v48 = ZinIrContextSwitchValidator<11u>(a4);
      if ((_DWORD)v48)
      {
        v99 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v99)
          ZinIrCodegenHandleTdsMakeList<4u>(v99, v100, v101, v102, v103, v104, v105, v106);
      }
      else
      {
        v48 = SetTensorKernelDependency<4u>(v108, buf, a6);
        if (!(_DWORD)v48)
        {
          if ((*((_BYTE *)v116 + 97) & 0x20) != 0)
            ZinIrCodegen::PrintContextSwitchInfo((uint64_t)a4);
          v48 = 0;
        }
      }
    }
    else
    {
      v84 = **a1;
      v83 = (float *)(*a1)[1];
      v85 = MEMORY[0x24BDACB70];
      while (1)
      {
        v86 = v82[2];
        v87 = *(_QWORD *)(v86 + 200);
        v88 = 4 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
        if (*(_QWORD *)(v84 + 296) > v88 || *(_QWORD *)(v84 + 304) < v88)
          break;
        v89.i32[0] = *(_DWORD *)(v87 + 24) & 0xFFFFFF;
        v91 = vcnt_s8(v89);
        v91.i16[0] = vaddlv_u8((uint8x8_t)v91);
        v92 = *(_QWORD *)(a5 + 16);
        *(_QWORD *)(a5 + 8) += v91.u32[0];
        v91.i32[0] = *(_DWORD *)(v87 + 16) & 0xFFFFFF;
        v93 = (uint8x8_t)vcnt_s8(v91);
        v93.i16[0] = vaddlv_u8(v93);
        *(_QWORD *)(a5 + 16) = v92 + v93.u32[0];
        v94 = *(unsigned __int16 *)(v87 + 12);
        if (*(_DWORD *)(a5 + 32) > v94)
          v94 = *(_DWORD *)(a5 + 32);
        *(_DWORD *)(a5 + 32) = v94;
        v95 = v83[97];
        if (v95 > 0.0)
        {
          LOWORD(v90) = *(_WORD *)(v87 + 12);
          if (v95 < (float)v90)
            ++*(_DWORD *)(a5 + 36);
        }
        LODWORD(v120) = 0;
        if (ZinIrCompilerParameters::getEnforcedTdLatency((ZinIrCompilerParameters *)v83, (float *)&v120))
        {
          v96 = *(unsigned __int16 *)(v87 + 12);
          v97 = *(float *)&v120;
          if (*(float *)&v120 < (float)v96 && os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
          {
            v98 = (_QWORD *)(v86 + 160);
            if (*(char *)(v86 + 183) < 0)
              v98 = (_QWORD *)*v98;
            *(_DWORD *)v132 = 136315650;
            *(_QWORD *)&v132[4] = v98;
            *(_WORD *)&v132[12] = 2048;
            *(double *)&v132[14] = v97;
            v133 = 2048;
            v134 = (double)v96;
            _os_log_error_impl(&dword_2069AB000, v85, OS_LOG_TYPE_ERROR, "Latency for Task %s is too large (>%.0f us) (%.0f)", v132, 0x20u);
          }
        }
        ++*(_QWORD *)(a5 + 8);
        v82 = (_QWORD *)v82[1];
        if (v82 == a4)
          goto LABEL_108;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinIrCodegenHandleTdsMakeList<6u>();
      ZinIrNetworkStatus::SetError(a6, CFSTR("InvalidTotalTDSize"));
LABEL_114:
      v48 = 3;
    }
  }
  if (__p)
  {
    v126 = (ZinIrOpLayer **)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v128);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)buf);
  return v48;
}

void sub_206FDC9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (__p)
    operator delete(__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table(v35 - 208);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCodegenValidateTds<11u>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *a1;
  v5 = *(_QWORD *)(a3 + 8);
  if (v5 == a3)
  {
LABEL_10:
    v14 = ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v4, a3);
    if ((_DWORD)v14)
    {
      v15 = v14;
      v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v16)
        ZinIrCodegenValidateTds<11u>(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      v15 = ZinValidateTd<11u>::ValidateL2CircularBuffer(a3);
      if ((_DWORD)v15)
      {
        v32 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v32)
          ZinIrCodegenValidateTds<11u>(v32, v33, v34, v35, v36, v37, v38, v39);
      }
    }
  }
  else
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = *(_QWORD *)(v9 + 200);
      v12 = *(unsigned __int16 *)(v10 + 8);
      v11 = v10 + 8;
      if (v12 != v8)
        break;
      if (!*(_BYTE *)(v9 + 188))
      {
        v13 = ZinValidateTd<11u>::Test(a1, a2, v11);
        if ((_DWORD)v13)
        {
          v15 = v13;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            ZinIrCodegenValidateTds<6u>();
          return v15;
        }
      }
      if (*(_BYTE *)(v9 + 198))
        v8 = 0;
      else
        ++v8;
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == a3)
        goto LABEL_10;
    }
    v24 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v24)
      ZinIrCodegenValidateTds<1u>(v24, v25, v26, v27, v28, v29, v30, v31);
    return 3;
  }
  return v15;
}

void DumpSegment<11u>(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v8;
  uint64_t v9;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  char v28;

  v8 = *(_BYTE *)((*a2)[1] + 366) == 0;
  v9 = *a2[8];
  if (a2[8][1] != v9)
  {
    v15 = 0;
    v26 = a4;
    do
    {
      v16 = (unsigned int *)(v9 + 80 * v15);
      v17 = *(_QWORD *)(a4 + 8);
      v18 = v16[11];
      if ((_DWORD)v18)
      {
        v19 = v18 + 1;
        do
        {
          v17 = *(_QWORD *)(v17 + 8);
          --v19;
        }
        while (v19 > 1);
      }
      v20 = *v16;
      v21 = v17;
      if ((_DWORD)v20)
      {
        v22 = v20 + 1;
        v21 = v17;
        do
        {
          v21 = *(_QWORD *)(v21 + 8);
          --v22;
        }
        while (v22 > 1);
      }
      *a6 = (uint64_t *)(a8 + (*(_DWORD *)(v9 + 80 * v15 + 36) & 0xFFFFFFFC));
      v23 = DumpSegmentHeader<17u,ZinAneSegmentHeader_V2>(v15, (uint64_t)v16, a4, a6);
      std::operator+<char>();
      AddSymbol((uint64_t)&__p, a7, 0, 4 * v23, a2[7]);
      if (v28 < 0)
        operator delete(__p);
      while (v17 != v21)
      {
        DumpTask<11u>(a1, a2, *(_QWORD *)(v17 + 16), v24, v25, v8, (unsigned int **)a6, a7, a8);
        v17 = *(_QWORD *)(v17 + 8);
      }
      ++v15;
      v9 = *a2[8];
      a4 = v26;
    }
    while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[8][1] - v9) >> 4));
  }
}

void sub_206FDCD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<11u>::GetSizeInWords(uint64_t a1)
{
  int v2;
  __int128 *AddressDefaultValueMapping;
  int v4;
  unsigned int *i;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void *v19;
  _DWORD *v20;
  _BYTE v21[16];
  unsigned int *v22;
  _QWORD v23[5];

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 5) == 1)
    v2 = 9;
  else
    v2 = 8;
  AddressDefaultValueMapping = GetAddressDefaultValueMapping(*(_DWORD *)(a1 + 1036));
  v4 = *(unsigned __int8 *)(a1 + 1032);
  GetRegistersProgrammedAsRelocationCommands((uint64_t *)(a1 + 1008), (uint64_t)v23);
  ZinCodegen::GetDontCareRegisters<11u>((_DWORD *)a1, (uint64_t)v21);
  for (i = v22; i; i = *(unsigned int **)i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v23, i + 4, i + 4);
  __p = 0;
  v19 = 0;
  v20 = 0;
  v6 = ZinRegisterPacking::ProcessRegisters(a1 + 44, 0x46uLL, 6400, 0, 0, v4, AddressDefaultValueMapping, v23, 0, (__int32 **)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  v7 = operator new(4uLL);
  __p = v7;
  *v7 = 60;
  v19 = v7 + 1;
  v20 = v7 + 1;
  v8 = ZinRegisterPacking::ProcessRegisters(a1 + 492, 0x13uLL, 0, 0, 0, v4, AddressDefaultValueMapping, v23, 0, (__int32 **)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  v9 = ZinRegisterPacking::ProcessRegisters(a1 + 576, 0x35uLL, 4352, 0, 0, v4, AddressDefaultValueMapping, v23, 0, (__int32 **)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  v10 = ZinRegisterPacking::ProcessRegisters(a1 + 796, 0x19uLL, 1280, 0, 0, v4, AddressDefaultValueMapping, v23, 0, (__int32 **)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  v11 = ZinRegisterPacking::ProcessRegisters(a1 + 932, 5uLL, 3328, 0, 0, v4, AddressDefaultValueMapping, v23, 0, (__int32 **)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  v12 = ZinRegisterPacking::ProcessRegisters(a1 + 960, 9uLL, 5376, 0, 0, v4, AddressDefaultValueMapping, v23, 0, (__int32 **)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  v13 = v6
      + v2
      + v8
      + v9
      + v10
      + v11
      + v12
      + ZinRegisterPacking::ProcessRegisters(a1 + 904, 5uLL, 2304, 0, 0, v4, AddressDefaultValueMapping, v23, 0, (__int32 **)&__p);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  v14 = v13 + (*(_QWORD *)(a1 + 1056) >> 2);
  v15 = *(_QWORD *)(a1 + 1008);
  v16 = *(_QWORD *)(a1 + 1016);
  while (v15 != v16)
  {
    v14 = GetSizeInWordsOfRelocationCommand(v15 + 32) + v14;
    v15 += 40;
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v21);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v23);
  return v14;
}

void sub_206FDD0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
    operator delete(__p);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t std::pair<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block const,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>::pair[abi:ne180100]<true,0>(uint64_t a1, int *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;

  v5 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v8 = v6 - *(_QWORD *)a3;
  if (v6 != *(_QWORD *)a3)
  {
    std::vector<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::allocator<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>>::__vallocate[abi:ne180100]((_QWORD *)(a1 + 8), v8 >> 2);
    v9 = *(char **)(a1 + 16);
    memmove(v9, v7, v8);
    *(_QWORD *)(a1 + 16) = &v9[4 * (v8 >> 2)];
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a3 + 24);
  return a1;
}

void sub_206FDD1B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::allocator<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 62)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[5];
      if (v3)
      {
        v2[6] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::__map_value_compare<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::less<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>,true>,std::allocator<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::__map_value_compare<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::less<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>,true>,std::allocator<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::__map_value_compare<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>,std::less<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block>,true>,std::allocator<std::__value_type<HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::Block,HasInternalTMBufferOverflow(unsigned int const*,unsigned int const*)::BlockInfo>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t SetInstructionMemOffset<11u>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a1)
  {
    v7 = a4;
    do
    {
      v8 = *(_QWORD *)(v4 + 16);
      v9 = *(_QWORD *)(v8 + 200);
      *(_DWORD *)(v8 + 184) = v7;
      if (*(_BYTE *)(a2 + 2057))
        AdjustTaskSizeForRdar107730882<11u>(v8, a2);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, 25);
      v7 = ZinAlignPower2(v7 + (4 * v10), *(_QWORD *)(a2 + 504));
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != a1);
  }
  return 0;
}

uint64_t LegalizeNetworks<11u>(uint64_t **a1, _QWORD *a2, _DWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _WORD *v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  int v26;
  uint64_t v27;
  __int128 v30;
  uint64_t v31;
  void **v32;

  v7 = **a1;
  v8 = *(unsigned int *)((*a1)[1] + 544);
  if ((int)v8 < 1)
  {
    v10 = (unint64_t *)(v7 + 608);
  }
  else
  {
    *(_QWORD *)&v30 = *(unsigned int *)((*a1)[1] + 544);
    v9 = *(_QWORD *)(v7 + 608) >= v8;
    v10 = (unint64_t *)&v30;
    if (!v9)
      v10 = (unint64_t *)(v7 + 608);
  }
  v11 = *v10;
  v12 = ZinAlignPower2(2, *(_QWORD *)(v7 + 504));
  v13 = (_QWORD *)a2[1];
  if (v13 != a2)
  {
    v14 = v12;
    v15 = v12;
    do
    {
      v16 = v13[2];
      if (v15 == v14)
        *(_BYTE *)(v16 + 196) = 1;
      v17 = *(_WORD **)(v16 + 200);
      if (!v17[4])
        *(_BYTE *)(v16 + 199) = 1;
      v18 = (*(uint64_t (**)(_WORD *, uint64_t))(*(_QWORD *)v17 + 24))(v17, 25);
      v15 += ZinAlignPower2(4 * v18, *(_QWORD *)(v7 + 504));
      if (v15 <= v11)
      {
        if (*(_BYTE *)(v16 + 198))
        {
          *(_BYTE *)(v16 + 197) = 1;
          v15 = v14;
          if ((*(unsigned int (**)(_WORD *, uint64_t))(*(_QWORD *)v17 + 24))(v17, 4) != 1)
            ZinAssertImpl("Incorrect network boundary", a5);
        }
      }
      else
      {
        v19 = *(_WORD *)(*(_QWORD *)(v13[2] + 200) + 8);
        do
        {
          if (!v19)
            ZinAssertImpl("Cannot find valid segment boundary", a5);
          v13 = (_QWORD *)*v13;
          v20 = v13[2];
          v21 = *(_WORD **)(v20 + 200);
          v19 = v21[4];
        }
        while (!(*(unsigned int (**)(_WORD *, uint64_t))(*(_QWORD *)v21 + 24))(v21, 4));
        *(_BYTE *)(v20 + 197) = 1;
        v15 = v14;
      }
      v13 = (_QWORD *)v13[1];
    }
    while (v13 != a2);
  }
  *(_BYTE *)(*(_QWORD *)(*a2 + 16) + 197) = 1;
  CollectSegmentStats<11u>(**a1, (uint64_t)a2, a5, (uint64_t *)&v30);
  v22 = a1[8];
  std::vector<ZinIrCodegenTDPartitionStats>::__vdeallocate(v22);
  *(_OWORD *)v22 = v30;
  v22[2] = v31;
  v30 = 0uLL;
  v31 = 0;
  v32 = (void **)&v30;
  std::vector<ZinIrCodegenTDPartitionStats>::__destroy_vector::operator()[abi:ne180100](&v32);
  v23 = *(_QWORD *)(*a2 + 16);
  v24 = *(_DWORD *)(v23 + 184);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v23 + 200) + 24))(*(_QWORD *)(v23 + 200), 25);
  v26 = result + (v24 >> 2);
  *a3 = v26;
  v27 = *a1[8];
  if (a1[8][1] - v27 == 80 && v26 != *(_DWORD *)(v27 + 12))
    ZinAssertImpl("Error");
  return result;
}

uint64_t ZinIrContextSwitchValidator<11u>(_QWORD *a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  _DWORD *v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(*a1 + 16);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 200) + 24))(*(_QWORD *)(v2 + 200), 4))
  {
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      ZinIrContextSwitchValidator<11u>(v11, v12, v13, v14, v15, v16, v17, v18);
    return 2;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 200) + 24))(*(_QWORD *)(v2 + 200), 49))
  {
    v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v3)
      ZinIrContextSwitchValidator<11u>(v3, v4, v5, v6, v7, v8, v9, v10);
    return 2;
  }
  v20 = (_QWORD *)a1[1];
  if (v20 != a1)
  {
    while (1)
    {
      v21 = *(_DWORD **)(v20[2] + 200);
      if ((~v21[211] & 3) == 0)
      {
        if ((*(unsigned int (**)(_DWORD *, uint64_t))(*(_QWORD *)v21 + 24))(v21, 4))
          break;
      }
      v20 = (_QWORD *)v20[1];
      if (v20 == a1)
        return 0;
    }
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinIrContextSwitchValidator<11u>(v22, v23, v24, v25, v26, v27, v28, v29);
    return 2;
  }
  return 0;
}

uint64_t ZinAneTd<11u>::GetField(uint64_t a1, int a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 23:
    case 24:
      return (*(_DWORD *)(a1 + 800) >> 25) & 3;
    case 4:
      return *(_DWORD *)(a1 + 36) & 1;
    case 5:
      return (*(_DWORD *)(a1 + 36) >> 1) & 1;
    case 8:
      return *(unsigned __int16 *)(a1 + 40);
    case 9:
      return *(_WORD *)(a1 + 38) & 7;
    case 12:
      return (*(_DWORD *)(a1 + 800) >> 2) & 3;
    case 14:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
      return *(_DWORD *)(a1 + 16) & 0xFFFFFF;
    case 15:
      v3 = *(_DWORD *)(a1 + 800);
      return (v3 >> 4) & 1;
    case 16:
      v4 = *(_DWORD *)(a1 + 800);
      return (v4 >> 5) & 1;
    case 17:
      v3 = *(_DWORD *)(a1 + 844);
      return (v3 >> 4) & 1;
    case 18:
      v4 = *(_DWORD *)(a1 + 844);
      return (v4 >> 5) & 1;
    case 19:
      v5 = *(_DWORD *)(a1 + 800);
      return (v5 >> 20) & 1;
    case 20:
      v6 = *(_DWORD *)(a1 + 800);
      return (v6 >> 22) & 1;
    case 21:
      v5 = *(_DWORD *)(a1 + 844);
      return (v5 >> 20) & 1;
    case 22:
      v6 = *(_DWORD *)(a1 + 844);
      return (v6 >> 22) & 1;
    case 25:
      return *(_WORD *)(a1 + 10) & 0x7FF;
    case 26:
      return *(unsigned __int16 *)(a1 + 890);
    case 27:
      return *(unsigned __int16 *)(a1 + 894);
    case 28:
      v7 = *(_DWORD *)(a1 + 888);
      goto LABEL_27;
    case 29:
      v7 = *(_DWORD *)(a1 + 892);
LABEL_27:
      result = v7 & 3;
      break;
    case 49:
      result = *(unsigned int *)(a1 + 32);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetField(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  switch(a2)
  {
    case 4:
      v3 = *(_DWORD *)(result + 36) & 0xFFFFFFFE | a3 & 1;
      goto LABEL_6;
    case 5:
      v3 = *(_DWORD *)(result + 36) & 0xFFFFFFFD | (2 * (a3 & 1));
      goto LABEL_6;
    case 8:
      *(_WORD *)(result + 40) = a3;
      return result;
    case 9:
      v3 = *(_DWORD *)(result + 36) & 0xFFF8FFFF | ((a3 & 7) << 16);
LABEL_6:
      *(_DWORD *)(result + 36) = v3;
      return result;
    case 12:
      v4 = *(_DWORD *)(result + 800) & 0xFFFFFFF3 | (4 * (a3 & 3));
      goto LABEL_15;
    case 13:
      v4 = *(_DWORD *)(result + 800) & 0xF9FFFFFF | ((a3 & 3) << 25);
      goto LABEL_15;
    case 15:
      v4 = *(_DWORD *)(result + 800) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_15;
    case 16:
      v4 = *(_DWORD *)(result + 800) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_15;
    case 17:
      v5 = *(_DWORD *)(result + 844) & 0xFFFFFFEF | (16 * (a3 & 1));
      goto LABEL_18;
    case 18:
      v5 = *(_DWORD *)(result + 844) & 0xFFFFFFDF | (32 * (a3 & 1));
      goto LABEL_18;
    case 19:
      v4 = *(_DWORD *)(result + 800) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_15;
    case 20:
      v4 = *(_DWORD *)(result + 800) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_15:
      *(_DWORD *)(result + 800) = v4;
      return result;
    case 21:
      v5 = *(_DWORD *)(result + 844) & 0xFFEFFFFF | ((a3 & 1) << 20);
      goto LABEL_18;
    case 22:
      v5 = *(_DWORD *)(result + 844) & 0xFFBFFFFF | ((a3 & 1) << 22);
LABEL_18:
      *(_DWORD *)(result + 844) = v5;
      break;
    case 25:
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xF800FFFF | ((a3 & 0x7FF) << 16);
      break;
    case 26:
      *(_WORD *)(result + 890) = a3;
      break;
    case 27:
      *(_WORD *)(result + 894) = a3;
      break;
    case 28:
      *(_DWORD *)(result + 888) = *(_DWORD *)(result + 888) & 0xFFFFFFFC | a3 & 3;
      break;
    case 29:
      *(_DWORD *)(result + 892) = *(_DWORD *)(result + 892) & 0xFFFFFFFC | a3 & 3;
      break;
    case 49:
      *(_DWORD *)(result + 32) = a3;
      break;
    case 50:
      *(_DWORD *)(result + 16) = a3 & 0xFFFFFF | (*(unsigned __int8 *)(result + 19) << 24);
      break;
    default:
      return result;
  }
  return result;
}

void ZinAneTd<11u>::HandleUserTags(ZinIrHalH13g *a1, uint64_t a2)
{
  int v4;
  int IsCompressed;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = ZinEngineLayerMirInfo::HasDmaRead(*(_QWORD *)(a2 + 264), 0);
  IsCompressed = 0;
  if (v4)
    IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(*(_QWORD *)(a2 + 264)
                                                                                           + 712));
  v6 = ZinEngineLayerMirInfo::HasDmaRead(*(_QWORD *)(a2 + 264), 1);
  if (!v6)
  {
    v7 = 0;
    if (!*(_QWORD *)(a2 + 200))
      goto LABEL_9;
    goto LABEL_8;
  }
  v7 = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(*(_QWORD *)(a2 + 264) + 808));
  if (!*(_QWORD *)(a2 + 200))
    goto LABEL_9;
  if (*(_QWORD *)(a2 + 192) != 1)
  {
LABEL_8:
    if (!*(_QWORD *)(a2 + 192))
    {
      v6 |= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 496))(a2);
      v8 = *(_DWORD *)(a2 + 360);
      if ((v4 & 1) == 0)
        goto LABEL_15;
      goto LABEL_12;
    }
LABEL_9:
    v8 = *(_DWORD *)(a2 + 360);
    if (!v4)
      goto LABEL_15;
    goto LABEL_12;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 496))(a2);
  v8 = *(_DWORD *)(a2 + 360);
LABEL_12:
  ZinAneTd<11u>::SetTileDmaSrcDma1UserTag((uint64_t)a1, v8);
  if (IsCompressed)
  {
    ZinAneTd<11u>::SetTileDmaSrcCompressedMdUserTag((uint64_t)a1, v8);
    if ((v6 & 1) == 0)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_15:
  if (!v6)
    goto LABEL_18;
LABEL_16:
  ZinAneTd<11u>::SetTileDmaSrcDma2UserTag((uint64_t)a1, v8);
  if (v7)
    ZinIrHalH13g::~ZinIrHalH13g(a1);
LABEL_18:
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 264) + 1632) - 1) <= 1)
    ZinAneTd<11u>::SetTileDmaDstUserTag((uint64_t)a1, v8);
  v9 = *(_QWORD *)(a2 + 136);
  if (v9)
  {
    v10 = *(_QWORD **)(v9 + 784);
    if (v10)
    {
      v11 = v10[4];
      v12 = v10[2];
      v13 = v10[3];
      v14 = v10[1];
      if (v10[5])
        ZinAneTd<11u>::SetKernelDmaSrcCoeffUserTag((uint64_t)a1, v8);
      if (v13)
        ZinAneTd<11u>::SetKernelDmaSrcPostScaleUserTag((uint64_t)a1, v8);
      if (v11)
        ZinAneTd<11u>::SetKernelDmaSrcPostScaleUserTag((uint64_t)a1, v8);
      if (v14)
        ZinAneTd<11u>::SetKernelDmaSrcPostScaleUserTag((uint64_t)a1, v8);
      if (v12)
        ZinAneTd<11u>::SetKernelDmaSrcPostScaleUserTag((uint64_t)a1, v8);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1264))
    ZinIrHalH13g::~ZinIrHalH13g(a1);
}

BOOL ZinAneTd<11u>::HandleEWCommon(uint64_t a1, ZinIrOpLayer *this)
{
  uint64_t InputTensor;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;

  InputTensor = ZinIrOpLayer::GetInputTensor(this, 0);
  v5 = *(_QWORD *)(*((_QWORD *)this + 57) + 64);
  v13 = 0;
  v6 = *(_QWORD *)(InputTensor + 48);
  result = ZinCodegenUtil::ValueToRegister(*(_QWORD *)(InputTensor + 56), (unsigned int *)(*(_QWORD *)(a1 + 1040) + 40), &v13);
  if (result)
  {
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v13 & 0x1FFFF;
    *(_DWORD *)(a1 + 524) &= 0xF801FFFF;
    ZinAneTd<11u>::SetCommonConvCfgSx(a1, 1uLL);
    ZinAneTd<11u>::SetCommonConvCfgSy(a1, 1uLL);
    ZinAneTd<11u>::SetCommonConvCfgOx(a1, 1uLL);
    ZinAneTd<11u>::SetCommonConvCfgOy(a1, 1uLL);
    result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, v6);
    if (result)
    {
      result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, 1uLL);
      if (result)
      {
        result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, 1uLL);
        if (result)
        {
          ZinAneTd<11u>::SetUnicastEn(a1, **((unsigned __int8 **)this + 33));
          if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) == 16)
          {
            v8 = 2;
            v9 = 2;
          }
          else
          {
            v10 = *((_QWORD *)this + 33);
            v8 = *(_QWORD *)(v10 + 80);
            v9 = *(_QWORD *)(v10 + 96);
          }
          v12 = 0;
          result = ZinCodegenUtil::ValueToRegister(v8, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 40), &v12);
          if (result)
          {
            *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v12 & 0x1FFFF;
            ZinAneTd<11u>::SetUnicastCin(a1, v9);
            *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 532) & 0xFFFF7FFF | ((*(_DWORD *)(v5 + 12) == 2) << 15);
            v11 = *(_DWORD *)(v5 + 12);
            if (v11 >= 8)
              return 0;
            else
              return (0x9Eu >> v11) & 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonMACBypassMode(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  uint64_t v5;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (unsigned __int8 *)a2[33];
  if (v2)
  {
    ZinAneTd<11u>::SetUnicastEn(a1, *v2);
    *(_DWORD *)(a1 + 524) &= 0xF801FFFF;
    ZinAneTd<11u>::SetCommonConvCfgSx(a1, 1uLL);
    ZinAneTd<11u>::SetCommonConvCfgSy(a1, 1uLL);
    ZinAneTd<11u>::SetCommonConvCfgOx(a1, 1uLL);
    ZinAneTd<11u>::SetCommonConvCfgOy(a1, 1uLL);
    v5 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
    if (ZinAneTd<11u>::SetOrReturnNumGroups(a1, *(_QWORD *)(v5 + 48))
      && ZinAneTd<11u>::SetCommonConvCfgKw(a1, 1uLL)
      && ZinAneTd<11u>::SetCommonConvCfgKh(a1, 1uLL))
    {
      return ZinAneTd<11u>::SetUnicastCin(a1, *(_QWORD *)(a2[33] + 96));
    }
  }
  else
  {
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v7)
      ZinAneTd<4u>::HandleCommonMACBypassMode(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  return 0;
}

BOOL ZinAneTd<11u>::HandleCommonArgMinMax(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v4 = *(_QWORD *)(a2 + 432);
  v5 = *(_QWORD *)(v4 + 64);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 376))(&v19, a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 384))(&v15, a2);
  if (*(_QWORD *)(a2 + 264))
  {
    v14 = 0;
    result = ZinCodegenUtil::ValueToRegister(*(int *)(v5 + 72), (unsigned int *)(*(_QWORD *)(a1 + 1040) + 104), &v14);
    if (result)
    {
      *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xFFC1FFFF | ((v14 & 0x1F) << 17);
      v14 = 0;
      result = ZinCodegenUtil::ValueToRegister(*(int *)(v5 + 64), (unsigned int *)(*(_QWORD *)(a1 + 1040) + 96), &v14);
      if (result)
      {
        *(_DWORD *)(a1 + 524) = *(_DWORD *)(a1 + 524) & 0xF83FFFFF | ((v14 & 0x1F) << 22);
        ZinAneTd<11u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
        ZinAneTd<11u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
        result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, v19);
        if (result)
        {
          switch(*(_DWORD *)(*(_QWORD *)(v4 + 64) + 104))
          {
            case 6:
            case 8:
              result = ZinAneTd<11u>::SetOrReturnWin(a1, v22);
              if (result)
              {
                result = ZinAneTd<11u>::SetOrReturnHin(a1, v21);
                if (result)
                {
                  result = ZinAneTd<11u>::SetOrReturnWout(a1, v18);
                  if (result)
                  {
                    result = ZinAneTd<11u>::SetOrReturnHout(a1, v17);
                    if (result)
                    {
                      result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, *(_QWORD *)(v5 + 16));
                      if (result)
                      {
                        result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, *(_QWORD *)(v5 + 24));
                        if (result)
                        {
                          result = ZinAneTd<11u>::SetUnicastCin(a1, 1uLL);
                          if (result)
                          {
                            v14 = 0;
                            result = ZinCodegenUtil::ValueToRegister(v20, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 40), &v14);
                            if (result)
                            {
                              *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v14 & 0x1FFFF;
                              v14 = 0;
                              result = ZinCodegenUtil::ValueToRegister(v16, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 48), &v14);
                              if (result)
                              {
                                *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v14 & 0x1FFFF;
                                ZinAneTd<11u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
                                goto LABEL_28;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              break;
            case 7:
            case 9:
              result = ZinAneTd<11u>::SetOrReturnWin(a1, v22);
              if (result)
              {
                result = ZinAneTd<11u>::SetOrReturnHin(a1, v21);
                if (result)
                {
                  result = ZinAneTd<11u>::SetOrReturnWout(a1, v18);
                  if (result)
                  {
                    result = ZinAneTd<11u>::SetOrReturnHout(a1, v17);
                    if (result)
                    {
                      v14 = 0;
                      result = ZinCodegenUtil::ValueToRegister(v20, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 40), &v14);
                      if (result)
                      {
                        *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v14 & 0x1FFFF;
                        v14 = 0;
                        result = ZinCodegenUtil::ValueToRegister(v16, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 48), &v14);
                        if (result)
                        {
                          *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v14 & 0x1FFFF;
                          ZinAneTd<11u>::SetUnicastEn(a1, **(unsigned __int8 **)(a2 + 264));
                          result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, v19);
                          if (result)
                          {
                            result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, 1uLL);
                            if (result)
                            {
                              result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, 1uLL);
                              if (result)
                              {
                                if (!ZinAneTd<11u>::SetUnicastCin(a1, v20))
                                  return 0;
                                goto LABEL_28;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              break;
            default:
LABEL_28:
              result = 1;
              break;
          }
        }
      }
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<11u>::HandleCommonArgMinMax(result, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonPoolOpcode(uint64_t a1, unsigned __int8 **a2, unint64_t a3)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15[3];
  uint64_t v16;
  int v17;

  if (!a2[33])
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinAneTd<4u>::HandleCommonPoolOpcode(result, v7, v8, v9, v10, v11, v12, v13);
    return 0;
  }
  v5 = *((_QWORD *)a2[54] + 8);
  result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, a3);
  if (!result)
    return result;
  result = ZinAneTd<11u>::SetCommonConvCfgSx(a1, *(int *)(v5 + 40));
  if (!result)
    return result;
  result = ZinAneTd<11u>::SetCommonConvCfgSy(a1, *(int *)(v5 + 44));
  if (!result)
    return result;
  result = ZinAneTd<11u>::SetCommonConvCfgOx(a1, 1uLL);
  if (!result)
    return result;
  result = ZinAneTd<11u>::SetCommonConvCfgOy(a1, 1uLL);
  if (!result)
    return result;
  if (*(_DWORD *)(v5 + 104) != 2)
  {
    result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, *(_QWORD *)(v5 + 16));
    if (!result)
      return result;
    result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, *(_QWORD *)(v5 + 24));
    if (!result)
      return result;
    result = ZinAneTd<11u>::SetCommonConvCfgPadLeft(a1, *(int *)(v5 + 64));
    if (!result)
      return result;
    result = ZinAneTd<11u>::SetCommonConvCfgPadTop(a1, *(int *)(v5 + 72));
    if (!result)
      return result;
    goto LABEL_21;
  }
  (*((void (**)(uint64_t *__return_ptr, unsigned __int8 **))*a2 + 44))(&v16, a2);
  (*((void (**)(unint64_t *__return_ptr, unsigned __int8 **))*a2 + 41))(v15, a2);
  if (!ZinAneTd<11u>::SetCommonConvCfgKw(a1, v15[0])
    || !ZinAneTd<11u>::SetCommonConvCfgKh(a1, v15[1])
    || !ZinAneTd<11u>::SetCommonConvCfgPadLeft(a1, (int)v16)
    || !ZinAneTd<11u>::SetCommonConvCfgPadTop(a1, v17))
  {
    return 0;
  }
LABEL_21:
  ZinAneTd<11u>::SetUnicastEn(a1, *a2[33]);
  v14 = a2[33];
  if (!*v14)
    return 1;
  ZinAneTd<11u>::SetUnicastCin(a1, *((_QWORD *)v14 + 12));
  LODWORD(v16) = 0;
  result = ZinCodegenUtil::ValueToRegister(*((_QWORD *)a2[33] + 10), (unsigned int *)(*(_QWORD *)(a1 + 1040) + 40), &v16);
  if (result)
  {
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v16 & 0x1FFFF;
    LODWORD(v16) = 0;
    result = ZinCodegenUtil::ValueToRegister(*((_QWORD *)a2[33] + 11), (unsigned int *)(*(_QWORD *)(a1 + 1040) + 48), &v16);
    if (result)
    {
      *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v16 & 0x1FFFF;
      return 1;
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonConvOpcode(uint64_t a1, _QWORD *a2)
{
  int *v4;
  unint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17[3];
  uint64_t v18;
  int v19;

  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a2 + 352))(&v18, a2);
  (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*a2 + 328))(v17, a2);
  if (a2[33])
  {
    v4 = (int *)a2[17];
    v5 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 368))(a2, 4);
    result = ZinAneTd<11u>::SetOrReturnWout(a1, v5);
    if (result)
    {
      result = ZinAneTd<11u>::SetCommonConvCfgKw(a1, v17[0]);
      if (result)
      {
        result = ZinAneTd<11u>::SetCommonConvCfgPadLeft(a1, (int)v18);
        if (result)
        {
          v7 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 368))(a2, 3);
          result = ZinAneTd<11u>::SetOrReturnHout(a1, v7);
          if (result)
          {
            result = ZinAneTd<11u>::SetCommonConvCfgKh(a1, v17[1]);
            if (result)
            {
              result = ZinAneTd<11u>::SetCommonConvCfgPadTop(a1, v19);
              if (result)
              {
                ZinAneTd<11u>::SetCommonConvCfgSx(a1, v4[82]);
                ZinAneTd<11u>::SetCommonConvCfgSy(a1, v4[83]);
                ZinAneTd<11u>::SetCommonConvCfgOx(a1, v4[85]);
                ZinAneTd<11u>::SetCommonConvCfgOy(a1, v4[86]);
                v16 = 0;
                result = ZinCodegenUtil::ValueToRegister(*(_QWORD *)(a2[33] + 80), (unsigned int *)(*(_QWORD *)(a1 + 1040) + 40), &v16);
                if (result)
                {
                  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v16 & 0x1FFFF;
                  v16 = 0;
                  result = ZinCodegenUtil::ValueToRegister(*(_QWORD *)(a2[33] + 88), (unsigned int *)(*(_QWORD *)(a1 + 1040) + 48), &v16);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 508) & 0xFFFE0000 | v16 & 0x1FFFF;
                    result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, *(_QWORD *)(a2[33] + 104));
                    if (result)
                    {
                      v8 = (unsigned __int8 *)a2[33];
                      if (*((_DWORD *)v8 + 28) == 2)
                      {
                        ZinAneTd<11u>::SetUnicastEn(a1, *v8);
                        ZinAneTd<11u>::SetUnicastCin(a1, *(_QWORD *)(a2[33] + 96));
                      }
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      ZinAneTd<4u>::HandleCommonConvOpcode(result, v9, v10, v11, v12, v13, v14, v15);
      return 0;
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::ForceHazardStalls(_DWORD *a1)
{
  a1[144] = a1[144] & 0xCFFFFFFF | 0x10000000;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 15, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 16, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 17, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 18, 1);
  a1[137] |= 0x800000u;
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 19, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 20, 1);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 21, 1);
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 22, 1);
}

uint64_t ZinAneTd<11u>::SetRAWdmaDependency(ZinIrHalH13g *a1, int a2, uint64_t a3, unsigned int a4)
{
  if (a3 == 1)
  {
    ZinAneTd<11u>::SetRAWdmaDependencySrc2(a1, a2);
    return 1;
  }
  if (!a3)
  {
    ZinAneTd<11u>::SetRAWdmaDependencySrc1(a1, a2, a4);
    return 1;
  }
  return 0;
}

uint64_t ZinAneTd<11u>::HasDmaConfigDependent(uint64_t a1)
{
  return *(_DWORD *)(a1 + 576) & ((*(_DWORD *)(a1 + 576) & 0x30000000) != 0);
}

uint64_t ZinAneTd<11u>::HandleDMADepErrata(_DWORD *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 24))(a1, 1);
  if ((_DWORD)result == 1)
  {
    a1[144] = a1[144] & 0xCFFFFFFF | 0x10000000;
  }
  else
  {
    result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
    if ((_DWORD)result != 1)
      return (a1[144] & 0x30000000) == 0x10000000;
  }
  return result;
}

uint64_t ZinAneTd<11u>::HandleCommonConfigFormatAndConvParams(uint64_t a1, int a2, unint64_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  int v12;

  result = ZinAneTd<11u>::SetOrReturnWin(a1, a3[3]);
  if ((_DWORD)result)
  {
    result = ZinAneTd<11u>::SetOrReturnHin(a1, a3[2]);
    if ((_DWORD)result)
    {
      v12 = 0;
      result = ZinCodegenUtil::ValueToRegister(a3[1], (unsigned int *)(*(_QWORD *)(a1 + 1040) + 40), &v12);
      if ((_DWORD)result)
      {
        *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 504) & 0xFFFE0000 | v12 & 0x1FFFF;
        ZinAneTd<11u>::SetCommonInFmt(a1, a2);
        ZinAneTd<11u>::SetCommonOutFmt(a1, a4);
        result = ZinAneTd<11u>::SetCommonConvCfgOx(a1, 1uLL);
        if ((_DWORD)result)
        {
          result = ZinAneTd<11u>::SetCommonConvCfgOy(a1, 1uLL);
          if ((_DWORD)result)
          {
            result = ZinAneTd<11u>::SetOrReturnNumGroups(a1, 1uLL);
            if ((_DWORD)result)
            {
              ZinAneTd<11u>::SetUnicastEn(a1, 0);
              ZinAneTd<11u>::SetUnicastCin(a1, 1uLL);
              return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 216))(a1, a6);
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonConfigOutputDimension(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(a2, 2);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(a2, 4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(a2, 3);
  return ZinAneTd<11u>::SetOrReturnWout(a1, v5)
      && ZinAneTd<11u>::SetOrReturnHout(a1, v6)
      && ZinAneTd<11u>::SetOrReturnCout(a1, v4);
}

BOOL ZinAneTd<11u>::HandleCommonConfigTileAndTaskInfo(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL8 result;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t NumNeededNEs;
  int Pow2Log2;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  MirInfoChannelAssignment *v15;
  uint64_t v16;
  int v17;
  int v18;

  *(_DWORD *)(a1 + 536) = 0;
  v4 = ZinAneTd<11u>::SetTileHeight(a1, *(_QWORD *)(a2 + 200));
  result = 0;
  if (v4)
  {
    result = ZinAneTd<11u>::SetTileOverlap(a1, *(_QWORD *)(a2 + 216));
    if (result)
    {
      result = ZinAneTd<11u>::SetTileOverlapPadTop(a1, *(_QWORD *)(a2 + 208));
      if (result)
      {
        result = ZinAneTd<11u>::SetTileOverlapPadBottom(a1, *(_QWORD *)(a2 + 224));
        if (result)
        {
          *(_DWORD *)(a1 + 548) = 0;
          ZinAneTd<11u>::SetNESmallSourceMode(a1, *(_DWORD *)(a2 + 144));
          v18 = 0;
          ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
          NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment);
          Pow2Log2 = ZinRoundUpToNextPow2Log2(NumNeededNEs);
          result = ZinCodegenUtil::ValueToRegister(Pow2Log2, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 256), &v18);
          if (result)
          {
            *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFC7FFFF | ((v18 & 7) << 19);
            v18 = 0;
            v9 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 136));
            v10 = v9 >= 4 ? 4 : v9;
            result = ZinCodegenUtil::ValueToRegister(v10, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 232), &v18);
            if (result)
            {
              *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFFF8FF | ((v18 & 7) << 8);
              v18 = 0;
              v11 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 120));
              v12 = v11 >= 4 ? 4 : v11;
              result = ZinCodegenUtil::ValueToRegister(v12, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 240), &v18);
              if (result)
              {
                *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFFF8FFF | ((v18 & 7) << 12);
                v18 = 0;
                v13 = ZinRoundUpToNextPow2Log2(*(_QWORD *)(a2 + 128));
                if (v13 >= 4)
                  v14 = 4;
                else
                  v14 = v13;
                result = ZinCodegenUtil::ValueToRegister(v14, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 248), &v18);
                if (result)
                {
                  *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFF8FFFF | ((v18 & 7) << 16);
                  v18 = 0;
                  v15 = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment((ZinEngineLayerMirInfo *)a2);
                  v16 = MirInfoChannelAssignment::GetNumNeededNEs(v15);
                  v17 = ZinRoundUpToNextPow2Log2(v16);
                  result = ZinCodegenUtil::ValueToRegister(v17, (unsigned int *)(*(_QWORD *)(a1 + 1040) + 256), &v18);
                  if (result)
                  {
                    *(_DWORD *)(a1 + 548) = *(_DWORD *)(a1 + 548) & 0xFFC7FFFF | ((v18 & 7) << 19);
                    *(_QWORD *)(a1 + 568) = 0;
                    *(_DWORD *)(a1 + 552) = 0x100000;
                    return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleCommonConfigPerArch(uint64_t a1, ZinEngineLayerMirInfo **a2, unint64_t a3)
{
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t OCGSize;
  char Pow2Log2;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 result;
  int v16;
  ZinEngineLayerMirInfo *v17;
  unint64_t v18;
  ZinEngineLayerMirInfo *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  int v24;

  ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]);
  OCGSize = MirInfoChannelAssignment::GetOCGSize(ChannelAssignment);
  Pow2Log2 = ZinRoundUpToNextPow2Log2(OCGSize);
  ZinAneTd<11u>::SetNEOcgSize(a1, Pow2Log2);
  (*((void (**)(uint64_t *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 44))(&v23, a2);
  (*((void (**)(_QWORD *__return_ptr, ZinEngineLayerMirInfo **))*a2 + 41))(v22, a2);
  (*((void (**)(ZinEngineLayerMirInfo **))*a2 + 42))(a2);
  v10 = v9;
  (*((void (**)(ZinEngineLayerMirInfo **))*a2 + 43))(a2);
  v12 = v11;
  v13 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 45))(a2, 1);
  v14 = (*((uint64_t (**)(ZinEngineLayerMirInfo **, uint64_t))*a2 + 46))(a2, 1);
  ZinAneTd<11u>::SetCommonConvCfg3dKd(a1, v22[2]);
  ZinAneTd<11u>::SetCommonConvCfg3dPz(a1, v24);
  ZinAneTd<11u>::SetCommonConvCfg3dSz(a1, v10);
  ZinAneTd<11u>::SetCommonConvCfg3dOz(a1, v12);
  result = ZinAneTd<11u>::SetOrReturnDin(a1, v13);
  if (result)
  {
    result = ZinAneTd<11u>::SetOrReturnDout(a1, v14);
    if (result)
    {
      ZinAneTd<11u>::SetCommonSourceRouting(a1, 1);
      v16 = (*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 51))(a2);
      ZinAneTd<11u>::SetOutputTranspose(a1, v16);
      v17 = a2[33];
      if (*((_BYTE *)v17 + 8))
      {
        if (!*((_BYTE *)v17 + 40))
          ZinAssertImpl("kernel_group_stride should have value when kernel_stride_enable is set");
        v18 = ZinAlignPower2(*((_QWORD *)v17 + 4), a3);
        v19 = a2[33];
        if (!*((_BYTE *)v19 + 24))
          ZinAssertImpl("kernel_ocg_stride should have value when kernel_stride_enable is set");
        v20 = v18 / a3;
        v21 = ZinAlignPower2(*((_QWORD *)v19 + 2), a3);
        ZinAneTd<11u>::SetKernelStrideRegisters(a1, v20, v21 / a3);
        v17 = a2[33];
      }
      ZinAneTd<11u>::SetFillLowerNEFirst(a1, *((unsigned __int8 *)v17 + 2));
      ZinAneTd<1u>::Set1DWinogradMode(a1, *((unsigned __int8 *)a2[33] + 148));
      ZinAneTd<1u>::SetNEHalfWUMode(a1, *((_BYTE *)a2[33] + 149));
      return 1;
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::HandleTileDmaSrcConfig(uint64_t *a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ZinIrTensor *InputTensor;
  unint64_t *v11;
  unsigned int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  void *v29;
  unint64_t *v30;
  uint64_t v31;
  const void *v32;
  void *v33;
  ZinIrTensor *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;

  if (!ZinIrOpLayer::IsNELayer(this))
    ZinAssertImpl("Only NE layers allowed\n");
  if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) < 0x20uLL)
  {
    InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 0);
    v39 = 0;
    v38 = 0;
    ZinMemSourceIndexTranslator::GetDMASrcIndex(this, 0, &v39, v11);
    if (ZinMemSourceIndexTranslator::GetL2SrcType(this, 0, &v38))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinAneTd<17u>::HandleTileDmaSrcConfig();
LABEL_6:
      v12 = 0;
      v13 = 1;
      goto LABEL_7;
    }
    v22 = v38 != 0;
    v23 = v39;
    v24 = *(_QWORD *)(*((_QWORD *)this + 33) + 96 * v39 + 752);
    if (!v24)
    {
      v13 = 1;
      v12 = 1;
      goto LABEL_7;
    }
    v25 = *((_QWORD *)this + 25);
    if (v25 && (v26 = *((_QWORD *)this + 24), v26 <= 1))
    {
      v27 = v26 == 1;
      v28 = v26 != 1 || v26 == 0;
      LOBYTE(v36) = v27;
      HIDWORD(v36) = v28;
      LODWORD(v35) = 1;
      BYTE4(v35) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 304))(v25);
      v23 = v39;
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
    v29 = (void *)*((_QWORD *)this + (int)v23 + 30);
    if (v29)
    if (!ZinCodegen::SetPrimarySourceDMA<11u>(InputTensor, a1, *((_QWORD *)this + 33), v23, v22, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), SBYTE4(v36), v36, SBYTE4(v35), (uint64_t)v29))goto LABEL_6;
    **(_QWORD **)(a5 + 128) = v24;
    v37 = 0;
    ZinMemSourceIndexTranslator::GetDMASrcIndex(this, (const ZinANELayer *)1, &v37, v30);
    v31 = *(_QWORD *)(*((_QWORD *)this + 33) + 96 * v37 + 752);
    if (v31)
    {
      if ((_DWORD)v35 && *((_QWORD *)this + 12) - *((_QWORD *)this + 11) >= 9uLL)
      {
        v32 = (const void *)*((_QWORD *)this + (int)v37 + 30);
        if (v32)
        else
          v33 = 0;
        v13 = 1;
        v34 = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(this, 1uLL);
        if (!ZinCodegen::SetSecondarySourceDMA<11u>(v34, (uint64_t)a1, *((_QWORD *)this + 33), v37, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), HIDWORD(v36), v36, SBYTE4(v35), (uint64_t)v33))goto LABEL_35;
        v31 = *(_QWORD *)(*((_QWORD *)this + 33) + 96 * v37 + 752);
      }
      v13 = 0;
      *(_QWORD *)(*(_QWORD *)(a5 + 128) + 8) = v31;
    }
    else
    {
      v13 = 0;
    }
LABEL_35:
    v12 = 0;
LABEL_7:
    if (v13)
      return v12;
    else
      return 1;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    ZinAneTd<11u>::HandleTileDmaSrcConfig(result, v15, v16, v17, v18, v19, v20, v21);
    return 0;
  }
  return result;
}

BOOL ZinAneTd<11u>::HandleL2Config(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int L2RdMode;
  uint64_t v25;
  ZinIrSymbol *L2WrSymbol;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int OCGSize;
  unsigned int NumNeededNEs;
  uint64_t *v73;
  _BOOL8 L2RowStride;
  uint64_t v76;
  __int128 v77;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = *(_DWORD *)(a2[8] + 8);
  if (v6 == 85)
  {
    if (!a2[54])
      goto LABEL_28;
    v10 = a2[17];
    v9 = *(_DWORD *)(v10 + 376);
    v11 = (_DWORD *)a3[183];
    v12 = (_DWORD *)a3[184];
    if (v11 != v12)
    {
      while (*v11 != v9)
      {
        if (++v11 == v12)
        {
          v11 = (_DWORD *)a3[184];
          break;
        }
      }
    }
    if (v11 == v12 || v9 == 4 || v9 == 2)
    {
      v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v13)
        ZinAneTd<4u>::HandleL2Config(v13, v14, v15, v16, v17, v18, v19, v20);
      return 0;
    }
    v23 = *(_DWORD *)(v10 + 380);
    v22 = a1;
    goto LABEL_27;
  }
  if (v6 == 90)
  {
    v21 = *(_DWORD *)(*(_QWORD *)(a2[57] + 64) + 12);
    if (v21 == 8)
    {
      v22 = a1;
      v9 = 4;
    }
    else
    {
      if (v21 != 7)
        goto LABEL_28;
      v22 = a1;
      v9 = 2;
    }
    goto LABEL_26;
  }
  if (v6 != 89)
    goto LABEL_28;
  v7 = *(_QWORD *)(a2[54] + 64);
  v8 = *(_DWORD *)(v7 + 104);
  if (!v8)
  {
    if (*(_DWORD *)(v7 + 100) == 2)
    {
      v9 = 2;
      goto LABEL_24;
    }
LABEL_41:
    v63 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v63)
      ZinAneTd<4u>::HandleL2Config(v63, v64, v65, v66, v67, v68, v69, v70);
    return 0;
  }
  if (v8 != 1)
  {
    v9 = *(_DWORD *)(v7 + 100);
    goto LABEL_24;
  }
  if (*(_DWORD *)(v7 + 100) != 4)
    goto LABEL_41;
  v9 = 4;
LABEL_24:
  v22 = a1;
LABEL_26:
  v23 = 0;
LABEL_27:
  ZinAneTd<11u>::SetPaddingMode(v22, v9, v23);
LABEL_28:
  L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2[33], 0);
  ZinAneTd<11u>::SetL2Src1SourceType(a1, L2RdMode);
  if (!ZinCodegen::SetPrimaryL2SourceBuffer<11u>((uint64_t)a3, (uint64_t)a2, (ZinIrHalH13g *)a1))
  {
    v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v39)
      ZinAneTd<1u>::HandleNEControlCommon(v39, v40, v41, v42, v43, v44, v45, v46);
    return 0;
  }
  v25 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + 32))(a2, 0, 0);
  L2WrSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2[33]);
  if (!L2WrSymbol)
  {
    v47 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v47)
      ZinAneTd<4u>::HandleL2Config(v47, v48, v49, v50, v51, v52, v53, v54);
    return 0;
  }
  v27 = (uint64_t)L2WrSymbol;
  if (ZinIrSymbol::GetMemType(L2WrSymbol) != 2)
  {
    v55 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v55)
      ZinAneTd<17u>::HandleL2Config(v55, v56, v57, v58, v59, v60, v61, v62);
    return 0;
  }
  ZinAneTd<11u>::SetL2ResultType(a1, *(_DWORD *)(a2[33] + 1632));
  ZinAneTd<11u>::SetL2BfrMode(a1, *(unsigned __int8 *)(a2[33] + 312));
  ZinAneTd<11u>::SetL2ResultCfgDmaFmt(a1, *(_DWORD *)(v25 + 88));
  ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a1, *(_QWORD *)(a2[33] + 320));
  v28 = a2[33];
  if ((*(_DWORD *)(v28 + 1632) - 1) > 1)
  {
    v30 = 1;
  }
  else
  {
    v29 = ZinTensorDescriptorDmaInterleave(*(_QWORD *)(v28 + 944) + 208);
    v30 = v29;
    if (!v29)
    {
      v31 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v31)
        ZinAneTd<6u>::HandleL2Config(v31, v32, v33, v34, v35, v36, v37, v38);
      return 0;
    }
  }
  ZinAneTd<11u>::SetL2ResultInterleave(a1, v30);
  ZinAneTd<11u>::SetL2ResultBaseAddr(a1, *(_QWORD *)(v27 + 16) % a3[51] / a3[52]);
  ZinAneTd<11u>::SetL2ResultChannelStride(a1, *(_DWORD *)(a2[33] + 280));
  v77 = *(_OWORD *)(v27 + 520);
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v77);
  NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v77);
  ZinAneTd<4u>::SetL2ResultWrapAddrOffset(a1, OCGSize);
  ZinAneTd<4u>::SetL2ResultWrapAddr(a1, NumNeededNEs);
  if ((ZinCodegen::SetL2ResultWrapInfo<11u>(a1, v27) & 1) == 0)
    return 0;
  v76 = 0;
  L2RowStride = ZinCodegen::GetL2RowStride((ZinCodegen *)(v25 + 48), *(const ZinTensorDimensions **)(a2[33] + 272), *(unsigned int *)(*(_QWORD *)(a1 + 1040) + 404), &v76, v73);
  if (L2RowStride)
  {
    ZinAneTd<11u>::SetL2ResultRowStride(a1, v76);
    ZinAneTd<11u>::SetL2ResultDepthStride(a1, *(_DWORD *)(a2[33] + 296));
    ZinAneTd<11u>::SetL2ResultGroupStride(a1, *(_DWORD *)(a2[33] + 288));
    if (a2[47])
      *(_DWORD *)(a1 + 796) |= 1u;
  }
  return L2RowStride;
}

BOOL ZinAneTd<11u>::HandleNEConfig(uint64_t a1, uint64_t a2, const ZinIrHalParameters *a3)
{
  uint64_t v6;
  ZinIrKernel **v7;
  unsigned int v8;
  int v9;
  int v10;
  _BOOL4 KernelGroupReuse;
  ZinIrKernel *v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 ShouldUseSparseBinaryForCompression;
  int MacCfgOpMode;
  _BOOL8 result;
  int MacCfgKernelMode;
  _BOOL4 MacCfgPassthroughEnable;
  int KernelCfgKernelFmt;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ZinDeQuantLayer *v41;
  int ScalarZeroPoint;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  int HasZeroPoint;
  unsigned __int8 *v49;
  int v50;
  int v51;
  uint64_t v52;
  _BOOL4 v53;
  ZinIrKernel *v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v7 = (ZinIrKernel **)(a2 + 136);
  v6 = *(_QWORD *)(a2 + 136);
  if (!v6)
  {
    KernelGroupReuse = GetKernelGroupReuse((const ZinNELayer *)a2);
    v9 = 0;
    v10 = 0;
    goto LABEL_7;
  }
  v8 = *(unsigned __int8 *)(v6 + 448);
  v9 = (v8 >> 3) & 1;
  v10 = (v8 >> 4) & 1;
  KernelGroupReuse = GetKernelGroupReuse((const ZinNELayer *)a2);
  if ((v8 & 4) == 0)
  {
LABEL_7:
    ShouldUseSparseBinaryForCompression = 0;
    v16 = 0;
    v14 = 4;
    goto LABEL_8;
  }
  v12 = *v7;
  v13 = *(unsigned __int8 **)(*((_QWORD *)*v7 + 98) + 40);
  if (!v13)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    GetKernelCfgKernelFmt(result, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  v14 = *((_DWORD *)v12 + 44);
  v15 = *v13;
  v16 = v15 != 0;
  if (v15)
  {
    ShouldUseSparseBinaryForCompression = ZinIrKernel::ShouldUseSparseBinaryForCompression(v12);
    v12 = *v7;
  }
  else
  {
    ShouldUseSparseBinaryForCompression = 0;
  }
  if (ZinIrKernel::HasVectorPalettizedWeight(v12))
  {
    v33 = ZinLog2OfPow2(*((_QWORD *)*v7 + 52));
    ZinAneTd<4u>::SetPaletteBlockSize(a1, v33);
  }
LABEL_8:
  ZinAneTd<11u>::SetKernelPalettizedEn(a1, v14);
  ZinAneTd<11u>::SetKernelPalettizedBits(a1, v14);
  ZinAneTd<11u>::SetKernelSparseFmt(a1, v16);
  ZinAneTd<11u>::SetKernelSparseBinary(a1, ShouldUseSparseBinaryForCompression);
  ZinAneTd<11u>::SetGroupKernelReuse(a1, KernelGroupReuse);
  v65 = 0;
  MacCfgOpMode = GetMacCfgOpMode((ZinIrOpLayer *)a2, (uint64_t)a3, &v65);
  result = 0;
  if (!MacCfgOpMode)
  {
    ZinAneTd<11u>::SetOpMode(a1, v65);
    MacCfgKernelMode = GetMacCfgKernelMode(a2, (uint64_t)a3);
    ZinAneTd<11u>::SetKernelMode(a1, MacCfgKernelMode);
    MacCfgPassthroughEnable = GetMacCfgPassthroughEnable((const ZinNELayer *)a2, a3);
    ZinAneTd<1u>::SetPassthroughEnable(a1, MacCfgPassthroughEnable);
    v64 = 0;
    KernelCfgKernelFmt = GetKernelCfgKernelFmt((const ZinNELayer *)a2, a3, v65, &v64);
    result = 0;
    if (!KernelCfgKernelFmt)
    {
      ZinAneTd<11u>::SetKernelFmt(a1, v64);
      v23 = *(_QWORD *)(a2 + 420);
      if ((v23 & 0xFF00000000) == 0)
        ZinAssertImpl("Binary point is missing from NE layer.");
      ZinAneTd<11u>::SetNEBinaryPoint(a1, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(a1, a2) & 1) == 0)
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        ZinAneTd<4u>::HandleNEConfig(result, v34, v35, v36, v37, v38, v39, v40);
        return 0;
      }
      v24 = *(_QWORD *)(a2 + 392);
      if (v24)
        v25 = *(_DWORD *)(v24 + 192);
      else
        v25 = 0;
      ZinAneTd<11u>::SetNENonLinearMode(a1, v25, (uint64_t)a3 + 1536);
      v41 = *(ZinDeQuantLayer **)(a2 + 408);
      if (v41)
      {
        ScalarZeroPoint = ZinDeQuantLayer::GetScalarZeroPoint(v41);
        ZinAneTd<4u>::SetQuantizationOutputZeroOffset(a1, 1, ScalarZeroPoint);
      }
      if (v9)
      {
        v43 = *(_QWORD *)((char *)*v7 + 180);
        v44 = 1;
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
      ZinAneTd<11u>::SetNEPostScale(a1, v43, v44);
      if (v10)
      {
        v45 = *(_QWORD *)((char *)*v7 + 188);
        v46 = 1;
      }
      else
      {
        v46 = 0;
        v45 = 0;
      }
      ZinAneTd<11u>::SetNEBias(a1, v45, v46);
      if (*(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) == 85)
        v47 = ZinPEElementWiseLayer::GetSecondOperandBroadcast((ZinPEElementWiseLayer *)a2) & 0xFFFFFFFFFFLL;
      else
        v47 = 0;
      ZinAneTd<11u>::SetNEMatrixVectorBias(a1, (ZinIrKernel **)(a2 + 136), v47);
      if (*v7)
        HasZeroPoint = ZinIrKernel::HasZeroPoint(*v7);
      else
        HasZeroPoint = 0;
      ZinAneTd<4u>::SetKernelAsymQuantEn(a1, HasZeroPoint);
      v50 = *v7 && (v49 = (unsigned __int8 *)*((_QWORD *)*v7 + 98)) != 0 && *v49 != 0;
      ZinAneTd<4u>::SetKernelDetectZeros(a1, v50);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
      v52 = *(_QWORD *)(a2 + 136);
      if (v51)
      {
        if (*(_DWORD *)(v52 + 408) != 1)
          ZinAssertImpl("Tensor kernel is not using aligned format!");
        v53 = 0;
      }
      else if (v52)
      {
        v53 = *(_DWORD *)(v52 + 408) != 1;
      }
      else
      {
        v53 = 1;
      }
      ZinAneTd<11u>::SetKernelAlignmentFormat(a1, v53);
      ZinAneTd<4u>::SetDoubleInt8Enable(a1, *(unsigned __int8 *)(*(_QWORD *)(a2 + 264) + 1));
      ZinAneTd<11u>::SetKernelSparseBlockSize(a1, 0);
      v54 = *(ZinIrKernel **)(a2 + 136);
      if (v54 && ZinIrKernel::HasVectorPalettizedWeight(v54) && **(_BYTE **)(*((_QWORD *)*v7 + 98) + 40))
      {
        v55 = ZinLog2OfPow2(*((_QWORD *)*v7 + 52));
        ZinAneTd<11u>::SetKernelSparseBlockSize(a1, v55);
      }
      if (*(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) == 89)
      {
        v56 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 432) + 64) + 104);
        ZinAneTd<11u>::SetArgOutputSelect(a1, v56);
        ZinAneTd<11u>::SetMaxPoolMode(a1, v56);
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, a2) & 1) != 0)
        return 1;
      result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (result)
      {
        ZinAneTd<4u>::HandleNEConfig(result, v57, v58, v59, v60, v61, v62, v63);
        return 0;
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::HandleNEConfigRCASCfg(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) == 93)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a2 + 432) + 64);
    v3 = *(_QWORD **)(v2 + 48);
    if (v3 != (_QWORD *)(v2 + 56))
    {
      v4 = 0;
      do
      {
        v5 = v3[4];
        if (v5 >= 8)
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        v6 = (_QWORD *)v3[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v3[2];
            v8 = *v7 == (_QWORD)v3;
            v3 = v7;
          }
          while (!v8);
        }
        v4 |= 1 << v5;
        v3 = v7;
      }
      while (v7 != (_QWORD *)(v2 + 56));
    }
    ZinAneTd<1u>::SetRcasKeyMask();
  }
  return 1;
}

BOOL ZinAneTd<11u>::HandleTileDmaDstConfig(int a1, ZinIrOpLayer *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ZinIrTensor *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;

  if (!ZinIrOpLayer::IsNELayer(this) && !ZinIrOpLayer::IsTransposeEngineLayer(this))
    ZinAssertImpl("Only NE and TransposeEngineLayer allowed\n");
  v9 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v10 = *((_QWORD *)this + 32);
  if (v10)
    v11 = *(_DWORD *)(*(_QWORD *)(v10 + 64) + 8) == 102;
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 33);
  return (*(_DWORD *)(v12 + 1632) - 1) > 1
      || ZinCodegen::SetResultDMA<11u>(v9, *(uint64_t **)(a5 + 200), v12, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), v11);
}

uint64_t ZinAneTd<11u>::HandleKernelDmaSrcConfig(uint64_t *a1, uint64_t *a2, uint64_t *a3, ZinIrMemoryPool *a4, uint64_t a5)
{
  _BOOL8 v11;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  __int128 __p;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  char v21;

  (*(void (**)(uint64_t *, _QWORD))(*a1 + 64))(a1, *(int *)(*a3 + 8));
  ZinAneTd<11u>::InitializeKernelDmaSrcConfig((uint64_t)a1);
  ZinAneTd<11u>::HandleKernelDmaSrcConfigAligned(a1, (ZinIrOpLayer *)a2, a3, a4);
  v21 = 0;
  ZinAneTd<11u>::HandleKernelDmaSrcConfigCoeffBuffer((uint64_t)a1, (ZinEngineLayerMirInfo **)a2, a3, a5, a2 + 17, &v21);
  if (v21)
  {
    ZinAneTd<17u>::AddKernelSymbols((uint64_t)a1, (ZinIrKernel **)a2, (uint64_t)a3, a5);
    v20 = 0;
    if (ZinIrCodeGenGetBarIdForCoeffKDMABlock((const ZinIrOpLayer *)a2, a4, &v20))
      return 0;
    if (*(_BYTE *)(a3[1] + 378))
      v11 = *(_BYTE *)(a5 + 24) == 0;
    else
      v11 = 0;
    ZinAneRelocInfo::ZinAneRelocInfo(&v16, *(_QWORD *)(a5 + 8) - 24, 1602, v20, 1, 1, v11, 0);
    v12 = a1[127];
    if (v12 >= a1[128])
    {
      v15 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v16);
    }
    else
    {
      *(_WORD *)v12 = v16;
      v13 = (std::string *)(v12 + 8);
      if (SHIBYTE(v18) < 0)
      {
        std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v14 = __p;
        *(_QWORD *)(v12 + 24) = v18;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *(_DWORD *)(v12 + 32) = v19;
      v15 = v12 + 40;
      a1[127] = v12 + 40;
    }
    a1[127] = v15;
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p);
    if (*(_BYTE *)(*a3 + 1271))
      ZinAneTd<4u>::SetKernelDmaSrcConfigPrefetch();
  }
  return 1;
}

void sub_206FDF9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 1016) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<11u>::HandleEngineLayer(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t **a6, CFArrayRef *a7)
{
  ZinIrSection *v14;
  const __CFString *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[3];

  if (!*(_QWORD *)(a2 + 264))
  {
    v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v16)
      ZinAneTd<4u>::HandleEngineLayer(v16, v17, v18, v19, v20, v21, v22, v23);
    v15 = CFSTR("CodeGenerationFailure");
    goto LABEL_10;
  }
  ZinIrMemoryPool::GetSections((uint64_t)a6[3], 1, v25);
  v14 = *(ZinIrSection **)(v25[1] + 16);
  std::__list_imp<ZinIrSection *>::clear(v25);
  if ((ZinAneInstruction::HandleTdHeader(a4, (ZinEngineLayerMirInfo **)a2, a3, *a6, v14) & 1) == 0)
  {
    v15 = CFSTR("InvalidHWHeader");
    goto LABEL_10;
  }
  (*(void (**)(uint64_t *))(*a1 + 416))(a1);
  if (ZinIrOpLayer::IsPELayer((ZinIrOpLayer *)a2))
  {
    if (!HandlePELayer<11u>((ZinIrOpLayer *)a2, a3, a4, **a6, a5))
    {
      v15 = CFSTR("PEConfigFailure");
LABEL_10:
      ZinIrNetworkStatus::SetError(a7, v15);
      return 0;
    }
  }
  else
  {
    if (!ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2))
      ZinAssertImpl("TransposeEngineLayer based graph should not need DMA buffer\n");
    if (!HandleNELayer<11u>((const ZinIrOpLayer *)a2, a3, (ZinAneInstruction *)a4, (int **)*a6, (ZinIrMemoryPool *)a6[3], a5, a7))return 0;
  }
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 328))(a1, **a6, a2);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 344))(a1, a2);
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 352))(a1, a2, a6[2]);
      if ((ZinAneTd<11u>::CodegenIntermediateMCacheDSIDs(a1, a2, *a6, (uint64_t)a6[2]) & 1) != 0)
      {
        if (*(_BYTE *)(a4 + 198))
          *(_DWORD *)(*(_QWORD *)(a4 + 200) + 44) |= 0x80u;
        return 1;
      }
      else
      {
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          ZinAneTd<17u>::HandleEngineLayer();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::HandleTextureConfig(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  void *__p[2];
  int v23;
  _OWORD v24[2];
  uint64_t v25;

  if (a3[25])
  {
    v5 = a3[24];
    if (v5)
    {
      if (v5 != 1)
        return 1;
      v6 = a3 + 31;
    }
    else
    {
      v6 = a3 + 30;
    }
    v7 = *v6;
    if (*v6)
    {
      if (v5)
      {
        (*(void (**)(void **__return_ptr, uint64_t *))(*a3 + 512))(__p, a3);
        v8 = __p[0];
        v9 = *((_QWORD *)__p[0] + 1);
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t *))(*a3 + 512))(__p, a3);
        v8 = __p[0];
        v9 = *(_QWORD *)__p[0];
      }
      v10 = *(_OWORD *)(v9 + 64);
      v24[0] = *(_OWORD *)(v9 + 48);
      v24[1] = v10;
      v25 = *(_QWORD *)(v9 + 80);
      __p[1] = v8;
      operator delete(v8);
      if (!ZinAneTd<11u>::SetTextureExtMax(a1, v24))
        ZinAssertImpl("Codegen Error: Invalid TexExt XY/GZ is given");
      LODWORD(__p[0]) = *(_DWORD *)(v7 + 192);
      ZinAneTd<11u>::SetTextureMode(a1, __p);
      v11 = *(void **)(v7 + 196);
      v21 = *(_QWORD *)(v7 + 232);
      __p[0] = v11;
      ZinAneTd<11u>::SetTextureNormalization(a1, (int *)__p, (int *)&v21);
      __p[0] = *(void **)(v7 + 204);
      ZinAneTd<11u>::SetTextureFilter(a1, __p);
      LOWORD(__p[0]) = *(_WORD *)(v7 + 212);
      ZinAneTd<11u>::SetTextureWrap(a1, (unsigned __int8 *)__p);
      ZinAneTd<11u>::SetTextureIndexTensorInterleave(a1, *(_QWORD *)(v7 + 224));
      ZinAneTd<11u>::SetTextureBackgroundEn(a1, *(unsigned __int8 *)(v7 + 214));
      if (*(_BYTE *)(v7 + 214))
        ZinAneTd<11u>::SetTextureBackgroundVal(a1, *(_WORD *)(v7 + 216));
      *(_DWORD *)(a1 + 800) = *(_DWORD *)(a1 + 800) & 0xFFFFF0FF | ((HIBYTE(*(unsigned __int16 *)(a1 + 658)) & 0xF) << 8);
      if (*(_BYTE *)(a2 + 1253) && *(_BYTE *)(v7 + 215))
      {
        ZinAneTd<8u>::SetTexturePreserveFraction(a1, 1);
        ZinAneTd<11u>::SetL2Src1DmaFormat(a1, 3);
      }
      else
      {
        ZinAneTd<8u>::SetTexturePreserveFraction(a1, 0);
        *(_DWORD *)(a1 + 800) = *(_DWORD *)(a1 + 800) & 0xFFFFFF3F | ((*(_DWORD *)(a1 + 656) & 3) << 6);
      }
      v12 = *(_DWORD *)(v7 + 192);
      if ((v12 - 1) <= 1)
      {
        *(_OWORD *)__p = *(_OWORD *)(v7 + 240);
        v23 = *(_DWORD *)(v7 + 256);
        ZinAneTd<11u>::SetTextureSrcPermute(a1, __p);
        *(_OWORD *)__p = *(_OWORD *)(v7 + 260);
        v23 = *(_DWORD *)(v7 + 276);
        ZinAneTd<11u>::SetTextureIndPermute(a1, __p);
        *(_OWORD *)__p = *(_OWORD *)(v7 + 280);
        v23 = *(_DWORD *)(v7 + 296);
        ZinAneTd<11u>::SetTextureIdxPermute(a1, __p);
        v12 = *(_DWORD *)(v7 + 192);
      }
      if ((v12 - 3) <= 1)
      {
        v13 = *(_QWORD *)(v7 + 264);
        v14 = *(_QWORD *)(v7 + 272);
        if (*(_QWORD *)(a2 + 2080) < (unint64_t)((v14 - v13) >> 5))
          ZinAssertImpl("Codegen Error: Invalid Texture CropCfg");
        if (v14 != v13)
        {
          v15 = 0;
          v16 = 0;
          do
          {
            ZinAneTd<11u>::SetTextureCropCfg(a1, (_DWORD *)(v13 + v15), v16++);
            v13 = *(_QWORD *)(v7 + 264);
            v15 += 32;
          }
          while (v16 < (*(_QWORD *)(v7 + 272) - v13) >> 5);
        }
        v17 = *(_QWORD *)(v7 + 240);
        v18 = *(_QWORD *)(v7 + 248);
        if (*(_QWORD *)(a2 + 2072) < (unint64_t)((v18 - v17) >> 2))
          ZinAssertImpl("Codegen Error: Invalid Texture CropCoeff");
        if (v18 != v17)
        {
          v19 = 0;
          do
          {
            ZinAneTd<11u>::SetTextureCropCoeff(a1, *(_DWORD *)(v17 + 4 * v19), v19);
            ++v19;
            v17 = *(_QWORD *)(v7 + 240);
          }
          while (v19 < (*(_QWORD *)(v7 + 248) - v17) >> 2);
        }
        LODWORD(__p[0]) = *(_DWORD *)(v7 + 288);
        ZinAneTd<11u>::SetTextureGroupValue(a1, __p);
        LODWORD(__p[0]) = *(_DWORD *)(v7 + 292);
        ZinAneTd<11u>::SetTextureDepthValue(a1, __p);
      }
    }
  }
  return 1;
}

uint64_t ZinAneTd<11u>::HandleL2Hazards(uint64_t a1, uint64_t a2, uint64_t a3, ZinIrOpLayer *a4, _QWORD *a5)
{
  uint64_t v6;
  _BYTE *v7;
  unint64_t i;
  uint64_t InputTensor;
  uint64_t L2SrcDep;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  ZinIrOpLayer *v18;

  v18 = a4;
  v6 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a5, &v18)[3];
  v7 = (_BYTE *)*((_QWORD *)a4 + 33);
  if (*((_QWORD *)a4 + 12) != *((_QWORD *)a4 + 11))
  {
    for (i = 0; i < (uint64_t)(*((_QWORD *)a4 + 12) - *((_QWORD *)a4 + 11)) >> 3; ++i)
    {
      InputTensor = ZinIrOpLayer::GetInputTensor(a4, i);
      if (((*(uint64_t (**)(ZinIrOpLayer *, uint64_t))(*(_QWORD *)a4 + 200))(a4, InputTensor) & 1) == 0
        && ZinIrOpLayer::IsANELayer(a4))
      {
        LODWORD(v18) = 0;
        if (!ZinMemSourceIndexTranslator::GetL2SrcType(a4, i, (int *)&v18))
        {
          L2SrcDep = ZinMirL2Config::GetL2SrcDep((uint64_t)(v7 + 120), (int)v18);
          (*(void (**)(void))(**(_QWORD **)(v6 + 200) + 32))();
          v17 = 0;
          if (GetProgrammedDependencyOffsetAndDimension(L2SrcDep + 8, &v17, (_DWORD *)&v17 + 1))
            return 0;
          if (i)
            v11 = 27;
          else
            v11 = 26;
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), v11, v17);
          (*(void (**)(void))(**(_QWORD **)(v6 + 200) + 32))();
        }
      }
    }
  }
  if (!*(_BYTE *)(v6 + 188))
  {
    if (v7[328])
      v12 = 1;
    else
      v12 = v7[330];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 15, v12);
    if (v7[329])
      v13 = 1;
    else
      v13 = v7[331];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 16, v13);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 17, v7[334]);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 18, v7[335]);
    if (v7[336])
      v14 = 1;
    else
      v14 = v7[338];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 19, v14);
    if (v7[337])
      v15 = 1;
    else
      v15 = v7[339];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 20, v15);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 21, v7[342]);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v6 + 200) + 32))(*(_QWORD *)(v6 + 200), 22, v7[343]);
  }
  return 1;
}

unint64_t ZinAneTd<11u>::SetRAWdmaDependencySrc1(ZinIrHalH13g *a1, int a2, unsigned int a3)
{
  ZinAneTd<11u>::SetTileDmaSrc1DependencyMode((uint64_t)a1, a2);
  if (a2 == 1)
    ZinIrHalH13g::~ZinIrHalH13g(a1);
  return ZinAneTd<11u>::SetTileDmaSrc1DependencyInterval((uint64_t)a1, a3);
}

void ZinAneTd<11u>::SetRAWdmaDependencySrc2(ZinIrHalH13g *a1, int a2)
{
  ZinAneTd<11u>::SetTileDmaSrc1DependencyMode((uint64_t)a1, a2);
  if (a2 == 1)
    ZinIrHalH13g::~ZinIrHalH13g(a1);
  ZinIrHalH13g::~ZinIrHalH13g(a1);
}

uint64_t ZinAneTd<11u>::InitializeKernelDmaSrcConfig(uint64_t a1)
{
  uint64_t i;

  for (i = 0; i != 16; ++i)
    ZinAneTd<11u>::SetKernelDmaSrcCoeffDmaCacheHint(a1, 1, i);
  ZinAneTd<11u>::SetKernelDmaSrcPostScaleDmaCacheHint(a1, 1);
  ZinAneTd<11u>::SetKernelDmaSrcBiasDmaCacheHint(a1, 1);
  ZinAneTd<11u>::SetKernelDmaSrcPaletteLutDmaCacheHint(a1, 1);
  return ZinAneTd<11u>::SetKernelDmaSrcNonLinearLutDmaCacheHint(a1, 1);
}

void ZinAneTd<11u>::HandleKernelDmaSrcConfigAligned(uint64_t *a1, ZinIrOpLayer *a2, _QWORD *a3, ZinIrMemoryPool *a4)
{
  uint64_t v4;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  std::string::size_type size;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  std::string::size_type v23;
  std::string *v24;
  std::string *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string *v30;
  std::string *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  std::string::size_type v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  unint64_t v39;
  std::string v40;
  unsigned __int8 v41;
  std::string v42;

  v4 = *((_QWORD *)a2 + 17);
  if (v4 && *(_QWORD *)(v4 + 784))
  {
    v41 = 0;
    if (ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a2, a4, &v41))
      ZinAssertImpl("Cannot get barid for kernels");
    v39 = *(_QWORD *)(*a3 + 528);
    v8 = (__int128 *)*((_QWORD *)a2 + 17);
    if (*(_BYTE *)(a3[1] + 132))
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v40.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
      }
    }
    else
    {
      ZinIrKernel::GetFinalHash((ZinIrKernel *)v8, &v42);
      v10 = std::string::insert(&v42, 0, "K", 1uLL);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    v12 = *(_QWORD **)(v4 + 784);
    v13 = v12[1];
    v14 = v13 != 0;
    if (v13)
    {
      v15 = ZinDivRoundUp(v13, v39);
      v16 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        size = v40.__r_.__value_.__l.__size_;
      v18 = &v42;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, size + 7);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v18 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v40;
        else
          v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
        memmove(v18, v19, size);
      }
      strcpy((char *)v18 + size, "_actlut");
      ZinAneTd<11u>::SetAlignedKernelNonLinearLut((uint64_t)a1, v16, (uint64_t)&v42, v15);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    v20 = v12[2];
    if (v20)
    {
      v21 = ZinDivRoundUp(v20, v39);
      v22 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        v23 = v40.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v23 + 7);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v42;
      else
        v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if (v23)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v40;
        else
          v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "_pallut");
      ZinAneTd<11u>::SetAlignedKernelPaletteLut((uint64_t)a1, v22, (uint64_t)&v42, v21);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      v14 = 1;
    }
    v26 = v12[3];
    if (v26)
    {
      v27 = ZinDivRoundUp(v26, v39);
      v28 = v41;
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        v29 = v40.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v29 + 6);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v42;
      else
        v30 = (std::string *)v42.__r_.__value_.__r.__words[0];
      if (v29)
      {
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &v40;
        else
          v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
        memmove(v30, v31, v29);
      }
      strcpy((char *)v30 + v29, "_scale");
      ZinAneTd<11u>::SetAlignedKernelPostScale(a1, v28, (uint64_t)&v42, v27);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      v32 = v12[4];
      if (!v32)
        goto LABEL_68;
    }
    else
    {
      v32 = v12[4];
      if (!v32)
      {
        if (!v14)
        {
LABEL_72:
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          return;
        }
LABEL_68:
        ZinAneTd<8u>::SetKernelDmaSrcEnable((uint64_t)a1);
        *((_DWORD *)a1 + 11) = *((_DWORD *)a1 + 11) & 0xFFFFFFDF | (32
                                                                  * **(unsigned __int8 **)(*(_QWORD *)(v4 + 784) + 40));
        if (*(_DWORD *)(*((_QWORD *)a2 + 17) + 176))
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v4 + 784) + 40);
          if (!*(_BYTE *)v38)
            ZinAneTd<8u>::SetAlignedCoeffSizePerCh((uint64_t)a1, *(_QWORD *)(v38 + 8));
        }
        ZinAneTd<11u>::SetAlignedKernelRelocationCommand(a1, v12, v41, (const void **)&v40.__r_.__value_.__l.__data_, *(unsigned __int8 *)(a3[1] + 378));
        goto LABEL_72;
      }
    }
    v33 = ZinDivRoundUp(v32, v39);
    v34 = v41;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v35 = v40.__r_.__value_.__l.__size_;
    v36 = &v42;
    std::string::basic_string[abi:ne180100]((uint64_t)&v42, v35 + 5);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if (v35)
    {
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v40;
      else
        v37 = (std::string *)v40.__r_.__value_.__r.__words[0];
      memmove(v36, v37, v35);
    }
    strcpy((char *)v36 + v35, "_bias");
    ZinAneTd<11u>::SetAlignedKernelBias(a1, v34, (uint64_t)&v42, v33);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    goto LABEL_68;
  }
}

void sub_206FE076C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinAneTd<11u>::HandleKernelDmaSrcConfigCoeffBuffer(uint64_t result, ZinEngineLayerMirInfo **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  MirInfoChannelAssignment *ChannelAssignment;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  char v29;

  v9 = result;
  v10 = *a3;
  v11 = *a5;
  if (*a5 && (v12 = *(_QWORD *)(v11 + 784)) != 0)
  {
    v29 = 0;
    v28 = *(_QWORD *)(v11 + 784);
    v13 = *(_QWORD *)(v12 + 40);
  }
  else
  {
    v28 = 0;
    v13 = 0;
    v29 = 1;
  }
  if (v11)
    v14 = v13 == 0;
  else
    v14 = 1;
  v15 = !v14;
  if (*(_DWORD *)(v10 + 8))
  {
    v16 = 0;
    v17 = *(_QWORD *)(v10 + 528);
    v18 = 40;
    do
    {
      if (v15
        && (ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(a2[33]),
            MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) > v16))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + v18);
        v21 = v20 != 0;
        *a6 |= v21;
        ZinAneTd<10u>::SetKernelDmaSrcCoeffDmaEn(v9, v21, v16);
        if (v20)
        {
          ZinAneTd<8u>::SetKernelDmaSrcEnable(v9);
          v22 = *(_QWORD *)(v13 + 32);
          if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v13 + 40) - v22) >> 3) <= v16)
            ZinAssertImpl("Kernel DMA NE number greater than kernel data prepped\n");
          if (*(_BYTE *)(*a3 + 1255))
          {
            if (*((_BYTE *)a2[33] + 2))
            {
              if (((*((uint64_t (**)(ZinEngineLayerMirInfo **))*a2 + 15))(a2) & 1) != 0)
              {
                v23 = ZinDivRoundUp(*((_QWORD *)a2[33] + 6), v17);
                ZinAneTd<11u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v23, v16);
                LODWORD(v24) = ZinDivRoundUp(*(_QWORD *)(*((_QWORD *)a2[33] + 7) + 8 * v16), v17);
                goto LABEL_32;
              }
              v22 = *(_QWORD *)(v13 + 32);
            }
            v26 = ZinDivRoundUp(*(_QWORD *)(v22 + v18), v17);
            ZinAneTd<11u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v26, v16);
            if ((v29 & 1) != 0 || !*(_BYTE *)(v28 + 1))
              v27 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + v18 - 40);
            else
              v27 = **(_QWORD **)(v13 + 32);
            v24 = v27 / v17;
LABEL_32:
            ZinAneTd<11u>::SetKernelDmaSrcCoeffBaseOffset(v9, v24, v16);
          }
          else
          {
            v25 = ZinDivRoundUp(*(_QWORD *)(v22 + v18), v17);
            ZinAneTd<11u>::SetKernelDmaSrcCoeffMemBufferSize(v9, v25, v16);
          }
          result = ZinAneTd<11u>::SetKernelDmaSrcCoeffDmaCacheHint(v9, *((_DWORD *)a2[33] + 354), v16);
          goto LABEL_23;
        }
      }
      else
      {
        ZinAneTd<10u>::SetKernelDmaSrcCoeffDmaEn(v9, 0, v16);
      }
      result = ZinAneTd<11u>::SetKernelDmaSrcCoeffMemBufferSize(v9, 1u, v16);
LABEL_23:
      ++v16;
      v18 += 56;
    }
    while (v16 < *(unsigned int *)(*a3 + 8));
  }
  return result;
}

BOOL HandlePELayer<11u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ZinIrHalH13g *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  _BOOL8 result;
  uint64_t v15;
  ZinDeQuantLayer *v16;
  ZinDeQuantLayer *v17;
  char v18;
  char v19;
  ZinDeQuantLayer *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v9 = *(ZinIrHalH13g **)(a3 + 200);
  v10 = (_QWORD *)*((_QWORD *)a1 + 33);
  SetPatchSettings<11u>((uint64_t)v9, (uint64_t)(v10 + 15));
  v11 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD))(*(_QWORD *)a1 + 368))(a1, 0);
  ZinAneTd<11u>::SetOrReturnNumGroups((uint64_t)v9, v11);
  if ((PECodegenUtils::HandlePrimarySourceTensor<11u>(a1, a4, a5, v9) & 1) == 0)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    HandlePELayer<17u>();
    return 0;
  }
  if (!PECodegenUtils::HandleSecondarySourceTensor<11u>(a1, (uint64_t)v10, a4, a5, (uint64_t *)v9))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    HandlePELayer<17u>();
    return 0;
  }
  if (!PECodegenUtils::HandleTernarySourceTensor<11u>(a1, (uint64_t)v10, a4, a5, v9))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    HandlePELayer<17u>();
    return 0;
  }
  v12 = *((_QWORD *)a1 + 32);
  if (v12)
    v13 = *(_DWORD *)(*(_QWORD *)(v12 + 64) + 8) == 102;
  else
    v13 = 0;
  v15 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  if ((PECodegenUtils::HandleOutputTensor<11u>(v15, (uint64_t)v10, (_QWORD *)a4, a5, (uint64_t)v9, v13) & 1) != 0)
  {
    if (*(_BYTE *)(a4 + 1584))
    {
      if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 576))(a1))
      {
        v16 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 584))(a1);
        ZinDeQuantLayer::GetScalarZeroPoint(v16);
        ZinAneTd<7u>::SetQuantizationSrc1InputOffset();
      }
      if (*(_BYTE *)(a4 + 1584) && (*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 592))(a1))
      {
        v17 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 600))(a1);
        ZinDeQuantLayer::GetScalarZeroPoint(v17);
        ZinAneTd<7u>::SetQuantizationSrc2InputOffset();
      }
    }
    switch(*(_DWORD *)(*((_QWORD *)a1 + 8) + 8))
    {
      case 'Q':
        v18 = PECodegenUtils::HandlePEElementWiseLayer<11u>(a4, a1, v9);
        goto LABEL_29;
      case 'R':
        if (*(_BYTE *)(a3 + 188))
        {
          v18 = PECodegenUtils::HandlePESecureFlushLayer<11u>((int8x16_t *)v9, *(_DWORD *)(a3 + 192));
LABEL_29:
          v19 = v18;
LABEL_30:
          if (*(_BYTE *)(a4 + 1584) && (*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 672))(a1))
          {
            v20 = (ZinDeQuantLayer *)(*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 768))(a1);
            ZinDeQuantLayer::GetScalarZeroPoint(v20);
            ZinAneTd<7u>::SetPEOutputQuantization();
          }
          if ((v19 & 1) != 0)
          {
            if (!*(_BYTE *)(a4 + 1252))
            {
              if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)a1 + 568))(a1))
              {
                v21 = ZinEngineLayerMirInfo::HasDmaRead((uint64_t)v10, 0);
                v22 = ZinEngineLayerMirInfo::HasDmaRead((uint64_t)v10, 1);
                if (!v21 || (v23 = 0, (v22 & 1) == 0))
                {
                  if (v22)
                    v24 = 2;
                  else
                    v24 = 1;
                  if (v21)
                    v23 = 1;
                  else
                    v23 = v24;
                }
              }
              else
              {
                v23 = 1;
              }
              ZinAneTd<11u>::SetCommonSourceRouting((uint64_t)v9, v23);
            }
            **(_QWORD **)(a3 + 128) = v10[94];
            *(_QWORD *)(*(_QWORD *)(a3 + 128) + 8) = v10[106];
            *(_QWORD *)(a3 + 152) = v10[118];
            return 1;
          }
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          HandlePELayer<17u>();
        }
        else
        {
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          HandlePELayer<11u>(result, v25, v26, v27, v28, v29, v30, v31);
        }
        break;
      case 'S':
        v18 = PECodegenUtils::HandlePEPoolLayer<11u>(a4, a1, (uint64_t)v9);
        goto LABEL_29;
      case 'T':
        v18 = PECodegenUtils::HandlePEGOCLayer<11u>(a4, (uint64_t)a1, (uint64_t)v9);
        goto LABEL_29;
      default:
        v19 = 0;
        goto LABEL_30;
    }
    return 0;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    HandlePELayer<17u>();
    return 0;
  }
  return result;
}

BOOL HandleNELayer<11u>(const ZinIrOpLayer *a1, int a2, ZinAneInstruction *a3, int **a4, ZinIrMemoryPool *a5, uint64_t a6, CFArrayRef *a7)
{
  ZinIrHalH13g *v13;
  const __CFString *v14;
  _BOOL8 result;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  ZinIrKernel *v23;
  uint64_t v24;
  ZinDynamicRange **v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;

  v13 = (ZinIrHalH13g *)*((_QWORD *)a3 + 25);
  v32 = 0;
  if (ZinIrCodeGenGetBarIdForCoeffKDMABlock(a1, a5, &v32)
    || (v31 = 0, ZinIrCodeGenGetBarIdForNonCoeffKDMABlocks(a1, a5, &v31)))
  {
LABEL_3:
    v14 = CFSTR("CodeGenerationFailure");
LABEL_4:
    ZinIrNetworkStatus::SetError(a7, v14);
    return 0;
  }
  v16 = *((_QWORD *)a1 + 17);
  if (v16 && *(_QWORD *)(v16 + 784))
  {
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    v17 = *(_QWORD **)(*((_QWORD *)a1 + 17) + 784);
    if (v17[1])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[2])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[4])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
    if (v17[3])
      ZinIrHalH13g::~ZinIrHalH13g(v13);
  }
  if ((ZinAneInstruction::HandleCommonConfig(a3, a1, (const ZinIrHalParameters *)*a4, a7) & 1) != 0)
  {
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, int **, ZinIrMemoryPool *, ZinAneInstruction *))(*(_QWORD *)v13 + 312))(v13, a1, a4, a5, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("KernelDMASourceAllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(ZinIrHalH13g *, const ZinIrOpLayer *, int *, uint64_t, ZinAneInstruction *))(*(_QWORD *)v13 + 248))(v13, a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("TileDMASourceAllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, int *))(**((_QWORD **)a3 + 25) + 256))(*((_QWORD *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("L2AllocationFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, int *))(**((_QWORD **)a3 + 25) + 264))(*((_QWORD *)a3 + 25), a1, *a4) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("NEConfigFailure");
      goto LABEL_4;
    }
    if (((*(uint64_t (**)(_QWORD, const ZinIrOpLayer *, int *, uint64_t, ZinAneInstruction *))(**((_QWORD **)a3 + 25) + 304))(*((_QWORD *)a3 + 25), a1, *a4, a6, a3) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      v14 = CFSTR("TileDMADestinationAllocationFailure");
      goto LABEL_4;
    }
    if (!ZinAneTd<11u>::ValidateOCGSizes(v13, (uint64_t)a1, *a4))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      goto LABEL_3;
    }
    ZinIrHalH13g::~ZinIrHalH13g(v13);
    if ((*((_DWORD *)v13 + 125) & 3) == 3
      || (v18 = *((_DWORD *)v13 + 234),
          v30 = dword_207AB1EC4[*((_DWORD *)v13 + 125) & 3],
          v19 = *((_DWORD *)v13 + 233) & 3,
          v19 == 3))
    {
      ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      return 0;
    }
    v20 = (char)(v18 >> 5) >> 3;
    v21 = ZinMirPrepareBinaryPoint::CalculateBinaryPointAdjustment(v19, &v30);
    v22 = *((_DWORD *)v13 + 237);
    if (ZinIrOpLayer::IsNELayer(a1) && v21 + v20 + (HIWORD(v22) & 0x1F) >= 0x20u)
    {
      ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        HandleNELayer<17u>();
      return 0;
    }
    v23 = (ZinIrKernel *)*((_QWORD *)a1 + 17);
    if (v23)
    {
      if (ZinIrKernel::HasBias(v23))
      {
        v24 = *((_QWORD *)a1 + 17);
        if (*(_QWORD *)(v24 + 576))
        {
          v25 = (ZinDynamicRange **)(v24 + 576);
          v26 = ldexp(1.0, v21 + v20 + ((int)(*((_DWORD *)v13 + 236) << 11) >> 27));
          if (!ZinIrCodegenValidBiasShift(v25, v26, v27, v28, v29))
          {
            ZinIrNetworkStatus::SetError(a7, CFSTR("NEConfigFailure"));
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              HandleNELayer<17u>();
            return 0;
          }
        }
      }
    }
    if (!*((_BYTE *)*a4 + 1243) || (ZinAneTd<11u>::SetDPE((uint64_t)v13, (uint64_t)a1) & 1) != 0)
      return 1;
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      HandleNELayer<17u>();
      return 0;
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::CodegenIntermediateMCacheDSIDs(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;
  int DSIDFromPriorityHalAndSecureMode;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v31;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  _BOOL4 v41;
  unint64_t v42;
  uint64_t v43;
  MirInfoChannelAssignment *ChannelAssignment;
  int v45;
  uint64_t v46;
  unint64_t v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  void *v51[2];
  char v52;
  __int16 v53;
  __int128 __p;
  uint64_t v55;
  int v56;

  v7 = *a3;
  v8 = *(unsigned __int8 *)(a3[1] + 130);
  v9 = *(_DWORD **)(a2 + 264);
  v10 = v9[358];
  if (v10 == 2)
    goto LABEL_24;
  DSIDFromPriorityHalAndSecureMode = GetDSIDFromPriorityHalAndSecureMode(v10, v7, v8 != 0);
  ZinAneTd<11u>::SetTileDmaSrc1DataSetId((uint64_t)a1, DSIDFromPriorityHalAndSecureMode);
  if (*(_BYTE *)(v7 + 1248))
  {
    std::string::basic_string[abi:ne180100]<0>(v51, &byte_207AF6795);
    v12 = *(_DWORD *)(*(_QWORD *)(a2 + 264) + 1432);
    if (v12 == 1)
    {
      if (*(_BYTE *)(a4 + 10))
      {
        v13 = *(unsigned __int16 *)(a4 + 8);
        goto LABEL_13;
      }
    }
    else
    {
      if (v12)
      {
        v13 = 0;
        goto LABEL_13;
      }
      if (*(_BYTE *)(a4 + 6))
      {
        v13 = *(unsigned __int16 *)(a4 + 4);
LABEL_13:
        ZinAneRelocInfo::ZinAneRelocInfo(&v53, v51, 1088, v13, 0, 0, 0, 0);
        v14 = a1[127];
        if (v14 >= a1[128])
        {
          v17 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v53);
        }
        else
        {
          *(_WORD *)v14 = v53;
          v15 = (std::string *)(v14 + 8);
          if (SHIBYTE(v55) < 0)
          {
            std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
          }
          else
          {
            v16 = __p;
            *(_QWORD *)(v14 + 24) = v55;
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          *(_DWORD *)(v14 + 32) = v56;
          v17 = v14 + 40;
          a1[127] = v14 + 40;
        }
        a1[127] = v17;
        if (SHIBYTE(v55) < 0)
          operator delete((void *)__p);
        if (v52 < 0)
          operator delete(v51[0]);
        v9 = *(_DWORD **)(a2 + 264);
        goto LABEL_24;
      }
    }
    ZinAssertImpl("Missing Bar for MCache");
  }
  v9 = *(_DWORD **)(a2 + 264);
  if (!DSIDFromPriorityHalAndSecureMode && v9[350] == 2)
    return 0;
LABEL_24:
  v18 = v9[359];
  if (v18 != 2)
  {
    v19 = GetDSIDFromPriorityHalAndSecureMode(v18, v7, v8 != 0);
    ZinAneTd<11u>::SetTileDmaSrc2DataSetId((uint64_t)a1, v19);
    if (*(_BYTE *)(v7 + 1248))
    {
      std::string::basic_string[abi:ne180100]<0>(v51, &byte_207AF6795);
      v20 = *(_DWORD *)(*(_QWORD *)(a2 + 264) + 1436);
      if (v20 == 1)
      {
        if (*(_BYTE *)(a4 + 10))
        {
          v21 = *(unsigned __int16 *)(a4 + 8);
          goto LABEL_36;
        }
      }
      else
      {
        if (v20)
        {
          v21 = 0;
          goto LABEL_36;
        }
        if (*(_BYTE *)(a4 + 6))
        {
          v21 = *(unsigned __int16 *)(a4 + 4);
LABEL_36:
          ZinAneRelocInfo::ZinAneRelocInfo(&v53, v51, 1089, v21, 0, 0, 0, 0);
          v22 = a1[127];
          if (v22 >= a1[128])
          {
            v25 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v53);
          }
          else
          {
            *(_WORD *)v22 = v53;
            v23 = (std::string *)(v22 + 8);
            if (SHIBYTE(v55) < 0)
            {
              std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
            }
            else
            {
              v24 = __p;
              *(_QWORD *)(v22 + 24) = v55;
              *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
            }
            *(_DWORD *)(v22 + 32) = v56;
            v25 = v22 + 40;
            a1[127] = v22 + 40;
          }
          a1[127] = v25;
          if (SHIBYTE(v55) < 0)
            operator delete((void *)__p);
          if (v52 < 0)
            operator delete(v51[0]);
          v9 = *(_DWORD **)(a2 + 264);
          goto LABEL_47;
        }
      }
      ZinAssertImpl("Missing Bar for MCache");
    }
    v9 = *(_DWORD **)(a2 + 264);
    if (!v19 && v9[355] == 2)
      return 0;
  }
LABEL_47:
  v26 = v9[360];
  if (v26 != 2)
  {
    v27 = GetDSIDFromPriorityHalAndSecureMode(v26, v7, v8 != 0);
    ZinAneTd<11u>::SetTileDmaDstDataSetId((uint64_t)a1, v27);
    if (*(_BYTE *)(v7 + 1248))
    {
      std::string::basic_string[abi:ne180100]<0>(v51, &byte_207AF6795);
      v28 = *(_DWORD *)(*(_QWORD *)(a2 + 264) + 1440);
      if (v28 == 1)
      {
        if (*(_BYTE *)(a4 + 10))
        {
          v29 = *(unsigned __int16 *)(a4 + 8);
          goto LABEL_59;
        }
      }
      else
      {
        if (v28)
        {
          v29 = 0;
          goto LABEL_59;
        }
        if (*(_BYTE *)(a4 + 6))
        {
          v29 = *(unsigned __int16 *)(a4 + 4);
LABEL_59:
          ZinAneRelocInfo::ZinAneRelocInfo(&v53, v51, 1344, v29, 0, 0, 0, 0);
          v31 = a1[127];
          if (v31 >= a1[128])
          {
            v34 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v53);
          }
          else
          {
            *(_WORD *)v31 = v53;
            v32 = (std::string *)(v31 + 8);
            if (SHIBYTE(v55) < 0)
            {
              std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
            }
            else
            {
              v33 = __p;
              *(_QWORD *)(v31 + 24) = v55;
              *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
            }
            *(_DWORD *)(v31 + 32) = v56;
            v34 = v31 + 40;
            a1[127] = v31 + 40;
          }
          a1[127] = v34;
          if (SHIBYTE(v55) < 0)
            operator delete((void *)__p);
          if (v52 < 0)
            operator delete(v51[0]);
          v9 = *(_DWORD **)(a2 + 264);
          goto LABEL_70;
        }
      }
      ZinAssertImpl("Missing Bar for MCache");
    }
    v9 = *(_DWORD **)(a2 + 264);
    if (!v27 && v9[353] == 2)
      return 0;
  }
LABEL_70:
  v35 = v9[361];
  if (v35 != 2)
  {
    v36 = GetDSIDFromPriorityHalAndSecureMode(v35, v7, v8 != 0);
    v37 = *(_QWORD *)(a2 + 136);
    if (v37 && (v38 = *(_QWORD *)(v37 + 784)) != 0)
      v39 = *(_QWORD *)(v38 + 40);
    else
      v39 = 0;
    v40 = !v37 || v39 == 0;
    v41 = !v40;
    if (*(_DWORD *)(v7 + 8))
    {
      v42 = 0;
      v43 = 40;
      do
      {
        if (v41)
        {
          ChannelAssignment = (MirInfoChannelAssignment *)ZinEngineLayerMirInfo::GetChannelAssignment(*(ZinEngineLayerMirInfo **)(a2 + 264));
          if (MirInfoChannelAssignment::GetNumNeededNEs(ChannelAssignment) > v42)
          {
            if (*(_QWORD *)(*(_QWORD *)(v39 + 32) + v43))
            {
              ZinAneTd<10u>::SetKernelDmaSrcDataSetId((uint64_t)a1, v36, v42);
              if (*(_BYTE *)(v7 + 1248))
              {
                std::string::basic_string[abi:ne180100]<0>(v51, &byte_207AF6795);
                v45 = *(_DWORD *)(*(_QWORD *)(a2 + 264) + 1444);
                if (v45 == 1)
                {
                  if (!*(_BYTE *)(a4 + 10))
LABEL_107:
                    ZinAssertImpl("Missing Bar for MCache", &__p);
                  v46 = *(unsigned __int16 *)(a4 + 8);
                }
                else if (v45)
                {
                  v46 = 0;
                }
                else
                {
                  if (!*(_BYTE *)(a4 + 6))
                    goto LABEL_107;
                  v46 = *(unsigned __int16 *)(a4 + 4);
                }
                ZinAneRelocInfo::ZinAneRelocInfo(&v53, v51, ((_DWORD)v42 + 1606) & 0x3FFFFFFF, v46, 0, 0, 0, 0);
                v47 = a1[127];
                if (v47 >= a1[128])
                {
                  v50 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>(a1 + 126, (uint64_t)&v53);
                }
                else
                {
                  *(_WORD *)v47 = v53;
                  v48 = (std::string *)(v47 + 8);
                  if (SHIBYTE(v55) < 0)
                  {
                    std::string::__init_copy_ctor_external(v48, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
                  }
                  else
                  {
                    v49 = __p;
                    *(_QWORD *)(v47 + 24) = v55;
                    *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
                  }
                  *(_DWORD *)(v47 + 32) = v56;
                  v50 = v47 + 40;
                  a1[127] = v47 + 40;
                }
                a1[127] = v50;
                if (SHIBYTE(v55) < 0)
                  operator delete((void *)__p);
                if (v52 < 0)
                  operator delete(v51[0]);
              }
            }
          }
        }
        ++v42;
        v43 += 56;
      }
      while (v42 < *(unsigned int *)(v7 + 8));
    }
  }
  return 1;
}

void sub_206FE1884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v23 + 1016) = v24;
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t SetPatchSettings<11u>(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  int v5;
  _BOOL4 v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;

  v4 = ZinAneTd<11u>::SetPatchHeight(a1, *(_QWORD *)(a2 + 128));
  v5 = v4 & ZinAneTd<11u>::SetPatchWidth(a1, *(_QWORD *)(a2 + 120));
  v6 = ZinAneTd<11u>::SetTileHeight(a1, *(_QWORD *)(a2 + 80));
  v7 = v5 & v6 & ZinAneTd<11u>::SetTileOverlap(a1, *(_QWORD *)(a2 + 96));
  v8 = ZinAneTd<11u>::SetTileOverlapPadBottom(a1, *(_QWORD *)(a2 + 104));
  v9 = v7 & v8 & ZinAneTd<11u>::SetTileOverlapPadTop(a1, *(_QWORD *)(a2 + 88));
  ZinAneTd<7u>::SetTileOverlapPadReflect(a1, *(unsigned __int8 *)(a2 + 112));
  return v9;
}

uint64_t PECodegenUtils::HandlePrimarySourceTensor<11u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, ZinIrHalH13g *a4)
{
  ZinIrTensor *InputTensor;
  unint64_t *v9;
  uint64_t result;
  _BOOL8 v11;
  int *TileSrc;
  int L2RdMode;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  const void *v18;
  void *v19;
  char v20;
  int v21;
  _QWORD v22[5];
  uint64_t v23;

  v23 = 0;
  InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 0);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)a1 + 376))(v22, a1);
  v21 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 0, &v21))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      PECodegenUtils::HandlePrimarySourceTensor<17u>();
      return 0;
    }
    return result;
  }
  v11 = v21 != 0;
  ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, 0, &v23, v9);
  ZinAneTd<11u>::SetOrReturnWin((uint64_t)a4, v22[3]);
  ZinAneTd<11u>::SetOrReturnHin((uint64_t)a4, v22[2]);
  ZinAneTd<11u>::SetOrReturnDin((uint64_t)a4, v22[4]);
  ZinAneTd<11u>::SetOrReturnCin((uint64_t)a4, v22[1]);
  TileSrc = (int *)ZinMirL2Config::GetTileSrc(*((_QWORD *)a1 + 33) + 120, v21);
  ZinAneTd<11u>::SetCommonInFmt((uint64_t)a4, *TileSrc);
  L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(*((_QWORD *)a1 + 33), v21);
  ZinAneTd<11u>::SetL2Src1SourceType((uint64_t)a4, L2RdMode);
  if (!*((_QWORD *)a1 + 25))
  {
    v15 = 0;
    goto LABEL_8;
  }
  v14 = *((_QWORD *)a1 + 24);
  v15 = v14 == 0;
  if (v14 != 1)
  {
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  v16 = 1;
LABEL_9:
  if (!ZinEngineLayerMirInfo::HasDmaRead(*((_QWORD *)a1 + 33), v21))
    return ZinCodegen::SetPrimaryL2SourceBuffer<11u>(a2, (uint64_t)a1, a4);
  v17 = v23;
  v18 = (const void *)*((_QWORD *)a1 + (int)v23 + 30);
  v19 = v18
  if ((v15 | v16) == 1)
  {
    v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 25) + 304))(*((_QWORD *)a1 + 25));
    v17 = v23;
  }
  else
  {
    v20 = 0;
  }
  result = ZinCodegen::SetPrimarySourceDMA<11u>(InputTensor, (uint64_t *)a4, *((_QWORD *)a1 + 33), v17, v11, a3, *(_QWORD *)(a2 + 528), *(_QWORD *)(a2 + 560), v15, v16, v20, (uint64_t)v19);
  if ((_DWORD)result)
    return ZinCodegen::SetPrimaryL2SourceBuffer<11u>(a2, (uint64_t)a1, a4);
  return result;
}

BOOL PECodegenUtils::HandleSecondarySourceTensor<11u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _BOOL8 result;
  ZinIrTensor *InputTensor;
  unint64_t *v12;
  _BOOL8 v13;
  int v14;
  int *TileSrc;
  int L2RdMode;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  int v21;
  char v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;

  v29 = a5;
  if (*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11) < 0x10uLL)
    return 1;
  v28 = 0;
  InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 1uLL);
  v27 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 1uLL, &v27))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    PECodegenUtils::HandlePrimarySourceTensor<17u>();
    return 0;
  }
  v13 = v27 != 0;
  ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, (const ZinANELayer *)1, &v28, v12);
  v14 = v27;
  if (v27 == 1)
  {
    TileSrc = (int *)ZinMirL2Config::GetTileSrc(a2 + 120, 1);
    ZinAneTd<11u>::SetCommonSrc2InFmt((uint64_t)a5, *TileSrc);
    ZinAneTd<11u>::SetPESecondSource((uint64_t)a5, 2);
    L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2, v27);
    ZinAneTd<11u>::SetL2Src2SourceType((uint64_t)a5, L2RdMode);
    v14 = v27;
  }
  if (v14 == 2)
    v17 = 0;
  else
    v17 = ZinEngineLayerMirInfo::HasDmaRead(a2, v14);
  v18 = *((_QWORD *)a1 + 25);
  if (!v18)
  {
    v20 = 0;
LABEL_16:
    v21 = 0;
    if (!v17)
      goto LABEL_28;
    goto LABEL_17;
  }
  v19 = *((_QWORD *)a1 + 24);
  v20 = v19 == 0;
  if (v19 != 1)
    goto LABEL_16;
  v21 = 1;
  if (!v17)
    goto LABEL_28;
LABEL_17:
  v26 = v13;
  if (v20 | v21)
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 304))(v18);
  else
    v22 = 0;
  v23 = v28;
  v24 = (void *)*((_QWORD *)a1 + (int)v28 + 30);
  if (v21)
  {
    if (v24)
    if ((ZinCodegen::SetPrimarySourceDMA<11u>(InputTensor, a5, a2, v23, v26, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), v20, 1, v22, (uint64_t)v24) & 1) == 0)return 0;
  }
  else
  {
    if (v24)
    v25 = ZinCodegen::SetSecondarySourceDMA<11u>(InputTensor, (uint64_t)a5, a2, v23, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), v20, 0, v22, (uint64_t)v24);
    result = 0;
    if (!v25)
      return result;
  }
LABEL_28:
  if (v27 != 2)
    return v27 != 1 || ZinCodegen::SetSecondaryL2SourceBuffer<11u>(a3, a1, (ZinIrHalH13g *)a5);
  if (!*(_BYTE *)(a3 + 1130))
    ZinAssertImpl("Error: PE indexing is not supported");
  result = PECodegenUtils::HandlePEIndexingBuffer<11u>((uint64_t)InputTensor, a3, a2, (uint64_t *)&v29);
  if (result)
    return 1;
  return result;
}

BOOL PECodegenUtils::HandleTernarySourceTensor<11u>(ZinIrOpLayer *a1, uint64_t a2, uint64_t a3, uint64_t a4, ZinIrHalH13g *a5)
{
  _BOOL8 result;
  ZinIrTensor *InputTensor;
  unint64_t *v12;
  int *TileSrc;
  int L2RdMode;
  uint64_t v15;
  void *v16;
  BOOL v17;
  int v18;
  uint64_t v19;

  if (*((_QWORD *)a1 + 12) - *((_QWORD *)a1 + 11) < 0x18uLL)
    return 1;
  v19 = 0;
  InputTensor = (ZinIrTensor *)ZinIrOpLayer::GetInputTensor(a1, 2uLL);
  v18 = 0;
  if (ZinMemSourceIndexTranslator::GetL2SrcType(a1, 2uLL, &v18))
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePrimarySourceTensor<17u>();
      return 0;
    }
  }
  else
  {
    ZinMemSourceIndexTranslator::GetDMASrcIndex(a1, (const ZinANELayer *)2, &v19, v12);
    if (v18 == 1)
    {
      TileSrc = (int *)ZinMirL2Config::GetTileSrc(a2 + 120, 1);
      ZinAneTd<11u>::SetCommonSrc2InFmt((uint64_t)a5, *TileSrc);
      L2RdMode = ZinEngineLayerMirInfo::GetL2RdMode(a2, v18);
      ZinAneTd<11u>::SetL2Src2SourceType((uint64_t)a5, L2RdMode);
    }
    if (*((_QWORD *)a1 + 25) && *((_QWORD *)a1 + 24) == 1)
    {
      v15 = v19;
      v16 = (void *)*((_QWORD *)a1 + (int)v19 + 30);
      if (v16)
      v17 = ZinCodegen::SetSecondarySourceDMA<11u>(InputTensor, (uint64_t)a5, a2, v15, a4, *(_QWORD *)(a3 + 528), *(_QWORD *)(a3 + 560), 0, 1, 1, (uint64_t)v16);
      result = 0;
      if (v17)
        return 1;
    }
    else
    {
      if (v18 != 1)
        return 1;
      result = ZinCodegen::SetSecondaryL2SourceBuffer<11u>(a3, a1, a5);
      if (result)
        return 1;
    }
  }
  return result;
}

uint64_t PECodegenUtils::HandleOutputTensor<11u>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12;
  unint64_t v13;
  uint64_t L2WrSymbol;
  uint64_t NumNeededNEs;
  uint64_t OCGSize;
  uint64_t v17;
  __int128 v19;

  v12 = *(_DWORD *)(a1 + 88);
  ZinAneTd<11u>::SetOrReturnWout(a5, *(_QWORD *)(a1 + 72));
  ZinAneTd<11u>::SetOrReturnHout(a5, *(_QWORD *)(a1 + 64));
  ZinAneTd<11u>::SetOrReturnDout(a5, *(_QWORD *)(a1 + 80));
  ZinAneTd<11u>::SetOrReturnCout(a5, *(_QWORD *)(a1 + 56));
  ZinAneTd<11u>::SetCommonOutFmt(a5, v12);
  ZinAneTd<11u>::SetL2ResultType(a5, *(_DWORD *)(a2 + 1632));
  if ((*(_DWORD *)(a2 + 1632) - 1) <= 1
    && !ZinCodegen::SetResultDMA<11u>((ZinIrTensor *)a1, (uint64_t *)a5, a2, a4, a3[66], a3[70], a6))
  {
    return 0;
  }
  v13 = *(_QWORD *)(ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2) + 16) % a3[51] / a3[52];
  *(_DWORD *)(a5 + 848) = *(_DWORD *)(a5 + 848) & 0xFFE0000F | (16 * (v13 & 0x1FFFF));
  if (!CheckRegValueRange(v13, (unsigned int *)(*(_QWORD *)(a5 + 1040) + 384)))
    return 0;
  *(_DWORD *)(a5 + 852) = *(_DWORD *)(a5 + 852) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 280) & 0x1FFFF));
  if (!CheckRegValueRange(*(_QWORD *)(a2 + 280), (unsigned int *)(*(_QWORD *)(a5 + 1040) + 392)))
    return 0;
  *(_DWORD *)(a5 + 864) = *(_DWORD *)(a5 + 864) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 288) & 0x1FFFF));
  if (!CheckRegValueRange(*(_QWORD *)(a2 + 288), (unsigned int *)(*(_QWORD *)(a5 + 1040) + 416)))
    return 0;
  *(_DWORD *)(a5 + 860) = *(_DWORD *)(a5 + 860) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 296) & 0x1FFFF));
  if (!CheckRegValueRange(*(_QWORD *)(a2 + 296), (unsigned int *)(*(_QWORD *)(a5 + 1040) + 408)))
    return 0;
  *(_DWORD *)(a5 + 856) = *(_DWORD *)(a5 + 856) & 0xFFE0000F | (16 * (*(_DWORD *)(a2 + 272) & 0x1FFFF));
  if (!CheckRegValueRange(*(_QWORD *)(a2 + 272), (unsigned int *)(*(_QWORD *)(a5 + 1040) + 400)))
    return 0;
  L2WrSymbol = ZinEngineLayerMirInfo::GetL2WrSymbol((ZinEngineLayerMirInfo *)a2);
  v19 = *(_OWORD *)(L2WrSymbol + 520);
  NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)&v19);
  ZinAneTd<4u>::SetL2ResultWrapAddr(a5, NumNeededNEs);
  OCGSize = MirInfoChannelAssignment::GetOCGSize((MirInfoChannelAssignment *)&v19);
  ZinAneTd<4u>::SetL2ResultWrapAddrOffset(a5, OCGSize);
  v17 = ZinCodegen::SetL2ResultWrapInfo<11u>(a5, L2WrSymbol);
  if ((_DWORD)v17)
    ZinAneTd<4u>::SetL2OutputCropOffsetXLSBs(a5, *(_QWORD *)(a2 + 320));
  return v17;
}

uint64_t PECodegenUtils::HandlePEElementWiseLayer<11u>(uint64_t a1, ZinCodegen *this, ZinIrHalH13g *a3)
{
  int HWTaskType;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int Dout;
  int Wout;
  int Hin;
  int Hout;
  int Cin;
  int Cout;
  int Din;
  int v28;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  _BYTE v35[24];
  unint64_t v36;

  HWTaskType = ZinCodegen::GetHWTaskType(this, this);
  ZinAneTd<11u>::SetCommonTaskType((uint64_t)a3, HWTaskType);
  v7 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 608))(this);
  ZinAneTd<11u>::SetPESrc1ReLu((uint64_t)a3, v7);
  v8 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 616))(this);
  ZinAneTd<11u>::SetPESrc2ReLu((uint64_t)a3, v8);
  v9 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 640))(this);
  ZinAneTd<11u>::SetPESrc1Transpose((uint64_t)a3, v9);
  v10 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 648))(this);
  ZinAneTd<11u>::SetPESrc2Transpose((uint64_t)a3, v10);
  if ((*(unsigned int (**)(ZinCodegen *))(*(_QWORD *)this + 656))(this)
    && *(_QWORD *)((*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 696))(this) + 64))
  {
    v11 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 696))(this);
    ZinAneTd<11u>::SetPESrc1Broadcast((uint64_t)a3, *(_QWORD *)(v11 + 64) + 16);
  }
  if ((*(unsigned int (**)(ZinCodegen *))(*(_QWORD *)this + 664))(this)
    && *(_QWORD *)((*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 704))(this) + 64))
  {
    v12 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 704))(this);
    ZinAneTd<11u>::SetPESrc2Broadcast((uint64_t)a3, *(_QWORD *)(v12 + 64) + 16, 0);
  }
  if (*((_QWORD *)this + 57))
  {
    ZinIrHalH13g::~ZinIrHalH13g(a3);
    ZinIrHalH13g::~ZinIrHalH13g(a3);
    v13 = *((_QWORD *)this + 59);
    if (v13 && *(_QWORD *)(v13 + 64))
      ZinIrHalH13g::~ZinIrHalH13g(a3);
    ZinIrHalH13g::~ZinIrHalH13g(a3);
  }
  ZinIrScaledEWInfo::ZinIrScaledEWInfo((uint64_t)&v34, 0, 0, 0, 1.0, 1.0, 0.0);
  v14 = *((_QWORD *)this + 60);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 64);
    *(_DWORD *)v35 = *(_DWORD *)(v15 + 8);
    v16 = *(_WORD *)(v15 + 28);
    *(_OWORD *)&v35[4] = *(_OWORD *)(v15 + 12);
    *(_WORD *)&v35[20] = v16;
    v17 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)this + 568))(this);
  }
  else
  {
    v17 = 0;
  }
  ZinAneTd<11u>::SetPEBias((uint64_t)a3, *(float *)&v35[16]);
  ZinAneTd<11u>::SetPEScale((uint64_t)a3, *(float *)&v35[12]);
  ZinAneTd<11u>::SetPEPreScale((uint64_t)a3, *(float *)&v35[8]);
  if (!ZinAneTd<11u>::SetPEOperationMode((uint64_t)a3, *(int *)&v35[4]))
  {
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v34);
    return 0;
  }
  ZinAneTd<11u>::SetPEFirstSource((uint64_t)a3, v35[20] == 0);
  if (v35[21])
    v18 = 3;
  else
    v18 = 2;
  if (v17)
    v19 = v18;
  else
    v19 = 0;
  ZinAneTd<11u>::SetPESecondSource((uint64_t)a3, v19);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v34);
  if (!PECodegenUtils::HandlePECommonPostOps<11u>(a1, (uint64_t)a3, this))
    return 0;
  (*(void (**)(uint64_t *__return_ptr, ZinCodegen *))(*(_QWORD *)this + 384))(&v34, this);
  ZinAneTd<11u>::SetOrReturnHout((uint64_t)a3, *(unint64_t *)&v35[8]);
  ZinAneTd<11u>::SetOrReturnWout((uint64_t)a3, *(unint64_t *)&v35[16]);
  ZinAneTd<11u>::SetOrReturnCout((uint64_t)a3, *(unint64_t *)v35);
  ZinAneTd<11u>::SetOrReturnDout((uint64_t)a3, v36);
  v20 = (uint64_t)a3 + 8;
  Dout = ZinGetRegisterProgramming<7u>::GetDout(v20);
  Wout = ZinGetRegisterProgramming<11u>::GetWout(v20);
  Hin = ZinGetRegisterProgramming<11u>::GetHin(v20);
  Hout = ZinGetRegisterProgramming<11u>::GetHout(v20);
  Cin = ZinGetRegisterProgramming<11u>::GetCin(v20);
  Cout = ZinGetRegisterProgramming<11u>::GetCout(v20);
  Din = ZinGetRegisterProgramming<11u>::GetDin(v20);
  v28 = ZinGetRegisterProgramming<11u>::GetDout(v20);
  v31 = Dout == Wout && Hin == Hout && Cin == Cout && Din == v28;
  v32 = v31;
  if (!v31 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    PECodegenUtils::HandlePEElementWiseLayer<17u>();
  return v32;
}

void sub_206FE25D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)va);
  _Unwind_Resume(a1);
}

uint64_t PECodegenUtils::HandlePEGOCLayer<11u>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const ZinANELayer *v6;
  uint64_t v7;
  int HWTaskType;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  __n128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int Dout;
  int Wout;
  int Hin;
  int Hout;
  int Cin;
  int Cout;
  int Din;
  int v39;
  BOOL v42;
  void *v44[5];
  void *__p;
  void *v46;
  uint64_t v47;

  __p = 0;
  v46 = 0;
  v47 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 3);
  v7 = *(_QWORD *)(a2 + 440);
  if (v7)
  {
    HWTaskType = ZinCodegen::GetHWTaskType((ZinCodegen *)a2, v6);
    ZinAneTd<11u>::SetCommonTaskType(a3, HWTaskType);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 608))(a2);
    ZinAneTd<11u>::SetPESrc1ReLu(a3, v9);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 616))(a2);
    ZinAneTd<11u>::SetPESrc2ReLu(a3, v10);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 640))(a2);
    ZinAneTd<11u>::SetPESrc1Transpose(a3, v11);
    v12 = *(_QWORD *)(v7 + 64);
    ZinAneTd<11u>::SetPESrc2Transpose(a3, *(unsigned __int8 *)(v12 + 80));
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 656))(a2)
      && *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 696))(a2) + 64))
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 696))(a2);
      ZinAneTd<11u>::SetPESrc1Broadcast(a3, *(_QWORD *)(v13 + 64) + 16);
    }
    if (*(_QWORD *)(v12 + 64))
      ZinAneTd<11u>::SetPESrc2Broadcast(a3, v12 + 40, 1);
    v14 = 0;
    v15 = *(_QWORD *)(a2 + 440);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 64);
      if (v16)
      {
        ZinAneTd<11u>::SetPEPreScale(a3, *(float *)(v16 + 12));
        ZinAneTd<11u>::SetPEFirstSource(a3, *(_BYTE *)(v16 + 16) == 0);
        if (*(_BYTE *)(v16 + 17))
          v17 = 3;
        else
          v17 = 2;
        ZinAneTd<11u>::SetPESecondSource(a3, v17);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 792))(a2) & 1) != 0)
        {
          v18 = 1;
        }
        else
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 800))(a2))
          {
LABEL_21:
            if (*(_BYTE *)(a1 + 1129))
              PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<11u>(a3, (ZinPELayer *)a2);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 680))(a2))
            {
              v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 776))(a2);
              v28.n128_u64[0] = ZinAneTd<11u>::SetPEOutputReLU(a3, (_DWORD *)(v29 + 192));
            }
            v30 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a2 + 408))(a2, v28);
            ZinAneTd<11u>::SetPEOutputCtoW(a3, v30);
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 384))(v44, a2);
            ZinAneTd<11u>::SetOrReturnHout(a3, (unint64_t)v44[2]);
            ZinAneTd<11u>::SetOrReturnWout(a3, (unint64_t)v44[3]);
            ZinAneTd<11u>::SetOrReturnCout(a3, (unint64_t)v44[1]);
            ZinAneTd<11u>::SetOrReturnDout(a3, (unint64_t)v44[4]);
            v31 = a3 + 8;
            Dout = ZinGetRegisterProgramming<7u>::GetDout(a3 + 8);
            Wout = ZinGetRegisterProgramming<11u>::GetWout(v31);
            Hin = ZinGetRegisterProgramming<11u>::GetHin(v31);
            Hout = ZinGetRegisterProgramming<11u>::GetHout(v31);
            Cin = ZinGetRegisterProgramming<11u>::GetCin(v31);
            Cout = ZinGetRegisterProgramming<11u>::GetCout(v31);
            Din = ZinGetRegisterProgramming<11u>::GetDin(v31);
            v39 = ZinGetRegisterProgramming<11u>::GetDout(v31);
            v42 = Dout == Wout && Hin == Hout && Cin == Cout && Din == v39;
            v14 = v42;
            if (!v42 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              PECodegenUtils::HandlePEElementWiseLayer<17u>();
            goto LABEL_40;
          }
          v27 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 816))(a2) + 192) - 25;
          if (v27 >= 6)
            ZinAssertImpl("Error: Invalid non linear mode");
          v18 = dword_207AB1EAC[v27];
        }
        ZinAneTd<11u>::SetPECondition(a3, v18);
        goto LABEL_21;
      }
    }
  }
  else
  {
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      PECodegenUtils::HandlePEGOCLayer<11u>(v19, v20, v21, v22, v23, v24, v25, v26);
    v14 = 0;
  }
LABEL_40:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_206FE2974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL PECodegenUtils::HandlePEPoolLayer<11u>(uint64_t a1, ZinCodegen *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  const ZinANELayer *v8;
  int v9;
  int v10;
  uint64_t v11;
  int HWTaskType;
  int v13;
  unsigned int v14;
  int v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = *(_QWORD *)(*((_QWORD *)a2 + 54) + 64);
  if (ZinAneTd<11u>::SetCommonConvCfgKw(a3, *(_QWORD *)(v6 + 16))
    && ZinAneTd<11u>::SetCommonConvCfgKh(a3, *(_QWORD *)(v6 + 24))
    && ZinAneTd<11u>::SetCommonConvCfgSx(a3, *(int *)(v6 + 40))
    && ZinAneTd<11u>::SetCommonConvCfgSy(a3, *(int *)(v6 + 44))
    && ZinAneTd<11u>::SetCommonConvCfgOx(a3, 1uLL)
    && ZinAneTd<11u>::SetCommonConvCfgOy(a3, 1uLL)
    && (*(_DWORD *)(a3 + 524) = *(_DWORD *)(a3 + 524) & 0xFFC1FFFF | ((*(_DWORD *)(v6 + 64) & 0x1F) << 17),
        CheckRegValueRange(*(int *)(v6 + 64), (unsigned int *)(*(_QWORD *)(a3 + 1040) + 104)))
    && (*(_DWORD *)(a3 + 524) = *(_DWORD *)(a3 + 524) & 0xF83FFFFF | ((*(_DWORD *)(v6 + 72) & 0x1F) << 22),
        CheckRegValueRange(*(int *)(v6 + 72), (unsigned int *)(*(_QWORD *)(a3 + 1040) + 96))))
  {
    if ((*(unsigned int (**)(ZinCodegen *))(*(_QWORD *)a2 + 608))(a2))
    {
      v7 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)a2 + 608))(a2);
      ZinAneTd<11u>::SetPESrc1ReLu(a3, v7);
    }
    if ((*(unsigned int (**)(ZinCodegen *))(*(_QWORD *)a2 + 568))(a2))
    {
      v9 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)a2 + 616))(a2);
      ZinAneTd<11u>::SetPESrc2ReLu(a3, v9);
      v10 = (*(uint64_t (**)(ZinCodegen *))(*(_QWORD *)a2 + 648))(a2);
      ZinAneTd<11u>::SetPESrc2Transpose(a3, v10);
    }
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 54) + 64);
    HWTaskType = ZinCodegen::GetHWTaskType(a2, v8);
    ZinAneTd<11u>::SetCommonTaskType(a3, HWTaskType);
    ZinAneTd<11u>::SetPEFirstSource(a3, 1);
    if (*(_BYTE *)(v11 + 116))
      ZinAneTd<11u>::SetPESecondSource(a3, 2);
    ZinAneTd<11u>::SetPEPreScale(a3, *(float *)(v11 + 112));
    v13 = *(_DWORD *)(v11 + 104);
    if (v13 == 2)
    {
      v14 = *(_DWORD *)(a3 + 904) & 0xFFFFFFFC | (*(_BYTE *)(v11 + 108) == 0);
      v15 = 1;
      goto LABEL_27;
    }
    if (v13 == 1)
    {
      if (*(_DWORD *)(v11 + 100) == 4)
      {
        v14 = *(_DWORD *)(a3 + 904) | 3;
        v15 = 4;
        goto LABEL_27;
      }
      v40 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v40)
        PECodegenUtils::HandlePEPoolLayer<11u>(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else if (v13)
    {
      v24 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v24)
        PECodegenUtils::HandlePEPoolLayer<11u>(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      if (*(_DWORD *)(v11 + 100) == 2)
      {
        v14 = *(_DWORD *)(a3 + 904) & 0xFFFFFFFC | 2;
        v15 = 2;
LABEL_27:
        *(_DWORD *)(a3 + 904) = v14;
        ZinAneTd<11u>::SetPaddingMode(a3, v15, 0);
        PECodegenUtils::HandlePECommonPostOps<11u>(a1, a3, a2);
        return 1;
      }
      v32 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v32)
        PECodegenUtils::HandlePEPoolLayer<11u>(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePEPoolLayer<11u>(result, v48, v49, v50, v51, v52, v53, v54);
      return 0;
    }
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePEPoolLayer<11u>(result, v17, v18, v19, v20, v21, v22, v23);
      return 0;
    }
  }
  return result;
}

uint64_t PECodegenUtils::HandlePESecureFlushLayer<11u>(int8x16_t *a1, int a2)
{
  int8x16_t v4;
  uint64_t result;
  int8x16_t *v6;
  int v7;
  int v8;

  a1[34].i32[1] = a1[34].i32[1] & 0xFFFFFF8F | 0x20;
  ZinAneTd<11u>::SetCommonSrc2InFmt((uint64_t)a1, 2);
  ZinAneTd<11u>::SetNEOcgSize((uint64_t)a1, 3);
  ZinAneTd<8u>::SetKernelDmaSrcKid((uint64_t)a1, 0);
  ZinAneTd<8u>::SetKernelDmaSrcNoReuseHint((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src1ChannelStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src1DepthStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src1GroupStride((uint64_t)a1, 0);
  a1[50].i32[3] &= 0xFFE0000F;
  ZinAneTd<11u>::SetL2Src2ChannelStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src2DepthStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetL2Src2GroupStride((uint64_t)a1, 0);
  a1[52].i32[0] &= 0xFFE0000F;
  ZinAneTd<11u>::SetKernelFmt((uint64_t)a1, 2);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)a1);
  ZinAneTd<11u>::SetKernelMode((uint64_t)a1, 0);
  ZinAneTd<11u>::SetOpMode((uint64_t)a1, 0);
  ZinAneTd<11u>::SetNEPostScale((uint64_t)a1, 0, 1);
  a1[56].i32[2] &= 0xFFF3FFFF;
  ZinAneTd<11u>::SetPatchHeight((uint64_t)a1, 1uLL);
  ZinAneTd<11u>::SetTileDmaDstDepthStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaDstGroupStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaDstChannelStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaDstRowStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaSrc1CacheHint((uint64_t)a1, 1, 1, 1);
  ZinAneTd<11u>::SetTileDmaSrc2CacheHint((uint64_t)a1, 1, 1, 1);
  ZinAneTd<11u>::SetTileDmaSrc1DepthStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaSrc1GroupStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaSrc1ChannelStride((uint64_t)a1, 0);
  ZinAneTd<11u>::SetTileDmaSrc1RowStride((uint64_t)a1, 0);
  v4.i64[0] = 0x3F0000003FLL;
  v4.i64[1] = 0x3F0000003FLL;
  a1[39] = vandq_s8(a1[39], v4);
  a1[36].i32[0] |= 1u;
  ZinAneTd<11u>::SetTileDmaSrc1Interleave((uint64_t)a1, 8u);
  a1[41].i32[0] = a1[41].i32[0] & 0xFFFFCFFF | 0x1000;
  a1[60].i32[0] &= ~0x1000000u;
  a1[62].i32[0] = a1[62].i32[0] & 0xF0CFCFFF | 0x8100000;
  ZinAneTd<11u>::SetL2Src1Interleave((uint64_t)a1, 8u);
  ZinAneTd<11u>::SetL2Src1SourceType((uint64_t)a1, 2);
  a1[52].i32[3] = a1[52].i32[3] & 0xFFFFFFFC | 1;
  (*(void (**)(int8x16_t *, uint64_t, _QWORD))(a1->i64[0] + 32))(a1, 18, 0);
  (*(void (**)(int8x16_t *, uint64_t, _QWORD))(a1->i64[0] + 32))(a1, 17, 0);
  (*(void (**)(int8x16_t *, uint64_t, _QWORD))(a1->i64[0] + 32))(a1, 22, 0);
  (*(void (**)(int8x16_t *, uint64_t, _QWORD))(a1->i64[0] + 32))(a1, 21, 0);
  (*(void (**)(int8x16_t *, uint64_t, _QWORD))(a1->i64[0] + 32))(a1, 16, 0);
  (*(void (**)(int8x16_t *, uint64_t, _QWORD))(a1->i64[0] + 32))(a1, 15, 0);
  (*(void (**)(int8x16_t *, uint64_t, _QWORD))(a1->i64[0] + 32))(a1, 20, 0);
  (*(void (**)(int8x16_t *, uint64_t, _QWORD))(a1->i64[0] + 32))(a1, 19, 0);
  if (a2 == 2)
  {
    ZinAneTd<11u>::SetOrReturnHin((uint64_t)a1, 4uLL);
    ZinAneTd<11u>::SetOrReturnWin((uint64_t)a1, 0x10uLL);
    ZinAneTd<11u>::SetOrReturnHout((uint64_t)a1, 4uLL);
    ZinAneTd<11u>::SetOrReturnWout((uint64_t)a1, 0x10uLL);
    ZinAneTd<11u>::SetPatchHeight((uint64_t)a1, 2uLL);
    ZinAneTd<11u>::SetTileHeight((uint64_t)a1, 4u);
    a1[52].i32[3] = a1[52].i32[3] & 0xFFFFF0F7 | 0x300;
    a1[53].i32[2] = a1[53].i32[2] & 0xFFE0000F | 0x10;
    a1[50].i32[3] = a1[50].i32[3] & 0xFFE0000F | 0x10;
    ZinAneTd<11u>::SetL2Src1Interleave((uint64_t)a1, 3u);
    a1[62].i32[0] = a1[62].i32[0] & 0xF0FFFFFF | 0x3000000;
    v7 = 64;
    a1[61].i32[0] = a1[61].i32[0] & 0x3F | 0x40;
    ZinAneTd<11u>::SetTileDmaSrc1Interleave((uint64_t)a1, 3u);
    a1[41].i32[0] &= 0xFFFFCFFF;
    v6 = (int8x16_t *)((char *)a1 + 600);
    v8 = 63;
  }
  else if (a2 == 1)
  {
    v6 = a1 + 41;
    v7 = 1;
    ZinAneTd<11u>::SetOrReturnHin((uint64_t)a1, 1uLL);
    ZinAneTd<11u>::SetOrReturnWin((uint64_t)a1, 0x10uLL);
    ZinAneTd<11u>::SetOrReturnHout((uint64_t)a1, 1uLL);
    ZinAneTd<11u>::SetOrReturnWout((uint64_t)a1, 0x10uLL);
    a1[52].i32[3] &= 0xFFFFFFF4;
    ZinAneTd<11u>::SetL2Src1DmaFormat((uint64_t)a1, 3);
    ZinAneTd<11u>::SetL2Src2DmaFormat(a1, 3);
    a1[60].i32[0] &= ~1u;
    a1[62].i32[0] = a1[62].i32[0] & 0xF0EFFFFF | 0x1000000;
    v8 = -12292;
  }
  else
  {
    result = 0;
    if (a2)
      return result;
    v6 = a1 + 62;
    ZinAneTd<11u>::SetCommonInFmt((uint64_t)a1, 3);
    ZinAneTd<11u>::SetCommonSrc2InFmt((uint64_t)a1, 3);
    a1[31].i32[1] = a1[31].i32[1] & 0xFFFFFFCF | 0x20;
    ZinAneTd<11u>::SetOrReturnHin((uint64_t)a1, 1uLL);
    ZinAneTd<11u>::SetOrReturnWin((uint64_t)a1, 0x40uLL);
    ZinAneTd<11u>::SetOrReturnHout((uint64_t)a1, 1uLL);
    ZinAneTd<11u>::SetOrReturnWout((uint64_t)a1, 0x40uLL);
    ZinAneTd<11u>::SetTileDmaDstandL2DstFifoMode((uint64_t)a1, 0);
    ZinAneTd<11u>::SetTileDmaDstandL2DstInterleave((uint64_t)a1, 8u);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 18, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 17, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 22, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 21, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 16, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 15, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 20, 1);
    (*(void (**)(int8x16_t *, uint64_t, uint64_t))(a1->i64[0] + 32))(a1, 19, 1);
    ZinAneTd<11u>::SetTileDmaSrc1Format((uint64_t)a1, 1, 0);
    v7 = 4096;
    v8 = -12289;
  }
  v6->i32[0] = v6->i32[0] & v8 | v7;
  return 1;
}

BOOL PECodegenUtils::HandlePEIndexingBuffer<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  ZinIrSymbol *L2RdSymbol;
  ZinIrSymbol *v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t TileSrc;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  L2RdSymbol = (ZinIrSymbol *)ZinEngineLayerMirInfo::GetL2RdSymbol(a3, 2);
  if (!L2RdSymbol)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinCodegen::SetPrimaryL2SourceBuffer<1u>(result, v20, v21, v22, v23, v24, v25, v26);
    return 0;
  }
  v9 = L2RdSymbol;
  if (ZinIrSymbol::GetMemType(L2RdSymbol) != 2)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinAneTd<17u>::HandleL2Config(result, v27, v28, v29, v30, v31, v32, v33);
    return 0;
  }
  v10 = *((_QWORD *)v9 + 2);
  v11 = *(_QWORD *)(a2 + 416);
  if (v10 % v11)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinCodegen::SetPrimaryL2SourceBuffer<1u>(result, v13, v14, v15, v16, v17, v18, v19);
    return 0;
  }
  ZinAneTd<11u>::SetL2Src2BaseAddress(*a4, v10 % *(_QWORD *)(a2 + 408) / v11);
  v34 = *a4;
  v35 = a3 + 120;
  TileSrc = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<11u>::SetL2Src2ChannelStride(v34, *(ZinCodegenUtil **)(TileSrc + 16));
  v37 = *a4;
  v38 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<11u>::SetL2Src2GroupStride(v37, *(ZinCodegenUtil **)(v38 + 32));
  v39 = *a4;
  v40 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<11u>::SetL2Src2RowStride(v39, (ZinCodegen *)(a1 + 48), *(ZinTensorDimensions **)(v40 + 8), v41, v42);
  v43 = *a4;
  v44 = ZinMirL2Config::GetTileSrc(v35, 2);
  ZinAneTd<11u>::SetL2Src2DepthStride(v43, *(ZinCodegenUtil **)(v44 + 24));
  return 1;
}

BOOL PECodegenUtils::HandlePECommonPostOps<11u>(uint64_t a1, uint64_t a2, ZinPELayer *a3)
{
  int v6;
  int v7;
  __n128 v8;
  uint64_t v9;
  int v10;
  _BOOL8 result;
  _QWORD v12[5];

  (*(void (**)(_QWORD *__return_ptr, ZinPELayer *))(*(_QWORD *)a3 + 376))(v12, a3);
  if (((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 792))(a3) & 1) != 0)
  {
    v6 = 1;
LABEL_6:
    ZinAneTd<11u>::SetPECondition(a2, v6);
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 800))(a3))
  {
    v7 = *(_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 816))(a3) + 192) - 25;
    if (v7 >= 6)
      ZinAssertImpl("Error: Invalid non linear mode");
    v6 = dword_207AB1EAC[v7];
    goto LABEL_6;
  }
LABEL_7:
  if (*((_QWORD *)a3 + 63) && (CodegenReduction<11u>((uint64_t)a3, v12, a2) & 1) == 0)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      PECodegenUtils::HandlePECommonPostOps<17u>();
      return 0;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 1129))
    {
      if (*((_QWORD *)a3 + 67) || *((_QWORD *)a3 + 68))
      {
        ZinPELayer::GetOutputScale(a3);
        ZinPELayer::GetOutputBias(a3);
        (*(void (**)(ZinPELayer *))(*(_QWORD *)a3 + 768))(a3);
        ZinAssertImpl("Error: Invalid access to the piece wise linear LUT");
      }
      PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<11u>(a2, a3);
    }
    if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 680))(a3))
    {
      v9 = (*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 776))(a3);
      v8.n128_u64[0] = ZinAneTd<11u>::SetPEOutputReLU(a2, (_DWORD *)(v9 + 192));
    }
    v10 = (*(uint64_t (**)(ZinPELayer *, __n128))(*(_QWORD *)a3 + 408))(a3, v8);
    ZinAneTd<11u>::SetPEOutputCtoW(a2, v10);
    return 1;
  }
  return result;
}

uint64_t CodegenReduction<11u>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6;
  signed int v7;
  int OutputReductionFinalScaleValue;
  int OutputReductionEpsilonValue;
  uint64_t result;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;

  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 504) + 64) + 12);
  v14 = 0;
  v7 = *(_DWORD *)(a1 + 528);
  OutputReductionFinalScaleValue = ZinPEElementWiseLayer::GetOutputReductionFinalScaleValue((ZinPEElementWiseLayer *)a1, (float *)&v14 + 1);
  OutputReductionEpsilonValue = ZinPEElementWiseLayer::GetOutputReductionEpsilonValue((ZinPEElementWiseLayer *)a1, (float *)&v14);
  result = 0;
  if (OutputReductionFinalScaleValue)
  {
    if (OutputReductionEpsilonValue)
    {
      v11 = a2[6] * a2[4] * a2[8];
      v12 = CodegenReductionMode<11u>(v6, a3);
      v13 = v12 & CodegenReductionPostProcess<11u>(v7, a3);
      return v13 & CodegenReductionFinalScaleEpsilon<11u>(v6, v11, a3, *((float *)&v14 + 1), *(float *)&v14);
    }
  }
  return result;
}

void PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<11u>(uint64_t a1, ZinPELayer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t OutputScale;
  uint64_t OutputBias;
  PiecewiseLinearFunctionParams *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;

  if (((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a2 + 680))(a2) & 1) != 0
    || ZinPELayer::HasOutputScaleOrBias(a2)
    || (*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a2 + 672))(a2))
  {
    v3 = (*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a2 + 776))(a2);
    v4 = (*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a2 + 784))(a2);
    OutputScale = ZinPELayer::GetOutputScale(a2);
    OutputBias = ZinPELayer::GetOutputBias(a2);
    v7 = (PiecewiseLinearFunctionParams *)(*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a2 + 768))(a2);
    PiecewiseLinearFunctionParams::PiecewiseLinearFunctionParams((uint64_t)&v10, v3, OutputScale, OutputBias, v4, v7);
    if (*(_BYTE *)(OutputScale + 8)
      || (!v7 ? (v8 = *(_BYTE *)(OutputBias + 8) == 0) : (v8 = 0), v8 ? (v9 = v4 == 0) : (v9 = 0), !v9))
    {
LABEL_16:
      ZinAssertImpl("Error: Invalid access to the piece wise linear LUT");
    }
    if (v3)
    {
      switch(*(_DWORD *)(v3 + 192))
      {
        case 1:
        case 5:
        case 7:
        case 8:
          goto LABEL_16;
        default:
          ZinAssertImpl("Unexpected activation function!!!");
      }
      goto LABEL_16;
    }
  }
}

uint64_t CodegenReductionMode<11u>(int a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD **v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  int v12;
  char v13[8];
  _QWORD *v14[2];
  _OWORD v15[3];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v15[0] = xmmword_207AB1E64;
  v15[1] = *(_OWORD *)algn_207AB1E74;
  v15[2] = xmmword_207AB1E84;
  std::map<ZinIrReductionType,BOOL CodegenReductionMode<11u>(ZinIrReductionType,ZinAneTd<11u> *)::ModeInfo,std::less<ZinIrReductionType>,std::allocator<std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<11u>(ZinIrReductionType,ZinAneTd<11u> *)::ModeInfo>>>::map[abi:ne180100]((uint64_t)v13, (int *)v15, 4);
  v4 = v14[0];
  if (!v14[0])
    goto LABEL_19;
  v5 = v14;
  do
  {
    v6 = v4;
    v7 = v5;
    v8 = *((_DWORD *)v4 + 7);
    if (v8 >= a1)
      v5 = (_QWORD **)v4;
    else
      ++v4;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  if (v5 != v14 && (v8 >= a1 ? (v9 = v6) : (v9 = v7), *((_DWORD *)v9 + 7) <= a1))
  {
    v12 = *((_DWORD *)v5 + 9);
    *(_DWORD *)(a2 + 904) = *(_DWORD *)(a2 + 904) & 0xFFFFFFFC | (_DWORD)v5[4] & 3;
    ZinAneTd<11u>::SetPaddingMode(a2, v12, 0);
    v10 = 1;
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      CodegenReductionMode<17u>(a1);
    v10 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v13, v14[0]);
  return v10;
}

void sub_206FE3878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL CodegenReductionPostProcess<11u>(signed int a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD **v7;
  signed int v8;
  _QWORD *v9;
  uint64_t v10;
  _BOOL8 v11;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15[2];
  char v16[16];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17 = xmmword_207AB1E94;
  v18 = 0x200000010;
  std::map<ZinIrNonLinearMode,unsigned int>::map[abi:ne180100]((uint64_t)&v14, (int *)&v17, 3);
  *(_QWORD *)&v17 = 0x30000000FLL;
  std::__tree<std::__value_type<ZinIrNonLinearMode,unsigned int>,std::__map_value_compare<ZinIrNonLinearMode,std::__value_type<ZinIrNonLinearMode,unsigned int>,std::less<ZinIrNonLinearMode>,true>,std::allocator<std::__value_type<ZinIrNonLinearMode,unsigned int>>>::__emplace_unique_key_args<ZinIrNonLinearMode,std::pair<ZinIrNonLinearMode const,unsigned int>>(&v14, (int *)&v17, (uint64_t *)&v17);
  v4 = v15[0];
  if (!v15[0])
    goto LABEL_19;
  v5 = v15;
  do
  {
    v6 = v4;
    v7 = v5;
    v8 = *((_DWORD *)v4 + 7);
    if (v8 >= a1)
      v5 = (_QWORD **)v4;
    else
      ++v4;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  if (v5 != v15 && (v8 >= a1 ? (v9 = v6) : (v9 = v7), *((_DWORD *)v9 + 7) <= a1))
  {
    v13 = *((unsigned int *)v5 + 8);
    *(_DWORD *)(a2 + 904) = *(_DWORD *)(a2 + 904) & 0xFFFFCFFF | (((_DWORD)v5[4] & 3) << 12);
    v11 = CheckRegValueRange(v13, (unsigned int *)(*(_QWORD *)(a2 + 1040) + 616));
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ZinIrEnumToStringUtil::NonLinearModeToString(a1, &v17);
      CodegenReductionPostProcess<17u>((char *)&v17, (uint64_t)v16, v10);
    }
    v11 = 0;
  }
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v14, v15[0]);
  return v11;
}

void sub_206FE3A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL CodegenReductionFinalScaleEpsilon<11u>(int a1, unsigned int a2, uint64_t a3, float a4, float a5)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  _S8 = a5;
  if (a1 == 3)
    a4 = (float)(1.0 / (float)a2) * a4;
  if (a4 == 0.0 || (LODWORD(a4) & 0x7F800000) == 0)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (result)
    {
      CodegenReductionFinalScaleEpsilon<11u>(result, v13, v14, v15, v16, v17, v18, v19);
      return 0;
    }
  }
  else
  {
    ZinAneTd<11u>::SetPEFinalScale(a3, a4);
    __asm { FCVT            H0, S8 }
    *(_WORD *)(a3 + 912) = _H0;
    return 1;
  }
  return result;
}

uint64_t std::map<ZinIrReductionType,BOOL CodegenReductionMode<11u>(ZinIrReductionType,ZinAneTd<11u> *)::ModeInfo,std::less<ZinIrReductionType>,std::allocator<std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<11u>(ZinIrReductionType,ZinAneTd<11u> *)::ModeInfo>>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 12 * a3;
    do
    {
      std::__tree<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::__map_value_compare<ZinIrReductionType,std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>,std::less<ZinIrReductionType>,true>,std::allocator<std::__value_type<ZinIrReductionType,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo>>>::__emplace_hint_unique_key_args<ZinIrReductionType,std::pair<ZinIrReductionType const,BOOL CodegenReductionMode<17u>(ZinIrReductionType,ZinAneTd<17u> *)::ModeInfo> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 12;
    }
    while (v6);
  }
  return a1;
}

void sub_206FE3B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

unsigned __int16 PECodegenUtils::HandlePECommonPostOps<11u>@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ZinPELayer *a3@<X2>)
{
  int v6;
  unsigned int v7;
  ZinQuantLayer *v8;
  unsigned __int16 result;
  _DWORD *v10;

  if (((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 792))(a3) & 1) != 0)
  {
    v6 = 1;
LABEL_6:
    ZinAneTd<11u>::SetPECondition(a2, v6);
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 800))(a3))
  {
    v7 = *(_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 816))(a3) + 192) - 25;
    if (v7 >= 6)
      ZinAssertImpl("Error: Invalid non linear mode");
    v6 = dword_207AB1EAC[v7];
    goto LABEL_6;
  }
LABEL_7:
  if (!*(_BYTE *)(a1 + 1584))
  {
    if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 672))(a3))
    {
      v8 = (ZinQuantLayer *)(*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 768))(a3);
      if (ZinQuantLayer::HasZeroPoint(v8))
        ZinAssertImpl("Unexpected quantization zero_point\n");
    }
  }
  if (*(_BYTE *)(a1 + 1129))
    PieceWiseLinearUnitUtils::ProgramPieceWiseLUTForActivationGOCOrGOCReLUAndQuantizationScale<11u>(a2, a3);
  if ((*(unsigned int (**)(ZinPELayer *))(*(_QWORD *)a3 + 680))(a3))
  {
    v10 = (_DWORD *)((*(uint64_t (**)(ZinPELayer *))(*(_QWORD *)a3 + 776))(a3) + 192);
    return ZinAneTd<11u>::SetPEOutputReLU(a2, v10);
  }
  return result;
}

BOOL ZinAneTd<11u>::ValidateOCGSizes(_DWORD *a1, uint64_t a2, int *a3)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int NESmallSourceMode;
  __int16 v48;

  v5 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 8) - 85;
  v6 = v5 > 5;
  v7 = (1 << v5) & 0x31;
  v8 = v6 || v7 == 0;
  if (v8 && !*(_QWORD *)(a2 + 384))
    return 1;
  v9 = a1[130] & 7;
  v10 = a1[131];
  v11 = (v10 >> 28) & 3;
  v12 = v10 >> 30;
  v13 = a1[132];
  v14 = (v13 >> 13) & 3;
  if ((a1[137] & 0xC) == 4)
  {
    switch((_DWORD)v11 * (_DWORD)v12 * (_DWORD)v14)
    {
      case 1:
        if (v9 < 6)
          goto LABEL_56;
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_62;
        break;
      case 2:
        if (v9 < 5)
          goto LABEL_56;
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_62;
        break;
      case 4:
        if (v9 < 4)
          goto LABEL_56;
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_62;
        break;
      case 8:
        if (v9 < 3)
          goto LABEL_56;
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_62;
        break;
      default:
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (result)
          goto LABEL_51;
        break;
    }
  }
  else
  {
    v23 = a1[125] & 3;
    if (v23 > 1)
    {
      if (v23 == 2)
      {
        switch((_DWORD)v11 * (_DWORD)v12 * (_DWORD)v14)
        {
          case 1:
            if (v9 < 5)
              goto LABEL_56;
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (result)
              goto LABEL_62;
            break;
          case 2:
            if (v9 < 4)
              goto LABEL_56;
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (result)
              goto LABEL_62;
            break;
          case 4:
            if (v9 < 3)
              goto LABEL_56;
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (result)
              goto LABEL_62;
            break;
          case 8:
            if (v9 >= 2)
            {
              result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (result)
              {
LABEL_62:
                ZinAneTd<17u>::ValidateOCGSizes(result, v16, v17, v18, v19, v20, v21, v22);
                return 0;
              }
            }
            else
            {
LABEL_56:
              v39 = v13 & 0x1F;
              if ((a1[132] & 0x1Fu) < 2)
                return 1;
              v41.i64[1] = 1 << v9;
              NESmallSourceMode = ZinAneTd<11u>::GetNESmallSourceMode((uint64_t)a1);
              v48 = 0;
              v40 = a1[132] >> 6;
              v41.i64[0] = v39;
              v43 = v40;
              v44 = v11;
              v45 = v12;
              v46 = v14;
              if ((a1[125] & 3) == 3)
                ZinAssertImpl("Error: Invalid tensor format", *(_OWORD *)&v41);
              v42 = dword_207AB1EC4[a1[125] & 3];
              result = ZinMirConvUtils::Validate3DConvProgrammingConstraints(&v41, a3) == 0;
            }
            break;
          default:
            result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (result)
            {
LABEL_51:
              ZinAneTd<17u>::ValidateOCGSizes(result, v32, v33, v34, v35, v36, v37, v38);
              return 0;
            }
            break;
        }
      }
      else
      {
        v24 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v24)
          ZinAneTd<4u>::ValidateOCGSizes(v24, v25, v26, v27, v28, v29, v30, v31);
        return 0;
      }
    }
    else
    {
      switch((_DWORD)v11 * (_DWORD)v12 * (_DWORD)v14)
      {
        case 1:
          if (v9 < 4)
            goto LABEL_56;
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_62;
          break;
        case 2:
          if (v9 < 3)
            goto LABEL_56;
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_62;
          break;
        case 4:
          if (v9 < 2)
            goto LABEL_56;
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_62;
          break;
        case 8:
          if (!v9)
            goto LABEL_56;
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_62;
          break;
        default:
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (result)
            goto LABEL_51;
          break;
      }
    }
  }
  return result;
}

uint64_t ZinAneTd<11u>::SetDPE(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  int v3;
  int v4;
  BOOL v5;
  int v6;

  v2 = (*(_BYTE *)(a1 + 500) & 0x22) == 0 && (*(_BYTE *)(a1 + 932) & 2) == 0;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 264) + 1504))
  {
    v3 = 7;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 936);
    if ((v4 & 7) != 0)
    {
      if (v2)
        v3 = 5;
      else
        v3 = 2;
      if ((*(_DWORD *)(a1 + 936) & 7u) >= 3)
        v3 = 0;
    }
    else
    {
      v5 = !v2;
      if (v2)
        v3 = 3;
      else
        v3 = 0;
      if (v5)
        v6 = 1;
      else
        v6 = 4;
      if ((v4 & 8) != 0)
        v3 = v6;
    }
  }
  *(_DWORD *)(a1 + 556) = *(_DWORD *)(a1 + 556) & 0xFFFFFFF0 | v3;
  return 1;
}

uint64_t AdjustTaskSizeForRdar107730882<11u>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD **)(a1 + 200);
  v5 = 4 * (*(unsigned int (**)(_QWORD *, uint64_t))(*v4 + 24))(v4, 25);
  v6 = *(unsigned int *)(a1 + 184) + v5;
  result = ZinAlignPower2(v6, *(_QWORD *)(a2 + 504));
  if ((result & 0x3F) == 0)
  {
    if ((unint64_t)(result - v6) >= 8)
      v8 = 16 * ((unint64_t)(result - v6) < 0x10);
    else
      v8 = 8;
    result = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*v4 + 32))(v4, 25, (unint64_t)(v8 + v5) >> 2);
    v4[132] = v8;
  }
  return result;
}

void CollectSegmentStats<11u>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  __int16 v51;
  char v52;
  int v53;
  unsigned int v54;
  void *__p;
  char *v56;
  char *v57;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v47 = 0uLL;
  v48 = 0;
  v49 = xmmword_207A7FF30;
  v50 = 0;
  v53 = 0;
  v54 = 0;
  v56 = 0;
  v57 = 0;
  __p = 0;
  v7 = ZinAlignPower2(2, *(_QWORD *)(a1 + 504));
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 != a2)
  {
    v44 = 0;
    v9 = 0;
    v42 = v7;
    v43 = v7 >> 2;
    do
    {
      v46 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v46 + 200);
      v11 = *(unsigned __int16 *)(v10 + 8);
      if (!std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v46))ZinAssertImpl("Incorrect internal state: collect segment stats");
      v12 = std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(a3, &v46);
      v13 = v12;
      if (!v12)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v14 = v56;
      if (v56 >= v57)
      {
        v16 = (v56 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v17 = (v57 - (_BYTE *)__p) >> 2;
        if (v17 <= v16 + 1)
          v17 = v16 + 1;
        if ((unint64_t)(v57 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v57, v18);
        else
          v19 = 0;
        v20 = &v19[8 * v16];
        *(_QWORD *)v20 = v13[3];
        v15 = v20 + 8;
        v22 = (char *)__p;
        v21 = v56;
        if (v56 != __p)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *((_QWORD *)v20 - 1) = v23;
            v20 -= 8;
          }
          while (v21 != v22);
          v21 = (char *)__p;
        }
        __p = v20;
        v56 = v15;
        v57 = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_QWORD *)v56 = v12[3];
        v15 = v14 + 8;
      }
      v56 = v15;
      if ((_DWORD)v47)
      {
        v24 = v9;
      }
      else
      {
        HIDWORD(v49) = v9;
        v25 = *(_QWORD *)(a2 + 8);
        if (v25 == v8)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          do
          {
            ++v26;
            v25 = *(_QWORD *)(v25 + 8);
          }
          while (v25 != v8);
        }
        v24 = v9 + v42;
        v53 = v26;
        v44 = v9;
      }
      v27 = v46;
      *(_DWORD *)(v46 + 184) = v24;
      if (*(_BYTE *)(a1 + 2057))
      {
        if (a4[1] != *a4)
        {
          *(_QWORD *)(v10 + 1056) = 0;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 368))(v10, 0);
          v27 = v46;
        }
        AdjustTaskSizeForRdar107730882<11u>(v27, a1);
      }
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v9 = ZinAlignPower2(v24 + 4 * v28, *(_QWORD *)(a1 + 504));
      v29 = v47;
      if (!(_DWORD)v47)
      {
        DWORD2(v47) = v11;
        DWORD1(v47) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) - 1;
        v29 = v47;
      }
      LODWORD(v47) = v29 + 1;
      if (*(_BYTE *)(v46 + 197))
      {
        v54 = *(_DWORD *)(v46 + 184);
        v30 = v54;
        v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, 25);
        HIDWORD(v47) += v31 + ((unint64_t)(v30 - v44) >> 2);
        LODWORD(v48) = v43;
        v32 = a4[1];
        if (v32 >= a4[2])
        {
          v33 = std::vector<ZinIrCodegenTDPartitionStats>::__push_back_slow_path<ZinIrCodegenTDPartitionStats const&>(a4, &v47);
        }
        else
        {
          std::vector<ZinIrCodegenTDPartitionStats>::__construct_one_at_end[abi:ne180100]<ZinIrCodegenTDPartitionStats const&>((uint64_t)a4, &v47);
          v33 = v32 + 80;
        }
        a4[1] = v33;
        v51 = 0;
        v52 = 0;
        v48 = 0;
        v47 = 0uLL;
        v49 = xmmword_207A7FF30;
        v50 = 0;
        v53 = 0;
        v54 = 0;
        if (__p)
        {
          v56 = (char *)__p;
          operator delete(__p);
        }
        __p = 0;
        v56 = 0;
        v57 = 0;
        v9 = ZinAlignPower2(v9, *(_QWORD *)(a1 + 616));
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != a2);
  }
  v34 = *a4;
  v35 = a4[1];
  v36 = v35 - *a4;
  if (v35 != *a4)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    v39 = 0xCCCCCCCCCCCCCCCDLL * (v36 >> 4);
    while (1)
    {
      v40 = v34 + 80 * v37;
      *(_DWORD *)(v40 + 20) = 1;
      *(_DWORD *)(v40 + 24) = v38;
      v41 = (_DWORD *)(v40 + 20);
      v38 = (v38 + 1);
      v41[2] = v38;
      if (v39 - 1 == v37)
        break;
      if (!*(_DWORD *)(v34 + 80 * v38 + 8))
        goto LABEL_48;
LABEL_49:
      v37 = v38;
      if (v39 <= v38)
        goto LABEL_50;
    }
    *v41 = 0;
    v41[2] = -1;
LABEL_48:
    *(_BYTE *)(v34 + 80 * v37 + 40) = 1;
    goto LABEL_49;
  }
LABEL_50:
  if (__p)
  {
    v56 = (char *)__p;
    operator delete(__p);
  }
}

void sub_206FE458C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  std::vector<ZinIrCodegenTDPartitionStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t ZinValidateTd<11u>::Test(uint64_t *WUCost, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t result;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  _BOOL4 v78;
  int v79;
  int HasWorkUnitWidthOf8;
  _BOOL8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  _BOOL8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BOOL8 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  _BOOL8 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BOOL8 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL8 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BOOL8 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BOOL8 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BOOL8 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BOOL8 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BOOL8 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BOOL8 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BOOL8 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BOOL8 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _BOOL8 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _BOOL8 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  __int16 v235;
  _BOOL8 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _BOOL8 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _BOOL8 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _BOOL8 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  BOOL v268;
  _BOOL8 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _BOOL8 v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _BOOL8 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _BOOL8 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _BOOL8 v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  int v310;
  unint64_t v311;
  char v312;
  int v313;
  _BOOL8 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _BOOL8 v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _BOOL8 v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _BOOL8 v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  _BOOL8 v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _BOOL8 v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _BOOL8 v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _BOOL8 v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int64_t v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  int v383;
  int64_t v384;
  _BOOL8 v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _BOOL8 v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _BOOL8 v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  _BOOL8 v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _BOOL8 v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  _BOOL8 v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  _BOOL8 v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  _BOOL8 v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _BOOL8 v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  _BOOL8 v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _BOOL8 v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  _BOOL8 v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  _BOOL8 v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  _BOOL8 v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  _BOOL8 v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  int v505;
  unint64_t v506;
  _BOOL8 v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  _BOOL8 v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  _BOOL8 v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  _BOOL8 v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  _BOOL8 v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  _BOOL8 v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  _BOOL8 v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  _BOOL8 v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  _BOOL8 v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  _BOOL8 v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  _BOOL8 v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unsigned int v595;
  _BOOL8 v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  _BOOL8 v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  unsigned int v612;
  _BOOL8 v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  unsigned int v621;
  uint64_t v622;
  _BOOL8 v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  _BOOL8 v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  _BOOL8 v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  _BOOL8 v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  _BOOL8 v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  _BOOL8 v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  _BOOL8 v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  _BOOL8 v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  _BOOL8 v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  _BOOL8 v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  _BOOL8 v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  _BOOL8 v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  _BOOL8 v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  _BOOL8 v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  _BOOL8 v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  _BOOL8 v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  _BOOL8 v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v759;
  unsigned int v760;
  _BOOL8 v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  _BOOL8 v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  _BOOL8 v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  int v785;
  _BOOL8 v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  _BOOL8 v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  _BOOL8 v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  _BOOL8 v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  _BOOL8 v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  _BOOL8 v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  _BOOL8 v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  int v845;
  _BOOL8 v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  _BOOL8 v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  _BOOL8 v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  _BOOL8 v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  _BOOL8 v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  _BOOL8 v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  _BOOL8 v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  _BOOL8 v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  _BOOL8 v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  _BOOL8 v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  _BOOL8 v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  _BOOL8 v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  _BOOL8 v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  _BOOL8 v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  _BOOL8 v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  _BOOL8 v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  _BOOL8 v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  _BOOL8 v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  _BOOL8 v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  _BOOL8 v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  _BOOL8 v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  _BOOL8 v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  _BOOL8 v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  _BOOL8 v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  _BOOL8 v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  _BOOL8 v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  unsigned int v1054;
  _BOOL8 v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  _BOOL8 v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  int v1071;
  float v1072;
  _BOOL8 v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  _BOOL8 v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  unint64_t v1089;
  BOOL v1090;
  _BOOL8 v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  unsigned int v1099;
  uint64_t v1100;
  BOOL v1101;
  int v1102;
  unsigned int v1103;
  float v1104;
  BOOL v1106;
  unint64_t v1107;
  unsigned int v1108;
  uint64_t v1109;
  uint64_t v1110;
  int64_t v1111;
  uint64_t v1112;
  _BOOL8 v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  _BOOL8 v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  _BOOL8 v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  _BOOL8 v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  _BOOL8 v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  int v1153;
  int v1154;
  int v1155;
  int v1156;
  int v1157;
  int v1158;
  int v1159;
  int v1160;
  int v1161;
  int v1162;
  int v1163;
  _BOOL8 v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  _BOOL8 v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  _BOOL8 v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  _BOOL8 v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  _BOOL8 v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  _BOOL8 v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  _BOOL8 v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  unint64_t v1221;
  unint64_t v1222;
  int v1223;
  _BOOL8 v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  _BOOL8 v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  _BOOL8 v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  NSObject *v1249;
  int v1250;
  uint64_t v1254;
  _BOOL8 v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  NSObject *v1265;
  int v1266;
  uint64_t v1270;
  int v1272;
  int v1273;
  _BOOL8 v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  _BOOL8 v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  _BOOL8 v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  _BOOL8 v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  _BOOL8 v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  _BOOL8 v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  _BOOL8 v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  _BOOL8 v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  int v1338;
  _BOOL8 v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  _BOOL8 v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  _BOOL8 v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  int v1363;
  _BOOL8 v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  _BOOL8 v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  int v1380;
  _BOOL8 v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  _BOOL8 v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  int v1397;
  _BOOL8 v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  int v1406;
  _BOOL8 v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  int v1415;
  int v1416;
  int v1417;
  uint64_t v1418;
  int v1419;
  int v1420;
  _BOOL8 v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  _BOOL8 v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  int v1437;
  _BOOL8 v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  _BOOL8 v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  _BOOL8 v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  _BOOL8 v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  _BOOL8 v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  _BOOL8 v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t i;
  unsigned int v1487;
  int v1488;
  uint64_t j;
  unsigned int v1490;
  _BOOL8 v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  _BOOL8 v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  int v1507;
  int v1508;
  _BOOL8 v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  _BOOL8 v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  _BOOL8 v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  _BOOL8 v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  _BOOL8 v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  _BOOL8 v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  _BOOL8 v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  _BOOL8 v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  _BOOL8 v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  _BOOL8 v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  _BOOL8 v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  _BOOL8 v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  _BOOL8 v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  _BOOL8 v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  _BOOL8 v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  _BOOL8 v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  _BOOL8 v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  _BOOL8 v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  _BOOL8 v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  _BOOL8 v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  _BOOL8 v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  _BOOL8 v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  char v1685;
  _BOOL8 v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  _BOOL8 v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  _BOOL8 v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  _BOOL8 v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  _BOOL8 v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  uint64_t v1724;
  uint64_t v1725;
  _BOOL8 v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  _BOOL8 v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  uint64_t v1740;
  uint64_t v1741;
  _BOOL8 v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  _BOOL8 v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  uint64_t v1757;
  _BOOL8 v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  _BOOL8 v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  _BOOL8 v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  _BOOL8 v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  _BOOL8 v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  _BOOL8 v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  _BOOL8 v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  _BOOL8 v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  _BOOL8 v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  _BOOL8 v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  unint64_t v1839;
  int v1840;
  unsigned int v1841;
  int v1842;
  int v1843;
  char v1844;
  char v1845;
  char v1846;
  char v1847;
  unint64_t v1848;
  unint64_t v1849;
  unsigned int v1850;
  unsigned int v1851;
  unsigned int v1852;
  unsigned int v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  __int16 v1857;
  __int16 v1858;
  char v1859;
  char v1860;
  int v1861;
  int v1862;
  __int16 v1863;
  __int16 v1864;
  __int16 v1865;
  unint64_t v1866;
  uint64_t v1867;
  unsigned int v1868;
  unint64_t v1869;
  unint64_t v1870;
  unint64_t v1871;
  unint64_t v1872;
  unsigned __int8 v1873;
  unint64_t v1874;
  __int16 v1875;
  __int16 v1876;
  unint64_t v1877;
  uint64_t v1878;
  int64_t v1879;
  unint64_t v1880;
  int v1881;
  uint64_t v1882;
  char v1883;
  char v1884;
  unint64_t v1885;
  unint64_t v1886;
  unsigned int v1887;
  int v1888;
  unint64_t v1889;
  int v1890;
  int v1891;
  unsigned int v1892;
  uint64_t v1893;
  uint8_t v1894[4];
  uint64_t v1895;
  uint8_t v1896[4];
  _QWORD v1897[3];

  *(_QWORD *)((char *)&v1897[1] + 4) = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a3 + 540);
  v4 = (v3 >> 8) & 7;
  v5 = (v3 >> 12) & 7;
  if (v5 > v4)
  {
    v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v6)
      ZinValidateTd<5u>::Test(v6, v7, v8, v9, v10, v11, v12, v13);
    return 3;
  }
  v14 = (v3 >> 16) & 7;
  if (v5 > v14)
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinValidateTd<4u>::Test(v15, v16, v17, v18, v19, v20, v21, v22);
    return 3;
  }
  if (v4 > v14)
  {
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinValidateTd<4u>::Test(v23, v24, v25, v26, v27, v28, v29, v30);
    return 3;
  }
  v32 = (*(_DWORD *)(a3 + 924) >> 10) & 1;
  if (v32 != ((*(_DWORD *)(a3 + 36) >> 4) & 1))
  {
    v62 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v62)
      ZinValidateTd<11u>::Test(v62, v63, v64, v65, v66, v67, v68, v69);
    return 3;
  }
  v35 = *WUCost;
  v34 = WUCost[1];
  v36 = *(unsigned int *)(a3 + 484);
  v37 = *(_DWORD *)(a3 + 488);
  v38 = *(unsigned int *)(a3 + 504);
  v39 = *(_DWORD *)(a3 + 508);
  v1888 = *(_DWORD *)(a3 + 496);
  v1890 = *(_DWORD *)(a3 + 500);
  v40 = *(_DWORD *)(a3 + 512);
  v41 = *(unsigned int *)(a3 + 516);
  v42 = *(unsigned int *)(a3 + 520);
  v43 = (v41 >> 28) & 3;
  v44 = v41 >> 30;
  v45 = *(_DWORD *)(a3 + 524);
  LODWORD(WUCost) = *(_DWORD *)(a3 + 836);
  v46 = *(unsigned int *)(a3 + 984);
  v47 = *(_DWORD *)(a3 + 492);
  v48 = v47 & 3;
  v49 = *(_DWORD *)(a3 + 928);
  v50 = *(_DWORD *)(a3 + 532);
  v51 = *(_DWORD *)(a3 + 536);
  v1892 = *(_DWORD *)(a3 + 788);
  v52 = *(_DWORD *)(a3 + 896);
  v53 = *(_DWORD *)(a3 + 792);
  if ((_DWORD)v43 == 2
    && (_DWORD)v44 == 2
    && v48 <= 1
    && v14 >= 4
    && ((_DWORD)v5 != 4 || (_DWORD)v4 != 4 || (_DWORD)v14 != 4))
  {
    v112 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v112)
      ZinValidateTd<11u>::Test(v112, v113, v114, v115, v116, v117, v118, v119);
    return 3;
  }
  if ((_DWORD)v48 == 3)
  {
    v54 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v54)
      ZinValidateTd<11u>::Test(v54, v55, v56, v57, v58, v59, v60, v61);
    return 3;
  }
  v1883 = v40;
  v1877 = v36;
  v1878 = v34;
  v1875 = v39;
  v1876 = v37;
  v1873 = v50;
  v71 = (v38 >> 16) & 0x7FFF;
  v72 = v38 & 0x7FFF;
  v73 = (v41 >> 6) & 0x3F;
  v74 = v41 & 0x3F;
  v1885 = v42;
  v75 = (v42 >> 13) & 3;
  v76 = (v1892 >> 2) & 3;
  v1874 = *(unsigned int *)(a3 + 528);
  v1880 = v1874 & 0x7FFF;
  v1887 = dword_207AB1EC4[v48];
  v77 = dword_207A7FF60[(v3 >> 2) & 3];
  v1881 = v3 & 0xC;
  if (v1881 == 4)
  {
    if ((_DWORD)v4 != (_DWORD)v5 || (_DWORD)v4 != (_DWORD)v14)
    {
      v120 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v120)
        ZinValidateTd<11u>::Test(v120, v121, v122, v123, v124, v125, v126, v127);
      return 3;
    }
    if (v74 >= 9)
    {
      v145 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v145)
        ZinValidateTd<4u>::Test(v145, v146, v147, v148, v149, v150, v151, v152);
      return 3;
    }
    if (v4 >= 5)
    {
      v161 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v161)
        ZinValidateTd<11u>::Test(v161, v162, v163, v164, v165, v166, v167, v168);
      return 3;
    }
    v1867 = (v42 >> 13) & 3;
    if ((_DWORD)v4 != 4)
    {
      if ((_DWORD)v74 != 1 || (_DWORD)v73 != 1)
      {
        v252 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v252)
          return 3;
        goto LABEL_114;
      }
      if ((_DWORD)v43 != 1 || (_DWORD)v44 != 1 || (_DWORD)v75 != 1)
      {
        v293 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v293)
          return 3;
LABEL_614:
        ZinValidateTd<17u>::Test(v293, v294, v295, v296, v297, v298, v299, v300);
        return 3;
      }
      if (v76 == 2)
      {
        v194 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v194)
          return 3;
LABEL_621:
        ZinValidateTd<17u>::Test(v194, v195, v196, v197, v198, v199, v200, v201);
        return 3;
      }
    }
    v1850 = v51;
    v1848 = v46;
    v1846 = (char)WUCost;
    v1842 = v53;
    v1844 = v52;
    v1861 = v45;
    v1857 = v49;
    v1869 = v38 & 0x7FFF;
    v1854 = v35;
    v1838 = (v38 >> 16) & 0x7FFF;
    v1840 = dword_207A7FF60[(v3 >> 2) & 3];
    WUCost = (uint64_t *)NERasterization::GetWUCost(1 << v4, 1 << v4, 1 << v4, v1880, v77, 0, v72, v1838, 0, 0, v1887, v35);
    v77 = v1840;
    v53 = v1842;
    v76 = (v1892 >> 2) & 3;
    v45 = v1861;
    v73 = (v41 >> 6) & 0x3F;
    v72 = v1869;
    v74 = v41 & 0x3F;
    LOWORD(v49) = v1857;
    LODWORD(v48) = v47 & 3;
    v35 = v1854;
    v71 = v1838;
    v1090 = WUCost == (uint64_t *)1;
    LOBYTE(v52) = v1844;
    LOBYTE(WUCost) = v1846;
    v46 = v1848;
    v44 = v41 >> 30;
    v43 = (v41 >> 28) & 3;
    v51 = v1850;
    LODWORD(v75) = v1867;
    if (!v1090)
    {
      v244 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v244)
        ZinValidateTd<4u>::Test(v244, v245, v246, v247, v248, v249, v250, v251);
      return 3;
    }
  }
  v1847 = (char)WUCost;
  v1849 = v46;
  v1866 = v73;
  v1868 = v75;
  v1872 = v74;
  v1852 = v44;
  v1853 = v43;
  v1851 = v51;
  v1841 = (v47 >> 4) & 3;
  v78 = v1841 != 2;
  if ((_DWORD)v48 == 2 && v1841 != 2)
  {
    v1843 = v53;
    v1845 = v52;
    v1862 = v45;
    v1858 = v49;
    v1870 = v72;
    v1855 = v35;
    v79 = v76;
    HasWorkUnitWidthOf8 = NERasterization::HasWorkUnitWidthOf8(v35, v1887, 1 << (BYTE2(v3) & 7), 1 << v5, (1 << v4), v77, 0, v71, v72, 0, 0);
    v78 = v1841 != 2;
    v53 = v1843;
    LOBYTE(v52) = v1845;
    v76 = v79;
    v45 = v1862;
    v72 = v1870;
    LOWORD(v49) = v1858;
    v35 = v1855;
    if (HasWorkUnitWidthOf8)
    {
      v81 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v81)
        ZinValidateTd<4u>::Test(v81, v82, v83, v84, v85, v86, v87, v88);
      return 3;
    }
  }
  v89 = (v3 >> 4) & 7;
  v90 = v49 & 7;
  if (!v89)
  {
    if ((v49 & 7) != 0)
    {
      if (v90 == 3)
      {
        v128 = *(_DWORD *)(a3 + 928);
        if ((v128 & 0x80000) != 0)
        {
          if ((v1892 & 8) == 0)
          {
            v226 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v226)
              ZinValidateTd<11u>::Test(v226, v227, v228, v229, v230, v231, v232, v233);
            return 3;
          }
        }
        else if ((v76 - 1) >= 2)
        {
          v129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v129)
            ZinValidateTd<11u>::Test(v129, v130, v131, v132, v133, v134, v135, v136);
          return 3;
        }
        if ((v128 & 0x800000) != 0)
        {
          v268 = v1866 >= 2 || v1872 >= 2;
          if (v268 && v76 != 2)
          {
            v269 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v269)
              ZinValidateTd<11u>::Test(v269, v270, v271, v272, v273, v274, v275, v276);
            return 3;
          }
        }
      }
      else if (v76)
      {
        v186 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v186)
          return 3;
        goto LABEL_556;
      }
    }
    else if ((v76 | 2) != 2)
    {
      v178 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v178)
        ZinValidateTd<11u>::Test(v178, v179, v180, v181, v182, v183, v184, v185);
      return 3;
    }
    if (((v3 & 8) != 0 || v1881 == 4 && v4 <= 2) && v76 == 2)
    {
      v194 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v194)
        return 3;
      goto LABEL_621;
    }
  }
  v91 = v45 & 0x1FFF;
  if (v32)
  {
    if (v91 <= 1)
    {
      v153 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v153)
        ZinValidateTd<4u>::Test(v153, v154, v155, v156, v157, v158, v159, v160);
      return 3;
    }
    if ((*(_DWORD *)(a3 + 928) & 7) != 0)
    {
      v137 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v137)
        ZinValidateTd<4u>::Test(v137, v138, v139, v140, v141, v142, v143, v144);
      return 3;
    }
    if ((*(_DWORD *)(a3 + 928) & 0x4018) == 8)
    {
      v202 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v202)
        ZinValidateTd<4u>::Test(v202, v203, v204, v205, v206, v207, v208, v209);
      return 3;
    }
  }
  v92 = v53;
  v93 = v52;
  v94 = (v41 >> 13) & 3;
  v95 = *(_QWORD *)&v1888 & 0x1FFFFLL;
  v96 = (v41 >> 15) & 3;
  v97 = *(_QWORD *)&v1890 & 0x1FFFFLL;
  v1893 = v1885 >> 6;
  v98 = v1883 & 7;
  v99 = (v41 >> 17) & 0x1F;
  v100 = v1885 & 0x1F;
  v101 = (v41 >> 22) & 0x1F;
  v102 = (v1885 >> 8) & 0xF;
  v103 = HIWORD(v45);
  if (v90 != 1)
  {
    if (v90 != 2)
    {
      v1891 = v76;
      if ((v90 - 3) <= 1 && (_DWORD)v48 != (*(_DWORD *)(a3 + 924) & 3))
      {
        v260 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v260)
          ZinValidateTd<11u>::Test(v260, v261, v262, v263, v264, v265, v266, v267);
        return 3;
      }
      goto LABEL_72;
    }
    if (v95 != 2 * v97)
    {
      v210 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v210)
        ZinValidateTd<4u>::Test(v210, v211, v212, v213, v214, v215, v216, v217);
      return 3;
    }
    if ((v1883 & 7) != 0)
    {
      v104 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v104)
LABEL_45:
        ZinValidateTd<17u>::Test(v104, v105, v106, v107, v108, v109, v110, v111);
      return 3;
    }
    if ((_DWORD)v1872 == 1)
    {
      if ((_DWORD)v1866 == 1)
      {
        v1891 = v76;
        v1864 = v45;
        if ((_DWORD)v100 != 1)
        {
          v362 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v362)
            return 3;
          goto LABEL_427;
        }
        if ((_DWORD)v94 == 1)
        {
          if ((_DWORD)v96 == 1)
          {
            if ((_DWORD)v1893 != 1)
            {
              v409 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v409)
                return 3;
              goto LABEL_421;
            }
            if ((_DWORD)v99)
            {
              v285 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v285)
                return 3;
LABEL_136:
              ZinValidateTd<17u>::Test(v285, v286, v287, v288, v289, v290, v291, v292);
              return 3;
            }
            if ((_DWORD)v101)
            {
              v425 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v425)
                return 3;
LABEL_222:
              ZinValidateTd<17u>::Test(v425, v426, v427, v428, v429, v430, v431, v432);
              return 3;
            }
            if ((_DWORD)v102)
            {
              v441 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v441)
                return 3;
LABEL_230:
              ZinValidateTd<17u>::Test(v441, v442, v443, v444, v445, v446, v447, v448);
              return 3;
            }
            if (v1853 == 1)
            {
              if (v1852 == 1)
              {
                if (v1868 == 1)
                {
                  if ((v45 & 0x4000) == 0)
                  {
                    v465 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v465)
                      return 3;
LABEL_244:
                    ZinValidateTd<10u>::Test(v465, v466, v467, v468, v469, v470, v471, v472);
                    return 3;
                  }
                  if (HIWORD(v45) != 2)
                  {
                    v563 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (v563)
                      ZinValidateTd<4u>::Test(v563, v564, v565, v566, v567, v568, v569, v570);
                    return 3;
                  }
                  if (v1881 == 4)
                  {
                    v547 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v547)
                      return 3;
LABEL_282:
                    ZinValidateTd<10u>::Test(v547, v548, v549, v550, v551, v552, v553, v554);
                    return 3;
                  }
                  if (((*(_DWORD *)(a3 + 924) ^ *(_DWORD *)(a3 + 492)) & 3) != 0)
                  {
                    v587 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v587)
                      return 3;
LABEL_299:
                    ZinValidateTd<17u>::Test(v587, v588, v589, v590, v591, v592, v593, v594);
                    return 3;
                  }
                  if ((v49 & 8) == 0)
                  {
                    v604 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v604)
                      return 3;
LABEL_310:
                    ZinValidateTd<11u>::Test(v604, v605, v606, v607, v608, v609, v610, v611);
                    return 3;
                  }
                  if ((v49 & 0x10) == 0)
                  {
                    if ((v49 & 0x4000) == 0)
                    {
                      v612 = *(_DWORD *)(a3 + 528) & 0x7FFF;
                      if (v612 != 1)
                        v612 = v71 % v612 == 1;
                      if (!(_DWORD)v14)
                        v612 = 1;
                      if ((_DWORD)v5 || !v612)
                        goto LABEL_357;
                      if (v48 <= 1)
                      {
                        if (v72 % *(_QWORD *)(v35 + 1864) <= *(_QWORD *)(v35 + 1856))
                        {
                          v613 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (!v613)
                            return 3;
LABEL_325:
                          ZinValidateTd<6u>::Test(v613, v614, v615, v616, v617, v618, v619, v620);
                          return 3;
                        }
LABEL_357:
                        LOWORD(v45) = v1864;
                        if (!(_DWORD)v5 && (*(_DWORD *)(a3 + 528) & 0x7FFF0000) != 0)
                        {
                          v663 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (!v663)
                            return 3;
LABEL_360:
                          ZinValidateTd<10u>::Test(v663, v664, v665, v666, v667, v668, v669, v670);
                          return 3;
                        }
                        goto LABEL_72;
                      }
                      if (v72 % *(_QWORD *)(v35 + 1856) > *(_QWORD *)(v35 + 1872))
                        goto LABEL_357;
                      v761 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (!v761)
                        return 3;
LABEL_423:
                      ZinValidateTd<10u>::Test(v761, v762, v763, v764, v765, v766, v767, v768);
                      return 3;
                    }
                    v639 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (!v639)
                      return 3;
LABEL_346:
                    ZinValidateTd<11u>::Test(v639, v640, v641, v642, v643, v644, v645, v646);
                    return 3;
                  }
                  v631 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v631)
                    return 3;
LABEL_342:
                  ZinValidateTd<11u>::Test(v631, v632, v633, v634, v635, v636, v637, v638);
                  return 3;
                }
                v531 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v531)
                  return 3;
LABEL_713:
                ZinValidateTd<17u>::Test(v531, v532, v533, v534, v535, v536, v537, v538);
                return 3;
              }
              v515 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v515)
                return 3;
LABEL_680:
              ZinValidateTd<17u>::Test(v515, v516, v517, v518, v519, v520, v521, v522);
              return 3;
            }
            v489 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!v489)
              return 3;
LABEL_674:
            ZinValidateTd<17u>::Test(v489, v490, v491, v492, v493, v494, v495, v496);
            return 3;
          }
          v393 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v393)
            return 3;
LABEL_209:
          ZinValidateTd<17u>::Test(v393, v394, v395, v396, v397, v398, v399, v400);
          return 3;
        }
        v370 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v370)
          return 3;
LABEL_195:
        ZinValidateTd<17u>::Test(v370, v371, v372, v373, v374, v375, v376, v377);
        return 3;
      }
      v330 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v330)
        return 3;
LABEL_173:
      ZinValidateTd<17u>::Test(v330, v331, v332, v333, v334, v335, v336, v337);
      return 3;
    }
    v322 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v322)
      return 3;
LABEL_169:
    ZinValidateTd<17u>::Test(v322, v323, v324, v325, v326, v327, v328, v329);
    return 3;
  }
  if ((_DWORD)v95 != (_DWORD)v97)
  {
    v218 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v218)
      return 3;
    goto LABEL_97;
  }
  if ((v1883 & 7) != 0)
  {
    v104 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v104)
      return 3;
    goto LABEL_45;
  }
  if ((_DWORD)v1872 != 1)
  {
    v322 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v322)
      return 3;
    goto LABEL_169;
  }
  if ((_DWORD)v1866 != 1)
  {
    v330 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v330)
      return 3;
    goto LABEL_173;
  }
  v1891 = v76;
  v1865 = v45;
  if ((_DWORD)v100 != 1)
  {
    v362 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v362)
      return 3;
    goto LABEL_427;
  }
  if ((_DWORD)v94 != 1)
  {
    v370 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v370)
      return 3;
    goto LABEL_195;
  }
  if ((_DWORD)v96 != 1)
  {
    v393 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v393)
      return 3;
    goto LABEL_209;
  }
  if ((_DWORD)v1893 != 1)
  {
    v409 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v409)
      return 3;
    goto LABEL_421;
  }
  if ((_DWORD)v99)
  {
    v285 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v285)
      return 3;
    goto LABEL_136;
  }
  if ((_DWORD)v101)
  {
    v425 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v425)
      return 3;
    goto LABEL_222;
  }
  if ((_DWORD)v102)
  {
    v441 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v441)
      return 3;
    goto LABEL_230;
  }
  if (v1853 != 1)
  {
    v489 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v489)
      return 3;
    goto LABEL_674;
  }
  if (v1852 != 1)
  {
    v515 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v515)
      return 3;
    goto LABEL_680;
  }
  if (v1868 != 1)
  {
    v531 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v531)
      return 3;
    goto LABEL_713;
  }
  if ((v45 & 0x4000) == 0)
  {
    v465 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v465)
      return 3;
    goto LABEL_244;
  }
  if (HIWORD(v45) != 1)
  {
    v571 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v571)
      ZinValidateTd<4u>::Test(v571, v572, v573, v574, v575, v576, v577, v578);
    return 3;
  }
  if (v1881 == 4)
  {
    v547 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v547)
      return 3;
    goto LABEL_282;
  }
  if (((*(_DWORD *)(a3 + 924) ^ *(_DWORD *)(a3 + 492)) & 3) != 0)
  {
    v587 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v587)
      return 3;
    goto LABEL_299;
  }
  if ((v49 & 8) == 0)
  {
    v604 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v604)
      return 3;
    goto LABEL_310;
  }
  if ((v49 & 0x10) != 0)
  {
    v631 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v631)
      return 3;
    goto LABEL_342;
  }
  if ((v49 & 0x4000) != 0)
  {
    v639 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v639)
      return 3;
    goto LABEL_346;
  }
  v621 = *(_DWORD *)(a3 + 528) & 0x7FFF;
  if (v621 != 1)
    v621 = v71 % v621 == 1;
  if (!(_DWORD)v14)
    v621 = 1;
  if (!(_DWORD)v5 && v621)
  {
    if (v48 > 1)
    {
      if (v72 % *(_QWORD *)(v35 + 1856) <= *(_QWORD *)(v35 + 1872))
      {
        v761 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v761)
          return 3;
        goto LABEL_423;
      }
    }
    else if (v72 % *(_QWORD *)(v35 + 1864) <= *(_QWORD *)(v35 + 1856))
    {
      v613 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v613)
        return 3;
      goto LABEL_325;
    }
  }
  LOWORD(v45) = v1865;
  if (!(_DWORD)v5 && (*(_DWORD *)(a3 + 528) & 0x7FFF0000) != 0)
  {
    v663 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v663)
      return 3;
    goto LABEL_360;
  }
LABEL_72:
  v169 = (v3 >> 19) & 7;
  if ((v3 & 0x10000000) != 0)
  {
    v234 = v94;
    v235 = v45;
    if (*(_QWORD *)(v35 + 1088) < v72)
    {
      v236 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v236)
        ZinValidateTd<11u>::Test(v236, v237, v238, v239, v240, v241, v242, v243);
      return 3;
    }
    if (*(_QWORD *)(v35 + 1080) < v97)
    {
      v277 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v277)
        ZinValidateTd<11u>::Test(v277, v278, v279, v280, v281, v282, v283, v284);
      return 3;
    }
    v1859 = v49;
    v309 = 1 << v98 << v169;
    if (*(_BYTE *)(v1878 + 527) || (v310 = *(unsigned __int8 *)(v35 + 1270), *(_BYTE *)(v35 + 1270)))
    {
      v311 = v72;
      v310 = v309 >= v97;
    }
    else
    {
      v311 = v72;
    }
    if (v1841 <= 1)
    {
      v312 = (v309 & 0xF) != 0 ? v310 : 1;
      if ((v312 & 1) == 0)
      {
        v354 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v354)
          ZinValidateTd<11u>::Test(v354, v355, v356, v357, v358, v359, v360, v361);
        return 3;
      }
    }
    v313 = (v309 & 7) == 0 || v78;
    if (((v313 | v310) & 1) == 0)
    {
      v338 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v338)
        ZinValidateTd<11u>::Test(v338, v339, v340, v341, v342, v343, v344, v345);
      return 3;
    }
    if (v1881 == 4 && v98 >= 5)
    {
      v314 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v314)
        ZinValidateTd<11u>::Test(v314, v315, v316, v317, v318, v319, v320, v321);
      return 3;
    }
    LOBYTE(v49) = v1859;
    if (v1853 != 1 || (v72 = v311, v169 = (v3 >> 19) & 7, v1852 != 1) || (LOWORD(v45) = v235, v94 = v234, v1868 != 1))
    {
      v293 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v293)
        return 3;
      goto LABEL_614;
    }
  }
  v1863 = v45;
  if (v99 >= v1872 || *(_QWORD *)(v35 + 144) < v99)
  {
    v170 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v170)
      ZinValidateTd<4u>::Test(v170, v171, v172, v173, v174, v175, v176, v177);
    return 3;
  }
  if (v101 >= v1866 || *(_QWORD *)(v35 + 152) < v101)
  {
    v301 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v301)
      ZinValidateTd<4u>::Test(v301, v302, v303, v304, v305, v306, v307, v308);
    return 3;
  }
  v1884 = v169;
  v1889 = v94;
  v1871 = v72;
  v1860 = v49;
  v1839 = v71;
  v1856 = v35;
  v1886 = v95;
  if (v102 >= v100 || *(_QWORD *)(v35 + 160) < v102)
  {
    v346 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v346)
      ZinValidateTd<11u>::Test(v346, v347, v348, v349, v350, v351, v352, v353);
    return 3;
  }
  v378 = v1877 & 0x7FFF;
  v379 = ((int)v72 - 1) * (uint64_t)(int)v94;
  v380 = v379 - v99;
  if ((uint64_t)(v379 - v99) >= v378)
  {
    v401 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v401)
      ZinValidateTd<4u>::Test(v401, v402, v403, v404, v405, v406, v407, v408);
    return 3;
  }
  v381 = ((int)v71 - 1) * (uint64_t)(int)v96;
  v382 = v381 - v101;
  v1882 = (v1877 >> 16) & 0x7FFF;
  if ((uint64_t)(v381 - v101) >= v1882)
  {
    v417 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v417)
      ZinValidateTd<4u>::Test(v417, v418, v419, v420, v421, v422, v423, v424);
    return 3;
  }
  v383 = v1875 & 0x7FFF;
  v384 = (v383 - 1) * (uint64_t)(int)v1893 - v102;
  v1879 = v1876 & 0x7FFF;
  if (v384 >= v1879)
  {
    v433 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v433)
      ZinValidateTd<11u>::Test(v433, v434, v435, v436, v437, v438, v439, v440);
    return 3;
  }
  if (v89)
  {
    if ((v380 & 0x8000000000000000) != 0)
    {
      v457 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v457)
        ZinValidateTd<11u>::Test(v457, v458, v459, v460, v461, v462, v463, v464);
      return 3;
    }
    if ((v382 & 0x8000000000000000) != 0)
    {
      v473 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v473)
        ZinValidateTd<11u>::Test(v473, v474, v475, v476, v477, v478, v479, v480);
      return 3;
    }
    if (v384 < 0)
    {
      v497 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v497)
        ZinValidateTd<11u>::Test(v497, v498, v499, v500, v501, v502, v503, v504);
      return 3;
    }
  }
  if ((uint64_t)(v380 + ((v1872 - 1 + v94) & -v94)) < v378)
  {
    v385 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v385)
      ZinValidateTd<6u>::Test(v385, v386, v387, v388, v389, v390, v391, v392);
    return 3;
  }
  if ((uint64_t)(v382 + ((v96 + v1866 - 1) & -v96)) < v1882)
  {
    v449 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v449)
      ZinValidateTd<6u>::Test(v449, v450, v451, v452, v453, v454, v455, v456);
    return 3;
  }
  if ((uint64_t)(v384 + ((v100 + v1893 - 1) & -v1893)) < v1879)
  {
    v481 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v481)
      ZinValidateTd<11u>::Test(v481, v482, v483, v484, v485, v486, v487, v488);
    return 3;
  }
  v505 = v94 * v96;
  v506 = *(_QWORD *)(v1856 + 368);
  if ((v1893 * v1886) * (unint64_t)(v94 * v96) > v506)
  {
    v507 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v507)
      ZinValidateTd<11u>::Test(v507, v508, v509, v510, v511, v512, v513, v514);
    return 3;
  }
  if (v1868 * v97 * (unint64_t)(v1853 * v1852) > v506)
  {
    v523 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v523)
      ZinValidateTd<11u>::Test(v523, v524, v525, v526, v527, v528, v529, v530);
    return 3;
  }
  if (v1853 * (unint64_t)v1871 > *(_QWORD *)(v1856 + 320))
  {
    v539 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v539)
      ZinValidateTd<11u>::Test(v539, v540, v541, v542, v543, v544, v545, v546);
    return 3;
  }
  if (v1852 * (unint64_t)v71 > *(_QWORD *)(v1856 + 336))
  {
    v555 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v555)
      ZinValidateTd<11u>::Test(v555, v556, v557, v558, v559, v560, v561, v562);
    return 3;
  }
  if (v1868 * (unint64_t)(v1875 & 0x7FFF) > *(_QWORD *)(v1856 + 352))
  {
    v579 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v579)
      ZinValidateTd<11u>::Test(v579, v580, v581, v582, v583, v584, v585, v586);
    return 3;
  }
  if ((v1863 & 0x4000) != 0 && (v3 & 0x20000000) == 0)
  {
    v595 = v1886 / v103;
    if (v1886 % v103)
    {
      v596 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v596)
        ZinValidateTd<4u>::Test(v596, v597, v598, v599, v600, v601, v602, v603);
      return 3;
    }
    v622 = v97 / v595;
    if (v97 % v595)
    {
      v623 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v623)
        ZinValidateTd<4u>::Test(v623, v624, v625, v626, v627, v628, v629, v630);
      return 3;
    }
    if (v622 > 1 << v98)
    {
      v647 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v647)
        ZinValidateTd<4u>::Test(v647, v648, v649, v650, v651, v652, v653, v654);
      return 3;
    }
    if (v622 < 1 << v98 && v622 << v1884 < v97)
    {
      v655 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v655)
        ZinValidateTd<4u>::Test(v655, v656, v657, v658, v659, v660, v661, v662);
      return 3;
    }
    if (v622 >= 2 && (v595 & ((1 << v1884) + 0x1FFFF)) != 0)
    {
      v671 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v671)
        ZinValidateTd<4u>::Test(v671, v672, v673, v674, v675, v676, v677, v678);
      return 3;
    }
  }
  if ((_DWORD)v48 == 2)
  {
    if ((_DWORD)v94 == 2)
    {
      if (*(_QWORD *)(v1856 + 80) < v1872)
      {
        v679 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v679)
          ZinValidateTd<6u>::Test(v679, v680, v681, v682, v683, v684, v685, v686);
        return 3;
      }
    }
    else if (*(_QWORD *)(v1856 + 88) < v1872)
    {
      v695 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v695)
        ZinValidateTd<4u>::Test(v695, v696, v697, v698, v699, v700, v701, v702);
      return 3;
    }
  }
  else if ((_DWORD)v94 == 2)
  {
    if (*(_QWORD *)(v1856 + 56) < v1872)
    {
      v687 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v687)
        ZinValidateTd<6u>::Test(v687, v688, v689, v690, v691, v692, v693, v694);
      return 3;
    }
  }
  else if (*(_QWORD *)(v1856 + 64) < v1872)
  {
    v703 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v703)
      ZinValidateTd<4u>::Test(v703, v704, v705, v706, v707, v708, v709, v710);
    return 3;
  }
  if ((_DWORD)v96 == 2)
  {
    if (*(_QWORD *)(v1856 + 104) < v1866)
    {
      v711 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v711)
        ZinValidateTd<6u>::Test(v711, v712, v713, v714, v715, v716, v717, v718);
      return 3;
    }
  }
  else if (*(_QWORD *)(v1856 + 112) < v1866)
  {
    v719 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v719)
      ZinValidateTd<4u>::Test(v719, v720, v721, v722, v723, v724, v725, v726);
    return 3;
  }
  if (v90)
  {
    if ((_DWORD)v1893 == 2)
    {
      if (*(_QWORD *)(v1856 + 176) < v100)
      {
        v727 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v727)
          ZinValidateTd<11u>::Test(v727, v728, v729, v730, v731, v732, v733, v734);
        return 3;
      }
    }
    else if (*(_QWORD *)(v1856 + 168) < v100)
    {
      v743 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v743)
        ZinValidateTd<11u>::Test(v743, v744, v745, v746, v747, v748, v749, v750);
      return 3;
    }
  }
  else if ((_DWORD)v1893 == 2)
  {
    if (*(_QWORD *)(v1856 + 120) < v100)
    {
      v735 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v735)
        ZinValidateTd<11u>::Test(v735, v736, v737, v738, v739, v740, v741, v742);
      return 3;
    }
  }
  else if (*(_QWORD *)(v1856 + 128) < v100)
  {
    v751 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v751)
      ZinValidateTd<11u>::Test(v751, v752, v753, v754, v755, v756, v757, v758);
    return 3;
  }
  v759 = v1873 & 0xF;
  v760 = v89 - 7;
  if (v89)
  {
    if (v1853 != 1 || v1852 != 1 || v1868 != 1)
    {
      v293 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v293)
        return 3;
      goto LABEL_614;
    }
    if ((_DWORD)v1893 == 1)
    {
      if ((_DWORD)v100 == 1)
      {
        if ((_DWORD)v1886 == (_DWORD)v97)
        {
          if ((_DWORD)v1879 != v383)
          {
            v769 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v769)
              ZinValidateTd<11u>::Test(v769, v770, v771, v772, v773, v774, v775, v776);
            return 3;
          }
          if (v1891 == 2)
          {
            v194 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!v194)
              return 3;
            goto LABEL_621;
          }
          if (*(_QWORD *)(v1856 + 976) > v759)
          {
            v777 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v777)
              ZinValidateTd<11u>::Test(v777, v778, v779, v780, v781, v782, v783, v784);
            return 3;
          }
          v785 = v1873 >> 4;
          if (*(_BYTE *)(v1856 + 1267) && *(_QWORD *)(v1856 + 984) < (unint64_t)(v785 + v759))
          {
            v786 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v786)
              ZinValidateTd<11u>::Test(v786, v787, v788, v789, v790, v791, v792, v793);
            return 3;
          }
          v794 = (v1874 >> 21) & 0x1F;
          v795 = (v1874 >> 16) & 0x1F;
          if (v794 > v795)
          {
            v796 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v796)
              ZinValidateTd<11u>::Test(v796, v797, v798, v799, v800, v801, v802, v803);
            return 3;
          }
          v804 = (v1874 >> 26) & 0x1F;
          if (v804 > v795)
          {
            v805 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v805)
              ZinValidateTd<11u>::Test(v805, v806, v807, v808, v809, v810, v811, v812);
            return 3;
          }
          if (v795 > v1880)
          {
            v813 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v813)
              ZinValidateTd<11u>::Test(v813, v814, v815, v816, v817, v818, v819, v820);
            return 3;
          }
          if (v1839 - v795 + v794 + v804 > *(_QWORD *)(v1856 + 1008) * (v1880 - v795))
          {
            v821 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v821)
              ZinValidateTd<11u>::Test(v821, v822, v823, v824, v825, v826, v827, v828);
            return 3;
          }
          if ((v1851 & 2) != 0 && (v92 & 2) != 0)
          {
            v829 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v829)
              ZinValidateTd<11u>::Test(v829, v830, v831, v832, v833, v834, v835, v836);
            return 3;
          }
          if ((v1851 & 0x20) != 0 && (v92 & 0x1000000) != 0)
          {
            v837 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v837)
              ZinValidateTd<11u>::Test(v837, v838, v839, v840, v841, v842, v843, v844);
            return 3;
          }
          v845 = v93 & 3;
          if (v89 == 1)
          {
            if (*(_QWORD *)(v1856 + 1016) < v1872)
            {
              v846 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v846)
                ZinValidateTd<11u>::Test(v846, v847, v848, v849, v850, v851, v852, v853);
              return 3;
            }
            if (*(_QWORD *)(v1856 + 1024) < v1866)
            {
              v862 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v862)
                ZinValidateTd<11u>::Test(v862, v863, v864, v865, v866, v867, v868, v869);
              return 3;
            }
            if ((uint64_t)(v1872 - v99 + v379) < v378)
            {
              v878 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v878)
                ZinValidateTd<11u>::Test(v878, v879, v880, v881, v882, v883, v884, v885);
              return 3;
            }
            if ((uint64_t)(v1866 - v101 + v381) < v1882)
            {
              v894 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v894)
                ZinValidateTd<11u>::Test(v894, v895, v896, v897, v898, v899, v900, v901);
              return 3;
            }
            if ((v1851 & 8) != 0)
            {
              v926 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v926)
                ZinValidateTd<11u>::Test(v926, v927, v928, v929, v930, v931, v932, v933);
              return 3;
            }
            if ((v1851 & 1) == 0)
            {
              if ((v1851 & 2) == 0)
              {
                if ((v1851 & 4) != 0)
                {
                  v982 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (v982)
                    ZinValidateTd<11u>::Test(v982, v983, v984, v985, v986, v987, v988, v989);
                  return 3;
                }
                if ((v1851 & 0x80) != 0)
                {
                  v998 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (v998)
                    ZinValidateTd<11u>::Test(v998, v999, v1000, v1001, v1002, v1003, v1004, v1005);
                  return 3;
                }
                if ((v1851 & 0x10) == 0)
                {
                  if ((v1851 & 0x20) == 0)
                  {
                    if ((v1851 & 0x40) != 0)
                    {
                      v1637 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (v1637)
                        ZinValidateTd<11u>::Test(v1637, v1638, v1639, v1640, v1641, v1642, v1643, v1644);
                      return 3;
                    }
                    if ((v1851 & 0x100) != 0)
                    {
                      v1677 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (v1677)
                        ZinValidateTd<11u>::Test(v1677, v1678, v1679, v1680, v1681, v1682, v1683, v1684);
                      return 3;
                    }
                    if ((v1851 & 0x200) != 0)
                    {
                      v1702 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (v1702)
                        ZinValidateTd<11u>::Test(v1702, v1703, v1704, v1705, v1706, v1707, v1708, v1709);
                      return 3;
                    }
                    if ((v1851 & 0x400) != 0)
                    {
                      v910 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (v910)
                        ZinValidateTd<11u>::Test(v910, v911, v912, v913, v914, v915, v916, v917);
                      return 3;
                    }
LABEL_540:
                    if (v845 == 3)
                    {
                      if (v1891 != 3)
                      {
                        v1006 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v1006)
                          ZinValidateTd<11u>::Test(v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013);
                        return 3;
                      }
                    }
                    else
                    {
                      if (v845 == 2)
                      {
                        if (v1891 != 1)
                        {
                          v990 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (v990)
                            ZinValidateTd<11u>::Test(v990, v991, v992, v993, v994, v995, v996, v997);
                          return 3;
                        }
                        goto LABEL_557;
                      }
                      if (v1891)
                      {
                        v186 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (!v186)
                          return 3;
                        goto LABEL_556;
                      }
                    }
LABEL_557:
                    if (v760 >= 0xFFFFFFFE)
                    {
                      if (v845 == 1)
                      {
                        v1022 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v1022)
                          ZinValidateTd<11u>::Test(v1022, v1023, v1024, v1025, v1026, v1027, v1028, v1029);
                        return 3;
                      }
                      if ((_DWORD)v795)
                      {
                        v1046 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v1046)
                          ZinValidateTd<11u>::Test(v1046, v1047, v1048, v1049, v1050, v1051, v1052, v1053);
                        return 3;
                      }
                      if (*(_QWORD *)(v1856 + 960) < v97
                        && (v378 > 1 << v759 || v1882 > 1 << v785 || (_DWORD)v1879 != 1))
                      {
                        v1629 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v1629)
                          ZinValidateTd<11u>::Test(v1629, v1630, v1631, v1632, v1633, v1634, v1635, v1636);
                        return 3;
                      }
                    }
                    if ((v1851 & 0x100) != 0 && ((v1851 >> 9) & 1) != 0 && *(_QWORD *)(v1856 + 1064) < v1886)
                    {
                      v1014 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (v1014)
                        ZinValidateTd<11u>::Test(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1021);
                      return 3;
                    }
                    if ((v1851 & 0x400) != 0)
                    {
                      if (*(_QWORD *)(v1856 + 1072) < v97)
                      {
                        v1030 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v1030)
                          ZinValidateTd<11u>::Test(v1030, v1031, v1032, v1033, v1034, v1035, v1036, v1037);
                        return 3;
                      }
                      if (v89 - 2 <= 2)
                      {
                        if ((_DWORD)v1871 != 1)
                        {
                          v1710 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (v1710)
                            ZinValidateTd<11u>::Test(v1710, v1711, v1712, v1713, v1714, v1715, v1716, v1717);
                          return 3;
                        }
                        if ((_DWORD)v1839 != 1)
                        {
                          v1726 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (v1726)
                            ZinValidateTd<11u>::Test(v1726, v1727, v1728, v1729, v1730, v1731, v1732, v1733);
                          return 3;
                        }
                      }
                    }
                    goto LABEL_582;
                  }
                  v854 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (!v854)
                    return 3;
LABEL_477:
                  ZinValidateTd<17u>::Test(v854, v855, v856, v857, v858, v859, v860, v861);
                  return 3;
                }
                v1038 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v1038)
                  return 3;
LABEL_571:
                ZinValidateTd<17u>::Test(v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045);
                return 3;
              }
              v966 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (!v966)
                return 3;
LABEL_528:
              ZinValidateTd<17u>::Test(v966, v967, v968, v969, v970, v971, v972, v973);
              return 3;
            }
            v942 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!v942)
              return 3;
LABEL_517:
            ZinValidateTd<17u>::Test(v942, v943, v944, v945, v946, v947, v948, v949);
            return 3;
          }
          if (v99 | v101)
          {
            v870 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v870)
              ZinValidateTd<11u>::Test(v870, v871, v872, v873, v874, v875, v876, v877);
            return 3;
          }
          if ((_DWORD)v1872 == 1 && (_DWORD)v1866 == 1)
          {
            if ((_DWORD)v1889 != 1)
            {
              v886 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v886)
                ZinValidateTd<11u>::Test(v886, v887, v888, v889, v890, v891, v892, v893);
              return 3;
            }
            if ((_DWORD)v1882 != (_DWORD)v1839)
            {
              v902 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v902)
                ZinValidateTd<11u>::Test(v902, v903, v904, v905, v906, v907, v908, v909);
              return 3;
            }
            if ((_DWORD)v378 != (_DWORD)v1871)
            {
              v918 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v918)
                ZinValidateTd<11u>::Test(v918, v919, v920, v921, v922, v923, v924, v925);
              return 3;
            }
            if ((v1851 & 0x100) != 0)
            {
              if ((v1851 & 1) == 0 && (_DWORD)v378 != 1)
              {
                v934 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v934)
                  ZinValidateTd<11u>::Test(v934, v935, v936, v937, v938, v939, v940, v941);
                return 3;
              }
              if ((v1851 & 2) == 0 && (_DWORD)v1882 != 1)
              {
                v958 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v958)
                  ZinValidateTd<11u>::Test(v958, v959, v960, v961, v962, v963, v964, v965);
                return 3;
              }
            }
            if ((v1851 & 0x200) != 0)
            {
              if ((v1851 & 0x10) == 0 && (_DWORD)v378 != 1 && v89 != 4)
              {
                v950 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v950)
                  ZinValidateTd<11u>::Test(v950, v951, v952, v953, v954, v955, v956, v957);
                return 3;
              }
              if ((v1851 & 0x20) == 0 && (_DWORD)v1882 != 1 && v89 != 4)
              {
                v974 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v974)
                  ZinValidateTd<11u>::Test(v974, v975, v976, v977, v978, v979, v980, v981);
                return 3;
              }
            }
            if (v89 == 4)
            {
              if ((v1851 & 1) != 0)
              {
                v942 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v942)
                  return 3;
                goto LABEL_517;
              }
              if ((v1851 & 2) != 0)
              {
                v966 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v966)
                  return 3;
                goto LABEL_528;
              }
              if ((v1851 & 0x10) != 0)
              {
                v1038 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v1038)
                  return 3;
                goto LABEL_571;
              }
              if ((v1851 & 0x20) != 0)
              {
                v854 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (!v854)
                  return 3;
                goto LABEL_477;
              }
            }
            else if (v760 >= 0xFFFFFFFE)
            {
              goto LABEL_540;
            }
            if (!v1891)
              goto LABEL_557;
            v186 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (!v186)
              return 3;
LABEL_556:
            ZinValidateTd<10u>::Test(v186, v187, v188, v189, v190, v191, v192, v193);
            return 3;
          }
          v252 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v252)
            return 3;
LABEL_114:
          ZinValidateTd<19u>::Test(v252, v253, v254, v255, v256, v257, v258, v259);
          return 3;
        }
        v218 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v218)
          return 3;
LABEL_97:
        ZinValidateTd<10u>::Test(v218, v219, v220, v221, v222, v223, v224, v225);
        return 3;
      }
      v362 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v362)
        return 3;
LABEL_427:
      ZinValidateTd<17u>::Test(v362, v363, v364, v365, v366, v367, v368, v369);
      return 3;
    }
    v409 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v409)
      return 3;
LABEL_421:
    ZinValidateTd<17u>::Test(v409, v410, v411, v412, v413, v414, v415, v416);
    return 3;
  }
LABEL_582:
  if (!*(_BYTE *)(v1856 + 1234))
  {
    if ((v505 * v1886) * (unint64_t)v91 > v506)
    {
      v1063 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1063)
        ZinValidateTd<6u>::Test(v1063, v1064, v1065, v1066, v1067, v1068, v1069, v1070);
      return 3;
    }
    if (v1853 * v1852 * v97 * (unint64_t)v91 > v506)
    {
      v1081 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1081)
        ZinValidateTd<6u>::Test(v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088);
      return 3;
    }
  }
  if ((v1847 & 8) == 0)
    goto LABEL_584;
  v1071 = v1849 & 3;
  if (v1071 == 2)
  {
    v1072 = 1.25;
  }
  else if (v1071 == 3)
  {
    v1072 = 4.0;
  }
  else
  {
    v1072 = 1.0;
    if (v1071 == 1)
      v1072 = 2.0;
  }
  v1089 = (v1849 >> 24) & 0xF;
  v1090 = v1071 == 1 && v1841 == 2;
  if (v1090)
    v1072 = 2.0;
  if (v89)
  {
    if (((v1851 >> 10) & 1) == 0)
      v97 = (1 << v759) >> ((_DWORD)v48 == 2);
    if ((((uint64_t)(float)(v1072 * (float)(uint64_t)v97) * v1089) & 0x3FLL) == 0
      || v760 > 0xFFFFFFFD
      || v1871 <= 1 << v759)
    {
      goto LABEL_584;
    }
    v1091 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v1091)
      return 3;
LABEL_637:
    ZinValidateTd<17u>::Test(v1091, v1092, v1093, v1094, v1095, v1096, v1097, v1098);
    return 3;
  }
  v1099 = 0x100u >> (BYTE2(v3) & 7);
  v1100 = (1 << v1884 << v98);
  if ((v3 & 0x10000000) != 0)
    v1101 = v97 > v1100;
  else
    v1101 = (*(_BYTE *)(a3 + 540) & 0xC) == 0 && v1871 > v1099;
  v1102 = !v1101;
  v1103 = v1099 >> ((_DWORD)v48 == 2);
  if ((v3 & 0x10000000) == 0)
    v1100 = v1103 * v1853;
  v1104 = v1072 * (float)v1100;
  v1106 = ((_DWORD)v1089 != 3 || *(_BYTE *)(v1856 + 1313) == 0)
       && ((((uint64_t)v1104 * v1089) & 0x8000000000000000) != 0
        || (((uint64_t)v1104 * v1089) & 0x800000000000003FLL) == 0);
  if (!v1106 && !v1102)
  {
    v1091 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v1091)
      return 3;
    goto LABEL_637;
  }
  v1107 = 0;
  v1108 = WORD1(v1849) & 7;
  v1109 = 1;
  v1110 = 4;
  do
  {
    if ((v1109 & (v1849 >> 28)) != 0)
      ++v1107;
    v1109 *= 2;
    --v1110;
  }
  while (v1110);
  v1101 = v1089 > v1107;
  v1111 = v1089 - v1107;
  if (!v1101)
  {
    v1137 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1137)
      ZinValidateTd<6u>::Test(v1137, v1138, v1139, v1140, v1141, v1142, v1143, v1144);
    return 3;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if (v1871 > v1103 && (v1103 * v1853 % v1111 || v1108 != 0))
    {
      v1173 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1173)
        ZinValidateTd<11u>::Test(v1173, v1174, v1175, v1176, v1177, v1178, v1179, v1180);
      return 3;
    }
  }
  else
  {
    v1112 = (1 << (v1884 + v98));
    if (v97 > v1112)
    {
      if (v1112 % v1111)
      {
        v1113 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1113)
          ZinValidateTd<11u>::Test(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120);
        return 3;
      }
      if (v1108)
      {
        v1213 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1213)
          ZinValidateTd<11u>::Test(v1213, v1214, v1215, v1216, v1217, v1218, v1219, v1220);
        return 3;
      }
    }
  }
LABEL_584:
  if ((*(_BYTE *)(a3 + 928) & 0x40) != 0)
  {
    if (v1853 != 1 || v1852 != 1 || v1868 != 1)
    {
      v293 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (!v293)
        return 3;
      goto LABEL_614;
    }
    if ((_DWORD)v1889 != 1 || (_DWORD)v96 != 1 || (_DWORD)v1893 != 1)
    {
      v1129 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1129)
        ZinValidateTd<10u>::Test(v1129, v1130, v1131, v1132, v1133, v1134, v1135, v1136);
      return 3;
    }
    if ((_DWORD)v1872 != 1 || (_DWORD)v1866 != 1 || (_DWORD)v100 != 1)
    {
      v1145 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1145)
        ZinValidateTd<10u>::Test(v1145, v1146, v1147, v1148, v1149, v1150, v1151, v1152);
      return 3;
    }
    if (v1886 <= 1)
    {
      v1181 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1181)
        ZinValidateTd<11u>::Test(v1181, v1182, v1183, v1184, v1185, v1186, v1187, v1188);
      return 3;
    }
    if ((v1863 & 0x4000) != 0)
    {
      v1197 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1197)
        ZinValidateTd<11u>::Test(v1197, v1198, v1199, v1200, v1201, v1202, v1203, v1204);
      return 3;
    }
    if ((*(_DWORD *)(a3 + 540) & 0xC) == 4)
    {
      v1073 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1073)
        ZinValidateTd<11u>::Test(v1073, v1074, v1075, v1076, v1077, v1078, v1079, v1080);
      return 3;
    }
    if ((v1860 & 8) != 0)
    {
      v1232 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1232)
        ZinValidateTd<11u>::Test(v1232, v1233, v1234, v1235, v1236, v1237, v1238, v1239);
      return 3;
    }
    if ((v3 & 8) == 0)
      goto LABEL_586;
    goto LABEL_618;
  }
  if ((v3 & 8) == 0)
    goto LABEL_586;
  if (v1853 != 1)
  {
    v489 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v489)
      return 3;
    goto LABEL_674;
  }
  if (v1852 != 1)
  {
    v515 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v515)
      return 3;
    goto LABEL_680;
  }
  if (v1868 != 1)
  {
    v531 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v531)
      return 3;
    goto LABEL_713;
  }
LABEL_618:
  if ((v3 & 0x10000000) != 0)
  {
    v1189 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1189)
      ZinValidateTd<17u>::Test(v1189, v1190, v1191, v1192, v1193, v1194, v1195, v1196);
    return 3;
  }
  if (v1891 == 2)
  {
    v194 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!v194)
      return 3;
    goto LABEL_621;
  }
  if (((_DWORD)v48 == 2) != (v1841 == 2))
  {
    v1205 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1205)
      ZinValidateTd<11u>::Test(v1205, v1206, v1207, v1208, v1209, v1210, v1211, v1212);
    return 3;
  }
  v1221 = v1871 << ((_DWORD)v48 == 2);
  v1222 = ((uint64_t)(double)(uint64_t)((v1872 - 1) / v1889) + v1871) << ((_DWORD)v48 == 2);
  v1223 = (*(_DWORD *)(a3 + 540) >> 2) & 3;
  if (v1223 == 3)
  {
    if (v1221 <= *(_QWORD *)(v1856 + 1176))
    {
      v1306 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1306)
        ZinValidateTd<11u>::Test(v1306, v1307, v1308, v1309, v1310, v1311, v1312, v1313);
      return 3;
    }
    if (v1222 > *(_QWORD *)(v1856 + 1184))
    {
      v1240 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1240)
        ZinValidateTd<11u>::Test(v1240, v1241, v1242, v1243, v1244, v1245, v1246, v1247);
      return 3;
    }
  }
  else if (v1223 == 2)
  {
    if (v1221 <= *(_QWORD *)(v1856 + 1160))
    {
      v1298 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1298)
        ZinValidateTd<11u>::Test(v1298, v1299, v1300, v1301, v1302, v1303, v1304, v1305);
      return 3;
    }
    if (v1222 > *(_QWORD *)(v1856 + 1168))
    {
      v1224 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v1224)
        ZinValidateTd<11u>::Test(v1224, v1225, v1226, v1227, v1228, v1229, v1230, v1231);
      return 3;
    }
  }
LABEL_586:
  v1054 = *(_DWORD *)(a3 + 792);
  if (ZinExtractLSBs(*(unsigned __int16 *)(a3 + 668), 2) != v1054 >> 30)
  {
    v1121 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1121)
      ZinValidateTd<11u>::Test(v1121, v1122, v1123, v1124, v1125, v1126, v1127, v1128);
    return 3;
  }
  if ((*(_BYTE *)(a3 + 986) & 7) != 0)
  {
    v1055 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v1055)
      ZinValidateTd<6u>::Test(v1055, v1056, v1057, v1058, v1059, v1060, v1061, v1062);
    return 3;
  }
  result = ZinValidateTd<11u>::CheckKMEMBufferSizes(v1856, a3);
  if (!(_DWORD)result)
  {
    result = ZinValidateTd<11u>::CheckInRangeDmaAccess(v1856, a2, a3);
    if (!(_DWORD)result)
    {
      v1153 = *(_DWORD *)(a3 + 568);
      if ((v1153 & 0xD0) != 0xC0)
      {
        v1154 = v1153 >> 4;
        if (v1154 != 2 && v1154 != 4)
        {
          v1256 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1256)
            ZinValidateTd<11u>::Test(v1256, v1257, v1258, v1259, v1260, v1261, v1262, v1263);
          return 3;
        }
      }
      v1155 = *(_DWORD *)(a3 + 576);
      if ((v1155 & 0xD0) != 0xC0)
      {
        v1156 = v1155 >> 4;
        if (v1156 != 2 && v1156 != 4)
        {
          v1282 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1282)
            ZinValidateTd<11u>::Test(v1282, v1283, v1284, v1285, v1286, v1287, v1288, v1289);
          return 3;
        }
      }
      if ((v1155 & 0xD) != 0xC)
      {
        v1157 = v1155 & 0xF;
        if (v1157 != 2 && v1157 != 4)
        {
          v1290 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1290)
            ZinValidateTd<11u>::Test(v1290, v1291, v1292, v1293, v1294, v1295, v1296, v1297);
          return 3;
        }
      }
      v1158 = *(_DWORD *)(a3 + 572);
      if ((v1158 & 0xD0) != 0xC0)
      {
        v1159 = v1158 >> 4;
        if (v1159 != 2 && v1159 != 4)
        {
          v1314 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1314)
            ZinValidateTd<11u>::Test(v1314, v1315, v1316, v1317, v1318, v1319, v1320, v1321);
          return 3;
        }
      }
      v1160 = *(_DWORD *)(a3 + 580);
      if ((v1160 & 0xD0) != 0xC0)
      {
        v1161 = v1160 >> 4;
        if (v1161 != 2 && v1161 != 4)
        {
          v1322 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1322)
            ZinValidateTd<11u>::Test(v1322, v1323, v1324, v1325, v1326, v1327, v1328, v1329);
          return 3;
        }
      }
      if ((v1160 & 0xD) != 0xC)
      {
        v1162 = v1160 & 0xF;
        if (v1162 != 2 && v1162 != 4)
        {
          v1330 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1330)
            ZinValidateTd<11u>::Test(v1330, v1331, v1332, v1333, v1334, v1335, v1336, v1337);
          return 3;
        }
      }
      v1163 = *(_DWORD *)(a3 + 952);
      if ((v1163 & 0xF0) != 0x30 && (v1163 & 0xD0) != 0xD0)
      {
        v1164 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v1164)
          ZinValidateTd<11u>::Test(v1164, v1165, v1166, v1167, v1168, v1169, v1170, v1171);
        return 3;
      }
      v1248 = 60;
      v1249 = MEMORY[0x24BDACB70];
      do
      {
        v1250 = *(_DWORD *)(a3 + v1248) >> 4;
        if ((*(_DWORD *)(a3 + v1248) & 0xD0) != 0xC0 && v1250 != 2 && v1250 != 4)
        {
          if (os_log_type_enabled(v1249, OS_LOG_TYPE_ERROR))
            ZinValidateTd<11u>::Test(v1896, v1897, v1254);
          if (v1250 != 4 && v1250 != 2)
            return 3;
        }
        v1248 += 4;
      }
      while (v1248 != 124);
      v1264 = 252;
      v1265 = MEMORY[0x24BDACB70];
      do
      {
        v1266 = *(_DWORD *)(a3 + v1264) >> 4;
        if ((*(_DWORD *)(a3 + v1264) & 0xD0) != 0xC0 && v1266 != 2 && v1266 != 4)
        {
          if (os_log_type_enabled(v1265, OS_LOG_TYPE_ERROR))
            ZinValidateTd<11u>::Test(v1894, &v1895, v1270);
          if (v1266 != 4 && v1266 != 2)
            return 3;
        }
        v1264 += 4;
      }
      while (v1264 != 268);
      v1272 = *(_DWORD *)(a3 + 540);
      v1273 = *(_DWORD *)(a3 + 656);
      if ((v1273 & 1) != 0 && (*(_DWORD *)(a3 + 540) & 1 | 2) == 3
        || (*(_BYTE *)(a3 + 704) & 7) != 0
        || ((v3 >> 4) & 5 | 2) != 2
        && (v1882 >= 2 && *(_DWORD *)(a3 + 592) <= 0x3Fu && ((v1851 >> 1) & 1) == 0
         || v1886 >= 2 && *(_DWORD *)(a3 + 596) <= 0x3Fu && ((v1851 >> 3) & 1) == 0
         || v1879 >= 2 && *(_DWORD *)(a3 + 600) <= 0x3Fu && ((v1851 >> 2) & 1) == 0
         || v91 >= 2 && *(_DWORD *)(a3 + 604) <= 0x3Fu))
      {
        if ((*(_DWORD *)(a3 + 568) & 0xF0) == 0x40)
        {
          v1274 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1274)
            ZinValidateTd<11u>::Test(v1274, v1275, v1276, v1277, v1278, v1279, v1280, v1281);
          return 3;
        }
        v1338 = *(_DWORD *)(a3 + 576);
        if ((v1338 & 0xF) == 4)
        {
          v1339 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1339)
            ZinValidateTd<11u>::Test(v1339, v1340, v1341, v1342, v1343, v1344, v1345, v1346);
          return 3;
        }
        if ((v1338 & 0xF0) == 0x40)
        {
          v1347 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1347)
            ZinValidateTd<11u>::Test(v1347, v1348, v1349, v1350, v1351, v1352, v1353, v1354);
          return 3;
        }
      }
      if ((v1273 & 1) != 0 && (v1272 & 2) != 0 || (*(_BYTE *)(a3 + 704) & 7) != 0)
        goto LABEL_820;
      if (((v3 >> 4) & 5 | 2) == 2)
      {
LABEL_843:
        if ((*(_DWORD *)(a3 + 492) & 0xC) != 8)
        {
          v1389 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!v1389)
            return 3;
          goto LABEL_850;
        }
        if (!v89)
        {
          v1406 = *(_DWORD *)(a3 + 532);
          if ((v1406 & 0xF0) != 0x10)
          {
            v1429 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1429)
              ZinValidateTd<11u>::Test(v1429, v1430, v1431, v1432, v1433, v1434, v1435, v1436);
            return 3;
          }
          if ((v1406 & 0xF) != 9)
          {
            v1446 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1446)
              ZinValidateTd<11u>::Test(v1446, v1447, v1448, v1449, v1450, v1451, v1452, v1453);
            return 3;
          }
          if (*(_WORD *)(a3 + 902) != 15360)
          {
            v1462 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1462)
              ZinValidateTd<11u>::Test(v1462, v1463, v1464, v1465, v1466, v1467, v1468, v1469);
            return 3;
          }
          if (*(_WORD *)(a3 + 906) != 15360)
          {
            v1478 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1478)
              ZinValidateTd<11u>::Test(v1478, v1479, v1480, v1481, v1482, v1483, v1484, v1485);
            return 3;
          }
          if (*(_DWORD *)(a3 + 908) != 1065353216)
          {
            v1517 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1517)
              ZinValidateTd<11u>::Test(v1517, v1518, v1519, v1520, v1521, v1522, v1523, v1524);
            return 3;
          }
          if (*(_WORD *)(a3 + 914) != 31744)
          {
            v1407 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1407)
              ZinValidateTd<11u>::Test(v1407, v1408, v1409, v1410, v1411, v1412, v1413, v1414);
            return 3;
          }
        }
LABEL_845:
        v1380 = *(_DWORD *)(a3 + 924);
        if ((v1380 & 4) == 0 && (*(_DWORD *)(a3 + 924) & 0xF0) != 0x80)
        {
          v1381 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1381)
            ZinValidateTd<11u>::Test(v1381, v1382, v1383, v1384, v1385, v1386, v1387, v1388);
          return 3;
        }
        v1397 = *(_DWORD *)(a3 + 928);
        if ((v1397 & 7) != 3 && (v1397 & 0xF00000) != 0x100000)
        {
          v1398 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1398)
            ZinValidateTd<11u>::Test(v1398, v1399, v1400, v1401, v1402, v1403, v1404, v1405);
          return 3;
        }
        v1415 = *(_DWORD *)(a3 + 568);
        if ((v1415 & 1) == 0 || (*(_DWORD *)(a3 + 540) & 1 | 2) != 3)
        {
          if ((*(_DWORD *)(a3 + 568) & 0xF0) != 0x20)
          {
            v1454 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1454)
              ZinValidateTd<11u>::Test(v1454, v1455, v1456, v1457, v1458, v1459, v1460, v1461);
            return 3;
          }
          v1437 = *(_DWORD *)(a3 + 576);
          if ((v1437 & 0xF0) != 0x20)
          {
            v1470 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1470)
              ZinValidateTd<11u>::Test(v1470, v1471, v1472, v1473, v1474, v1475, v1476, v1477);
            return 3;
          }
          if ((v1437 & 0xF) != 2)
          {
            v1499 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1499)
              ZinValidateTd<11u>::Test(v1499, v1500, v1501, v1502, v1503, v1504, v1505, v1506);
            return 3;
          }
          if ((v1415 & 0xFF00) != 0)
          {
            v1438 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1438)
              ZinValidateTd<11u>::Test(v1438, v1439, v1440, v1441, v1442, v1443, v1444, v1445);
            return 3;
          }
        }
        if ((*(_DWORD *)(a3 + 704) & 7) != 2)
        {
          if ((*(_DWORD *)(a3 + 704) & 7) == 0)
          {
            if ((v1415 & 1) != 0 && (v1272 & 2) != 0)
              goto LABEL_869;
            v1507 = *(_DWORD *)(a3 + 572);
            if ((v1507 & 0xF0) != 0x20)
            {
              v1549 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v1549)
                ZinValidateTd<11u>::Test(v1549, v1550, v1551, v1552, v1553, v1554, v1555, v1556);
              return 3;
            }
            v1508 = *(_DWORD *)(a3 + 580);
            if ((v1508 & 0xF0) != 0x20)
            {
              v1573 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v1573)
                ZinValidateTd<11u>::Test(v1573, v1574, v1575, v1576, v1577, v1578, v1579, v1580);
              return 3;
            }
            if ((v1508 & 0xF) != 2)
            {
              v1621 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v1621)
                ZinValidateTd<11u>::Test(v1621, v1622, v1623, v1624, v1625, v1626, v1627, v1628);
              return 3;
            }
            if ((v1507 & 0xFF00) == 0)
            {
LABEL_869:
              v1416 = *(_DWORD *)(a3 + 708);
              if ((v1416 & 0x7000) == 0x5000)
              {
                if ((v1416 & 0xE00) == 0xA00)
                {
                  if ((v1416 & 0x1C0) == 0x140)
                  {
                    if ((v1416 & 0x38) == 0x28)
                    {
                      if ((v1416 & 7) == 5)
                      {
                        v1417 = *(_DWORD *)(a3 + 712);
                        if ((v1417 & 0x70000000) == 0x50000000)
                        {
                          if ((v1417 & 0xE000000) == 0xA000000)
                          {
                            if ((v1417 & 0x1C00000) == 0x1400000)
                            {
                              if ((v1417 & 0x380000) == 0x280000)
                              {
                                if ((v1417 & 0x70000) == 0x50000)
                                {
                                  if ((*(_DWORD *)(a3 + 712) & 0x7000) == 0x5000)
                                  {
                                    if ((*(_DWORD *)(a3 + 712) & 0xE00) == 0xA00)
                                    {
                                      if ((*(_DWORD *)(a3 + 712) & 0x1C0) == 0x140)
                                      {
                                        if ((*(_DWORD *)(a3 + 712) & 0x38) == 0x28)
                                        {
                                          if ((*(_DWORD *)(a3 + 712) & 7) == 5)
                                          {
                                            v1418 = 0;
                                            while (1)
                                            {
                                              v1419 = *(_DWORD *)(a3 + 732 + v1418);
                                              if ((~v1419 & 0xF000000) != 0)
                                                break;
                                              if ((~v1419 & 0x70000) != 0)
                                              {
                                                v1814 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                                if (v1814)
                                                  ZinValidateTd<11u>::Test(v1814, v1815, v1816, v1817, v1818, v1819, v1820, v1821);
                                                return 3;
                                              }
                                              if ((~v1419 & 0xF00) != 0)
                                              {
                                                v1822 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                                if (v1822)
                                                  ZinValidateTd<11u>::Test(v1822, v1823, v1824, v1825, v1826, v1827, v1828, v1829);
                                                return 3;
                                              }
                                              if ((~v1419 & 7) != 0)
                                              {
                                                v1830 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                                if (v1830)
                                                  ZinValidateTd<11u>::Test(v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837);
                                                return 3;
                                              }
                                              v1418 += 4;
                                              if (v1418 == 24)
                                                goto LABEL_893;
                                            }
                                            v1806 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                            if (v1806)
                                              ZinValidateTd<11u>::Test(v1806, v1807, v1808, v1809, v1810, v1811, v1812, v1813);
                                          }
                                          else
                                          {
                                            v1798 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                            if (v1798)
                                              ZinValidateTd<11u>::Test(v1798, v1799, v1800, v1801, v1802, v1803, v1804, v1805);
                                          }
                                        }
                                        else
                                        {
                                          v1790 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                          if (v1790)
                                            ZinValidateTd<11u>::Test(v1790, v1791, v1792, v1793, v1794, v1795, v1796, v1797);
                                        }
                                      }
                                      else
                                      {
                                        v1782 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                        if (v1782)
                                          ZinValidateTd<11u>::Test(v1782, v1783, v1784, v1785, v1786, v1787, v1788, v1789);
                                      }
                                    }
                                    else
                                    {
                                      v1774 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                      if (v1774)
                                        ZinValidateTd<11u>::Test(v1774, v1775, v1776, v1777, v1778, v1779, v1780, v1781);
                                    }
                                  }
                                  else
                                  {
                                    v1766 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    if (v1766)
                                      ZinValidateTd<11u>::Test(v1766, v1767, v1768, v1769, v1770, v1771, v1772, v1773);
                                  }
                                }
                                else
                                {
                                  v1758 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                  if (v1758)
                                    ZinValidateTd<11u>::Test(v1758, v1759, v1760, v1761, v1762, v1763, v1764, v1765);
                                }
                              }
                              else
                              {
                                v1750 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                if (v1750)
                                  ZinValidateTd<11u>::Test(v1750, v1751, v1752, v1753, v1754, v1755, v1756, v1757);
                              }
                            }
                            else
                            {
                              v1742 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              if (v1742)
                                ZinValidateTd<11u>::Test(v1742, v1743, v1744, v1745, v1746, v1747, v1748, v1749);
                            }
                          }
                          else
                          {
                            v1734 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            if (v1734)
                              ZinValidateTd<11u>::Test(v1734, v1735, v1736, v1737, v1738, v1739, v1740, v1741);
                          }
                        }
                        else
                        {
                          v1718 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (v1718)
                            ZinValidateTd<11u>::Test(v1718, v1719, v1720, v1721, v1722, v1723, v1724, v1725);
                        }
                      }
                      else
                      {
                        v1694 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v1694)
                          ZinValidateTd<11u>::Test(v1694, v1695, v1696, v1697, v1698, v1699, v1700, v1701);
                      }
                    }
                    else
                    {
                      v1653 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (v1653)
                        ZinValidateTd<11u>::Test(v1653, v1654, v1655, v1656, v1657, v1658, v1659, v1660);
                    }
                  }
                  else
                  {
                    v1613 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (v1613)
                      ZinValidateTd<11u>::Test(v1613, v1614, v1615, v1616, v1617, v1618, v1619, v1620);
                  }
                }
                else
                {
                  v1565 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (v1565)
                    ZinValidateTd<11u>::Test(v1565, v1566, v1567, v1568, v1569, v1570, v1571, v1572);
                }
              }
              else
              {
                v1533 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v1533)
                  ZinValidateTd<11u>::Test(v1533, v1534, v1535, v1536, v1537, v1538, v1539, v1540);
              }
              return 3;
            }
            v1509 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1509)
              ZinValidateTd<11u>::Test(v1509, v1510, v1511, v1512, v1513, v1514, v1515, v1516);
            return 3;
          }
          goto LABEL_893;
        }
        if ((*(_DWORD *)(a3 + 492) & 0xC) == 8)
        {
          if ((*(_DWORD *)(a3 + 652) & 3) != 1)
          {
            v1541 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1541)
              ZinValidateTd<11u>::Test(v1541, v1542, v1543, v1544, v1545, v1546, v1547, v1548);
            return 3;
          }
LABEL_893:
          v1420 = *(_DWORD *)(a3 + 952);
          if ((v1420 & 1) == 0)
          {
            if ((*(_DWORD *)(a3 + 952) & 0xF0) != 0x30)
            {
              v1525 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v1525)
                ZinValidateTd<11u>::Test(v1525, v1526, v1527, v1528, v1529, v1530, v1531, v1532);
              return 3;
            }
            if ((v1420 & 0xFF00) != 0)
            {
              v1421 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v1421)
                ZinValidateTd<11u>::Test(v1421, v1422, v1423, v1424, v1425, v1426, v1427, v1428);
              return 3;
            }
          }
          for (i = 0; i != 64; i += 4)
          {
            v1487 = *(_DWORD *)(a3 + i + 188);
            if (v1487 <= 0x3F)
            {
              v1557 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v1557)
                ZinValidateTd<11u>::Test(v1557, v1558, v1559, v1560, v1561, v1562, v1563, v1564);
              return 3;
            }
            v1488 = *(_DWORD *)(a3 + i + 60);
            if ((v1488 & 1) == 0)
            {
              if ((*(_DWORD *)(a3 + i + 60) & 0xF0) != 0x20)
              {
                v1581 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v1581)
                  ZinValidateTd<11u>::Test(v1581, v1582, v1583, v1584, v1585, v1586, v1587, v1588);
                return 3;
              }
              if ((v1487 & 0xFFFFFFC0) != 0x40)
              {
                v1589 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v1589)
                  ZinValidateTd<11u>::Test(v1589, v1590, v1591, v1592, v1593, v1594, v1595, v1596);
                return 3;
              }
              if ((v1488 & 0xFF00) != 0)
              {
                v1597 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v1597)
                  ZinValidateTd<11u>::Test(v1597, v1598, v1599, v1600, v1601, v1602, v1603, v1604);
                return 3;
              }
            }
          }
          for (j = 0; j != 16; j += 4)
          {
            v1490 = *(_DWORD *)(a3 + j + 300);
            if (v1490 <= 0x3F)
            {
              v1605 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v1605)
                ZinValidateTd<11u>::Test(v1605, v1606, v1607, v1608, v1609, v1610, v1611, v1612);
              return 3;
            }
            if ((*(_DWORD *)(a3 + j + 252) & 1) == 0)
            {
              if ((*(_DWORD *)(a3 + j + 252) & 0xF0) != 0x20)
              {
                v1645 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v1645)
                  ZinValidateTd<11u>::Test(v1645, v1646, v1647, v1648, v1649, v1650, v1651, v1652);
                return 3;
              }
              if ((v1490 & 0xFFFFFFC0) != 0x40)
              {
                v1661 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v1661)
                  ZinValidateTd<11u>::Test(v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668);
                return 3;
              }
            }
          }
          if ((v1874 & 0x7FFF) == 0)
          {
            v1669 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1669)
              ZinValidateTd<6u>::Test(v1669, v1670, v1671, v1672, v1673, v1674, v1675, v1676);
            return 3;
          }
          if (v1880 > v1839)
          {
            v1491 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1491)
              ZinValidateTd<6u>::Test(v1491, v1492, v1493, v1494, v1495, v1496, v1497, v1498);
            return 3;
          }
          if ((*(_DWORD *)(a3 + 924) & 3) == 2)
            v1685 = v1380 >> 4;
          else
            v1685 = (v1380 >> 4) + 1;
          if (*(_QWORD *)(v1856 + 488) < (unint64_t)(1 << v1685))
          {
            v1686 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v1686)
              ZinValidateTd<11u>::Test(v1686, v1687, v1688, v1689, v1690, v1691, v1692, v1693);
            return 3;
          }
          result = ZinValidateTd<11u>::ValidationForNonZeroFields(a3);
          if (!(_DWORD)result)
          {
            result = ZinValidateTd<11u>::CheckRedundantKDMARegisters(a3);
            if (!(_DWORD)result)
              return ZinValidateTd<11u>::ValidateFillLowerNEFirst(v1856, a3);
          }
          return result;
        }
        v1389 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!v1389)
          return 3;
LABEL_850:
        ZinValidateTd<11u>::Test(v1389, v1390, v1391, v1392, v1393, v1394, v1395, v1396);
        return 3;
      }
      if (v1882 >= 2 && *(_DWORD *)(a3 + 616) <= 0x3Fu && ((v1851 >> 5) & 1) == 0
        || v1886 >= 2 && *(_DWORD *)(a3 + 620) <= 0x3Fu && ((v1851 >> 7) & 1) == 0
        || v1879 >= 2 && *(_DWORD *)(a3 + 624) <= 0x3Fu && ((v1851 >> 6) & 1) == 0
        || v91 >= 2 && *(_DWORD *)(a3 + 628) <= 0x3Fu)
      {
LABEL_820:
        if ((*(_DWORD *)(a3 + 572) & 0xF0) == 0x40)
        {
          v1355 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1355)
            ZinValidateTd<11u>::Test(v1355, v1356, v1357, v1358, v1359, v1360, v1361, v1362);
          return 3;
        }
        v1363 = *(_DWORD *)(a3 + 580);
        if ((v1363 & 0xF) == 4)
        {
          v1364 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1364)
            ZinValidateTd<11u>::Test(v1364, v1365, v1366, v1367, v1368, v1369, v1370, v1371);
          return 3;
        }
        if ((v1363 & 0xF0) == 0x40)
        {
          v1372 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v1372)
            ZinValidateTd<11u>::Test(v1372, v1373, v1374, v1375, v1376, v1377, v1378, v1379);
          return 3;
        }
      }
      if (v89 > 5 || ((1 << v89) & 0x25) == 0)
        goto LABEL_845;
      goto LABEL_843;
    }
  }
  return result;
}

uint64_t ZinValidateTd<11u>::ValidateL2CircularBuffer(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == a1)
    return 0;
  while (2)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 200);
    v3 = *(_DWORD *)(v2 + 872);
    switch(v3 & 7)
    {
      case 1u:
        v4 = *(_DWORD *)(v2 + 504) & 0x1FFFF;
        goto LABEL_9;
      case 2u:
        LOWORD(v5) = *(_WORD *)(v2 + 494);
        goto LABEL_7;
      case 3u:
        v5 = *(_DWORD *)(v2 + 496);
LABEL_7:
        v4 = v5 & 0x7FFF;
        goto LABEL_9;
      case 4u:
        v4 = *(_DWORD *)(v2 + 532) & 0x1FFF;
LABEL_9:
        if (!(unsigned __int16)*(_DWORD *)(v2 + 876)
          || v4 - (unsigned __int16)*(_DWORD *)(v2 + 876) <= (uint64_t)((unint64_t)*(unsigned int *)(v2 + 876) >> 16))
        {
          break;
        }
        v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v11)
          ZinValidateTd<11u>::ValidateL2CircularBuffer(v11, v12, v13, v14, v15, v16, v17, v18);
        return 3;
      default:
        v4 = 0;
        break;
    }
    v6 = 0;
    switch((v3 >> 4) & 7)
    {
      case 1u:
        v4 = *(_DWORD *)(v2 + 504) & 0x1FFFF;
        goto LABEL_17;
      case 2u:
        LOWORD(v7) = *(_WORD *)(v2 + 494);
        goto LABEL_15;
      case 3u:
        v7 = *(_DWORD *)(v2 + 496);
LABEL_15:
        v4 = v7 & 0x7FFF;
        goto LABEL_17;
      case 4u:
        v4 = *(_DWORD *)(v2 + 532) & 0x1FFF;
LABEL_17:
        if (!(unsigned __int16)*(_DWORD *)(v2 + 880)
          || v4 - (unsigned __int16)*(_DWORD *)(v2 + 880) <= (uint64_t)((unint64_t)*(unsigned int *)(v2 + 880) >> 16))
        {
          v6 = 1;
LABEL_20:
          switch((v3 >> 8) & 7)
          {
            case 0u:
              goto LABEL_30;
            case 1u:
              v4 = *(_DWORD *)(v2 + 508) & 0x1FFFFLL;
              goto LABEL_28;
            case 2u:
              LOWORD(v8) = *(_WORD *)(v2 + 514);
              goto LABEL_26;
            case 3u:
              v8 = *(_DWORD *)(v2 + 516);
LABEL_26:
              v4 = v8 & 0x7FFF;
              goto LABEL_28;
            case 4u:
              v4 = *(_DWORD *)(v2 + 532) & 0x1FFFLL;
              goto LABEL_28;
            default:
              if (!v6)
                goto LABEL_30;
LABEL_28:
              v9 = *(unsigned int *)(v2 + 884);
              if ((_WORD)v9 && v4 - (unsigned __int16)v9 > (uint64_t)(v9 >> 16))
              {
                v27 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v27)
                  ZinValidateTd<11u>::ValidateL2CircularBuffer(v27, v28, v29, v30, v31, v32, v33, v34);
                return 3;
              }
LABEL_30:
              v1 = *(_QWORD *)(v1 + 8);
              if (v1 == a1)
                return 0;
              break;
          }
          continue;
        }
        v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v19)
          ZinValidateTd<11u>::ValidateL2CircularBuffer(v19, v20, v21, v22, v23, v24, v25, v26);
        return 3;
      default:
        goto LABEL_20;
    }
  }
}

uint64_t ZinValidateTd<11u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *__p[3];

  v4 = ((unint64_t)*(unsigned int *)(a2 + 540) >> 19) & 7;
  v5 = 1 << v4;
  v6 = *(_DWORD *)(a2 + 924);
  v38 = 0;
  std::vector<unsigned long>::vector(__p, 1 << v4, &v38);
  v7 = 0;
  v8 = (unint64_t *)__p[0];
  do
  {
    v8[v7] = (unint64_t)*(unsigned int *)(a2 + 188 + 4 * v7) >> 6;
    ++v7;
  }
  while (v5 != v7);
  v9 = *(int *)(a1 + 8);
  if (v5 < v9)
  {
    v10 = v9 - v5;
    v11 = (char *)(a2 + 4 * v5 + 60);
    while (1)
    {
      v12 = *v11;
      v11 += 4;
      if ((v12 & 1) != 0)
        break;
      if (!--v10)
        goto LABEL_7;
    }
    v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v21)
      ZinValidateTd<11u>::CheckKMEMBufferSizes(v21, v22, v23, v24, v25, v26, v27, v28);
    goto LABEL_19;
  }
LABEL_7:
  v13 = 0;
  if ((v6 & 0x100) == 0 && (_DWORD)v4)
  {
    v14 = 2;
    if (v5 > 2)
      v14 = 1 << v4;
    v17 = *v8;
    v15 = v8 + 1;
    v16 = v17;
    v18 = v14 - 1;
    while (1)
    {
      v20 = *v15++;
      v19 = v20;
      if (v20 > v16)
        break;
      v16 = v19;
      if (!--v18)
      {
        v13 = 0;
        goto LABEL_20;
      }
    }
    v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v29)
      ZinValidateTd<4u>::CheckKMEMBufferSizes(v29, v30, v31, v32, v33, v34, v35, v36);
LABEL_19:
    v13 = 3;
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v13;
}

uint64_t ZinValidateTd<11u>::CheckInRangeDmaAccess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  char *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  double v18;
  int v19;
  double v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  int TextureIndexHeightDimension;
  int TextureIndexDepthDimension;
  double TextureIndexPlaneDimension;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  __int16 v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int TextureIndexGroupDimension;
  void *v59;
  void *v60;
  _DWORD *v61;
  void *v62;
  void *v63;
  _DWORD *v64;
  void *v65;
  std::string __p;
  unsigned int v67;
  int v68;
  char v69;
  int v70;
  char v71;
  int v72;
  char v73;

  if (a2)
  {
    ZinIrMemoryPool::GetSections(a2, 4, &v65);
    v52 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16);
    std::__list_imp<ZinIrSection *>::clear(&v65);
  }
  else
  {
    v52 = 0;
  }
  v5 = *(_QWORD *)(a1 + 528);
  LOBYTE(v72) = 0;
  v73 = 0;
  LOBYTE(v70) = 0;
  v71 = 0;
  LOBYTE(v68) = 0;
  v69 = 0;
  v6 = *(_QWORD *)(a3 + 1000);
  v7 = *(_QWORD *)(a3 + 1008);
  if (v6 != v7)
  {
    v8 = (__int128 *)(v6 + 8);
    while (1)
    {
      v9 = (uint64_t)v8 - 8;
      LOWORD(v65) = *((_WORD *)v8 - 4);
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v10 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      v67 = *((_DWORD *)v8 + 6);
      v11 = v67 & 0x7FFF;
      if (v11 == 1346)
        break;
      if (v11 == 1098)
      {
        v70 = (v67 >> 22) & 0x7F;
        v12 = &v71;
        goto LABEL_15;
      }
      if (v11 == 1092)
      {
        v72 = (v67 >> 22) & 0x7F;
        v12 = &v73;
LABEL_15:
        *v12 = 1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 = (__int128 *)((char *)v8 + 40);
      if (v9 + 40 == v7)
        goto LABEL_19;
    }
    v68 = (v67 >> 22) & 0x7F;
    v12 = &v69;
    goto LABEL_15;
  }
LABEL_19:
  v13 = *(_DWORD *)(a3 + 536);
  v14 = *(_BYTE *)(a3 + 651) & 0xF;
  v15 = *(_DWORD *)(a3 + 484);
  v56 = HIWORD(v15) & 0x7FFF;
  if ((v13 & 2) != 0)
    v16 = 1;
  else
    v16 = HIWORD(v15) & 0x7FFF;
  v55 = *(_DWORD *)(a3 + 488) & 0x7FFF;
  if ((v13 & 4) != 0)
    v17 = 1;
  else
    v17 = *(_DWORD *)(a3 + 488) & 0x7FFF;
  v18 = 1.0;
  if ((v13 & 8) == 0)
    v18 = (double)((*(_DWORD *)(a3 + 496) & 0x1FFFFu) / v14);
  v19 = *(_DWORD *)(a3 + 484) & 0x7FFF;
  if ((v13 & 1) != 0)
    v19 = 1;
  if ((v13 & 0x100) != 0)
    v20 = (double)v19;
  else
    v20 = v18;
  v21 = *(_DWORD *)(a3 + 524) & 0x1FFF;
  v57 = *(_DWORD *)(a3 + 704) & 7;
  TextureIndexGroupDimension = v21;
  v51 = *(_DWORD *)(a3 + 484);
  if (v57)
  {
    v20 = (double)((*(unsigned __int16 *)(a3 + 728) + 1) / v14);
    v54 = *(unsigned __int16 *)(a3 + 726) + 1;
    v17 = HIWORD(*(_DWORD *)(a3 + 720)) + 1;
    v21 = (unsigned __int16)*(_DWORD *)(a3 + 720) + 1;
  }
  else
  {
    v54 = v16;
  }
  v53 = *(_DWORD *)(a3 + 540);
  v22 = *(_DWORD *)(a3 + 584);
  v23 = *(_DWORD *)(a3 + 592);
  v24 = *(unsigned int *)(a3 + 596);
  v25 = *(_DWORD *)(a3 + 600);
  v26 = *(_DWORD *)(a3 + 604);
  v27 = operator new(0x10uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v27 + 4);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v27 + 4);
  *v27 = v54 * v5 * (v23 >> 6) + (v22 >> 6);
  v27[1] = ((double)(v22 >> 6) + (double)(v5 * (v24 >> 6)) * v20);
  v27[2] = v17 * v5 * (v25 >> 6) + (v22 >> 6);
  v27[3] = v21 * v5 * (v26 >> 6) + (v22 >> 6);
  v65 = v27;
  if ((v13 & 0x20) != 0)
    TextureIndexHeightDimension = 1;
  else
    TextureIndexHeightDimension = v56;
  if ((v13 & 0x40) != 0)
    TextureIndexDepthDimension = 1;
  else
    TextureIndexDepthDimension = v55;
  TextureIndexPlaneDimension = 1.0;
  if ((v13 & 0x80) == 0)
    TextureIndexPlaneDimension = (double)((*(_DWORD *)(a3 + 496) & 0x1FFFFu) / (*(_BYTE *)(a3 + 655) & 0xFu));
  if ((v13 & 0x200) != 0)
  {
    if ((v13 & 0x10) != 0)
      TextureIndexPlaneDimension = 1.0;
    else
      TextureIndexPlaneDimension = (double)(v51 & 0x7FFF);
  }
  if (v57 == 2)
  {
    TextureIndexPlaneDimension = 1.0;
    TextureIndexHeightDimension = 1;
    TextureIndexDepthDimension = 1;
  }
  else if (v57 == 1)
  {
    TextureIndexGroupDimension = ZinValidateTd<11u>::GetTextureIndexGroupDimension(a3);
    TextureIndexDepthDimension = ZinValidateTd<11u>::GetTextureIndexDepthDimension(a3);
    TextureIndexPlaneDimension = (double)ZinValidateTd<11u>::GetTextureIndexPlaneDimension(a3);
    TextureIndexHeightDimension = ZinValidateTd<11u>::GetTextureIndexHeightDimension(a3);
  }
  v31 = *(_DWORD *)(a3 + 608);
  v32 = *(_DWORD *)(a3 + 616);
  v33 = *(unsigned int *)(a3 + 620);
  v34 = *(_DWORD *)(a3 + 624);
  v35 = *(_DWORD *)(a3 + 628);
  v36 = operator new(0x10uLL);
  v37 = ((v53 >> 4) & 7) - 5;
  v63 = v36 + 4;
  v64 = v36 + 4;
  *v36 = TextureIndexHeightDimension * v5 * (v32 >> 6) + (v31 >> 6);
  v36[1] = ((double)(v31 >> 6) + (double)(v5 * (v33 >> 6)) * TextureIndexPlaneDimension);
  v36[2] = TextureIndexDepthDimension * v5 * (v34 >> 6) + (v31 >> 6);
  v36[3] = TextureIndexGroupDimension * v5 * (v35 >> 6) + (v31 >> 6);
  v62 = v36;
  if (v37 < 2)
    v38 = 1;
  else
    v38 = HIWORD(*(_DWORD *)(a3 + 504)) & 0x7FFF;
  if (v37 < 2)
    v39 = 1;
  else
    v39 = *(_DWORD *)(a3 + 508) & 0x7FFF;
  if (v13 & 0x400 | v53 & 0x10000000)
  {
    if (v37 < 2)
      v40 = 1;
    else
      v40 = *(_DWORD *)(a3 + 504) & 0x7FFF;
  }
  else
  {
    v40 = *(_DWORD *)(a3 + 500) & 0x1FFFF;
  }
  v41 = v40 / (*(_BYTE *)(a3 + 987) & 0xFu);
  v42 = *(_DWORD *)(a3 + 960);
  v43 = *(_DWORD *)(a3 + 968);
  v44 = *(unsigned int *)(a3 + 972);
  v45 = *(_DWORD *)(a3 + 976);
  v46 = *(_DWORD *)(a3 + 980);
  v47 = *(_DWORD *)(a3 + 524);
  v48 = operator new(0x10uLL);
  v60 = v48 + 4;
  v61 = v48 + 4;
  *v48 = v38 * v5 * (v43 >> 6) + (v42 >> 6);
  v48[1] = ((double)(v42 >> 6) + (double)(v5 * (v44 >> 6)) * (double)v41);
  v48[2] = v39 * v5 * (v45 >> 6) + (v42 >> 6);
  v48[3] = (v46 >> 6) * v5 * (v47 & 0x1FFF) + (v42 >> 6);
  v59 = v48;
  v49 = ZinIrTdValidationUtil::VerifyDmaAccess(v52, (unsigned int **)&v65, (uint64_t)&v72, (unsigned int **)&v62, (uint64_t)&v70, (unsigned int **)&v59, (uint64_t)&v68);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v65)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
    operator delete(v65);
  }
  return v49;
}

void sub_206FE83F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t ZinValidateTd<11u>::ValidationForNonZeroFields(uint64_t a1)
{
  unsigned int v1;
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL8 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BOOL8 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BOOL8 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BOOL8 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BOOL8 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _BOOL8 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BOOL8 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL8 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BOOL8 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  if ((*(_WORD *)(a1 + 488) & 0x7FFF) != 0)
  {
    if ((*(_WORD *)(a1 + 508) & 0x7FFF) != 0)
    {
      v1 = *(_DWORD *)(a1 + 516);
      if ((v1 & 0x30000000) != 0)
      {
        if (v1 >> 30)
        {
          v34 = *(_DWORD *)(a1 + 520);
          if ((v34 & 0x6000) != 0)
          {
            if ((v1 & 0x6000) != 0)
            {
              if ((v1 & 0x18000) != 0)
              {
                if ((v34 & 0xC0) != 0)
                {
                  if ((v1 & 0x3F) != 0)
                  {
                    if ((v1 & 0xFC0) != 0)
                    {
                      if ((v34 & 0x1F) != 0)
                      {
                        v35 = *(_DWORD *)(a1 + 524);
                        if (HIWORD(v35))
                        {
                          if ((v35 & 0x1FFF) != 0)
                          {
                            if ((*(_WORD *)(a1 + 528) & 0x7FFF) != 0)
                            {
                              if ((*(_BYTE *)(a1 + 540) & 3) != 0)
                              {
                                if ((*(_BYTE *)(a1 + 793) & 0xF) != 0)
                                {
                                  if ((*(_BYTE *)(a1 + 837) & 0xF) != 0)
                                  {
                                    if ((*(_BYTE *)(a1 + 651) & 0xF) != 0)
                                    {
                                      if ((*(_BYTE *)(a1 + 655) & 0xF) != 0)
                                      {
                                        if ((*(_WORD *)(a1 + 656) & 0x3F0) != 0)
                                        {
                                          if ((*(_DWORD *)(a1 + 660) & 0x1FFFF) != 0)
                                          {
                                            if ((*(_DWORD *)(a1 + 664) & 0x1FFFF) != 0)
                                            {
                                              if ((*(_BYTE *)(a1 + 987) & 0xF) != 0)
                                                return 0;
                                              v181 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                              if (v181)
                                                ZinValidateTd<11u>::ValidationForNonZeroFields(v181, v182, v183, v184, v185, v186, v187, v188);
                                            }
                                            else
                                            {
                                              v173 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                              if (v173)
                                                ZinValidateTd<11u>::ValidationForNonZeroFields(v173, v174, v175, v176, v177, v178, v179, v180);
                                            }
                                          }
                                          else
                                          {
                                            v165 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                            if (v165)
                                              ZinValidateTd<11u>::ValidationForNonZeroFields(v165, v166, v167, v168, v169, v170, v171, v172);
                                          }
                                        }
                                        else
                                        {
                                          v157 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                          if (v157)
                                            ZinValidateTd<11u>::ValidationForNonZeroFields(v157, v158, v159, v160, v161, v162, v163, v164);
                                        }
                                      }
                                      else
                                      {
                                        v149 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                        if (v149)
                                          ZinValidateTd<11u>::ValidationForNonZeroFields(v149, v150, v151, v152, v153, v154, v155, v156);
                                      }
                                    }
                                    else
                                    {
                                      v141 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                      if (v141)
                                        ZinValidateTd<11u>::ValidationForNonZeroFields(v141, v142, v143, v144, v145, v146, v147, v148);
                                    }
                                  }
                                  else
                                  {
                                    v133 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                    if (v133)
                                      ZinValidateTd<11u>::ValidationForNonZeroFields(v133, v134, v135, v136, v137, v138, v139, v140);
                                  }
                                }
                                else
                                {
                                  v125 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                  if (v125)
                                    ZinValidateTd<11u>::ValidationForNonZeroFields(v125, v126, v127, v128, v129, v130, v131, v132);
                                }
                              }
                              else
                              {
                                v117 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                if (v117)
                                  ZinValidateTd<11u>::ValidationForNonZeroFields(v117, v118, v119, v120, v121, v122, v123, v124);
                              }
                            }
                            else
                            {
                              v109 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              if (v109)
                                ZinValidateTd<11u>::ValidationForNonZeroFields(v109, v110, v111, v112, v113, v114, v115, v116);
                            }
                          }
                          else
                          {
                            v101 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            if (v101)
                              ZinValidateTd<11u>::ValidationForNonZeroFields(v101, v102, v103, v104, v105, v106, v107, v108);
                          }
                        }
                        else
                        {
                          v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          if (v36)
                            ZinValidateTd<11u>::ValidationForNonZeroFields(v36, v37, v38, v39, v40, v41, v42, v43);
                        }
                      }
                      else
                      {
                        v92 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        if (v92)
                          ZinValidateTd<11u>::ValidationForNonZeroFields(v92, v93, v94, v95, v96, v97, v98, v99);
                      }
                    }
                    else
                    {
                      v84 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      if (v84)
                        ZinValidateTd<11u>::ValidationForNonZeroFields(v84, v85, v86, v87, v88, v89, v90, v91);
                    }
                  }
                  else
                  {
                    v76 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    if (v76)
                      ZinValidateTd<11u>::ValidationForNonZeroFields(v76, v77, v78, v79, v80, v81, v82, v83);
                  }
                }
                else
                {
                  v68 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  if (v68)
                    ZinValidateTd<11u>::ValidationForNonZeroFields(v68, v69, v70, v71, v72, v73, v74, v75);
                }
              }
              else
              {
                v60 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v60)
                  ZinValidateTd<11u>::ValidationForNonZeroFields(v60, v61, v62, v63, v64, v65, v66, v67);
              }
            }
            else
            {
              v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v52)
                ZinValidateTd<11u>::ValidationForNonZeroFields(v52, v53, v54, v55, v56, v57, v58, v59);
            }
          }
          else
          {
            v44 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            if (v44)
              ZinValidateTd<11u>::ValidationForNonZeroFields(v44, v45, v46, v47, v48, v49, v50, v51);
          }
        }
        else
        {
          v2 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v2)
            ZinValidateTd<11u>::ValidationForNonZeroFields(v2, v3, v4, v5, v6, v7, v8, v9);
        }
      }
      else
      {
        v26 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v26)
          ZinValidateTd<11u>::ValidationForNonZeroFields(v26, v27, v28, v29, v30, v31, v32, v33);
      }
    }
    else
    {
      v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v18)
        ZinValidateTd<11u>::ValidationForNonZeroFields(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  else
  {
    v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v10)
      ZinValidateTd<11u>::ValidationForNonZeroFields(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return 3;
}

uint64_t ZinValidateTd<11u>::CheckRedundantKDMARegisters(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_DWORD *)(a1 + 924);
  v2 = *(_DWORD *)(a1 + 36);
  if (((v2 ^ (v1 >> 19)) & 3) != 0)
  {
    v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v3)
      ZinValidateTd<11u>::CheckRedundantKDMARegisters(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  else if ((((v2 >> 2) ^ (v1 >> 17)) & 3) != 0)
  {
    v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v11)
      ZinValidateTd<11u>::CheckRedundantKDMARegisters(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  else if ((((v2 >> 5) ^ (v1 >> 8)) & 1) != 0)
  {
    v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v20)
      ZinValidateTd<11u>::CheckRedundantKDMARegisters(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  else
  {
    if ((((v2 >> 4) ^ (v1 >> 10)) & 1) == 0)
      return 0;
    v28 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v28)
      ZinValidateTd<11u>::CheckRedundantKDMARegisters(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  return 3;
}

uint64_t ZinValidateTd<11u>::ValidateFillLowerNEFirst(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unint64_t v4;
  int v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  if ((*(_BYTE *)(a2 + 543) & 0x20) == 0)
    return 0;
  v3 = *(_DWORD *)(a2 + 516);
  if ((v3 & 0x30000000) != 0x10000000)
  {
    v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v14)
      ZinValidateTd<10u>::VerifyL2InplaceAllocation(v14, v15, v16, v17, v18, v19, v20, v21);
    return 3;
  }
  if (v3 >> 30 != 1)
  {
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinValidateTd<10u>::VerifyL2InplaceAllocation(v22, v23, v24, v25, v26, v27, v28, v29);
    return 3;
  }
  if ((*(_DWORD *)(a2 + 520) & 0x6000) != 0x2000)
  {
    v30 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v30)
      ZinValidateTd<8u>::VerifyL2InplaceAllocation(v30, v31, v32, v33, v34, v35, v36, v37);
    return 3;
  }
  v4 = *(unsigned int *)(a2 + 524);
  if ((v4 & 0x4000) != 0)
  {
    if ((*(_DWORD *)(a2 + 928) & 7) != 4)
    {
      v55 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v55)
        ZinValidateTd<11u>::ValidateFillLowerNEFirst(v55, v56, v57, v58, v59, v60, v61, v62);
      return 3;
    }
    v38 = v4 >> 16;
    if ((_DWORD)v38 != 1 << (*(_DWORD *)(a2 + 512) & 7))
    {
      v71 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v71)
        ZinValidateTd<11u>::ValidateFillLowerNEFirst(v71, v72, v73, v74, v75, v76, v77, v78);
      return 3;
    }
    if (*(_QWORD *)(a1 + 880) < v38)
    {
      v39 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v39)
        ZinValidateTd<11u>::ValidateFillLowerNEFirst(v39, v40, v41, v42, v43, v44, v45, v46);
      return 3;
    }
    return 0;
  }
  v5 = *(_DWORD *)(a2 + 924);
  if ((v5 & 0x100) != 0)
  {
    v47 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v47)
      ZinValidateTd<11u>::ValidateFillLowerNEFirst(v47, v48, v49, v50, v51, v52, v53, v54);
    return 3;
  }
  if ((v5 & 0x10000) != 0)
  {
    if ((*(_BYTE *)(a2 + 928) & 8) != 0)
    {
      v63 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v63)
        ZinValidateTd<11u>::ValidateFillLowerNEFirst(v63, v64, v65, v66, v67, v68, v69, v70);
      return 3;
    }
    return 0;
  }
  v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v6)
    ZinValidateTd<11u>::ValidateFillLowerNEFirst(v6, v7, v8, v9, v10, v11, v12, v13);
  return 3;
}

uint64_t ZinValidateTd<11u>::GetTextureIndexGroupDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 708) >> 12) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<11u>::GetTextureIndexDepthDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 708) >> 9) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<11u>::GetTextureIndexPlaneDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 708) >> 6) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinValidateTd<11u>::GetTextureIndexHeightDimension(uint64_t a1)
{
  uint64_t result;
  int v2;

  switch((*(_DWORD *)(a1 + 708) >> 3) & 7)
  {
    case 0:
      return *(_DWORD *)(a1 + 496) & 0x1FFFF;
    case 1:
      v2 = *(_DWORD *)(a1 + 484);
      goto LABEL_7;
    case 2:
      LOWORD(v2) = *(_WORD *)(a1 + 486);
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(a1 + 488);
LABEL_7:
      result = v2 & 0x7FFF;
      break;
    case 4:
      result = *(_DWORD *)(a1 + 524) & 0x1FFF;
      break;
    case 5:
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t ZinIrTdValidationUtil::ValidateKernelCaching<11u>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83[3];
  char v84;
  char v85;
  void **v86[3];
  char v87;
  char v88;
  uint64_t *v89;
  _QWORD *v90[2];
  uint64_t v91;
  uint64_t v92;
  uint8_t v93[4];
  uint64_t v94;
  uint8_t v95[4];
  uint64_t v96;
  uint8_t v97[4];
  uint64_t v98;
  uint8_t v99[4];
  uint64_t v100;
  uint8_t v101[4];
  uint64_t v102;
  uint8_t v103[4];
  uint64_t v104;
  uint8_t v105[4];
  uint64_t v106;
  uint8_t v107[4];
  _QWORD v108[3];

  *(_QWORD *)((char *)&v108[1] + 4) = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2088))
    return 0;
  ZinCodegenUtil::SplitInstructionListByHWNetwork(a2, &v91);
  v3 = v91;
  v82 = v92;
  if (v91 == v92)
    goto LABEL_85;
LABEL_3:
  v90[0] = 0;
  v90[1] = 0;
  v89 = (uint64_t *)v90;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 == v3)
    goto LABEL_84;
  while (1)
  {
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(unsigned int *)(*(_QWORD *)(v5 + 200) + 44);
    LODWORD(v86[0]) = HIWORD(*(_DWORD *)(*(_QWORD *)(v5 + 200) + 44));
    if (*(_QWORD *)(a1 + 2096) < v6 >> 16)
      ZinAssertImpl("Invalid KID");
    if (v6 >= 0x10000)
    {
      v83[0] = v86;
      v7 = std::__tree<std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<ZinAneInstruction *>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v89, (unsigned int *)v86, (uint64_t)&std::piecewise_construct, v83);
      v8 = v7[6];
      v9 = v7[7];
      if (v8 >= v9)
      {
        v11 = v7[5];
        v12 = v8 - v11;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v13 = (char *)v9 - (char *)v11;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v7 + 7), v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[8 * v12];
        *v17 = v5;
        v10 = v17 + 1;
        v19 = v7[5];
        v18 = v7[6];
        if (v18 != v19)
        {
          do
          {
            v20 = *--v18;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = v7[5];
        }
        v7[5] = v17;
        v7[6] = v10;
        v7[7] = (uint64_t *)&v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v8 = v5;
        v10 = v8 + 1;
      }
      v7[6] = v10;
      goto LABEL_25;
    }
    if ((v6 & 0x40) != 0)
      break;
LABEL_25:
    v4 = *(_QWORD *)(v4 + 8);
    if (v4 == v3)
    {
      v21 = v89;
      if (v89 == (uint64_t *)v90)
        goto LABEL_84;
      while (1)
      {
        v22 = v21[5];
        v23 = v21[6] - v22;
        if (v23 < 9)
        {
          if (v23 != 8 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 200) + 44) & 0x240) != 0x40)
            goto LABEL_73;
          v74 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v74)
            ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v74, v75, v76, v77, v78, v79, v80, v81);
          goto LABEL_89;
        }
        v24 = *(_QWORD *)(*(_QWORD *)v22 + 200);
        v25 = *(_DWORD *)(v24 + 44);
        if ((v25 & 0x40) == 0)
        {
          v58 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v58)
            ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v58, v59, v60, v61, v62, v63, v64, v65);
          goto LABEL_89;
        }
        if ((v25 & 0x200) != 0)
        {
          v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v66)
            ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v66, v67, v68, v69, v70, v71, v72, v73);
          goto LABEL_89;
        }
        FindRelocationInfo((uint64_t *)(v24 + 1008), 6408, v86);
        if (!v88)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v107, v108, v41);
            goto LABEL_67;
          }
          goto LABEL_89;
        }
        v26 = v21[5];
        v27 = v21[6] - v26;
        if ((unint64_t)v27 < 9)
        {
          v35 = 1;
          goto LABEL_69;
        }
        v28 = v27 >> 3;
        v29 = v24 + 132;
        v30 = 1;
        while (1)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(v26 + 8 * v30) + 200);
          v32 = *(_DWORD *)(v31 + 44);
          if (v30 != v28 - 1)
            break;
          if ((v32 & 0x200) == 0)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v105, &v106, v47);
            goto LABEL_67;
          }
LABEL_37:
          FindRelocationInfo((uint64_t *)(v31 + 1008), 6408, v83);
          if (v85)
          {
            if (ZinAneRelocInfo::operator==((unsigned __int8 *)v86, (unsigned __int8 *)v83))
            {
              v33 = v31 + 132;
              v34 = -64;
              while (((*(_DWORD *)(v33 + v34) ^ *(_DWORD *)(v29 + v34)) & 1) == 0)
              {
                if ((*(_DWORD *)(v33 + v34 + 64) ^ *(_DWORD *)(v29 + v34 + 64)) >= 0x40)
                {
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v95, &v96, v39);
                  goto LABEL_55;
                }
                if ((*(_DWORD *)(v33 + v34 + 128) ^ *(_DWORD *)(v29 + v34 + 128)) >= 0x40)
                {
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v93, &v94, v40);
                  goto LABEL_55;
                }
                v34 += 4;
                if (!v34)
                {
                  v35 = 1;
                  goto LABEL_56;
                }
              }
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v97, &v98, v38);
            }
            else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v99, &v100, v37);
            }
          }
          else
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              goto LABEL_67;
            ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v101, &v102, v36);
          }
LABEL_55:
          v35 = 0;
LABEL_56:
          if (v85 && v84 < 0)
            operator delete(v83[1]);
          if ((v35 & 1) != 0)
          {
            ++v30;
            v26 = v21[5];
            v28 = (v21[6] - v26) >> 3;
            if (v30 < v28)
              continue;
          }
          goto LABEL_69;
        }
        if ((v32 & 0x200) == 0)
          goto LABEL_37;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinIrTdValidationUtil::ValidateKernelCaching<17u>(v103, &v104, v45);
LABEL_67:
        v35 = 0;
LABEL_69:
        if (v88 && v87 < 0)
          operator delete(v86[1]);
        if ((v35 & 1) == 0)
          goto LABEL_89;
LABEL_73:
        v42 = (uint64_t *)v21[1];
        if (v42)
        {
          do
          {
            v43 = v42;
            v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (uint64_t *)v21[2];
            v44 = *v43 == (_QWORD)v21;
            v21 = v43;
          }
          while (!v44);
        }
        v21 = v43;
        if (v43 == (uint64_t *)v90)
        {
LABEL_84:
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v89, v90[0]);
          v3 += 24;
          if (v3 == v82)
          {
LABEL_85:
            v48 = 0;
            goto LABEL_90;
          }
          goto LABEL_3;
        }
      }
    }
  }
  v49 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v49)
    ZinIrTdValidationUtil::ValidateKernelCaching<11u>(v49, v50, v51, v52, v53, v54, v55, v56);
LABEL_89:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v89, v90[0]);
  v48 = 3;
LABEL_90:
  v86[0] = (void **)&v91;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100](v86);
  return v48;
}

void sub_206FE91D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,char *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,_QWORD *a40,uint64_t a41,char a42)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a37, a40);
  a27 = &a42;
  std::vector<std::list<ZinAneInstruction *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void DumpTask<11u>(uint8_t *buf, _BYTE *a2)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Error: Checking for Internal Buffer Overflow failed", buf, 2u);
}

void ZinIrCodegenValidateTds<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation for L2 circular buffer failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Validation kernel caching failure.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinIrContextSwitchValidator<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Last task of every segment requires TSR to be set\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Producing chained buffers cannot be context switch points\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Last task of the network should have no live outs set\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<11u>::HandleCommonArgMinMax(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing mir_info in NEPoolLayer\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinAneTd<11u>::HandleTileDmaSrcConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Oplayer shouldn't have more than 3 inputs at codegen\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void HandlePELayer<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Invalid PE Secure Flush", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void PECodegenUtils::HandlePEGOCLayer<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: PEGOC is binary, so it should encapsulate at least a Dynamic GOC layer.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void PECodegenUtils::HandlePEPoolLayer<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: DoPool failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: PE Pooling operation not supported.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: PE Max Pooling padding mode is not Negative\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: PE Min Pooling padding mode is not Positive\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: DoPoolKernel failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void CodegenReductionFinalScaleEpsilon<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Final scale of PE reduction should not be zero or subnormal.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinValidateTd<11u>::Test(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<11u>::Test(uint8_t *a1, _QWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 136315138;
  *a2 = "kernel_dma_src_header_cache_hint == ane_kernel_dma_src_header_dma_config_cache_hint_noalloc_v11 || kernel_dma_sr"
        "c_header_cache_hint == ane_kernel_dma_src_header_dma_config_cache_hint_alloc_v11 || kernel_dma_src_header_cache_"
        "hint == ane_kernel_dma_src_header_dma_config_cache_hint_depri_v11 || kernel_dma_src_header_cache_hint == ane_ker"
        "nel_dma_src_header_dma_config_cache_hint_drop_v11";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a1);
}

{
  *(_DWORD *)a1 = 136315138;
  *a2 = "kernel_dma_src_coeff_cache_hint == ane_kernel_dma_src_coeff_dma_config_cache_hint_noalloc_v11 || kernel_dma_src_"
        "coeff_cache_hint == ane_kernel_dma_src_coeff_dma_config_cache_hint_alloc_v11 || kernel_dma_src_coeff_cache_hint "
        "== ane_kernel_dma_src_coeff_dma_config_cache_hint_depri_v11 || kernel_dma_src_coeff_cache_hint == ane_kernel_dma"
        "_src_coeff_dma_config_cache_hint_drop_v11";
  OUTLINED_FUNCTION_1_1(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a1);
}

void ZinValidateTd<11u>::ValidateL2CircularBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<11u>::CheckKMEMBufferSizes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<11u>::ValidationForNonZeroFields(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<11u>::CheckRedundantKDMARegisters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinValidateTd<11u>::ValidateFillLowerNEFirst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

void ZinIrTdValidationUtil::ValidateKernelCaching<11u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

{
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "%s\n", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_4();
}

uint64_t ZinMirBatchLegalizerForHWConstraintsTransform(ZinIrOpLayerGraph *a1, ZinIrOpLayer *this)
{
  uint64_t Hal;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  ZinIrOpLayer *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  ZinEngineLayerMirInfo *v24;
  ZinEngineLayerMirInfo *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t *v55;
  unint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t *v96;
  char *v97;
  unint64_t v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  ZinIrOpLayerGraph *v107;
  void *v108;
  unint64_t *v109;
  unint64_t *v110;
  ZinEngineLayerMirInfo *v111[2];
  __int128 v112;
  int v113;
  _QWORD v114[2];
  uint64_t v115;
  void *__p;
  void *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  uint64_t v121;

  if (*(_DWORD *)(*((_QWORD *)this + 8) + 8) == 85 && *((_QWORD *)this + 54))
  {
    if ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)this + 88))(this) != 1)
      return 0;
  }
  else if (!ZinIrOpLayer::IsANELayer(this))
  {
    return 0;
  }
  v107 = a1;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)this + 2) + 160));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v6 = *(unsigned __int8 *)(v5 + 1234);
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0);
  v8 = v7;
  if (v6)
  {
    if (ZinIrOpLayer::IsANELayer(this))
    {
      v9 = *(_QWORD *)(v8 + 48);
      if (v9 > *(_QWORD *)(v5 + 384))
      {
        SplitBatchChunksByMaxNumGroups(v9, v5, (uint64_t)&v108);
        v10 = (uint64_t)v109;
        v11 = (uint64_t **)v107;
        goto LABEL_10;
      }
    }
LABEL_47:
    v44 = 1;
    goto LABEL_88;
  }
  v15 = *(_QWORD *)(v7 + 56);
  v16 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)
                  + 56);
  v17 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  if (v17 == 89)
  {
    v27 = *(_QWORD *)(*((_QWORD *)this + 54) + 64);
    v20 = *(int *)(v27 + 40);
    v21 = *(int *)(v27 + 44);
    goto LABEL_24;
  }
  if (v17 != 85 || (v18 = *((_QWORD *)this + 54)) == 0)
  {
    v21 = 1;
    v20 = 1;
LABEL_24:
    v26 = *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 48);
    v23 = 1;
    v22 = 1;
    goto LABEL_25;
  }
  v19 = *(int **)(v18 + 136);
  v20 = v19[82];
  v21 = v19[83];
  v22 = v19[85];
  v23 = v19[86];
  v24 = (ZinEngineLayerMirInfo *)operator new();
  ZinEngineLayerMirInfo::ZinEngineLayerMirInfo(v24, *(int *)(v5 + 8));
  v111[0] = v24;
  v8 = ZinNELayer::ComputeMirInfo(this, v5, (char **)v111, 1);
  v25 = v111[0];
  if ((_DWORD)v8)
  {
    v26 = 0;
    v111[0] = 0;
    if (!v25)
    {
LABEL_72:
      v65 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v65)
        goto LABEL_86;
      goto LABEL_87;
    }
  }
  else
  {
    v15 = *((_QWORD *)v111[0] + 10);
    v16 = *((_QWORD *)v111[0] + 11);
    v26 = *((_QWORD *)v111[0] + 13);
    v111[0] = 0;
  }
  ZinEngineLayerMirInfo::~ZinEngineLayerMirInfo(v25);
  MEMORY[0x20BD002F8]();
  if ((_DWORD)v8)
    goto LABEL_72;
LABEL_25:
  v28 = v21 * v15 * v20;
  v29 = v23 * v16 * v22;
  v30 = *(_QWORD *)(v5 + 688);
  if (v26 == 1 && (v28 > v30 || v29 > *(_QWORD *)(v5 + 696)))
  {
    v32 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v32)
      ZinMirBatchLegalizerForHWConstraintsTransform(v32, v33, v34, v35, v36, v37, v38, v39);
    goto LABEL_71;
  }
  if (v28 * v26 <= v30 && v29 * v26 <= *(_QWORD *)(v5 + 696))
    goto LABEL_47;
  if (!v26)
    goto LABEL_69;
  v40 = 1;
  while (1)
  {
    v41 = v26 / (v40 + 1);
    v42 = v41 <= v41 + v26 - v41 * (v40 + 1) ? v41 + v26 - v41 * (v40 + 1) : v26 / (v40 + 1);
    if (v42 * v28 < v30 && v42 * v29 < *(_QWORD *)(v5 + 696))
      break;
    ++v40;
    if (!v42)
      goto LABEL_69;
  }
  if (!v42)
  {
LABEL_69:
    v57 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v57)
      ZinMirBatchLegalizerForHWConstraintsTransform(v57, v58, v59, v60, v61, v62, v63, v64);
    goto LABEL_71;
  }
  v109 = (unint64_t *)v108;
  std::vector<unsigned long>::reserve(&v108, v40 + 1);
  v45 = v109;
  if (v40)
  {
    v46 = 0;
    v47 = 0;
    v48 = v109;
    do
    {
      if (v48 >= v110)
      {
        v49 = (unint64_t *)v108;
        v50 = ((char *)v48 - (_BYTE *)v108) >> 3;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 61)
          goto LABEL_114;
        v52 = (char *)v110 - (_BYTE *)v108;
        if (((char *)v110 - (_BYTE *)v108) >> 2 > v51)
          v51 = v52 >> 2;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v110, v53);
          v49 = (unint64_t *)v108;
          v48 = v109;
        }
        else
        {
          v54 = 0;
        }
        v55 = (unint64_t *)&v54[8 * v50];
        *v55 = v41;
        v45 = v55 + 1;
        while (v48 != v49)
        {
          v56 = *--v48;
          *--v55 = v56;
        }
        v108 = v55;
        v109 = v45;
        v110 = (unint64_t *)&v54[8 * v53];
        if (v49)
          operator delete(v49);
      }
      else
      {
        *v48 = v41;
        v45 = v48 + 1;
      }
      v109 = v45;
      v47 += v41;
      ++v46;
      v48 = v45;
    }
    while (v40 != v46);
  }
  else
  {
    v47 = 0;
  }
  if (v45 >= v110)
  {
    v90 = (unint64_t *)v108;
    v91 = ((char *)v45 - (_BYTE *)v108) >> 3;
    v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 61)
LABEL_114:
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v93 = (char *)v110 - (_BYTE *)v108;
    if (((char *)v110 - (_BYTE *)v108) >> 2 > v92)
      v92 = v93 >> 2;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
      v94 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v94 = v92;
    if (v94)
    {
      v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v110, v94);
      v90 = (unint64_t *)v108;
      v45 = v109;
    }
    else
    {
      v95 = 0;
    }
    v96 = (unint64_t *)&v95[8 * v91];
    v97 = &v95[8 * v94];
    *v96 = v42;
    v10 = (uint64_t)(v96 + 1);
    while (v45 != v90)
    {
      v98 = *--v45;
      *--v96 = v98;
    }
    v108 = v96;
    v109 = (unint64_t *)v10;
    v110 = (unint64_t *)v97;
    if (v90)
      operator delete(v90);
  }
  else
  {
    *v45 = v42;
    v10 = (uint64_t)(v45 + 1);
  }
  v11 = (uint64_t **)v107;
  v109 = (unint64_t *)v10;
  if (v47 + v42 != v26)
  {
    v99 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v99)
      ZinMirBatchLegalizerForHWConstraintsTransform(v99, v100, v101, v102, v103, v104, v105, v106);
LABEL_71:
    v8 = 3;
    goto LABEL_72;
  }
LABEL_10:
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v12 = (v10 - (uint64_t)v108) >> 3;
  v117 = 0;
  v118 = 0;
  __p = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, v108, v10, v12);
  ZinIrLayerBatchSplitInfo::AppendBatchSplit((uint64_t)&v119, v12, (uint64_t **)&__p);
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  v114[0] = v114;
  v114[1] = v114;
  v115 = 0;
  v8 = ZinMirTensorTransform::SplitLayerPerBatch(v11, (const std::string *)this, (uint64_t)&v119, v114);
  if (!(_DWORD)v8)
  {
    if (v115)
    {
      v13 = *(ZinIrOpLayer **)(v114[0] + 16);
      *(_OWORD *)v111 = 0u;
      v112 = 0u;
      v113 = 1065353216;
      v14 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)v11, (uint64_t **)this, v13, v111);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v111);
      if ((v14 & 1) != 0)
      {
        ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)v11, this, 0);
        v8 = 0;
        goto LABEL_82;
      }
      v81 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v81)
        std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v73)
        ZinMirBatchLegalizerForHWConstraintsTransform(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    v8 = 3;
  }
LABEL_82:
  std::__list_imp<ZinIrSection *>::clear(v114);
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if ((_DWORD)v8)
  {
    v65 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v65)
LABEL_86:
      ZinMirBatchLegalizerForHWConstraintsTransform(v65, v66, v67, v68, v69, v70, v71, v72);
LABEL_87:
    v44 = 0;
    goto LABEL_88;
  }
  v44 = 1;
LABEL_88:
  if (v108)
  {
    v109 = (unint64_t *)v108;
    operator delete(v108);
  }
  if ((v44 & 1) != 0)
    return 0;
  return v8;
}

void sub_206FEEFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  std::__list_imp<ZinIrSection *>::clear(&a18);
  v24 = *(void **)(v22 - 104);
  if (v24)
  {
    *(_QWORD *)(v22 - 96) = v24;
    operator delete(v24);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinMirPrepareForBatchesWithNoHWSupport(uint64_t **a1, std::string *a2)
{
  uint64_t Hal;
  int v5;
  uint64_t v6;
  uint64_t v8;
  double v9;
  uint64_t **v10;
  char *v11;
  _QWORD **v12;
  _QWORD **v13;
  uint64_t v14;
  int v15;
  std::string::pointer data;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  std::string::size_type size;
  const void **v23;
  std::string *v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  std::string v42;
  std::string **v43;
  std::string __p;
  BOOL v45;
  std::string v46;
  std::string *v47;

  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(a2->__r_.__value_.__r.__words[2] + 160));
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 1234))
    return 0;
  if (!ZinIrOpLayer::IsIntermediate((ZinIrOpLayer *)a2))
    return 0;
  v5 = *(_DWORD *)(a2[2].__r_.__value_.__r.__words[2] + 8);
  if (v5 == 7)
    return 0;
  v47 = a2;
  v8 = (*(uint64_t (**)(std::string *, _QWORD, _QWORD))(a2->__r_.__value_.__r.__words[0] + 32))(a2, 0, 0);
  v9 = ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()(a1, v8, a2, &v45);
  if (!v45
    && *(uint64_t *)((*(uint64_t (**)(std::string *, _QWORD, _QWORD, double))(a2->__r_.__value_.__r.__words[0]
                                                                                     + 32))(a2, 0, 0, v9)+ 48) >= 2)
  {
    v43 = &v47;
    v10 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>(a1 + 8, (unint64_t **)&v43);
    v11 = (char *)(a1 + 13);
    if (v10)
      v11 = (char *)(v10 + 3);
    v12 = *(_QWORD ***)v11;
    v13 = (_QWORD **)*((_QWORD *)v11 + 1);
    if (*(_QWORD ***)v11 != v13)
    {
      while (1)
      {
        v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)**v12 + 32))(**v12, 0, 0);
        ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()(a1, v14, v47, (BOOL *)&v43);
        v15 = v43;
        std::string::operator=(&v46, &__p);
        if (v15)
          break;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (++v12 == v13)
          goto LABEL_18;
      }
      v45 = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_18:
  v41 = v45;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v42, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  else
  {
    v42 = v46;
  }
  if (v41)
  {
    v17 = (char *)a2[4].__r_.__value_.__r.__words[2];
    data = a2[5].__r_.__value_.__l.__data_;
    while (v17 != data)
    {
      v18 = *(_QWORD *)v17;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 64) + 8) == 7)
      {
        v19 = *(unsigned __int8 *)(v18 + 47);
        v20 = *(_QWORD *)(v18 + 32);
        if ((v19 & 0x80u) == 0)
          v21 = *(unsigned __int8 *)(v18 + 47);
        else
          v21 = *(_QWORD *)(v18 + 32);
        size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v42.__r_.__value_.__l.__size_;
        if (v21 != size)
          goto LABEL_47;
        v23 = (const void **)(v18 + 24);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v42;
        else
          v24 = (std::string *)v42.__r_.__value_.__r.__words[0];
        if ((v19 & 0x80) != 0)
        {
          if (memcmp(*v23, v24, v20))
            goto LABEL_47;
        }
        else if ((_DWORD)v19)
        {
          while (*(unsigned __int8 *)v23 == v24->__r_.__value_.__s.__data_[0])
          {
            v23 = (const void **)((char *)v23 + 1);
            v24 = (std::string *)((char *)v24 + 1);
            if (!--v19)
              goto LABEL_43;
          }
LABEL_47:
          v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v25)
            ZinMirPrepareForBatchesWithNoHWSupport(v25, v26, v27, v28, v29, v30, v31, v32);
          goto LABEL_49;
        }
      }
      else if (ZinMirBatchLegalizer(a1, (std::string *)v18, &v45))
      {
        v33 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v33)
          ZinMirBatchLegalizerForHWConstraintsTransform(v33, v34, v35, v36, v37, v38, v39, v40);
        goto LABEL_49;
      }
LABEL_43:
      v17 += 8;
    }
    goto LABEL_46;
  }
  if (v5 != 36 || !ZinMirPrepareViewForBatches(a1, a2))
  {
LABEL_46:
    v6 = 0;
    goto LABEL_50;
  }
LABEL_49:
  v6 = 3;
LABEL_50:
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  return v6;
}

void sub_206FEF370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPrepareViewForBatches(uint64_t **a1, std::string *a2)
{
  std::string::size_type v2;
  uint64_t v5;
  ZinIrTensor *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  BOOL v23;

  v2 = a2[2].__r_.__value_.__r.__words[2];
  if (*(_DWORD *)(v2 + 8) != 36)
    return 0;
  v23 = 0;
  v5 = (*(uint64_t (**)(std::string *, _QWORD, _QWORD))(a2->__r_.__value_.__r.__words[0] + 32))(a2, 0, 0);
  v6 = (ZinIrTensor *)(*(uint64_t (**)(std::string *, _QWORD, _QWORD))(a2->__r_.__value_.__r.__words[0] + 32))(a2, 0, 0);
  ZinIrTensor::GetParentTensor(v6, &v21);
  v8 = v21;
  v7 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_QWORD *)(v5 + 56) * *(_QWORD *)(v2 + 64) == *(_QWORD *)(v8 + 56))
    return 0;
  v11 = ZinMirBatchLegalizer(a1, a2, &v23);
  if ((_DWORD)v11)
  {
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinMirBatchLegalizerForHWConstraintsTransform(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  return v11;
}

uint64_t ZinMirPrepareForBatchesTransform(ZinIrOpLayerGraph *a1, ZinIrOpLayer *this)
{
  ZinIrOpLayer *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19[16];

  if (!ZinIrOpLayer::IsIntermediate(this))
    return 0;
  v5 = *(_DWORD *)(*((_QWORD *)this + 8) + 8);
  if (v5 != 85)
  {
    if (v5 == 7 && ZinMirUtils::ZinMirHandleConstTensorBatching(a1, this, v4))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        ZinMirPrepareForBatchesTransform();
      return 3;
    }
    return 0;
  }
  if (!*((_QWORD *)this + 54))
    return 0;
  if ((*(uint64_t (**)(ZinIrOpLayer *))(*(_QWORD *)this + 88))(this) == 1)
  {
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)this + 120))(this))
    {
      (*(void (**)(BOOL *__return_ptr, ZinIrOpLayer *))(*(_QWORD *)this + 128))(v19, this);
      v7 = *(_QWORD *)(*(_QWORD *)v19 + 48);
      v8 = v7 == *(_QWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 48);
      std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v19);
    }
    else
    {
      v8 = 0;
    }
    v6 = 0;
    if (*(uint64_t *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0)+ 48) >= 2&& !v8)
    {
      v6 = 0;
      v18 = *(_QWORD *)(*((_QWORD *)this + 54) + 136);
      *(_BYTE *)(v18 + 552) = 1;
      *(_BYTE *)(v18 + 448) |= 0x80u;
    }
  }
  else
  {
    v6 = ZinMirBatchLegalizer((uint64_t **)a1, (std::string *)this, v19);
    if ((_DWORD)v6)
    {
      v10 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v10)
        ZinMirBatchLegalizerForHWConstraintsTransform(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  return v6;
}

void sub_206FEF678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinMirBatchLegalizer(uint64_t **a1, std::string *a2, BOOL *a3)
{
  uint64_t Hal;
  uint64_t v7;
  char HaveSameBatch;
  ZinMirConvUtils *v9;
  ZinMirConvUtils *v10;
  unint64_t v11;
  std::string::__raw *v12;
  uint64_t v13;
  uint64_t v15;
  ZinIrOpLayer *v16;
  int v17;
  ZinIrOpLayer **v18;
  ZinIrOpLayer *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  std::string::pointer data;
  uint64_t v32;
  std::string::pointer v34;
  uint64_t v35;
  _OWORD v37[2];
  int v38;
  _QWORD v39[2];
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  void *__p;
  _BYTE *v46;
  uint64_t v47;
  __int128 buf;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v46 = 0;
  v47 = 0;
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(a2->__r_.__value_.__r.__words[2] + 160));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
  v44 = 0;
  HaveSameBatch = ZinIrBatchUtils::LayersHaveSameBatch((_QWORD **)&a2[3].__r_.__value_.__r.__words[2], &v44);
  *a3 = 0;
  if ((HaveSameBatch & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v12 = (std::string::__raw *)&a2[1];
      if (SHIBYTE(a2[1].__r_.__value_.__r.__words[2]) < 0)
        v12 = (std::string::__raw *)v12->__words[0];
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v12;
      _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Batch Splitting is skipped for %s because inputs have different batch sizes.\n", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_12;
  }
  if (v44 == 1)
  {
LABEL_12:
    v13 = 0;
    goto LABEL_13;
  }
  if (!*(_BYTE *)(v7 + 1234))
    goto LABEL_19;
  v9 = (ZinMirConvUtils *)(*(uint64_t (**)(std::string *))(a2->__r_.__value_.__r.__words[0] + 88))(a2);
  if (ZinIrOpLayer::IsNELayer((ZinIrOpLayer *)a2))
  {
    (*(void (**)(__int128 *__return_ptr, std::string *))(a2->__r_.__value_.__r.__words[0] + 392))(&buf, a2);
    v10 = (ZinMirConvUtils *)*((_QWORD *)&buf + 1);
    (*(void (**)(__int128 *__return_ptr, std::string *))(a2->__r_.__value_.__r.__words[0] + 400))(&buf, a2);
    if (ZinMirConvUtils::IsChannelwiseConvolution(v10, *((ZinMirConvUtils **)&buf + 1), v9))
    {
      v11 = v44;
      if (v44 > *(_QWORD *)(v7 + 384))
        goto LABEL_18;
      goto LABEL_12;
    }
  }
  if (v9 != (ZinMirConvUtils *)1)
    goto LABEL_19;
  v11 = v44;
  if (v44 <= *(_QWORD *)(v7 + 384))
  {
    if (*(_DWORD *)(a2[2].__r_.__value_.__r.__words[2] + 8) == 85)
    {
      if ((*(unsigned int (**)(std::string *))(a2->__r_.__value_.__r.__words[0] + 120))(a2))
      {
        (*(void (**)(__int128 *__return_ptr, std::string *))(a2->__r_.__value_.__r.__words[0] + 128))(&buf, a2);
        v29 = *(_QWORD *)(buf + 48);
        v30 = v29 == *(_QWORD *)((*(uint64_t (**)(std::string *, _QWORD, _QWORD))(a2->__r_.__value_.__r.__words[0]
                                                                                          + 32))(a2, 0, 0)+ 48);
        std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&buf);
      }
      else
      {
        v30 = 0;
      }
      data = a2[16].__r_.__value_.__l.__data_;
      if (data)
      {
        v32 = *((_QWORD *)data + 17);
        if (v32 && !v30)
        {
          *(_BYTE *)(v32 + 552) = 1;
          *(_BYTE *)(v32 + 448) |= 0x80u;
        }
      }
      v34 = a2[18].__r_.__value_.__l.__data_;
      if (v34)
      {
        v35 = *((_QWORD *)v34 + 17);
        if (v35 && !v30)
        {
          v13 = 0;
          *(_BYTE *)(v35 + 552) = 1;
          *(_BYTE *)(v35 + 448) |= 0x80u;
          goto LABEL_13;
        }
      }
    }
    goto LABEL_12;
  }
LABEL_18:
  *a3 = 1;
  SplitBatchChunksByMaxNumGroups(v11, v7, (uint64_t)&__p);
LABEL_19:
  buf = 0uLL;
  v49 = 0;
  v15 = v44;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v41, __p, (uint64_t)v46, (v46 - (_BYTE *)__p) >> 3);
  ZinIrLayerBatchSplitInfo::AppendBatchSplit((uint64_t)&buf, v15, (uint64_t **)&v41);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (*((_QWORD *)&buf + 1) - (_QWORD)buf >= 9uLL)
    *a3 = 1;
  v39[0] = v39;
  v39[1] = v39;
  v40 = 0;
  v13 = ZinMirTensorTransform::SplitLayerPerBatch(a1, a2, (uint64_t)&buf, v39);
  if ((_DWORD)v13 || !v40)
  {
    v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v20)
      ZinMirBatchLegalizerForHWConstraintsTransform(v20, v21, v22, v23, v24, v25, v26, v27);
    goto LABEL_41;
  }
  v16 = *(ZinIrOpLayer **)(v39[0] + 16);
  memset(v37, 0, sizeof(v37));
  v38 = 1065353216;
  v17 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)a2, v16, v37);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v37);
  v18 = (ZinIrOpLayer **)a2[3].__r_.__value_.__r.__words[2];
  if ((ZinIrOpLayer **)a2[4].__r_.__value_.__l.__data_ == v18)
    v19 = 0;
  else
    v19 = *v18;
  v28 = v17 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, (ZinIrOpLayer *)a2, 0);
  if (v19 && *((_QWORD *)v19 + 15) == *((_QWORD *)v19 + 14))
  {
    if ((v28 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v19, 0) & 1) != 0)
      goto LABEL_33;
LABEL_38:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinMirBatchLegalizer();
    v13 = 3;
    goto LABEL_41;
  }
  if ((v28 & 1) == 0)
    goto LABEL_38;
LABEL_33:
  v13 = 0;
LABEL_41:
  std::__list_imp<ZinIrSection *>::clear(v39);
  if ((_QWORD)buf)
  {
    *((_QWORD *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
LABEL_13:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_206FEFAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v23 - 96);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinMirPrepareFrontEndConcats(ZinIrOpLayerGraph *a1, ZinIrOpLayer *a2)
{
  uint64_t v2;
  int v5;
  uint64_t Hal;
  void *v7;
  int v8;
  BOOL HaveBatches;
  uint64_t v10;
  unint64_t v11;
  char v12;
  const ZinIrOpLayer *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  ZinIrOpLayer *v17;
  int v18;
  char IsNoOp;
  const ZinIrOpLayer *v20;
  char v21;
  BOOL IsConnectedToLiveOut;
  uint64_t **v23;
  char *v24;
  ZinIrOpLayer ***v25;
  ZinIrOpLayer ***v26;
  char v27;
  ZinIrOpLayerGraph **v28;
  ZinIrOpLayer *v29;
  uint64_t IndexOfMatchedIncomingLayer;
  ZinIrTensor *v31;
  uint64_t Interleave;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  ZinIrTensor *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  size_t v47;
  void **v48;
  char *v49;
  uint64_t v50;
  void *v51[2];
  uint64_t v52;
  void *__p[2];
  __int128 v54;
  uint64_t v55;

  v2 = *((_QWORD *)a2 + 8);
  if (*(_DWORD *)(v2 + 8) != 7)
    return 0;
  if (*(_QWORD *)(v2 + 24) == *(_QWORD *)(v2 + 16))
  {
    *(int64x2_t *)__p = vdupq_n_s64(1uLL);
    v54 = *(_OWORD *)__p;
    v55 = 1;
    v5 = *(_DWORD *)(v2 + 12);
    Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
    (*(void (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal);
    ZinConcatLayerUtils::ComputeConcatViewAndStep(v5, (_QWORD **)a2 + 11, (uint64_t)__p, v51);
    v7 = *(void **)(v2 + 16);
    if (v7)
    {
      *(_QWORD *)(v2 + 24) = v7;
      operator delete(v7);
      *(_QWORD *)(v2 + 16) = 0;
      *(_QWORD *)(v2 + 24) = 0;
      *(_QWORD *)(v2 + 32) = 0;
    }
    *(_OWORD *)(v2 + 16) = *(_OWORD *)v51;
    *(_QWORD *)(v2 + 32) = v52;
  }
  v8 = *(_DWORD *)(v2 + 12);
  HaveBatches = ZinIrBatchUtils::LayersHaveBatches((_QWORD *)a2 + 11);
  v10 = *((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) != v10)
  {
    v11 = 0;
    v12 = !HaveBatches;
    do
    {
      v13 = *(const ZinIrOpLayer **)(v10 + 8 * v11);
      v14 = (*(uint64_t (**)(const ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, 0, 0);
      v15 = v14;
      if (*(_QWORD *)(v14 + 112))
        v16 = v12;
      else
        v16 = 1;
      if ((v16 & 1) != 0 || v8 == 5)
      {
        v17 = *(ZinIrOpLayer **)(v14 + 96);
        v18 = *(_DWORD *)(*((_QWORD *)v17 + 8) + 8);
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v54 = 0;
        IsNoOp = ZinIrOpLayer::IsNoOp(v17, (uint64_t *)__p);
        if (v18 == 7)
          v21 = 0;
        else
          v21 = IsNoOp;
        if ((v21 & 1) != 0)
        {
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          IsConnectedToLiveOut = ZinOpLayerUtils::IsConnectedToLiveOut(*(ZinOpLayerUtils **)(v15 + 96), v20);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (!IsConnectedToLiveOut)
          {
            v50 = *(_QWORD *)(v15 + 96);
            v51[0] = &v50;
            v23 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::__unordered_map_hasher<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::__unordered_map_equal<std::reference_wrapper<ZinIrOpLayer * const>,std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>,std::equal_to<std::reference_wrapper<ZinIrOpLayer * const>>,std::hash<std::reference_wrapper<ZinIrOpLayer * const>>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<ZinIrOpLayer * const>,std::vector<std::reference_wrapper<ZinIrOpLayer * const>>>>>::find<std::reference_wrapper<ZinIrOpLayer * const>>((_QWORD *)a1 + 3, (unint64_t **)v51);
            v24 = (char *)(v23 + 3);
            if (!v23)
              v24 = (char *)a1 + 104;
            __p[1] = 0;
            *(_QWORD *)&v54 = 0;
            __p[0] = 0;
            std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(__p, *(const void **)v24, *((_QWORD *)v24 + 1), (uint64_t)(*((_QWORD *)v24 + 1) - *(_QWORD *)v24) >> 3);
            v25 = (ZinIrOpLayer ***)__p[0];
            v26 = (ZinIrOpLayer ***)__p[1];
            if (__p[0] != __p[1])
            {
              v27 = 0;
              do
              {
                v28 = *v25;
                v29 = **v25;
                if (*(_DWORD *)(*((_QWORD *)v29 + 8) + 8) == 7)
                {
                  if ((v29 != a2) | v27 & 1)
                  {
                    IndexOfMatchedIncomingLayer = ZinIrOpLayerGraph::GetIndexOfMatchedIncomingLayer(a1, v29, v13);
                    ZinMirTensorTransform::CopyAndReplaceInputAtIndex(a1, *v28, IndexOfMatchedIncomingLayer);
                  }
                  else
                  {
                    v27 = 1;
                  }
                }
                ++v25;
              }
              while (v25 != v26);
            }
            v31 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0);
            Interleave = ZinIrTensor::GetInterleave(v31);
            if (v33)
              v34 = Interleave;
            else
              v34 = 1;
            v35 = (_QWORD *)*((_QWORD *)a2 + 11);
            v36 = (_QWORD *)*((_QWORD *)a2 + 12);
            while (v35 != v36)
            {
              v37 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v35 + 32))(*v35, 0, 0);
              v38 = ZinIrTensor::GetInterleave(v37);
              if (v39)
                v40 = v38;
              else
                v40 = 1;
              if (v40 != v34)
              {
                ZinMirTensorTransform::CopyAndReplaceInputAtIndex(a1, a2, v11);
                break;
              }
              ++v35;
            }
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_23;
          }
        }
        ZinMirTensorTransform::CopyAndReplaceInputAtIndex(a1, a2, v11);
      }
LABEL_23:
      ++v11;
      v10 = *((_QWORD *)a2 + 11);
    }
    while (v11 < (*((_QWORD *)a2 + 12) - v10) >> 3);
  }
  v41 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v42 = *((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) == v42)
    return 0;
  v43 = 0;
  v44 = *(_DWORD *)(v41 + 88);
  while (v44 == *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v42 + 8 * v43) + 32))(*(_QWORD *)(v42 + 8 * v43), 0, 0)+ 88))
  {
    ++v43;
    v42 = *((_QWORD *)a2 + 11);
    if (v43 >= (*((_QWORD *)a2 + 12) - v42) >> 3)
      return 0;
  }
  if (*((char *)a2 + 47) >= 0)
    v47 = *((unsigned __int8 *)a2 + 47);
  else
    v47 = *((_QWORD *)a2 + 4);
  v48 = v51;
  std::string::basic_string[abi:ne180100]((uint64_t)v51, v47 + 21);
  if (v52 < 0)
    v48 = (void **)v51[0];
  if (v47)
  {
    if (*((char *)a2 + 47) >= 0)
      v49 = (char *)a2 + 24;
    else
      v49 = (char *)*((_QWORD *)a2 + 3);
    memmove(v48, v49, v47);
  }
  strcpy((char *)v48 + v47, "copy_for_format_match");
  ZinObjectNameFactory::ZinObjectNameFactory(__p, v51);
  if (SHIBYTE(v52) < 0)
    operator delete(v51[0]);
  v45 = ZinMirTensorTransform::ReconcileInputTensorFormat((uint64_t **)a1, a2, (uint64_t)__p, v44);
  __p[0] = off_24C01FBB0;
  if (SHIBYTE(v54) < 0)
    operator delete(__p[1]);
  return v45;
}

void sub_206FEFF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPrepareIr(ZinTensorMirInfoPropogator **a1, uint64_t a2, CFArrayRef *a3)
{
  ZinIrContext *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  const ZinIrControlFlowGraph *v21;
  void **v22;
  uint64_t v23;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  ZinMirInsertCopyForInputView *inserted;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  ZinIrCompilerParameters *v74;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char AggressiveTensorCaching;
  ZinMirCacheTensors *v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::string v93[32];
  std::string v94;
  std::string v95;
  std::string v96;
  _QWORD v97[3];
  _QWORD *v98;
  char v99;
  void *v100[2];
  char v101;
  void **v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v6 = *(ZinIrContext **)(*(_QWORD *)(*(_QWORD *)ZinIrTarget::GetHal(*((ZinIrTarget **)*a1 + 4)) + 32) + 16);
  if (ZinMirOpt::FoldBatchForMatmult(a1, a2))
  {
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v9)
      ZinMirPrepareIr(v9, v10, v11, v12, v13, v14, v15, v16);
    return 0;
  }
  v18 = ZinMirPrepareLayers((uint64_t)a1, a2, (uint64_t)a3, v7, v8);
  if ((_DWORD)v18)
  {
    v17 = v18;
    ZinIrNetworkStatus::SetError(a3, CFSTR("MirPrepareLayersFailure"));
    return v17;
  }
  kdebug_trace();
  v97[0] = &unk_24C053830;
  v97[1] = ZinMirPrepareForBatchesWithNoHWSupport;
  v98 = v97;
  v17 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v97, 0);
  v19 = v98;
  if (v98 == v97)
  {
    v20 = 4;
    v19 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_12;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_12:
  if ((_DWORD)v17)
  {
LABEL_19:
    ZinIrNetworkStatus::SetError(a3, CFSTR("BatchOptimizationFailure"));
    return v17;
  }
  v100[0] = &unk_24C053830;
  v100[1] = ZinMirPrepareForBatchesTransform;
  v102 = v100;
  v17 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v100, 0);
  v22 = v102;
  if (v102 == v100)
  {
    v23 = 4;
    v22 = v100;
  }
  else
  {
    if (!v102)
      goto LABEL_18;
    v23 = 5;
  }
  (*((void (**)(void))*v22 + v23))();
LABEL_18:
  if ((_DWORD)v17)
    goto LABEL_19;
  if (ZinTensorMirInfoPropogator::Run(a1, v21))
  {
    v25 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v25)
      ZinMirBuilder(v25, v26, v27, v28, v29, v30, v31, v32);
    return 3;
  }
  inserted = (ZinMirInsertCopyForInputView *)ZinMirInsertCopyForInputView::ZinMirInsertCopyForInputView(v97, a1, a2);
  ZinMirInsertCopyForInputView::Run(inserted);
  kdebug_trace();
  v17 = ZinMirValidateInOutLayerHints((ZinIrControlFlowGraph *)a1);
  if ((_DWORD)v17)
  {
    v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v34)
      ZinMirPrepareIr(v34, v35, v36, v37, v38, v39, v40, v41);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v100, "before_batch_split");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v96, *(const ZinIrCompilerParameters **)(a2 + 8));
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v100, (ZinIrCompilerParameters *)&v96, a2 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v96);
    if (v101 < 0)
      operator delete(v100[0]);
    v17 = ZinMirBatchOrChannelSplit::TryBatchSplit((uint64_t)a1, a2, (uint64_t)a3);
    if (!(_DWORD)v17)
    {
      std::string::basic_string[abi:ne180100]<0>(v100, "after_batch_split");
      ZinIrCompilerParameters::ZinIrCompilerParameters(&v95, *(const ZinIrCompilerParameters **)(a2 + 8));
      ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v100, (ZinIrCompilerParameters *)&v95, a2 + 16, 256);
      ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v95);
      if (v101 < 0)
        operator delete(v100[0]);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 531))
      {
        v17 = ZinMirBatchOrChannelSplit::TryL2ChannelSplit((uint64_t)a1, a2, (uint64_t)a3);
        if ((_DWORD)v17)
        {
          ZinIrNetworkStatus::SetError(a3, CFSTR("MirPrepareLayersFailure"));
          v50 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v50)
            ZinMirPrepareIr(v50, v51, v52, v53, v54, v55, v56, v57);
          goto LABEL_33;
        }
        std::string::basic_string[abi:ne180100]<0>(v100, "after_channel_split");
        ZinIrCompilerParameters::ZinIrCompilerParameters(&v94, *(const ZinIrCompilerParameters **)(a2 + 8));
        ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v100, (ZinIrCompilerParameters *)&v94, a2 + 16, 256);
        ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v94);
        if (v101 < 0)
          operator delete(v100[0]);
      }
      v17 = MirOpt::SplitConvAndHoistActivation(a1, a2);
      if ((_DWORD)v17)
      {
        v58 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v58)
          ZinMirPrepareIr(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        kdebug_trace();
        v17 = ZinMirSplitForKernelSizeEngine(v6);
        if ((_DWORD)v17)
        {
          v66 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v66)
            ZinMirPrepareIr(v66, v67, v68, v69, v70, v71, v72, v73);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v100, "after_kernel_splitting");
          ZinIrCompilerParameters::ZinIrCompilerParameters(v93, *(const ZinIrCompilerParameters **)(a2 + 8));
          ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)a1, (std::string::size_type)v100, (ZinIrCompilerParameters *)v93, a2 + 16, 256);
          ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v93);
          if (v101 < 0)
            operator delete(v100[0]);
          kdebug_trace();
          v17 = ZinMirBatchLegalizerForHWConstraints((ZinIrControlFlowGraph *)a1);
          if ((_DWORD)v17)
          {
            ZinIrNetworkStatus::SetError(a3, CFSTR("BatchOptimizationFailure"));
          }
          else
          {
            v74 = *(ZinIrCompilerParameters **)(a2 + 8);
            if (!*((_BYTE *)v74 + 492)
              && *((_BYTE *)v74 + 364)
              && (AggressiveTensorCaching = ZinIrCompilerParameters::getAggressiveTensorCaching(v74),
                  v84 = (ZinMirCacheTensors *)ZinMirCacheTensors::ZinMirCacheTensors(v100, (uint64_t)a1, a2),
                  v17 = ZinMirCacheTensors::Execute(v84, AggressiveTensorCaching, (ZinIrNetworkStatus *)a3),
                  (_DWORD)v17))
            {
              v85 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              if (v85)
                ZinMirPrepareIr(v85, v86, v87, v88, v89, v90, v91, v92);
            }
            else
            {
              v17 = MirOpt::ChainingCanonicalizer(a1, a2);
              if ((_DWORD)v17)
              {
                v75 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                if (v75)
                  ZinMirPrepareIr(v75, v76, v77, v78, v79, v80, v81, v82);
              }
            }
          }
        }
      }
      goto LABEL_33;
    }
    ZinIrNetworkStatus::SetError(a3, CFSTR("MirPrepareLayersFailure"));
    v42 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v42)
      ZinMirPrepareIr(v42, v43, v44, v45, v46, v47, v48, v49);
  }
LABEL_33:
  if (v99 < 0)
    operator delete(v98);
  return v17;
}

void sub_206FF056C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t ZinMirPrepareLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ZinMirRemoveSingleChannelEwOpCopy *v5;
  CFArrayRef *v6;
  CFArrayRef *v7;
  uint64_t v8;
  uint64_t v9;
  ZinMirRemoveSingleChannelEwOpCopy *v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  ZinIrControlFlowGraph *v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const ZinIrCompilerParameters *v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const ZinIrHalParameters *v103;
  BOOL *v104;
  _BOOL8 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL8 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL8 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  ZinQuantizationLog *v129;
  _BOOL8 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BOOL8 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL *v146;
  _BOOL8 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  ZinIrControlFlowGraph *v155;
  _BOOL8 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BOOL8 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _BOOL8 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BOOL8 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _BOOL8 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BOOL8 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BOOL8 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _BOOL8 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL8 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  const ZinIrCompilerParameters *v232;
  _BOOL8 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _BOOL8 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _BOOL8 v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  const ZinIrCompilerParameters *v257;
  _BOOL8 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  BOOL *v266;
  _QWORD *v267;
  uint64_t v268;
  _BOOL8 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _BOOL8 v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _BOOL8 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _BOOL8 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  const std::string::value_type *v302;
  std::string::size_type v303;
  std::string *v304;
  __int128 v305;
  int v306;
  _QWORD *v307;
  uint64_t v308;
  _BOOL4 v309;
  _BOOL8 v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  BOOL v318;
  _BOOL8 v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _BOOL8 v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  std::string v335;
  std::string v336;
  std::string buf;
  std::string v338;
  void *__p;
  _QWORD *v340;
  uint64_t v341;
  void *v342[2];
  char v343;
  std::string v344;
  std::string v345;
  std::string v346;
  std::string v347;
  std::string v348[32];
  std::string v349[32];
  std::string v350[32];
  std::string v351[32];
  std::string v352[32];
  std::string v353[32];
  _BYTE v354[160];
  std::string v355[32];
  std::string v356[32];
  std::string v357[32];
  char v358;
  std::string v359[32];
  char v360;
  std::string v361[32];
  _BYTE v362[160];
  std::string v363[32];
  _BYTE v364[64];
  std::string v365[32];
  std::string v366[32];
  _QWORD v367[2];
  std::string v368[32];
  std::string v369[32];
  std::string v370[32];
  _QWORD v371[2];
  std::__shared_weak_count *v372;
  std::string v373[32];
  char v374;
  _QWORD v375[3];
  _QWORD *v376;
  _QWORD v377[3];
  _QWORD *v378;
  _QWORD v379[3];
  _QWORD *v380;
  _QWORD v381[3];
  _QWORD *v382;
  _QWORD v383[3];
  _QWORD *v384;
  _QWORD v385[3];
  _QWORD *v386;
  _QWORD v387[3];
  _QWORD *v388;
  uint64_t v389;

  v5 = (ZinMirRemoveSingleChannelEwOpCopy *)MEMORY[0x24BDAC7A8](a1, a2, a3, a4, a5);
  v7 = v6;
  v9 = v8;
  v10 = v5;
  v389 = *MEMORY[0x24BDAC8D0];
  v11 = *(int *)(v8 + 40);
  v374 = 0;
  v12 = ZinIrOpt::ReverseCSE(v5, v8, &v374, 4);
  if ((_DWORD)v12)
  {
    ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinMirPrepareLayers(v13, v14, v15, v16, v17, v18, v19, v20);
    return v12;
  }
  v387[0] = &unk_24C053830;
  v387[1] = ZinCreateComposites;
  v388 = v387;
  v12 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v387, 0);
  v21 = v388;
  if (v388 == v387)
  {
    v22 = 4;
    v21 = v387;
  }
  else
  {
    if (!v388)
      goto LABEL_9;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_9:
  if ((_DWORD)v12)
  {
    v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v23)
      ZinMirPrepareLayers(v23, v24, v25, v26, v27, v28, v29, v30);
    return v12;
  }
  v31 = *(_QWORD *)(v9 + 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "after_composite_creation");
  ZinIrCompilerParameters::ZinIrCompilerParameters(v373, (const ZinIrCompilerParameters *)v31);
  ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v373, v9 + 16, 256);
  ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v373);
  if (SHIBYTE(v341) < 0)
    operator delete(__p);
  v12 = ZinIrOpt::CollapseQuantDequant(v10, v9);
  if (!(_DWORD)v12)
  {
    if (ZinIrCompilerParameters::getSingleChannelEWOpCopyRemoval((ZinIrCompilerParameters *)v31))
    {
      v12 = ZinMirRemoveSingleChannelEwOpCopy::Transform(v10, v33);
      if ((_DWORD)v12)
      {
        v34 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v34)
          ZinMirPrepareLayers(v34, v35, v36, v37, v38, v39, v40, v41);
        return v12;
      }
    }
    v371[0] = v9;
    v42 = (char *)operator new(0x90uLL);
    *((_QWORD *)v42 + 2) = 0;
    *(_QWORD *)v42 = &unk_24C05BAE0;
    *((_QWORD *)v42 + 1) = 0;
    *(_OWORD *)(v42 + 56) = 0u;
    *(_OWORD *)(v42 + 72) = 0u;
    *(_OWORD *)(v42 + 88) = 0u;
    *((_QWORD *)v42 + 17) = 0;
    *(_OWORD *)(v42 + 40) = 0u;
    *(_OWORD *)(v42 + 104) = 0u;
    *(_OWORD *)(v42 + 120) = 0u;
    *(_OWORD *)(v42 + 24) = 0u;
    *((_DWORD *)v42 + 14) = 1065353216;
    *((_OWORD *)v42 + 4) = 0u;
    *((_OWORD *)v42 + 5) = 0u;
    *((_DWORD *)v42 + 24) = 1065353216;
    *((_DWORD *)v42 + 34) = 1065353216;
    v371[1] = v42 + 24;
    v372 = (std::__shared_weak_count *)v42;
    std::string::basic_string[abi:ne180100]<0>(&__p, "before_lower");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v370, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v370, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v370);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    kdebug_trace();
    v385[0] = &off_24BFFF350;
    v385[1] = v371;
    v386 = v385;
    v12 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v385, 1);
    v43 = v386;
    if (v386 == v385)
    {
      v44 = 4;
      v43 = v385;
    }
    else
    {
      if (!v386)
        goto LABEL_27;
      v44 = 5;
    }
    (*(void (**)(_QWORD *))(*v43 + 8 * v44))(v43);
LABEL_27:
    if ((_DWORD)v12)
      goto LABEL_28;
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_lower");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v369, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v369, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v369);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    kdebug_trace();
    kdebug_trace();
    v374 = 0;
    v12 = ZinIrOpt::ReverseCSE(v10, v9, &v374, 3);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v48 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v48)
        ZinMirPrepareLayers(v48, v49, v50, v51, v52, v53, v54, v55);
      goto LABEL_28;
    }
    v383[0] = &unk_24C053830;
    v383[1] = ZinIrOptOptimizeQuantizedConcat;
    v384 = v383;
    v12 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v383, 1);
    v56 = v384;
    if (v384 == v383)
    {
      v57 = 4;
      v56 = v383;
    }
    else
    {
      if (!v384)
        goto LABEL_43;
      v57 = 5;
    }
    (*(void (**)(_QWORD *))(*v56 + 8 * v57))(v56);
LABEL_43:
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v58 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v58)
        ZinMirPrepareLayers(v58, v59, v60, v61, v62, v63, v64, v65);
      goto LABEL_28;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "before_hoisting");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v368, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v368, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v368);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v367[0] = v10;
    v367[1] = v9;
    v12 = ZinMirLayerHoisting::Execute((ZinMirLayerHoisting *)v367, v66, v67, v68, v69);
    if ((_DWORD)v12)
    {
      v70 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v70)
        ZinMirPrepareLayers(v70, v71, v72, v73, v74, v75, v76, v77);
      goto LABEL_28;
    }
    v12 = ZinIrOpt::CollapseQuantDequant(v10, v9);
    if ((_DWORD)v12)
    {
LABEL_28:
      v45 = v372;
      if (v372)
      {
        p_shared_owners = (unint64_t *)&v372->__shared_owners_;
        do
          v47 = __ldaxr(p_shared_owners);
        while (__stlxr(v47 - 1, p_shared_owners));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      return v12;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_hoisting");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v366, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v366, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v366);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v12 = ZinIrOpt::ScaledEWOrEWWithConstInToGOCFusion(v10, v9);
    if ((_DWORD)v12)
    {
      v79 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v79)
        ZinMirPrepareLayers(v79, v80, v81, v82, v83, v84, v85, v86);
      goto LABEL_28;
    }
    v12 = ZinIrOpt::CollapseTranspose(v10, (ZinIrControlFlowGraph *)v31, v78);
    if ((_DWORD)v12)
    {
      v87 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v87)
        ZinMirPrepareLayers(v87, v88, v89, v90, v91, v92, v93, v94);
      goto LABEL_28;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_1st_transpose_collapse");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v365, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v365, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v365);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    ZinMirPadOptimization::ZinMirPadOptimization((uint64_t)v364, (uint64_t)v10, v9);
    v12 = ZinMirPadOptimization::Execute((ZinMirPadOptimization *)v364);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("PaddingOptimizationFailure"));
      v95 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v95)
        ZinMirPrepareLayers(v95, v96, v97, v98, v99, v100, v101, v102);
      goto LABEL_66;
    }
    v12 = ZinIrOpt::InputViewOpt(v10, v9);
    if ((_DWORD)v12)
    {
LABEL_66:
      ZinMirPadOptimization::~ZinMirPadOptimization((ZinMirPadOptimization *)v364);
      goto LABEL_28;
    }
    v12 = MirOpt::MergeDeconvConv(v10, *(ZinIrControlFlowGraph **)v9, v103);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v105 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v105)
        ZinMirPrepareLayers(v105, v106, v107, v108, v109, v110, v111, v112);
      goto LABEL_66;
    }
    v12 = MirOpt::PreFusionCSE(v10, *(ZinIrControlFlowGraph **)v9, (const ZinIrHalParameters *)&v374, v104);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v113 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v113)
        ZinMirPrepareLayers(v113, v114, v115, v116, v117, v118, v119, v120);
      goto LABEL_66;
    }
    v12 = ZinIrOpt::ReverseCSE(v10, v9, &v374, 1);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v121 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v121)
        ZinMirPrepareLayers(v121, v122, v123, v124, v125, v126, v127, v128);
      goto LABEL_66;
    }
    kdebug_trace();
    kdebug_trace();
    std::string::basic_string[abi:ne180100]<0>(&__p, "before_fusion");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v363, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v363, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v363);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    if ((*(_BYTE *)(v31 + 99) & 8) != 0)
      ZinQuantizationLog::Start(v129);
    ZinMirLayerFusion::ZinMirLayerFusion(v362, v10, v9, 0);
    v12 = ZinMirLayerFusion::Run((ZinMirLayerFusion *)v362);
    ZinQuantizationLog::End((ZinQuantizationLog *)v12);
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_fusion");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v361, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v361, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v361);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v130 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v130)
        ZinMirPrepareLayers(v130, v131, v132, v133, v134, v135, v136, v137);
      goto LABEL_104;
    }
    v12 = ZinMirGOCEngineReassignment::Execute((uint64_t)&v360, v10, (uint64_t)v371);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v138 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v138)
        ZinMirPrepareLayers(v138, v139, v140, v141, v142, v143, v144, v145);
      goto LABEL_104;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_converting_post_pixel_shuffle_goc");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v359, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v359, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v359);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v12 = MirOpt::Remove8BitToF16Copy(v10, v9);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v147 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v147)
        ZinMirPrepareLayers(v147, v148, v149, v150, v151, v152, v153, v154);
      goto LABEL_104;
    }
    if (!*(_BYTE *)(v31 + 492))
      ZinMirOptFullyConnectedLayer(v10, v9);
    v358 = 0;
    v12 = MirOpt::CSE(v10, *(ZinIrControlFlowGraph **)v9, (const ZinIrHalParameters *)&v358, v146);
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_1st_cse");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v357, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v357, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v357);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v156 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v156)
        ZinMirPrepareLayers(v156, v157, v158, v159, v160, v161, v162, v163);
      goto LABEL_104;
    }
    if (MirOpt::InsertTransposePEReduction(v10, v155))
    {
      v164 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v164)
        ZinMirPrepareLayers(v164, v165, v166, v167, v168, v169, v170, v171);
      v12 = 3;
      goto LABEL_104;
    }
    v381[0] = &unk_24C053830;
    v381[1] = ZinMirPrepareFrontEndConcats;
    v382 = v381;
    v12 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v381, 1);
    v172 = v382;
    if (v382 == v381)
    {
      v173 = 4;
      v172 = v381;
    }
    else
    {
      if (!v382)
        goto LABEL_110;
      v173 = 5;
    }
    (*(void (**)(_QWORD *))(*v172 + 8 * v173))(v172);
LABEL_110:
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v174 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v174)
        ZinMirPrepareLayers(v174, v175, v176, v177, v178, v179, v180, v181);
      goto LABEL_104;
    }
    v12 = ZinMirOptReshapeTensorToEnableSSM(v10, (_QWORD *)v9);
    if ((_DWORD)v12)
    {
      v182 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v182)
        ZinMirPrepareLayers(v182, v183, v184, v185, v186, v187, v188, v189);
      goto LABEL_104;
    }
    v12 = MirOpt::CollapseSymmetricReshape(v10);
    if ((_DWORD)v12)
    {
      v190 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v190)
        ZinMirPrepareLayers(v190, v191, v192, v193, v194, v195, v196, v197);
      goto LABEL_104;
    }
    v12 = MirOpt::TransposeReshapeOptimization(v10, v9, 0);
    if ((_DWORD)v12)
    {
      v198 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v198)
        ZinMirPrepareLayers(v198, v199, v200, v201, v202, v203, v204, v205);
      goto LABEL_104;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_transpose_reshape_opt");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v356, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v356, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v356);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v12 = MirOpt::DilatedConvOpt(v10, v9);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v206 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v206)
        ZinMirPrepareLayers(v206, v207, v208, v209, v210, v211, v212, v213);
      goto LABEL_104;
    }
    v379[0] = &off_24BFFF3A8;
    v379[1] = v371;
    v380 = v379;
    v12 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v379, 1);
    v214 = v380;
    if (v380 == v379)
    {
      v215 = 4;
      v214 = v379;
    }
    else
    {
      if (!v380)
        goto LABEL_132;
      v215 = 5;
    }
    (*(void (**)(_QWORD *))(*v214 + 8 * v215))(v214);
LABEL_132:
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v216 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v216)
        ZinMirPrepareLayers(v216, v217, v218, v219, v220, v221, v222, v223);
      goto LABEL_104;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_engine_lowering");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v355, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v355, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v355);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v12 = ZinMirValidateWrapAxis(v10);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v224 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v224)
        ZinMirPrepareLayers(v224, v225, v226, v227, v228, v229, v230, v231);
      goto LABEL_104;
    }
    ZinMirLayerFusion::ZinMirLayerFusion(v354, v10, v9, 1);
    v12 = ZinMirLayerFusion::Run((ZinMirLayerFusion *)v354);
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_fusion2");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v353, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v353, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v353);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v233 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v233)
        ZinMirPrepareLayers(v233, v234, v235, v236, v237, v238, v239, v240);
      goto LABEL_149;
    }
    if (MirOpt::DeadCodeEliminator(v10, (ZinIrControlFlowGraph *)v31, v232))
    {
      v241 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v241)
        ZinMirPrepareLayers(v241, v242, v243, v244, v245, v246, v247, v248);
      v12 = 3;
      goto LABEL_149;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "before_post_fusion_hoist");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v352, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v352, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v352);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v12 = MirOpt::PostFusionTransposeHoisting(v10, v9, 0);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v249 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v249)
        ZinMirPrepareLayers(v249, v250, v251, v252, v253, v254, v255, v256);
      goto LABEL_149;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_post_fusion_hoist");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v351, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v351, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v351);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v12 = ZinIrOpt::CollapseTranspose(v10, (ZinIrControlFlowGraph *)v31, v257);
    if ((_DWORD)v12)
    {
      v258 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v258)
        ZinMirPrepareLayers(v258, v259, v260, v261, v262, v263, v264, v265);
      goto LABEL_149;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_2nd_transpose_collapse");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v350, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v350, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v350);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v377[0] = &off_24BFFF400;
    v377[1] = v371;
    v378 = v377;
    v12 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v377, 1);
    v267 = v378;
    if (v378 == v377)
    {
      v268 = 4;
      v267 = v377;
    }
    else
    {
      if (!v378)
        goto LABEL_167;
      v268 = 5;
    }
    (*(void (**)(_QWORD *))(*v267 + 8 * v268))(v267);
LABEL_167:
    if ((_DWORD)v12)
      goto LABEL_149;
    v374 = 0;
    v12 = MirOpt::CSE(v10, *(ZinIrControlFlowGraph **)v9, (const ZinIrHalParameters *)&v374, v266);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v269 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v269)
        ZinMirPrepareLayers(v269, v270, v271, v272, v273, v274, v275, v276);
      goto LABEL_149;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_2nd_cse");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v349, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v349, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v349);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    if (*(_BYTE *)(*(_QWORD *)v9 + 1113))
    {
      v12 = ZinMirPETransposeFusion::Execute((uint64_t)&__p, v10, (uint64_t)v371);
      if ((_DWORD)v12)
        goto LABEL_149;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "before_collapse_symmetric_transposes");
    ZinIrCompilerParameters::ZinIrCompilerParameters(v348, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)v348, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)v348);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v12 = MirOpt::CollapseSymmetricTranspose(v10, (ZinIrControlFlowGraph **)v9, 0);
    if ((_DWORD)v12)
    {
      ZinIrNetworkStatus::SetError(v7, CFSTR("MirPrepareLayersFailure"));
      v277 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v277)
        ZinMirPrepareLayers(v277, v278, v279, v280, v281, v282, v283, v284);
      goto LABEL_149;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_collapse_symmetric_transposes");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v347, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)&v347, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v347);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v12 = MirOpt::MergeNEArgMinMax(v10, v9);
    if ((_DWORD)v12)
    {
      v285 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v285)
        ZinMirPrepareLayers(v285, v286, v287, v288, v289, v290, v291, v292);
      goto LABEL_149;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_merge_nepool_argminmax");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v346, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)&v346, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v346);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    v12 = MirOpt::Optimize(v10, v9, (const ZinIrCompilerParameters *)v7);
    if ((_DWORD)v12)
    {
      v293 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v293)
        ZinMirPrepareLayers(v293, v294, v295, v296, v297, v298, v299, v300);
      goto LABEL_149;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_mir_opt");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v345, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)&v345, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v345);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "after_mir_opt_before_spatial_split");
    ZinIrCompilerParameters::ZinIrCompilerParameters(&v344, (const ZinIrCompilerParameters *)v31);
    ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)&__p, (ZinIrCompilerParameters *)&v344, v9 + 16, 256);
    ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v344);
    if (SHIBYTE(v341) < 0)
      operator delete(__p);
    if (*(_BYTE *)(v31 + 121))
    {
      ZinIrHalParameters::GetOperationCondition(*(ZinIrHalParameters **)v9, *(double *)(v31 + 104), 0xFFFFFFFF, 0xFFFFFFFF, (uint64_t)v342);
      *(_OWORD *)&v338.__r_.__value_.__r.__words[1] = 0uLL;
      v338.__r_.__value_.__r.__words[0] = (std::string::size_type)&v338.__r_.__value_.__l.__size_;
      ZinVisualization::ZinOpLayerGraphDumpInJson::ZinOpLayerGraphDumpInJson((uint64_t)&__p, (uint64_t)v10, v11, (uint64_t)v342, 0, (uint64_t)&v338);
      std::__tree<std::__value_type<long,ZinQuantizationPerfMetrics>,std::__map_value_compare<long,std::__value_type<long,ZinQuantizationPerfMetrics>,std::less<long>,true>,std::allocator<std::__value_type<long,ZinQuantizationPerfMetrics>>>::destroy((uint64_t)&v338, (char *)v338.__r_.__value_.__l.__size_);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".zinir_graph_after_MirOpt_before_Spatial_Split_", (const void **)(v31 + 24), (void **)&v336.__r_.__value_.__l.__data_);
      v301 = *(char *)(v9 + 39);
      if (v301 >= 0)
        v302 = (const std::string::value_type *)(v9 + 16);
      else
        v302 = *(const std::string::value_type **)(v9 + 16);
      if (v301 >= 0)
        v303 = *(unsigned __int8 *)(v9 + 39);
      else
        v303 = *(_QWORD *)(v9 + 24);
      v304 = std::string::append(&v336, v302, v303);
      v305 = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v304->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v305;
      v304->__r_.__value_.__l.__size_ = 0;
      v304->__r_.__value_.__r.__words[2] = 0;
      v304->__r_.__value_.__r.__words[0] = 0;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".json", &buf, &v338);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v336.__r_.__value_.__l.__data_);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&__p);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "Dumped fusion boundaries after MirOpt and before Spatial Split to JSON\n", (uint8_t *)&buf, 2u);
      }
      if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v338.__r_.__value_.__l.__data_);
      ZinVisualization::ZinOpLayerGraphDumpInJson::~ZinOpLayerGraphDumpInJson((ZinVisualization::ZinOpLayerGraphDumpInJson *)&__p);
    }
    if (ZinIrCompilerParameters::getSingleChannelEWOpCopyRemoval((ZinIrCompilerParameters *)v31))
    {
      ZinMirEwCopyOptimizer::ZinMirEwCopyOptimizer((ZinMirEwCopyOptimizer *)&__p, *(_QWORD *)(*(_QWORD *)v9 + 456), *(_QWORD *)(*(_QWORD *)v9 + 416));
      ZinMirEwCopyOptimizer::Execute((ZinMirEwCopyOptimizer *)&__p, v10);
      ZinMirEwCopyOptimizer::~ZinMirEwCopyOptimizer((ZinMirEwCopyOptimizer *)&__p);
    }
    kdebug_trace();
    kdebug_trace();
    if (!*(_BYTE *)(v31 + 492) && *(_BYTE *)(v31 + 158))
    {
      ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)v31, &__p);
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "test"))
      {
        v309 = 1;
      }
      else
      {
        ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)v31, v342);
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v342, "auto"))
        {
          v309 = 1;
        }
        else
        {
          ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)v31, &v338);
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v338.__r_.__value_.__l.__data_, "memory"))
          {
            v309 = 1;
          }
          else
          {
            ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)v31, &buf);
            v309 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&buf.__r_.__value_.__l.__data_, "manual");
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v338.__r_.__value_.__l.__data_);
        }
        if (v343 < 0)
          operator delete(v342[0]);
      }
      if (SHIBYTE(v341) < 0)
        operator delete(__p);
      if (v309)
      {
        v12 = ZinMirSplitSpatially(v10, v9);
        if ((_DWORD)v12)
        {
          v327 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v327)
            ZinMirPrepareLayers(v327, v328, v329, v330, v331, v332, v333, v334);
          goto LABEL_149;
        }
      }
    }
    v375[0] = &unk_24C053830;
    v375[1] = ZinMirPrepareFoldWeightsWithScale;
    v376 = v375;
    v306 = ZinIrControlFlowGraph::TraverseForward(v10, (uint64_t)v375, 1);
    v307 = v376;
    if (v376 == v375)
    {
      v308 = 4;
      v307 = v375;
    }
    else
    {
      if (!v376)
        goto LABEL_221;
      v308 = 5;
    }
    (*(void (**)(_QWORD *))(*v307 + 8 * v308))(v307);
LABEL_221:
    if (v306)
    {
      v310 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v310)
        ZinMirPrepareLayers(v310, v311, v312, v313, v314, v315, v316, v317);
    }
    if (!*(_BYTE *)(v31 + 492) && *(_BYTE *)(v31 + 371))
    {
      ZinIrCompilerParameters::getSpatialSplitMode((ZinIrCompilerParameters *)v31, &__p);
      v318 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "generic-dag");
      if (SHIBYTE(v341) < 0)
        operator delete(__p);
      if (!v318)
      {
        v341 = 0;
        v340 = 0;
        __p = &v340;
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".conv_opt_schedule.txt", (const void **)(v31 + 24), v342);
        ScheduleControlFlowGraph(v10, (_QWORD *)v9, (uint64_t **)&__p, (__int128 *)v342);
        if (v343 < 0)
          operator delete(v342[0]);
        v12 = MirOpt::OptimizeConvWithSmallCout(v10, v9);
        if ((_DWORD)v12)
        {
          v319 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (v319)
            ZinMirPrepareLayers(v319, v320, v321, v322, v323, v324, v325, v326);
          std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&__p, v340);
          goto LABEL_149;
        }
        std::string::basic_string[abi:ne180100]<0>(v342, "after_opt_ne_utilization");
        ZinIrCompilerParameters::ZinIrCompilerParameters(&v335, (const ZinIrCompilerParameters *)v31);
        ZinVisualization::CreateDotGraphAndLogConditionally((uint64_t)v10, (std::string::size_type)v342, (ZinIrCompilerParameters *)&v335, v9 + 16, 256);
        ZinIrCompilerParameters::~ZinIrCompilerParameters((ZinIrCompilerParameters *)&v335);
        if (v343 < 0)
          operator delete(v342[0]);
        std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&__p, v340);
      }
    }
    kdebug_trace();
    v12 = 0;
LABEL_149:
    ZinMirLayerFusion::~ZinMirLayerFusion((ZinMirLayerFusion *)v354);
LABEL_104:
    ZinMirLayerFusion::~ZinMirLayerFusion((ZinMirLayerFusion *)v362);
    goto LABEL_66;
  }
  return v12;
}

void sub_206FF1ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  if (SLOBYTE(STACK[0x36F]) < 0)
    operator delete((void *)STACK[0x358]);
  ZinMirLayerFusion::~ZinMirLayerFusion((ZinMirLayerFusion *)&STACK[0x2248]);
  ZinMirLayerFusion::~ZinMirLayerFusion((ZinMirLayerFusion *)&STACK[0x31F8]);
  ZinMirPadOptimization::~ZinMirPadOptimization((ZinMirPadOptimization *)&STACK[0x3598]);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

uint64_t ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24BFFF4B0;
  v6 = v5;
  v1 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v5, 1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_206FF2490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirBatchLegalizerForHWConstraints(ZinIrControlFlowGraph *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10[0] = &unk_24C053830;
  v10[1] = ZinMirPrepareForBatchesWithNoHWSupport;
  v11 = v10;
  v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v10, 0);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (!(_DWORD)v2)
  {
    v8[0] = &unk_24C053830;
    v8[1] = ZinMirBatchLegalizerForHWConstraintsTransform;
    v9 = v8;
    v2 = ZinIrControlFlowGraph::TraverseForward(a1, (uint64_t)v8, 0);
    v5 = v9;
    if (v9 == v8)
    {
      v6 = 4;
      v5 = v8;
      goto LABEL_11;
    }
    if (v9)
    {
      v6 = 5;
LABEL_11:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }
  return v2;
}

void sub_206FF25DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void SplitBatchChunksByMaxNumGroups(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1;
  LODWORD(v3) = vcvtps_u32_f32((float)a1 / (float)*(unint64_t *)(a2 + 384));
  std::vector<unsigned long>::reserve((void **)a3, v3);
  if ((_DWORD)v3)
  {
    v7 = 0;
    v8 = (_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a2 + 384);
    v10 = *(unint64_t **)(a3 + 8);
    do
    {
      if (v9 >= v6)
        v11 = v6;
      else
        v11 = v9;
      if ((unint64_t)v10 >= *v8)
      {
        v13 = *(unint64_t **)a3;
        v14 = ((uint64_t)v10 - *(_QWORD *)a3) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v16 = *v8 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a3 + 16, v17);
          v13 = *(unint64_t **)a3;
          v10 = *(unint64_t **)(a3 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v11;
        v12 = (unint64_t *)(v19 + 8);
        while (v10 != v13)
        {
          v20 = *--v10;
          *((_QWORD *)v19 - 1) = v20;
          v19 -= 8;
        }
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 16) = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v10 = v11;
        v12 = v10 + 1;
      }
      *(_QWORD *)(a3 + 8) = v12;
      v9 = *(_QWORD *)(a2 + 384);
      v6 -= v9;
      ++v7;
      v10 = v12;
    }
    while (v7 != (_DWORD)v3);
  }
}

double ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, BOOL *a4@<X8>)
{
  uint64_t v5;
  const std::string **v6;
  const std::string **v7;
  NSObject *v10;
  const std::string *v11;
  int v12;
  char *v13;
  std::string::pointer data;
  BOOL v15;
  int v16;
  std::string *v17;
  double result;
  uint8_t v19;
  char v20[15];
  std::string v21;
  BOOL v22;

  v22 = 0;
  memset(&v21, 0, sizeof(v21));
  v5 = *(_QWORD *)(a2 + 96);
  v6 = *(const std::string ***)(v5 + 112);
  v7 = *(const std::string ***)(v5 + 120);
  if (v6 == v7)
  {
    *a4 = 0;
    v17 = (std::string *)(a4 + 8);
LABEL_22:
    result = *(double *)&v21.__r_.__value_.__l.__data_;
    *v17 = v21;
    return result;
  }
  v10 = MEMORY[0x24BDACB70];
  do
  {
    while (1)
    {
      v11 = *v6;
      if (*(_DWORD *)((*v6)[2].__r_.__value_.__r.__words[2] + 8) != 7)
        goto LABEL_10;
      std::string::operator=(&v21, v11 + 1);
      v12 = *(_DWORD *)(v11[2].__r_.__value_.__r.__words[2] + 12);
      if ((v12 & 0xFFFFFFFE) == 2)
        break;
      if ((v12 & 0xFFFFFFFB) == 1)
        goto LABEL_10;
LABEL_13:
      if (ZinMirBatchLegalizer(a1, a3, &v22) && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()(&v19, v20);
      v15 = v22;
      if (!v22 && ++v6 != v7)
        continue;
      goto LABEL_18;
    }
    v13 = (char *)v11[4].__r_.__value_.__r.__words[2];
    data = v11[5].__r_.__value_.__l.__data_;
    if (v13 != data)
    {
      while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 64) + 8) != 7)
      {
        v13 += 8;
        if (v13 == data)
          goto LABEL_10;
      }
    }
    if (v13 != data)
      goto LABEL_13;
LABEL_10:
    ++v6;
  }
  while (v6 != v7);
  v15 = 0;
LABEL_18:
  v16 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
  *a4 = v15;
  v17 = (std::string *)(a4 + 8);
  if ((v16 & 0x80000000) == 0)
    goto LABEL_22;
  std::string::__init_copy_ctor_external(v17, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return result;
}

void sub_206FF28FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirPrepareFoldWeightsWithScale(ZinIrOpLayerGraph *a1, ZinIrOpLayer *a2)
{
  uint64_t v3;
  uint64_t v4;
  ZinIrKernel *v5;
  ZinIrKernel **v6;
  ZinIrKernel *v7;
  ZinIrKernel **v8;
  ZinIrKernel *v9;
  ZinIrKernel *v10;
  ZinIrKernel *v11;
  unsigned int v13;
  ZinIrKernel *v14;
  ZinIrKernel *v15;

  if (!*(_DWORD *)(*((_QWORD *)a2 + 2) + 300))
    return 0;
  if (*(_DWORD *)(*((_QWORD *)a2 + 8) + 8) != 85)
    return 0;
  v3 = *((_QWORD *)a2 + 54);
  if (!v3)
    return 0;
  v4 = *((_QWORD *)a2 + 48);
  if (!v4)
    return v4;
  v5 = *(ZinIrKernel **)(v3 + 136);
  if (!*((_QWORD *)v5 + 73)
    || (ZinIrKernel::IsMutable(v5) & 1) != 0
    || (ZinIrKernel::IsMutable(*(ZinIrKernel **)(v4 + 136)) & 1) != 0
    || !*(_BYTE *)(*(_QWORD *)(v4 + 136) + 185)
    || ZinIrKernel::GetWeightFormat(*(ZinIrKernel **)(v3 + 136)) != 6
    || ZinIrKernel::GetScaleFormat(*(ZinIrKernel **)(v4 + 136)) != 6)
  {
    return 0;
  }
  ZinIrKernel::FoldWeightsWithScale(*(_QWORD **)(*((_QWORD *)a2 + 54) + 136), *(ZinIrKernel **)(*((_QWORD *)a2 + 48) + 136), (uint64_t)&v13);
  v4 = v13;
  if (!v13)
  {
    v6 = (ZinIrKernel **)(*((_QWORD *)a2 + 54) + 136);
    v7 = v14;
    v14 = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v6, v7);
    v8 = (ZinIrKernel **)(*((_QWORD *)a2 + 48) + 136);
    v9 = v15;
    v15 = 0;
    std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](v8, v9);
  }
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    ZinIrKernel::~ZinIrKernel(v10);
    MEMORY[0x20BD002F8]();
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    ZinIrKernel::~ZinIrKernel(v11);
    MEMORY[0x20BD002F8]();
  }
  return v4;
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24BFFF350;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24BFFF350;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a3 + 160))(*a3, *a2, *(_QWORD *)(a1 + 8));
  if ((_DWORD)v3 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
  return v3;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24BFFF3A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24BFFF3A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a3 + 168))(*a3, *a2, *(_QWORD *)(a1 + 8));
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_1>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24BFFF400;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24BFFF400;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(_DWORD *)(*(_QWORD *)(*a3 + 64) + 8);
  v4 = v3 > 0x25;
  v5 = (1 << v3) & 0x2800000280;
  if (v4 || v5 == 0)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a3 + 168))(*a3, *a2, *(_QWORD *)(a1 + 8));
  if ((_DWORD)v7 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()();
  return v7;
}

uint64_t std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24BFFF4B0;
  return result;
}

void std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24BFFF4B0;
}

uint64_t std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  ZinIrTensor *v3;
  uint64_t v4;

  if ((*(_DWORD *)(*(_QWORD *)(*a3 + 64) + 8) & 0xFFFFFFFC) != 0x1C)
    return 0;
  v3 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a3 + 32))(*a3, 0, 0);
  v4 = *((_QWORD *)ZinIrTensor::GetRootTensor(v3) + 13);
  if (v4 && *(_DWORD *)(v4 + 96) == 2)
    return 0;
  else
    return 3;
}

uint64_t std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0,std::allocator<ZinMirValidateInOutLayerHints(ZinIrControlFlowGraph *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

void ZinMirBatchLegalizerForHWConstraintsTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Split oplayer per batch went wrong", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Can't satisfy the Cebu TRM (4.1.8) hw constaint\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Batch splitting can't split the layer\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Batch splitting to sub-batches is not correct\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirPrepareForBatchesWithNoHWSupport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ConCat Opcode is not supported\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirPrepareForBatchesTransform()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Concat broadcast failed on layer \"%s\".\n", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinMirBatchLegalizer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Graph manipulation error during ZinMirBatchLegalizer of layer \"%s\".", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinMirPrepareIr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Builder: Chaining canonicalization failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Builder: Tensor Caching failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Kernel Size Splitting failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: SplitConvAndHoistActivation!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not split channel.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not split batch.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: LiveIn and LiveOut are not allocated to DRAM", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[MirOpt] Error: Fold height to batch Matrix multiplication.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirPrepareLayers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MirOpt OptimizeConvWithSmallCout failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: ZinMirPrepareFoldWeightsWithScale", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Spatial Splitting failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Mir Opt failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Mir Opt MergeNEArgMinMax failed\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Collapse Symmetric Transpose failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MirOpt: CSE failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Transpose collapse failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Post-Fusion transpose hoisting failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not finish DCE before transpose collapse.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Layer fusion failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not validate wrap axis.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not finish engine lowering.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: DilatedConv->Conv failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Transpose reshape optimization failed!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Failed to collapse symmetric reshape!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Failed to reshape the NEConv's tensor for enabling SSM!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Failed to add copy layers for inputs to concats!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not finish transpose insertion for PE reduce.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Could not apply CSE.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: remove default GOC failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Error: Failed converting post-PixelShuffle GOC.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Pre-fusion Reverse CSE failed!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MirOpt: PreFusionCSE failed", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Merging Deconv-Conv failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Pad layer optimization failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: ScaledEW to GOC after Layer Hoisting failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Layer Hoisting failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: OptimizeQuantizedConcat failed!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Pre-hoisting Reverse CSE failed!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Removal of Single Channel Elementwise Copy failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Composite Creation failed!\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "MIR Prepare Layers: Pre-lowering Reverse CSE failed!", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinMirCheckBatchSplitForLayersConnectedToConcat(ZinIrOpLayerGraph *,ZinIrOpLayer *)::$_0::operator()(uint8_t *buf, _BYTE *a2)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Split oplayer per batch went wrong", buf, 2u);
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Lowering of layer %s failed.", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void std::__function::__func<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2,std::allocator<ZinMirPrepareLayers(ZinIrControlFlowGraph *,ZinIrParameters const&,ZinIrNetworkStatus *)::$_2>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_5(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_1_0(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Error: Lowering of transpose/reshape/concat/copy layer %s failed.", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinMirAneKernel::ZinMirAneKernel(ZinMirAneKernel *this, int a2, int a3, int a4, int a5, int a6, int a7, char a8)
{
  uint64_t *v15;
  ZinMirAneKernelCoeff *v16;
  uint64_t v17;

  *(_WORD *)this = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  v15 = (uint64_t *)((char *)this + 40);
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  v16 = (ZinMirAneKernelCoeff *)operator new();
  ZinMirAneKernelCoeff::ZinMirAneKernelCoeff(v16, a2, a3, a4, a5, a6, a7, a8);
  v17 = 0;
  std::unique_ptr<ZinMirAneKernelCoeff>::reset[abi:ne180100](v15, (uint64_t)v16);
  std::unique_ptr<ZinMirAneKernelCoeff>::reset[abi:ne180100](&v17, 0);
}

void sub_206FF3AA8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x20BD002F8](v2, 0x1020C4012B38EE3);
  std::unique_ptr<ZinMirAneKernelCoeff>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t ZinMirAneKernel::ZinMirAneKernel(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *a3;
  *a3 = 0;
  std::unique_ptr<ZinMirAneKernelCoeff>::reset[abi:ne180100]((uint64_t *)(a1 + 40), v6);
  return a1;
}

BOOL ZinMirAneKernel::HasAlignedKDMAData(ZinMirAneKernel *this)
{
  return *((_QWORD *)this + 1) || *((_QWORD *)this + 2) || *((_QWORD *)this + 3) || *((_QWORD *)this + 4) != 0;
}

void ZinMirAneKernelCoeff::ZinMirBuildNEKernelData(ZinMirAneKernelCoeff *this, int a2, int a3, int a4, int a5, int a6, char a7)
{
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  void **v21;
  char *v22;
  char *v23;
  void **v24;
  _QWORD *v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  void **v51;
  __int128 v52;
  void *v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t i;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  int v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90[2];
  unint64_t v91;
  char v92[16];
  _QWORD *v93[4];

  v13 = *((_DWORD *)this + 1);
  *((_BYTE *)this + 1) = a7;
  v77 = a3;
  ZinMirNECoreAssignment::ZinMirNECoreAssignment((ZinMirNECoreAssignment *)v92, a3, a2);
  std::map<unsigned long,std::vector<unsigned long>>::map[abi:ne180100](v90, (uint64_t)v93);
  *(_QWORD *)&v87 = 0;
  v14 = std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v90, (unint64_t *)&v87);
  v15 = ((a2 + a3 - 1) / a3);
  v79 = (_QWORD *)v14[1];
  if ((_QWORD *)*v14 != v79)
  {
    v80 = 0;
    v82 = 0;
    v16 = v13 * v15;
    v78 = (a4 - v16 * a6) & ~((a4 - v16 * a6) >> 31);
    v17 = (_QWORD *)*v14;
    v81 = ((a2 + a3 - 1) / a3);
    do
    {
      v83 = v17;
      v84 = *((_QWORD *)this + 4);
      v85 = *v17;
      v86 = a5;
      v18 = a5;
      if (a6 >= 1)
      {
        v19 = 0;
        v20 = v84 + 56 * v85;
        v23 = *(char **)(v20 + 24);
        v21 = (void **)(v20 + 24);
        v22 = v23;
        v24 = v21 - 1;
        v25 = v21 + 1;
        v18 = v86;
        do
        {
          v26 = *((_DWORD *)this + 1);
          *(_QWORD *)&v27 = -1;
          *((_QWORD *)&v27 + 1) = -1;
          v87 = v27;
          v88 = v27;
          v89 = -1;
          if ((unint64_t)v22 >= *v25)
          {
            v30 = 0x6DB6DB6DB6DB6DB7 * ((v22 - (_BYTE *)*v24) >> 3);
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) > 0x492492492492492)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v25 - (_QWORD)*v24) >> 3) > v31)
              v31 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v25 - (_QWORD)*v24) >> 3);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v25 - (_QWORD)*v24) >> 3)) >= 0x249249249249249)
              v32 = 0x492492492492492;
            else
              v32 = v31;
            if (v32)
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)(v21 + 1), v32);
            else
              v33 = 0;
            v34 = &v33[56 * v30];
            *(_DWORD *)v34 = v18;
            *((_DWORD *)v34 + 1) = v26;
            *(_QWORD *)&v35 = -1;
            *((_QWORD *)&v35 + 1) = -1;
            *(_OWORD *)(v34 + 8) = v35;
            *(_OWORD *)(v34 + 24) = v35;
            *((_QWORD *)v34 + 5) = -1;
            *((_QWORD *)v34 + 6) = 0;
            v36 = (char *)*v21;
            v37 = (char *)*v24;
            v38 = v34;
            if (*v21 != *v24)
            {
              do
              {
                v39 = *(_OWORD *)(v36 - 56);
                v40 = *(_OWORD *)(v36 - 40);
                v41 = *(_OWORD *)(v36 - 24);
                *((_QWORD *)v38 - 1) = *((_QWORD *)v36 - 1);
                *(_OWORD *)(v38 - 24) = v41;
                *(_OWORD *)(v38 - 40) = v40;
                *(_OWORD *)(v38 - 56) = v39;
                v38 -= 56;
                v36 -= 56;
              }
              while (v36 != v37);
              v36 = (char *)*v24;
            }
            *v24 = v38;
            v22 = v34 + 56;
            *v21 = v34 + 56;
            *v25 = &v33[56 * v32];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *(_DWORD *)v22 = v18;
            *((_DWORD *)v22 + 1) = v26;
            v28 = v87;
            v29 = v89;
            *(_OWORD *)(v22 + 24) = v88;
            *(_OWORD *)(v22 + 8) = v28;
            *((_QWORD *)v22 + 5) = v29;
            *((_QWORD *)v22 + 6) = 0;
            v22 += 56;
          }
          *v21 = v22;
          v18 += v16;
          ++v19;
        }
        while (v19 != a6);
      }
      if (*((_BYTE *)this + 1))
      {
        v42 = *((_DWORD *)this + 1);
        if (v78 <= v82)
          goto LABEL_36;
        if (v78 - v82 >= v42)
          v43 = *((_DWORD *)this + 1);
        else
          v43 = v78 - v82;
        v44 = v43 + v82;
      }
      else
      {
        if (v85 / v77 >= (v78 % (int)v81))
          v43 = v78 / (int)v81;
        else
          v43 = v78 / (int)v81 + 1;
        v44 = v82;
      }
      v82 = v44;
      if (v43)
      {
        v45 = v18 - v80;
        v46 = v84 + 56 * v85;
        v49 = *(_QWORD *)(v46 + 32);
        v48 = (_QWORD *)(v46 + 32);
        v47 = v49;
        v51 = (void **)(v48 - 1);
        v50 = *(v48 - 1);
        if (v50 >= v49)
        {
          v54 = (void **)(v48 - 2);
          v55 = *(v48 - 2);
          v56 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v50 - v55) >> 3);
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) > 0x492492492492492)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v58 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v47 - v55) >> 3);
          if (2 * v58 > v57)
            v57 = 2 * v58;
          if (v58 >= 0x249249249249249)
            v59 = 0x492492492492492;
          else
            v59 = v57;
          v15 = v81;
          if (v59)
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>((uint64_t)v48, v59);
          else
            v60 = 0;
          v61 = &v60[56 * v56];
          *(_DWORD *)v61 = v45;
          *((_DWORD *)v61 + 1) = v43;
          *(_QWORD *)&v62 = -1;
          *((_QWORD *)&v62 + 1) = -1;
          *(_OWORD *)(v61 + 8) = v62;
          *(_OWORD *)(v61 + 24) = v62;
          *((_QWORD *)v61 + 5) = -1;
          *((_QWORD *)v61 + 6) = 0;
          v63 = (char *)*v51;
          v64 = (char *)*v54;
          v65 = v61;
          if (*v51 != *v54)
          {
            do
            {
              v66 = *(_OWORD *)(v63 - 56);
              v67 = *(_OWORD *)(v63 - 40);
              v68 = *(_OWORD *)(v63 - 24);
              *((_QWORD *)v65 - 1) = *((_QWORD *)v63 - 1);
              *(_OWORD *)(v65 - 24) = v68;
              *(_OWORD *)(v65 - 40) = v67;
              *(_OWORD *)(v65 - 56) = v66;
              v65 -= 56;
              v63 -= 56;
            }
            while (v63 != v64);
            v63 = (char *)*v54;
          }
          *v54 = v65;
          v53 = v61 + 56;
          *v51 = v61 + 56;
          *v48 = &v60[56 * v59];
          if (v63)
            operator delete(v63);
        }
        else
        {
          *(_DWORD *)v50 = v45;
          *(_DWORD *)(v50 + 4) = v43;
          *(_QWORD *)&v52 = -1;
          *((_QWORD *)&v52 + 1) = -1;
          *(_OWORD *)(v50 + 8) = v52;
          *(_OWORD *)(v50 + 24) = v52;
          v53 = (void *)(v50 + 56);
          *(_QWORD *)(v50 + 40) = -1;
          *(_QWORD *)(v50 + 48) = 0;
          v15 = v81;
        }
        *v51 = v53;
        v42 = *((_DWORD *)this + 1);
        v80 = v80 - v43 + v42;
        goto LABEL_52;
      }
      v42 = *((_DWORD *)this + 1);
LABEL_36:
      v15 = v81;
LABEL_52:
      a5 = v42 + v86;
      v17 = v83 + 1;
    }
    while (v83 + 1 != v79);
  }
  v69 = v91;
  if (v91)
  {
    v70 = 0;
    do
    {
      if ((int)v15 >= 1)
      {
        for (i = 0; i != v15; ++i)
        {
          *(_QWORD *)&v87 = 0;
          v72 = std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v90, (unint64_t *)&v87);
          if (i >= (uint64_t)(v72[1] - *v72) >> 3)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v73 = *(_QWORD *)(*v72 + 8 * i);
          *(_QWORD *)&v87 = v70;
          v74 = std::map<ZinIrTensor const*,SpatialAmount>::at((uint64_t)v90, (unint64_t *)&v87);
          if (i >= (uint64_t)(v74[1] - *v74) >> 3)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v75 = *(_QWORD *)(*v74 + 8 * i);
          v76 = *((_QWORD *)this + 4);
          *(_OWORD *)(v76 + 56 * v75) = *(_OWORD *)(v76 + 56 * v73);
          if (v75 != v73)
            std::vector<ZinOcgKernelData>::__assign_with_size[abi:ne180100]<ZinOcgKernelData*,ZinOcgKernelData*>((char *)(v76 + 56 * v75 + 16), *(char **)(v76 + 56 * v73 + 16), *(_QWORD *)(v76 + 56 * v73 + 24), 0x6DB6DB6DB6DB6DB7* ((uint64_t)(*(_QWORD *)(v76 + 56 * v73 + 24) - *(_QWORD *)(v76 + 56 * v73 + 16)) >> 3));
          *(_OWORD *)(v76 + 56 * v75 + 40) = *(_OWORD *)(v76 + 56 * v73 + 40);
        }
        v69 = v91;
      }
      ++v70;
    }
    while (v69 > v70);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v90, (_QWORD *)v90[1]);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v93, v93[1]);
}

void sub_206FF4150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27)
{
  uint64_t v27;

  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a26, a27);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(a10, *(_QWORD **)(v27 - 104));
  _Unwind_Resume(a1);
}

void ZinMirAneKernelCoeff::ZinMirAneKernelCoeff(ZinMirAneKernelCoeff *this, int a2, int a3, int a4, int a5, int a6, int a7, char a8)
{
  char *v13;
  unint64_t v14;
  int v15;
  uint64_t v18;
  uint64_t v19;
  int i;
  int v21;

  *(_WORD *)this = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  v13 = (char *)this + 32;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 1) = a6;
  *((_QWORD *)this + 3) = a5;
  if (a7)
  {
    std::vector<ZinNeKernelData>::resize((uint64_t *)this + 4, 1uLL);
    v14 = ZinDivRoundUp(a2, a6);
    std::vector<ZinOcgKernelData>::reserve((void **)(*(_QWORD *)v13 + 16), v14);
    if (a3 >= 1)
    {
      v15 = 0;
      do
      {
        ZinMirAneKernelCoeff::ZinMirBuildNEKernelDataSharedKmem(this, a2, v15, a6);
        v15 += a2;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    std::vector<ZinNeKernelData>::resize((uint64_t *)this + 4, a4);
    v19 = *((_QWORD *)this + 4);
    v18 = *((_QWORD *)this + 5);
    for (i = a2 / ((a4 + a5 - 1) / a5 * a6); v19 != v18; v19 += 56)
      std::vector<ZinOcgKernelData>::reserve((void **)(v19 + 16), a3 + a3 * i);
    if (a3 >= 1)
    {
      v21 = 0;
      do
      {
        ZinMirAneKernelCoeff::ZinMirBuildNEKernelData(this, a4, a5, a2, v21, i, a8);
        v21 += a2;
        --a3;
      }
      while (a3);
    }
  }
}

void sub_206FF4310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  a10 = a9;
  std::vector<ZinNeKernelData>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<ZinNeKernelData>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<ZinNeKernelData>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      v8 = *(void **)(v3 - 40);
      if (v8)
      {
        *(_QWORD *)(v3 - 32) = v8;
        operator delete(v8);
      }
      v3 -= 56;
    }
    a1[1] = v7;
  }
}

__n128 ZinMirAneKernelCoeff::ZinMirAneKernelCoeff(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 *a7)
{
  __n128 result;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = 0;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  result = *a7;
  *(__n128 *)(a1 + 32) = *a7;
  *(_QWORD *)(a1 + 48) = a7[1].n128_u64[0];
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a7[1].n128_u64[0] = 0;
  return result;
}

char *std::vector<ZinOcgKernelData>::__assign_with_size[abi:ne180100]<ZinOcgKernelData*,ZinOcgKernelData*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x492492492492492)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v11;
    result = std::vector<ZinNeKernelData>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t std::vector<ZinNeKernelData>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 56 * a2;
      v14 = 56 * a2;
      do
      {
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)v7 = -1;
        *(_QWORD *)(v7 + 8) = -1;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        v7 += 56;
        v14 -= 56;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v18[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinNeKernelData>>(result, v11);
    else
      v12 = 0;
    v15 = &v12[56 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[56 * v11];
    v16 = 56 * a2;
    v17 = &v15[56 * a2];
    do
    {
      *((_QWORD *)v15 + 6) = 0;
      *(_QWORD *)v15 = -1;
      *((_QWORD *)v15 + 1) = -1;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      v15 += 56;
      v16 -= 56;
    }
    while (v16);
    v18[2] = v17;
    std::vector<ZinNeKernelData>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_206FF46D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinNeKernelData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFDictionary *ZinCreateQuantUnit(const ZinIrQuantUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  CFNumberRef v6;
  int v7;
  CFNumberRef v9;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = Mutable;
  if (*((int *)a1 + 22) < 1)
  {
    v6 = CFNumberCreate(v3, kCFNumberFloat32Type, (char *)a1 + 128);
    CFDictionaryAddValue(v5, CFSTR("QuantScale"), v6);
    CFRelease(v6);
  }
  else
  {
    ZinAddWeightInfoToParamsDict(Mutable, 0, CFSTR("ScaleCount"), CFSTR("ScaleIndex"), CFSTR("ScaleOffset"), (_BYTE *)a1 + 80);
  }
  v7 = *((_DWORD *)a1 + 28);
  if (v7 > 0 || *((_DWORD *)a1 + 33) != 0)
  {
    if (v7 < 1)
    {
      v9 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 132);
      CFDictionaryAddValue(v5, CFSTR("QuantZeroPoint"), v9);
      CFRelease(v9);
    }
    else
    {
      ZinAddWeightInfoToParamsDict(v5, 0, CFSTR("ZeroPointCount"), CFSTR("ZeroPointIndex"), CFSTR("ZeroPointOffset"), (_BYTE *)a1 + 104);
    }
  }
  ZinSetFormat(CFSTR("QuantScaleType"), (_DWORD *)a1 + 34, v5);
  CFDictionaryAddValue(Unit, CFSTR("Params"), v5);
  CFRelease(v5);
  return Unit;
}

_QWORD *ZinIrGatherUnit::ZinIrGatherUnit(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = ZinIrUnit::ZinIrUnit(a1, a3);
  *v5 = &off_24C01A790;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v5 + 7), (const ZinIrTextureUnitInfo *)a2);
  a1[27] = 0;
  a1[7] = &off_24C01ED60;
  a1[28] = 0;
  a1[29] = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(a1 + 27, *(const void **)(a2 + 160), *(_QWORD *)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 2);
  return a1;
}

void sub_206FF48D4(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;
  ZinIrTextureUnitInfo *v2;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrGatherUnit::GetOutputDimensions(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;

  v9 = *(_DWORD **)a4;
  v8 = *(_DWORD **)(a4 + 8);
  v10 = *(_QWORD *)(a1 + 2 * ((_QWORD)v8 - *(_QWORD *)a4) + 1640);
  v11 = 0;
  if (v8 != *(_DWORD **)a4)
  {
    do
    {
      switch(*v9)
      {
        case 0:
          v11 |= 1uLL;
          *a5 = *a3;
          break;
        case 1:
          v11 |= 2uLL;
          a5[4] = a3[4];
          break;
        case 2:
          v11 |= 4uLL;
          a5[1] = a3[1] / v10;
          break;
        case 3:
          v11 |= 8uLL;
          a5[2] = a3[2];
          break;
        case 4:
          v11 |= 0x10uLL;
          a5[3] = a3[3];
          break;
        default:
          break;
      }
      ++v9;
    }
    while (v9 != v8);
  }
  v12 = 0;
  v19 = a3 + 3;
  v20 = a2 + 3;
  v18 = a5 + 3;
  v24 = a3 + 2;
  v25 = a2 + 2;
  v22 = a2 + 1;
  v23 = a5 + 2;
  v21 = a5 + 1;
  do
  {
    if (((v11 >> v12) & 1) == 0)
    {
      switch(v12)
      {
        case 0:
          LODWORD(v27) = 0;
          v13 = (int *)&v27;
          v14 = a2;
          v15 = a3;
          v16 = a5;
          goto LABEL_16;
        case 1:
          LODWORD(v27) = 1;
          v13 = (int *)&v27;
          v14 = a2 + 4;
          v15 = a3 + 4;
          v16 = a5 + 4;
          goto LABEL_16;
        case 2:
          v27 = a3[1] / v10;
          v26 = 2;
          v15 = (uint64_t *)&v27;
          v13 = &v26;
          v16 = v21;
          v14 = v22;
          goto LABEL_16;
        case 3:
          LODWORD(v27) = 3;
          v13 = (int *)&v27;
          v15 = v24;
          v14 = v25;
          v16 = v23;
LABEL_16:
          ComputeOutDim(v14, v15, v16, v13);
          break;
        case 4:
          LODWORD(v27) = 4;
          ComputeOutDim(v20, v19, v18, &v27);
          return 1;
        default:
          break;
      }
    }
    ++v12;
  }
  while (v12 != 5);
  return 1;
}

uint64_t *ComputeOutDim(uint64_t *result, uint64_t *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v8;
  const char *v9;
  _QWORD v10[2];
  char v11;

  v4 = *result;
  v5 = *a2;
  if (*result > *a2 && v5 != 1)
  {
    ZinGetZinIrDimensionString(a4, v10);
    if (v11 >= 0)
      v8 = (const char *)v10;
    else
      v8 = (const char *)v10[0];
    ZinAssertImpl("Index tensor dimension %s should be equal to 1", v8);
  }
  if (v4 != 1 && v4 < v5)
  {
    ZinGetZinIrDimensionString(a4, v10);
    if (v11 >= 0)
      v9 = (const char *)v10;
    else
      v9 = (const char *)v10[0];
    ZinAssertImpl("Data tensor dimension %s should be equal to 1", v9);
  }
  if (v4 <= v5)
    v4 = *a2;
  *a3 = v4;
  return result;
}

void sub_206FF4B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrGatherUnit::TensorDimensions(ZinIrGatherUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  ZinIrGatherUnit::GetOutputDimensions((uint64_t)a2, (uint64_t *)(*((_QWORD *)this + 1) + 8), (uint64_t *)(*((_QWORD *)this + 1) + 128), (uint64_t)this + 216, (uint64_t *)a3);
  return 0;
}

ZinIrGatherInfo *ZinIrGatherUnit::CreateOpcode@<X0>(ZinIrGatherUnit *this@<X0>, uint64_t a2@<X8>)
{
  const ZinIrGatherUnitInfo *v3;
  uint64_t v4;
  const ZinTensorDimensions *v5;
  const ZinTensorDimensions *v6;
  ZinIrGatherInfo *v7;
  ZinIrGatherInfo *result;

  v3 = (ZinIrGatherUnit *)((char *)this + 56);
  v4 = *((_QWORD *)this + 1);
  v5 = (const ZinTensorDimensions *)(v4 + 8);
  v6 = (const ZinTensorDimensions *)(v4 + 128);
  v7 = (ZinIrGatherInfo *)operator new();
  result = ZinIrGatherInfo::ZinIrGatherInfo(v7, v3, v5, v6);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v7;
  return result;
}

void sub_206FF4C60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x10B3C40B25E14ADLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrGatherUnit::CreateLayer(ZinIrGatherUnit *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int v18;
  uint64_t v19;

  ZinIrGatherUnit::CreateOpcode(a1, (uint64_t)&v18);
  if (v18)
  {
    v6 = 0;
  }
  else
  {
    *(_QWORD *)(v19 + 200) = *(_QWORD *)(a2 + 2 * (*((_QWORD *)a1 + 28) - *((_QWORD *)a1 + 27)) + 1640);
    v7 = operator new();
    v6 = v7;
    v8 = (std::__shared_weak_count *)(*a3)[1];
    v16 = **a3;
    v17 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    ZinGatherLayer::ZinGatherLayer(v7, &v19, &v16, (char *)a1 + 64);
    v11 = v17;
    if (v17)
    {
      v12 = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v6);
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return v6;
}

void sub_206FF4DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

uint64_t ZinIrElementWiseInfo::ZinIrElementWiseInfo(uint64_t a1, int a2)
{
  uint64_t result;

  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(a1, 5);
  *(_QWORD *)result = &unk_24C01FA78;
  *(_DWORD *)(result + 12) = a2;
  return result;
}

uint64_t ZinIrElementWiseInfo::Clone@<X0>(ZinIrElementWiseInfo *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  LODWORD(this) = *((_DWORD *)this + 3);
  result = ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v4, 5);
  *(_QWORD *)v4 = &unk_24C01FA78;
  *(_DWORD *)(v4 + 12) = (_DWORD)this;
  *a2 = v4;
  return result;
}

void sub_206FF4EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::ValidateSemantics_Impl(ZinIrOpLayer *a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v6;

  ZinIrOpLayer::ValidateSemantics_Impl(a1, a2, a3);
  result = IsEWTypeUnary(*(_DWORD *)(*((_QWORD *)a1 + 8) + 12));
  v6 = a2[1] - *a2;
  if ((_DWORD)result)
  {
    if (v6 != 120)
      ZinAssertImpl("Unary Elementwise must have 1 input.");
  }
  else
  {
    if (0xEEEEEEEEEEEEEEEFLL * (v6 >> 3) <= 1)
      ZinAssertImpl("Binary Elementwise must have at least 2 inputs.");
    return ZinElementWiseLayerUtils::CheckAllDimensionsBroadcastable((uint64_t **)a2);
  }
  return result;
}

_QWORD *ZinElementWiseLayer::ZinElementWiseLayer(_QWORD *a1, uint64_t *a2, uint64_t *a3, __int128 *a4, ZinIrKernel **a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v6 = *a2;
  *a2 = 0;
  v7 = a3[1];
  v15 = *a3;
  v16 = (std::__shared_weak_count *)v7;
  v17 = v6;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  ZinIrOpLayer::ZinIrOpLayer((uint64_t)a1, &v17, &v15, a4, a5);
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *a1 = &off_24C01E978;
  return a1;
}

void sub_206FF5028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::LowerEwAbsH11H12(ZinElementWiseLayer *this, uint64_t **a2)
{
  char *v4;
  __n128 v5;
  uint64_t v6;
  ZinIrTensor *v7;
  uint64_t v8;
  ZinIrOpLayer *ConstScaleAndBiasGOC;
  BOOL v10;
  size_t v11;
  void **v12;
  const void *v13;
  __n128 v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  ZinIrOpLayer *ElementWiseLayer;
  BOOL v27;
  char v28;
  uint64_t v29;
  _OWORD v31[2];
  int v32;
  void **v33;
  void *v34;
  char v35;
  _QWORD v36[3];
  char v37;
  ZinElementWiseLayer *v38;
  void *__p[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[6];
  _OWORD v47[2];
  ZinElementWiseLayer **v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 12) - *((_QWORD *)this + 11) != 8)
    ZinAssertImpl("Elementwise Abs must have 1 input", a2);
  v4 = (char *)this + 24;
  v5 = ZinObjectNameFactory::ZinObjectNameFactory(v36, (char *)this + 24);
  v6 = *((_QWORD *)this + 2);
  v7 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0, v5);
  v8 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(***((_QWORD ***)this + 11) + 32))(**((_QWORD **)this + 11), 0, 0);
  ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v6, (uint64_t)v36, v7, *(_DWORD *)(v8 + 88), 0, 0, 1, -1.0, 0.0);
  v48 = (ZinElementWiseLayer **)this;
  v33 = (void **)&v48;
  v34 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v33);
  v10 = ZinIrOpLayerGraph::AddNode(a2, ConstScaleAndBiasGOC, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v40 = __p[1];
    operator delete(__p[1]);
  }
  if (v10
    && ZinIrOpLayerGraph::AddEdge((uint64_t)a2, **((_QWORD **)this + 11), (uint64_t)ConstScaleAndBiasGOC, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))
  {
    if (*((char *)this + 47) >= 0)
      v11 = *((unsigned __int8 *)this + 47);
    else
      v11 = *((_QWORD *)this + 4);
    v12 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 7);
    if (SBYTE7(v40) < 0)
      v12 = (void **)__p[0];
    if (v11)
    {
      if (*((char *)this + 47) >= 0)
        v13 = v4;
      else
        v13 = (const void *)*((_QWORD *)this + 3);
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, "_ew_max");
    v14 = ZinObjectNameFactory::ZinObjectNameFactory(&v33, __p);
    if (SBYTE7(v40) < 0)
      operator delete(__p[0]);
    v15 = *((_QWORD *)this + 2);
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, __n128))(***((_QWORD ***)this + 11) + 80))(__p, **((_QWORD **)this + 11), 0, 0, v14);
    (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ConstScaleAndBiasGOC + 80))((_QWORD *)v46 + 1, ConstScaleAndBiasGOC, 0, 0);
    v16 = operator new(0xF0uLL);
    v50 = v16 + 15;
    v17 = v47[0];
    v16[12] = v46[5];
    v16[13] = v17;
    *(_OWORD *)((char *)v16 + 220) = *(_OWORD *)((char *)v47 + 12);
    v18 = v46[2];
    v16[8] = v46[1];
    v16[9] = v18;
    v19 = v46[4];
    v16[10] = v46[3];
    v16[11] = v19;
    v20 = v44;
    v16[4] = v43;
    v16[5] = v20;
    v21 = v46[0];
    v16[6] = v45;
    v16[7] = v21;
    v22 = v40;
    *v16 = *(_OWORD *)__p;
    v16[1] = v22;
    v23 = v42;
    v16[2] = v41;
    v16[3] = v23;
    v48 = (ZinElementWiseLayer **)v16;
    v49 = (uint64_t)(v16 + 15);
    v24 = (*(uint64_t (**)(ZinElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
    v25 = (*(uint64_t (**)(ZinElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
    ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v15, (uint64_t)&v33, 7, (uint64_t)&v48, (__int128 *)(v24 + 48), *(_DWORD *)(v25 + 88));
    if (v48)
    {
      v49 = (uint64_t)v48;
      operator delete(v48);
    }
    v38 = this;
    v48 = &v38;
    v49 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &v48);
    v27 = ZinIrOpLayerGraph::AddNode(a2, ElementWiseLayer, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)&v40 = __p[1];
      operator delete(__p[1]);
    }
    if (v27
      && ZinIrOpLayerGraph::AddEdge((uint64_t)a2, **((_QWORD **)this + 11), (uint64_t)ElementWiseLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0)&& ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)ConstScaleAndBiasGOC, (uint64_t)ElementWiseLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0)&& (memset(v31, 0, sizeof(v31)), v32 = 1065353216, v28 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)this, ElementWiseLayer, v31), std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v31), (v28 & 1) != 0))
    {
      if (ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, this, 0))
        v29 = 0;
      else
        v29 = 3;
    }
    else
    {
      v29 = 3;
    }
    v33 = (void **)off_24C01FBB0;
    if (v35 < 0)
      operator delete(v34);
  }
  else
  {
    v29 = 3;
  }
  v36[0] = off_24C01FBB0;
  if (v37 < 0)
    operator delete((void *)v36[1]);
  return v29;
}

void sub_206FF549C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)(ZinObjectNameFactory *__hidden this), void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void (**a22)(ZinObjectNameFactory *__hidden this),void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  a14 = off_24C01FBB0;
  if (a20 < 0)
    operator delete(__p);
  a22 = off_24C01FBB0;
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::LowerEWCompare(ZinElementWiseLayer *this, uint64_t **a2)
{
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  void **v7;
  const void *v8;
  uint64_t v9;
  ZinIrOpLayer *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  size_t v13;
  void **v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  BOOL v19;
  char v20;
  _DWORD *v21;
  size_t v22;
  void **v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  ZinIrOpLayer *ElementWiseLayer;
  uint64_t *v36;
  ZinIrTensor::MirInfo *v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  const __CFString *v46;
  void **v47;
  ZinIrTensor::MirInfo *v48;
  void **v49;
  void *v50;
  char v51;
  _QWORD v52[4];
  int v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  _OWORD v59[10];
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  uint64_t v63;
  ZinElementWiseLayer *v64;
  void *__p[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];
  ZinElementWiseLayer **v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v61 = 0;
  v62 = 0;
  v63 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v61, *((const void **)this + 11), *((_QWORD *)this + 12), (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 3);
  v4 = (*(uint64_t (**)(ZinElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ZinIrActivationParams::ZinIrActivationParams((uint64_t)v59, 0);
  v5 = *(_DWORD *)(*((_QWORD *)this + 8) + 12);
  switch(v5)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v66 = 0;
      v46 = ZinIrEWTypeToCFString(v5);
      ZinGetString(v46, (uint64_t)__p);
      if ((SBYTE7(v66) & 0x80u) == 0)
        v47 = __p;
      else
        v47 = (void **)__p[0];
      ZinAssertImpl("Unsupported elementwise compare op %s", (const char *)v47);
    case 0xAu:
    case 0x10u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 25);
      goto LABEL_8;
    case 0xBu:
    case 0x11u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 26);
      goto LABEL_8;
    case 0xCu:
    case 0x12u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 27);
      goto LABEL_8;
    case 0xDu:
    case 0x13u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 28);
      goto LABEL_8;
    case 0xEu:
    case 0x14u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 29);
      goto LABEL_8;
    case 0xFu:
    case 0x15u:
      ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 30);
LABEL_8:
      v59[8] = v73;
      v59[9] = v74;
      v60 = v75;
      v59[4] = v69;
      v59[5] = v70;
      v59[6] = v71;
      v59[7] = v72;
      v59[0] = *(_OWORD *)__p;
      v59[1] = v66;
      v59[2] = v67;
      v59[3] = v68;
      break;
    default:
      break;
  }
  if (*(char *)(v4 + 47) >= 0)
    v6 = *(unsigned __int8 *)(v4 + 47);
  else
    v6 = *(_QWORD *)(v4 + 32);
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 15);
  if (SBYTE7(v66) < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*(char *)(v4 + 47) >= 0)
      v8 = (const void *)(v4 + 24);
    else
      v8 = *(const void **)(v4 + 24);
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "_comparison_lut");
  ZinIrTensor::CreateTensor((ZinIrTensor *)v4, (__int128 *)__p, &v57);
  if (SBYTE7(v66) < 0)
    operator delete(__p[0]);
  v9 = operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v9, 4);
  v56 = v9;
  v10 = (ZinIrOpLayer *)operator new();
  v54 = v57;
  v55 = v58;
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (*((char *)this + 47) >= 0)
    v13 = *((unsigned __int8 *)this + 47);
  else
    v13 = *((_QWORD *)this + 4);
  v14 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 14);
  if (SBYTE7(v66) < 0)
    v14 = (void **)__p[0];
  if (v13)
  {
    if (*((char *)this + 47) >= 0)
      v15 = (char *)this + 24;
    else
      v15 = (char *)*((_QWORD *)this + 3);
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "comparison_lut");
  ZinActivationLayer::ZinActivationLayer(v10, &v56, &v54, __p, v59);
  if (SBYTE7(v66) < 0)
    operator delete(__p[0]);
  v16 = v55;
  if (v55)
  {
    v17 = (unint64_t *)&v55->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v79 = (ZinElementWiseLayer **)this;
  v49 = (void **)&v79;
  v50 = (void *)1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v49);
  v19 = ZinIrOpLayerGraph::AddNode(a2, v10, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v66 = __p[1];
    operator delete(__p[1]);
  }
  if (!v19)
    goto LABEL_79;
  memset(v52, 0, sizeof(v52));
  v53 = 1065353216;
  v20 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)this, v10, v52);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v52);
  if ((v20 & 1) == 0 || !ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, this, 0))
    goto LABEL_79;
  if (!IsEWTypeCompareBinary(*(_DWORD *)(*((_QWORD *)this + 8) + 12)))
    goto LABEL_98;
  if (v62 - (_BYTE *)v61 != 16)
    ZinAssertImpl("Binary comparison op must have 2 inputs");
  v21 = (_DWORD *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode((uint64_t)v21, 5);
  *(_QWORD *)v21 = &unk_24C01FA78;
  v21[3] = 4;
  if (*((char *)this + 47) >= 0)
    v22 = *((unsigned __int8 *)this + 47);
  else
    v22 = *((_QWORD *)this + 4);
  v23 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v22 + 6);
  if (SBYTE7(v66) < 0)
    v23 = (void **)__p[0];
  if (v22)
  {
    if (*((char *)this + 47) >= 0)
      v24 = (char *)this + 24;
    else
      v24 = (char *)*((_QWORD *)this + 3);
    memmove(v23, v24, v22);
  }
  strcpy((char *)v23 + v22, "ew_sub");
  v25 = ZinObjectNameFactory::ZinObjectNameFactory(&v49, __p);
  if (SBYTE7(v66) < 0)
    operator delete(__p[0]);
  v26 = *((_QWORD *)this + 2);
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, __n128))(**(_QWORD **)v61 + 80))(__p, *(_QWORD *)v61, 0, 0, v25);
  (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)v61 + 1) + 80))((_QWORD *)&v72 + 1);
  v27 = operator new(0xF0uLL);
  v81 = v27 + 15;
  v28 = v78[0];
  v27[12] = v77;
  v27[13] = v28;
  *(_OWORD *)((char *)v27 + 220) = *(_OWORD *)((char *)v78 + 12);
  v29 = v74;
  v27[8] = v73;
  v27[9] = v29;
  v30 = v76;
  v27[10] = v75;
  v27[11] = v30;
  v31 = v70;
  v27[4] = v69;
  v27[5] = v31;
  v32 = v72;
  v27[6] = v71;
  v27[7] = v32;
  v33 = v66;
  *v27 = *(_OWORD *)__p;
  v27[1] = v33;
  v34 = v68;
  v27[2] = v67;
  v27[3] = v34;
  v79 = (ZinElementWiseLayer **)v27;
  v80 = (uint64_t)(v27 + 15);
  ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v26, (uint64_t)&v49, 4, (uint64_t)&v79, (__int128 *)(v4 + 48), 3);
  if (v79)
  {
    v80 = (uint64_t)v79;
    operator delete(v79);
  }
  v36 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ElementWiseLayer + 32))(ElementWiseLayer, 0, 0);
  ZinIrTensor::CopyTensorMirInfo((ZinIrTensor *)v4, &v48);
  ZinIrTensor::SetTensorMirInfo(v36, &v48);
  v37 = v48;
  v48 = 0;
  if (v37)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v48, v37);
  v64 = this;
  v79 = &v64;
  v80 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v79);
  v38 = ZinIrOpLayerGraph::AddNode(a2, ElementWiseLayer, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v66 = __p[1];
    operator delete(__p[1]);
  }
  if (!v38
    || !ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *(_QWORD *)v61, (uint64_t)ElementWiseLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0)|| !ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *((_QWORD *)v61 + 1), (uint64_t)ElementWiseLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))
  {
    v49 = (void **)off_24C01FBB0;
    if (v51 < 0)
      operator delete(v50);
    (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    goto LABEL_79;
  }
  v39 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)ElementWiseLayer, (uint64_t)v10, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  v49 = (void **)off_24C01FBB0;
  if (v51 < 0)
    operator delete(v50);
  (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
  if ((v39 & 1) != 0)
  {
LABEL_98:
    if (!IsEWTypeCompareUnary(*(_DWORD *)(*((_QWORD *)this + 8) + 12)))
      goto LABEL_75;
    if (v62 - (_BYTE *)v61 != 8)
      ZinAssertImpl("Unary comparison op must have 1 input");
    if (ZinIrOpLayerGraph::AddEdge((uint64_t)a2, *(_QWORD *)v61, (uint64_t)v10, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0))
    {
LABEL_75:
      v40 = 0;
      goto LABEL_80;
    }
  }
LABEL_79:
  v40 = 3;
LABEL_80:
  v41 = v56;
  v56 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = v58;
  if (v58)
  {
    v43 = (unint64_t *)&v58->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  return v40;
}

void sub_206FF5D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,void *__p,uint64_t a58)
{
  uint64_t v58;
  uint64_t v59;

  a56 = (void *)(v59 + 16);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a18 < 0)
    operator delete(a13);
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::LowerEWPower(ZinElementWiseLayer *this, uint64_t **a2, ZinElementWiseLayer *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  ZinIrOpLayer *Activation;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  ZinIrOpLayer *ElementWiseLayer;
  _BOOL4 v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  ZinIrOpLayer *v32;
  _BOOL4 v33;
  int v34;
  int v35;
  _BOOL4 v36;
  _BOOL4 v38;
  _OWORD v39[2];
  int v40;
  _OWORD v41[2];
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD v46[2];
  uint64_t v47;
  _QWORD v48[3];
  char v49;
  void *__p[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD v57[6];
  _OWORD v58[2];
  _QWORD v59[3];

  v59[1] = *MEMORY[0x24BDAC8D0];
  v5 = (char *)a3 + 24;
  v6 = (*(uint64_t (**)(ZinElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  ZinObjectNameFactory::ZinObjectNameFactory(v48, v5);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(_OWORD *)(v6 + 64);
  v46[0] = *(_OWORD *)(v6 + 48);
  v46[1] = v8;
  v47 = *(_QWORD *)(v6 + 80);
  v9 = *(_DWORD *)(v6 + 88);
  ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 20);
  Activation = (ZinIrOpLayer *)ZinBuilder::CreateActivation(v7, (uint64_t)v48, (uint64_t)v46, v9, (uint64_t)__p);
  v11 = (uint64_t *)*((_QWORD *)a3 + 11);
  v12 = *v11;
  v13 = v11[1];
  v59[0] = a3;
  v43 = v59;
  v44 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v43);
  v14 = ZinIrOpLayerGraph::AddNode(a2, Activation, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v51 = __p[1];
    operator delete(__p[1]);
  }
  v38 = v14;
  v15 = ZinIrOpLayerGraph::SwapEdgeDestination((uint64_t)a2, v12, (uint64_t)a3, (uint64_t)Activation, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  v16 = *(_QWORD *)(v6 + 16);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 80))(__p, v13, 0, 0);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)Activation + 80))((_QWORD *)v57 + 1, Activation, 0, 0);
  v17 = operator new(0xF0uLL);
  v45 = v17 + 15;
  v18 = v58[0];
  v17[12] = v57[5];
  v17[13] = v18;
  *(_OWORD *)((char *)v17 + 220) = *(_OWORD *)((char *)v58 + 12);
  v19 = v57[2];
  v17[8] = v57[1];
  v17[9] = v19;
  v20 = v57[4];
  v17[10] = v57[3];
  v17[11] = v20;
  v21 = v55;
  v17[4] = v54;
  v17[5] = v21;
  v22 = v57[0];
  v17[6] = v56;
  v17[7] = v22;
  v23 = v51;
  *v17 = *(_OWORD *)__p;
  v17[1] = v23;
  v24 = v53;
  v17[2] = v52;
  v17[3] = v24;
  v43 = v17;
  v44 = (uint64_t)(v17 + 15);
  ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v16, (uint64_t)v48, 2, (uint64_t)&v43, (__int128 *)(v6 + 48), *(_DWORD *)(v6 + 88));
  if (v43)
  {
    v44 = (uint64_t)v43;
    operator delete(v43);
  }
  v59[0] = a3;
  v43 = v59;
  v44 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v43);
  v26 = ZinIrOpLayerGraph::AddNode(a2, ElementWiseLayer, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v51 = __p[1];
    operator delete(__p[1]);
  }
  v27 = operator new(0x10uLL);
  __p[1] = v27 + 2;
  *(_QWORD *)&v51 = v27 + 2;
  *v27 = v13;
  v27[1] = Activation;
  __p[0] = v27;
  v28 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)__p, (uint64_t)ElementWiseLayer);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v29 = *(_QWORD *)(v6 + 16);
  v30 = *(_OWORD *)(v6 + 64);
  v41[0] = *(_OWORD *)(v6 + 48);
  v41[1] = v30;
  v42 = *(_QWORD *)(v6 + 80);
  v31 = *(_DWORD *)(v6 + 88);
  ZinIrActivationParams::ZinIrActivationParams((uint64_t)__p, 21);
  v32 = (ZinIrOpLayer *)ZinBuilder::CreateActivation(v29, (uint64_t)v48, (uint64_t)v41, v31, (uint64_t)__p);
  v59[0] = a3;
  v43 = v59;
  v44 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v43);
  v33 = ZinIrOpLayerGraph::AddNode(a2, v32, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v51 = __p[1];
    operator delete(__p[1]);
  }
  v34 = ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)ElementWiseLayer, (uint64_t)v32, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  memset(v39, 0, sizeof(v39));
  v40 = 1065353216;
  v35 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a3, v32, v39);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v39);
  v36 = ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a3, 0);
  v48[0] = off_24C01FBB0;
  if (v49 < 0)
    operator delete((void *)v48[1]);
  if ((v38 & v15 & v26 & v28 & v33 & v34 & v35 & v36) != 0)
    return 0;
  else
    return 3;
}

void sub_206FF63AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void (**a33)(ZinObjectNameFactory *__hidden this),void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a13);
  a33 = off_24C01FBB0;
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::LowerEWDivide(ZinElementWiseLayer *this, uint64_t **a2, ZinElementWiseLayer *a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  ZinIrOpLayer *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  ZinIrOpLayer *Activation;
  _BOOL4 v16;
  int v17;
  int v18;
  ZinIrOpLayer *ConstLayer;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t ElementCount;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  float v30;
  float v31;
  unint64_t *v32;
  unint64_t v33;
  char *v39;
  _WORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int16 v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  int v58;
  _BOOL4 v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  ZinIrOpLayer *ElementWiseLayer;
  _BOOL4 v70;
  _QWORD *v71;
  int v72;
  int v73;
  uint64_t v74;
  __int128 *v76;
  _OWORD v77[2];
  int v78;
  _OWORD v79[2];
  uint64_t v80;
  _OWORD v81[2];
  uint64_t v82;
  ZinElementWiseLayer *v83;
  std::__shared_weak_count *v84;
  void *v85;
  unint64_t v86;
  char *v87;
  _QWORD v88[3];
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[6];
  _OWORD v98[2];
  ZinElementWiseLayer *v99;
  std::__shared_weak_count *v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a3 + 2);
  v6 = (*(uint64_t (**)(ZinElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)a3 + 32))(a3, 0, 0);
  v7 = ZinObjectNameFactory::ZinObjectNameFactory(v88, (char *)a3 + 24);
  v8 = *(ZinIrOpLayer **)(*((_QWORD *)a3 + 11) + 8);
  v9 = *(_DWORD *)(*((_QWORD *)v8 + 8) + 8);
  if (*(_BYTE *)(v5 + 1048))
    _ZF = 0;
  else
    _ZF = v9 == 29;
  if (_ZF)
  {
    v21 = (char *)*((_QWORD *)v8 + 14);
    v20 = (char *)*((_QWORD *)v8 + 15);
    v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)v8 + 32))(*(_QWORD *)(*((_QWORD *)a3 + 11) + 8), 0, 0, v7);
    if (v20 - v21 != 8)
    {
      v74 = 3;
      goto LABEL_68;
    }
    v76 = (__int128 *)(v22 + 48);
    ElementCount = ZinTensorDimensions::GetElementCount((ZinTensorDimensions *)(v22 + 48));
    v85 = 0;
    v86 = 0;
    v87 = 0;
    if (ElementCount)
    {
      for (i = 0; i != ElementCount; ++i)
      {
        v25 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
        v26 = *(_QWORD *)(v25 + 112);
        v27 = *(std::__shared_weak_count **)(v25 + 120);
        *(_QWORD *)&v90 = v26;
        *((_QWORD *)&v90 + 1) = v27;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
        }
        ZinIrConstData::GetDataAt<float>(v26);
        v31 = v30;
        if (v27)
        {
          v32 = (unint64_t *)&v27->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (v31 == 0.0)
          ZinAssertImpl("Cannot divide by zero");
        _S0 = 1.0 / v31;
        __asm { FCVT            H8, S0 }
        v39 = (char *)v86;
        if (v86 >= (unint64_t)v87)
        {
          v41 = (char *)v85;
          v42 = v86 - (_QWORD)v85;
          if ((uint64_t)(v86 - (_QWORD)v85) <= -3)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v43 = v42 >> 1;
          if (v87 - (_BYTE *)v85 <= (unint64_t)((v42 >> 1) + 1))
            v44 = v43 + 1;
          else
            v44 = v87 - (_BYTE *)v85;
          if ((unint64_t)(v87 - (_BYTE *)v85) >= 0x7FFFFFFFFFFFFFFELL)
            v45 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45)
          {
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)&v87, v45);
            v41 = (char *)v85;
            v39 = (char *)v86;
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[2 * v43];
          *(_WORD *)v47 = _H8;
          v40 = v47 + 2;
          while (v39 != v41)
          {
            v48 = *((_WORD *)v39 - 1);
            v39 -= 2;
            *((_WORD *)v47 - 1) = v48;
            v47 -= 2;
          }
          v85 = v47;
          v86 = (unint64_t)v40;
          v87 = &v46[2 * v45];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *(_WORD *)v86 = _H8;
          v40 = v39 + 2;
        }
        v86 = (unint64_t)v40;
      }
    }
    std::allocate_shared[abi:ne180100]<ZinIrConstData_specialization<half>,std::allocator<ZinIrConstData_specialization<half>>,std::vector<half>,void>((uint64_t)&v85, &v99);
    v83 = v99;
    v84 = v100;
    if (v100)
    {
      v49 = (unint64_t *)&v100->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    ConstLayer = (ZinIrOpLayer *)ZinBuilder::CreateConstLayer(v5, (uint64_t)v88, v76, 3, (uint64_t *)&v83, 0, 0);
    v51 = v84;
    if (v84)
    {
      v52 = (unint64_t *)&v84->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    *(_QWORD *)&v90 = &unk_24C02BB18;
    *((_QWORD *)&v90 + 1) = 0;
    v91 = 0uLL;
    v18 = ZinIrOpLayerGraph::ReplaceNode(a2, v8, ConstLayer, (const Layer2TDMapper::SourceLayer *)&v90);
    *(_QWORD *)&v90 = &unk_24C02BB18;
    if (*((_QWORD *)&v90 + 1))
    {
      *(_QWORD *)&v91 = *((_QWORD *)&v90 + 1);
      operator delete(*((void **)&v90 + 1));
    }
    v54 = v100;
    if (v100)
    {
      v55 = (unint64_t *)&v100->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v85)
    {
      v86 = (unint64_t)v85;
      operator delete(v85);
    }
  }
  else if (v9 == 18)
  {
    v11 = **((_QWORD **)v8 + 11);
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)v11 + 32))(v11, 0, 0, v7);
    v13 = *(_OWORD *)(v12 + 64);
    v81[0] = *(_OWORD *)(v12 + 48);
    v81[1] = v13;
    v82 = *(_QWORD *)(v12 + 80);
    v14 = *(_DWORD *)(v12 + 88);
    ZinIrActivationParams::ZinIrActivationParams((uint64_t)&v90, 18);
    Activation = (ZinIrOpLayer *)ZinBuilder::CreateActivation(v5, (uint64_t)v88, (uint64_t)v81, v14, (uint64_t)&v90);
    v99 = a3;
    v85 = &v99;
    v86 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v90, &v85);
    v16 = ZinIrOpLayerGraph::AddNode(a2, Activation, (ZinIrOpLayer ***)&v90);
    *(_QWORD *)&v90 = &unk_24C02BB18;
    if (*((_QWORD *)&v90 + 1))
    {
      *(_QWORD *)&v91 = *((_QWORD *)&v90 + 1);
      operator delete(*((void **)&v90 + 1));
    }
    v17 = ZinIrOpLayerGraph::SwapEdgeDestination((uint64_t)a2, v11, (uint64_t)v8, (uint64_t)Activation, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    v18 = v16 & v17 & ZinIrOpLayerGraph::AddEdge((uint64_t)a2, (uint64_t)Activation, (uint64_t)v8, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    ConstLayer = v8;
  }
  else
  {
    v57 = *(_OWORD *)(v6 + 64);
    v79[0] = *(_OWORD *)(v6 + 48);
    v79[1] = v57;
    v80 = *(_QWORD *)(v6 + 80);
    v58 = *(_DWORD *)(v6 + 88);
    ZinIrActivationParams::ZinIrActivationParams((uint64_t)&v90, 18);
    ConstLayer = (ZinIrOpLayer *)ZinBuilder::CreateActivation(v5, (uint64_t)v88, (uint64_t)v79, v58, (uint64_t)&v90);
    v99 = a3;
    v85 = &v99;
    v86 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&v90, &v85);
    v59 = ZinIrOpLayerGraph::AddNode(a2, ConstLayer, (ZinIrOpLayer ***)&v90);
    *(_QWORD *)&v90 = &unk_24C02BB18;
    if (*((_QWORD *)&v90 + 1))
    {
      *(_QWORD *)&v91 = *((_QWORD *)&v90 + 1);
      operator delete(*((void **)&v90 + 1));
    }
    v18 = v59 & ZinIrOpLayerGraph::SwapEdgeDestination((uint64_t)a2, (uint64_t)v8, (uint64_t)a3, (uint64_t)ConstLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  }
  v60 = **((_QWORD **)a3 + 11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v60 + 80))(&v90, v60, 0, 0);
  (*(void (**)(_QWORD *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)ConstLayer + 80))((_QWORD *)v97 + 1, ConstLayer, 0, 0);
  v61 = operator new(0xF0uLL);
  v87 = (char *)(v61 + 15);
  v62 = v98[0];
  v61[12] = v97[5];
  v61[13] = v62;
  *(_OWORD *)((char *)v61 + 220) = *(_OWORD *)((char *)v98 + 12);
  v63 = v97[2];
  v61[8] = v97[1];
  v61[9] = v63;
  v64 = v97[4];
  v61[10] = v97[3];
  v61[11] = v64;
  v65 = v95;
  v61[4] = v94;
  v61[5] = v65;
  v66 = v97[0];
  v61[6] = v96;
  v61[7] = v66;
  v67 = v91;
  *v61 = v90;
  v61[1] = v67;
  v68 = v93;
  v61[2] = v92;
  v61[3] = v68;
  v85 = v61;
  v86 = (unint64_t)(v61 + 15);
  ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v5, (uint64_t)v88, 2, (uint64_t)&v85, (__int128 *)(v6 + 48), *(_DWORD *)(v6 + 88));
  if (v85)
  {
    v86 = (unint64_t)v85;
    operator delete(v85);
  }
  v99 = a3;
  v85 = &v99;
  v86 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v90, &v85);
  v70 = ZinIrOpLayerGraph::AddNode(a2, ElementWiseLayer, (ZinIrOpLayer ***)&v90);
  *(_QWORD *)&v90 = &unk_24C02BB18;
  if (*((_QWORD *)&v90 + 1))
  {
    *(_QWORD *)&v91 = *((_QWORD *)&v90 + 1);
    operator delete(*((void **)&v90 + 1));
  }
  v71 = operator new(0x10uLL);
  *((_QWORD *)&v90 + 1) = v71 + 2;
  *(_QWORD *)&v91 = v71 + 2;
  *v71 = v60;
  v71[1] = ConstLayer;
  *(_QWORD *)&v90 = v71;
  v72 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)&v90, (uint64_t)ElementWiseLayer);
  if ((_QWORD)v90)
  {
    *((_QWORD *)&v90 + 1) = v90;
    operator delete((void *)v90);
  }
  memset(v77, 0, sizeof(v77));
  v78 = 1065353216;
  v73 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a3, ElementWiseLayer, v77);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v77);
  if ((v18 & v70 & v72 & v73 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a3, 0) & 1) == 0)
    ZinAssertImpl("ANECompiler internal failure: Graph manipulation error");
  v74 = 0;
LABEL_68:
  v88[0] = off_24C01FBB0;
  if (v89 < 0)
    operator delete((void *)v88[1]);
  return v74;
}

void sub_206FF6BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  uint64_t v45;

  if (__p)
    operator delete(__p);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100](v45 - 136);
  if (a32)
    operator delete(a32);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::LowerEWSquare(ZinElementWiseLayer *this, uint64_t **a2, ZinElementWiseLayer *a3)
{
  size_t v6;
  void **v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  ZinIrOpLayer *ElementWiseLayer;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  int v30;
  _OWORD v32[2];
  int v33;
  void *v34;
  uint64_t v35;
  _OWORD *v36;
  _QWORD v37[3];
  char v38;
  ZinElementWiseLayer *v39;
  void *__p[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[6];
  _OWORD v48[2];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*((_QWORD *)a3 + 8) + 12) != 3)
    ZinAssertImpl("Expected EwSquare!!", a2);
  if (*((char *)this + 47) >= 0)
    v6 = *((unsigned __int8 *)this + 47);
  else
    v6 = *((_QWORD *)this + 4);
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 7);
  if (SBYTE7(v41) < 0)
    v7 = (void **)__p[0];
  if (v6)
  {
    if (*((char *)this + 47) >= 0)
      v8 = (char *)this + 24;
    else
      v8 = (char *)*((_QWORD *)this + 3);
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "_to_mul");
  v9 = ZinObjectNameFactory::ZinObjectNameFactory(v37, __p);
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  v10 = *((_QWORD *)this + 2);
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, __n128))(***((_QWORD ***)this + 11) + 80))(__p, **((_QWORD **)this + 11), 0, 0, v9);
  (*(void (**)(_QWORD *__return_ptr))(***((_QWORD ***)this + 11) + 80))((_QWORD *)v47 + 1);
  v11 = operator new(0xF0uLL);
  v12 = v47[4];
  v13 = v48[0];
  v11[12] = v47[5];
  v11[13] = v13;
  *(_OWORD *)((char *)v11 + 220) = *(_OWORD *)((char *)v48 + 12);
  v14 = v47[0];
  v15 = v47[2];
  v16 = v47[3];
  v11[8] = v47[1];
  v11[9] = v15;
  v11[10] = v16;
  v11[11] = v12;
  v17 = v43;
  v18 = v45;
  v19 = v46;
  v11[4] = v44;
  v11[5] = v18;
  v11[6] = v19;
  v11[7] = v14;
  v20 = v41;
  v21 = v42;
  *v11 = *(_OWORD *)__p;
  v11[1] = v20;
  v35 = (uint64_t)(v11 + 15);
  v36 = v11 + 15;
  v11[2] = v21;
  v11[3] = v17;
  v34 = v11;
  v22 = (*(uint64_t (**)(ZinElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  v23 = (*(uint64_t (**)(ZinElementWiseLayer *, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, 0, 0);
  ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v10, (uint64_t)v37, 2, (uint64_t)&v34, (__int128 *)(v22 + 48), *(_DWORD *)(v23 + 88));
  if (v34)
  {
    v35 = (uint64_t)v34;
    operator delete(v34);
  }
  v39 = a3;
  v34 = &v39;
  v35 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v34);
  v25 = ZinIrOpLayerGraph::AddNode(a2, ElementWiseLayer, (ZinIrOpLayer ***)__p);
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    *(void **)&v41 = __p[1];
    operator delete(__p[1]);
  }
  v26 = **((_QWORD **)a3 + 11);
  v27 = **((_QWORD **)this + 11);
  v28 = operator new(0x10uLL);
  __p[1] = v28 + 2;
  *(_QWORD *)&v41 = v28 + 2;
  *v28 = v26;
  v28[1] = v27;
  __p[0] = v28;
  v29 = ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a2, (uint64_t *)__p, (uint64_t)ElementWiseLayer);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  memset(v32, 0, sizeof(v32));
  v33 = 1065353216;
  v30 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a2, (uint64_t **)a3, ElementWiseLayer, v32);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v32);
  if ((v25 & v29 & v30 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a2, a3, 0) & 1) == 0)
    ZinAssertImpl("ANE internal failure: graph manipulation error");
  v37[0] = off_24C01FBB0;
  if (v38 < 0)
    operator delete((void *)v37[1]);
  return 0;
}

void sub_206FF7028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)(ZinObjectNameFactory *__hidden this), void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a9);
  a18 = off_24C01FBB0;
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::Lower(char **a1, uint64_t **a2, const ZinTensorDimensions ***a3)
{
  char *v6;
  char *v7;
  int64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  _BOOL8 IsEwCompare;
  int v16;
  void *__p[3];
  uint64_t v20[4];

  if (*((_DWORD *)a1[8] + 3) == 6)
  {
    if (ZinElementWiseLayer::LowerEWDivide((ZinElementWiseLayer *)a1, a2, (ZinElementWiseLayer *)a1))
      ZinAssertImpl("ANECompiler internal failure: Elementwise Div error");
    return 0;
  }
  v7 = a1[11];
  v6 = a1[12];
  v8 = v6 - v7;
  if ((unint64_t)(v6 - v7) >= 9)
  {
    memset(v20, 0, 24);
    if (v7 == v6)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)v7;
        v7 += 8;
        v9 |= *(_DWORD *)(*(_QWORD *)(v10 + 64) + 8) == 29;
      }
      while (v7 != v6);
    }
    ZinIrOpLayer::GetInputTensorDimensions((ZinIrOpLayer *)a1, __p);
    if (v8 != 16 || (v9 & 1) == 0)
    {
      v14 = 0;
    }
    else
    {
      v11 = *((_DWORD *)a1[8] + 3);
      v12 = v11 > 4;
      v13 = (0x16u >> v11) & 1;
      if (v12)
        v14 = 0;
      else
        v14 = v13;
    }
    ZinElementWiseLayerUtils::DecomposeElementWiseLayer((int64x2_t **)__p, v20, **a3, v14);
    ZinElementWiseLayerUtils::HandleInputDimensionsMismatch(a2, a1, v20);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = v20;
    std::vector<ZinElementWiseLayerUtils::ElementWiseDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (!*((_BYTE *)**a3 + 1212) && *((_DWORD *)a1[8] + 3) == 9)
  {
    if (!ZinElementWiseLayer::LowerEwAbsH11H12((ZinElementWiseLayer *)a1, a2))
      return 0;
LABEL_27:
    ZinAssertImpl("ANECompiler internal failure: Graph manipulation error");
  }
  IsEwCompare = ZinElementWiseLayer::IsEwCompare((ZinElementWiseLayer *)a1);
  if (IsEwCompare)
  {
    if (!ZinElementWiseLayer::LowerEWCompare((ZinElementWiseLayer *)a1, a2))
      return 0;
    goto LABEL_27;
  }
  v16 = *((_DWORD *)a1[8] + 3);
  if (v16 == 5)
  {
    if (!ZinElementWiseLayer::LowerEWPower((ZinElementWiseLayer *)IsEwCompare, a2, (ZinElementWiseLayer *)a1))return 0;
    goto LABEL_27;
  }
  if (v16 == 3 && *((_BYTE *)**a3 + 1213) == 0)
    ZinElementWiseLayer::LowerEWSquare((ZinElementWiseLayer *)a1, a2, (ZinElementWiseLayer *)a1);
  return 0;
}

void sub_206FF72C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  a16 = &a13;
  std::vector<ZinElementWiseLayerUtils::ElementWiseDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

BOOL ZinElementWiseLayer::IsEwCompare(ZinElementWiseLayer *this)
{
  return IsEWTypeCompareBinary(*(_DWORD *)(*((_QWORD *)this + 8) + 12))
      || IsEWTypeCompareUnary(*(_DWORD *)(*((_QWORD *)this + 8) + 12));
}

_QWORD *ZinElementWiseLayer::Clone(ZinIrOpLayer *a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  _QWORD *v16;
  const ZinIrOpLayerOpCode *v17;
  ZinIrOpLayerOpCode *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *GroupId;
  ZinIrKernel *v26;
  uint64_t v28[2];
  std::string v29;
  void *__p[2];
  int64_t v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;
  ZinIrKernel *v35;

  v6 = (uint64_t)a1 + 136;
  if (*((_QWORD *)a1 + 17))
  {
    if (*((char *)a3 + 23) >= 0)
      v7 = *((unsigned __int8 *)a3 + 23);
    else
      v7 = (size_t)a3[1];
    v8 = &v32;
    std::string::basic_string[abi:ne180100]((uint64_t)&v32, v7 + 1);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if (v7)
    {
      if (*((char *)a3 + 23) >= 0)
        v9 = a3;
      else
        v9 = *a3;
      memmove(v8, v9, v7);
    }
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 95;
    std::string::basic_string[abi:ne180100]<0>(&v29, "ew_clone_kernel");
    v10 = std::string::append(&v29, "_xfm", 4uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v31 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v31 >= 0)
      v13 = HIBYTE(v31);
    else
      v13 = (std::string::size_type)__p[1];
    v14 = std::string::append(&v32, (const std::string::value_type *)v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v34 = v14->__r_.__value_.__r.__words[2];
    v33 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::make_unique[abi:ne180100]<ZinIrKernel,std::unique_ptr<ZinIrKernel> const&,std::string>(v6, (uint64_t)&v33, (uint64_t *)&v35);
    if (SHIBYTE(v34) < 0)
      operator delete((void *)v33);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  else
  {
    v35 = 0;
  }
  v16 = (_QWORD *)operator new();
  v17 = (const ZinIrOpLayerOpCode *)*((_QWORD *)a1 + 8);
  v18 = (ZinIrOpLayerOpCode *)operator new();
  ZinIrOpLayerOpCode::ZinIrOpLayerOpCode(v18, v17);
  *(_QWORD *)v18 = &unk_24C01FA78;
  *((_DWORD *)v18 + 3) = *((_DWORD *)v17 + 3);
  *(_QWORD *)&v33 = v18;
  v19 = *a2;
  v20 = (std::__shared_weak_count *)a2[1];
  v28[0] = v19;
  v28[1] = (uint64_t)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  ZinElementWiseLayer::ZinElementWiseLayer(v16, (uint64_t *)&v33, v28, (__int128 *)a3, &v35);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if ((_QWORD)v33)
    (*(void (**)(_QWORD))(*(_QWORD *)v33 + 8))(v33);
  GroupId = (uint64_t *)ZinIrOpLayer::GetGroupId(a1);
  ZinIrOpLayer::SetGroupId((uint64_t)v16, *GroupId);
  v26 = v35;
  v35 = 0;
  if (v26)
  {
    ZinIrKernel::~ZinIrKernel(v26);
    MEMORY[0x20BD002F8]();
  }
  return v16;
}

void sub_206FF75D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t ZinElementWiseLayer::ComputeOutputDimensions(uint64_t a1, int64_t **a2, int64x2_t *a3)
{
  int64x2_t v3;
  int64_t *v4;
  int64_t *v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;

  v3 = vdupq_n_s64(0x8000000000000000);
  *a3 = v3;
  a3[1] = v3;
  a3[2].i64[0] = 0x8000000000000000;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = 0x8000000000000000;
    v7 = 0x8000000000000000;
    v8 = 0x8000000000000000;
    v9 = 0x8000000000000000;
    v10 = 0x8000000000000000;
    do
    {
      if (v10 <= *v4)
        v10 = *v4;
      a3->i64[0] = v10;
      if (v9 <= v4[4])
        v9 = v4[4];
      a3[2].i64[0] = v9;
      if (v8 <= v4[1])
        v8 = v4[1];
      a3->i64[1] = v8;
      if (v7 <= v4[2])
        v7 = v4[2];
      a3[1].i64[0] = v7;
      if (v6 <= v4[3])
        v6 = v4[3];
      a3[1].i64[1] = v6;
      v4 += 5;
    }
    while (v4 != v5);
  }
  return 0;
}

_QWORD *ZinElementWiseLayer::OpCodeKindToString@<X0>(ZinElementWiseLayer *this@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, (&off_24C060710)[*(int *)(*((_QWORD *)this + 8) + 12)]);
}

uint64_t ZinElementWiseLayer::DebugDetailPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206FF7804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ZinElementWiseLayer::Hash(ZinElementWiseLayer *this, int *a2)
{
  *a2 = ZinHash((const void *)(*((_QWORD *)this + 8) + 12), 4u);
  return 1;
}

uint64_t ZinElementWiseLayer::CanMergeWithFollowingGOC(ZinElementWiseLayer *this, const ZinGOCLayer *a2)
{
  uint64_t result;
  unsigned int v5;
  ZinIrKernel *v7;

  result = ZinIrOpLayer::CanMergeWithFollowingGOC(this, (uint64_t)a2);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(*((_QWORD *)this + 8) + 12);
    if (v5 <= 8 && ((1 << v5) & 0x18C) != 0)
    {
      v7 = (ZinIrKernel *)*((_QWORD *)a2 + 17);
      if (ZinIrKernel::HasPerCoutScale(v7) || ZinIrKernel::HasPerCoutBias(v7))
        return 0;
      v5 = *(_DWORD *)(*((_QWORD *)this + 8) + 12);
    }
    return v5 - 7 > 1 || (ZinIrKernel::HasBias(*((ZinIrKernel **)a2 + 17)) & 1) == 0;
  }
  return result;
}

uint64_t ZinElementWiseLayer::IsRedundant(ZinElementWiseLayer *this)
{
  int v2;
  _QWORD *v3;
  ZinIrTensor *v4;
  int IsZero;
  _QWORD *v6;
  ZinIrTensor *v7;
  unsigned int v8;
  _QWORD *v10;
  ZinIrTensor *v11;

  v2 = *(_DWORD *)(*((_QWORD *)this + 8) + 12);
  if (v2 == 3)
  {
    v10 = (_QWORD *)**((_QWORD **)this + 11);
    if (*(_DWORD *)(v10[8] + 8) == 29)
    {
      v11 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v10 + 32))(v10, 0, 0);
      return ZinIrTensor::IsZero(v11);
    }
    return 0;
  }
  if (v2 != 2 && v2 != 1)
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 11);
  if (*(_DWORD *)(*(_QWORD *)(*v3 + 64) + 8) == 29)
  {
    v4 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 0, 0);
    IsZero = ZinIrTensor::IsZero(v4);
    v3 = (_QWORD *)*((_QWORD *)this + 11);
  }
  else
  {
    IsZero = 0;
  }
  v6 = (_QWORD *)v3[1];
  if (*(_DWORD *)(v6[8] + 8) == 29)
  {
    v7 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + 32))(v6, 0, 0);
    v8 = ZinIrTensor::IsZero(v7);
  }
  else
  {
    v8 = 0;
  }
  return IsZero | v8;
}

uint64_t ZinParseGatherUnit(const __CFDictionary *a1, ZinIrGatherUnitInfo *a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  const __CFString *v12;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    v8 = (const __CFArray *)CFDictionaryGetValue(v6, CFSTR("GatherNDAxes"));
    if (v8)
    {
      v9 = v8;
      v10 = CFGetTypeID(v8);
      if (v10 == CFArrayGetTypeID())
        return ZinParseDimsArray(v9, (uint64_t)a2 + 160, a3);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      ZinParseGatherUnit();
    v12 = CFSTR("InvalidParams");
  }
  else
  {
    v12 = CFSTR("InvalidParamSyntax");
  }
  ZinIrUnitStatus::SetError(a3, v12);
  return 3;
}

void ZinParseGatherUnit()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Axes information must be an array of strings (dimensions)\n", v0, 2u);
}

void ZinIrNEConvUnit::ZinIrNEConvUnit(ZinIrNEConvUnit *this, const ZinIrNEConvUnitInfo *a2)
{
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  ZinIrNEUnit::ZinIrNEUnit(this, a2);
  *v4 = &off_24C01AA20;
  ZinIrNEUnitInfo::ZinIrNEUnitInfo((ZinIrNEUnitInfo *)(v4 + 55), a2);
  *((_QWORD *)this + 55) = &unk_24C01EFA0;
  ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrNEConvUnit *)((char *)this + 808), (const ZinIrNEConvUnitInfo *)((char *)a2 + 368));
  *((_QWORD *)this + 101) = off_24C01CAD8;
  v5 = *((_OWORD *)a2 + 39);
  *(_OWORD *)((char *)this + 1048) = *((_OWORD *)a2 + 38);
  *(_OWORD *)((char *)this + 1064) = v5;
  v6 = *((_OWORD *)a2 + 40);
  v7 = *((_OWORD *)a2 + 41);
  v8 = *((_OWORD *)a2 + 42);
  *(_OWORD *)((char *)this + 1124) = *(_OWORD *)((char *)a2 + 684);
  *(_OWORD *)((char *)this + 1096) = v7;
  *(_OWORD *)((char *)this + 1112) = v8;
  *(_OWORD *)((char *)this + 1080) = v6;
}

void sub_206FF7B98(_Unwind_Exception *a1)
{
  uint64_t v1;
  ZinIrNEConvUnit *v2;

  *(_QWORD *)(v1 + 440) = &unk_24C01AB80;
  if (*(_BYTE *)(v1 + 792))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)(v1 + 680));
  ZinIrNEConvUnit::ZinIrNEConvUnit(v1, v2);
  ZinIrNEUnit::~ZinIrNEUnit((ZinIrNEUnit *)v1);
  _Unwind_Resume(a1);
}

_QWORD *ZinIrNEConvUnit::CreateLayer(uint64_t a1, uint64_t a2, ZinIrTensor ***a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  ZinIrTensor *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t SubLayers;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  ZinIrTensor **v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void **v44;
  char v45;
  _QWORD v46[3];

  v46[2] = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 808;
  v9 = a1 + 8;
  v10 = operator new();
  ZinIrConvUnit::ZinIrConvUnit(v10, v8, v9);
  v11 = **a3;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 112))(v10);
  ZinIrTensor::CreateTensor(v11, (__int128 *)(v12 + 8), &v42);
  v14 = v42;
  v13 = v43;
  v46[0] = v42;
  v46[1] = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v44 = (void **)&v39;
  v45 = 0;
  v17 = operator new(0x10uLL);
  v39 = v17;
  v41 = v17 + 2;
  *v17 = v14;
  v17[1] = v13;
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v40 = v17 + 2;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD **, uint64_t))(*(_QWORD *)v10 + 80))(v10, a2, &v39, a4);
  v44 = (void **)&v39;
  std::vector<std::shared_ptr<ZinIrTransform>>::__destroy_vector::operator()[abi:ne180100](&v44);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)v46);
  SubLayers = ZinIrNEUnit::CreateSubLayers((_BYTE *)a1, a2, a3);
  v23 = v22;
  v24 = (_QWORD *)operator new();
  v25 = v24;
  v26 = a3[1];
  v37 = (uint64_t)*(v26 - 2);
  v27 = (std::__shared_weak_count *)*(v26 - 1);
  v38 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  ZinNEConvLayer::ZinNEConvLayer(v24, &v37, (__int128 *)(a1 + 448), 0, v20, 0, SubLayers, v23, 0, 0, 0);
  v30 = v38;
  if (v38)
  {
    v31 = (unint64_t *)&v38->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (*(_BYTE *)(a1 + 420))
  {
    *((_DWORD *)v25 + 105) = *(_DWORD *)(a1 + 416);
    *((_BYTE *)v25 + 424) = 1;
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return v25;
}

void sub_206FF7E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MEMORY[0x20BD002F8](v6, 0x10B3C4001E18234);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNEConvUnit::CreateKernel(ZinIrNEUnit *a1, const ZinIrHalParameters *a2, ZinIrFileManager *a3, const ZinWeightFileInfo *a4, int a5, uint64_t a6, ZinIrUnitStatus *a7)
{
  char *v13;
  uint64_t v14;
  uint64_t SubKernels;
  void *__p;
  void *v18;
  uint64_t v19;

  if (a5)
    ZinAssertImpl("NEConv does not support Espresso weight format");
  v13 = (char *)a1 + 808;
  v14 = operator new();
  __p = 0;
  v18 = 0;
  v19 = 0;
  ZinIrConvUnit::ZinIrConvUnit(v14, v13, &__p);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  ZinIrUnit::SetBottomInfo(v14, (uint64_t)a1 + 8);
  SubKernels = (*(uint64_t (**)(uint64_t, const ZinIrHalParameters *, ZinIrFileManager *, const ZinWeightFileInfo *, _QWORD, uint64_t, ZinIrUnitStatus *))(*(_QWORD *)v14 + 32))(v14, a2, a3, a4, 0, a6, a7);
  if (!(_DWORD)SubKernels)
    SubKernels = ZinIrNEUnit::CreateSubKernels(a1, a2, a3, a4, a7);
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return SubKernels;
}

void sub_206FF8024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrNEConvUnit::TensorDimensions(ZinIrNEConvUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, CFArrayRef *a4)
{
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  unsigned int v13[3];
  unsigned int v14[3];
  _OWORD v15[2];
  uint64_t v16;

  v4 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - v4 == 120)
  {
    v7 = *(_OWORD *)(v4 + 8);
    v8 = *(_OWORD *)(v4 + 24);
    v16 = *(_QWORD *)(v4 + 40);
    v15[0] = v7;
    v15[1] = v8;
    GetLogicalInputAndOutputSteps((uint64_t)this + 808, (uint64_t)v13);
    ZinGetOutputTensorDimension((uint64_t)v15, (_QWORD *)this + 133, v13, v14, (int *)this + 278, *((_QWORD *)this + 64), (int *)this + 272, (uint64_t)v11);
    result = 0;
    v10 = v11[1];
    *(_OWORD *)a3 = v11[0];
    *((_OWORD *)a3 + 1) = v10;
    *((_QWORD *)a3 + 4) = v12;
  }
  else
  {
    ZinIrUnitStatus::SetError(a4, CFSTR("InvalidBottomCount"));
    return 3;
  }
  return result;
}

void ZinIrNEConvUnit::CreateDummyKernel(uint64_t a1, uint64_t a2, ZinIrKernel **a3)
{
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;
  _BYTE v14[280];

  v5 = a1 + 808;
  ZinIrKernelCreationUtils::CreateKernelDescriptor(a1 + 808, a1 + 8, (uint64_t)v14);
  std::string::basic_string[abi:ne180100]<0>(&v10, "ne_conv_kernel");
  v6 = std::string::append(&v10, "_xfm", 4uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v11, "_dummy", 6uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v13 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  ZinIrKernelCreationUtils::CreateDummyKernel(v5, (uint64_t)v14, a2, a3, (uint64_t)__p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_206FF821C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinIrNEConvUnit::~ZinIrNEConvUnit(ZinIrNEConvUnit *this)
{
  ZinIrNEConvUnit::~ZinIrNEConvUnit(this);
  JUMPOUT(0x20BD002F8);
}

{
  void **v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_24C01AA20;
  *((_QWORD *)this + 55) = &unk_24C01EFA0;
  v2 = (void **)((char *)this + 808);
  *((_QWORD *)this + 101) = off_24C01ED88;
  v3 = (void *)*((_QWORD *)this + 120);
  if (v3)
  {
    *((_QWORD *)this + 121) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 117);
  if (v4)
  {
    *((_QWORD *)this + 118) = v4;
    operator delete(v4);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v2);
  *((_QWORD *)this + 55) = &unk_24C01AB80;
  if (*((_BYTE *)this + 792))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 85);
  if (*((_BYTE *)this + 672))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 65);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this + 55);
  ZinIrNEUnit::~ZinIrNEUnit(this);
}

void ZinIrNEConvUnit::ZinIrNEConvUnit(uint64_t a1, ZinIrNEConvUnit *this)
{
  if (*(_BYTE *)(a1 + 672))
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)(a1 + 520));
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)this);
}

uint64_t DimensionOrderHint::DimensionOrderHint(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = DimensionOrderHint::DimensionOrderHint(a1, a2);
  *(_DWORD *)(result + 24) = a3;
  return result;
}

uint64_t DimensionOrderHint::DimensionOrderHint(uint64_t a1, int a2, int a3)
{
  uint64_t result;

  result = DimensionOrderHint::DimensionOrderHint(a1, a2);
  *(_DWORD *)(result + 24) = a3;
  return result;
}

void DimensionOrderHint::TransposeDimensionOrder(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26[2];
  uint64_t *v27;
  _OWORD v28[2];
  int v29;
  void *__p;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38[4];

  v6 = *a1;
  v7 = (uint64_t)a1[1];
  v8 = v7 - (_QWORD)*a1;
  if ((const void *)v7 == *a1)
  {
    DimensionOrderHint::DimensionOrderHint(a3, (uint64_t)a1);
  }
  else
  {
    v23 = a3;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v35, v6, v7, v8 >> 2);
    TransposeLayerUtils::DecomposeThreePlusWayTranspose(a2, &v33);
    v9 = v33;
    for (i = v34; v9 != i; v9 += 24)
    {
      __p = 0;
      v31 = 0;
      v32 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&__p, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
      memset(v28, 0, sizeof(v28));
      v29 = 1065353216;
      v11 = v35;
      v12 = v36;
      if (v35 != (_DWORD *)v36)
      {
        v13 = 0;
        v14 = 0;
        do
        {
          v38[0] = 0;
          v38[0] = v11[v14];
          v26[0] = v38;
          std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v28, v38, (uint64_t)&std::piecewise_construct, v26)[3] = v14++;
          ++v13;
        }
        while (&v11[v13] != v12);
      }
      std::unordered_map<ZinIrDimension,unsigned long>::unordered_map((uint64_t)v26, (uint64_t)v28);
      v15 = (int *)__p;
      v16 = v31;
      while (v15 != v16)
      {
        v17 = *v15;
        v24 = v15[1];
        v25 = v17;
        *(_QWORD *)v38 = &v24;
        v18 = std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v28, &v24, (uint64_t)&std::piecewise_construct, (_DWORD **)v38)[3];
        *(_QWORD *)v38 = &v25;
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t)v26, &v25, (uint64_t)&std::piecewise_construct, (_DWORD **)v38)[3] = v18;
        v15 += 2;
      }
      v19 = v27;
      if (v27)
      {
        v20 = v35;
        v21 = (v36 - (_BYTE *)v35) >> 2;
        do
        {
          v22 = v19[3];
          if (v21 <= v22)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v20[v22] = *((_DWORD *)v19 + 4);
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v26);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v28);
      if (__p)
      {
        v31 = (int *)__p;
        operator delete(__p);
      }
    }
    DimensionOrderHint::DimensionOrderHint(v23, (uint64_t)&v35);
    *(_QWORD *)&v28[0] = &v33;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
  }
}

void sub_206FF85FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v28;

  a17 = &a26;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(_QWORD *)(v26 - 120) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

_DWORD *std::remove[abi:ne180100]<std::__wrap_iter<ZinIrDimension *>,ZinIrDimension>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *i;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

uint64_t DimensionOrderHint::DebugPrint@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD v5[3];
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v5[0] = *MEMORY[0x24BEDB7F0];
  v3 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v5[2] = v3;
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD0022C](&v8);
}

void sub_206FF8770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__find_impl[abi:ne180100]<std::vector<ZinIrDimension> const*,std::vector<ZinIrDimension> const*,std::vector<ZinIrDimension>,std::__identity>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *i;

  if (result != a2)
  {
    do
    {
      v4 = *(_DWORD **)result;
      v3 = *(_DWORD **)(result + 8);
      if ((_DWORD *)((char *)v3 - *(_QWORD *)result) == (_DWORD *)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3))
      {
        if (v4 == v3)
          return result;
        for (i = *(_DWORD **)a3; *v4 == *i; ++i)
        {
          if (++v4 == v3)
            return result;
        }
      }
      result += 24;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ZinIrDimension>>,std::vector<ZinIrDimension> const*,std::vector<ZinIrDimension> const*,std::vector<ZinIrDimension>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrDimension>>,std::vector<ZinIrDimension>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206FF8884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrDimension>>,std::vector<ZinIrDimension>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrDimension>>,std::vector<ZinIrDimension>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrOpLayer *>>,std::vector<ZinIrOpLayer *>*>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<DimensionOrderHint>::__construct_one_at_end[abi:ne180100]<DimensionOrderHint>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = v4 + 32;
  return result;
}

void sub_206FF8928(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<DimensionOrderHint>::__push_back_slow_path<DimensionOrderHint>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ControlEdgeInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  v15 += 32;
  std::vector<DimensionOrderHint>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<std::vector<ZinIrKernel *>,unsigned long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_206FF8A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<ZinIrKernel *>,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DimensionOrderHint>,std::reverse_iterator<DimensionOrderHint*>,std::reverse_iterator<DimensionOrderHint*>,std::reverse_iterator<DimensionOrderHint*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a3;
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v11 = *(const void **)(v10 - 32);
      v12 = *(_QWORD *)(v10 - 24);
      v10 -= 32;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)(v7 - 32), v11, v12, (v12 - (uint64_t)v11) >> 2);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      v7 = *((_QWORD *)&v18 + 1) - 32;
      *((_QWORD *)&v18 + 1) -= 32;
      v9 = v10;
    }
    while (v10 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DimensionOrderHint>,std::reverse_iterator<DimensionOrderHint*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_206FF8AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DimensionOrderHint>,std::reverse_iterator<DimensionOrderHint*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DimensionOrderHint>,std::reverse_iterator<DimensionOrderHint*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<ZinIrKernel *>,unsigned long>>,std::reverse_iterator<std::pair<std::vector<ZinIrKernel *>,unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<DimensionOrderHint>::__init_with_size[abi:ne180100]<DimensionOrderHint*,DimensionOrderHint*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ControlEdgeInfo>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DimensionOrderHint>,DimensionOrderHint*,DimensionOrderHint*,DimensionOrderHint*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206FF8B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<DimensionOrderHint>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DimensionOrderHint>,DimensionOrderHint*,DimensionOrderHint*,DimensionOrderHint*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DimensionOrderHint>,DimensionOrderHint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206FF8C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DimensionOrderHint>,DimensionOrderHint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void DimensionOrderHint::GetCompatibleDimOrders()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Dimension order should be set before quering for compatible orders\n", v0, 2u);
}

void sub_206FF8D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void l2a::alloc_buffer(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  char v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  _DWORD *v27;
  int v28;
  int v29;
  int pad;
  int v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  int *v36;
  void *__p;
  _DWORD *v38;
  char *v39;
  void *v40;
  _BYTE *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v40 = 0;
  v41 = 0;
  v42 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v40, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  __p = 0;
  v38 = 0;
  v39 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 2);
  v4 = __p;
  v5 = v38;
  if (__p != v38)
  {
    while (*v4 != 4)
    {
      if (++v4 == v38)
      {
        v4 = v38;
        break;
      }
    }
  }
  if (v4 != v38)
    v5 = --v38;
  v6 = 0;
  v7 = (int *)(a1 + 112);
  v43 = xmmword_207AB2570;
  v35 = (int *)(a1 + 104);
  v36 = (int *)(a1 + 108);
  v8 = (int *)(a1 + 100);
  do
  {
    v9 = __p;
    v10 = v5;
    if (__p != v5)
    {
      v10 = __p;
      while (*v10 != *((_DWORD *)&v43 + v6))
      {
        if (++v10 == v5)
        {
          v10 = v5;
          break;
        }
      }
    }
    if (v10 == v5)
    {
      v11 = *((_DWORD *)&v43 + v6);
      v12 = (_DWORD *)(a1 + 96);
      switch(v11)
      {
        case 0:
          v12 = (_DWORD *)(a1 + 100);
          goto LABEL_21;
        case 1:
          v12 = (_DWORD *)(a1 + 108);
          goto LABEL_21;
        case 2:
          v12 = (_DWORD *)(a1 + 104);
          goto LABEL_21;
        case 3:
          v12 = (_DWORD *)(a1 + 112);
          goto LABEL_21;
        case 4:
LABEL_21:
          if (*v12 == 1)
          {
            if (v5 >= (_DWORD *)v39)
            {
              v14 = ((char *)v5 - (_BYTE *)__p) >> 2;
              v15 = v14 + 1;
              if ((unint64_t)(v14 + 1) >> 62)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v16 = v39 - (_BYTE *)__p;
              if ((v39 - (_BYTE *)__p) >> 1 > v15)
                v15 = v16 >> 1;
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
                v17 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v17 = v15;
              if (v17)
              {
                v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v39, v17);
                v9 = __p;
                v5 = v38;
                v11 = *((_DWORD *)&v43 + v6);
              }
              else
              {
                v18 = 0;
              }
              v19 = &v18[4 * v14];
              *(_DWORD *)v19 = v11;
              v13 = v19 + 4;
              while (v5 != v9)
              {
                v20 = *--v5;
                *((_DWORD *)v19 - 1) = v20;
                v19 -= 4;
              }
              __p = v19;
              v38 = v13;
              v39 = &v18[4 * v17];
              if (v9)
                operator delete(v9);
            }
            else
            {
              *v5 = v11;
              v13 = v5 + 1;
            }
            v38 = v13;
            v5 = v13;
          }
          break;
        default:
          break;
      }
    }
    ++v6;
  }
  while (v6 != 4);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v21 = (*(_DWORD *)(a1 + 28) & 0xFFFFFFFE) == 2;
  v33 = 1 << v21;
  v34 = *(_DWORD *)(a1 + 96);
  v22 = v34 << v21;
  v24 = v22 + 15;
  v23 = v22 < -15;
  v25 = v22 + 30;
  if (!v23)
    v25 = v24;
  v26 = v25 >> 4;
  v27 = __p;
  if (v5 != __p)
  {
    do
    {
      v28 = *--v5;
      switch(v28)
      {
        case 0:
          v29 = *v8;
          if (*v8 >= 2)
          {
            pad = l2a::get_pad(a1 + 64);
            *(_DWORD *)(a2 + 4) = pad + v26;
            v26 = (pad + v26) * v29;
          }
          break;
        case 1:
          v31 = *v36;
          if (*v36 >= 2)
          {
            *(_DWORD *)(a2 + 12) = v26;
            goto LABEL_52;
          }
          break;
        case 2:
          v31 = *v35;
          if (*v35 >= 2)
          {
            *(_DWORD *)(a2 + 8) = v26;
LABEL_52:
            v26 *= v31;
          }
          break;
        case 3:
          if (*(_BYTE *)(a1 + 24) || *v7 >= 2)
          {
            v32 = l2a::get_pad(a1 + 32);
            *(_DWORD *)a2 = v32 + v26;
            v26 = *v7 * (v32 + v26);
          }
          break;
        default:
          break;
      }
    }
    while (v5 != v27);
  }
  *(_DWORD *)(a2 + 20) = v26;
  *(_DWORD *)(a2 + 24) = v33;
  *(_DWORD *)(a2 + 28) = v34;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v8;
  if (v27)
  {
    v38 = v27;
    operator delete(v27);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
}

void sub_206FF9140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void l2a::Sizes::~Sizes(l2a::Sizes *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 72);
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 40);
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

_DWORD *l2a::pe_modify_src(_DWORD *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t v10;
  int v11;

  if (a4 == 1)
    result[24] = 1;
  if (a5 == 1)
    result[25] = 1;
  if (a6 == 1)
    result[26] = 1;
  if (a7 == 1)
    result[28] = 1;
  if (a10 == 3)
  {
    v10 = 0x100000001;
LABEL_14:
    *((_QWORD *)result + 12) = v10;
    goto LABEL_15;
  }
  if (a2 == 4 && a10 == 2)
  {
    v10 = 0x200000001;
    goto LABEL_14;
  }
  if (a2 == 8 && a10 == 2)
  {
    *((_QWORD *)result + 12) = 0x100000001;
    result[26] = 1;
  }
LABEL_15:
  if (a8 == 1)
  {
    v11 = result[28];
    result[28] = result[24];
  }
  else
  {
    v11 = result[24];
  }
  result[24] = a9 % (int)(0x10u >> ((a3 & 0xFFFFFFFE) == 2)) + v11;
  return result;
}

uint64_t l2a::dma_logical_interleave(uint64_t this, int a2)
{
  BOOL v2;

  if (a2 >= 1)
  {
    do
    {
      this = this - (a2 & 1);
      v2 = a2 > 1;
      a2 = a2 >> 1;
    }
    while (v2);
  }
  return this;
}

void l2a::ne_alloc_nonresident_src(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14, int a15, char a16, _WORD a17, char a18, _WORD a19, char a20,int a21,uint64_t a22,int a23,unsigned int a24,l2a *a25,int a26,int a27,uint64_t a28,uint64_t a29,int a30,int a31)
{
  int v29;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  l2a *v35;
  double v36;
  int v37;
  int v38;
  signed int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  double v45;
  int v46;
  int v47;
  int v48;
  int v49;
  double v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  __int128 v60;
  int v61;
  int v62;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  void *__p;
  void *v75;
  uint64_t v76;
  __int128 v77;
  _QWORD v78[4];
  _QWORD v79[3];
  __int128 v80;
  int v81;
  void *v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE v85[36];
  int v86;
  _BYTE v87[28];
  int v88;
  _BYTE v89[20];
  void **v90[2];

  v29 = a7;
  v31 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
  if ((int)a29 <= 17)
    v29 = a7 % a10 + a7;
  v32 = a24;
  if (a26 == 1)
  {
    if (a27)
      v33 = 16;
    else
      v33 = 32;
  }
  else
  {
    if ((_DWORD)a25)
    {
      if ((_DWORD)a25 == 1)
      {
        v33 = 32;
      }
      else
      {
        if ((_DWORD)a25 == 2)
        {
          v33 = 16;
          goto LABEL_16;
        }
        v33 = 16 * ((_DWORD)a25 == 3);
      }
    }
    else
    {
      v33 = 64;
    }
    if (HIDWORD(a25) != 3)
      v33 /= SHIDWORD(a25);
  }
LABEL_16:
  v34 = a12;
  v35 = (l2a *)((16 * a10 * (int)v31 / (1 << (a20 + a16))) << a18);
  v36 = (double)v31;
  v37 = (int)(ceil((double)((int)a24 % (int)v31 + a1) / (double)v31) * (double)v31);
  if ((int)a29 > 17)
  {
    if (!a15)
    {
      if (v33 <= (int)v31)
        v39 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
      else
        v39 = v33;
      v40 = (int)a24 % v39;
      v73 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
      if (HIDWORD(a29))
      {
        v41 = a1;
        v42 = v33;
        printf("x=%d w=%d px=%d kw=%d sx=%d l2g=%d dmag=%d compressed=%d win=%d\n", v40, (_DWORD)v35, a12, v29, a10, v31, v33, a26, a1);
        v34 = a12;
        v33 = v42;
        a1 = v41;
        v31 = v73;
      }
      v43 = 0;
      v44 = 0;
      v37 = 0;
      v72 = v29 - (v34 + a10) + v40;
      v45 = (double)v33;
      v46 = v40 + a1;
      v70 = v34 + a10 - v29 - v40;
      v71 = v40 - v34;
      do
      {
        v47 = ((v70 + v44) / (int)v35) & ~(((v70 + v44) / (int)v35) >> 31);
        v48 = v72 + (_DWORD)v35 + v47 * (_DWORD)v35;
        v32 = l2a::dma_push_round((l2a *)(int)(ceil((double)(v48 - v44) / v45) * v45), v31, a26);
        v44 += v32;
        if (v46 >= v44)
          v49 = v44;
        else
          v49 = v46;
        v50 = (double)v49;
        v51 = v47 * (_DWORD)v35 + v71;
        v52 = (int)(ceil(v50 / v36) * v36);
        if (v40 <= v51)
          v53 = v47 * (_DWORD)v35 + v71;
        else
          v53 = v40;
        v54 = v52 - (int)(floor((double)v53 / v36) * v36);
        if (v37 <= v54)
          v37 = v54;
        if (HIDWORD(a29))
          v32 = printf("%d: n=%d right=%d fetch=%d left=%d nr_width = %d fetched = %d max_nr_width = %d\n", v43, v47, v48, v32, v51, v54, v44, v37);
        if (v48 >= v46)
          break;
        v58 = v43++ == 2;
        v31 = v73;
      }
      while (!v58);
    }
  }
  else
  {
    if ((int)a29 > 15)
      v32 = l2a::dma_projection_v2((l2a *)a24, (int)v35, a12, v29, a10, v31, v33, a26, SHIDWORD(a29), v62);
    else
      v32 = l2a::dma_projection_v1(v35, a12, v29, v31, v33, a6, v33, a8, v61);
    v55 = v38 + v37 - (HIDWORD(v32) + v32);
    if (v55 <= (int)v32)
      v55 = v32;
    if ((int)v32 <= v38)
      v56 = v38;
    else
      v56 = v32;
    if (HIDWORD(v32) + (int)v32 < v37)
      v57 = v56;
    else
      v57 = v55;
    if ((int)v32 >= v37)
      v57 = v37;
    v58 = (int)a29 <= 13 || a15 == 0;
    if (v58)
      v59 = v57;
    else
      v59 = v37;
    if (HIDWORD(a29))
      v32 = printf("ne_alloc_nonresident_src() first_fetch=%0d inner_fetch=%0d nr_width=%0d res_width=%0d nr_width=%0d\n", v32, HIDWORD(v32), v38, v37, v59);
    v37 = v59;
  }
  l2a::GetHGDCW((l2a *)v32);
  v82 = 0;
  v83 = 0;
  v84 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v82, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_25451ECF8, (unk_25451ECF8 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v85[0] = 0;
  v85[8] = 1;
  memset(&v85[12], 0, 24);
  v86 = 0;
  v87[0] = 1;
  memset(&v87[4], 0, 24);
  *(_QWORD *)&v60 = 0x100000001;
  *((_QWORD *)&v60 + 1) = 0x100000001;
  *(_OWORD *)&v89[4] = v60;
  *(_DWORD *)&v85[4] = a6;
  v88 = 0;
  *(_DWORD *)v89 = v37;
  *(_DWORD *)&v89[4] = l2a::src_slice_height(0, a2, a5, a8, a11, a13, a14, a21, a22, SHIDWORD(a22), a23, 0, a29);
  *(_DWORD *)&v89[8] = a3;
  *(_DWORD *)&v89[12] = 1;
  *(_DWORD *)&v89[16] = a4;
  if (&v82 != (void **)a28)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v82, *(char **)a28, *(_QWORD *)(a28 + 8), (uint64_t)(*(_QWORD *)(a28 + 8) - *(_QWORD *)a28) >> 2);
  v85[0] = 1;
  v75 = 0;
  v76 = 0;
  __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v82, (uint64_t)v83, (v83 - (_BYTE *)v82) >> 2);
  v77 = *(_OWORD *)v85;
  memset(v78, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v78, *(uint64_t *)&v85[16], *(uint64_t *)&v85[24], (uint64_t)(*(_QWORD *)&v85[24] - *(_QWORD *)&v85[16]) >> 5);
  v78[3] = *(_QWORD *)v87;
  memset(v79, 0, sizeof(v79));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v79, *(uint64_t *)&v87[8], *(uint64_t *)&v87[16], (uint64_t)(*(_QWORD *)&v87[16] - *(_QWORD *)&v87[8]) >> 5);
  v80 = *(_OWORD *)v89;
  v81 = *(_DWORD *)&v89[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v90[0] = (void **)v79;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v90);
  v90[0] = (void **)v78;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v90);
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
  v90[0] = (void **)&v87[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v90);
  v90[0] = (void **)&v85[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v90);
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
}

void sub_206FF982C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;

  l2a::Sizes::~Sizes((l2a::Sizes *)&__p);
  l2a::Sizes::~Sizes((l2a::Sizes *)(v32 - 232));
  _Unwind_Resume(a1);
}

unint64_t l2a::dma_projection_v1(l2a *this, int a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;

  v9 = (int)(ceil((double)(~a2 + a3 + (int)this) / (double)a5) * (double)a5);
  if (v9)
  {
    v10 = a4;
    if (v9 > (int)a4)
    {
      v10 = 2 * a4;
      if (2 * (int)a4 < v9)
        v10 = (int)(ceil((double)v9 / (double)(4 * (int)a4)) * (double)(4 * (int)a4));
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = (int)(ceil((double)(int)this / (double)a5) * (double)a5);
  if (v11)
  {
    v12 = a4;
    if (v11 > (int)a4)
    {
      v12 = (2 * a4);
      if ((int)v12 < v11)
        v12 = (int)(ceil((double)v11 / (double)(4 * (int)a4)) * (double)(4 * (int)a4));
    }
  }
  else
  {
    v12 = 0;
  }
  return v10 | (unint64_t)(v12 << 32);
}

unint64_t l2a::dma_projection_v2(l2a *this, int a2, int a3, int a4, int a5, uint64_t a6, int a7, int a8, int a9, int a10)
{
  int v15;
  int v16;
  int v17;
  int v18;
  double v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v27;

  if (a7 <= (int)a6)
    v15 = a6;
  else
    v15 = a7;
  v16 = (int)this % v15;
  v17 = a5 + a3;
  v18 = (int)this % v15 + a4;
  v19 = (double)a7;
  v20 = l2a::dma_push_round((l2a *)(int)(ceil((double)(v18 + a2 - (a5 + a3)) / (double)a7) * (double)a7), a6, a8);
  v27 = (int)(floor((double)v16 / (double)(int)a6) * (double)(int)a6);
  v21 = (v17 - v18 + v20) / a2;
  v22 = (int)(floor((double)(v16 - a3 + v21 * a2) / (double)(int)a6) * (double)(int)a6);
  v23 = l2a::dma_push_round((l2a *)(int)(ceil((double)a2 / v19) * v19), a6, a8);
  if (a9)
  {
    printf("dma_projection_v2() x=%0d w=%0d px=%0d kw=%0d sx=%0d l2g=%0d dmag=%0d comp=%0d\n", v16, a2, a3, a4, a5, a6, a7, a8);
    printf("dma_projection_v2() fetch1=%0d fetch2=%0d left1=%0d n=%0d left2=%0d\n", v20, v23, v27, v21, v22);
  }
  return (v20 - v27) | (unint64_t)(v23 << 32);
}

uint64_t l2a::src_slice_height(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13)
{
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v30[2];
  int v31[7];

  if (a1 || a13 > 17)
  {
    if (a4 <= a5)
      v17 = a5;
    else
      v17 = a4;
  }
  else
  {
    v17 = a4 % a5 + a4;
  }
  v31[0] = a3;
  v31[1] = a8;
  v18 = v17 + (a8 - 1) * a5;
  v31[2] = a9;
  v31[3] = a10;
  v31[4] = a11;
  v31[5] = a12;
  v31[6] = -a10;
  if (v18 < 1)
    return 0;
  v19 = 0;
  v20 = v17 - a6;
  do
  {
    if (!l2a::SliceGen::next(v31, v30))
      break;
    v21 = v30[0] * a5 - a6;
    v22 = v20 + (v30[1] - 1) * a5;
    if (a7)
    {
      v23 = v22 - a2;
      v24 = ~(v23 & ~(v23 >> 31)) + a2;
      if (v24 >= v21)
        v24 = v30[0] * a5 - a6;
      if (v23 >= 1)
        v25 = v24;
      else
        v25 = v30[0] * a5 - a6;
      if (v21 < 0)
      {
        v26 = 1 - v21;
        if (v22 <= v26)
          v22 = v26;
      }
    }
    else
    {
      v25 = v30[0] * a5 - a6;
    }
    v27 = v25 & ~(v25 >> 31);
    if (v22 >= a2)
      v22 = a2;
    v28 = v22 - v27;
    v19 = v28 <= (int)v19 ? v19 : v28;
  }
  while ((int)v19 < v18);
  return v19;
}

uint64_t l2a::ne_alloc_fifo_src@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14, int a15, int a16, char a17, _WORD a18, char a19, _WORD a20,char a21,int a22,int a23,int a24,int a25,l2a *a26,int a27,int a28,int a29,int a30)
{
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  signed int v37;
  signed int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  double v43;
  int v44;
  BOOL v45;
  uint64_t result;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v57;

  v31 = HIDWORD(a26);
  v32 = a27;
  v33 = a22;
  v34 = a14;
  v35 = a12;
  v36 = a10;
  v37 = 0x10u >> ((a7 & 0xFFFFFFFE) == 2);
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  v38 = (16 * v37) >> (a21 + a17) << a19;
  *(_OWORD *)a9 = 0u;
  v57 = a7 & 0xFFFFFFFE;
  if (a16 || v38 >= a5)
  {
    v43 = ceil((double)((int)a26 % v37 + a1) / (double)v37) * (double)v37;
    v54 = (int)v43;
    if (a30)
    {
      v44 = a2;
      printf("ne_alloc_fifo_src() single_tile unretained_width=%0d l2_retain=%0d\n", (int)v43, 0);
      v35 = a12;
      a2 = v44;
      v33 = a22;
      v34 = a14;
      v36 = a10;
    }
    v42 = 0;
  }
  else
  {
    v39 = a2;
    if (a29 <= 17)
      a8 += a8 % a11;
    v40 = v38 * a11;
    v41 = l2a::calc_l2_retain((l2a *)a26, v38 * a11, a13, a8, a11, v37, a1, a5, a15, a30, v53);
    v42 = v41;
    if (a30)
      printf("ne_alloc_fifo_src() multi_tile unretained_width=%0d l2_retain=%0d\n", v40, v41);
    v54 = v40;
    a2 = v39;
    v34 = a14;
    v33 = a22;
    v35 = a12;
    v36 = a10;
  }
  if (a27 >= 1)
  {
    do
    {
      v31 -= v32 & 1;
      v45 = v32 > 1;
      v32 >>= 1;
    }
    while (v45);
  }
  result = l2a::src_slice_height(0, a2, a6, v36, v35, v34, a15, v33, a23, a24, a25, 0, a29);
  v47 = result;
  v48 = 2 * v31;
  v49 = (int)(ceil((double)(a28 + a4) / (double)v48) * (double)v48);
  *(_DWORD *)(a9 + 16) = v42 / v37;
  if (v49 >= 0)
    v50 = v49;
  else
    v50 = v49 + 1;
  v51 = (v54 + v42 * a3 * ((v50 >> 1) / v31)) / v37;
  *(_DWORD *)(a9 + 4) = v51;
  if (v31 > 1)
    *(_DWORD *)a9 = v51 * result;
  v52 = vcvtd_n_s64_f64(ceil((double)(v48 * (int)result * v51) * 0.015625), 6uLL);
  *(_DWORD *)(a9 + 20) = v52;
  if (a30)
    result = printf("ne_alloc_fifo_src() tile_width=%0d log_ileave=%0d height=%0d cin_pad=%0d row=%0d size=%0d\n", (16 * v37) >> (a21 + a17) << a19, v31, result, v49, v51, v52);
  *(_DWORD *)(a9 + 24) = 1 << (v57 == 2);
  *(_DWORD *)(a9 + 28) = v54 + v42;
  *(_DWORD *)(a9 + 32) = v47;
  return result;
}

uint64_t l2a::calc_l2_retain(l2a *this, int a2, int a3, int a4, int a5, unsigned int a6, int a7, int a8, int a9, int a10, int a11)
{
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;

  v17 = (int)this;
  if (a10)
    printf("x=%d w=%d px=%d kw=%d sx=%d l2g=%d win=%d wout=%d reflectPadding=%d\n", (_DWORD)this, a2, a3, a4, a5, a6, a7, a8, a9);
  v18 = (((v17 + a4 - (a3 + a5) + a6 + 31) & -a6) - ((v17 - a3 + 32) & -a6)) / a6;
  if (a9)
  {
    if (a7 >= 2)
    {
      v20 = 2 * a7 - 2;
      v21 = (~a3 + a4 + (a8 - 1) * a5) % v20;
      v19 = (v20 & (v21 >> 31)) + v21;
      v22 = v20 - v19;
      if (v19 >= a7)
        v19 = v22;
    }
    else
    {
      v19 = 0;
    }
    v23 = (v17 + a7 - 1) / a6 - (v19 + v17) / a6;
    if (v18 <= v23 + 1)
      v18 = v23 + 1;
  }
  return v18 * a6;
}

void l2a::ne_alloc_nonresident_dst(uint64_t a1@<X0>, l2a *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, char a12, _WORD a13, char a14, _WORD a15, char a16, int a17, int a18, unsigned int a19, l2a *a20,int a21,int a22,uint64_t a23,uint64_t a24,int a25,int a26)
{
  int v26;
  uint64_t v29;
  int v30;
  double v31;
  int v32;
  int v33;
  int v34;
  __int128 v35;
  int v36;
  void *__p;
  void *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD v42[4];
  _QWORD v43[3];
  __int128 v44;
  int v45;
  void *v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE v49[36];
  int v50;
  _BYTE v51[28];
  int v52;
  _BYTE v53[20];
  void **v54[2];

  v26 = a4;
  v29 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
  v30 = a7 * a1;
  v31 = (double)v29;
  if (a18 == 1)
  {
    v32 = (int)(ceil((double)a4 / v31) * v31);
    v26 = a7 * a1;
    goto LABEL_21;
  }
  if (a11 && (int)a24 > 13)
  {
    v32 = (int)(ceil((double)v30 / v31) * v31);
    goto LABEL_21;
  }
  if (a21 == 1)
  {
    if (a22)
      v33 = 16;
    else
      v33 = 32;
    goto LABEL_20;
  }
  if (!(_DWORD)a20)
  {
    v34 = 64;
    goto LABEL_17;
  }
  if ((_DWORD)a20 == 1)
  {
    v34 = 32;
    goto LABEL_17;
  }
  if ((_DWORD)a20 != 2)
  {
    v34 = 16 * ((_DWORD)a20 == 3);
LABEL_17:
    if (HIDWORD(a20) == 3)
      v33 = v34;
    else
      v33 = v34 / SHIDWORD(a20);
    goto LABEL_20;
  }
  v33 = 16;
LABEL_20:
  a1 = l2a::calc_nr_width_dst((l2a *)a19, ((int)(16 * a7 * (0x10u >> ((a5 & 0xFFFFFFFE) == 2))) / (1 << (a16 + a12))) << a14, v29, v33, a21, v30, a24, SHIDWORD(a24), v36);
  v32 = a1;
LABEL_21:
  l2a::GetHGDCW((l2a *)a1);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v46, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_25451ECF8, (unk_25451ECF8 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v49[0] = 0;
  v49[8] = 1;
  memset(&v49[12], 0, 24);
  v50 = 0;
  v51[0] = 1;
  memset(&v51[4], 0, 24);
  *(_QWORD *)&v35 = 0x100000001;
  *((_QWORD *)&v35 + 1) = 0x100000001;
  *(_OWORD *)&v53[4] = v35;
  *(_DWORD *)&v49[4] = a6;
  v52 = 0;
  *(_DWORD *)v53 = v32;
  *(_DWORD *)&v53[4] = l2a::dst_slice_height(a2, a8, a17, 0, 0, 0, 0);
  *(_DWORD *)&v53[8] = a10 * a3;
  *(_DWORD *)&v53[12] = 1;
  *(_DWORD *)&v53[16] = v26;
  if (&v46 != (void **)a23)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v46, *(char **)a23, *(_QWORD *)(a23 + 8), (uint64_t)(*(_QWORD *)(a23 + 8) - *(_QWORD *)a23) >> 2);
  v49[0] = 1;
  v39 = 0;
  v40 = 0;
  __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v46, (uint64_t)v47, (v47 - (_BYTE *)v46) >> 2);
  v41 = *(_OWORD *)v49;
  memset(v42, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v42, *(uint64_t *)&v49[16], *(uint64_t *)&v49[24], (uint64_t)(*(_QWORD *)&v49[24] - *(_QWORD *)&v49[16]) >> 5);
  v42[3] = *(_QWORD *)v51;
  memset(v43, 0, sizeof(v43));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v43, *(uint64_t *)&v51[8], *(uint64_t *)&v51[16], (uint64_t)(*(_QWORD *)&v51[16] - *(_QWORD *)&v51[8]) >> 5);
  v44 = *(_OWORD *)v53;
  v45 = *(_DWORD *)&v53[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v54[0] = (void **)v43;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v54);
  v54[0] = (void **)v42;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v54);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  v54[0] = (void **)&v51[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v54);
  v54[0] = (void **)&v49[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v54);
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
}

void sub_206FFA3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  l2a::Sizes::~Sizes((l2a::Sizes *)&__p);
  l2a::Sizes::~Sizes((l2a::Sizes *)&a26);
  _Unwind_Resume(a1);
}

uint64_t l2a::calc_nr_width_dst(l2a *this, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  double v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char v28;
  int v30;
  uint64_t v31;
  int v32;
  int v33;

  v15 = (int)this % a4;
  if (a8)
    printf("x=%d w=%d l2g=%d dmagran=%d compressionEn=%d wout=%d arch_ver=%d\n", (_DWORD)this, a2, a3, a4, a5, a6, a7);
  v16 = v15 + a6;
  if (v15 + a6 < 1)
    return 0;
  v32 = a5;
  v33 = a7;
  v17 = 0;
  v18 = 0;
  LODWORD(v19) = 0;
  v20 = (double)a4;
  v31 = a3;
  v30 = (int)(ceil((double)a6 / (double)(int)a3) * (double)(int)a3);
  v21 = 1;
  do
  {
    v22 = ((v18 - v15) & ~((v18 - v15) >> 31)) / a2;
    v23 = v22 * a2;
    if (v16 >= a2 + v15 + v22 * a2)
      v24 = a2 + v15 + v22 * a2;
    else
      v24 = v16;
    v25 = l2a::dma_push_round((l2a *)(int)(ceil((double)(v24 - v18) / v20) * v20), v31, v32);
    v18 += v25;
    v26 = (int)(ceil((double)(v18 - v15) / (double)a2) * (double)a2);
    v27 = v30;
    if (v30 >= v26)
      v27 = v26;
    if (v33 > 13)
      v26 = v27;
    if ((int)v19 <= v26 - v23)
      v19 = (v26 - v23);
    else
      v19 = v19;
    if (a8)
      printf("i=%d n=%d right_tile=%d width_dma=%d left_l2=%d right_l2=%d nr_width=%d\n", v17, v22, v24, v25, v22 * a2, v26, v26 - v23);
    v28 = (v18 < v16) & v21;
    v17 = 1;
    v21 = 0;
  }
  while ((v28 & 1) != 0);
  return v19;
}

uint64_t l2a::dst_slice_height(l2a *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v9;
  int v11;
  int v12;
  int v13[7];

  v13[0] = (int)this;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = -a5;
  if (a3 < 1)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      if (!l2a::SliceGen::next(v13, &v11))
        break;
      if (v12 - v11 > v9)
        v9 = v12 - v11;
    }
    while (v9 < a3);
  }
  return (v9 * a2);
}

uint64_t l2a::ne_alloc_fifo_dst@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, char a10, int a11, char a12, int a13, int a14, int a15)
{
  char v15;
  int v16;
  unsigned int v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  BOOL v23;
  char v25;
  int v26;

  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)a9 = 0u;
  v15 = a8 + a7 + a10 + a12;
  v16 = result & 0xFFFFFFFE;
  v17 = a2 & 0xFFFFFFFE;
  v18 = (a2 & 0xFFFFFFFE) == 2;
  if (a13 == 1)
  {
    v19 = 1 << v18 << v15;
    if (v19 <= 16)
      v19 = 16;
    if (a11)
      v20 = 128;
    else
      v20 = 0x100u >> ((result & 0xFFFFFFFE) == 2);
    if (a5 == 1)
      v20 = 64;
    v21 = 2 * a3 * a4 * v19 * v20;
    if (((a3 * a4 * v19 * v20) & 0x40000000) != 0)
      v21 += 15;
    *(_DWORD *)(a9 + 20) = v21 >> 4;
    if (a15)
      return printf("stride=%d comp_per_chan=%d\n");
    return result;
  }
  if (!a5)
  {
    if (v16 != 2 || v17 == 2)
    {
      if (v16 != 2 && v17 == 2)
        v25 = 9;
      else
        v25 = 8;
      v22 = a3 << v25;
    }
    else
    {
      v22 = a3 << 7;
      if (a14 < 16)
        v22 = 256;
    }
    v23 = v22 == 128 && a8 == 0;
    goto LABEL_38;
  }
  if (a5 == 1)
  {
    if (a6 <= 2 && a14 > 13)
    {
      v22 = a3 << 6 << v18;
      goto LABEL_40;
    }
    v23 = v17 == 2 && a3 == 2;
    v22 = 128;
LABEL_38:
    if (v23)
      v22 = 256;
    goto LABEL_40;
  }
  v22 = a3 << 9;
LABEL_40:
  if (a11)
    v26 = 2;
  else
    v26 = 1;
  *(_DWORD *)(a9 + 20) = ((2 * a4 * v22) << v15) / v26 / 16;
  if (a15)
    return printf("cstride=%d oy=%d total_ocg=%d\n");
  return result;
}

void l2a::pe_alloc_nonresident_src(l2a *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, char a14, int a15, int a16, int a17, int a18, int a19, int a20,int a21,unsigned int a22,int a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,uint64_t a32,int a33,int a34)
{
  int v34;
  __int128 v35;
  void *__p;
  void *v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[4];
  _QWORD v49[3];
  __int128 v50;
  int v51;
  void *v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE v55[36];
  int v56;
  _BYTE v57[28];
  int v58;
  _BYTE v59[20];
  void **v60[2];

  v34 = (int)a1;
  l2a::GetHGDCW(a1);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v52, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_25451ECF8, (unk_25451ECF8 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v55[0] = 0;
  v55[8] = 1;
  memset(&v55[12], 0, 24);
  v56 = 0;
  v57[0] = 1;
  memset(&v57[4], 0, 24);
  *(_QWORD *)&v35 = 0x100000001;
  *((_QWORD *)&v35 + 1) = 0x100000001;
  *(_OWORD *)&v59[4] = v35;
  *(_DWORD *)&v55[4] = a20;
  v58 = 0;
  *(_DWORD *)v59 = a2;
  *(_DWORD *)&v59[4] = l2a::src_slice_height(v34, a3, a6, a8, a11, a13, 0, a15, a16, a17, a18, a19, a33);
  *(_DWORD *)&v59[8] = a4;
  *(_DWORD *)&v59[16] = a5;
  *(_DWORD *)&v59[12] = 1;
  if (&v52 != (void **)a32)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v52, *(char **)a32, *(_QWORD *)(a32 + 8), (uint64_t)(*(_QWORD *)(a32 + 8) - *(_QWORD *)a32) >> 2);
  v55[0] = 1;
  if (a33 <= 14)
    l2a::reduce_pe_src_width((uint64_t)&v52, a7, a10, a12, a14, a20, (l2a *)a22, a27, a28, a29, a30, a33, a34);
  l2a::pe_modify_src(&v52, v34, a20, a23, a24, a25, a26, a21, a22, a31);
  if (!a21 && a33 >= 15 && (a17 + a6 + a18 <= a15 || a24 != 1 && (a31 != 2 || v34 != 4 && v34 != 8)))
    l2a::reduce_pe_src_width((uint64_t)&v52, a7, a10, a12, a14, a20, (l2a *)a22, a27, a28, a29, a30, a33, a34);
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v52, (uint64_t)v53, (v53 - (_BYTE *)v52) >> 2);
  v47 = *(_OWORD *)v55;
  memset(v48, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v48, *(uint64_t *)&v55[16], *(uint64_t *)&v55[24], (uint64_t)(*(_QWORD *)&v55[24] - *(_QWORD *)&v55[16]) >> 5);
  v48[3] = *(_QWORD *)v57;
  memset(v49, 0, sizeof(v49));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v49, *(uint64_t *)&v57[8], *(uint64_t *)&v57[16], (uint64_t)(*(_QWORD *)&v57[16] - *(_QWORD *)&v57[8]) >> 5);
  v50 = *(_OWORD *)v59;
  v51 = *(_DWORD *)&v59[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v60[0] = (void **)v49;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v60);
  v60[0] = (void **)v48;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v60);
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  v60[0] = (void **)&v57[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v60);
  v60[0] = (void **)&v55[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v60);
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
}

void sub_206FFAB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  l2a::Sizes::~Sizes((l2a::Sizes *)&__p);
  l2a::Sizes::~Sizes((l2a::Sizes *)&a36);
  _Unwind_Resume(a1);
}

unint64_t l2a::reduce_pe_src_width(uint64_t a1, int a2, int a3, int a4, char a5, int a6, l2a *this, int a8, int a9, int a10, int a11, int a12, int a13)
{
  int v14;
  char v15;
  unsigned int v16;
  unint64_t result;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  if (a10 == 1)
  {
    if (a11)
      v14 = 16;
    else
      v14 = 32;
    goto LABEL_14;
  }
  if (a8)
  {
    if (a8 == 1)
    {
      v14 = 32;
    }
    else
    {
      if (a8 == 2)
      {
        v14 = 16;
        goto LABEL_14;
      }
      v14 = 16 * (a8 == 3);
    }
  }
  else
  {
    v14 = 64;
  }
  if (a9 != 3)
    v14 /= a9;
LABEL_14:
  v15 = (a6 & 0xFFFFFFFE) == 2;
  v16 = 0x10u >> v15;
  if (a12 > 15)
    result = l2a::dma_projection_v2(this, a3 << a5, a4, a2, a3, 0x10u >> v15, v14, a10, a13, v24);
  else
    result = l2a::dma_projection_v1((l2a *)(a3 << a5), a4, a2, 0x10u >> v15, v14, a6, (int)this, a10, v23);
  v19 = (int)(ceil((double)*(int *)(a1 + 96) / (double)v16) * (double)v16);
  v20 = v18 - (HIDWORD(result) + result) + v19;
  if (v20 <= (int)result)
    v20 = result;
  if ((int)result <= v18)
    v21 = v18;
  else
    v21 = result;
  if (HIDWORD(result) + (int)result < v19)
    v22 = v21;
  else
    v22 = v20;
  if ((int)result < v19)
    v19 = v22;
  *(_DWORD *)(a1 + 96) = v19;
  return result;
}

void l2a::pe_alloc_fifo_src(l2a *a1@<X0>, int a2@<W1>, int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14, char a15, int a16, int a17, int a18, int a19, int a20,int a21,int a22,unsigned int a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,int a32,int a33)
{
  __int128 v36;
  int v37;
  unsigned int v38;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v53;
  int v55;
  void *__p;
  void *v58;
  uint64_t v59;
  char v60;
  int v61;
  char v62;
  _QWORD v63[3];
  int v64;
  char v65;
  _QWORD v66[3];
  int v67;
  int v68;
  __int128 v69;
  void **v70[2];

  v53 = (int)a1;
  l2a::GetHGDCW(a1);
  __p = 0;
  v58 = 0;
  v59 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_25451ECF8, (unk_25451ECF8 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v60 = 0;
  v62 = 1;
  memset(v63, 0, sizeof(v63));
  v64 = 0;
  v65 = 1;
  memset(v66, 0, sizeof(v66));
  *(_QWORD *)&v36 = 0x100000001;
  *((_QWORD *)&v36 + 1) = 0x100000001;
  v69 = v36;
  v61 = a21;
  v67 = 0;
  v68 = a2;
  v37 = a3;
  v55 = a7;
  v38 = l2a::src_slice_height(v53, v37, a7, a10, a12, a14, 0, a16, a17, a18, a19, a20, a32);
  v40 = a29;
  *(_QWORD *)&v69 = __PAIR64__(a4, v38);
  DWORD2(v69) = 1;
  HIDWORD(v69) = a5;
  v60 = 1;
  l2a::pe_modify_src(&__p, v53, a21, a24, a25, a26, a27, a22, a23, a31);
  v41 = 0x10u >> ((a21 & 0xFFFFFFFE) == 2);
  if (a22 || 1 << a15 >= a6 || a18 + v55 + a19 > a16 && (a25 == 1 || a31 == 2 && (v53 == 4 || v53 == 8)))
  {
    v42 = 0;
    v43 = (int)(ceil((double)v68 / (double)v41) * (double)v41);
  }
  else
  {
    v43 = a11 << a15;
    v42 = l2a::calc_l2_retain((l2a *)a23, a11 << a15, a13, a8, a11, v41, a2, a6, 0, a33, v49);
  }
  *(_OWORD *)(a9 + 16) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)a9 = 0u;
  if (a29 >= 1)
  {
    do
    {
      a28 -= v40 & 1;
      v44 = v40 > 1;
      v40 >>= 1;
    }
    while (v44);
  }
  v45 = 2 * a28;
  v46 = (int)(ceil((double)(HIDWORD(v69) + a30) / (double)v45) * (double)v45);
  v47 = v69;
  *(_DWORD *)(a9 + 16) = v42 / (int)v41;
  v48 = (int)(v43 + v42 * a4 * (v46 / 2 / a28)) / (int)(0x10u >> ((a21 & 0xFFFFFFFE) == 2));
  *(_DWORD *)(a9 + 4) = v48;
  if (a28 > 1)
    *(_DWORD *)a9 = v48 * v47;
  *(_DWORD *)(a9 + 20) = vcvtd_n_s64_f64(ceil((double)(v45 * v47 * v48) * 0.015625), 6uLL);
  *(_DWORD *)(a9 + 24) = 1 << ((a21 & 0xFFFFFFFE) == 2);
  *(_DWORD *)(a9 + 28) = v43 + v42;
  *(_DWORD *)(a9 + 32) = v47;
  v70[0] = (void **)((char *)v66 + 4);
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v70);
  v70[0] = (void **)((char *)v63 + 4);
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v70);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
}

void sub_206FFB034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  l2a::Sizes::~Sizes((l2a::Sizes *)va);
  _Unwind_Resume(a1);
}

void l2a::pe_alloc_nonresident_dst(l2a *a1@<X0>, int a2@<W1>, l2a *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, unsigned int a11, l2a *a12, int a13, int a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v25;
  __int128 v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  void *__p;
  void *v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[4];
  _QWORD v39[3];
  __int128 v40;
  int v41;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE v45[36];
  int v46;
  _BYTE v47[28];
  int v48;
  _BYTE v49[20];
  void **v50[2];

  v25 = (int)a1;
  l2a::GetHGDCW(a1);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v42, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_25451ECF8, (unk_25451ECF8 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v45[0] = 0;
  v45[8] = 1;
  memset(&v45[12], 0, 24);
  v46 = 0;
  v47[0] = 1;
  memset(&v47[4], 0, 24);
  *(_QWORD *)&v26 = 0x100000001;
  *((_QWORD *)&v26 + 1) = 0x100000001;
  *(_OWORD *)&v49[4] = v26;
  *(_DWORD *)&v45[4] = a6;
  v48 = 0;
  *(_DWORD *)v49 = a2;
  *(_DWORD *)&v49[4] = l2a::dst_slice_height(a3, 1, a8, 0, 0, 0, 0);
  *(_DWORD *)&v49[8] = a4;
  *(_DWORD *)&v49[12] = 1;
  *(_DWORD *)&v49[16] = a5;
  if (&v42 != (void **)a15)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v42, *(char **)a15, *(_QWORD *)(a15 + 8), (uint64_t)(*(_QWORD *)(a15 + 8) - *(_QWORD *)a15) >> 2);
  v27 = 1;
  v45[0] = 1;
  if ((v25 - 5) >= 2)
  {
    v27 = *(_DWORD *)v49;
  }
  else
  {
    *(_QWORD *)v49 = 0x100000001;
    *(_DWORD *)&v49[8] = 1;
  }
  if (a10 == 1)
  {
    v28 = *(_DWORD *)&v49[16];
    *(_DWORD *)v49 = *(_DWORD *)&v49[16];
    *(_DWORD *)&v49[16] = v27;
    v27 = v28;
  }
  v29 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
  v30 = (int)(ceil((double)v27 / (double)v29) * (double)v29);
  if ((v25 - 5) >= 2 && !a10)
  {
    if (a13 == 1)
    {
      if (a14)
        v31 = 16;
      else
        v31 = 32;
      goto LABEL_23;
    }
    if ((_DWORD)a12)
    {
      if ((_DWORD)a12 == 1)
      {
        v31 = 32;
      }
      else
      {
        if ((_DWORD)a12 == 2)
        {
          v31 = 16;
LABEL_23:
          v30 = l2a::calc_nr_width_dst((l2a *)a11, 1 << a7, v29, v31, a13, v27, a16, SHIDWORD(a16), v32);
          goto LABEL_24;
        }
        v31 = 16 * ((_DWORD)a12 == 3);
      }
    }
    else
    {
      v31 = 64;
    }
    if (HIDWORD(a12) != 3)
      v31 /= SHIDWORD(a12);
    goto LABEL_23;
  }
LABEL_24:
  *(_DWORD *)v49 = v30;
  v35 = 0;
  v36 = 0;
  __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v42, (uint64_t)v43, (v43 - (_BYTE *)v42) >> 2);
  v37 = *(_OWORD *)v45;
  memset(v38, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v38, *(uint64_t *)&v45[16], *(uint64_t *)&v45[24], (uint64_t)(*(_QWORD *)&v45[24] - *(_QWORD *)&v45[16]) >> 5);
  v38[3] = *(_QWORD *)v47;
  memset(v39, 0, sizeof(v39));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v39, *(uint64_t *)&v47[8], *(uint64_t *)&v47[16], (uint64_t)(*(_QWORD *)&v47[16] - *(_QWORD *)&v47[8]) >> 5);
  v40 = *(_OWORD *)v49;
  v41 = *(_DWORD *)&v49[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v50[0] = (void **)v39;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v50);
  v50[0] = (void **)v38;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v50);
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
  v50[0] = (void **)&v47[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v50);
  v50[0] = (void **)&v45[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v50);
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
}

void sub_206FFB348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  l2a::Sizes::~Sizes((l2a::Sizes *)&__p);
  l2a::Sizes::~Sizes((l2a::Sizes *)&a26);
  _Unwind_Resume(a1);
}

uint64_t l2a::pe_alloc_fifo_dst@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  BOOL v8;
  int v9;
  char v10;

  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)a8 = 0u;
  if (a6 >= 1)
  {
    do
    {
      a5 -= a6 & 1;
      v8 = a6 > 1;
      a6 = a6 >> 1;
    }
    while (v8);
  }
  if ((result - 5) > 1 || a7 < 15)
  {
    v10 = a3 + a4;
    if ((a2 & 0xFFFFFFFE) == 2)
      ++v10;
    v9 = (2 * a5) << (v10 - 4);
  }
  else
  {
    v9 = 2 * a5;
  }
  *(_DWORD *)(a8 + 20) = v9;
  return result;
}

void l2a::np_alloc_chained(uint64_t a1@<X0>, l2a *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, char a12, __int16 a13, char a14, __int16 a15, char a16, int a17, int a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,int a26,char a27,int a28,int a29,int a30,int a31,uint64_t a32,int a33)
{
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  int v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  int v49;
  void *__p;
  void *v51;
  uint64_t v52;
  __int128 v53;
  _QWORD v54[4];
  _QWORD v55[3];
  __int128 v56;
  int v57;
  void *v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE v61[36];
  int v62;
  _BYTE v63[28];
  int v64;
  _BYTE v65[20];
  void **v66[2];

  if (a21 == 1)
    v33 = a4;
  else
    v33 = a7 * a1;
  v34 = 1;
  if (a29 != 1)
    v34 = (a30 == 1 || a31 == 2 && (a22 == 8 || a22 == 4)) && a28 < a23;
  if (a11 && a33 > 13)
  {
    v35 = 1;
  }
  else
  {
    v35 = a21 == 1 || v34;
    if (a33 <= 14)
      v35 = 0;
  }
  v36 = 0x10u >> ((a6 & 0xFFFFFFFE) == 2);
  v49 = a7 * a1;
  if ((v35 & 1) != 0)
  {
    v40 = (int)(ceil((double)v33 / (double)v36) * (double)v36);
  }
  else
  {
    v41 = a24 << a27;
    v42 = (((int)(16 * a7 * (0x10u >> ((a5 & 0xFFFFFFFE) == 2))) / (1 << (a16 + a12))) << a14);
    if (a33 > 17)
      a1 = l2a::calc_cbuf_width_v2(v42, v41, a25, a24, a26, v33, v36, a8, v45, SHIDWORD(v45));
    else
      a1 = l2a::calc_cbuf_width_v1((l2a *)v42, v41, a25, a26, v33, v36, a7, a8, v45);
    v40 = a1;
  }
  l2a::GetHGDCW((l2a *)a1);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v58, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_25451ECF8, (unk_25451ECF8 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v61[0] = 0;
  v61[8] = 1;
  memset(&v61[12], 0, 24);
  v62 = 0;
  v63[0] = 1;
  memset(&v63[4], 0, 24);
  *(_QWORD *)&v43 = 0x100000001;
  *((_QWORD *)&v43 + 1) = 0x100000001;
  *(_OWORD *)&v65[4] = v43;
  *(_DWORD *)&v61[4] = a6;
  v64 = 0;
  *(_DWORD *)v65 = v40;
  *(_DWORD *)&v65[4] = l2a::dst_slice_height(a2, a8, a17, a18, a19, a20, 0);
  *(_DWORD *)&v65[8] = a10 * a3;
  v44 = v49;
  if (a21 != 1)
    v44 = a4;
  *(_DWORD *)&v65[16] = v44;
  *(_DWORD *)&v65[12] = 1;
  if (&v58 != (void **)a32)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v58, *(char **)a32, *(_QWORD *)(a32 + 8), (uint64_t)(*(_QWORD *)(a32 + 8) - *(_QWORD *)a32) >> 2);
  v61[0] = 1;
  v51 = 0;
  v52 = 0;
  __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v58, (uint64_t)v59, (v59 - (_BYTE *)v58) >> 2);
  v53 = *(_OWORD *)v61;
  memset(v54, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v54, *(uint64_t *)&v61[16], *(uint64_t *)&v61[24], (uint64_t)(*(_QWORD *)&v61[24] - *(_QWORD *)&v61[16]) >> 5);
  v54[3] = *(_QWORD *)v63;
  memset(v55, 0, sizeof(v55));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v55, *(uint64_t *)&v63[8], *(uint64_t *)&v63[16], (uint64_t)(*(_QWORD *)&v63[16] - *(_QWORD *)&v63[8]) >> 5);
  v56 = *(_OWORD *)v65;
  v57 = *(_DWORD *)&v65[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v66[0] = (void **)v55;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v66);
  v66[0] = (void **)v54;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v66);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  v66[0] = (void **)&v63[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v66);
  v66[0] = (void **)&v61[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v66);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
}

void sub_206FFB75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  l2a::Sizes::~Sizes((l2a::Sizes *)&__p);
  l2a::Sizes::~Sizes((l2a::Sizes *)&a28);
  _Unwind_Resume(a1);
}

uint64_t l2a::calc_cbuf_width_v1(l2a *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  int v9;
  double v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  int v15;
  BOOL v16;
  int v17;
  int v18;

  v9 = ~a4 + a3;
  v10 = (double)(int)this;
  v11 = (int)(ceil((double)(v9 + a2) / (double)(int)this) * (double)(int)this);
  v12 = (int)(ceil((double)a4 / (double)a6) * (double)a6) + v11;
  v13 = (int)(ceil((double)(a4 + a2) / (double)a6) * (double)a6)
      + (int)(ceil((double)v9 / (double)(int)this) * (double)(int)this);
  if (v12 > v13)
    v13 = v12;
  result = (int)(ceil((double)a5 / (double)a6) * (double)a6);
  if (v11 < (int)result)
  {
    v15 = v11 + (int)(ceil((double)a2 / v10) * v10);
    v16 = __OFSUB__((_DWORD)result, v15);
    v17 = result - v15;
    if ((v17 < 0) ^ v16 | (v17 == 0))
    {
      v18 = v17 + v13;
      if (v18 <= v11)
        return v11;
      else
        return v18;
    }
    else if (v11 <= v13)
    {
      return v13;
    }
    else
    {
      return v11;
    }
  }
  return result;
}

uint64_t l2a::calc_cbuf_width_v2(uint64_t this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  int v10;
  int v11;
  double v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  if (a6 < 1)
    return 0;
  v10 = this;
  v11 = 0;
  LODWORD(this) = 0;
  v12 = (double)v10;
  v13 = 1;
  v14 = a3 - (a5 + a4) + a2;
  do
  {
    v15 = (((a5 + a4 - a3 + v11) / a2) & ~(((a5 + a4 - a3 + v11) / a2) >> 31)) * a2;
    v16 = v14 + v15;
    if (v14 + v15 >= a6)
      v16 = a6;
    v17 = (v15 - a5) & ~((v15 - a5) >> 31);
    v11 += (int)(ceil((double)(v16 - v11) / v12) * v12);
    if (v11 >= a6)
      v18 = a6;
    else
      v18 = v11;
    v19 = (int)(ceil((double)v18 / (double)a7) * (double)a7) - (int)(floor((double)v17 / (double)a7) * (double)a7);
    if ((int)this <= v19)
      this = v19;
    else
      this = this;
    if ((v13 & 1) == 0)
      break;
    v13 = 0;
  }
  while (v11 < a6);
  return this;
}

void l2a::pn_alloc_chained(l2a *a1@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, char a20,__int16 a21,char a22,__int16 a23,char a24,uint64_t a25,int a26)
{
  char v30;
  int v31;
  BOOL v32;
  unsigned int v34;
  l2a *v36;
  int v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void *__p;
  void *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[4];
  _QWORD v50[3];
  __int128 v51;
  int v52;
  void *v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE v56[36];
  int v57;
  _BYTE v58[28];
  int v59;
  _BYTE v60[20];
  void **v61[2];

  v30 = (a14 & 0xFFFFFFFE) == 2;
  if (a26 <= 17)
    v31 = a15 % a16 + a15;
  else
    v31 = a15;
  if (!a19 || (v32 = 1, a26 <= 13))
    v32 = a10 == 1 && a26 > 14;
  v34 = 0x10u >> v30;
  v36 = a1;
  if (v32)
  {
    v39 = (int)(ceil((double)a11 / (double)v34) * (double)v34);
  }
  else
  {
    v40 = ((int)(16 * a16 * v34) / (1 << (a24 + a20))) << a22;
    v41 = (1 << a3);
    if (a26 > 17)
      a1 = (l2a *)l2a::calc_cbuf_width_v2(v41, v40, v31, a16, a17, a11, v34, a8, v43, SHIDWORD(v43));
    else
      a1 = (l2a *)l2a::calc_cbuf_width_v1((l2a *)v41, v40, v31, a17, a11, 0x10u >> v30, v34, a8, v43);
    v39 = (int)a1;
  }
  l2a::GetHGDCW(a1);
  v53 = 0;
  v54 = 0;
  v55 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v53, (const void *)l2a::GetHGDCW(void)::HGDCW[0], unk_25451ECF8, (unk_25451ECF8 - l2a::GetHGDCW(void)::HGDCW[0]) >> 2);
  v56[0] = 0;
  v56[8] = 1;
  memset(&v56[12], 0, 24);
  v57 = 0;
  v58[0] = 1;
  memset(&v58[4], 0, 24);
  *(_QWORD *)&v42 = 0x100000001;
  *((_QWORD *)&v42 + 1) = 0x100000001;
  *(_OWORD *)&v60[4] = v42;
  *(_DWORD *)&v56[4] = a2;
  v59 = 0;
  *(_DWORD *)v60 = v39;
  *(_DWORD *)&v60[4] = l2a::dst_slice_height(v36, 1, a4, a5, a6, a7, a8);
  *(_DWORD *)&v60[8] = a12;
  *(_DWORD *)&v60[12] = 1;
  *(_DWORD *)&v60[16] = a13;
  if (&v53 != (void **)a25)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v53, *(char **)a25, *(_QWORD *)(a25 + 8), (uint64_t)(*(_QWORD *)(a25 + 8) - *(_QWORD *)a25) >> 2);
  v56[0] = 1;
  v46 = 0;
  v47 = 0;
  __p = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&__p, v53, (uint64_t)v54, (v54 - (_BYTE *)v53) >> 2);
  v48 = *(_OWORD *)v56;
  memset(v49, 0, 24);
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v49, *(uint64_t *)&v56[16], *(uint64_t *)&v56[24], (uint64_t)(*(_QWORD *)&v56[24] - *(_QWORD *)&v56[16]) >> 5);
  v49[3] = *(_QWORD *)v58;
  memset(v50, 0, sizeof(v50));
  std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(v50, *(uint64_t *)&v58[8], *(uint64_t *)&v58[16], (uint64_t)(*(_QWORD *)&v58[16] - *(_QWORD *)&v58[8]) >> 5);
  v51 = *(_OWORD *)v60;
  v52 = *(_DWORD *)&v60[16];
  l2a::alloc_buffer((uint64_t)&__p, a9);
  v61[0] = (void **)v50;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v61);
  v61[0] = (void **)v49;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v61);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v61[0] = (void **)&v58[8];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v61);
  v61[0] = (void **)&v56[16];
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](v61);
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
}

void sub_206FFBC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  l2a::Sizes::~Sizes((l2a::Sizes *)&__p);
  l2a::Sizes::~Sizes((l2a::Sizes *)&a26);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<l2a::AccessPattern>,l2a::AccessPattern*,l2a::AccessPattern*,l2a::AccessPattern*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = *(_QWORD *)v6;
      v4[2] = 0;
      v4[3] = 0;
      v4[1] = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(v4 + 1, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
      v4 = v11 + 4;
      v11 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<l2a::AccessPattern>,l2a::AccessPattern*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_206FFBD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<l2a::AccessPattern>,l2a::AccessPattern*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<l2a::AccessPattern>,l2a::AccessPattern*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<LayerSourcePair>,LayerSourcePair*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t l2a::get_pad(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _OWORD v25[16];

  if (*(_BYTE *)a1)
    return *(unsigned int *)(a1 + 4);
  result = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v4 != v3)
  {
    v5 = v4;
    while (1)
    {
      v6 = *(int **)(v5 + 8);
      v7 = *(int **)(v5 + 16);
      if (v6 != v7)
        break;
LABEL_24:
      v5 += 32;
      if (v5 == v3)
        return result;
    }
    v8 = *(_DWORD *)v5;
    v9 = *(_DWORD *)(v5 + 4) * result;
    while (1)
    {
      v10 = *v6;
      v11 = v6[1];
      memset(v25, 0, sizeof(v25));
      if (v11 < 1)
      {
        v14 = 1;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v14 = 1;
        do
        {
          v15 = v10;
          v16 = v13;
          if (v10 >= 1)
          {
            do
            {
              v17 = *((_DWORD *)v25 + v16);
              *((_DWORD *)v25 + v16) = v17 + 1;
              if (v17 + 1 > v14)
                v14 = v17 + 1;
              v18 = v16 + 1;
              v19 = -v18 < 0;
              v20 = -v18 & 0x3F;
              v16 = v18 & 0x3F;
              if (!v19)
                v16 = -v20;
              --v15;
            }
            while (v15);
          }
          v21 = v13 + v9;
          v22 = v21 & 0x3F;
          v23 = -v21;
          v19 = v23 < 0;
          v24 = v23 & 0x3F;
          if (v19)
            v13 = v22;
          else
            v13 = -v24;
          ++v12;
        }
        while (v12 != v11);
      }
      if (v14 > v8)
        break;
      v6 += 2;
      if (v6 == v7)
        goto LABEL_24;
    }
    result = (result + 1);
    if ((_DWORD)result == 64)
      return 0xFFFFFFFFLL;
  }
  return 0;
}

_QWORD *std::vector<l2a::AccessPattern>::__init_with_size[abi:ne180100]<l2a::AccessPattern*,l2a::AccessPattern*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<ControlEdgeInfo>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<l2a::AccessPattern>,l2a::AccessPattern*,l2a::AccessPattern*,l2a::AccessPattern*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_206FFBEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<CachePrefetchGroup>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t l2a::dma_push_round(l2a *this, uint64_t a2, int a3)
{
  double v3;
  double v4;
  uint64_t v5;

  if (a3 == 1)
  {
    v3 = (double)(int)this;
    v4 = (double)(int)a2;
    return (int)(ceil(v3 / v4) * v4);
  }
  if (!(_DWORD)this)
    return 0;
  if ((int)this <= (int)a2)
    return a2;
  v5 = (2 * a2);
  if ((int)v5 < (int)this)
  {
    v3 = (double)(int)this;
    v4 = (double)(4 * (int)a2);
    return (int)(ceil(v3 / v4) * v4);
  }
  return v5;
}

BOOL l2a::SliceGen::next(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = a1[6];
  v3 = a1[4] + *a1;
  if (v2 < v3)
  {
    v4 = v2 & ~(v2 >> 31);
    *a2 = v4;
    v5 = *a1;
    v6 = a1[1] + v2;
    if (*a1 >= v6)
      v7 = a1[1] + v2;
    else
      v7 = *a1;
    a2[1] = v7;
    if (a1[5])
    {
      v8 = v6 - v5;
      if (a1[4] < v6 - v5)
        v8 = a1[4];
      if (v2 < 0)
      {
        if (v7 <= 1 - v2)
          v7 = 1 - v2;
        a2[1] = v7;
      }
      if (v8 >= 1)
      {
        v9 = v5 + ~(v8 & ~(v8 >> 31));
        if (v9 < v4)
          v4 = v9;
        *a2 = v4;
      }
    }
    a1[6] = v6 - a1[2];
  }
  return v2 < v3;
}

uint64_t *ZinComputeMutableProgramFindSectionSymbol(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const char *v10;

  v2 = *(uint64_t ***)(a1 + 192);
  v3 = *(_QWORD *)(a1 + 200) - (_QWORD)v2;
  if (!v3)
    return 0;
  v5 = 0;
  v6 = v3 >> 3;
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  do
  {
    v8 = *v2;
    if ((*v2)[4] == a2)
    {
      v9 = *v8;
      if (*(_QWORD *)(*v8 + 8) == *(_QWORD *)(*(_QWORD *)a2 + 32)
        && (!v5 || (v10 = (const char *)v5[1]) != 0 && strncmp(v10, "SectionSymbol_", 0xFuLL)))
      {
        v5 = v8;
        if ((~*(unsigned __int8 *)(v9 + 4) & 0xE) != 0)
          ZinAssertImpl("Non-section symbol pointing to a section.");
      }
    }
    ++v2;
    --v7;
  }
  while (v7);
  return v5;
}

uint64_t ZinComputeMutableProgramDestroy(ZinComputeMutableProgram *a1)
{
  if (!a1)
    return 3;
  ZinComputeMutableProgramDestroyProcedures((uint64_t)a1);
  ZinComputeMutableProgramDestroyBindings((uint64_t)a1);
  ZinComputeMutableProgramDestroyFvmlibs((uint64_t)a1);
  ZinComputeMutableProgramDestroyOperations((uint64_t)a1);
  ZinComputeMutableProgramDestroySegments<ZinComputeMutableProgram>((uint64_t)a1);
  ZinComputeMutableProgramDestroySymbols<ZinComputeMutableProgram>((uint64_t)a1);
  ZinComputeMutableProgramDestroySymbolTable<ZinComputeMutableProgram>((uint64_t)a1);
  ZinComputeMutableProgramDestroySymbolCommon<ZinComputeMutableProgram>((uint64_t)a1);
  ZinComputeMutableProgram::~ZinComputeMutableProgram(a1);
  MEMORY[0x20BD002F8]();
  return 0;
}

void ZinComputeMutableProgramDestroyProcedures(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 160);
  v1 = *(_QWORD *)(a1 + 168);
  if (v1 != v2)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + 8 * v4);
      if (v5)
      {
        if (!*(_QWORD *)v5
          || (free(*(void **)v5), *(_QWORD *)v5 = 0, v6 = *(_QWORD *)(a1 + 160), (v5 = *(_QWORD *)(v6 + 8 * v4)) != 0))
        {
          v7 = *(void **)(v5 + 80);
          if (v7)
          {
            *(_QWORD *)(v5 + 88) = v7;
            operator delete(v7);
          }
          v8 = *(void **)(v5 + 56);
          if (v8)
          {
            *(_QWORD *)(v5 + 64) = v8;
            operator delete(v8);
          }
          v9 = *(void **)(v5 + 32);
          if (v9)
          {
            *(_QWORD *)(v5 + 40) = v9;
            operator delete(v9);
          }
          v10 = *(void **)(v5 + 8);
          if (v10)
          {
            *(_QWORD *)(v5 + 16) = v10;
            operator delete(v10);
          }
          MEMORY[0x20BD002F8](v5, 0xD0C4058488F0BLL);
          v6 = *(_QWORD *)(a1 + 160);
        }
        *(_QWORD *)(v6 + 8 * v4) = 0;
        v2 = *(_QWORD *)(a1 + 160);
        v1 = *(_QWORD *)(a1 + 168);
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
}

void ZinComputeMutableProgramDestroyBindings(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  void **v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 144) != v1)
  {
    v3 = 0;
    do
    {
      v4 = *(void ***)(v1 + 8 * v3);
      if (v4)
      {
        free(*v4);
        *v4 = 0;
        v5 = *(void **)(*(_QWORD *)(a1 + 136) + 8 * v3);
      }
      else
      {
        v5 = 0;
      }
      free(v5);
      *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v3++) = 0;
      v1 = *(_QWORD *)(a1 + 136);
    }
    while (v3 < (*(_QWORD *)(a1 + 144) - v1) >> 3);
  }
}

void ZinComputeMutableProgramDestroyFvmlibs(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 64);
  v1 = *(_QWORD *)(a1 + 72);
  if (v1 != v2)
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(v2 + 8 * v4);
      if (v5)
      {
        if (*v5)
        {
          free(*v5);
          *v5 = 0;
          v5 = *(void ***)(*(_QWORD *)(a1 + 64) + 8 * v4);
        }
        free(v5);
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v4) = 0;
        v2 = *(_QWORD *)(a1 + 64);
        v1 = *(_QWORD *)(a1 + 72);
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
}

void ZinComputeMutableProgramDestroyOperations(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 88);
  v1 = *(_QWORD *)(a1 + 96);
  if (v1 != v2)
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(v2 + 8 * v4);
      if (v5)
      {
        if (*v5)
        {
          free(*v5);
          *v5 = 0;
          v5 = *(void ***)(*(_QWORD *)(a1 + 88) + 8 * v4);
        }
        free(v5);
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v4) = 0;
        v2 = *(_QWORD *)(a1 + 88);
        v1 = *(_QWORD *)(a1 + 96);
      }
      ++v4;
    }
    while (v4 < (v1 - v2) >> 3);
  }
}

uint64_t ZinComputeMutableProgramAddAneTDOperation(uint64_t a1, const char **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t ANETDThreadStateSize;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  size_t __n;
  void *v21;

  if (!a3)
    return 3;
  v21 = 0;
  v8 = ZinComputeMutableProgramAddOperation(a1, a2, &v21);
  if (!(_DWORD)v8)
  {
    __n = 0;
    ANETDThreadStateSize = ZinComputeProgramGetANETDThreadStateSize(*(const ident_command **)(a1 + 16), 0, a3, 0, 0, (_DWORD *)&__n + 1);
    if ((_DWORD)ANETDThreadStateSize
      || (ANETDThreadStateSize = ZinComputeProgramGetANETDThreadStateArgumentSize(*(const ident_command **)(a1 + 16), 0, a3, 0, 0, (unsigned int *)&__n), (_DWORD)ANETDThreadStateSize))
    {
      v8 = ANETDThreadStateSize;
      free(v21);
    }
    else
    {
      v11 = HIDWORD(__n);
      if (*a2)
        v12 = v11 + (SymStrlen(*a2) & 0xFFFFFFF8) + 24;
      else
        v12 = HIDWORD(__n) + 16;
      v13 = malloc_type_calloc(1uLL, v12, 0xE9A94980uLL);
      if (v13)
      {
        v14 = v13;
        v15 = v13 + 4;
        *v13 = 4;
        v13[1] = v12;
        v16 = HIDWORD(__n);
        v17 = HIDWORD(__n) >> 2;
        v13[2] = 1;
        v13[3] = v17;
        memcpy(v13 + 4, (const void *)a3, 0x800uLL);
        *((_QWORD *)v14 + 258) = *(_QWORD *)(a3 + 2048);
        v14[518] = *(_DWORD *)(a3 + 2056);
        v14[519] = *(_DWORD *)(a3 + 2060);
        v14[520] = *(_DWORD *)(a3 + 2064);
        v14[521] = *(_DWORD *)(a3 + 2068);
        *((_QWORD *)v14 + 261) = *(_QWORD *)(a3 + 2072);
        *((_QWORD *)v14 + 262) = *(_QWORD *)(a3 + 2080);
        v14[526] = *(_DWORD *)(a3 + 2088);
        *((_QWORD *)v14 + 264) = *(_QWORD *)(a3 + 2096);
        *((_QWORD *)v14 + 265) = *(_QWORD *)(a3 + 2104);
        *((_QWORD *)v14 + 266) = *(_QWORD *)(a3 + 2112);
        *((_QWORD *)v14 + 267) = *(_QWORD *)(a3 + 2120);
        v14[536] = *(_DWORD *)(a3 + 2128);
        memcpy(v14 + 538, (const void *)(a3 + 2136), __n);
        v18 = v21;
        *(_QWORD *)v21 = v14;
        v18[1] = v15;
        if (*a2)
        {
          v19 = (v16 + 16);
          v14[527] = v19;
          strcpy((char *)v14 + v19, *a2);
        }
        else
        {
          v14[527] = 0;
        }
        ZinComputeMutableProgramUpdateWithOperation((_QWORD *)a1, a2, (uint64_t)v18, v12);
        v8 = 0;
        if (a4)
          *a4 = v18;
      }
      else
      {
        free(v21);
        return 1;
      }
    }
  }
  return v8;
}

uint64_t ZinComputeMutableProgramAddOperation(uint64_t a1, const char **a2, _QWORD *a3)
{
  uint64_t v5;
  void *v6;
  void *v7;

  if (!a1)
    return 3;
  v5 = 1;
  v6 = malloc_type_calloc(1uLL, 0x848uLL, 0xA2040A6885270uLL);
  if (v6)
  {
    v7 = v6;
    if (!*a2 || strlen(*a2) < 0x200)
    {
      v5 = 0;
      *a3 = v7;
      return v5;
    }
    free(v7);
    return 3;
  }
  return v5;
}

void ZinComputeMutableProgramUpdateWithOperation(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v8 = (uint64_t)(a2 + 6);
  v9 = a2[6];
  v10 = (_QWORD *)a2[5];
  if ((unint64_t)v10 >= v9)
  {
    v12 = (void **)(a2 + 4);
    v13 = a2[4];
    v14 = ((uint64_t)v10 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v15 = v9 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v17);
    else
      v18 = 0;
    v19 = &v18[8 * v14];
    v20 = &v18[8 * v17];
    *(_QWORD *)v19 = a3;
    v11 = v19 + 8;
    v22 = (char *)a2[4];
    v21 = (char *)a2[5];
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      v21 = (char *)*v12;
    }
    a2[4] = v19;
    a2[5] = v11;
    a2[6] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v10 = a3;
    v11 = v10 + 1;
  }
  a2[5] = v11;
  v24 = a1[13];
  v25 = (_QWORD *)a1[12];
  if ((unint64_t)v25 >= v24)
  {
    v27 = a1[11];
    v28 = ((uint64_t)v25 - v27) >> 3;
    if ((unint64_t)(v28 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v29 = v24 - v27;
    v30 = v29 >> 2;
    if (v29 >> 2 <= (unint64_t)(v28 + 1))
      v30 = v28 + 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 13), v31);
    else
      v32 = 0;
    v33 = &v32[8 * v28];
    v34 = &v32[8 * v31];
    *(_QWORD *)v33 = a3;
    v26 = v33 + 8;
    v36 = (char *)a1[11];
    v35 = (char *)a1[12];
    if (v35 != v36)
    {
      do
      {
        v37 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *((_QWORD *)v33 - 1) = v37;
        v33 -= 8;
      }
      while (v35 != v36);
      v35 = (char *)a1[11];
    }
    a1[11] = v33;
    a1[12] = v26;
    a1[13] = v34;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *v25 = a3;
    v26 = v25 + 1;
  }
  a1[12] = v26;
  v38 = *a1;
  v39 = *(_DWORD *)(*a1 + 20) + a4;
  *(_DWORD *)(v38 + 16) = *(_DWORD *)(*a1 + 16) + 1;
  *(_DWORD *)(v38 + 20) = v39;
}

uint64_t ZinComputeMutableProgramAddAneSegmentOperation(uint64_t a1, const char **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t ANESegThreadStateSize;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  size_t __n;
  void *v21;

  if (!a3)
    return 3;
  v21 = 0;
  v8 = ZinComputeMutableProgramAddOperation(a1, a2, &v21);
  if (!(_DWORD)v8)
  {
    __n = 0;
    ANESegThreadStateSize = ZinComputeProgramGetANESegThreadStateSize(*(const ident_command **)(a1 + 16), 0, a3, 0, 0, (_DWORD *)&__n + 1);
    if ((_DWORD)ANESegThreadStateSize
      || (ANESegThreadStateSize = ZinComputeProgramGetANESegThreadStateArgumentSize(*(const ident_command **)(a1 + 16), 0, a3, 0, 0, (unsigned int *)&__n), (_DWORD)ANESegThreadStateSize))
    {
      v8 = ANESegThreadStateSize;
      free(v21);
    }
    else
    {
      v11 = HIDWORD(__n);
      if (*a2)
        v12 = v11 + (SymStrlen(*a2) & 0xFFFFFFF8) + 24;
      else
        v12 = HIDWORD(__n) + 16;
      v13 = malloc_type_calloc(1uLL, v12, 0x4E0FB8CBuLL);
      if (v13)
      {
        v14 = v13;
        v15 = v13 + 4;
        *v13 = 4;
        v13[1] = v12;
        v16 = HIDWORD(__n);
        v17 = HIDWORD(__n) >> 2;
        v13[2] = 4;
        v13[3] = v17;
        memcpy(v13 + 4, (const void *)a3, 0x800uLL);
        *((_QWORD *)v14 + 258) = *(_QWORD *)(a3 + 2048);
        *((_QWORD *)v14 + 258) = *(_QWORD *)(a3 + 2048);
        *((_QWORD *)v14 + 259) = *(_QWORD *)(a3 + 2056);
        v14[520] = *(_DWORD *)(a3 + 2064);
        v14[521] = *(_DWORD *)(a3 + 2068);
        v14[522] = *(_DWORD *)(a3 + 2072);
        v14[523] = *(_DWORD *)(a3 + 2076);
        v14[524] = *(_DWORD *)(a3 + 2080);
        v14[525] = *(_DWORD *)(a3 + 2084);
        v14[526] = *(_DWORD *)(a3 + 2088);
        v14[527] = *(_DWORD *)(a3 + 2092);
        v14[528] = *(_DWORD *)(a3 + 2096);
        v14[529] = *(_DWORD *)(a3 + 2100);
        *((_QWORD *)v14 + 266) = *(_QWORD *)(a3 + 2112);
        *((_QWORD *)v14 + 267) = *(_QWORD *)(a3 + 2120);
        *((_QWORD *)v14 + 268) = *(_QWORD *)(a3 + 2128);
        *((_QWORD *)v14 + 269) = *(_QWORD *)(a3 + 2136);
        v14[540] = *(_DWORD *)(a3 + 2144);
        memcpy(v14 + 542, (const void *)(a3 + 2152), __n);
        v18 = v21;
        *(_QWORD *)v21 = v14;
        v18[1] = v15;
        if (*a2)
        {
          v19 = (v16 + 16);
          v14[530] = v19;
          strcpy((char *)v14 + v19, *a2);
        }
        else
        {
          v14[530] = 0;
        }
        ZinComputeMutableProgramUpdateWithOperation((_QWORD *)a1, a2, (uint64_t)v18, v12);
        v8 = 0;
        if (a4)
          *a4 = v18;
      }
      else
      {
        free(v21);
        return 1;
      }
    }
  }
  return v8;
}

uint64_t ZinComputeMutableProgramAddSneOperation(uint64_t a1, const char **a2, _DWORD *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  int v28;
  unsigned int v29;
  _DWORD *v30;
  _DWORD *v31;
  _QWORD *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  int v41;
  unsigned int v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *__p;
  char *v47;
  char *v48;
  void *v49;

  if (!a3)
    return 3;
  v49 = 0;
  v10 = ZinComputeMutableProgramAddOperation(a1, a2, &v49);
  if (!(_DWORD)v10)
  {
    v44 = a5;
    v45 = (_QWORD *)a1;
    if (*a2)
      v11 = SymStrlen(*a2) + 1;
    else
      v11 = 0;
    __p = 0;
    v47 = 0;
    v48 = 0;
    v12 = *a4;
    v13 = a4[1];
    if (*a4 == v13)
      goto LABEL_32;
    v42 = v11;
    do
    {
      v14 = (const char *)v12;
      if (*(char *)(v12 + 23) < 0)
        v14 = *(const char **)v12;
      v15 = SymStrlen(v14) + 1;
      v16 = v47;
      if (v47 >= v48)
      {
        v18 = __p;
        v19 = (v47 - __p) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v21 = v48 - __p;
        if ((v48 - __p) >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v48, v22);
          v18 = __p;
          v16 = v47;
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v19];
        *(_DWORD *)v24 = v15;
        v17 = v24 + 4;
        while (v16 != v18)
        {
          v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        __p = v24;
        v48 = &v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_DWORD *)v47 = v15;
        v17 = v47 + 4;
      }
      v47 = v17;
      v12 += 24;
    }
    while (v12 != v13);
    v26 = __p;
    v11 = v42;
    if (__p == v17)
    {
LABEL_32:
      v27 = 0;
    }
    else
    {
      v27 = 0;
      do
      {
        v28 = *(_DWORD *)v26;
        v26 += 4;
        v27 += v28;
      }
      while (v26 != v17);
    }
    v29 = ((v11 + v27 + 7) & 0xFFFFFFF8) + 296;
    v30 = malloc_type_calloc(1uLL, v29, 0xECC5A0A1uLL);
    v31 = v30;
    if (!v30)
    {
      free(v49);
      v10 = 1;
      goto LABEL_50;
    }
    *v30 = 4;
    v30[1] = v29;
    v41 = v29;
    *((_QWORD *)v30 + 1) = 0x4600000006;
    v30[4] = *a3;
    memcpy(v30 + 6, a3 + 2, 0x110uLL);
    v32 = v49;
    *(_QWORD *)v49 = v31;
    v32[1] = v31 + 4;
    v43 = v32;
    if (*a2)
    {
      v31[5] = 296;
      strncpy((char *)v31 + 296, *a2, v11);
      v33 = v11 + 296;
    }
    else
    {
      v31[5] = 0;
      v33 = 296;
    }
    v34 = v31[9];
    if ((_DWORD)v34)
    {
      v35 = 0;
      v36 = 0;
      v37 = v31 + 12;
      do
      {
        if (*(v37 - 2) <= 2)
        {
          if (v36 >= (unint64_t)((v47 - __p) >> 2))
          {
            free(v43);
LABEL_49:
            v10 = 0;
            goto LABEL_50;
          }
          *v37 = v33;
          v38 = *a4 + 24 * v36;
          if (*(char *)(v38 + 23) < 0)
            v38 = *(_QWORD *)v38;
          v39 = *(_DWORD *)&__p[4 * v36];
          strncpy((char *)v31 + v33, (const char *)v38, v39);
          v33 += v39;
          ++v36;
          v34 = v31[9];
        }
        v37 += 4;
        ++v35;
      }
      while (v35 < v34);
    }
    ZinComputeMutableProgramUpdateWithOperation(v45, a2, (uint64_t)v43, v41);
    if (!v44)
      goto LABEL_49;
    v10 = 0;
    *v44 = v43;
LABEL_50:
    if (__p)
      operator delete(__p);
  }
  return v10;
}

void sub_206FFCD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinComputeMutableProgramAddAneAotMetadataOperation(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t ANEAotMetadataThreadStateSize;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;

  v4 = 3;
  if (a1)
  {
    if (a3)
    {
      v4 = 1;
      v9 = malloc_type_calloc(1uLL, 0x48uLL, 0xE00401F60D661uLL);
      if (v9)
      {
        v10 = v9;
        if (*(_QWORD *)a2 && strlen(*(const char **)a2) >= 0x200)
        {
          free(v10);
          return 3;
        }
        else
        {
          v50 = 0;
          ANEAotMetadataThreadStateSize = ZinComputeProgramGetANEAotMetadataThreadStateSize(&v50);
          if ((_DWORD)ANEAotMetadataThreadStateSize)
          {
            v4 = ANEAotMetadataThreadStateSize;
            free(v10);
          }
          else
          {
            v13 = v50;
            if (*(_QWORD *)a2)
              v14 = v13 + (SymStrlen(*(const char **)a2) & 0xFFFFFFF8) + 24;
            else
              v14 = v50 + 16;
            v15 = malloc_type_calloc(1uLL, v14, 0x37DBB38BuLL);
            if (v15)
            {
              v16 = v15;
              *v15 = 4;
              v15[1] = v14;
              v17 = v50;
              v18 = v50 >> 2;
              v15[2] = 5;
              v15[3] = v18;
              *((_QWORD *)v15 + 3) = a3[1];
              *((_QWORD *)v15 + 4) = a3[2];
              *((_QWORD *)v15 + 2) = *a3;
              *v10 = v15;
              v10[1] = v15 + 4;
              if (*(_QWORD *)a2)
              {
                v19 = v17 + 16;
                v15[10] = v19;
                strcpy((char *)v15 + v19, *(const char **)a2);
              }
              v20 = *(_QWORD *)(a2 + 72);
              v21 = *(_QWORD **)(a2 + 64);
              if ((unint64_t)v21 >= v20)
              {
                v23 = *(_QWORD *)(a2 + 56);
                v24 = ((uint64_t)v21 - v23) >> 3;
                if ((unint64_t)(v24 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v25 = v20 - v23;
                v26 = v25 >> 2;
                if (v25 >> 2 <= (unint64_t)(v24 + 1))
                  v26 = v24 + 1;
                if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
                  v27 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v27 = v26;
                if (v27)
                  v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a2 + 72, v27);
                else
                  v28 = 0;
                v29 = &v28[8 * v24];
                v30 = &v28[8 * v27];
                *(_QWORD *)v29 = v10;
                v22 = v29 + 8;
                v32 = *(char **)(a2 + 56);
                v31 = *(char **)(a2 + 64);
                if (v31 != v32)
                {
                  do
                  {
                    v33 = *((_QWORD *)v31 - 1);
                    v31 -= 8;
                    *((_QWORD *)v29 - 1) = v33;
                    v29 -= 8;
                  }
                  while (v31 != v32);
                  v31 = *(char **)(a2 + 56);
                }
                *(_QWORD *)(a2 + 56) = v29;
                *(_QWORD *)(a2 + 64) = v22;
                *(_QWORD *)(a2 + 72) = v30;
                if (v31)
                  operator delete(v31);
              }
              else
              {
                *v21 = v10;
                v22 = v21 + 1;
              }
              *(_QWORD *)(a2 + 64) = v22;
              v34 = a1[16];
              v35 = (_QWORD *)a1[15];
              if ((unint64_t)v35 >= v34)
              {
                v37 = a1[14];
                v38 = ((uint64_t)v35 - v37) >> 3;
                if ((unint64_t)(v38 + 1) >> 61)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                v39 = v34 - v37;
                v40 = v39 >> 2;
                if (v39 >> 2 <= (unint64_t)(v38 + 1))
                  v40 = v38 + 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                  v41 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v41 = v40;
                if (v41)
                  v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 16), v41);
                else
                  v42 = 0;
                v43 = &v42[8 * v38];
                v44 = &v42[8 * v41];
                *(_QWORD *)v43 = v10;
                v36 = v43 + 8;
                v46 = (char *)a1[14];
                v45 = (char *)a1[15];
                if (v45 != v46)
                {
                  do
                  {
                    v47 = *((_QWORD *)v45 - 1);
                    v45 -= 8;
                    *((_QWORD *)v43 - 1) = v47;
                    v43 -= 8;
                  }
                  while (v45 != v46);
                  v45 = (char *)a1[14];
                }
                a1[14] = v43;
                a1[15] = v36;
                a1[16] = v44;
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *v35 = v10;
                v36 = v35 + 1;
              }
              a1[15] = v36;
              v48 = *a1;
              v49 = *(_DWORD *)(*a1 + 20) + v16[1];
              *(_DWORD *)(v48 + 16) = *(_DWORD *)(*a1 + 16) + 1;
              *(_DWORD *)(v48 + 20) = v49;
              v4 = 0;
              if (a4)
                *a4 = v10;
            }
            else
            {
              free(v10);
              return 1;
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t ZinComputeMutableProgramAddFvmlib(char **a1, uint64_t a2, uint64_t a3, const char *a4, _QWORD *a5)
{
  char v10;
  uint64_t v11;
  char **v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  size_t v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int v44;

  if (!a1)
    return 3;
  if (a2)
  {
    v10 = ZinComputeMutableProgramContainsSection<ZinComputeMutableProgram>((uint64_t)a1, a2);
    v11 = 3;
    if (!a4 || (v10 & 1) == 0)
      return v11;
  }
  else if (!a4)
  {
    return 3;
  }
  if (strnlen(a4, 0x400uLL) > 0x3FF)
    return 3;
  v13 = a1 + 8;
  if ((unint64_t)(a1[9] - a1[8]) >= 0x7F1)
  {
    v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v14)
      ZinComputeMutableProgramAddFvmlib(v14, v15, v16, v17, v18, v19, v20, v21);
    return 1;
  }
  v11 = 1;
  v22 = malloc_type_calloc(1uLL, 0x18uLL, 0x70040305B5C43uLL);
  if (!v22)
    return v11;
  v23 = v22;
  v24 = strnlen(a4, 0x400uLL);
  v25 = malloc_type_calloc(1uLL, (v24 & 0xFFFFFFFFFFFFFFF8) + 32, 0x3BAB4408uLL);
  *v23 = v25;
  if (!v25)
  {
    free(v23);
    return 1;
  }
  v26 = v25;
  if (a2)
    v27 = 64;
  else
    v27 = 65;
  *v25 = v27;
  v28 = strnlen(a4, 0x400uLL);
  v29 = *(_DWORD *)(a3 + 4);
  v26[1] = (v28 & 0xFFFFFFF8) + 32;
  v26[2] = 24;
  v26[3] = v29;
  strcpy((char *)(*v23 + 24), a4);
  v23[1] = *v23 + 24;
  v23[2] = a2;
  v30 = (unint64_t)a1[10];
  v31 = a1[9];
  if ((unint64_t)v31 >= v30)
  {
    v33 = (v31 - *v13) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v34 = v30 - (_QWORD)*v13;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 10), v36);
    else
      v37 = 0;
    v38 = &v37[8 * v33];
    v39 = &v37[8 * v36];
    *(_QWORD *)v38 = v23;
    v32 = v38 + 8;
    v41 = a1[8];
    v40 = a1[9];
    if (v40 != v41)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *((_QWORD *)v38 - 1) = v42;
        v38 -= 8;
      }
      while (v40 != v41);
      v40 = *v13;
    }
    a1[8] = v38;
    a1[9] = v32;
    a1[10] = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *(_QWORD *)v31 = v23;
    v32 = v31 + 8;
  }
  a1[9] = v32;
  v43 = *a1;
  v44 = *((_DWORD *)*a1 + 5) + *(_DWORD *)(*v23 + 4);
  *((_DWORD *)v43 + 4) = *((_DWORD *)*a1 + 4) + 1;
  *((_DWORD *)v43 + 5) = v44;
  v11 = 0;
  if (a5)
    *a5 = v23;
  return v11;
}

uint64_t ZinComputeMutableProgramAddProcedure(_QWORD *a1, char *__s1, const char ***a3)
{
  uint64_t result;
  char **v7;
  const char ***v8;
  const char ***v9;
  const char **v10;
  const char *v11;
  unint64_t v12;
  const char ***v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  const char ***v20;
  char *v21;
  char *v22;
  char *v23;
  const char **v24;

  if (!a1 || __s1 && strnlen(__s1, 0x200uLL) > 0x1FF)
    return 3;
  v8 = (const char ***)a1[20];
  v9 = (const char ***)a1[21];
  v7 = (char **)(a1 + 20);
  while (1)
  {
    if (v8 == v9)
    {
      v10 = (const char **)operator new();
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *((_OWORD *)v10 + 4) = 0u;
      *((_OWORD *)v10 + 5) = 0u;
      v10[12] = 0;
      if (__s1 && *__s1)
        *v10 = strdup(__s1);
      v12 = a1[22];
      v13 = (const char ***)a1[21];
      if ((unint64_t)v13 >= v12)
      {
        v15 = ((char *)v13 - *v7) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v16 = v12 - (_QWORD)*v7;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 22), v18);
        else
          v19 = 0;
        v20 = (const char ***)&v19[8 * v15];
        v21 = &v19[8 * v18];
        *v20 = v10;
        v14 = v20 + 1;
        v23 = (char *)a1[20];
        v22 = (char *)a1[21];
        if (v22 != v23)
        {
          do
          {
            v24 = (const char **)*((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v20 = v24;
          }
          while (v22 != v23);
          v22 = *v7;
        }
        a1[20] = v20;
        a1[21] = v14;
        a1[22] = v21;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v13 = v10;
        v14 = v13 + 1;
      }
      a1[21] = v14;
      if (!a3)
        return 0;
      goto LABEL_35;
    }
    v10 = *v8;
    v11 = **v8;
    if (__s1)
      break;
    if (!v11)
      goto LABEL_26;
LABEL_12:
    ++v8;
  }
  if (!v11 || strncmp(__s1, v11, 0x200uLL))
    goto LABEL_12;
LABEL_26:
  if (!a3)
    return 0;
LABEL_35:
  result = 0;
  *a3 = v10;
  return result;
}

uint64_t ZinComputeMutableProgramAddAneSinglePlaneCompressedBinding(_QWORD *a1, _DWORD *a2, const char *a3, const char *a4, const char *a5, const char *a6, int a7, const char ***a8)
{
  char *v16;
  unsigned int v17;
  uint64_t result;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const char **v24;
  const char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int *v30;
  const char ***v31;
  const char **v32[3];

  v16 = (char *)operator new(0x20uLL);
  v32[1] = (const char **)(v16 + 32);
  v32[2] = (const char **)(v16 + 32);
  *(_QWORD *)v16 = a4;
  *((_QWORD *)v16 + 1) = a3;
  *((_QWORD *)v16 + 2) = a5;
  *((_QWORD *)v16 + 3) = a6;
  v32[0] = (const char **)v16;
  v17 = StringsAreValid(v32);
  operator delete(v16);
  result = 3;
  if (a2 && v17)
  {
    v19 = a7 ? 6 : 1;
    if (a1 && *a2 == v19)
    {
      v31 = a8;
      v20 = SymStrlen(a3);
      v21 = SymStrlen(a4) + 1;
      v22 = SymStrlen(a5) + 1;
      v23 = SymStrlen(a6);
      v32[0] = 0;
      if (AddBindingAllocateBindingAndThread(a2, (v20 + v21 + v22 + v23 + 9) & 0xFFFFFFF8, a3, v32))
      {
        return 1;
      }
      else
      {
        v24 = v32[0];
        v25 = v32[0][2];
        v26 = v20 + *((_DWORD *)v25 + 2);
        v27 = (uint64_t)*v32[0];
        v28 = (v26 + 1);
        *((_DWORD *)v25 + 4) = v28;
        v29 = v28 + v21;
        if (a7)
        {
          *((_DWORD *)v25 + 10) = v29;
          v30 = (unsigned int *)(v25 + 40);
        }
        else
        {
          *((_DWORD *)v25 + 8) = v29;
          v30 = (unsigned int *)(v25 + 32);
        }
        v30[6] = v28 + v21 + v22;
        strcpy((char *)(v27 + v28), a4);
        strcpy((char *)(v27 + *v30), a5);
        strcpy((char *)(v27 + v30[6]), a6);
        v24[1] = (const char *)(v27 + *((unsigned int *)v25 + 4));
        AddBindingToProgram(a1, (uint64_t)v24);
        result = 0;
        if (v31)
          *v31 = v24;
      }
    }
  }
  return result;
}

const char *StringsAreValid(const char ***a1)
{
  const char **v1;
  const char **v2;
  const char *result;

  v1 = *a1;
  v2 = a1[1];
  while (1)
  {
    if (v1 == v2)
      return (const char *)1;
    result = *v1;
    if (!*v1)
      return result;
    if (strnlen(result, 0x200uLL) == 512)
      break;
    ++v1;
  }
  return 0;
}

uint64_t AddBindingAllocateBindingAndThread(const void *a1, int a2, const char *a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  char *v11;
  char *v12;
  void *v13;
  uint64_t result;
  NSObject *v15;
  uint8_t *v16;
  __int16 v17;
  __int16 v18;

  v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x70040305B5C43uLL);
  if (v8)
  {
    v9 = v8;
    v10 = a2 + 3384;
    v11 = (char *)malloc_type_calloc(1uLL, (a2 + 3384), 0x524023B6uLL);
    if (v11)
    {
      v12 = v11;
      v13 = v11 + 16;
      *(_DWORD *)v12 = 4;
      *((_DWORD *)v12 + 1) = v10;
      *((_QWORD *)v12 + 1) = 0x34A00000003;
      v9[2] = v13;
      *v9 = v12;
      memcpy(v13, a1, 0xD28uLL);
      *((_DWORD *)v12 + 6) = 3384;
      strcpy(v12 + 3384, a3);
      result = 0;
      *a4 = v9;
      return result;
    }
    free(v9);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v17 = 0;
      v15 = MEMORY[0x24BDACB70];
      v16 = (uint8_t *)&v17;
      goto LABEL_8;
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v18 = 0;
    v15 = MEMORY[0x24BDACB70];
    v16 = (uint8_t *)&v18;
LABEL_8:
    _os_log_impl(&dword_2069AB000, v15, OS_LOG_TYPE_DEFAULT, "calloc failed in AddBindingCreateNewThread", v16, 2u);
  }
  return 1;
}

void AddBindingToProgram(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v6 = a1[19];
  v4 = (uint64_t)(a1 + 19);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)a1[17];
    v18 = (char *)a1[18];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[17] = v16;
    a1[18] = v8;
    a1[19] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[18] = v8;
  v21 = *a1;
  v22 = *(_DWORD *)(*a1 + 20) + *(_DWORD *)(*(_QWORD *)a2 + 4);
  *(_DWORD *)(v21 + 16) = *(_DWORD *)(*a1 + 16) + 1;
  *(_DWORD *)(v21 + 20) = v22;
}

uint64_t ZinComputeMutableProgramAddAneMultiPlaneCompressedBinding(_QWORD *a1, unsigned int *a2, char *a3, char *a4, const char **a5, const char **a6, const char ***a7)
{
  _QWORD *v14;
  unsigned int v15;
  uint64_t result;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char **v27;
  const char **v28;
  const char *v29;
  const char *v30;
  _QWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  const char **v35;
  const char **v36;
  const char *v37;
  int v38;
  const char *v39;
  const char **v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  int v44;
  _DWORD *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  _QWORD *v49;
  const char ***v50;
  int v51;
  char *__src;
  char *v53;
  const char **v54;
  char *v55;
  char *v56;

  v14 = operator new(0x10uLL);
  v55 = (char *)(v14 + 2);
  v56 = (char *)(v14 + 2);
  *v14 = a4;
  v14[1] = a3;
  v54 = (const char **)v14;
  v15 = StringsAreValid(&v54);
  operator delete(v14);
  result = 3;
  if (a2 && v15 && a1 && *a2 == 5)
  {
    v17 = a2[8];
    if (v17 > 4)
    {
      v18 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v18)
        ZinComputeProgramValidateNamesFromMultiPlaneLinear_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
      return 3;
    }
    __src = a4;
    v53 = a3;
    v49 = a1;
    v50 = a7;
    if ((_DWORD)v17)
    {
      v26 = a2[8];
      v27 = a6;
      v28 = a5;
      do
      {
        v29 = *v28;
        v30 = *v27;
        v31 = operator new(0x10uLL);
        v55 = (char *)(v31 + 2);
        v56 = (char *)(v31 + 2);
        *v31 = v29;
        v31[1] = v30;
        v54 = (const char **)v31;
        LOBYTE(v29) = StringsAreValid(&v54);
        operator delete(v31);
        if ((v29 & 1) == 0)
          return 3;
        ++v28;
        ++v27;
      }
      while (--v26);
    }
    v51 = SymStrlen(v53);
    v32 = SymStrlen(__src) + 1;
    v33 = 0;
    if ((_DWORD)v17)
    {
      v34 = v17;
      v35 = a6;
      v36 = a5;
      do
      {
        v37 = *v36++;
        v38 = SymStrlen(v37);
        v39 = *v35++;
        v33 += v38 + SymStrlen(v39) + 2;
        --v34;
      }
      while (v34);
    }
    v54 = 0;
    if (AddBindingAllocateBindingAndThread(a2, (v51 + v32 + v33 + 8) & 0xFFFFFFF8, v53, &v54))
    {
      return 1;
    }
    else
    {
      v40 = v54;
      v41 = *v54;
      v42 = v54[2];
      v43 = (*((_DWORD *)v42 + 2) + v51 + 1);
      *((_DWORD *)v42 + 4) = v43;
      strcpy((char *)&v41[v43], __src);
      if ((_DWORD)v17)
      {
        v44 = *((_DWORD *)v42 + 4) + v32;
        v45 = v42 + 40;
        do
        {
          *v45 = v44;
          strcpy((char *)&v41[v44], *a5);
          v46 = *a5++;
          v47 = v44 + SymStrlen(v46) + 1;
          v45[6] = v47;
          strcpy((char *)&v41[v47], *a6);
          v48 = *a6++;
          v44 = v47 + SymStrlen(v48) + 1;
          v45 += 12;
          --v17;
        }
        while (v17);
      }
      v40[1] = &v41[*((unsigned int *)v42 + 4)];
      AddBindingToProgram(v49, (uint64_t)v40);
      result = 0;
      if (v50)
        *v50 = v40;
    }
  }
  return result;
}

uint64_t ZinComputeMutableProgramAddAneSinglePlaneUncompressedBinding(_QWORD *a1, _DWORD *a2, const char *a3, const char *a4, const char *a5, const char ***a6)
{
  char *v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  int v16;
  int v17;
  const char **v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  const char **v23[3];

  v12 = (char *)operator new(0x18uLL);
  v23[1] = (const char **)(v12 + 24);
  v23[2] = (const char **)(v12 + 24);
  *(_QWORD *)v12 = a4;
  *((_QWORD *)v12 + 1) = a3;
  *((_QWORD *)v12 + 2) = a5;
  v23[0] = (const char **)v12;
  v13 = StringsAreValid(v23);
  operator delete(v12);
  result = 3;
  if (v13 && a1 && (*a2 & 0xFFFFFFFE) == 2)
  {
    v15 = SymStrlen(a3);
    v16 = SymStrlen(a4) + 1;
    v17 = SymStrlen(a5);
    v23[0] = 0;
    if (AddBindingAllocateBindingAndThread(a2, (v15 + v17 + v16 + 9) & 0xFFFFFFF8, a3, v23))
    {
      return 1;
    }
    else
    {
      v18 = v23[0];
      v19 = v23[0][2];
      v20 = v15 + *((_DWORD *)v19 + 2);
      v21 = (uint64_t)*v23[0];
      v22 = (v20 + 1);
      *((_DWORD *)v19 + 4) = v22;
      *((_DWORD *)v19 + 27) = v22 + v16;
      strcpy((char *)(v21 + v22), a4);
      strcpy((char *)(v21 + *((unsigned int *)v19 + 27)), a5);
      v18[1] = (const char *)(v21 + *((unsigned int *)v19 + 4));
      AddBindingToProgram(a1, (uint64_t)v18);
      result = 0;
      if (a6)
        *a6 = v18;
    }
  }
  return result;
}

uint64_t ZinComputeMutableProgramAddAneMultiPlaneUncompressedBinding(_QWORD *a1, unsigned int *a2, const char *a3, const char *a4, const char **a5, const char ***a6)
{
  const char **v12;
  unsigned int v13;
  uint64_t result;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char **v25;
  const char *v26;
  const char **v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  const char **v33;
  const char *v34;
  int v35;
  const char **v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  int v40;
  int v41;
  _DWORD *v42;
  const char ***v43;
  _QWORD *v44;
  const char *v45;
  _QWORD *v46;
  const char ***v47;
  const char **v48;
  const char **v49;
  const char **v50;

  v12 = (const char **)operator new(0x10uLL);
  v49 = v12 + 2;
  v50 = v12 + 2;
  *v12 = a4;
  v12[1] = a3;
  v48 = v12;
  v13 = StringsAreValid(&v48);
  operator delete(v12);
  result = 3;
  if (a2 && v13 && a1 && *a2 == 4)
  {
    v15 = a2[8];
    if (v15 > 4)
    {
      v16 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v16)
        ZinComputeProgramValidateNamesFromMultiPlaneLinear_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
      return 3;
    }
    v46 = a1;
    v47 = a6;
    if ((_DWORD)v15)
    {
      v24 = a2[8];
      v25 = a5;
      do
      {
        v26 = *v25;
        v27 = (const char **)operator new(8uLL);
        *v27 = v26;
        v49 = v27 + 1;
        v50 = v27 + 1;
        v48 = v27;
        v28 = StringsAreValid(&v48);
        operator delete(v27);
        if ((v28 & 1) == 0)
          return 3;
        ++v25;
      }
      while (--v24);
    }
    v29 = SymStrlen(a3);
    v30 = SymStrlen(a4) + 1;
    v31 = 0;
    if ((_DWORD)v15)
    {
      v32 = v15;
      v33 = a5;
      do
      {
        v34 = *v33++;
        v31 += SymStrlen(v34) + 1;
        --v32;
      }
      while (v32);
    }
    v48 = 0;
    if (AddBindingAllocateBindingAndThread(a2, (v29 + v30 + v31 + 8) & 0xFFFFFFF8, a3, &v48))
    {
      return 1;
    }
    else
    {
      v35 = v29 + 1;
      v36 = v48;
      v37 = *v48;
      v38 = v48[2];
      v39 = (*((_DWORD *)v38 + 2) + v35);
      *((_DWORD *)v38 + 4) = v39;
      strcpy((char *)&v37[v39], a4);
      v40 = *((_DWORD *)v38 + 4);
      if ((_DWORD)v15)
      {
        v41 = v40 + v30;
        v42 = v38 + 124;
        v44 = v46;
        v43 = v47;
        do
        {
          *v42 = v41;
          v42 += 26;
          strcpy((char *)&v37[v41], *a5);
          v45 = *a5++;
          v41 += SymStrlen(v45) + 1;
          --v15;
        }
        while (v15);
        v40 = *((_DWORD *)v38 + 4);
      }
      else
      {
        v44 = v46;
        v43 = v47;
      }
      v36[1] = &v37[v40];
      AddBindingToProgram(v44, (uint64_t)v36);
      result = 0;
      if (v43)
        *v43 = v36;
    }
  }
  return result;
}

uint64_t ZinComputeMutableProgramAddAneLiveInParamBinding(_QWORD *a1, _DWORD *a2, const char *a3, const char *a4, const char ***a5)
{
  char *v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  int v14;
  const char **v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char **v19[3];

  v10 = (char *)operator new(0x10uLL);
  v19[1] = (const char **)(v10 + 16);
  v19[2] = (const char **)(v10 + 16);
  *(_QWORD *)v10 = a4;
  *((_QWORD *)v10 + 1) = a3;
  v19[0] = (const char **)v10;
  v11 = StringsAreValid(v19);
  operator delete(v10);
  result = 3;
  if (a2 && v11 && a1 && *a2 == 7)
  {
    v13 = SymStrlen(a3) + 1;
    v14 = SymStrlen(a4);
    v19[0] = 0;
    if (AddBindingAllocateBindingAndThread(a2, (v14 + v13 + 8) & 0xFFFFFFF8, a3, v19))
    {
      return 1;
    }
    else
    {
      v15 = v19[0];
      v16 = (uint64_t)*v19[0];
      v17 = v19[0][2];
      v18 = (*((_DWORD *)v17 + 2) + v13);
      *((_DWORD *)v17 + 4) = v18;
      strcpy((char *)(v16 + v18), a4);
      v15[1] = (const char *)(v16 + *((unsigned int *)v17 + 4));
      AddBindingToProgram(a1, (uint64_t)v15);
      result = 0;
      if (a5)
        *a5 = v15;
    }
  }
  return result;
}

uint64_t ZinComputeProcedureMutableAneOperation::SetBarSymbol(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(_QWORD *)(result + 8 * a2 + 16) = a3;
  return result;
}

uint64_t ZinComputeProcedureMutableAneOperation::GetBarSymbol(ZinComputeProcedureMutableAneOperation *this, unsigned int a2)
{
  return *((_QWORD *)this + a2 + 2);
}

uint64_t ZinComputeMutableProgramCoalesceProcedure(_QWORD *a1, uint64_t a2)
{
  char *v4;
  const char ***v5;
  const char ***v6;
  const char **v7;
  const char *v8;
  uint64_t SymbolVariableNamesFromSNEThread;
  uint64_t **v10;
  uint64_t **i;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  _QWORD ***v15;
  _QWORD ***v16;
  _QWORD **v17;
  uint64_t v18;
  std::vector<std::string> v20;
  uint64_t v21;
  const char **v22;
  std::vector<std::string> *v23;

  v4 = *(char **)a2;
  if (a1 && v4)
  {
    v5 = (const char ***)a1[20];
    v6 = (const char ***)a1[21];
    while (v5 != v6)
    {
      v7 = *v5;
      v8 = **v5;
      if (v8 && !strncmp(v8, v4, 0x200uLL))
      {
        v22 = v7;
        goto LABEL_11;
      }
      ++v5;
    }
  }
  v22 = 0;
  SymbolVariableNamesFromSNEThread = ZinComputeMutableProgramAddProcedure(a1, v4, &v22);
  if (!(_DWORD)SymbolVariableNamesFromSNEThread)
  {
LABEL_11:
    v10 = *(uint64_t ***)(a2 + 32);
    for (i = *(uint64_t ***)(a2 + 40); v10 != i; ++v10)
    {
      v12 = *v10;
      v21 = 0;
      if (*(_DWORD *)(*a1 + 4) != 128)
        return 3;
      v13 = *(_DWORD *)(*v12 + 8);
      if (v13 == 6)
      {
        memset(&v20, 0, sizeof(v20));
        SymbolVariableNamesFromSNEThread = ZinComputeProgramGetSymbolVariableNamesFromSNEThread(*v12, (_DWORD *)v12[1], &v20);
        if ((_DWORD)SymbolVariableNamesFromSNEThread)
        {
          v23 = &v20;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
          return SymbolVariableNamesFromSNEThread;
        }
        SymbolVariableNamesFromSNEThread = ZinComputeMutableProgramAddSneOperation((uint64_t)a1, v22, (_DWORD *)v12[1], (uint64_t *)&v20, &v21);
        v23 = &v20;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      }
      else
      {
        if (v13 == 4)
        {
          v14 = ZinComputeMutableProgramAddAneSegmentOperation((uint64_t)a1, v22, v12[1], &v21);
        }
        else
        {
          if (v13 != 1)
            return 3;
          v14 = ZinComputeMutableProgramAddAneTDOperation((uint64_t)a1, v22, v12[1], &v21);
        }
        SymbolVariableNamesFromSNEThread = v14;
      }
      if ((_DWORD)SymbolVariableNamesFromSNEThread)
        return SymbolVariableNamesFromSNEThread;
    }
    v16 = *(_QWORD ****)(a2 + 56);
    v15 = *(_QWORD ****)(a2 + 64);
    while (1)
    {
      if (v16 == v15)
        return 0;
      v17 = *v16;
      v20.__begin_ = 0;
      if (*(_DWORD *)(*a1 + 4) != 128 || *((_DWORD *)*v17 + 2) != 5)
        return 3;
      v18 = ZinComputeMutableProgramAddAneAotMetadataOperation(a1, (uint64_t)v22, v17[1], &v20);
      if ((_DWORD)v18)
        break;
      ++v16;
    }
    return v18;
  }
  return SymbolVariableNamesFromSNEThread;
}

void sub_206FFE1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t ZinComputeMutableProgramCoalesceBinding(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v5;
  _DWORD *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  _OWORD v23[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  if (*(_DWORD *)(*a1 + 4) != 128)
    return 3;
  result = ZinComputeProgramGetProcedureNameFromLCThread(*(_QWORD *)a2, *(_DWORD **)(a2 + 16), &v22);
  if (!(_DWORD)result)
  {
    v5 = *(_DWORD **)(a2 + 16);
    switch(*v5)
    {
      case 1:
        *(_QWORD *)&v24 = 0;
        *(_QWORD *)&v23[0] = 0;
        v21 = 0;
        if (ZinComputeProgramGetNamesFromSinglePlaneTiledCompressed(*(_QWORD *)a2, v5 + 4, &v24, v23, &v21))ZinAssertImpl("ZinComputeProgramGetNamesFromSinglePlaneTiledCompressed failed");
        v6 = *(_DWORD **)(a2 + 16);
        v7 = v22;
        v8 = *(const char **)&v23[0];
        v9 = (const char *)v24;
        v10 = v21;
        v11 = a1;
        v12 = 0;
        return ZinComputeMutableProgramAddAneSinglePlaneCompressedBinding(v11, v6, v7, v9, v8, v10, v12, 0);
      case 2:
      case 3:
        *(_QWORD *)&v24 = 0;
        *(_QWORD *)&v23[0] = 0;
        if (ZinComputeProgramGetNamesFromSinglePlaneUncompressed(*(_QWORD *)a2, v5, &v24, v23))
          ZinAssertImpl("ZinComputeProgramGetNamesFromSinglePlaneUncompressed failed");
        return ZinComputeMutableProgramAddAneSinglePlaneUncompressedBinding(a1, *(_DWORD **)(a2 + 16), v22, (const char *)v24, *(const char **)&v23[0], 0);
      case 4:
        *(_QWORD *)&v23[0] = 0;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        LODWORD(v21) = 0;
        if (ZinComputeProgramGetNamesFromMultiPlaneLinear(*(_QWORD *)a2, v5 + 4, v23, (unsigned int *)&v21, &v24))ZinAssertImpl("ZinComputeProgramGetNamesFromMultiPlaneLinear failed");
        return ZinComputeMutableProgramAddAneMultiPlaneUncompressedBinding(a1, *(unsigned int **)(a2 + 16), v22, *(const char **)&v23[0], (const char **)&v24, 0);
      case 5:
        v21 = 0;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        memset(v23, 0, sizeof(v23));
        v20 = 0;
        if (ZinComputeProgramGetNamesFromMultiPlaneTiledCompressed(*(_QWORD *)a2, v5 + 4, &v21, &v20, &v24, v23))ZinAssertImpl("ZinComputeProgramGetNamesFromMultiPlaneTiledCompressed failed");
        return ZinComputeMutableProgramAddAneMultiPlaneCompressedBinding(a1, *(unsigned int **)(a2 + 16), v22, v21, (const char **)&v24, (const char **)v23, 0);
      case 6:
        *(_QWORD *)&v24 = 0;
        *(_QWORD *)&v23[0] = 0;
        v21 = 0;
        if (ZinComputeProgramGetNamesFromSinglePlaneTiledCompressedMultislice(*(_QWORD *)a2, v5 + 4, &v24, v23, &v21))goto LABEL_22;
        v6 = *(_DWORD **)(a2 + 16);
        v7 = v22;
        v8 = *(const char **)&v23[0];
        v9 = (const char *)v24;
        v10 = v21;
        v11 = a1;
        v12 = 1;
        return ZinComputeMutableProgramAddAneSinglePlaneCompressedBinding(v11, v6, v7, v9, v8, v10, v12, 0);
      case 7:
        *(_QWORD *)&v24 = 0;
        if (ZinComputeProgramGetParamNameFromBinding(*(_QWORD *)a2, v5, &v24))
LABEL_22:
          ZinAssertImpl("ZinComputeProgramGetNamesFromSinglePlaneTiledCompressedMultislice failed");
        return ZinComputeMutableProgramAddAneLiveInParamBinding(a1, *(_DWORD **)(a2 + 16), v22, (const char *)v24, 0);
      default:
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          ZinComputeMutableProgramCoalesceBinding((uint64_t)v23, v13, v14, v15, v16, v17, v18, v19);
        return 3;
    }
  }
  return result;
}

uint64_t ZinComputeProgramSetOperationBarInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13[16];

  result = 5;
  if (a2 && a3)
  {
    v6 = 0;
    v7 = a2 + 24;
    v8 = MEMORY[0x24BDACB70];
    do
    {
      v9 = *(uint64_t **)(v7 + v6);
      if (v9)
      {
        v10 = v9[4];
        if (*(_DWORD *)(*(_QWORD *)a1 + 12) == 1)
        {
          *(_QWORD *)(a3 + v6) = ZinComputeMutableProgramGetSectionIndex<ZinComputeMutableProgram>(a1, v9[4]);
        }
        else
        {
          v11 = *v9;
          *(_QWORD *)(a3 + v6) = *(_QWORD *)(v11 + 8);
          v12 = *(_QWORD *)(*(_QWORD *)v10 + 32);
          if (*(_QWORD *)(v11 + 8) != v12)
          {
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)v13 = 0;
              _os_log_debug_impl(&dword_2069AB000, v8, OS_LOG_TYPE_DEBUG, "ZinComputeProgramSetOperationBarInfo: symbol address not at start of section.\n", v13, 2u);
              v12 = *(_QWORD *)(*(_QWORD *)v10 + 32);
            }
            *(_QWORD *)(a3 + v6) = v12;
          }
        }
      }
      else
      {
        *(_QWORD *)(a3 + v6) = 0;
      }
      v6 += 8;
    }
    while (v6 != 2048);
    return 0;
  }
  return result;
}

uint64_t ZinComputeMutableProgramCollectOperationScheduleInfo(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  uint64_t AneTDPartitionScheduleInfo;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t *v18;
  _DWORD *v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD **v25;
  char *v27;
  void *v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  int v49[2];
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53[2];
  int v54[2];
  int v55[2];
  void *__p[2];
  _QWORD v57[2];

  v57[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(const void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 - (_QWORD)v1 == 8)
    return 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v50, v1, v2, (v2 - (uint64_t)v1) >> 3);
  v6 = v50;
  v5 = v51;
  if (v51 == v50)
  {
    AneTDPartitionScheduleInfo = 0;
    if (v51)
    {
LABEL_67:
      v51 = v5;
      operator delete(v5);
    }
    return AneTDPartitionScheduleInfo;
  }
  v7 = 0;
  while (1)
  {
    v8 = v6[v7];
    v9 = *(_DWORD *)(*(_QWORD *)v8 + 8);
    if (v9 != 4 && v9 != 1)
      goto LABEL_63;
    *(_QWORD *)v49 = 0;
    AneTDPartitionScheduleInfo = ZinComputeProgramGetAneTDPartitionScheduleInfo(0, 0, *(_DWORD **)(v8 + 8), v9, 0, &v49[1], v49, (int (*)[2])v54);
    if ((_DWORD)AneTDPartitionScheduleInfo)
      goto LABEL_72;
    v11 = v49[0];
    if (v49[0] != -1)
      break;
LABEL_62:
    v6 = v50;
    v5 = v51;
LABEL_63:
    if (++v7 >= (unint64_t)(v5 - v6))
    {
      AneTDPartitionScheduleInfo = 0;
      v5 = v6;
      if (v6)
        goto LABEL_67;
      return AneTDPartitionScheduleInfo;
    }
  }
  if (v49[0] < 3u)
  {
    v12 = (void **)(v8 + 2072);
    v13 = *(void **)(v8 + 2072);
    if (v49[0] && (uint64_t)(*(_QWORD *)(v8 + 2080) - (_QWORD)v13) >> 3 == v49[0])
    {
      v14 = 0;
      do
      {
        v15 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(a1 + 40) != v15)
        {
          v16 = 0;
          v17 = v54[v14];
          do
          {
            v18 = *(uint64_t **)(v15 + 8 * v16);
            v20 = *v18;
            v19 = (_DWORD *)v18[1];
            v55[0] = 0;
            v53[1] = 0;
            if (ZinComputeProgramGetAneTDPartitionScheduleInfo(0, 0, v19, *(_DWORD *)(v20 + 8), 0, v55, &v53[1], (int (*)[2])__p))v21 = 1;
            else
              v21 = v53[1] == -1;
            if (v21)
              break;
            if (v55[0] == v17)
              break;
            ++v16;
            v15 = *(_QWORD *)(a1 + 32);
          }
          while (v16 < (*(_QWORD *)(a1 + 40) - v15) >> 3);
        }
        ++v14;
      }
      while (v14 != v11);
      v13 = *v12;
    }
    if (v13)
    {
      *(_QWORD *)(v8 + 2080) = v13;
      operator delete(v13);
      *v12 = 0;
      *(_QWORD *)(v8 + 2080) = 0;
      *(_QWORD *)(v8 + 2088) = 0;
    }
    *(_QWORD *)(v8 + 2088) = 0;
    *(_OWORD *)v12 = 0u;
    v22 = v49[1];
    v57[0] = 0;
    v48 = 0u;
    *(_OWORD *)__p = 0u;
    v23 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(a1 + 40) != v23)
    {
      v24 = 0;
      while (1)
      {
        v25 = *(_DWORD ***)(v23 + 8 * v24);
        *(_QWORD *)v53 = 0;
        if (ZinComputeProgramGetAneTDPartitionScheduleInfo(0, 0, v25[1], (*v25)[2], 0, &v53[1], v53, (int (*)[2])v55))break;
        if (v53[0] != -1 && (v55[0] == v22 || v55[1] == v22))
        {
          v27 = (char *)__p[1];
          if (__p[1] >= (void *)v57[0])
          {
            v29 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v29 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v30 = (uint64_t)(v57[0] - (unint64_t)__p[0]) >> 2;
            if (v30 <= v29 + 1)
              v30 = v29 + 1;
            if (v57[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v57, v31);
            else
              v32 = 0;
            v33 = &v32[8 * v29];
            *(_QWORD *)v33 = v25;
            v28 = v33 + 8;
            v35 = (char *)__p[0];
            v34 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                v36 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *((_QWORD *)v33 - 1) = v36;
                v33 -= 8;
              }
              while (v34 != v35);
              v34 = (char *)__p[0];
            }
            __p[0] = v33;
            __p[1] = v28;
            v57[0] = &v32[8 * v31];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_QWORD *)__p[1] = v25;
            v28 = v27 + 8;
          }
          __p[1] = v28;
        }
        ++v24;
        v23 = *(_QWORD *)(a1 + 32);
        if (v24 >= (*(_QWORD *)(a1 + 40) - v23) >> 3)
        {
          v48 = *(_OWORD *)__p;
          v37 = v57[0];
          goto LABEL_59;
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v37 = 0;
LABEL_59:
    v38 = *(void **)(v8 + 2096);
    if (v38)
    {
      *(_QWORD *)(v8 + 2104) = v38;
      operator delete(v38);
      *(_QWORD *)(v8 + 2096) = 0;
      *(_QWORD *)(v8 + 2104) = 0;
      *(_QWORD *)(v8 + 2112) = 0;
    }
    *(_OWORD *)(v8 + 2096) = v48;
    *(_QWORD *)(v8 + 2112) = v37;
    goto LABEL_62;
  }
  v40 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v40)
    ZinComputeMutableProgramCollectOperationScheduleInfo(v40, v41, v42, v43, v44, v45, v46, v47);
  AneTDPartitionScheduleInfo = 5;
LABEL_72:
  v5 = v50;
  if (v50)
    goto LABEL_67;
  return AneTDPartitionScheduleInfo;
}

void sub_206FFE9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t ZinComputeMutableProgramFvmlibsToFile(const ZinComputeMutableProgram *a1, __sFILE *__stream)
{
  uint64_t v2;
  unint64_t v5;
  size_t v6;
  uint64_t v8;

  v2 = *((_QWORD *)a1 + 8);
  if (*((_QWORD *)a1 + 9) == v2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = fwrite(**(const void ***)(v2 + 8 * v5), *(unsigned int *)(**(_QWORD **)(v2 + 8 * v5) + 4), 1uLL, __stream);
    if (v6 != 1)
      break;
    ++v5;
    v2 = *((_QWORD *)a1 + 8);
    if (v5 >= (*((_QWORD *)a1 + 9) - v2) >> 3)
      return 0;
  }
  v8 = v6;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinComputeMutableProgramFvmlibsToFile(v5, v8);
  return 5;
}

uint64_t ZinComputeMutableProgramOperationsToFile(const ZinComputeMutableProgram *a1, __sFILE *__stream)
{
  const void ***v2;
  const void ***v3;

  v2 = (const void ***)*((_QWORD *)a1 + 11);
  v3 = (const void ***)*((_QWORD *)a1 + 12);
  if (v2 == v3)
    return 0;
  while (fwrite(**v2, *((unsigned int *)**v2 + 1), 1uLL, __stream) == 1)
  {
    if (++v2 == v3)
      return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinComputeMutableProgramOperationsToFile();
  return 5;
}

uint64_t ZinComputeMutableProgramJitOperationsToFile(const ZinComputeMutableProgram *a1, __sFILE *__stream)
{
  uint64_t v2;
  unint64_t v5;

  v2 = *((_QWORD *)a1 + 14);
  if (*((_QWORD *)a1 + 15) == v2)
    return 0;
  v5 = 0;
  while (fwrite(**(const void ***)(v2 + 8 * v5), *(unsigned int *)(**(_QWORD **)(v2 + 8 * v5) + 4), 1uLL, __stream) == 1)
  {
    ++v5;
    v2 = *((_QWORD *)a1 + 14);
    if (v5 >= (*((_QWORD *)a1 + 15) - v2) >> 3)
      return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinComputeMutableProgramOperationsToFile();
  return 5;
}

uint64_t ZinComputeMutableProgramBindingsToFile(const ZinComputeMutableProgram *a1, __sFILE *__stream)
{
  uint64_t v2;
  unint64_t v5;

  v2 = *((_QWORD *)a1 + 17);
  if (*((_QWORD *)a1 + 18) == v2)
    return 0;
  v5 = 0;
  while (fwrite(**(const void ***)(v2 + 8 * v5), *(unsigned int *)(**(_QWORD **)(v2 + 8 * v5) + 4), 1uLL, __stream) == 1)
  {
    ++v5;
    v2 = *((_QWORD *)a1 + 17);
    if (v5 >= (*((_QWORD *)a1 + 18) - v2) >> 3)
      return 0;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ZinComputeMutableProgramBindingsToFile();
  return 5;
}

void ZinComputeMutableProgramAddFvmlib(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_9(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Too many fvmlibs (more than %d).", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinComputeMutableProgramCoalesceBinding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_9(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ZinComputeMutableProgramCoalesceBinding: invalid binding type %d", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinComputeMutableProgramCollectOperationScheduleInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "The number of operations that scheduled next cannot be more than two", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinComputeMutableProgramFvmlibsToFile(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = 134218496;
  v3 = a1;
  v4 = 2048;
  v5 = a2;
  v6 = 2048;
  v7 = 1;
  _os_log_error_impl(&dword_2069AB000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "ZinComputeMutableProgramToFile: fvmlib[%zu] - wrote %zd items, expected %zd items", (uint8_t *)&v2, 0x20u);
}

void ZinComputeMutableProgramOperationsToFile()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ZinComputeMutableProgramToFile: operations commands - wrote %zd items, expected %zd items", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

void ZinComputeMutableProgramBindingsToFile()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "ZinComputeMutableProgramToFile: binding commands - wrote %zd items, expected %zd items", v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_4();
}

BOOL IsIntegerFormat<ZinTensorFormat>(int a1)
{
  return (a1 - 1) < 2;
}

uint64_t GetZinTensorFormat<__CFString const*>(uint64_t *a1)
{
  return ANECFormatToZinTensorFormat(*a1);
}

uint64_t FormatValidForMutableLayer(unsigned int a1)
{
  return (a1 < 0x1C) & (0xA222216u >> a1);
}

uint64_t ANECTensorDescToZinTensorInfo(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  const char *v11;
  _QWORD v12[2];
  uint64_t v13;

  v6 = ANECFormatToZinTensorFormat(*(_QWORD *)a1);
  *(_DWORD *)a2 = v6;
  result = CheckValidDMAFormat(a3[1259], a3[1260], a3[1261], v6);
  if ((_DWORD)result)
  {
    v12[0] = 0;
    v12[1] = 0;
    v13 = 0;
    if ((ZinGetString(*(CFStringRef *)a1, (uint64_t)v12) & 1) != 0)
    {
      v11 = (const char *)v12;
      if (v13 < 0)
        v11 = (const char *)v12[0];
      ZinAssertImpl("Error: Invalid tensor format: %s", v11);
    }
    ZinAssertImpl("Error: cannot retrieve the ANEC format \"data_type\" string");
  }
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 40) = v8;
  *(_BYTE *)(a2 + 49) = *(_BYTE *)(a1 + 57);
  v10 = *(_QWORD *)(a1 + 48);
  if (!*(_BYTE *)(a2 + 64))
    *(_BYTE *)(a2 + 64) = 1;
  *(_QWORD *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(a1 + 56);
  return result;
}

void sub_206FFEFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float ANECTensorValueDescToValues(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  float result;

  if (a1[1] * *a1 * a1[2] * a1[3] * a1[4] != 5)
    ZinAssertImpl("Tensor dimension exceeds max number of elements ANECTensorValueDesc can hold\n");
  for (i = 0; i != 20; i += 4)
  {
    result = *(float *)((char *)a1 + i + 40);
    *(_DWORD *)(a3 + i) = result;
  }
  return result;
}

void *ZinValidator::AssignAlternate<ANECSpaceToChannelLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 20632), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECPoolLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 2640), a2, 0x2A8uLL);
}

void *ZinValidator::AssignAlternate<ANECChannelToSpaceLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 21240), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECInputViewLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 4672), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECPixelShuffleLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 5928), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECInstanceNormLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 3320), a2, 0x280uLL);
}

void *ZinValidator::AssignAlternate<ANECElementWiseLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 17016), a2, 0x228uLL);
}

void *ZinValidator::AssignAlternate<ANECScaledElementWiseLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 17568), a2, 0x208uLL);
}

void *ZinValidator::AssignAlternate<ANECSoftmaxLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 21848), a2, 0x278uLL);
}

void *ZinValidator::AssignAlternate<ANECNeuronLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 13304), a2, 0x270uLL);
}

void *ZinValidator::AssignAlternate<ANECCropResizeLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 3960), a2, 0x2C8uLL);
}

void *ZinValidator::AssignAlternate<ANECDynamicSliceLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 30296), a2, 0x368uLL);
}

void *ZinValidator::AssignAlternate<ANECGatherLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 7160), a2, 0x248uLL);
}

void *ZinValidator::AssignAlternate<ANECDynamicGOCLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 9560), a2, 0x220uLL);
}

void *ZinValidator::AssignAlternate<ANECBroadcastLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 5280), a2, 0x288uLL);
}

void *ZinValidator::AssignAlternate<ANECReshapeLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 6536), a2, 0x270uLL);
}

void *ZinValidator::AssignAlternate<ANECTransposeLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 8888), a2, 0x2A0uLL);
}

char *ZinValidator::AssignAlternate<ANECGOCLayerDescAlternate>(uint64_t a1, void *__src)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v4 = *(_QWORD *)(a1 + 24888);
  v5 = *(_QWORD *)(a1 + 24896);
  if (v4 >= v5)
  {
    v7 = (void **)(a1 + 24880);
    v8 = *(_QWORD *)(a1 + 24880);
    v9 = 0x14C1BACF914C1BADLL * ((uint64_t)(v4 - v8) >> 4);
    if ((unint64_t)(v9 + 1) > 0x6EB3E45306EB3ELL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x14C1BACF914C1BADLL * ((uint64_t)(v5 - v8) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x3759F22983759FLL)
      v12 = 0x6EB3E45306EB3ELL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANECGOCLayerDescAlternate>>(a1 + 24896, v12);
    else
      v13 = 0;
    v14 = &v13[592 * v9];
    v15 = &v13[592 * v12];
    memcpy(v14, __src, 0x250uLL);
    v6 = v14 + 592;
    v16 = *(char **)(a1 + 24888);
    v17 = *(char **)(a1 + 24880);
    if (v16 != v17)
    {
      do
      {
        v16 -= 592;
        v14 -= 592;
        memcpy(v14, v16, 0x250uLL);
      }
      while (v16 != v17);
      v16 = (char *)*v7;
    }
    *(_QWORD *)(a1 + 24880) = v14;
    *(_QWORD *)(a1 + 24888) = v6;
    *(_QWORD *)(a1 + 24896) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    memcpy(*(void **)(a1 + 24888), __src, 0x250uLL);
    v6 = (char *)(v4 + 592);
  }
  *(_QWORD *)(a1 + 24888) = v6;
  return v6 - 592;
}

void *ZinValidator::AssignAlternate<ANECLRNLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 12664), a2, 0x280uLL);
}

void *ZinValidator::AssignAlternate<ANECNMSLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 29160), a2, 0x230uLL);
}

void *ZinValidator::AssignAlternate<ANECPadLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 18088), a2, 0x2D0uLL);
}

void *ZinValidator::AssignAlternate<ANECSortLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 28024), a2, 0x470uLL);
}

void *ZinValidator::AssignAlternate<ANECTileLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 24256), a2, 0x270uLL);
}

void *ZinValidator::AssignAlternate<ANECTopKLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 7744), a2, 0x478uLL);
}

void *ZinValidator::AssignAlternate<ANECL2NormLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 11400), a2, 0x278uLL);
}

void *ZinValidator::AssignAlternate<ANECResizeLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 24904), a2, 0x298uLL);
}

void *ZinValidator::AssignAlternate<ANECResampleLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 27336), a2, 0x2B0uLL);
}

char *ZinValidator::AssignAlternate<ANECDropoutLayerDescAlternate>(uint64_t a1, void *__src)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v4 = *(_QWORD *)(a1 + 29728);
  v5 = *(_QWORD *)(a1 + 29736);
  if (v4 >= v5)
  {
    v7 = (void **)(a1 + 29720);
    v8 = *(_QWORD *)(a1 + 29720);
    v9 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - v8) >> 5);
    if (v9 + 1 > 0x6BCA1AF286BCA1)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v5 - v8) >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x35E50D79435E50)
      v12 = 0x6BCA1AF286BCA1;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANECDropoutLayerDescAlternate>>(a1 + 29736, v12);
    else
      v13 = 0;
    v14 = &v13[608 * v9];
    v15 = &v13[608 * v12];
    memcpy(v14, __src, 0x260uLL);
    v6 = v14 + 608;
    v16 = *(char **)(a1 + 29728);
    v17 = *(char **)(a1 + 29720);
    if (v16 != v17)
    {
      do
      {
        v16 -= 608;
        v14 -= 608;
        memcpy(v14, v16, 0x260uLL);
      }
      while (v16 != v17);
      v16 = (char *)*v7;
    }
    *(_QWORD *)(a1 + 29720) = v14;
    *(_QWORD *)(a1 + 29728) = v6;
    *(_QWORD *)(a1 + 29736) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    memcpy(*(void **)(a1 + 29728), __src, 0x260uLL);
    v6 = (char *)(v4 + 608);
  }
  *(_QWORD *)(a1 + 29728) = v6;
  return v6 - 608;
}

void *ZinValidator::AssignAlternate<ANECFlattenLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 23032), a2, 0x268uLL);
}

void *ZinValidator::AssignAlternate<ANECUnflattenLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 23648), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECArgMinMaxLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 10744), a2, 0x290uLL);
}

void *ZinValidator::AssignAlternate<ANECLayerNormLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 10104), a2, 0x280uLL);
}

void *ZinValidator::AssignAlternate<ANECRingBufferWriterLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 14504), a2, 0x2F0uLL);
}

void *ZinValidator::AssignAlternate<ANECReductionLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 15800), a2, 0x290uLL);
}

void *ZinValidator::AssignAlternate<ANECMinMaxNormLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 12032), a2, 0x278uLL);
}

void *ZinValidator::AssignAlternate<ANECBatchToSpaceLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 20024), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECSpaceToBatchLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 19416), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECPixelUnshuffleLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 18808), a2, 0x260uLL);
}

void *ZinValidator::AssignAlternate<ANECGlobalArgMinMaxLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 40), a2, 0x258uLL);
}

void *ZinValidator::AssignAlternate<ANECLinearLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 2096), a2, 0x208uLL);
}

void *ZinValidator::AssignAlternate<ANECMatrixMultLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 22480), a2, 0x228uLL);
}

void *ZinValidator::AssignAlternate<ANECAffineTransformLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 26608), a2, 0x2D8uLL);
}

void *ZinValidator::AssignAlternate<ANECRandomLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 29744), a2, 0x228uLL);
}

void *ZinValidator::AssignAlternate<ANECCrossCorrelationLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 640), a2, 0x2B8uLL);
}

void *ZinValidator::AssignAlternate<ANECCrossProductLayerDescAlternate>(uint64_t a1, const void *a2)
{
  return memcpy((void *)(a1 + 16456), a2, 0x218uLL);
}

void ANECTextureInfoToZin(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 *v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    v6 = 0;
    v7 = (uint64_t)(a3 + 2);
    do
    {
      v25 = 0;
      v8 = (_BOOL8 *)(a1 + 16 * v6);
      v9 = CFStringToZinIrCoordinate(*v8, (int *)&v25 + 1);
      v10 = CFStringToZinIrSamplingGridMode(v8[1], (int *)&v25);
      if (!v9 || !v10)
        ZinAssertImpl("Invalid sampling grid mode");
      v12 = v25;
      v11 = HIDWORD(v25);
      v14 = (unint64_t *)a3[1];
      v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((char *)v14 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v17 = v13 - (_QWORD)*a3;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v19);
        else
          v20 = 0;
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v11 | (v12 << 32);
        v15 = v21 + 8;
        v23 = (char *)*a3;
        v22 = (char *)a3[1];
        if (v22 != *a3)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          v22 = (char *)*a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = HIDWORD(v25) | ((unint64_t)v25 << 32);
        v15 = v14 + 1;
      }
      a3[1] = v15;
      ++v6;
    }
    while (v6 != a2);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 *v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    v6 = 0;
    v7 = (uint64_t)(a3 + 2);
    do
    {
      v25 = 0;
      v8 = (_BOOL8 *)(a1 + 16 * v6);
      v9 = CFStringToZinIrCoordinate(*v8, (int *)&v25 + 1);
      v10 = CFStringToZinIrSamplingMethod(v8[1], (int *)&v25);
      if (!v9 || !v10)
        ZinAssertImpl("Invalid sampling method information");
      v12 = v25;
      v11 = HIDWORD(v25);
      v14 = (unint64_t *)a3[1];
      v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((char *)v14 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v17 = v13 - (_QWORD)*a3;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v19);
        else
          v20 = 0;
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v11 | (v12 << 32);
        v15 = v21 + 8;
        v23 = (char *)*a3;
        v22 = (char *)a3[1];
        if (v22 != *a3)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          v22 = (char *)*a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = HIDWORD(v25) | ((unint64_t)v25 << 32);
        v15 = v14 + 1;
      }
      a3[1] = v15;
      ++v6;
    }
    while (v6 != a2);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  _BOOL8 *v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    v6 = 0;
    v7 = (uint64_t)(a3 + 2);
    do
    {
      v25 = 0;
      v8 = (_BOOL8 *)(a1 + 16 * v6);
      v9 = CFStringToZinIrCoordinate(*v8, (int *)&v25 + 1);
      v10 = CFStringToZinIrTEPaddingMode(v8[1], (int *)&v25);
      if (!v9 || !v10)
        ZinAssertImpl("Invalid padding information");
      v12 = v25;
      v11 = HIDWORD(v25);
      v14 = (unint64_t *)a3[1];
      v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((char *)v14 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v17 = v13 - (_QWORD)*a3;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v19);
        else
          v20 = 0;
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v11 | (v12 << 32);
        v15 = v21 + 8;
        v23 = (char *)*a3;
        v22 = (char *)a3[1];
        if (v22 != *a3)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          v22 = (char *)*a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = HIDWORD(v25) | ((unint64_t)v25 << 32);
        v15 = v14 + 1;
      }
      a3[1] = v15;
      ++v6;
    }
    while (v6 != a2);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a2)
  {
    v6 = 0;
    v7 = (uint64_t)(a3 + 2);
    do
    {
      v25 = 0;
      v8 = a1 + 16 * v6;
      v9 = CFStringToZinIrCoordinate(*(_QWORD *)v8, (int *)&v25 + 1);
      v10 = CFStringToZinIrCoordinateType(*(const __CFString **)(v8 + 8), (int *)&v25);
      if (!v9 || (v10 & 1) == 0)
        ZinAssertImpl("Invalid coordinate type information");
      v12 = v25;
      v11 = HIDWORD(v25);
      v14 = (unint64_t *)a3[1];
      v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((char *)v14 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v17 = v13 - (_QWORD)*a3;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v19);
        else
          v20 = 0;
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v11 | (v12 << 32);
        v15 = v21 + 8;
        v23 = (char *)*a3;
        v22 = (char *)a3[1];
        if (v22 != *a3)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          v22 = (char *)*a3;
        }
        *a3 = v21;
        a3[1] = v15;
        a3[2] = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = HIDWORD(v25) | ((unint64_t)v25 << 32);
        v15 = v14 + 1;
      }
      a3[1] = v15;
      ++v6;
    }
    while (v6 != a2);
  }
}

void ANECTextureInfoToZin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  unsigned __int8 v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  if (a2)
  {
    v6 = 0;
    v28 = a3 + 16;
    do
    {
      v30 = 0;
      v29 = 0;
      v7 = a1 + 24 * v6;
      v8 = CFStringToZinIrCoordinate(*(_QWORD *)v7, (int *)&v30 + 1);
      v9 = CFStringToZinIrNormalizedCoordinateRange(*(_QWORD *)(v7 + 8), (int *)&v30);
      v10 = CFStringToZinIrCoordinateMode(*(const __CFString **)(v7 + 16), &v29);
      v11 = !v8 || !v9;
      if (v11 || (v10 & 1) == 0)
        ZinAssertImpl("Invalid coordinate type information");
      v12 = v30;
      v13 = HIDWORD(v30);
      v14 = v29;
      v16 = *(_DWORD **)(a3 + 8);
      v15 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v16 >= v15)
      {
        v18 = *(_DWORD **)a3;
        v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - *(_QWORD *)a3) >> 2);
        v20 = v19 + 1;
        if (v19 + 1 > 0x1555555555555555)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v18) >> 2);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0xAAAAAAAAAAAAAAALL)
          v22 = 0x1555555555555555;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>(v28, v22);
          v18 = *(_DWORD **)a3;
          v16 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[12 * v19];
        *(_DWORD *)v24 = v13;
        *((_DWORD *)v24 + 1) = v12;
        *((_DWORD *)v24 + 2) = v14;
        v25 = v24;
        if (v16 != v18)
        {
          do
          {
            v26 = *(_QWORD *)(v16 - 3);
            v16 -= 3;
            v27 = v16[2];
            *(_QWORD *)(v25 - 12) = v26;
            v25 -= 12;
            *((_DWORD *)v25 + 2) = v27;
          }
          while (v16 != v18);
          v18 = *(_DWORD **)a3;
        }
        v17 = v24 + 12;
        *(_QWORD *)a3 = v25;
        *(_QWORD *)(a3 + 8) = v24 + 12;
        *(_QWORD *)(a3 + 16) = &v23[12 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v16 = HIDWORD(v30);
        v16[1] = v12;
        v17 = v16 + 3;
        v16[2] = v14;
      }
      *(_QWORD *)(a3 + 8) = v17;
      ++v6;
    }
    while (v6 != a2);
  }
}

void ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>::~ZinConcatValidator(uint64_t a1)
{
  ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>::~ZinConcatValidator(a1);
  JUMPOUT(0x20BD002F8);
}

_QWORD *std::vector<ANECTensorDesc>::__init_with_size[abi:ne180100]<ANECTensorDesc*,ANECTensorDesc*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<ZinDynamicOffsetCustomBarCmd>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_206FFFD60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>>,ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc> const*,ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc> const*,ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>::ZinConcatValidator(a4 + v7, a2 + v7);
      v7 += 104;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_206FFFDD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 104;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 104;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 104;
      v7 = v4 - 104;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 104;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ANECDropoutLayerDescAlternate>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x6BCA1AF286BCA2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(608 * a2);
}

ZinIrCompilerParameters *std::unique_ptr<ZinIrCompilerParameters>::reset[abi:ne180100](ZinIrCompilerParameters **a1, ZinIrCompilerParameters *a2)
{
  ZinIrCompilerParameters *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ZinIrCompilerParameters::~ZinIrCompilerParameters(result);
    JUMPOUT(0x20BD002F8);
  }
  return result;
}

void std::vector<ANECConcatLayerDescAlternate>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xF128CFC4A33F128DLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x76B981DAE6076CLL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 552;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANECConcatLayerDescAlternate>>(v3, a2);
    v7 = &v6[552 * v5];
    v9 = &v6[552 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v10 -= 552;
        v12 -= 552;
        memcpy(v12, v10, 0x228uLL);
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t std::vector<std::vector<ANECTensorDesc>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<ANECTensorDesc>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_2070000B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<ANECTensorDesc>>::emplace_back<std::vector<ANECTensorDesc>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<ANECTensorDesc>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_2070001F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ZinIrOpLayer *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<ANECTensorDesc>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ANECTensorDesc>>,std::reverse_iterator<std::vector<ANECTensorDesc>*>,std::reverse_iterator<std::vector<ANECTensorDesc>*>,std::reverse_iterator<std::vector<ANECTensorDesc>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ANECTensorDesc>>,std::reverse_iterator<std::vector<ANECTensorDesc>*>,std::reverse_iterator<std::vector<ANECTensorDesc>*>,std::reverse_iterator<std::vector<ANECTensorDesc>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ANECTensorDesc>>,std::reverse_iterator<std::vector<ANECTensorDesc>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ANECTensorDesc>>,std::reverse_iterator<std::vector<ANECTensorDesc>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ZinIrOpLayer *>>,std::reverse_iterator<std::vector<ZinIrOpLayer *>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateUnitWithLargeKernelStrides(uint64_t a1)
{
  _QWORD *v2;
  __int128 v3;
  uint64_t v4;
  int v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  int KernelFormat;
  char v15;
  int v16;
  __int128 v17;
  __int128 v18;
  void **v19;
  _QWORD **v20;
  _QWORD *v21[5];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[48];
  __int128 v38;
  _OWORD v39[11];
  int64x2_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  _QWORD v51[3];
  void *v52[4];
  int v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 __p;
  uint64_t v65;
  int v66;
  char v67;
  __int16 v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  char v76;
  int64x2_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int64x2_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  int64x2_t v98;
  int8x16_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  _BYTE v103[24];
  __int128 v104;
  uint64_t v105;
  int v106;
  _BYTE v107[12];
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  void *v117[4];
  int v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  char v132;
  __int16 v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  char v141;
  _BYTE v142[32];
  _BYTE v143[24];
  __int128 v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  void *v148;
  uint64_t v149[3];
  uint64_t *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;

  v148 = &unk_24C01C7C8;
  v2 = (_QWORD *)(a1 + 8);
  std::set<__CFString const*>::set[abi:ne180100](v149, a1 + 8);
  v150 = *(uint64_t **)(a1 + 32);
  v148 = &unk_24C01B6F0;
  v3 = *(_OWORD *)(a1 + 280);
  v165 = *(_OWORD *)(a1 + 264);
  v166 = v3;
  v163 = *(_OWORD *)(a1 + 232);
  v164 = *(_OWORD *)(a1 + 248);
  v159 = *(_OWORD *)(a1 + 168);
  v160 = *(_OWORD *)(a1 + 184);
  v161 = *(_OWORD *)(a1 + 200);
  v162 = *(_OWORD *)(a1 + 216);
  v155 = *(_OWORD *)(a1 + 104);
  v156 = *(_OWORD *)(a1 + 120);
  v157 = *(_OWORD *)(a1 + 136);
  v158 = *(_OWORD *)(a1 + 152);
  v151 = *(_OWORD *)(a1 + 40);
  v152 = *(_OWORD *)(a1 + 56);
  v153 = *(_OWORD *)(a1 + 72);
  v154 = *(_OWORD *)(a1 + 88);
  v4 = *v150;
  v5 = *(_DWORD *)(a1 + 200);
  if (v5 < 3)
  {
    v6 = *(_DWORD *)(a1 + 204);
    if (v6 <= 2 && *(int *)(a1 + 208) <= 2)
    {
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v148);
      goto LABEL_36;
    }
    v147 = a1;
    if (v5 < 1)
      goto LABEL_10;
  }
  else
  {
    v147 = a1;
    v6 = *(_DWORD *)(a1 + 204);
  }
  if (v6 < 1 || *(int *)(a1 + 208) <= 0)
  {
LABEL_10:
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateUnitWithLargeKernelStrides(void)::{lambda(ZinIrHalParameters const&)#1}::operator()(&v147);
    goto LABEL_36;
  }
  v118 = 0;
  v119 = 0u;
  v120 = 0u;
  v121 = -1;
  v122 = 0;
  v123 = -1;
  v124 = -1;
  v125 = -1;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v126 = -1;
  v130 = 0;
  v131 = 1;
  v132 = 0;
  v133 = 0;
  v134 = -1;
  v135 = -1;
  v136 = -1;
  v137 = -1;
  v138 = 0x3F80000000000006;
  memset(&v117[1], 0, 24);
  v117[0] = off_24C01CAD8;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  *(int64x2_t *)v142 = vdupq_n_s64(1uLL);
  *(_OWORD *)&v142[16] = *(_OWORD *)v142;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)v143 = v7;
  *(_QWORD *)&v143[16] = 0x100000001;
  v145 = 0;
  v144 = 0uLL;
  v146 = 1;
  ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Desc2UnitInfo(a1, a1 + 120, (uint64_t)v117);
  v116 = ANECFormatToZinTensorFormat(*(_QWORD *)(a1 + 56));
  DWORD2(v120) = v116;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0u;
  v96 = 0u;
  v97 = 0;
  v89 = 0;
  v90 = 0;
  v98 = vdupq_n_s64(1uLL);
  v99 = (int8x16_t)v98;
  v100 = v98;
  v101 = v98;
  v102 = v98;
  v105 = 0;
  v104 = 0uLL;
  *(_QWORD *)v107 = 0x100000000;
  *(_DWORD *)&v107[8] = 1;
  v110 = 0;
  v115 = 0;
  v111 = 1;
  v112 = 0;
  v114 = 0;
  v113 = 0;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  *(_OWORD *)v103 = v8;
  *(_QWORD *)&v103[16] = 0x100000001;
  if ((v140 - 5) >= 0xFFFFFFFE)
  {
    *(_QWORD *)&v103[12] = *(_QWORD *)&v143[12];
    *(_DWORD *)&v103[20] = *(_DWORD *)&v143[20];
  }
  else
  {
    *(_QWORD *)v103 = *(_QWORD *)&v143[12];
    *(_DWORD *)&v103[8] = *(_DWORD *)&v143[20];
  }
  v104 = v144;
  v105 = v145;
  v106 = v146;
  *(_QWORD *)&v107[4] = *(_QWORD *)v143;
  v108 = *(_DWORD *)&v143[8];
  v109 = *(_QWORD *)v142;
  LOBYTE(v115) = (((v140 - 5) > 0xFFFFFFFD) << 6) | (v141 << 7);
  v99 = vextq_s8(*(int8x16_t *)&v142[8], *(int8x16_t *)&v142[8], 8uLL);
  v100.i64[0] = *(_QWORD *)&v142[24];
  v9 = *(_OWORD *)(a1 + 80);
  v86 = *(int64x2_t *)(a1 + 64);
  v87 = v9;
  v88 = *(_QWORD *)(a1 + 96);
  v53 = 0;
  v54 = 0u;
  v55 = 0u;
  v56 = -1;
  v57 = 0;
  v58 = -1;
  v59 = -1;
  v60 = -1;
  v62 = 0u;
  v63 = 0u;
  __p = 0u;
  v61 = -1;
  v65 = 0;
  v66 = 1;
  v67 = 0;
  v68 = 0;
  v69 = -1;
  v70 = -1;
  v71 = -1;
  v72 = -1;
  v73 = 0x3F80000000000006;
  memset(&v52[1], 0, 24);
  v52[0] = off_24C01CAD8;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = vdupq_n_s64(1uLL);
  v78 = 1;
  v79 = 1;
  *(_QWORD *)&v10 = 0x100000001;
  *((_QWORD *)&v10 + 1) = 0x100000001;
  v80 = v10;
  v81 = 0x100000001;
  v84 = 0;
  v82 = 0;
  v83 = 0;
  v85 = 1;
  if (IsDeconv<ANECConvLayerDesc>((const __CFString **)(a1 + 120))
    && (*(_QWORD *)(a1 + 176) > (unint64_t)ZinIrHalParameters::GetMaxSmallKernelWidth(v4, v116)
     && *(int *)(a1 + 200) > 2
     || *(_QWORD *)(a1 + 184) > *(_QWORD *)(v4 + 112) && *(int *)(a1 + 204) > 2
     || *(_QWORD *)(a1 + 192) > *(_QWORD *)(v4 + 128) && *(int *)(a1 + 208) >= 3))
  {
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateUnitWithLargeKernelStrides(void)::{lambda(ZinIrHalParameters const&)#1}::operator()(&v147);
  }
  else
  {
    v11 = IsDeconv<ANECConvLayerDesc>((const __CFString **)(a1 + 120));
    v12 = *(_QWORD *)(a1 + 152);
    v13 = *(uint64_t **)(a1 + 32);
    if (v11)
    {
      KernelFormat = ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::GetKernelFormat(a1);
      v15 = ValidateLargeKernelStridesForDeconv(v117, (uint64_t)&v89, (int *)&v116, (__int128 *)v86.i8, v12, v13, KernelFormat, *(_BYTE *)(a1 + 112), *(_BYTE *)(a1 + 113), *(_QWORD *)(a1 + 104), 1, (uint64_t)v52);
    }
    else
    {
      v16 = ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::GetKernelFormat(a1);
      v15 = ValidateLargeKernelStridesForConv((ZinConvLayerUtils *)v117, (uint64_t)&v89, (int *)&v116, &v86, v12, v13, v16, *(_BYTE *)(a1 + 112), *(_BYTE *)(a1 + 113), *(_QWORD *)(a1 + 104), 1, (uint64_t)v52);
    }
    if ((v15 & 1) != 0)
    {
      memset(v51, 0, sizeof(v51));
      v40 = vdupq_n_s64(1uLL);
      v41 = 1;
      *(_QWORD *)&v17 = 0x100000001;
      *((_QWORD *)&v17 + 1) = 0x100000001;
      v42 = v17;
      v43 = 0x100000001;
      v44 = 0;
      v45 = 0;
      v47 = v17;
      v46 = 0;
      v48 = 1;
      v49 = 0;
      v50 = 0;
      ZinIrConvUnit::CreateConvInfo((uint64_t)v52, (uint64_t)&v40);
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvDesc(a1, (uint64_t)&v40, v116, (uint64_t)v39, v75);
      v18 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)v37 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)&v37[16] = v18;
      v38 = *(_OWORD *)(a1 + 104);
      *(int64x2_t *)&v37[8] = v86;
      *(_OWORD *)&v37[24] = v87;
      *(_QWORD *)&v37[40] = v88;
      v21[2] = *(_QWORD **)(a1 + 32);
      v21[3] = v37;
      v21[4] = v39;
      v22 = *(_OWORD *)v37;
      v23 = *(_OWORD *)&v37[16];
      v24 = *(_OWORD *)&v37[32];
      v25 = v38;
      v35 = v39[9];
      v36 = v39[10];
      v26 = v39[0];
      v27 = v39[1];
      v28 = v39[2];
      v32 = v39[6];
      v31 = v39[5];
      v30 = v39[4];
      v29 = v39[3];
      v34 = v39[8];
      v33 = v39[7];
      v19 = (void **)&unk_24C01B6F0;
      v20 = v21;
      v21[0] = 0;
      v21[1] = 0;
      ZinUnitValidator::AddErrors((uint64_t *)&v19, v2);
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v19);
      v19 = (void **)&unk_24C01C7C8;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v20, v21[0]);
      v19 = (void **)v51;
      std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    else
    {
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateUnitWithLargeKernelStrides(void)::{lambda(ZinIrHalParameters const&)#1}::operator()(&v147);
    }
  }
  v52[0] = off_24C01ED88;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (*((_QWORD *)&v62 + 1))
  {
    *(_QWORD *)&v63 = *((_QWORD *)&v62 + 1);
    operator delete(*((void **)&v62 + 1));
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v52);
  v117[0] = off_24C01ED88;
  if ((_QWORD)v129)
  {
    *((_QWORD *)&v129 + 1) = v129;
    operator delete((void *)v129);
  }
  if (*((_QWORD *)&v127 + 1))
  {
    *(_QWORD *)&v128 = *((_QWORD *)&v127 + 1);
    operator delete(*((void **)&v127 + 1));
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v117);
LABEL_36:
  v148 = &unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v149, (_QWORD *)v149[1]);
}

void sub_207000AF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x2C0]);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x560]);
  STACK[0x6B8] = (unint64_t)&unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v1, (_QWORD *)STACK[0x6C8]);
  _Unwind_Resume(a1);
}

BOOL ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::IsLargeKernelSize(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int64_t MaxLogicalKernelWidthForLargeKernelMode;
  int64_t MaxLogicalKernelHeightForLargeKernelMode;

  v2 = **(_QWORD **)(a1 + 32);
  v3 = ANECFormatToZinTensorFormat(**(_QWORD **)(a1 + 40));
  MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(v2, v3);
  MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode(v2);
  return *(_QWORD *)(a1 + 176) > MaxLogicalKernelWidthForLargeKernelMode
      || *(_QWORD *)(a1 + 184) > MaxLogicalKernelHeightForLargeKernelMode;
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateUnitWithLargeKernelSize(uint64_t a1)
{
  uint64_t **v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  uint64_t v11;
  __int128 v12;
  void **v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  _BOOL4 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  char *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  __int128 v28;
  void **v29;
  char *v30;
  uint64_t v31;
  void **v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  int64_t MaxLogicalKernelWidthForLargeKernelMode;
  int64_t MaxLogicalKernelHeightForLargeKernelMode;
  void **v42;
  __int128 v43;
  __int128 v44;
  uint64_t **v45;
  _BYTE v46[48];
  __int128 v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  void *v60;
  void *__p;
  _QWORD **v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  __int128 *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  __int128 v84;
  _OWORD v85[2];
  char v86;
  char v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  __int128 v94;
  _OWORD v95[2];
  char v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  __int128 v104;
  _OWORD v105[2];
  char v106;
  char v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  __int16 v117;
  char v118;
  char v119;
  char v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  void **p_p;
  __int128 v126;
  _OWORD v127[2];
  char v128;
  char v129;
  char v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  __int128 v135[2];
  char **v136;
  char *v137[2];
  uint64_t *v138;
  _QWORD *v139[2];
  int64x2_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  __int16 v149;
  int v150;
  uint64_t v151;
  int v152;
  _OWORD v153[2];
  uint64_t v154;
  int64x2_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  _QWORD v159[3];
  __int128 v160;
  uint64_t v161;
  __int16 v162;
  int v163;
  void *v164[4];
  int v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  int v178;
  char v179;
  __int16 v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  char v188;
  int64x2_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  void *v198;
  uint64_t v199[3];
  uint64_t *v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  _OWORD *v217[3];

  v198 = &unk_24C01C7C8;
  v2 = (uint64_t **)(a1 + 8);
  std::set<__CFString const*>::set[abi:ne180100](v199, a1 + 8);
  v200 = *(uint64_t **)(a1 + 32);
  v198 = &unk_24C01B6F0;
  v3 = *(_OWORD *)(a1 + 280);
  v215 = *(_OWORD *)(a1 + 264);
  v216 = v3;
  v213 = *(_OWORD *)(a1 + 232);
  v214 = *(_OWORD *)(a1 + 248);
  v209 = *(_OWORD *)(a1 + 168);
  v210 = *(_OWORD *)(a1 + 184);
  v211 = *(_OWORD *)(a1 + 200);
  v212 = *(_OWORD *)(a1 + 216);
  v205 = *(_OWORD *)(a1 + 104);
  v206 = *(_OWORD *)(a1 + 120);
  v207 = *(_OWORD *)(a1 + 136);
  v208 = *(_OWORD *)(a1 + 152);
  v201 = *(_OWORD *)(a1 + 40);
  v202 = *(_OWORD *)(a1 + 56);
  v203 = *(_OWORD *)(a1 + 72);
  v204 = *(_OWORD *)(a1 + 88);
  v4 = *v200;
  if (ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::IsLargeKernelSize(a1))
  {
    v45 = v2;
    v165 = 0;
    v166 = 0u;
    v167 = 0u;
    v168 = -1;
    v169 = 0;
    v170 = -1;
    v171 = -1;
    v172 = -1;
    v174 = 0u;
    v175 = 0u;
    v176 = 0u;
    v173 = -1;
    v177 = 0;
    v178 = 1;
    v179 = 0;
    v180 = 0;
    v181 = -1;
    v182 = -1;
    v183 = -1;
    v184 = -1;
    v185 = 0x3F80000000000006;
    memset(&v164[1], 0, 24);
    v164[0] = off_24C01CAD8;
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v189 = vdupq_n_s64(1uLL);
    v190 = 1;
    v191 = 1;
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    v192 = v5;
    v193 = 0x100000001;
    v196 = 0;
    v194 = 0;
    v195 = 0;
    v197 = 1;
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Desc2UnitInfo(a1, a1 + 120, (uint64_t)v164);
    v6 = ANECFormatToZinTensorFormat(*(_QWORD *)(a1 + 56));
    DWORD2(v167) = v6;
    v155 = vdupq_n_s64(1uLL);
    v156 = 1;
    *(_QWORD *)&v7 = 0x100000001;
    *((_QWORD *)&v7 + 1) = 0x100000001;
    v157 = v7;
    v158 = 0x100000001;
    memset(v159, 0, sizeof(v159));
    v160 = v7;
    v161 = 1;
    v162 = 0;
    v163 = 0;
    ZinIrConvUnit::CreateConvInfo((uint64_t)v164, (uint64_t)&v155);
    v8 = *(_OWORD *)(a1 + 80);
    v153[0] = *(_OWORD *)(a1 + 64);
    v153[1] = v8;
    v154 = *(_QWORD *)(a1 + 96);
    v151 = 0x100000001;
    v152 = 1;
    v140 = vdupq_n_s64(1uLL);
    v141 = 1;
    *(_QWORD *)&v9 = 0x100000001;
    *((_QWORD *)&v9 + 1) = 0x100000001;
    v142 = v9;
    v143 = 0x100000001;
    v144 = 0;
    v145 = 0;
    v147 = v9;
    v146 = 0;
    v148 = 1;
    v149 = 0;
    v150 = 0;
    v139[1] = 0;
    v139[0] = 0;
    v138 = (uint64_t *)v139;
    v137[1] = 0;
    v137[0] = 0;
    v136 = v137;
    ZinGetOutputTensorDimension((uint64_t)v153, &v155, (unsigned int *)&v157, (unsigned int *)&v157 + 3, (int *)v159, *(_QWORD *)(a1 + 152), (int *)&v160, (uint64_t)v135);
    if (!ZinLargeKernelSizeUtils::DecomposeLargeKernelConvDesc((uint64_t *)v153, v135, &v155, v6, v4, (int *)&v151, &v140, &v138, (uint64_t **)&v136))goto LABEL_42;
    std::string::basic_string[abi:ne180100]<0>(&__p, "unshuffle");
    v10 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "shuffle");
    v42 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    v128 = 0;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    v126 = 0u;
    memset(v127, 0, 26);
    v133 = 0;
    v132 = 0;
    v134 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v117 = 0;
    v123 = 0;
    v122 = 0;
    v124 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v104 = 0u;
    memset(v105, 0, 26);
    v111 = 0;
    v110 = 0;
    v112 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v94 = 0u;
    memset(v95, 0, 26);
    v101 = 0;
    v100 = 0;
    v102 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v84 = 0u;
    memset(v85, 0, 26);
    v91 = 0;
    v90 = 0;
    v92 = 0;
    LODWORD(p_p) = v6;
    v113 = v6;
    v103 = v6;
    v93 = v6;
    v83 = v6;
    v11 = *(_QWORD *)(a1 + 96);
    v12 = *(_OWORD *)(a1 + 80);
    v114 = *(_OWORD *)(a1 + 64);
    v115 = v12;
    v116 = v11;
    std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
    v13 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    if (v139 == (_QWORD **)v13)
    {
      v19 = 1;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 96);
      v15 = *(_OWORD *)(a1 + 80);
      v126 = *(_OWORD *)(a1 + 64);
      v127[0] = v15;
      *(_QWORD *)&v127[1] = v14;
      std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
      *(_QWORD *)&v49 = &__p;
      v16 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v49);
      if (SHIBYTE(v63) < 0)
        operator delete(__p);
      v17 = *((_QWORD *)v16 + 11);
      v18 = *(_OWORD *)(v16 + 72);
      v114 = *(_OWORD *)(v16 + 56);
      v115 = v18;
      v116 = v17;
      ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&__p, *(_QWORD *)(a1 + 32), v13 + 8, &p_p);
      ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&__p);
      v19 = v64 == 0;
      ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
    *(_QWORD *)&v49 = &__p;
    v20 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v49);
    v21 = (uint64_t)(v10 + 8);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    v22 = *((_QWORD *)v20 + 11);
    v104 = *(_OWORD *)(v20 + 56);
    v105[0] = *(_OWORD *)(v20 + 72);
    *(_QWORD *)&v105[1] = v22;
    ZinPixelUnshuffleValidator<ZinIrPixelUnshuffleUnitInfo,ZinIrTensorInfo>::ZinPixelUnshuffleValidator((uint64_t)&v49, *(_QWORD *)(a1 + 32), v21, (__int128 *)&v113);
    ZinPixelShuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::ZinPixelShuffleValidator((uint64_t)v46, *(_QWORD *)(a1 + 32), (uint64_t)(v42 + 8), (__int128 *)&v103);
    ZinPixelUnshuffleValidator<ZinIrPixelUnshuffleUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v49);
    ZinPixelShuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)v46);
    if (*(_QWORD *)&v46[24] | *((_QWORD *)&v50 + 1))
      v23 = 0;
    else
      v23 = v19;
    std::string::basic_string[abi:ne180100]<0>(&__p, "shuffle");
    v217[0] = &__p;
    v24 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, v217);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    v25 = *((_QWORD *)v24 + 11);
    v84 = *(_OWORD *)(v24 + 56);
    v85[0] = *(_OWORD *)(v24 + 72);
    *(_QWORD *)&v85[1] = v25;
    std::string::basic_string[abi:ne180100]<0>(&__p, "view_h");
    v26 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    if (v139 != (_QWORD **)v26)
    {
      v27 = *((_QWORD *)v24 + 11);
      v28 = *(_OWORD *)(v24 + 72);
      v94 = *(_OWORD *)(v24 + 56);
      v95[0] = v28;
      *(_QWORD *)&v95[1] = v27;
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&__p, *(_QWORD *)(a1 + 32), v26 + 8, &v93);
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&__p);
      if (v64)
        v23 = 0;
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "view_w");
    v29 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    if (v139 != (_QWORD **)v29)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "view_h");
      v217[0] = &__p;
      v30 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, v217);
      if (SHIBYTE(v63) < 0)
        operator delete(__p);
      v31 = *((_QWORD *)v30 + 11);
      v84 = *(_OWORD *)(v30 + 56);
      v85[0] = *(_OWORD *)(v30 + 72);
      *(_QWORD *)&v85[1] = v31;
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&__p, *(_QWORD *)(a1 + 32), v29 + 8, &v83);
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&__p);
      if (v64)
        v23 = 0;
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&__p);
    }
    *(_QWORD *)v46 = &unk_24C0230F8;
    ZinIrUnitInfo::~ZinIrUnitInfo(&v48);
    *(_QWORD *)v46 = &unk_24C01C7C8;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v46[8], *(_QWORD **)&v46[16]);
    *(_QWORD *)&v49 = &unk_24C024218;
    ZinIrUnitInfo::~ZinIrUnitInfo(&v60);
    *(_QWORD *)&v49 = &unk_24C01C7C8;
    std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v49 + 8, (_QWORD *)v50);
    if (v23)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
      v32 = std::__tree<std::__value_type<std::string,ZinIrName>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinIrName>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinIrName>>>::find<std::string>((uint64_t)&v138, &__p);
      if (SHIBYTE(v63) < 0)
        operator delete(__p);
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvDesc(a1, (uint64_t)&v140, v6, (uint64_t)&v49, *((_DWORD *)v32 + 76));
      v33 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)v46 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)&v46[16] = v33;
      v34 = *(_OWORD *)(a1 + 104);
      *(_OWORD *)&v46[32] = *(_OWORD *)(a1 + 88);
      v47 = v34;
      std::string::basic_string[abi:ne180100]<0>(&__p, "unshuffle");
      p_p = &__p;
      v35 = std::__tree<std::__value_type<std::string,ZinTensorDimensions>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinTensorDimensions>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinTensorDimensions>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v136, &__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      v36 = *(_OWORD *)(v35 + 56);
      v37 = *(_OWORD *)(v35 + 72);
      v38 = *((_QWORD *)v35 + 11);
      if (SHIBYTE(v63) < 0)
      {
        v43 = *(_OWORD *)(v35 + 72);
        v44 = *(_OWORD *)(v35 + 56);
        operator delete(__p);
        v37 = v43;
        v36 = v44;
      }
      *(_OWORD *)&v46[8] = v36;
      *(_OWORD *)&v46[24] = v37;
      *(_QWORD *)&v46[40] = v38;
      v65 = *(_QWORD *)(a1 + 32);
      v66 = v46;
      v67 = &v49;
      v68 = *(_OWORD *)v46;
      v69 = *(_OWORD *)&v46[16];
      v70 = *(_OWORD *)&v46[32];
      v71 = v47;
      v81 = v58;
      v82 = v59;
      v72 = v49;
      v73 = v50;
      v74 = v51;
      v78 = v55;
      v77 = v54;
      v76 = v53;
      v75 = v52;
      v80 = v57;
      v79 = v56;
      __p = &unk_24C01B6F0;
      v62 = &v63;
      v64 = 0;
      v63 = 0;
      ZinUnitValidator::AddErrors((uint64_t *)&__p, v45);
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&__p);
      __p = &unk_24C01C7C8;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v62, v63);
    }
    else
    {
LABEL_42:
      v39 = ANECFormatToZinTensorFormat(**(_QWORD **)(a1 + 40));
      MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(v4, v39);
      MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode(v4);
      if (*(_QWORD *)(a1 + 176) > MaxLogicalKernelWidthForLargeKernelMode)
      {
        __p = CFSTR("InvalidKernelWidth");
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v2, (unint64_t *)&__p, (uint64_t *)&__p);
      }
      if (*(_QWORD *)(a1 + 184) > MaxLogicalKernelHeightForLargeKernelMode)
      {
        __p = CFSTR("InvalidKernelHeight");
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v2, (unint64_t *)&__p, (uint64_t *)&__p);
      }
      if (!*(_QWORD *)(a1 + 24))
      {
        __p = CFSTR("InvalidKernelDimensions");
        std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v2, (unint64_t *)&__p, (uint64_t *)&__p);
      }
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(a1);
    }
    std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&v136, v137[0]);
    std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::destroy((uint64_t)&v138, v139[0]);
    v164[0] = off_24C01ED88;
    if ((_QWORD)v176)
    {
      *((_QWORD *)&v176 + 1) = v176;
      operator delete((void *)v176);
    }
    if (*((_QWORD *)&v174 + 1))
    {
      *(_QWORD *)&v175 = *((_QWORD *)&v174 + 1);
      operator delete(*((void **)&v174 + 1));
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(v164);
  }
  else
  {
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v198);
  }
  v198 = &unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v199, (_QWORD *)v199[1]);
}

void sub_2070016F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  std::__tree<std::__value_type<std::string,SpatialSplitMode>,std::__map_value_compare<std::string,std::__value_type<std::string,SpatialSplitMode>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SpatialSplitMode>>>::destroy((uint64_t)&STACK[0x7E0], (char *)STACK[0x7E8]);
  std::__tree<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::__map_value_compare<std::string,std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc>>>::destroy((uint64_t)&STACK[0x7F8], (_QWORD *)STACK[0x800]);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x928]);
  STACK[0xA78] = (unint64_t)&unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(a18, (_QWORD *)STACK[0xA88]);
  _Unwind_Resume(a1);
}

void sub_207001858()
{
  JUMPOUT(0x207001834);
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateDilatedConv(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  _DWORD *v15;
  int KernelFormat;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t **v68;
  _OWORD *v69;
  _OWORD *v70;
  int64x2_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int64x2_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int16 v100;
  int v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[48];
  __int128 v114;
  uint64_t v115[3];
  _BYTE v116[64];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _BYTE v120[32];
  __int128 v121;
  __int128 v122;
  int v123;
  __int128 v124;
  _OWORD v125[2];
  uint64_t v126;
  char v127;
  char v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  void *__p;
  void *v134;
  _DWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE v147[40];
  _OWORD v148[2];
  uint64_t v149;
  void *v150[4];
  int v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  int v164;
  char v165;
  __int16 v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  char v174;
  int64x2_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int64x2_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190;
  __int16 v191;
  int v192;
  _BYTE v193[48];
  __int128 v194;
  int v195;
  uint64_t v196;

  v196 = *MEMORY[0x24BDAC8D0];
  v2 = **(_QWORD **)(a1 + 32);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 116))
  {
    *(_BYTE *)(a1 + 236) = 0;
    v71.i64[0] = (uint64_t)CFSTR("InvalidKernelMode");
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v71, v71.i64);
  }
  ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(a1);
  v70 = (_OWORD *)(a1 + 56);
  v3 = ANECFormatToZinTensorFormat(*(_QWORD *)(a1 + 56));
  v184 = vdupq_n_s64(1uLL);
  v185 = 1;
  *(_QWORD *)&v4 = 0x100000001;
  *((_QWORD *)&v4 + 1) = 0x100000001;
  v186 = v4;
  v187 = 0x100000001;
  memset(v188, 0, sizeof(v188));
  v189 = v4;
  v190 = 1;
  v191 = 0;
  v192 = 0;
  v151 = 0;
  v152 = 0u;
  v153 = 0u;
  v154 = -1;
  v155 = 0;
  v156 = -1;
  v157 = -1;
  v158 = -1;
  v160 = 0u;
  v161 = 0u;
  v162 = 0u;
  v159 = -1;
  v163 = 0;
  v164 = 1;
  v165 = 0;
  v166 = 0;
  v167 = -1;
  v168 = -1;
  v169 = -1;
  v170 = -1;
  v171 = 0x3F80000000000006;
  memset(&v150[1], 0, 24);
  v150[0] = off_24C01CAD8;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v175 = v184;
  v176 = 1;
  v177 = 1;
  v178 = v4;
  v179 = 0x100000001;
  v182 = 0;
  v180 = 0;
  v181 = 0;
  v183 = 1;
  ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Desc2UnitInfo(a1, a1 + 120, (uint64_t)v150);
  DWORD2(v153) = v3;
  ZinIrConvUnit::CreateConvInfo((uint64_t)v150, (uint64_t)&v184);
  v5 = *(_OWORD *)(a1 + 80);
  v148[0] = *(_OWORD *)(a1 + 64);
  v148[1] = v5;
  v149 = *(_QWORD *)(a1 + 96);
  ZinGetOutputTensorDimension((uint64_t)v148, &v184, (unsigned int *)&v186, (unsigned int *)&v186 + 3, (int *)v188, *(_QWORD *)(a1 + 152), (int *)&v189, (uint64_t)v147);
  v145 = 0;
  v144 = 0;
  v146 = 0;
  v142 = 0;
  v141 = 0;
  v143 = 0;
  ANECFormatToZinTensorFormat(**(_QWORD **)(a1 + 40));
  ZinMirDilatedConv::DecomposeDilationFactorX(v2, *(_DWORD *)(*(_QWORD *)(a1 + 48) + 120), (uint64_t)&v136);
  if (v138 == v137
    || (v6 = (char **)(v137 + 8 * (v139 >> 10)),
        v7 = *v6,
        v8 = &(*v6)[4 * (v139 & 0x3FF)],
        v9 = *(_QWORD *)(v137 + (((v140 + v139) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v140 + v139) & 0x3FF),
        v8 == (char *)v9))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    do
    {
      v12 = *(_DWORD *)v8;
      v8 += 4;
      v11 = v12;
      if (v8 - v7 == 4096)
      {
        v13 = v6[1];
        ++v6;
        v7 = v13;
        v8 = v13;
      }
      v10 *= v11;
    }
    while (v8 != (char *)v9);
  }
  v14 = DWORD1(v189);
  v15 = operator new(0xCuLL);
  v69 = (_OWORD *)(a1 + 120);
  v135 = v15 + 3;
  *v15 = v10;
  v15[1] = v14;
  v15[2] = 1;
  __p = v15;
  v134 = v15 + 3;
  KernelFormat = ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::GetKernelFormat(a1);
  if (!ZinMirDilatedConv::DecomposeDilatedConv((uint64_t)v148, (uint64_t)v147, v3, &v184, KernelFormat, *(_QWORD *)(a1 + 32), (uint64_t)&__p, (char *)&v141, &v144))
  {
    v26 = v144;
    if (v145 != v144)
    {
      v27 = 0;
      v17 = 0;
      v68 = (uint64_t **)(a1 + 8);
      v28 = 1;
      while (1)
      {
        ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)v193, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v26 + 344 * v27));
        if (*(int *)v193 <= 33)
        {
          if (*(_DWORD *)v193 == 1)
          {
            LOBYTE(v126) = 0;
            v127 = 0;
            v128 = 0;
            v129 = 0;
            v124 = 0u;
            memset(v125, 0, 26);
            v130 = 0;
            v131 = 0;
            v132 = 0;
            v123 = v3;
            v45 = (char *)v141 + 40 * v27;
            v46 = *((_QWORD *)v45 + 4);
            v47 = *((_OWORD *)v45 + 1);
            v124 = *(_OWORD *)v45;
            v125[0] = v47;
            *(_QWORD *)&v125[1] = v46;
            if (v27)
            {
              BYTE9(v125[1]) = 0;
              v48 = 1;
            }
            else
            {
              WORD4(v125[1]) = *(_WORD *)(a1 + 112);
              v48 = *(_QWORD *)(a1 + 104);
            }
            v127 = 1;
            v126 = v48;
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)v116, *(_QWORD *)(a1 + 32), (uint64_t)&v193[8], (__int128 *)&v123);
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)v116, v115);
            v50 = v115[0];
            v51 = v115[1];
            while (1)
            {
              if (v50 == v51)
              {
                v53 = 0;
                v17 = v27;
                goto LABEL_60;
              }
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v71, v50);
              v52 = v73;
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&v71);
              if (v52)
                break;
              v50 += 512;
            }
            v54 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)v113 = *v70;
            *(_OWORD *)&v113[16] = v54;
            v114 = *(_OWORD *)(a1 + 104);
            *(_OWORD *)&v113[8] = v124;
            *(_OWORD *)&v113[24] = v125[0];
            *(_QWORD *)&v113[40] = *(_QWORD *)&v125[1];
            v91 = vdupq_n_s64(1uLL);
            v92 = 1;
            *(_QWORD *)&v55 = 0x100000001;
            *((_QWORD *)&v55 + 1) = 0x100000001;
            v93 = v55;
            v94 = 0x100000001;
            v96 = 0;
            v97 = 0;
            v95 = 0;
            v98 = v55;
            v99 = 1;
            v100 = 0;
            v101 = 0;
            ZinIrConvUnit::CreateConvInfo((uint64_t)&v193[8], (uint64_t)&v91);
            ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvDesc(a1, (uint64_t)&v91, v3, (uint64_t)&v102, v195);
            v71.i64[0] = (uint64_t)CFSTR("InvalidDilationFactor");
            std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>(v68, (unint64_t *)&v71, v71.i64);
            *((_QWORD *)&v73 + 1) = *(_QWORD *)(a1 + 32);
            v74 = (uint64_t)v113;
            v75 = &v102;
            v76 = *(_OWORD *)v113;
            v77 = *(_OWORD *)&v113[16];
            v78 = *(_OWORD *)&v113[32];
            v79 = v114;
            v80 = v102;
            v81 = v103;
            v84 = v106;
            v85 = v107;
            v82 = v104;
            v83 = v105;
            v89 = v111;
            v90 = v112;
            v87 = v109;
            v88 = v110;
            v86 = v108;
            v71.i64[0] = (uint64_t)&unk_24C01B6F0;
            v71.i64[1] = (uint64_t)&v72;
            v72 = 0;
            *(_QWORD *)&v73 = 0;
            ZinUnitValidator::AddErrors(v71.i64, v68);
            ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v71);
            v71.i64[0] = (uint64_t)&unk_24C01C7C8;
            std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v71.i64[1], (_QWORD *)v72);
            v28 = 0;
            v53 = 1;
LABEL_60:
            v71.i64[0] = (uint64_t)v115;
            std::vector<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)v116);
            if ((v53 & 1) != 0)
            {
              ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)v193);
              goto LABEL_68;
            }
          }
          else if (*(_DWORD *)v193 == 17)
          {
            v116[56] = 0;
            LOBYTE(v117) = 0;
            BYTE8(v117) = 0;
            BYTE12(v118) = 0;
            memset(&v116[8], 0, 42);
            v119 = 0uLL;
            *(_DWORD *)v120 = 0;
            *(_DWORD *)v116 = v3;
            v33 = (char *)v141 + 40 * v27;
            v34 = *((_QWORD *)v33 + 4);
            v35 = *((_OWORD *)v33 + 1);
            *(_OWORD *)&v116[8] = *(_OWORD *)v33;
            *(_OWORD *)&v116[24] = v35;
            *(_QWORD *)&v116[40] = v34;
            if (v27)
            {
              v116[49] = 0;
              v36 = 1;
            }
            else
            {
              *(_WORD *)&v116[48] = *(_WORD *)(a1 + 112);
              v36 = *(_QWORD *)(a1 + 104);
            }
            LOBYTE(v117) = 1;
            *(_QWORD *)&v116[56] = v36;
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&v71, *(_QWORD *)(a1 + 32), &v193[8], v116);
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v71);
            if ((_QWORD)v73)
              v28 = 0;
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&v71);
          }
          goto LABEL_61;
        }
        if (*(_DWORD *)v193 == 34)
        {
          v116[56] = 0;
          LOBYTE(v117) = 0;
          BYTE8(v117) = 0;
          BYTE12(v118) = 0;
          memset(&v116[8], 0, 42);
          v119 = 0uLL;
          *(_DWORD *)v120 = 0;
          *(_DWORD *)v116 = v3;
          v37 = (char *)v141 + 40 * v27;
          v38 = *((_QWORD *)v37 + 4);
          v39 = *((_OWORD *)v37 + 1);
          *(_OWORD *)&v116[8] = *(_OWORD *)v37;
          *(_OWORD *)&v116[24] = v39;
          *(_QWORD *)&v116[40] = v38;
          if (v27)
          {
            v116[49] = 0;
            v40 = 1;
          }
          else
          {
            *(_WORD *)&v116[48] = *(_WORD *)(a1 + 112);
            v40 = *(_QWORD *)(a1 + 104);
          }
          LOBYTE(v117) = 1;
          *(_QWORD *)&v116[56] = v40;
          ZinSpaceToBatchValidator<ZinIrSpaceToBatchUnitInfo,ZinIrTensorInfo>::ZinSpaceToBatchValidator((uint64_t)&v71, *(_QWORD *)(a1 + 32), (uint64_t)&v193[8], (__int128 *)v116);
          ZinSpaceToBatchValidator<ZinIrSpaceToBatchUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v71);
          if ((_QWORD)v73)
            v28 = 0;
          v49 = &unk_24C023388;
        }
        else
        {
          if (*(_DWORD *)v193 != 35)
          {
            if (*(_DWORD *)v193 == 44)
            {
              v116[56] = 0;
              LOBYTE(v117) = 0;
              BYTE8(v117) = 0;
              BYTE12(v118) = 0;
              memset(&v116[8], 0, 42);
              v119 = 0uLL;
              *(_DWORD *)v120 = 0;
              *(_DWORD *)v116 = v3;
              v29 = (char *)v141 + 40 * v27;
              v30 = *((_QWORD *)v29 + 4);
              v31 = *((_OWORD *)v29 + 1);
              *(_OWORD *)&v116[8] = *(_OWORD *)v29;
              *(_OWORD *)&v116[24] = v31;
              *(_QWORD *)&v116[40] = v30;
              if (v27)
              {
                v116[49] = 0;
                v32 = 1;
              }
              else
              {
                *(_WORD *)&v116[48] = *(_WORD *)(a1 + 112);
                v32 = *(_QWORD *)(a1 + 104);
              }
              LOBYTE(v117) = 1;
              *(_QWORD *)&v116[56] = v32;
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v71, *(_QWORD *)(a1 + 32), &v193[8], v116);
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v71);
              if ((_QWORD)v73)
                v28 = 0;
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v71);
            }
            goto LABEL_61;
          }
          v116[56] = 0;
          LOBYTE(v117) = 0;
          BYTE8(v117) = 0;
          BYTE12(v118) = 0;
          memset(&v116[8], 0, 42);
          v119 = 0uLL;
          *(_DWORD *)v120 = 0;
          *(_DWORD *)v116 = v3;
          v41 = (char *)v141 + 40 * v27;
          v42 = *((_QWORD *)v41 + 4);
          v43 = *((_OWORD *)v41 + 1);
          *(_OWORD *)&v116[8] = *(_OWORD *)v41;
          *(_OWORD *)&v116[24] = v43;
          *(_QWORD *)&v116[40] = v42;
          if (v27)
          {
            v116[49] = 0;
            v44 = 1;
          }
          else
          {
            *(_WORD *)&v116[48] = *(_WORD *)(a1 + 112);
            v44 = *(_QWORD *)(a1 + 104);
          }
          LOBYTE(v117) = 1;
          *(_QWORD *)&v116[56] = v44;
          ZinBatchToSpaceValidator<ZinIrBatchToSpaceUnitInfo,ZinIrTensorInfo>::ZinBatchToSpaceValidator((uint64_t)&v71, *(_QWORD *)(a1 + 32), (uint64_t)&v193[8], (__int128 *)v116);
          ZinBatchToSpaceValidator<ZinIrBatchToSpaceUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v71);
          if ((_QWORD)v73)
            v28 = 0;
          v49 = &unk_24C022B00;
        }
        v71.i64[0] = (uint64_t)v49;
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v83 + 1);
        v71.i64[0] = (uint64_t)&unk_24C01C7C8;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v71.i64[1], (_QWORD *)v72);
LABEL_61:
        ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)v193);
        ++v27;
        v26 = v144;
        if (0x82FA0BE82FA0BE83 * ((v145 - v144) >> 3) <= v27)
        {
          if ((v28 & 1) != 0)
            goto LABEL_13;
          goto LABEL_14;
        }
      }
    }
  }
  v17 = 0;
LABEL_13:
  if (*(_QWORD *)(a1 + 24))
  {
LABEL_14:
    v18 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)v193 = *v70;
    *(_OWORD *)&v193[16] = v18;
    v19 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)&v193[32] = *(_OWORD *)(a1 + 88);
    v194 = v19;
    v20 = *(_OWORD *)(a1 + 264);
    *(_OWORD *)&v120[16] = *(_OWORD *)(a1 + 248);
    v121 = v20;
    v122 = *(_OWORD *)(a1 + 280);
    v21 = *(_OWORD *)(a1 + 200);
    v117 = *(_OWORD *)(a1 + 184);
    v118 = v21;
    v22 = *(_OWORD *)(a1 + 216);
    *(_OWORD *)v120 = *(_OWORD *)(a1 + 232);
    v119 = v22;
    v23 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)v116 = *v69;
    *(_OWORD *)&v116[16] = v23;
    v24 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)&v116[48] = *(_OWORD *)(a1 + 168);
    *(_OWORD *)&v116[32] = v24;
    *(int64x2_t *)&v120[8] = vdupq_n_s64(1uLL);
    *(_QWORD *)&v120[24] = 1;
    if (IsChannelWise<ANECConvLayerDesc>(*(const __CFString ***)(a1 + 48)))
      v25 = 2;
    else
      v25 = 1;
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvType(a1, v116, v25);
    *((_QWORD *)&v73 + 1) = *(_QWORD *)(a1 + 32);
    v74 = (uint64_t)v193;
    v75 = (__int128 *)v116;
    v76 = *(_OWORD *)v193;
    v77 = *(_OWORD *)&v193[16];
    v78 = *(_OWORD *)&v193[32];
    v79 = v194;
    v89 = v121;
    v90 = v122;
    v80 = *(_OWORD *)v116;
    v81 = *(_OWORD *)&v116[16];
    v82 = *(_OWORD *)&v116[32];
    v86 = v119;
    v85 = v118;
    v84 = v117;
    v83 = *(_OWORD *)&v116[48];
    v88 = *(_OWORD *)&v120[16];
    v87 = *(_OWORD *)v120;
    v71.i64[0] = (uint64_t)&unk_24C01B6F0;
    v71.i64[1] = (uint64_t)&v72;
    v72 = 0;
    *(_QWORD *)&v73 = 0;
    ZinUnitValidator::AddErrors(v71.i64, (_QWORD *)(a1 + 8));
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v71);
  }
  else
  {
    v56 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)v193 = *v70;
    *(_OWORD *)&v193[16] = v56;
    v57 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)&v193[32] = *(_OWORD *)(a1 + 88);
    v194 = v57;
    v58 = *(_OWORD *)(a1 + 264);
    *(_OWORD *)&v120[16] = *(_OWORD *)(a1 + 248);
    v121 = v58;
    v122 = *(_OWORD *)(a1 + 280);
    v59 = *(_OWORD *)(a1 + 200);
    v117 = *(_OWORD *)(a1 + 184);
    v118 = v59;
    v60 = *(_OWORD *)(a1 + 216);
    *(_OWORD *)v120 = *(_OWORD *)(a1 + 232);
    v119 = v60;
    v61 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)v116 = *v69;
    *(_OWORD *)&v116[16] = v61;
    v62 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)&v116[48] = *(_OWORD *)(a1 + 168);
    *(_OWORD *)&v116[32] = v62;
    v63 = v144;
    if (v145 != v144)
    {
      v102 = 0uLL;
      *(_QWORD *)&v103 = 0;
      v71 = vdupq_n_s64(1uLL);
      v72 = 1;
      *(_QWORD *)&v64 = 0x100000001;
      *((_QWORD *)&v64 + 1) = 0x100000001;
      v73 = v64;
      v74 = 0x100000001;
      v76 = 0uLL;
      v75 = 0;
      v77 = v64;
      *(_QWORD *)&v78 = 1;
      WORD4(v78) = 0;
      HIDWORD(v78) = 0;
      ZinIrConvUnit::CreateConvInfo(v144 + 344 * v17 + 8, (uint64_t)&v71);
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvDesc(a1, (uint64_t)&v71, v3, (uint64_t)v116, *(_DWORD *)(v63 + 344 * v17 + 248));
      v65 = (char *)v141 + 40 * v17;
      v66 = *((_QWORD *)v65 + 4);
      v67 = *((_OWORD *)v65 + 1);
      *(_OWORD *)&v193[8] = *(_OWORD *)v65;
      *(_OWORD *)&v193[24] = v67;
      *(_QWORD *)&v193[40] = v66;
      v71.i64[0] = (uint64_t)&v102;
      std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
    }
    *((_QWORD *)&v73 + 1) = *(_QWORD *)(a1 + 32);
    v74 = (uint64_t)v193;
    v75 = (__int128 *)v116;
    v76 = *(_OWORD *)v193;
    v77 = *(_OWORD *)&v193[16];
    v78 = *(_OWORD *)&v193[32];
    v79 = v194;
    v89 = v121;
    v90 = v122;
    v80 = *(_OWORD *)v116;
    v81 = *(_OWORD *)&v116[16];
    v82 = *(_OWORD *)&v116[32];
    v86 = v119;
    v85 = v118;
    v84 = v117;
    v83 = *(_OWORD *)&v116[48];
    v88 = *(_OWORD *)&v120[16];
    v87 = *(_OWORD *)v120;
    v71.i64[0] = (uint64_t)&unk_24C01B6F0;
    v71.i64[1] = (uint64_t)&v72;
    v72 = 0;
    *(_QWORD *)&v73 = 0;
    ZinUnitValidator::AddErrors(v71.i64, (_QWORD *)(a1 + 8));
    ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v71);
  }
  v71.i64[0] = (uint64_t)&unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v71.i64[1], (_QWORD *)v72);
LABEL_68:
  if (__p)
  {
    v134 = __p;
    operator delete(__p);
  }
  std::deque<int>::~deque[abi:ne180100](&v136);
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  v71.i64[0] = (uint64_t)&v144;
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  v150[0] = off_24C01ED88;
  if ((_QWORD)v162)
  {
    *((_QWORD *)&v162 + 1) = v162;
    operator delete((void *)v162);
  }
  if (*((_QWORD *)&v160 + 1))
  {
    *(_QWORD *)&v161 = *((_QWORD *)&v160 + 1);
    operator delete(*((void **)&v160 + 1));
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v150);
}

void sub_2070025E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  void *v28;
  void *v29;

  a27 = (void **)&STACK[0x3F0];
  std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__destroy_vector::operator()[abi:ne180100](&a27);
  v28 = (void *)STACK[0x778];
  if (STACK[0x778])
  {
    STACK[0x780] = (unint64_t)v28;
    operator delete(v28);
  }
  std::deque<int>::~deque[abi:ne180100](&STACK[0x790]);
  v29 = (void *)STACK[0x7C8];
  if (STACK[0x7C8])
  {
    STACK[0x7D0] = (unint64_t)v29;
    operator delete(v29);
  }
  STACK[0x500] = (unint64_t)&STACK[0x7E0];
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x500]);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x850]);
  _Unwind_Resume(a1);
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateUnitWithLargeKernelStrides(void)::{lambda(ZinIrHalParameters const&)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  void *v11;
  _QWORD **v12;
  _QWORD *v13[5];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v1 = *a1;
  v2 = *(_OWORD *)(*a1 + 56);
  v3 = *(_OWORD *)(*a1 + 88);
  v41 = *(_OWORD *)(*a1 + 72);
  v42 = v3;
  v43 = *(_OWORD *)(v1 + 104);
  v4 = *(_OWORD *)(v1 + 168);
  v5 = *(_OWORD *)(v1 + 216);
  v6 = *(_OWORD *)(v1 + 200);
  v33 = *(_OWORD *)(v1 + 184);
  v34 = v6;
  v7 = *(_OWORD *)(v1 + 264);
  v39 = *(_OWORD *)(v1 + 280);
  v40 = v2;
  v37 = *(_OWORD *)(v1 + 248);
  v38 = v7;
  v8 = *(_OWORD *)(v1 + 232);
  v35 = v5;
  v36 = v8;
  v9 = *(_OWORD *)(v1 + 136);
  v29 = *(_OWORD *)(v1 + 120);
  v30 = v9;
  v31 = *(_OWORD *)(v1 + 152);
  v32 = v4;
  ZinUnitValidator::limits<int>((uint64_t *)v1, 1, 2, *(_DWORD *)(*(_QWORD *)(v1 + 48) + 80), &v34, (uint64_t)CFSTR("InvalidStepX"));
  ZinUnitValidator::limits<int>((uint64_t *)v1, 1, 2, *(_DWORD *)(*(_QWORD *)(v1 + 48) + 84), (_DWORD *)&v34 + 1, (uint64_t)CFSTR("InvalidStepY"));
  ZinUnitValidator::limits<int>((uint64_t *)v1, 1, 2, *(_DWORD *)(*(_QWORD *)(v1 + 48) + 88), (_DWORD *)&v34 + 2, (uint64_t)CFSTR("InvalidStepZ"));
  v10 = *(_QWORD **)(v1 + 32);
  v14 = v40;
  v15 = v41;
  v16 = v42;
  v17 = v43;
  v27 = v38;
  v28 = v39;
  v25 = v36;
  v26 = v37;
  v21 = v32;
  v22 = v33;
  v23 = v34;
  v24 = v35;
  v18 = v29;
  v19 = v30;
  v13[2] = v10;
  v13[3] = &v40;
  v13[4] = &v29;
  v20 = v31;
  v11 = &unk_24C01B6F0;
  v12 = v13;
  v13[0] = 0;
  v13[1] = 0;
  ZinUnitValidator::AddErrors((uint64_t *)&v11, (_QWORD *)(v1 + 8));
  ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::Validate(&v11);
  v11 = &unk_24C01C7C8;
  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v12, v13[0]);
}

void sub_207002908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v12;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v12, a12);
  _Unwind_Resume(a1);
}

uint64_t ValidateLargeKernelStridesForConv(ZinConvLayerUtils *a1, uint64_t a2, int *a3, int64x2_t *a4, uint64_t a5, uint64_t *a6, int a7, char a8, char a9, uint64_t a10, char a11, uint64_t a12)
{
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  std::string::size_type v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void (***v64)(ZinIrPixelShuffleUnitInfo *__hidden);
  uint64_t v65;
  __int128 v66;
  char v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  __int128 v79;
  char v80;
  char v81;
  uint64_t v82;
  char v83;
  __int128 v84;
  __int128 v85;
  char v86;
  char v87;
  uint64_t v88;
  char v89;
  std::string::size_type v90;
  _BOOL4 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  char v104;
  char v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BOOL4 v112;
  void (***v113)(ZinIrPixelShuffleUnitInfo *__hidden);
  __int128 v114;
  __int128 v115;
  char v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char *v131;
  _OWORD *v132;
  _OWORD *v133;
  char *v134;
  std::vector<std::string> *v135;
  _OWORD *v136;
  _OWORD *v137;
  _OWORD *v138;
  std::string *v139;
  uint64_t v142;
  uint64_t v143[3];
  void (**v144)(ZinIrKernelUnitInfo *__hidden);
  _BYTE v145[48];
  _BYTE v146[24];
  __int128 v147;
  __int128 v148;
  _BYTE v149[24];
  __int128 v150;
  __int128 __src;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  _BYTE v155[28];
  _BYTE v156[32];
  _BYTE v157[32];
  _BYTE v158[420];
  uint64_t *v159;
  std::string v160;
  int v161;
  std::string *v162;
  int v163[2];
  __int128 v164;
  uint64_t v165;
  int v166;
  void *v167;
  void *__p;
  __int128 v169;
  _OWORD v170[2];
  uint64_t v171;
  char v172;
  char v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  void (**v178)(ZinIrPixelShuffleUnitInfo *__hidden);
  __int128 v179;
  _BYTE v180[32];
  _BYTE v181[24];
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _BYTE v185[26];
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  void *v189;
  void *v190;
  uint64_t v191;
  __int16 v192;
  uint64_t v193[3];
  int64x2_t *v194;
  int64x2_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE v203[16];
  uint64_t v204;
  uint64_t v205;
  int8x16_t v206;
  uint64_t v207;

  v206 = vextq_s8(*(int8x16_t *)(a2 + 88), *(int8x16_t *)(a2 + 88), 8uLL);
  v207 = *(_QWORD *)(a2 + 104);
  ZinGetOutputTensorDimension((uint64_t)a4, &v206, (unsigned int *)(a2 + 152), (unsigned int *)(a2 + 164), (int *)(a2 + 176), a5, (int *)(a2 + 208), (uint64_t)v203);
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v142 = (uint64_t)a6;
  if (ZinConvLargeStrides::DecomposeConvWithLargeStride((uint64_t)a4, (uint64_t)v203, *a3, a2, a7, (_QWORD *)*a6, (uint64_t)&v194, &v200))
  {
    if (!ZinConvPoolLargeStride::DecomposeLargeStrideConv(*a3, a1, *a6, a4, a5, &v194, &v197))
    {
      v18 = v197;
      if (v198 != v197)
      {
        if ((int)(799063683 * ((unint64_t)(v198 - v197) >> 3)) < 1)
        {
          v24 = 1;
          goto LABEL_132;
        }
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0uLL;
        v136 = (_OWORD *)(a12 + 240);
        LOBYTE(v23) = 1;
        while (1)
        {
          v24 = 0;
          v25 = *(_DWORD *)(v18 + v20);
          if (v25 > 16)
          {
            if (v25 != 17)
            {
              if (v25 != 44)
                goto LABEL_132;
              v179 = 0uLL;
              *(_DWORD *)&v180[8] = 0;
              *(_QWORD *)v180 = 0;
              *(_OWORD *)&v180[16] = v22;
              *(_OWORD *)v181 = v22;
              v182 = v22;
              v183 = v22;
              v184 = v22;
              *(_OWORD *)v185 = v22;
              *(_OWORD *)&v185[10] = v22;
              *(_QWORD *)&v181[16] = -1;
              v178 = &off_24C01BAC0;
              v186 = v22;
              v187 = v22;
              v188 = 0;
              v189 = 0;
              v190 = 0;
              v192 = 0;
              v191 = 0;
              ZinIrPadUnitInfo::operator=((uint64_t)&v178, v18 + v20 + 8);
              LOBYTE(v171) = 0;
              v172 = 0;
              v173 = 0;
              v174 = 0;
              v169 = 0u;
              memset(v170, 0, 26);
              v175 = 0;
              v176 = 0;
              v177 = 0;
              LODWORD(__p) = *a3;
              v37 = *(__int128 *)((char *)v194 + v19);
              v36 = *(__int128 *)((char *)&v194[1] + v19);
              *(_QWORD *)&v170[1] = v194[2].i64[v19 / 8];
              v169 = v37;
              v170[0] = v36;
              v38 = a8;
              if (v20)
                v38 = 0;
              BYTE8(v170[1]) = v38;
              v39 = a9;
              if (v20)
                v39 = 0;
              BYTE9(v170[1]) = v39;
              v40 = a10;
              if (v20)
                v41 = 1;
              else
                v41 = a11;
              if (v20)
                v40 = 1;
              v171 = v40;
              v172 = v41;
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v159, v142, &v178, &__p);
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
              v42 = v160.__r_.__value_.__r.__words[2];
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v144, v142, &v178, &__p);
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v144);
              v43 = *(_QWORD *)&v145[16];
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v144);
              ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v159);
              v178 = &off_24C01BAC0;
              if (v189)
              {
                v190 = v189;
                operator delete(v189);
              }
              v35 = v43 | v42;
              ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v178);
              goto LABEL_71;
            }
            v179 = 0uLL;
            *(_DWORD *)&v180[8] = 0;
            *(_QWORD *)v180 = 0;
            *(_OWORD *)&v180[16] = v22;
            *(_OWORD *)v181 = v22;
            *(_QWORD *)&v181[16] = -1;
            v178 = off_24C021970;
            v182 = xmmword_207A8A490;
            std::string::operator=((std::string *)&v179, (const std::string *)(v18 + v20 + 16));
            *(_DWORD *)&v180[8] = *(_DWORD *)(v18 + v20 + 40);
            if ((void (***)(ZinIrPixelShuffleUnitInfo *__hidden))(v18 + v20 + 8) != &v178)
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v180[16], *(std::string **)(v18 + v20 + 48), *(__int128 **)(v18 + v20 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v18 + v20 + 56) - *(_QWORD *)(v18 + v20 + 48)) >> 3));
            *(_OWORD *)&v181[8] = *(_OWORD *)(v18 + v20 + 72);
            v182 = *(_OWORD *)(v18 + v20 + 88);
            v146[0] = 0;
            v146[8] = 0;
            v146[16] = 0;
            BYTE12(v147) = 0;
            *(_OWORD *)&v145[26] = 0u;
            memset(v145, 0, 32);
            *(_DWORD *)v149 = 0;
            v148 = 0uLL;
            LODWORD(v144) = *a3;
            v65 = v194[2].i64[v19 / 8];
            v66 = *(__int128 *)((char *)&v194[1] + v19);
            *(int64x2_t *)v145 = *(int64x2_t *)((char *)v194 + v19);
            *(_OWORD *)&v145[16] = v66;
            *(_QWORD *)&v145[32] = v65;
            v67 = a8;
            if (v20)
              v67 = 0;
            v145[40] = v67;
            v68 = a9;
            if (v20)
              v68 = 0;
            v145[41] = v68;
            v69 = a10;
            if (v20)
              v70 = 1;
            else
              v70 = a11;
            if (v20)
              v69 = 1;
            *(_QWORD *)v146 = v69;
            v146[8] = v70;
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&v159, v142, &v178, &v144);
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
            v35 = v160.__r_.__value_.__r.__words[2];
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&v159);
          }
          else
          {
            if (v25 == 1)
            {
              memset(v145, 0, 28);
              *(_OWORD *)&v145[32] = v22;
              *(_OWORD *)v146 = v22;
              *(_QWORD *)&v147 = 0;
              DWORD2(v147) = -1;
              *(_QWORD *)&v148 = -1;
              DWORD2(v148) = -1;
              *(_QWORD *)v149 = -1;
              *(_OWORD *)&v149[8] = v22;
              v150 = v22;
              __src = v22;
              v152 = 0;
              LODWORD(v153) = 1;
              BYTE4(v153) = 0;
              WORD4(v153) = 0;
              LODWORD(v154) = -1;
              *((_QWORD *)&v154 + 1) = -1;
              *(_DWORD *)v155 = -1;
              *(_QWORD *)&v155[8] = -1;
              *(_QWORD *)&v155[16] = 0x3F80000000000006;
              *(_QWORD *)&v146[16] = -1;
              v144 = off_24C01CAD8;
              *(_DWORD *)&v155[24] = 0;
              *(_DWORD *)v156 = 0;
              v156[4] = 0;
              *(int64x2_t *)&v156[8] = vdupq_n_s64(1uLL);
              *(_QWORD *)&v156[24] = 1;
              *(_QWORD *)v157 = 1;
              *(_QWORD *)&v44 = 0x100000001;
              *((_QWORD *)&v44 + 1) = 0x100000001;
              *(_OWORD *)&v157[8] = v44;
              *(_QWORD *)&v157[24] = 0x100000001;
              memset(v158, 0, 24);
              *(_DWORD *)&v158[24] = 1;
              std::string::operator=((std::string *)v145, (const std::string *)(v18 + v20 + 16));
              *(_DWORD *)&v145[24] = *(_DWORD *)(v18 + v20 + 40);
              if ((void (***)(ZinIrKernelUnitInfo *__hidden))(v18 + v20 + 8) != &v144)
              {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v145[32], *(std::string **)(v18 + v20 + 48), *(__int128 **)(v18 + v20 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v18 + v20 + 56) - *(_QWORD *)(v18 + v20 + 48)) >> 3));
                *(_OWORD *)&v146[8] = *(_OWORD *)(v18 + v20 + 72);
                v45 = *(_OWORD *)(v18 + v20 + 88);
                v46 = *(_OWORD *)(v18 + v20 + 120);
                v148 = *(_OWORD *)(v18 + v20 + 104);
                *(_OWORD *)v149 = v46;
                v147 = v45;
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v149[16], *(char **)(v18 + v20 + 136), *(_QWORD *)(v18 + v20 + 144), (uint64_t)(*(_QWORD *)(v18 + v20 + 144) - *(_QWORD *)(v18 + v20 + 136)) >> 2);
                std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__src, *(char **)(v18 + v20 + 160), *(_QWORD *)(v18 + v20 + 168), (uint64_t)(*(_QWORD *)(v18 + v20 + 168) - *(_QWORD *)(v18 + v20 + 160)) >> 3);
              }
              v47 = *(_OWORD *)(v18 + v20 + 184);
              v48 = *(_OWORD *)(v18 + v20 + 200);
              v49 = *(_OWORD *)(v18 + v20 + 216);
              *(_OWORD *)&v155[12] = *(_OWORD *)(v18 + v20 + 228);
              v154 = v48;
              *(_OWORD *)v155 = v49;
              v153 = v47;
              v51 = *(_OWORD *)(v18 + v20 + 296);
              v50 = *(_OWORD *)(v18 + v20 + 312);
              v52 = *(_OWORD *)(v18 + v20 + 280);
              *(_OWORD *)&v158[12] = *(_OWORD *)(v18 + v20 + 324);
              *(_OWORD *)&v157[16] = v51;
              *(_OWORD *)v158 = v50;
              *(_OWORD *)v157 = v52;
              v53 = *(_OWORD *)(v18 + v20 + 264);
              *(_OWORD *)v156 = *(_OWORD *)(v18 + v20 + 248);
              *(_OWORD *)&v156[16] = v53;
              v181[0] = 0;
              v181[8] = 0;
              v181[16] = 0;
              BYTE12(v182) = 0;
              *(_OWORD *)&v180[10] = 0u;
              v179 = 0u;
              *(_OWORD *)v180 = 0u;
              LODWORD(v184) = 0;
              v183 = 0uLL;
              LODWORD(v178) = *a3;
              v54 = v194[2].i64[v19 / 8];
              v55 = *(__int128 *)((char *)&v194[1] + v19);
              v179 = *(__int128 *)((char *)v194 + v19);
              *(_OWORD *)v180 = v55;
              *(_QWORD *)&v180[16] = v54;
              v56 = a8;
              if (v20)
                v56 = 0;
              v180[24] = v56;
              v57 = a9;
              if (v20)
                v57 = 0;
              v180[25] = v57;
              v58 = a10;
              if (v20)
                v59 = 1;
              else
                v59 = a11;
              if (v20)
                v58 = 1;
              *(_QWORD *)v181 = v58;
              v181[8] = v59;
              std::string::operator=((std::string *)(a12 + 8), (const std::string *)v145);
              *(_DWORD *)(a12 + 32) = *(_DWORD *)&v145[24];
              if (&v144 != (void (***)(ZinIrKernelUnitInfo *__hidden))a12)
              {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a12 + 40), *(std::string **)&v145[32], *(__int128 **)&v145[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v145[40] - *(_QWORD *)&v145[32]) >> 3));
                *(_OWORD *)(a12 + 64) = *(_OWORD *)&v146[8];
                v60 = v148;
                *(_OWORD *)(a12 + 80) = v147;
                *(_OWORD *)(a12 + 96) = v60;
                *(_OWORD *)(a12 + 112) = *(_OWORD *)v149;
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a12 + 128), *(char **)&v149[16], v150, (uint64_t)(v150 - *(_QWORD *)&v149[16]) >> 2);
                std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a12 + 152), (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 3);
              }
              v61 = v154;
              *(_OWORD *)(a12 + 176) = v153;
              *(_OWORD *)(a12 + 192) = v61;
              *(_OWORD *)(a12 + 208) = *(_OWORD *)v155;
              *(_OWORD *)(a12 + 220) = *(_OWORD *)&v155[12];
              v62 = *(_OWORD *)&v157[16];
              *(_OWORD *)(a12 + 272) = *(_OWORD *)v157;
              *(_OWORD *)(a12 + 288) = v62;
              *(_OWORD *)(a12 + 304) = *(_OWORD *)v158;
              *(_OWORD *)(a12 + 316) = *(_OWORD *)&v158[12];
              v63 = *(_OWORD *)&v156[16];
              *v136 = *(_OWORD *)v156;
              *(_OWORD *)(a12 + 256) = v63;
              *(_DWORD *)v136 = *((_DWORD *)a1 + 60);
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v159, v142, (uint64_t)&v144, (__int128 *)&v178);
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159, v143);
              __p = v143;
              std::vector<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              v35 = v160.__r_.__value_.__r.__words[2];
              ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&v159);
              v144 = off_24C01ED88;
              if ((_QWORD)__src)
              {
                *((_QWORD *)&__src + 1) = __src;
                operator delete((void *)__src);
              }
              if (*(_QWORD *)&v149[16])
              {
                *(_QWORD *)&v150 = *(_QWORD *)&v149[16];
                operator delete(*(void **)&v149[16]);
              }
              v64 = &v144;
              goto LABEL_70;
            }
            if (v25 != 3)
              goto LABEL_132;
            v179 = 0uLL;
            *(_QWORD *)v180 = 0;
            *(_OWORD *)&v180[16] = v22;
            *(_OWORD *)v181 = v22;
            *(_QWORD *)&v181[16] = -1;
            v178 = off_24C01EAB0;
            LODWORD(v182) = 2;
            BYTE4(v182) = 0;
            *(_DWORD *)&v180[8] = 3;
            std::string::operator=((std::string *)&v179, (const std::string *)(v18 + v20 + 16));
            *(_DWORD *)&v180[8] = *(_DWORD *)(v18 + v20 + 40);
            if ((void (***)(ZinIrPixelShuffleUnitInfo *__hidden))(v18 + v20 + 8) != &v178)
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v180[16], *(std::string **)(v18 + v20 + 48), *(__int128 **)(v18 + v20 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v18 + v20 + 56) - *(_QWORD *)(v18 + v20 + 48)) >> 3));
            *(_OWORD *)&v181[8] = *(_OWORD *)(v18 + v20 + 72);
            v26 = *(_DWORD *)(v18 + v20 + 88);
            BYTE4(v182) = *(_BYTE *)(v18 + v20 + 92);
            LODWORD(v182) = v26;
            if (v26 == 3)
              v27 = (unint64_t *)&v204;
            else
              v27 = (unint64_t *)&v205;
            v28 = *v27;
            v146[0] = 0;
            v146[8] = 0;
            v146[16] = 0;
            BYTE12(v147) = 0;
            *(_OWORD *)&v145[26] = 0u;
            memset(v145, 0, 32);
            *(_DWORD *)v149 = 0;
            v148 = 0uLL;
            LODWORD(v144) = *a3;
            v29 = v194[2].i64[v19 / 8];
            v30 = *(__int128 *)((char *)&v194[1] + v19);
            *(int64x2_t *)v145 = *(int64x2_t *)((char *)v194 + v19);
            *(_OWORD *)&v145[16] = v30;
            *(_QWORD *)&v145[32] = v29;
            v31 = a8;
            if (v20)
              v31 = 0;
            v145[40] = v31;
            v32 = a9;
            if (v20)
              v32 = 0;
            v145[41] = v32;
            v33 = a10;
            if (v20)
              v34 = 1;
            else
              v34 = a11;
            if (v20)
              v33 = 1;
            *(_QWORD *)v146 = v33;
            v146[8] = v34;
            std::vector<ZinIrTensorInfo>::vector(&__p, v28, (__int128 *)&v144);
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)&v159, v142, (uint64_t)&v178, __p, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v169 - (_QWORD)__p) >> 3));
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
            v35 = v160.__r_.__value_.__r.__words[2];
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)&v159);
            if (__p)
            {
              *(_QWORD *)&v169 = __p;
              operator delete(__p);
            }
          }
          v64 = &v178;
LABEL_70:
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)v64);
LABEL_71:
          v23 = v23 & (v35 == 0);
          ++v21;
          v18 = v197;
          v20 += 344;
          v19 += 40;
          v24 = v23;
          v22 = 0uLL;
          if (v21 >= (int)(799063683 * ((unint64_t)(v198 - v197) >> 3)))
            goto LABEL_132;
        }
      }
    }
LABEL_131:
    v24 = 0;
    goto LABEL_132;
  }
  v71 = v200;
  if (v201 == v200)
    goto LABEL_131;
  v72 = 0;
  v73 = 0;
  v74 = 0uLL;
  v132 = (_OWORD *)(a12 + 64);
  v133 = (_OWORD *)(a12 + 80);
  v134 = (char *)(a12 + 128);
  v135 = (std::vector<std::string> *)(a12 + 40);
  v131 = (char *)(a12 + 152);
  v137 = (_OWORD *)(a12 + 176);
  v138 = (_OWORD *)(a12 + 240);
  v139 = (std::string *)(a12 + 8);
  v75 = 248;
  v76 = 1;
  do
  {
    v77 = *(_DWORD *)(v71 + v75 - 248);
    if (v77 <= 31)
    {
      if (v77 == 1)
      {
        memset(v145, 0, 28);
        *(_OWORD *)&v145[32] = v74;
        *(_OWORD *)v146 = v74;
        *(_QWORD *)&v147 = 0;
        DWORD2(v147) = -1;
        *(_QWORD *)&v148 = -1;
        DWORD2(v148) = -1;
        *(_QWORD *)v149 = -1;
        *(_OWORD *)&v149[8] = v74;
        v150 = v74;
        __src = v74;
        v152 = 0;
        LODWORD(v153) = 1;
        BYTE4(v153) = 0;
        WORD4(v153) = 0;
        LODWORD(v154) = -1;
        *((_QWORD *)&v154 + 1) = -1;
        *(_DWORD *)v155 = -1;
        *(_QWORD *)&v155[8] = -1;
        *(_QWORD *)&v155[16] = 0x3F80000000000006;
        *(_QWORD *)&v146[16] = -1;
        v144 = off_24C01CAD8;
        *(_DWORD *)&v155[24] = 0;
        *(_DWORD *)v156 = 0;
        v156[4] = 0;
        *(int64x2_t *)&v156[8] = vdupq_n_s64(1uLL);
        *(_QWORD *)&v156[24] = 1;
        *(_QWORD *)v157 = 1;
        *(_QWORD *)&v92 = 0x100000001;
        *((_QWORD *)&v92 + 1) = 0x100000001;
        *(_OWORD *)&v157[8] = v92;
        *(_QWORD *)&v157[24] = 0x100000001;
        memset(v158, 0, 24);
        *(_DWORD *)&v158[24] = 1;
        std::string::operator=((std::string *)v145, (const std::string *)(v71 + v75 - 232));
        *(_DWORD *)&v145[24] = *(_DWORD *)(v71 + v75 - 208);
        if ((void (***)(ZinIrKernelUnitInfo *__hidden))(v71 + v75 - 240) != &v144)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v145[32], *(std::string **)(v71 + v75 - 200), *(__int128 **)(v71 + v75 - 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v71 + v75 - 192) - *(_QWORD *)(v71 + v75 - 200)) >> 3));
          *(_OWORD *)&v146[8] = *(_OWORD *)(v71 + v75 - 176);
          v93 = *(_OWORD *)(v71 + v75 - 160);
          v94 = *(_OWORD *)(v71 + v75 - 128);
          v148 = *(_OWORD *)(v71 + v75 - 144);
          *(_OWORD *)v149 = v94;
          v147 = v93;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v149[16], *(char **)(v71 + v75 - 112), *(_QWORD *)(v71 + v75 - 104), (uint64_t)(*(_QWORD *)(v71 + v75 - 104) - *(_QWORD *)(v71 + v75 - 112)) >> 2);
          std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&__src, *(char **)(v71 + v75 - 88), *(_QWORD *)(v71 + v75 - 80), (uint64_t)(*(_QWORD *)(v71 + v75 - 80) - *(_QWORD *)(v71 + v75 - 88)) >> 3);
        }
        v95 = *(_OWORD *)(v71 + v75 - 64);
        v96 = *(_OWORD *)(v71 + v75 - 48);
        v97 = *(_OWORD *)(v71 + v75 - 32);
        *(_OWORD *)&v155[12] = *(_OWORD *)(v71 + v75 - 20);
        v154 = v96;
        *(_OWORD *)v155 = v97;
        v153 = v95;
        v99 = *(_OWORD *)(v71 + v75 + 48);
        v98 = *(_OWORD *)(v71 + v75 + 64);
        v100 = *(_OWORD *)(v71 + v75 + 32);
        *(_OWORD *)&v158[12] = *(_OWORD *)(v71 + v75 + 76);
        *(_OWORD *)&v157[16] = v99;
        *(_OWORD *)v158 = v98;
        *(_OWORD *)v157 = v100;
        v101 = *(_OWORD *)(v71 + v75 + 16);
        *(_OWORD *)v156 = *(_OWORD *)(v71 + v75);
        *(_OWORD *)&v156[16] = v101;
        v181[0] = 0;
        v181[8] = 0;
        v181[16] = 0;
        BYTE12(v182) = 0;
        *(_OWORD *)&v180[10] = 0u;
        v179 = 0u;
        *(_OWORD *)v180 = 0u;
        LODWORD(v184) = 0;
        v183 = 0uLL;
        LODWORD(v178) = *a3;
        v102 = v194[2].i64[v72 / 8];
        v103 = *(__int128 *)((char *)&v194[1] + v72);
        v179 = *(__int128 *)((char *)v194 + v72);
        *(_OWORD *)v180 = v103;
        *(_QWORD *)&v180[16] = v102;
        v104 = a8;
        if (v73)
          v104 = 0;
        v180[24] = v104;
        v105 = a9;
        if (v73)
          v105 = 0;
        v180[25] = v105;
        v106 = a10;
        if (v73)
        {
          v106 = 1;
          v107 = 1;
        }
        else
        {
          v107 = a11;
        }
        *(_QWORD *)v181 = v106;
        v181[8] = v107;
        std::string::operator=(v139, (const std::string *)v145);
        *(_DWORD *)(a12 + 32) = *(_DWORD *)&v145[24];
        if (&v144 != (void (***)(ZinIrKernelUnitInfo *__hidden))a12)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v135, *(std::string **)&v145[32], *(__int128 **)&v145[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v145[40] - *(_QWORD *)&v145[32]) >> 3));
          *v132 = *(_OWORD *)&v146[8];
          v108 = v148;
          *v133 = v147;
          *(_OWORD *)(a12 + 96) = v108;
          *(_OWORD *)(a12 + 112) = *(_OWORD *)v149;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v134, *(char **)&v149[16], v150, (uint64_t)(v150 - *(_QWORD *)&v149[16]) >> 2);
          std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v131, (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 3);
        }
        v109 = v154;
        *v137 = v153;
        *(_OWORD *)(a12 + 192) = v109;
        *(_OWORD *)(a12 + 208) = *(_OWORD *)v155;
        *(_OWORD *)(a12 + 220) = *(_OWORD *)&v155[12];
        v110 = *(_OWORD *)&v157[16];
        *(_OWORD *)(a12 + 272) = *(_OWORD *)v157;
        *(_OWORD *)(a12 + 288) = v110;
        *(_OWORD *)(a12 + 304) = *(_OWORD *)v158;
        *(_OWORD *)(a12 + 316) = *(_OWORD *)&v158[12];
        v111 = *(_OWORD *)&v156[16];
        *v138 = *(_OWORD *)v156;
        *(_OWORD *)(a12 + 256) = v111;
        *(_DWORD *)v138 = *((_DWORD *)a1 + 60);
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v159, v142, (uint64_t)&v144, (__int128 *)&v178);
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159, v193);
        __p = v193;
        std::vector<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v112 = v160.__r_.__value_.__r.__words[2] == 0;
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&v159);
        v144 = off_24C01ED88;
        if ((_QWORD)__src)
        {
          *((_QWORD *)&__src + 1) = __src;
          operator delete((void *)__src);
        }
        if (*(_QWORD *)&v149[16])
        {
          *(_QWORD *)&v150 = *(_QWORD *)&v149[16];
          operator delete(*(void **)&v149[16]);
        }
        v76 &= v112;
        v113 = &v144;
        goto LABEL_125;
      }
      if (v77 != 17)
        goto LABEL_127;
      v179 = 0uLL;
      *(_DWORD *)&v180[8] = 0;
      *(_QWORD *)v180 = 0;
      *(_OWORD *)&v180[16] = v74;
      *(_OWORD *)v181 = v74;
      *(_QWORD *)&v181[16] = -1;
      v178 = off_24C021970;
      v182 = xmmword_207A8A490;
      std::string::operator=((std::string *)&v179, (const std::string *)(v71 + v75 - 232));
      *(_DWORD *)&v180[8] = *(_DWORD *)(v71 + v75 - 208);
      if ((void (***)(ZinIrPixelShuffleUnitInfo *__hidden))(v71 + v75 - 240) != &v178)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v180[16], *(std::string **)(v71 + v75 - 200), *(__int128 **)(v71 + v75 - 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v71 + v75 - 192) - *(_QWORD *)(v71 + v75 - 200)) >> 3));
      *(_OWORD *)&v181[8] = *(_OWORD *)(v71 + v75 - 176);
      v182 = *(_OWORD *)(v71 + v75 - 160);
      v146[0] = 0;
      v146[8] = 0;
      v146[16] = 0;
      BYTE12(v147) = 0;
      *(_OWORD *)&v145[26] = 0u;
      memset(v145, 0, 32);
      *(_DWORD *)v149 = 0;
      v148 = 0uLL;
      LODWORD(v144) = *a3;
      v78 = v194[2].i64[v72 / 8];
      v79 = *(__int128 *)((char *)&v194[1] + v72);
      *(int64x2_t *)v145 = *(int64x2_t *)((char *)v194 + v72);
      *(_OWORD *)&v145[16] = v79;
      *(_QWORD *)&v145[32] = v78;
      v80 = a8;
      if (v73)
        v80 = 0;
      v145[40] = v80;
      v81 = a9;
      if (v73)
        v81 = 0;
      v145[41] = v81;
      v82 = a10;
      if (v73)
      {
        v82 = 1;
        v83 = 1;
      }
      else
      {
        v83 = a11;
      }
      *(_QWORD *)v146 = v82;
      v146[8] = v83;
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&v159, v142, &v178, &v144);
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
      v76 = v76 & (v160.__r_.__value_.__r.__words[2] == 0);
      ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&v159);
LABEL_124:
      v113 = &v178;
LABEL_125:
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)v113);
      goto LABEL_126;
    }
    if (v77 == 32)
    {
      v179 = 0uLL;
      *(_QWORD *)v180 = 0;
      *(_OWORD *)&v180[16] = v74;
      *(_OWORD *)v181 = v74;
      *(_QWORD *)&v181[16] = -1;
      v178 = off_24C023650;
      *(_QWORD *)&v182 = 0x100000001;
      DWORD2(v182) = 1;
      *(_DWORD *)&v180[8] = 31;
      ZinIrPixelShuffleUnitInfo::ZinIrPixelShuffleUnitInfo((ZinIrPixelShuffleUnitInfo *)&v159, (const ZinIrUnitInfo *)(v71 + v75 - 240));
      std::string::operator=((std::string *)&v179, &v160);
      *(_DWORD *)&v180[8] = v161;
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v180[16], v162, *(__int128 **)v163, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v163 - (_QWORD)v162) >> 3));
      *(_OWORD *)&v181[8] = v164;
      *(_QWORD *)&v182 = v165;
      DWORD2(v182) = v166;
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v159);
      v146[0] = 0;
      v146[8] = 0;
      v146[16] = 0;
      BYTE12(v147) = 0;
      memset(v145, 0, 42);
      v148 = 0uLL;
      *(_DWORD *)v149 = 0;
      LODWORD(v144) = *a3;
      v114 = *(__int128 *)((char *)v194 + v72);
      v115 = *(__int128 *)((char *)&v194[1] + v72);
      *(_QWORD *)&v145[32] = v194[2].i64[v72 / 8];
      *(_OWORD *)v145 = v114;
      *(_OWORD *)&v145[16] = v115;
      v116 = a8;
      if (v73)
        v116 = 0;
      v145[40] = v116;
      v117 = a9;
      if (v73)
        v117 = 0;
      v145[41] = v117;
      v118 = a10;
      if (v73)
      {
        v118 = 1;
        v119 = 1;
      }
      else
      {
        v119 = a11;
      }
      *(_QWORD *)v146 = v118;
      v146[8] = v119;
      ZinPixelUnshuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::ZinPixelUnshuffleValidator((uint64_t)&v159, v142, (uint64_t)&v178, (__int128 *)&v144);
      ZinPixelUnshuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
      v76 = v76 & (v160.__r_.__value_.__r.__words[2] == 0);
      v159 = (uint64_t *)&unk_24C0241F8;
      ZinIrUnitInfo::~ZinIrUnitInfo(&v167);
      v159 = (uint64_t *)&unk_24C01C7C8;
      std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)&v160, (_QWORD *)v160.__r_.__value_.__l.__size_);
      goto LABEL_124;
    }
    if (v77 != 44)
      goto LABEL_127;
    v179 = 0uLL;
    *(_DWORD *)&v180[8] = 0;
    *(_QWORD *)v180 = 0;
    *(_OWORD *)&v180[16] = v74;
    *(_OWORD *)v181 = v74;
    v182 = v74;
    v183 = v74;
    v184 = v74;
    *(_OWORD *)v185 = v74;
    *(_OWORD *)&v185[10] = v74;
    *(_QWORD *)&v181[16] = -1;
    v178 = &off_24C01BAC0;
    v186 = v74;
    v187 = v74;
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v192 = 0;
    v191 = 0;
    ZinIrPadUnitInfo::operator=((uint64_t)&v178, v71 + v75 - 240);
    LOBYTE(v171) = 0;
    v172 = 0;
    v173 = 0;
    v174 = 0;
    v169 = 0u;
    memset(v170, 0, 26);
    v175 = 0;
    v176 = 0;
    v177 = 0;
    LODWORD(__p) = *a3;
    v85 = *(__int128 *)((char *)v194 + v72);
    v84 = *(__int128 *)((char *)&v194[1] + v72);
    *(_QWORD *)&v170[1] = v194[2].i64[v72 / 8];
    v169 = v85;
    v170[0] = v84;
    v86 = a8;
    if (v73)
      v86 = 0;
    BYTE8(v170[1]) = v86;
    v87 = a9;
    if (v73)
      v87 = 0;
    BYTE9(v170[1]) = v87;
    v88 = a10;
    if (v73)
    {
      v88 = 1;
      v89 = 1;
    }
    else
    {
      v89 = a11;
    }
    v171 = v88;
    v172 = v89;
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v159, v142, &v178, &__p);
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v159);
    v90 = v160.__r_.__value_.__r.__words[2];
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::ZinPadValidator(&v144, v142, &v178, &__p);
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v144);
    v91 = (*(_QWORD *)&v145[16] | v90) == 0;
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v144);
    ZinPadValidator<ZinIrPadUnitInfo,ZinIrTensorInfo>::~ZinPadValidator((uint64_t)&v159);
    v178 = &off_24C01BAC0;
    if (v189)
    {
      v190 = v189;
      operator delete(v189);
    }
    v76 &= v91;
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)&v178);
LABEL_126:
    v74 = 0uLL;
LABEL_127:
    ++v73;
    v71 = v200;
    v120 = v201;
    v75 += 344;
    v72 += 40;
  }
  while (0x82FA0BE82FA0BE83 * ((v201 - v200) >> 3) > v73);
  std::string::operator=(v139, (const std::string *)(v201 - 328));
  *(_DWORD *)(a12 + 32) = *(_DWORD *)(v120 - 304);
  if (v120 - 336 != a12)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v135, *(std::string **)(v120 - 296), *(__int128 **)(v120 - 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v120 - 288) - *(_QWORD *)(v120 - 296)) >> 3));
    *v132 = *(_OWORD *)(v120 - 272);
    v121 = *(_OWORD *)(v120 - 256);
    v122 = *(_OWORD *)(v120 - 224);
    *(_OWORD *)(a12 + 96) = *(_OWORD *)(v120 - 240);
    *(_OWORD *)(a12 + 112) = v122;
    *v133 = v121;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v134, *(char **)(v120 - 208), *(_QWORD *)(v120 - 200), (uint64_t)(*(_QWORD *)(v120 - 200) - *(_QWORD *)(v120 - 208)) >> 2);
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>(v131, *(char **)(v120 - 184), *(_QWORD *)(v120 - 176), (uint64_t)(*(_QWORD *)(v120 - 176) - *(_QWORD *)(v120 - 184)) >> 3);
  }
  v24 = v76 & 1;
  v123 = *(_OWORD *)(v120 - 160);
  v124 = *(_OWORD *)(v120 - 144);
  v125 = *(_OWORD *)(v120 - 128);
  *(_OWORD *)(a12 + 220) = *(_OWORD *)(v120 - 116);
  *(_OWORD *)(a12 + 192) = v124;
  *(_OWORD *)(a12 + 208) = v125;
  *v137 = v123;
  v127 = *(_OWORD *)(v120 - 48);
  v126 = *(_OWORD *)(v120 - 32);
  v128 = *(_OWORD *)(v120 - 64);
  *(_OWORD *)(a12 + 316) = *(_OWORD *)(v120 - 20);
  *(_OWORD *)(a12 + 288) = v127;
  *(_OWORD *)(a12 + 304) = v126;
  *(_OWORD *)(a12 + 272) = v128;
  v129 = *(_OWORD *)(v120 - 80);
  *v138 = *(_OWORD *)(v120 - 96);
  *(_OWORD *)(a12 + 256) = v129;
LABEL_132:
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  v159 = &v197;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
  v159 = &v200;
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
  return v24;
}

void sub_207003E64(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&STACK[0x480]);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&STACK[0x7E0]);
  v3 = *(void **)(v1 - 256);
  if (v3)
  {
    *(_QWORD *)(v1 - 248) = v3;
    operator delete(v3);
  }
  STACK[0x480] = v1 - 232;
  std::vector<LargeStrideConvPoolDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x480]);
  STACK[0x480] = v1 - 208;
  std::vector<ZinConvLargeStrides::ConvLargeStrideDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x480]);
  _Unwind_Resume(a1);
}

uint64_t ValidateLargeKernelStridesForDeconv(void **a1, uint64_t a2, int *a3, __int128 *a4, uint64_t a5, uint64_t *a6, int a7, char a8, char a9, uint64_t a10, char a11, uint64_t a12)
{
  __int128 v18;
  __int128 v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  __int128 v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  char v68;
  char v69;
  uint64_t v70;
  char v71;
  BOOL v72;
  __int128 v73;
  __int128 v74;
  ZinIrUnitInfo *v75;
  int *v77;
  void *v78;
  _BYTE *v79;
  uint64_t v80[3];
  void **v81;
  void **v82;
  uint64_t v83;
  uint64_t v84[3];
  void **v85;
  _QWORD *v86[2];
  uint64_t v87;
  void *v88;
  int v89;
  __int128 v90;
  _OWORD v91[2];
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  void *__p;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[5];
  int8x16_t v106;
  uint64_t v107;
  int v108;
  _QWORD v109[44];

  v109[42] = *MEMORY[0x24BDAC8D0];
  v106 = vextq_s8(*(int8x16_t *)(a2 + 88), *(int8x16_t *)(a2 + 88), 8uLL);
  v107 = *(_QWORD *)(a2 + 104);
  ZinGetOutputTensorDimension((uint64_t)a4, &v106, (unsigned int *)(a2 + 152), (unsigned int *)(a2 + 164), (int *)(a2 + 176), a5, (int *)(a2 + 208), (uint64_t)v105);
  v103 = 0;
  v102 = 0;
  v104 = 0;
  v100 = 0;
  __p = 0;
  v101 = 0;
  v77 = a3;
  if (ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride(a4, (uint64_t)v105, *a3, a2, a7, *a6, (char **)&__p, &v102)|| (v28 = v102, v103 == v102))
  {
    v81 = 0;
    v82 = 0;
    v83 = 0;
    if (ZinDeconvLargeStrides::DecomposeDeConvWithLargeStride((uint64_t)a4, v105, *a3, a2, a7, *a6, (char **)&__p, (uint64_t *)&v81)|| (v50 = v81, v82 == v81))
    {
      std::string::operator=((std::string *)(a12 + 8), (const std::string *)(a1 + 1));
      *(_DWORD *)(a12 + 32) = *((_DWORD *)a1 + 8);
      if ((void **)a12 != a1)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a12 + 40), (std::string *)a1[5], (__int128 *)a1[6], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[6] - (_BYTE *)a1[5]) >> 3));
        *(_OWORD *)(a12 + 64) = *((_OWORD *)a1 + 4);
        v18 = *((_OWORD *)a1 + 5);
        v19 = *((_OWORD *)a1 + 7);
        *(_OWORD *)(a12 + 96) = *((_OWORD *)a1 + 6);
        *(_OWORD *)(a12 + 112) = v19;
        *(_OWORD *)(a12 + 80) = v18;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a12 + 128), (char *)a1[16], (uint64_t)a1[17], ((_BYTE *)a1[17] - (_BYTE *)a1[16]) >> 2);
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a12 + 152), (char *)a1[19], (uint64_t)a1[20], ((_BYTE *)a1[20] - (_BYTE *)a1[19]) >> 3);
      }
      v20 = 0;
    }
    else
    {
      v75 = (ZinIrUnitInfo *)a6;
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v20 = 1;
      do
      {
        ZinDeconvLargeStrides::DeconvStride3And4::DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v108, (const ZinDeconvLargeStrides::DeconvStride3And4 *)&v50[v51]);
        switch(v108)
        {
          case 17:
            LOBYTE(v92) = 0;
            v93 = 0;
            v94 = 0;
            v95 = 0;
            v90 = 0u;
            memset(v91, 0, 26);
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v89 = *a3;
            v60 = *(_OWORD *)((char *)__p + v52 + 56);
            v61 = *(_OWORD *)((char *)__p + v52 + 40);
            *(_QWORD *)&v91[1] = *(_QWORD *)((char *)__p + v52 + 72);
            v90 = v61;
            v91[0] = v60;
            v62 = a8;
            if (v53)
              v62 = 0;
            BYTE8(v91[1]) = v62;
            v63 = a9;
            if (v53)
              v63 = 0;
            BYTE9(v91[1]) = v63;
            v64 = a10;
            if (v53)
              v65 = 1;
            else
              v65 = a11;
            if (v53)
              v64 = 1;
            v92 = v64;
            v93 = v65;
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::ZinInputViewValidator(&v85, v75, v109, &v89);
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v85);
            v20 &= v87 == 0;
            ZinInputViewValidator<ZinIrInputViewUnitInfo,ZinIrTensorInfo>::~ZinInputViewValidator((uint64_t)&v85);
            break;
          case 3:
            LOBYTE(v92) = 0;
            v93 = 0;
            v94 = 0;
            v95 = 0;
            v90 = 0u;
            memset(v91, 0, 26);
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v89 = *a3;
            v67 = *(_OWORD *)((char *)__p + v52);
            v66 = *(_OWORD *)((char *)__p + v52 + 16);
            *(_QWORD *)&v91[1] = *(_QWORD *)((char *)__p + v52 + 32);
            v90 = v67;
            v91[0] = v66;
            v68 = a8;
            if (v53)
              v68 = 0;
            BYTE8(v91[1]) = v68;
            v69 = a9;
            if (v53)
              v69 = 0;
            BYTE9(v91[1]) = v69;
            v70 = a10;
            if (v53)
              v71 = 1;
            else
              v71 = a11;
            if (v53)
              v70 = 1;
            v92 = v70;
            v93 = v71;
            std::vector<ZinIrTensorInfo>::vector(&v78, v53, (__int128 *)&v89);
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::ZinConcatValidator((uint64_t)&v85, (uint64_t)v75, (uint64_t)v109, v78, 0xEEEEEEEEEEEEEEEFLL * ((v79 - (_BYTE *)v78) >> 3));
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v85);
            v72 = v87 == 0;
            ZinConcatValidator<ZinIrConcatUnitInfo,ZinIrTensorInfo>::~ZinConcatValidator((uint64_t)&v85);
            if (v78)
            {
              v79 = v78;
              operator delete(v78);
            }
            v20 &= v72;
            break;
          case 1:
            LOBYTE(v92) = 0;
            v93 = 0;
            v94 = 0;
            v95 = 0;
            v90 = 0u;
            memset(v91, 0, 26);
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v89 = *a3;
            v55 = *(_OWORD *)((char *)__p + v52);
            v54 = *(_OWORD *)((char *)__p + v52 + 16);
            *(_QWORD *)&v91[1] = *(_QWORD *)((char *)__p + v52 + 32);
            v90 = v55;
            v91[0] = v54;
            v56 = a8;
            if (v53)
              v56 = 0;
            BYTE8(v91[1]) = v56;
            v57 = a9;
            if (v53)
              v57 = 0;
            BYTE9(v91[1]) = v57;
            v58 = a10;
            if (v53)
            {
              v58 = 1;
              v59 = 1;
            }
            else
            {
              v59 = a11;
            }
            v92 = v58;
            v93 = v59;
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v85, (uint64_t)v75, (uint64_t)v109, (__int128 *)&v89);
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v85, v80);
            v78 = v80;
            std::vector<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
            v20 &= v87 == 0;
            ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&v85);
            break;
        }
        ZinDeconvLargeStrides::DeconvStride3And4::~DeconvStride3And4((ZinDeconvLargeStrides::DeconvStride3And4 *)&v108);
        ++v53;
        v50 = v81;
        v52 += 40;
        v51 += 43;
      }
      while (0x82FA0BE82FA0BE83 * (v82 - v81) > v53);
      if (v82 != v81)
        a1 = v81 + 1;
      std::string::operator=((std::string *)(a12 + 8), (const std::string *)(a1 + 1));
      *(_DWORD *)(a12 + 32) = *((_DWORD *)a1 + 8);
      if (a1 != (void **)a12)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a12 + 40), (std::string *)a1[5], (__int128 *)a1[6], 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[6] - (_BYTE *)a1[5]) >> 3));
        *(_OWORD *)(a12 + 64) = *((_OWORD *)a1 + 4);
        v73 = *((_OWORD *)a1 + 5);
        v74 = *((_OWORD *)a1 + 7);
        *(_OWORD *)(a12 + 96) = *((_OWORD *)a1 + 6);
        *(_OWORD *)(a12 + 112) = v74;
        *(_OWORD *)(a12 + 80) = v73;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a12 + 128), (char *)a1[16], (uint64_t)a1[17], ((_BYTE *)a1[17] - (_BYTE *)a1[16]) >> 2);
        std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a12 + 152), (char *)a1[19], (uint64_t)a1[20], ((_BYTE *)a1[20] - (_BYTE *)a1[19]) >> 3);
      }
    }
    v21 = *((_OWORD *)a1 + 11);
    v22 = *((_OWORD *)a1 + 12);
    v23 = *((_OWORD *)a1 + 13);
    *(_OWORD *)(a12 + 220) = *(_OWORD *)((char *)a1 + 220);
    *(_OWORD *)(a12 + 192) = v22;
    *(_OWORD *)(a12 + 208) = v23;
    *(_OWORD *)(a12 + 176) = v21;
    v25 = *((_OWORD *)a1 + 18);
    v24 = *((_OWORD *)a1 + 19);
    v26 = *((_OWORD *)a1 + 17);
    *(_OWORD *)(a12 + 316) = *(_OWORD *)((char *)a1 + 316);
    *(_OWORD *)(a12 + 288) = v25;
    *(_OWORD *)(a12 + 304) = v24;
    *(_OWORD *)(a12 + 272) = v26;
    v27 = *((_OWORD *)a1 + 16);
    *(_OWORD *)(a12 + 240) = *((_OWORD *)a1 + 15);
    *(_OWORD *)(a12 + 256) = v27;
    v85 = (void **)&v81;
    std::vector<ZinDeconvLargeStrides::DeconvStride3And4>::__destroy_vector::operator()[abi:ne180100](&v85);
  }
  else
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v20 = 1;
    do
    {
      ZinDeconvLargeStrides::DeconvStride4SamePad::DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)&v108, (const ZinDeconvLargeStrides::DeconvStride4SamePad *)(v28 + v29));
      if (v108 == 31)
      {
        LOBYTE(v92) = 0;
        v93 = 0;
        v94 = 0;
        v95 = 0;
        v90 = 0u;
        memset(v91, 0, 26);
        v96 = 0;
        v97 = 0;
        v98 = 0;
        v89 = *v77;
        v39 = *(_OWORD *)((char *)__p + v30);
        v38 = *(_OWORD *)((char *)__p + v30 + 16);
        *(_QWORD *)&v91[1] = *(_QWORD *)((char *)__p + v30 + 32);
        v90 = v39;
        v91[0] = v38;
        BYTE9(v91[1]) = 0;
        v93 = 1;
        v92 = 1;
        ZinPixelShuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::ZinPixelShuffleValidator((uint64_t)&v85, (uint64_t)a6, (uint64_t)v109, (__int128 *)&v89);
        ZinPixelShuffleValidator<ZinIrPixelShuffleUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v85);
        v20 &= v87 == 0;
        v85 = (void **)&unk_24C0230F8;
        ZinIrUnitInfo::~ZinIrUnitInfo(&v88);
        v85 = (void **)&unk_24C01C7C8;
        std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy((uint64_t)v86, v86[1]);
      }
      else if (v108 == 1)
      {
        LOBYTE(v92) = 0;
        v93 = 0;
        v94 = 0;
        v95 = 0;
        v90 = 0u;
        memset(v91, 0, 26);
        v96 = 0;
        v97 = 0;
        v98 = 0;
        v89 = *v77;
        v33 = *(_OWORD *)((char *)__p + v30);
        v32 = *(_OWORD *)((char *)__p + v30 + 16);
        *(_QWORD *)&v91[1] = *(_QWORD *)((char *)__p + v30 + 32);
        v90 = v33;
        v91[0] = v32;
        v34 = a8;
        if (v31)
          v34 = 0;
        BYTE8(v91[1]) = v34;
        v35 = a9;
        if (v31)
          v35 = 0;
        BYTE9(v91[1]) = v35;
        v36 = a10;
        if (v31)
        {
          v36 = 1;
          v37 = 1;
        }
        else
        {
          v37 = a11;
        }
        v92 = v36;
        v93 = v37;
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::ZinConvValidator((uint64_t)&v85, (uint64_t)a6, (uint64_t)v109, (__int128 *)&v89);
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)&v85, v84);
        v81 = (void **)v84;
        std::vector<ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>>::__destroy_vector::operator()[abi:ne180100](&v81);
        v20 &= v87 == 0;
        ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)&v85);
      }
      else
      {
        v20 = 0;
      }
      ZinDeconvLargeStrides::DeconvStride4SamePad::~DeconvStride4SamePad((ZinDeconvLargeStrides::DeconvStride4SamePad *)&v108);
      ++v31;
      v28 = v102;
      v30 += 40;
      v29 += 344;
    }
    while (0x82FA0BE82FA0BE83 * ((v103 - v102) >> 3) > v31);
    std::string::operator=((std::string *)(a12 + 8), (const std::string *)(v102 + 16));
    *(_DWORD *)(a12 + 32) = *(_DWORD *)(v28 + 40);
    if (v28 + 8 != a12)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a12 + 40), *(std::string **)(v28 + 48), *(__int128 **)(v28 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 56) - *(_QWORD *)(v28 + 48)) >> 3));
      *(_OWORD *)(a12 + 64) = *(_OWORD *)(v28 + 72);
      v40 = *(_OWORD *)(v28 + 88);
      v41 = *(_OWORD *)(v28 + 120);
      *(_OWORD *)(a12 + 96) = *(_OWORD *)(v28 + 104);
      *(_OWORD *)(a12 + 112) = v41;
      *(_OWORD *)(a12 + 80) = v40;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a12 + 128), *(char **)(v28 + 136), *(_QWORD *)(v28 + 144), (uint64_t)(*(_QWORD *)(v28 + 144) - *(_QWORD *)(v28 + 136)) >> 2);
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)(a12 + 152), *(char **)(v28 + 160), *(_QWORD *)(v28 + 168), (uint64_t)(*(_QWORD *)(v28 + 168) - *(_QWORD *)(v28 + 160)) >> 3);
    }
    v42 = *(_OWORD *)(v28 + 184);
    v43 = *(_OWORD *)(v28 + 200);
    v44 = *(_OWORD *)(v28 + 216);
    *(_OWORD *)(a12 + 220) = *(_OWORD *)(v28 + 228);
    *(_OWORD *)(a12 + 192) = v43;
    *(_OWORD *)(a12 + 208) = v44;
    *(_OWORD *)(a12 + 176) = v42;
    v46 = *(_OWORD *)(v28 + 296);
    v45 = *(_OWORD *)(v28 + 312);
    v47 = *(_OWORD *)(v28 + 280);
    *(_OWORD *)(a12 + 316) = *(_OWORD *)(v28 + 324);
    *(_OWORD *)(a12 + 288) = v46;
    *(_OWORD *)(a12 + 304) = v45;
    *(_OWORD *)(a12 + 272) = v47;
    v48 = *(_OWORD *)(v28 + 264);
    *(_OWORD *)(a12 + 240) = *(_OWORD *)(v28 + 248);
    *(_OWORD *)(a12 + 256) = v48;
  }
  if (__p)
  {
    v100 = __p;
    operator delete(__p);
  }
  v85 = (void **)&v102;
  std::vector<ZinDeconvLargeStrides::DeconvStride4SamePad>::__destroy_vector::operator()[abi:ne180100](&v85);
  return v20 & 1;
}

void sub_20700488C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int8x8_t ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvDesc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int *v18;
  int v19;
  int8x8_t result;

  v7 = *(__int128 **)(a1 + 48);
  v8 = *v7;
  v9 = v7[2];
  *(_OWORD *)(a4 + 16) = v7[1];
  *(_OWORD *)(a4 + 32) = v9;
  *(_OWORD *)a4 = v8;
  v10 = v7[3];
  v11 = v7[4];
  v12 = v7[6];
  *(_OWORD *)(a4 + 80) = v7[5];
  *(_OWORD *)(a4 + 96) = v12;
  *(_OWORD *)(a4 + 48) = v10;
  *(_OWORD *)(a4 + 64) = v11;
  v13 = v7[7];
  v14 = v7[8];
  v15 = v7[10];
  *(_OWORD *)(a4 + 144) = v7[9];
  *(_OWORD *)(a4 + 160) = v15;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v14;
  ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::SetConvType(a1, (_QWORD *)a4, a5);
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)&v17 = (int)v16;
  *((_QWORD *)&v17 + 1) = SHIDWORD(v16);
  *(_OWORD *)(a4 + 120) = v17;
  *(_QWORD *)(a4 + 136) = *(int *)(a2 + 80);
  *(_OWORD *)(a4 + 56) = *(_OWORD *)a2;
  *(_QWORD *)(a4 + 72) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a4 + 92) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a4 + 108) = *(_QWORD *)(a2 + 64);
  v18 = (int *)(a2 + 32);
  if (*(_BYTE *)(a2 + 97))
    v18 = (int *)(a2 + 44);
  v19 = *v18;
  result = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(_BYTE *)(a2 + 97) == 0), 0x1FuLL)), *(int8x8_t *)(a2 + 24), *(int8x8_t *)(a2 + 36));
  *(int8x8_t *)(a4 + 80) = result;
  *(_DWORD *)(a4 + 88) = v19;
  return result;
}

uint64_t ValidateParts(uint64_t a1, uint64_t a2, int *a3, int *a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  uint64_t v17;
  uint64_t result;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = a8;
  if (ValidateParts(Zin3DDeConvUtils::DeconvSplit &,ZinTensorDimensions const&,ZinKernelFormat const&,ZinTensorFormat const&,BOOL,BOOL,std::optional<unsigned long>,ZinIrParameters const&)::$_0::operator()(a1 + 112, a1 + 16, a2, a3, a4, a5, a6, a8, a7, a8, a9)|| (result = ValidateParts(Zin3DDeConvUtils::DeconvSplit &,ZinTensorDimensions const&,ZinKernelFormat const&,ZinTensorFormat const&,BOOL,BOOL,std::optional<unsigned long>,ZinIrParameters const&)::$_0::operator()(a1 + 392, a1 + 72, a2, a3, a4, a5, a6,
                   v17,
                   a7,
                   v9,
                   a9),
        (_DWORD)result))
  {
    v19 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v19)
      ValidateParts(v19, v20, v21, v22, v23, v24, v25, v26);
    return 3;
  }
  return result;
}

void sub_207004D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  ZinConvValidator<ZinIrConvUnitInfo,ZinIrTensorInfo>::~ZinConvValidator((uint64_t)va);
  ZinIrConvUnitInfo::~ZinIrConvUnitInfo((ZinIrConvUnitInfo *)&STACK[0x2A8]);
  _Unwind_Resume(a1);
}

uint64_t ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t MaxLogicalKernelWidthForLargeKernelMode;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int **v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  const __CFString *v36;

  v2 = **(_QWORD **)(a1 + 32);
  if (*(uint64_t *)(*(_QWORD *)(a1 + 48) + 136) >= 2)
  {
    v3 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v3)
      ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(v3, v4, v5, v6, v7, v8, v9, v10);
    *(_QWORD *)(a1 + 256) = 1;
    v30 = CFSTR("InvalidDilationFactor");
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v30, (uint64_t *)&v30);
    v30 = CFSTR("PartiallyImplementedUnit");
    std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v30, (uint64_t *)&v30);
  }
  ANECFormatToZinTensorFormat(**(_QWORD **)(a1 + 40));
  ZinMirDilatedConv::DecomposeDilationFactorX(v2, *(_DWORD *)(*(_QWORD *)(a1 + 48) + 120), (uint64_t)&v30);
  if (v35 != 1)
  {
    v11 = ANECFormatToZinTensorFormat(**(_QWORD **)(a1 + 40));
    MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode(v2, v11);
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) - 1) * v35 + 1 > MaxLogicalKernelWidthForLargeKernelMode)
    {
      v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v13)
        ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(v13, v14, v15, v16, v17, v18, v19, v20);
      *(_QWORD *)(a1 + 240) = 1;
      if (v32 != v31)
      {
        v21 = (int **)(v31 + 8 * (v33 >> 10));
        v22 = *v21;
        v23 = &(*v21)[v33 & 0x3FF];
        v24 = *(_QWORD *)(v31 + (((v34 + v33) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v34 + v33) & 0x3FF);
        if (v23 != (int *)v24)
        {
          v25 = 1;
          do
          {
            v27 = *v23++;
            v26 = v27;
            if ((char *)v23 - (char *)v22 == 4096)
            {
              v28 = v21[1];
              ++v21;
              v22 = v28;
              v23 = v28;
            }
            v25 *= v26;
          }
          while (v23 != (int *)v24);
          *(_QWORD *)(a1 + 240) = v25;
        }
      }
      v36 = CFSTR("InvalidDilationFactor");
      std::__tree<ZinIrTensor *>::__emplace_unique_key_args<ZinIrTensor *,ZinIrTensor * const&>((uint64_t **)(a1 + 8), (unint64_t *)&v36, (uint64_t *)&v36);
    }
  }
  return std::deque<int>::~deque[abi:ne180100](&v30);
}

void sub_207004F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<int>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = a7 + v11;
      v13 = (_QWORD *)(a7 + v11 - 296);
      *v13 = &unk_24C01C7C8;
      std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(a7 + v11 - 288), a3 + v11 - 288);
      *(_QWORD *)(v12 - 264) = *(_QWORD *)(a3 + v11 - 264);
      *v13 = &unk_24C01B6F0;
      v14 = *(_OWORD *)(a3 + v11 - 256);
      v15 = *(_OWORD *)(a3 + v11 - 240);
      v16 = *(_OWORD *)(a3 + v11 - 208);
      *(_OWORD *)(v12 - 224) = *(_OWORD *)(a3 + v11 - 224);
      *(_OWORD *)(v12 - 208) = v16;
      *(_OWORD *)(v12 - 256) = v14;
      *(_OWORD *)(v12 - 240) = v15;
      v17 = *(_OWORD *)(a3 + v11 - 192);
      v18 = *(_OWORD *)(a3 + v11 - 176);
      v19 = *(_OWORD *)(a3 + v11 - 144);
      *(_OWORD *)(v12 - 160) = *(_OWORD *)(a3 + v11 - 160);
      *(_OWORD *)(v12 - 144) = v19;
      *(_OWORD *)(v12 - 192) = v17;
      *(_OWORD *)(v12 - 176) = v18;
      v20 = *(_OWORD *)(a3 + v11 - 128);
      v21 = *(_OWORD *)(a3 + v11 - 112);
      v22 = *(_OWORD *)(a3 + v11 - 80);
      *(_OWORD *)(v12 - 96) = *(_OWORD *)(a3 + v11 - 96);
      *(_OWORD *)(v12 - 80) = v22;
      *(_OWORD *)(v12 - 128) = v20;
      *(_OWORD *)(v12 - 112) = v21;
      v23 = *(_OWORD *)(a3 + v11 - 64);
      v24 = *(_OWORD *)(a3 + v11 - 48);
      v25 = *(_OWORD *)(a3 + v11 - 16);
      *(_OWORD *)(v12 - 32) = *(_OWORD *)(a3 + v11 - 32);
      *(_OWORD *)(v12 - 16) = v25;
      *(_OWORD *)(v12 - 64) = v23;
      *(_OWORD *)(v12 - 48) = v24;
      v11 -= 296;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_207005084(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 296)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

__n128 std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__construct_one_at_end[abi:ne180100]<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = &unk_24C01C7C8;
  std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(v4 + 8), a2 + 8);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)v4 = &unk_24C01B6F0;
  v5 = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 72) = v7;
  *(_OWORD *)(v4 + 56) = v6;
  *(_OWORD *)(v4 + 40) = v5;
  v8 = *(_OWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 136) = v10;
  *(_OWORD *)(v4 + 120) = v9;
  *(_OWORD *)(v4 + 104) = v8;
  v11 = *(_OWORD *)(a2 + 168);
  v12 = *(_OWORD *)(a2 + 184);
  v13 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v4 + 200) = v13;
  *(_OWORD *)(v4 + 184) = v12;
  *(_OWORD *)(v4 + 168) = v11;
  result = *(__n128 *)(a2 + 232);
  v15 = *(_OWORD *)(a2 + 248);
  v16 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v4 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v4 + 280) = v16;
  *(_OWORD *)(v4 + 248) = v15;
  *(__n128 *)(v4 + 232) = result;
  *(_QWORD *)(a1 + 8) = v4 + 296;
  return result;
}

void sub_207005194(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__push_back_slow_path<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v26[2];
  char *v27;
  char *v28;
  uint64_t *v29;

  v3 = *a1;
  v4 = 0x14C1BACF914C1BADLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xDD67C8A60DD67CLL)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x14C1BACF914C1BADLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x6EB3E45306EB3ELL)
    v9 = 0xDD67C8A60DD67CLL;
  else
    v9 = v5;
  v29 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<Subgraph,SplitInfo>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[296 * v4];
  v26[0] = v10;
  v26[1] = v11;
  v27 = v11;
  v28 = &v10[296 * v9];
  *(_QWORD *)v11 = &unk_24C01C7C8;
  std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)v11 + 1, a2 + 8);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)v11 = &unk_24C01B6F0;
  v12 = *(_OWORD *)(a2 + 40);
  v13 = *(_OWORD *)(a2 + 56);
  v14 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v11 + 72) = v14;
  *(_OWORD *)(v11 + 56) = v13;
  *(_OWORD *)(v11 + 40) = v12;
  v15 = *(_OWORD *)(a2 + 104);
  v16 = *(_OWORD *)(a2 + 120);
  v17 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v11 + 136) = v17;
  *(_OWORD *)(v11 + 120) = v16;
  *(_OWORD *)(v11 + 104) = v15;
  v18 = *(_OWORD *)(a2 + 168);
  v19 = *(_OWORD *)(a2 + 184);
  v20 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v11 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v11 + 200) = v20;
  *(_OWORD *)(v11 + 184) = v19;
  *(_OWORD *)(v11 + 168) = v18;
  v21 = *(_OWORD *)(a2 + 264);
  v22 = *(_OWORD *)(a2 + 280);
  v23 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v11 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v11 + 232) = v23;
  *(_OWORD *)(v11 + 264) = v21;
  *(_OWORD *)(v11 + 280) = v22;
  v27 += 296;
  std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__swap_out_circular_buffer(a1, v26);
  v24 = a1[1];
  std::__split_buffer<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::~__split_buffer((uint64_t)v26);
  return v24;
}

void sub_207005360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>,std::__wrap_iter<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if (0x14C1BACF914C1BADLL * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      v20 = v12 - a2;
      if (0x14C1BACF914C1BADLL * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        v21 = a3 + 296 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__move_range((uint64_t)a1, v5, v12, v5 + 296 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *>((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 + 0x14C1BACF914C1BADLL * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xDD67C8A60DD67CLL)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v15 = 0x14C1BACF914C1BADLL * ((a2 - v13) >> 3);
      v16 = 0x14C1BACF914C1BADLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x6EB3E45306EB3ELL)
        v18 = 0xDD67C8A60DD67CLL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<Subgraph,SplitInfo>>>(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[296 * v15];
      v25 = v24;
      v26 = &v19[296 * v18];
      std::__split_buffer<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__construct_at_end_with_size<std::__wrap_iter<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>>((uint64_t *)&v23, a3, a5);
      v5 = std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_207005538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v24;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)v8 = &unk_24C01C7C8;
      std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(v8 + 8), v10 + 8);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(v10 + 32);
      *(_QWORD *)v8 = &unk_24C01B6F0;
      v11 = *(_OWORD *)(v10 + 40);
      v12 = *(_OWORD *)(v10 + 56);
      v13 = *(_OWORD *)(v10 + 72);
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v10 + 88);
      *(_OWORD *)(v8 + 72) = v13;
      *(_OWORD *)(v8 + 56) = v12;
      *(_OWORD *)(v8 + 40) = v11;
      v14 = *(_OWORD *)(v10 + 104);
      v15 = *(_OWORD *)(v10 + 120);
      v16 = *(_OWORD *)(v10 + 136);
      *(_OWORD *)(v8 + 152) = *(_OWORD *)(v10 + 152);
      *(_OWORD *)(v8 + 136) = v16;
      *(_OWORD *)(v8 + 120) = v15;
      *(_OWORD *)(v8 + 104) = v14;
      v17 = *(_OWORD *)(v10 + 168);
      v18 = *(_OWORD *)(v10 + 184);
      v19 = *(_OWORD *)(v10 + 200);
      *(_OWORD *)(v8 + 216) = *(_OWORD *)(v10 + 216);
      *(_OWORD *)(v8 + 200) = v19;
      *(_OWORD *)(v8 + 184) = v18;
      *(_OWORD *)(v8 + 168) = v17;
      v20 = *(_OWORD *)(v10 + 232);
      v21 = *(_OWORD *)(v10 + 248);
      v22 = *(_OWORD *)(v10 + 280);
      *(_OWORD *)(v8 + 264) = *(_OWORD *)(v10 + 264);
      *(_OWORD *)(v8 + 280) = v22;
      *(_OWORD *)(v8 + 248) = v21;
      *(_OWORD *)(v8 + 232) = v20;
      v10 += 296;
      v8 += 296;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *>((uint64_t)&v24, a2, v7, v6);
}

void sub_2070056A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__split_buffer<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__construct_at_end_with_size<std::__wrap_iter<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v5 = v4 + 296 * a3;
    v6 = (_OWORD *)(a2 + 40);
    v7 = 296 * a3;
    do
    {
      *(_QWORD *)v4 = &unk_24C01C7C8;
      result = std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(v4 + 8), (uint64_t)(v6 - 2));
      *(_QWORD *)(v4 + 32) = *((_QWORD *)v6 - 1);
      *(_QWORD *)v4 = &unk_24C01B6F0;
      v8 = *v6;
      v9 = v6[1];
      v10 = v6[2];
      *(_OWORD *)(v4 + 88) = v6[3];
      *(_OWORD *)(v4 + 72) = v10;
      *(_OWORD *)(v4 + 56) = v9;
      *(_OWORD *)(v4 + 40) = v8;
      v11 = v6[4];
      v12 = v6[5];
      v13 = v6[6];
      *(_OWORD *)(v4 + 152) = v6[7];
      *(_OWORD *)(v4 + 136) = v13;
      *(_OWORD *)(v4 + 120) = v12;
      *(_OWORD *)(v4 + 104) = v11;
      v14 = v6[8];
      v15 = v6[9];
      v16 = v6[10];
      *(_OWORD *)(v4 + 216) = v6[11];
      *(_OWORD *)(v4 + 200) = v16;
      *(_OWORD *)(v4 + 184) = v15;
      *(_OWORD *)(v4 + 168) = v14;
      v17 = v6[12];
      v18 = v6[13];
      v19 = v6[15];
      *(_OWORD *)(v4 + 264) = v6[14];
      *(_OWORD *)(v4 + 280) = v19;
      *(_OWORD *)(v4 + 248) = v18;
      *(_OWORD *)(v4 + 232) = v17;
      v4 += 296;
      v6 = (_OWORD *)((char *)v6 + 296);
      v7 -= 296;
    }
    while (v7);
    v4 = v5;
  }
  v3[2] = v4;
  return result;
}

void sub_2070057A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>,std::reverse_iterator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      *(_QWORD *)(a4 + v7) = &unk_24C01C7C8;
      std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(a4 + v7 + 8), a2 + v7 + 8);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + v7 + 32);
      *(_QWORD *)v8 = &unk_24C01B6F0;
      v9 = *(_OWORD *)(a2 + v7 + 40);
      v10 = *(_OWORD *)(a2 + v7 + 56);
      v11 = *(_OWORD *)(a2 + v7 + 72);
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + v7 + 88);
      *(_OWORD *)(v8 + 72) = v11;
      *(_OWORD *)(v8 + 56) = v10;
      *(_OWORD *)(v8 + 40) = v9;
      v12 = *(_OWORD *)(a2 + v7 + 104);
      v13 = *(_OWORD *)(a2 + v7 + 120);
      v14 = *(_OWORD *)(a2 + v7 + 136);
      *(_OWORD *)(v8 + 152) = *(_OWORD *)(a2 + v7 + 152);
      *(_OWORD *)(v8 + 136) = v14;
      *(_OWORD *)(v8 + 120) = v13;
      *(_OWORD *)(v8 + 104) = v12;
      v15 = *(_OWORD *)(a2 + v7 + 168);
      v16 = *(_OWORD *)(a2 + v7 + 184);
      v17 = *(_OWORD *)(a2 + v7 + 200);
      *(_OWORD *)(v8 + 216) = *(_OWORD *)(a2 + v7 + 216);
      *(_OWORD *)(v8 + 200) = v17;
      *(_OWORD *)(v8 + 184) = v16;
      *(_OWORD *)(v8 + 168) = v15;
      v18 = *(_OWORD *)(a2 + v7 + 232);
      v19 = *(_OWORD *)(a2 + v7 + 248);
      v20 = *(_OWORD *)(a2 + v7 + 280);
      *(_OWORD *)(v8 + 264) = *(_OWORD *)(a2 + v7 + 264);
      *(_OWORD *)(v8 + 280) = v20;
      *(_OWORD *)(v8 + 248) = v19;
      *(_OWORD *)(v8 + 232) = v18;
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_207005978(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 296;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 296;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (a3 != a2)
  {
    v7 = (_QWORD *)(a3 - 280);
    v8 = a3;
    do
    {
      if (v8 != a4)
        std::__tree<__CFString const*>::__assign_multi<std::__tree_const_iterator<__CFString const*,std::__tree_node<__CFString const*,void *> *,long>>((uint64_t **)(a4 - 288), *(_QWORD **)(v8 - 288), v7);
      *(_QWORD *)(a4 - 264) = *(_QWORD *)(v8 - 264);
      v9 = *(_OWORD *)(v8 - 256);
      v10 = *(_OWORD *)(v8 - 240);
      v11 = *(_OWORD *)(v8 - 208);
      *(_OWORD *)(a4 - 224) = *(_OWORD *)(v8 - 224);
      *(_OWORD *)(a4 - 208) = v11;
      *(_OWORD *)(a4 - 256) = v9;
      *(_OWORD *)(a4 - 240) = v10;
      v12 = *(_OWORD *)(v8 - 192);
      v13 = *(_OWORD *)(v8 - 176);
      v14 = *(_OWORD *)(v8 - 144);
      *(_OWORD *)(a4 - 160) = *(_OWORD *)(v8 - 160);
      *(_OWORD *)(a4 - 144) = v14;
      *(_OWORD *)(a4 - 192) = v12;
      *(_OWORD *)(a4 - 176) = v13;
      v15 = *(_OWORD *)(v8 - 128);
      v16 = *(_OWORD *)(v8 - 112);
      v17 = *(_OWORD *)(v8 - 80);
      *(_OWORD *)(a4 - 96) = *(_OWORD *)(v8 - 96);
      *(_OWORD *)(a4 - 80) = v17;
      *(_OWORD *)(a4 - 128) = v15;
      *(_OWORD *)(a4 - 112) = v16;
      v18 = *(_OWORD *)(v8 - 64);
      v19 = *(_OWORD *)(v8 - 48);
      v20 = *(_OWORD *)(v8 - 16);
      *(_OWORD *)(a4 - 32) = *(_OWORD *)(v8 - 32);
      *(_OWORD *)(a4 - 16) = v20;
      *(_OWORD *)(a4 - 64) = v18;
      *(_OWORD *)(a4 - 48) = v19;
      v7 -= 37;
      v8 -= 296;
      a4 -= 296;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = (_QWORD *)(a2 + 16);
  do
  {
    if (v5 != a4)
      std::__tree<__CFString const*>::__assign_multi<std::__tree_const_iterator<__CFString const*,std::__tree_node<__CFString const*,void *> *,long>>((uint64_t **)(a4 + 8), *(_QWORD **)(v5 + 8), v7);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v5 + 32);
    v8 = *(_OWORD *)(v5 + 40);
    v9 = *(_OWORD *)(v5 + 56);
    v10 = *(_OWORD *)(v5 + 72);
    *(_OWORD *)(a4 + 88) = *(_OWORD *)(v5 + 88);
    *(_OWORD *)(a4 + 72) = v10;
    *(_OWORD *)(a4 + 56) = v9;
    *(_OWORD *)(a4 + 40) = v8;
    v11 = *(_OWORD *)(v5 + 104);
    v12 = *(_OWORD *)(v5 + 120);
    v13 = *(_OWORD *)(v5 + 136);
    *(_OWORD *)(a4 + 152) = *(_OWORD *)(v5 + 152);
    *(_OWORD *)(a4 + 136) = v13;
    *(_OWORD *)(a4 + 120) = v12;
    *(_OWORD *)(a4 + 104) = v11;
    v14 = *(_OWORD *)(v5 + 168);
    v15 = *(_OWORD *)(v5 + 184);
    v16 = *(_OWORD *)(v5 + 200);
    *(_OWORD *)(a4 + 216) = *(_OWORD *)(v5 + 216);
    *(_OWORD *)(a4 + 200) = v16;
    *(_OWORD *)(a4 + 184) = v15;
    *(_OWORD *)(a4 + 168) = v14;
    v17 = *(_OWORD *)(v5 + 232);
    v18 = *(_OWORD *)(v5 + 248);
    v19 = *(_OWORD *)(v5 + 280);
    *(_OWORD *)(a4 + 264) = *(_OWORD *)(v5 + 264);
    *(_OWORD *)(a4 + 280) = v19;
    *(_OWORD *)(a4 + 248) = v18;
    *(_OWORD *)(a4 + 232) = v17;
    a4 += 296;
    v7 += 37;
    v5 += 296;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>>,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*,ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      *(_QWORD *)(a4 + v7) = &unk_24C01C7C8;
      std::set<__CFString const*>::set[abi:ne180100]((uint64_t *)(a4 + v7 + 8), a2 + v7 + 8);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + v7 + 32);
      *(_QWORD *)v8 = &unk_24C01B6F0;
      v9 = *(_OWORD *)(a2 + v7 + 40);
      v10 = *(_OWORD *)(a2 + v7 + 56);
      v11 = *(_OWORD *)(a2 + v7 + 72);
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + v7 + 88);
      *(_OWORD *)(v8 + 72) = v11;
      *(_OWORD *)(v8 + 56) = v10;
      *(_OWORD *)(v8 + 40) = v9;
      v12 = *(_OWORD *)(a2 + v7 + 104);
      v13 = *(_OWORD *)(a2 + v7 + 120);
      v14 = *(_OWORD *)(a2 + v7 + 136);
      *(_OWORD *)(v8 + 152) = *(_OWORD *)(a2 + v7 + 152);
      *(_OWORD *)(v8 + 136) = v14;
      *(_OWORD *)(v8 + 120) = v13;
      *(_OWORD *)(v8 + 104) = v12;
      v15 = *(_OWORD *)(a2 + v7 + 168);
      v16 = *(_OWORD *)(a2 + v7 + 184);
      v17 = *(_OWORD *)(a2 + v7 + 200);
      *(_OWORD *)(v8 + 216) = *(_OWORD *)(a2 + v7 + 216);
      *(_OWORD *)(v8 + 200) = v17;
      *(_OWORD *)(v8 + 184) = v16;
      *(_OWORD *)(v8 + 168) = v15;
      v18 = *(_OWORD *)(a2 + v7 + 232);
      v19 = *(_OWORD *)(a2 + v7 + 248);
      v20 = *(_OWORD *)(a2 + v7 + 280);
      *(_OWORD *)(v8 + 264) = *(_OWORD *)(a2 + v7 + 264);
      *(_OWORD *)(v8 + 280) = v20;
      *(_OWORD *)(v8 + 248) = v19;
      *(_OWORD *)(v8 + 232) = v18;
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_207005C90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 296;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 296;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<ANECConvLayerDescAlternate>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x4E25B9EFD4E25B9FLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x563B48C20563B5)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANECConvLayerDescAlternate>>(v3, a2);
    v7 = &v6[760 * (v5 / 760)];
    v9 = &v6[760 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v10 -= 760;
        v12 -= 760;
        memcpy(v12, v10, 0x2F8uLL);
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t ZinGetUnitAlternate<ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>,ANECConvLayerDescAlternate>(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  v2 = *(_OWORD *)(result + 120);
  v3 = *(_OWORD *)(result + 152);
  *(_OWORD *)(a2 + 536) = *(_OWORD *)(result + 136);
  *(_OWORD *)(a2 + 552) = v3;
  *(_OWORD *)(a2 + 520) = v2;
  v4 = *(_OWORD *)(result + 168);
  v5 = *(_OWORD *)(result + 184);
  v6 = *(_OWORD *)(result + 216);
  *(_OWORD *)(a2 + 600) = *(_OWORD *)(result + 200);
  *(_OWORD *)(a2 + 616) = v6;
  *(_OWORD *)(a2 + 568) = v4;
  *(_OWORD *)(a2 + 584) = v5;
  v7 = *(_OWORD *)(result + 232);
  v8 = *(_OWORD *)(result + 248);
  v9 = *(_OWORD *)(result + 280);
  *(_OWORD *)(a2 + 664) = *(_OWORD *)(result + 264);
  *(_OWORD *)(a2 + 680) = v9;
  *(_OWORD *)(a2 + 632) = v7;
  *(_OWORD *)(a2 + 648) = v8;
  v10 = *(_OWORD *)(result + 56);
  v11 = *(_OWORD *)(result + 72);
  v12 = *(_OWORD *)(result + 104);
  *(_OWORD *)(a2 + 728) = *(_OWORD *)(result + 88);
  *(_OWORD *)(a2 + 744) = v12;
  *(_OWORD *)(a2 + 696) = v10;
  *(_OWORD *)(a2 + 712) = v11;
  v13 = *(_QWORD **)(result + 8);
  if (v13 == (_QWORD *)(result + 16))
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    while (1)
    {
      *(_QWORD *)(a2 + 8 * v14 + 8) = v13[4];
      if (v14 == 63)
        break;
      v15 = (_QWORD *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v13[2];
          v17 = *v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v17);
      }
      ++v14;
      v13 = v16;
      if (v16 == (_QWORD *)(result + 16))
        goto LABEL_13;
    }
    v14 = 64;
  }
LABEL_13:
  *(_QWORD *)a2 = v14;
  return result;
}

void OUTLINED_FUNCTION_6_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>::Validate(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint8_t *v3;

  OUTLINED_FUNCTION_1_3(a1, a2);
  OUTLINED_FUNCTION_6_2(&dword_2069AB000, MEMORY[0x24BDACB70], v2, "The input tensors dimension should match for interleaved concat.\n", v3);
}

void ZinConcatValidator<ANECConcatLayerDesc,ANECTensorDesc>::Validate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Interleave is supported only in channel concat", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateMinTensorSize()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_8(&dword_2069AB000, MEMORY[0x24BDACB70], v0, "Conv padded input tensor width %ld is smaller than the kernel width %ld\n", v1, v2, v3, v4, v5);
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelQuantizationParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Value is out of bounds.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Only int8 and uint8 kernel formats are supported with kernel quantization.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Mutable kernels are not supported with kernel quantization.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Per-cout zero point and scalar zero point cannot be defined simultaneously.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Per-cout scale and scalar scale cannot be defined simultaneously.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Per-cout scale format is invalid.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidatePaletteVectorSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Specified kernel palette vector size leads to unsupported palette LUT size.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid kernel format.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Invalid kernel palette vector size.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Mutable kernels are not supported with vector palettization.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateOCGSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "illegal kernel dimension configuration\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ValidateParts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Convs after split are not valid\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinConvValidator<ANECConvLayerDesc,ANECTensorDesc>::ValidateKernelDilationFactor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "dilation_x factor is not supported", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "dilation in z dimension is not supported.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

float ZinF32ToNearestF19(float a1)
{
  int v8;

  v8 = 0;
  _S0 = frexpf(a1, &v8);
  __asm
  {
    FCVT            H0, S0
    FCVT            S0, H0; float
  }
  return ldexpf(_S0, v8);
}

BOOL ZinF16OutOfBounds(float a1)
{
  return a1 < -65504.0 || a1 > 65504.0;
}

void ZinF16CheckInBounds(float a1)
{
  if (a1 > 65504.0)
    ZinAssertImpl("Float value is too large for FP16: %f", a1);
  if (a1 < -65504.0)
    ZinAssertImpl("Float value is too small for FP16: %f", a1);
}

void ZinAneTdHw_v10::ZinAneTdHw_v10(ZinAneTdHw_v10 *this, unsigned int a2, char a3, int a4)
{
  _OWORD *v7;

  v7 = (_OWORD *)((char *)this + 952);
  bzero(this, 0x3B4uLL);
  *((_QWORD *)this + 121) = 0;
  *v7 = 0u;
  *((_BYTE *)this + 976) = a3;
  *((_DWORD *)this + 245) = a4;
}

uint64_t ZinAneTdHw_v10::GetRegisterValueFromAddress(ZinAneTdHw_v10 *this, unsigned int a2)
{
  char *v2;
  unsigned int v3;

  if (a2 <= 0x4B)
  {
    v2 = (char *)this + 244;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  v3 = a2 - 16640;
  if (a2 - 16640 <= 0x77)
  {
    v2 = (char *)this + 612;
LABEL_13:
    a2 = v3;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  v3 = a2 - 17664;
  if (a2 - 17664 <= 0x37)
  {
    v2 = (char *)this + 740;
    goto LABEL_13;
  }
  v3 = a2 - 18688;
  if (a2 - 18688 <= 0x2B)
  {
    v2 = (char *)this + 804;
    goto LABEL_13;
  }
  v3 = a2 - 19712;
  if (a2 - 19712 <= 0x113)
  {
    v2 = (char *)this + 328;
    goto LABEL_13;
  }
  v3 = a2 - 20736;
  if (a2 - 20736 <= 0x53)
  {
    v2 = (char *)this + 856;
    goto LABEL_13;
  }
  a2 -= 21760;
  if (a2 <= 0x87)
  {
    v2 = (char *)this + 36;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  return 0;
}

void ZinAneTdHw_v19::ZinAneTdHw_v19(ZinAneTdHw_v19 *this, unsigned int a2, char a3, int a4)
{
  bzero(this, 0x58CuLL);
  *((_QWORD *)this + 180) = 0;
  *((_OWORD *)this + 89) = 0u;
  *((_BYTE *)this + 1448) = a3;
  *((_DWORD *)this + 363) = a4;
}

uint64_t ZinAneTdHw_v19::GetRegisterValueFromAddress(ZinAneTdHw_v19 *this, unsigned int a2)
{
  char *v2;
  unsigned int v3;

  if (a2 <= 0x5B)
  {
    v2 = (char *)this + 508;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  v3 = a2 - 16640;
  if (a2 - 16640 <= 0xA7)
  {
    v2 = (char *)this + 948;
LABEL_15:
    a2 = v3;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  if (a2 >> 6 == 276)
  {
    v2 = (char *)this + 1124;
    a2 -= 17664;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  v3 = a2 - 18688;
  if (a2 - 18688 <= 0x33)
  {
    v2 = (char *)this + 1196;
    goto LABEL_15;
  }
  v3 = a2 - 19712;
  if (a2 - 19712 <= 0x14B)
  {
    v2 = (char *)this + 608;
    goto LABEL_15;
  }
  v3 = a2 - 20736;
  if (a2 - 20736 <= 0x5B)
  {
    v2 = (char *)this + 1256;
    goto LABEL_15;
  }
  v3 = a2 - 21760;
  if (a2 - 21760 <= 0x127)
  {
    v2 = (char *)this + 44;
    goto LABEL_15;
  }
  a2 -= 22784;
  if (a2 <= 0x37)
  {
    v2 = (char *)this + 1356;
    return *(unsigned int *)&v2[a2 & 0xFFFFFFFC];
  }
  return 0;
}

__CFDictionary *ZinCreateRingBufferWriterUnit(const ZinIrUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  ZinAddOffsetsToParamsDict(Mutable, (uint64_t)a1 + 120, (uint64_t)a1 + 80, CFSTR("RingBufferWriterInfo"));
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

void sub_20700677C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  ZinPattern *v21;
  ZinLinearPattern *v22;
  _QWORD *v23;
  ZinLinearPattern *v24;
  _QWORD *v26;
  uint64_t v27;

  v26 = (_QWORD *)*((_QWORD *)v21 + 82);
  if (v26 == v23)
  {
    v27 = 4;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v27 = 5;
    v23 = (_QWORD *)*((_QWORD *)v21 + 82);
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v27))(v23);
LABEL_6:
  ZinLinearPattern::~ZinLinearPattern(v24);
  ZinLinearPattern::~ZinLinearPattern(v22);
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  ZinPattern::~ZinPattern(v21);
  _Unwind_Resume(a1);
}

_QWORD *ZinManyToOnePattern::InitializeInputs<ZinManyToOnePattern::ParamsT<std::vector<ZinLinearPattern::AtomItemDesc const>>>(_QWORD *result, uint64_t **a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE v16[24];
  _BYTE *v17;
  _QWORD v18[23];
  _QWORD v19[5];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v2 = **a2;
  if ((*a2)[1] != v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = result + 2;
    v8 = result + 13;
    v9 = result + 23;
    while (1)
    {
      v10 = *((_DWORD *)v4 + 16);
      v11 = v10 ? v10 : (v6 != (_QWORD)a2[1]);
      v17 = 0;
      ZinLinearPattern::ZinLinearPattern(v18, v2 + v5, v7, v11, v16, v8);
      v12 = v4[24];
      if (v12 >= v4[25])
      {
        v13 = std::vector<ZinLinearPattern>::__push_back_slow_path<ZinLinearPattern>(v9, (uint64_t)v18);
      }
      else
      {
        std::vector<ZinLinearPattern>::__construct_one_at_end[abi:ne180100]<ZinLinearPattern>((uint64_t)v9, (uint64_t)v18);
        v13 = v12 + 208;
      }
      v4[24] = v13;
      v18[0] = &off_24C01BCC8;
      v15 = (void **)v19;
      std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v15);
      ZinPattern::~ZinPattern((ZinPattern *)v18);
      result = v17;
      if (v17 == v16)
        break;
      if (v17)
      {
        v14 = 5;
LABEL_13:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
      }
      ++v6;
      v2 = **a2;
      v5 += 24;
      if (v6 >= 0xAAAAAAAAAAAAAAABLL * (((*a2)[1] - v2) >> 3))
        return result;
    }
    result = v16;
    v14 = 4;
    goto LABEL_13;
  }
  return result;
}

void sub_207006A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list v4;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD *);
  ZinLinearPattern::~ZinLinearPattern((ZinLinearPattern *)va1);
  v4 = (va_list)v10;
  if (v10 == (_QWORD *)va)
  {
    v5 = 4;
    va_copy(v4, va);
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(a1);
}

void ZinManyToOnePattern::ZinManyToOnePattern(ZinManyToOnePattern *this, const ZinManyToOnePattern *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;

  ZinPattern::ZinPattern(this, a2);
  *v4 = &off_24C01F100;
  v4[23] = 0;
  v4[24] = 0;
  v4[25] = 0;
  std::vector<ZinLinearPattern>::__init_with_size[abi:ne180100]<ZinLinearPattern*,ZinLinearPattern*>(v4 + 23, *((_QWORD *)a2 + 23), *((_QWORD *)a2 + 24), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 4));
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  ZinPattern::ZinPattern((ZinManyToOnePattern *)((char *)this + 216), (const ZinManyToOnePattern *)((char *)a2 + 216));
  *((_QWORD *)this + 27) = &off_24C01BCC8;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 50) = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((_QWORD *)this + 50, *((_QWORD *)a2 + 50), *((_QWORD *)a2 + 51), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 51) - *((_QWORD *)a2 + 50)) >> 5));
  ZinPattern::ZinPattern((ZinManyToOnePattern *)((char *)this + 424), (const ZinManyToOnePattern *)((char *)a2 + 424));
  *((_QWORD *)this + 53) = &off_24C01BCC8;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 77) = 0;
  std::vector<ZinLinearPattern::AtomItem const>::__init_with_size[abi:ne180100]<ZinLinearPattern::AtomItem const*,ZinLinearPattern::AtomItem const*>((_QWORD *)this + 76, *((_QWORD *)a2 + 76), *((_QWORD *)a2 + 77), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 77) - *((_QWORD *)a2 + 76)) >> 5));
  std::__function::__value_func<MatchStatus ()(MatchParams const&)>::__value_func[abi:ne180100]((uint64_t)this + 632, (uint64_t)a2 + 632);
  v5 = *((_QWORD *)this + 23);
  for (i = *((_QWORD *)this + 24); v5 != i; v5 += 208)
    ZinPattern::SetParentState(v5, (ZinManyToOnePattern *)((char *)this + 104));
  ZinPattern::SetParentState((uint64_t)this + 216, (ZinManyToOnePattern *)((char *)this + 104));
  ZinPattern::SetParentState((uint64_t)this + 424, (ZinManyToOnePattern *)((char *)this + 104));
}

void sub_207006BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  ZinPattern *v10;
  ZinLinearPattern *v11;
  ZinLinearPattern *v12;

  ZinLinearPattern::~ZinLinearPattern(v12);
  ZinLinearPattern::~ZinLinearPattern(v11);
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  ZinPattern::~ZinPattern(v10);
  _Unwind_Resume(a1);
}

double ZinManyToOnePattern::SharedClone@<D0>(ZinManyToOnePattern *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  std::allocate_shared[abi:ne180100]<ZinManyToOnePattern,std::allocator<ZinManyToOnePattern>,ZinManyToOnePattern const&,void>(this, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void ZinManyToOnePattern::GetInputEdges(ZinManyToOnePattern *this@<X0>, char **a2@<X8>)
{
  uint64_t FirstMatch;
  uint64_t v5;
  uint64_t v6;
  ZinMirTensorTransform *v7;
  unint64_t v8;
  uint64_t SinglePreviousLayer;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  void *__p;
  __int128 *v24;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  FirstMatch = ZinPattern::GetFirstMatch((ZinManyToOnePattern *)((char *)this + 216));
  v5 = *((_QWORD *)this + 23);
  v6 = *((_QWORD *)this + 24);
  if (v5 != v6)
  {
    v7 = (ZinMirTensorTransform *)FirstMatch;
    v8 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 24))(&__p, v5);
      if (v24 == __p)
      {
        SinglePreviousLayer = ZinMirTensorTransform::GetSinglePreviousLayer(v7, v8);
        v10 = SinglePreviousLayer;
        if (SinglePreviousLayer)
        {
          v12 = (uint64_t *)a2[1];
          v11 = (unint64_t)a2[2];
          if ((unint64_t)v12 >= v11)
          {
            v14 = ((char *)v12 - *a2) >> 4;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 60)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v16 = v11 - (_QWORD)*a2;
            if (v16 >> 3 > v15)
              v15 = v16 >> 3;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
              v17 = 0xFFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
              v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,unsigned long>>>((uint64_t)(a2 + 2), v17);
            else
              v18 = 0;
            v19 = (uint64_t *)&v18[16 * v14];
            *v19 = v10;
            v19[1] = (uint64_t)v7;
            v21 = *a2;
            v20 = a2[1];
            v22 = v19;
            if (v20 != *a2)
            {
              do
              {
                *((_OWORD *)v22 - 1) = *((_OWORD *)v20 - 1);
                v22 -= 2;
                v20 -= 16;
              }
              while (v20 != v21);
              v20 = *a2;
            }
            v13 = (char *)(v19 + 2);
            *a2 = (char *)v22;
            a2[1] = (char *)(v19 + 2);
            a2[2] = &v18[16 * v17];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v12 = SinglePreviousLayer;
            v12[1] = (uint64_t)v7;
            v13 = (char *)(v12 + 2);
          }
          a2[1] = v13;
        }
      }
      else
      {
        std::vector<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>,std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>>(a2, (uint64_t)a2[1], (__int128 *)__p, v24, ((char *)v24 - (_BYTE *)__p) >> 4);
      }
      if (__p)
      {
        v24 = (__int128 *)__p;
        operator delete(__p);
      }
      ++v8;
      v5 += 208;
    }
    while (v5 != v6);
  }
}

void sub_207006E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void ZinManyToOnePattern::GetOutputEdges(ZinManyToOnePattern *this@<X0>, uint64_t a2@<X8>)
{
  void *__p;
  __int128 *v5;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  ZinLinearPattern::GetOutputEdges((ZinManyToOnePattern *)((char *)this + 424), (char **)&__p);
  std::vector<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>,std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>>((char **)a2, 0, (__int128 *)__p, v5, ((char *)v5 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v5 = (__int128 *)__p;
    operator delete(__p);
  }
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    ZinLinearPattern::GetOutputEdges((ZinManyToOnePattern *)((char *)this + 216), (char **)&__p);
    std::vector<std::pair<ZinIrOpLayer *,ZinIrOpLayer *>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>,std::__wrap_iter<std::pair<ZinIrOpLayer *,ZinIrOpLayer *> const*>>((char **)a2, *(_QWORD *)(a2 + 8), (__int128 *)__p, v5, ((char *)v5 - (_BYTE *)__p) >> 4);
    if (__p)
    {
      v5 = (__int128 *)__p;
      operator delete(__p);
    }
  }
}

void sub_207006F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinManyToOnePattern::GetLastMatch(ZinManyToOnePattern *this)
{
  uint64_t result;

  result = ZinLinearPattern::GetLastMatch((ZinManyToOnePattern *)((char *)this + 424));
  if (!result)
    return ZinLinearPattern::GetLastMatch((ZinManyToOnePattern *)((char *)this + 216));
  return result;
}

void ZinManyToOnePattern::~ZinManyToOnePattern(ZinManyToOnePattern *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = &off_24C01F100;
  v2 = (char *)this + 632;
  v3 = (char *)*((_QWORD *)this + 82);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  *((_QWORD *)this + 53) = &off_24C01BCC8;
  v5 = (void **)((char *)this + 608);
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v5);
  ZinPattern::~ZinPattern((ZinManyToOnePattern *)((char *)this + 424));
  *((_QWORD *)this + 27) = &off_24C01BCC8;
  v5 = (void **)((char *)this + 400);
  std::vector<ZinLinearPattern::AtomItemDesc const>::__destroy_vector::operator()[abi:ne180100](&v5);
  ZinPattern::~ZinPattern((ZinManyToOnePattern *)((char *)this + 216));
  v5 = (void **)((char *)this + 184);
  std::vector<ZinLinearPattern>::__destroy_vector::operator()[abi:ne180100](&v5);
  ZinPattern::~ZinPattern(this);
  MEMORY[0x20BD002F8]();
}

_QWORD *std::allocate_shared[abi:ne180100]<ZinManyToOnePattern,std::allocator<ZinManyToOnePattern>,ZinManyToOnePattern const&,void>@<X0>(const ZinManyToOnePattern *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2B0uLL);
  result = std::__shared_ptr_emplace<ZinManyToOnePattern>::__shared_ptr_emplace[abi:ne180100]<ZinManyToOnePattern const&,std::allocator<ZinManyToOnePattern>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2070070D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ZinManyToOnePattern>::__shared_ptr_emplace[abi:ne180100]<ZinManyToOnePattern const&,std::allocator<ZinManyToOnePattern>,0>(_QWORD *a1, const ZinManyToOnePattern *a2)
{
  a1[2] = 0;
  *a1 = &unk_24C05B7D0;
  a1[1] = 0;
  ZinManyToOnePattern::ZinManyToOnePattern((ZinManyToOnePattern *)(a1 + 3), a2);
  return a1;
}

void sub_207007120(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

__CFDictionary *ZinCreateSpaceToChannelUnit(const ZinIrSpaceToChannelUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = 36;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

void ZinReshapeLayerUtils::TraceReshapeDimension(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t Interleave;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t ValueAt;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  int v44;
  void *v45;
  char *v46;
  char *v47;
  int64x2_t __p[2];
  int64x2_t v49[2];
  _OWORD v50[2];
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  int *v54;

  v7 = *(_OWORD *)(a1 + 64);
  v52[0] = *(_OWORD *)(a1 + 48);
  v52[1] = v7;
  v8 = *(_OWORD *)(a2 + 64);
  v50[0] = *(_OWORD *)(a2 + 48);
  v53 = *(_QWORD *)(a1 + 80);
  v50[1] = v8;
  v51 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a1 + 104);
  if (v9)
    v10 = *(_DWORD *)(v9 + 96);
  else
    v10 = 0;
  v11 = *(_DWORD *)(a1 + 88);
  DimensionOrderHint::DimensionOrderHint(__p, a3);
  Interleave = ZinIrTensor::GetInterleave((ZinIrTensor *)a1);
  ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)(a1 + 48), v11, v10, (uint64_t)__p, 1, Interleave, v13, v49);
  if (__p[0].i64[0])
  {
    __p[0].i64[1] = __p[0].i64[0];
    operator delete((void *)__p[0].i64[0]);
  }
  v14 = *(_QWORD *)(a2 + 104);
  if (v14)
    v15 = *(_DWORD *)(v14 + 96);
  else
    v15 = 0;
  v16 = *(_DWORD *)(a2 + 88);
  DimensionOrderHint::DimensionOrderHint(&v45, a3);
  v17 = ZinIrTensor::GetInterleave((ZinIrTensor *)a2);
  ZinIrTensor::CreateDefaultStride((const ZinTensorDimensions *)(a2 + 48), v16, v15, (uint64_t)&v45, 1, v17, v18, __p);
  if (v45)
  {
    v46 = (char *)v45;
    operator delete(v45);
  }
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v19 = (_DWORD *)a3[1];
  if (v19 != (_DWORD *)*a3)
  {
    v20 = a3[1];
    do
    {
      v21 = *(_DWORD *)(v20 - 4);
      v20 -= 4;
      v44 = v21;
      ValueAt = GetValueAtDimension<ZinTensorDimensions>(__p[0].i64, v21);
      v23 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v50, v44);
      v24 = v19;
      do
      {
        v19 = v24;
        if (v24 == (_DWORD *)*a3)
          break;
        --v24;
        v25 = GetValueAtDimension<ZinTensorDimensions>(v49[0].i64, *(v19 - 1));
      }
      while (!(ValueAt % (GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v52, *(v19 - 1)) * v25)));
      v26 = 0;
      v27 = v23 * ValueAt;
      do
      {
        v28 = v26;
        v29 = (_DWORD *)((char *)v19 + v26);
        if ((_DWORD *)((char *)v19 + v26) == (_DWORD *)*a3)
          break;
        v30 = GetValueAtDimension<ZinTensorDimensions>(v49[0].i64, *(v29 - 1));
        v26 = v28 - 4;
      }
      while (v30 % v27);
      v45 = 0;
      v46 = 0;
      v47 = 0;
      if (v28)
      {
        v31 = 0;
        v32 = v19;
        do
        {
          --v32;
          if (v31 >= v47)
          {
            v34 = (char *)v45;
            v35 = (v31 - (_BYTE *)v45) >> 2;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 62)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v37 = v47 - (_BYTE *)v45;
            if ((v47 - (_BYTE *)v45) >> 1 > v36)
              v36 = v37 >> 1;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
              v38 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v47, v38);
              v34 = (char *)v45;
              v31 = v46;
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[4 * v35];
            *(_DWORD *)v40 = *v32;
            v33 = v40 + 4;
            while (v31 != v34)
            {
              v41 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v40 - 1) = v41;
              v40 -= 4;
            }
            v45 = v40;
            v46 = v33;
            v47 = &v39[4 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_DWORD *)v31 = *v32;
            v33 = v31 + 4;
          }
          v46 = v33;
          v31 = v33;
        }
        while (v29 != v32);
      }
      v54 = &v44;
      v42 = (char *)(std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>((uint64_t **)a4, &v44, (uint64_t)&std::piecewise_construct, &v54)+ 5);
      if (v42 != (char *)&v45)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v42, (char *)v45, (uint64_t)v46, (v46 - (_BYTE *)v45) >> 2);
      if (v45)
      {
        v46 = (char *)v45;
        operator delete(v45);
      }
    }
    while (v20 != *a3);
  }
}

void sub_207007508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DimensionOrderHint::~DimensionOrderHint(DimensionOrderHint *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void ZinReshapeLayerUtils::ConvertTransposeMappingToDims(uint64_t *a1, char **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = a2 + 2;
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v19, *(const void **)v2, *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3);
      v6 = v19;
      v7 = v20;
      if (v19 != v20)
      {
        v8 = a2[1];
        do
        {
          v9 = *v6;
          if ((unint64_t)v8 >= *v5)
          {
            v10 = (v8 - *a2) >> 3;
            if ((unint64_t)(v10 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v11 = *v5 - (_QWORD)*a2;
            v12 = v11 >> 2;
            if (v11 >> 2 <= (unint64_t)(v10 + 1))
              v12 = v10 + 1;
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
              v13 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v13 = v12;
            if (v13)
              v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v13);
            else
              v14 = 0;
            v15 = &v14[8 * v10];
            *(_QWORD *)v15 = v9;
            v8 = v15 + 8;
            v17 = *a2;
            v16 = a2[1];
            if (v16 != *a2)
            {
              do
              {
                v18 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *((_QWORD *)v15 - 1) = v18;
                v15 -= 8;
              }
              while (v16 != v17);
              v16 = *a2;
            }
            *a2 = v15;
            a2[1] = v8;
            a2[2] = &v14[8 * v13];
            if (v16)
              operator delete(v16);
          }
          else
          {
            *(_QWORD *)v8 = v9;
            v8 += 8;
          }
          a2[1] = v8;
          ++v6;
        }
        while (v6 != v7);
        v6 = v19;
      }
      if (v6)
      {
        v20 = v6;
        operator delete(v6);
      }
      v2 += 24;
    }
    while (v2 != v3);
  }
}

void sub_207007710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayerUtils::IsValidDecomposition(__int128 *a1, int a2, uint64_t a3, uint64_t *a4)
{
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const std::string::value_type **v24;
  __int128 v25;
  uint64_t *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v32;
  void *v35[10];
  void *__p;
  void *v37;
  _BYTE v38[24];
  uint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int16 v44;
  int64x2_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void (**v51)(ZinIrUnitInfo *__hidden);
  std::string v52;
  int v53;
  std::string v54;
  __int128 v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  _QWORD *v62;
  _BYTE *v63;

  std::vector<ZinTensorDimensions>::vector(&v62, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 6) + 1);
  v6 = v62;
  v7 = *a1;
  v8 = a1[1];
  v62[4] = *((_QWORD *)a1 + 4);
  *v6 = v7;
  v6[1] = v8;
  v9 = *a4;
  if (a4[1] != *a4)
  {
    v10 = 0;
    do
    {
      if (*(_DWORD *)(v9 + 192 * v10) == 21)
      {
        v11 = &v62[5 * v10];
        v12 = v9 + 192 * v10++ + 128;
        ZinIrTransposeUnitInfo::TransposeDimensions<ZinTensorDimensions>(v11, v12, v11 + 5);
      }
      else
      {
        v13 = v9 + 192 * v10++;
        v14 = *(_QWORD *)(v13 + 160);
        v15 = *(_OWORD *)(v13 + 128);
        v16 = *(_OWORD *)(v13 + 144);
        v17 = (char *)&v62[5 * v10];
        *((_QWORD *)v17 + 4) = v14;
        *(_OWORD *)v17 = v15;
        *((_OWORD *)v17 + 1) = v16;
      }
      v9 = *a4;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 6) > v10);
    v6 = v62;
  }
  v59 = 0;
  v60 = 0;
  v61 = 0;
  std::vector<ZinTensorDimensions>::__init_with_size[abi:ne180100]<std::__wrap_iter<ZinTensorDimensions const*>,std::__wrap_iter<ZinTensorDimensions const*>>(&v59, v6, (uint64_t)v63, 0xCCCCCCCCCCCCCCCDLL * ((v63 - (_BYTE *)v6) >> 3));
  v19 = *a4;
  v18 = a4[1];
  if (v18 == *a4)
  {
LABEL_21:
    v30 = 1;
    goto LABEL_23;
  }
  v20 = 0;
  v21 = 0;
  v22 = 136;
  v32 = vdupq_n_s64(1uLL);
  while (1)
  {
    v23 = v19 + v22;
    if (*(_DWORD *)(v19 + v22 - 136) == 21)
      break;
LABEL_20:
    ++v21;
    v22 += 192;
    v20 += 5;
    if (0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 6) <= v21)
      goto LABEL_21;
  }
  v51 = off_24C017CA0;
  v24 = (const std::string::value_type **)(v23 - 80);
  if (*(char *)(v23 - 57) < 0)
  {
    std::string::__init_copy_ctor_external(&v52, *v24, *(_QWORD *)(v19 + v22 - 72));
  }
  else
  {
    v25 = *(_OWORD *)v24;
    v52.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 - 64);
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v25;
  }
  v26 = (uint64_t *)(v19 + v22);
  v53 = *((_DWORD *)v26 - 14);
  memset(&v54, 0, sizeof(v54));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v54, (__int128 *)*(v26 - 6), (__int128 *)*(v26 - 5), 0xAAAAAAAAAAAAAAABLL * ((*(v26 - 5) - *(v26 - 6)) >> 3));
  v55 = *(_OWORD *)(v26 - 3);
  v51 = off_24C021A98;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v56, (const void *)*(v26 - 1), *v26, (*v26 - *(v26 - 1)) >> 3);
  v40 = a2;
  v28 = *(_OWORD *)&v62[v20];
  v27 = *(_OWORD *)&v62[v20 + 2];
  v43 = v62[v20 + 4];
  v41 = v28;
  v42 = v27;
  v44 = 0;
  v45 = v32;
  v46 = 0;
  v47 = 0;
  v50 = 0;
  v48 = 0;
  v49 = 0;
  ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::ZinTransposeValidator(v38, a3, &v51, &v40);
  ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::Validate((uint64_t)v38);
  ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::GetValidAlternateLayerDesc((uint64_t)v38, (uint64_t)v35);
  v29 = v39;
  v35[0] = off_24C021A98;
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v35);
  ZinTransposeValidator<ZinIrTransposeUnitInfo,ZinIrTensorInfo>::~ZinTransposeValidator((uint64_t)v38);
  v51 = off_24C021A98;
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v51);
  if (!v29)
  {
    v19 = *a4;
    v18 = a4[1];
    goto LABEL_20;
  }
  v30 = 0;
LABEL_23:
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  return v30;
}

void sub_207007A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;

  v33 = *(void **)(v31 - 112);
  if (v33)
  {
    *(_QWORD *)(v31 - 104) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayerUtils::DecomposeMisAlignedReshape(int64x2_t *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  unsigned int VectorDimension;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64x2_t v51;
  int64x2_t v52;
  unsigned int AxisToSwapWidth;
  const ZinTensorDimensions *v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int64x2_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int64x2_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  char *v141;
  char *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t *v152;
  char *v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  void **v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BOOL8 v189;
  uint64_t j;
  const ZinIrHalParameters *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char *v198;
  _QWORD *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  uint64_t *v239;
  char *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t ValueAt;
  unint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  _QWORD *v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  _QWORD *v278;
  char *v279;
  char *v280;
  char *v281;
  uint64_t *v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  char *v290;
  uint64_t v291;
  _QWORD *v292;
  char *v293;
  char *v294;
  char *v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t *v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  char *v314;
  uint64_t *v315;
  char *v316;
  char *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  uint64_t *v336;
  char *v337;
  char *v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  char *v344;
  char *v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  const ZinTensorDimensions *v354;
  uint64_t v355;
  _BOOL4 v356;
  _BOOL4 v357;
  BOOL v358;
  uint64_t v359;
  BOOL v360;
  _BOOL4 v361;
  int v362;
  _QWORD *v363;
  int64x2_t v364;
  char *v365;
  int v366;
  uint64_t v367;
  char *v368;
  _QWORD *v369;
  char *v370;
  uint64_t v371;
  char *v372;
  char *v373;
  char *v374;
  char *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  char *v388;
  _QWORD *v389;
  char *v390;
  uint64_t v391;
  char *v392;
  char *v393;
  char *v394;
  char *v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  __int128 v407;
  unint64_t v408;
  uint64_t v409;
  char *v410;
  _QWORD *v411;
  char *v412;
  uint64_t v413;
  char *v414;
  char *v415;
  char *v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unsigned int *v422;
  int v423;
  unsigned int v424;
  BOOL v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  uint64_t v435;
  char *v436;
  uint64_t v437;
  uint64_t LowestFactorGreaterThan;
  int v439;
  uint64_t i;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  int v445;
  unsigned int v447;
  void *v448;
  uint64_t *v449;
  uint64_t *v450;
  void *v451;
  uint64_t *v452;
  uint64_t *v453;
  void *v454;
  void *v455;
  char *v456;
  void *v457;
  char *v458;
  _QWORD *v459;
  int v460;
  void *v461[2];
  __int128 v462;
  uint64_t v463;
  void *v464;
  char *v465;
  _QWORD *v466;
  void *v467;
  char *v468;
  _QWORD *v469;
  int v470;
  int64x2_t v471;
  int64x2_t v472;
  uint64_t v473;
  void *v474;
  void *v475;
  void *v476;
  void *v477;
  void *v478;
  void *v479;
  uint64_t v480;
  int v481;
  void *v482;
  void *v483;
  void *v484;
  void *v485;
  void *v486;
  char *v487;
  _QWORD *v488;
  int v489;
  void *__p;
  char *v491;
  _QWORD *v492;
  void *v493;
  void *v494;
  void *v495;
  void *v496;
  int64x2_t v497;
  int64x2_t v498;
  uint64_t v499;
  void *v500;
  void *v501;
  void *v502;
  void *v503;
  char *v504;
  int v505;
  void *v506;
  char *v507;
  _QWORD v508[13];
  void *v509;
  void *v510;
  int64x2_t v511;
  unint64_t v512;
  int64x2_t v513;
  void *v514;
  void *v515;
  void *v516;
  void *v517;
  int64x2_t v518;
  int64x2_t v519;
  uint64_t v520;
  void *v521;
  void *v522;
  uint64_t v523;
  int v524;
  void *v525[10];
  void *v526;
  void *v527;
  int64x2_t v528;
  int64x2_t v529;
  uint64_t v530;
  void *v531;
  void *v532;
  void *v533[24];
  void *v534;
  char *v535;
  _QWORD v536[8];
  void *v537;
  void *v538;
  void *v539;
  void *v540;
  _BYTE v541[32];
  uint64_t v542;

  if (IsVector((const ZinTensorDimensions *)a1) && IsVector((const ZinTensorDimensions *)a2))
  {
    VectorDimension = GetVectorDimension((const ZinTensorDimensions *)a1);
    v12 = GetVectorDimension((const ZinTensorDimensions *)a2);
    v13 = operator new(8uLL);
    *v13 = VectorDimension | ((unint64_t)v12 << 32);
    v492 = v13 + 1;
    __p = v13;
    v491 = (char *)(v13 + 1);
    v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v492, 2uLL);
    v14[1] = v12 | ((unint64_t)VectorDimension << 32);
    v15 = (char *)(v14 + 1);
    v17 = (char *)&v14[v16];
    v18 = (char *)(v14 + 2);
    v19 = (char *)__p;
    v20 = v491;
    if (v491 != __p)
    {
      do
      {
        v21 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v15 - 1) = v21;
        v15 -= 8;
      }
      while (v20 != v19);
      v19 = (char *)__p;
    }
    __p = v15;
    v491 = v18;
    v492 = v17;
    if (v19)
      operator delete(v19);
    v491 = v18;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v525, (uint64_t)&__p, a3);
    DimensionOrderHint::DimensionOrderHint(&v506, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)v525, (uint64_t)&v506, 1);
    if (v506)
    {
      v507 = (char *)v506;
      operator delete(v506);
    }
    v22 = a6[1];
    if (v22 >= a6[2])
    {
      v23 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
      v23 = v22 + 192;
      a6[1] = v22 + 192;
    }
    a6[1] = v23;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
    v525[0] = off_24C021A98;
    if (v526)
    {
      v527 = v526;
      operator delete(v526);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(v525);
    v42 = __p;
    if (!__p)
      goto LABEL_272;
    v491 = (char *)__p;
    goto LABEL_142;
  }
  if (IsVector((const ZinTensorDimensions *)a1))
  {
    if (GetVectorDimension((const ZinTensorDimensions *)a1) == 4)
    {
      v24 = (char *)operator new(8uLL);
      *(_QWORD *)v24 = 0x200000004;
      v508[0] = v24 + 8;
      v506 = v24;
      v507 = v24 + 8;
      v25 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v508, 2uLL);
      v25[1] = 0x400000002;
      v26 = (char *)(v25 + 1);
      v28 = (char *)&v25[v27];
      v29 = (char *)(v25 + 2);
      v30 = (char *)v506;
      v31 = v507;
      if (v507 != v506)
      {
        do
        {
          v32 = *((_QWORD *)v31 - 1);
          v31 -= 8;
          *((_QWORD *)v26 - 1) = v32;
          v26 -= 8;
        }
        while (v31 != v30);
        v30 = (char *)v506;
      }
      v506 = v26;
      v507 = v29;
      v508[0] = v28;
      if (v30)
        operator delete(v30);
      v507 = v29;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v525, (uint64_t)&v506, a3);
      DimensionOrderHint::DimensionOrderHint(&v518, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)v525, (uint64_t)&v518, 1);
      if (v518.i64[0])
      {
        v518.i64[1] = v518.i64[0];
        operator delete((void *)v518.i64[0]);
      }
      v33 = a6[1];
      if (v33 >= a6[2])
      {
        v34 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
        v34 = v33 + 192;
        a6[1] = v33 + 192;
      }
      a6[1] = v34;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
      v525[0] = off_24C021A98;
      if (v526)
      {
        v527 = v526;
        operator delete(v526);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(v525);
      if (v506)
      {
        v507 = (char *)v506;
        operator delete(v506);
      }
    }
    v61 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0] * a1[1].i64[1];
    v62 = *(_QWORD *)(a2 + 24);
    v528.i64[0] = 1;
    v528.i64[1] = v62;
    v529 = vdupq_n_s64(1uLL);
    v530 = v61 / v62;
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v471, (uint64_t)&v528);
    v461[1] = 0;
    *(_QWORD *)&v462 = 0;
    v461[0] = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v461, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
    DWORD2(v462) = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)&v471, (uint64_t)v461, 1);
    if (v461[0])
    {
      v461[1] = v461[0];
      operator delete(v461[0]);
    }
    v63 = a6[1];
    if (v63 >= a6[2])
    {
      v64 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
      v64 = v63 + 192;
      a6[1] = v63 + 192;
    }
    a6[1] = v64;
    v65 = (char *)operator new(8uLL);
    *(_QWORD *)v65 = 0x200000004;
    v468 = v65 + 8;
    v469 = v65 + 8;
    v467 = v65;
    v66 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v469, 2uLL);
    v66[1] = 0x400000002;
    v67 = (char *)(v66 + 1);
    v69 = (char *)&v66[v68];
    v70 = (char *)(v66 + 2);
    v71 = (char *)v467;
    v72 = v468;
    if (v468 != v467)
    {
      do
      {
        v73 = *((_QWORD *)v72 - 1);
        v72 -= 8;
        *((_QWORD *)v67 - 1) = v73;
        v67 -= 8;
      }
      while (v72 != v71);
      v71 = (char *)v467;
    }
    v467 = v67;
    v468 = v70;
    v469 = v69;
    if (v71)
      operator delete(v71);
    v468 = v70;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v511, (uint64_t)&v467, a3);
    DimensionOrderHint::DimensionOrderHint(&v521, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v525, (uint64_t)&v511, (uint64_t)&v521, 1);
    if (v521)
    {
      v522 = v521;
      operator delete(v521);
    }
    v74 = a6[1];
    if (v74 >= a6[2])
    {
      v75 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v525);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v525);
      v75 = v74 + 192;
      a6[1] = v74 + 192;
    }
    a6[1] = v75;
    v76 = *(int64x2_t *)(a2 + 16);
    v497 = *(int64x2_t *)a2;
    v498 = v76;
    v499 = *(_QWORD *)(a2 + 32);
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v534, (uint64_t)&v497);
    v504 = 0;
    v502 = 0;
    v503 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v502, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
    v505 = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v506, (uint64_t)&v534, (uint64_t)&v502, 1);
    if (v502)
    {
      v503 = v502;
      operator delete(v502);
    }
    v77 = a6[1];
    if (v77 >= a6[2])
    {
      v78 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v506);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v506);
      v78 = v77 + 192;
      a6[1] = v77 + 192;
    }
    a6[1] = v78;
    *(void **)v541 = v533[16];
    *(void **)&v541[16] = v533[18];
    *(void **)&v541[8] = v533[19];
    *(void **)&v541[24] = v533[17];
    v542 = (uint64_t)v533[20];
    v457 = 0;
    v458 = 0;
    v459 = 0;
    if (ZinReshapeLayerUtils::IsConvertibleToTranspose((uint64_t *)v541, v497.i64, (DimensionOrderHint *)a5, (uint64_t *)&v457)&& v458 - (_BYTE *)v457 == 24&& (ZinIrTransposeUnit::IsXYTranspose((int **)v457, 1, 3) || ZinIrTransposeUnit::IsXYTranspose((int **)v457, 0, 3))&& v498.i64[0] > *(uint64_t *)&v541[16])
    {
      v79 = (char *)operator new(8uLL);
      *(_QWORD *)v79 = 0x300000001;
      v465 = v79 + 8;
      v466 = v79 + 8;
      v464 = v79;
      v80 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v466, 2uLL);
      v80[1] = 0x100000003;
      v81 = (char *)(v80 + 1);
      v83 = (char *)&v80[v82];
      v84 = (char *)(v80 + 2);
      v85 = (char *)v464;
      v86 = v465;
      if (v465 != v464)
      {
        do
        {
          v87 = *((_QWORD *)v86 - 1);
          v86 -= 8;
          *((_QWORD *)v81 - 1) = v87;
          v81 -= 8;
        }
        while (v86 != v85);
        v85 = (char *)v464;
      }
      v464 = v81;
      v465 = v84;
      v466 = v83;
      if (v85)
        operator delete(v85);
      v465 = v84;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v478, (uint64_t)&v464, a3);
      DimensionOrderHint::DimensionOrderHint(&v486, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (uint64_t)&v478, (uint64_t)&v486, 1);
      if (v486)
      {
        v487 = (char *)v486;
        operator delete(v486);
      }
      v88 = a6[1];
      v89 = (int *)(v88 - 192);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)(v88 - 192));
      a6[1] = v88 - 192;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)(v88 - 384));
      a6[1] = v88 - 384;
      if (v88 - 384 >= (unint64_t)a6[2])
      {
        v89 = (int *)std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)(v88 - 384), (int *)&__p);
        a6[1] = (uint64_t)v89;
      }
      a6[1] = (uint64_t)v89;
      if ((unint64_t)v89 >= a6[2])
      {
        v187 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v525);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>(v89, (int *)v525);
        v187 = (uint64_t)(v89 + 48);
        a6[1] = (uint64_t)(v89 + 48);
      }
      a6[1] = v187;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
      v478 = off_24C021A98;
      if (v482)
      {
        v483 = v482;
        operator delete(v482);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(&v478);
      if (v464)
      {
        v465 = (char *)v464;
        operator delete(v464);
      }
    }
    __p = &v457;
    std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v506);
    v534 = off_24C01FAB8;
    if (v539)
    {
      v540 = v539;
      operator delete(v539);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(&v534);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v525);
    v511.i64[0] = (uint64_t)off_24C021A98;
    if (v514)
    {
      v515 = v514;
      operator delete(v514);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v511);
    if (v467)
    {
      v468 = (char *)v467;
      operator delete(v467);
    }
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
    v471.i64[0] = (uint64_t)off_24C01FAB8;
    if (v476)
    {
      v477 = v476;
      operator delete(v476);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v471);
    goto LABEL_272;
  }
  if (IsVector((const ZinTensorDimensions *)a2))
  {
    v35 = (_QWORD *)*a4;
    v36 = GetVectorDimension((const ZinTensorDimensions *)a2);
    v37 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0] * a1[1].i64[1];
    v467 = 0;
    ZinTensorFormatGetSize(a3, &v467);
    v38 = a1[1].i64[1];
    if ((unint64_t)((_QWORD)v467 * v38) % v35[66])
      v39 = 1;
    else
      v39 = v37 > v35[40];
    if (v39)
    {
      v447 = v36;
      if (v38 != 1)
      {
        v444 = a3;
        v117 = a1[2].i64[0];
        v118 = a1->i64[0];
        v119 = a1->i64[1];
        v120 = a1[1].i64[0];
        v121 = operator new(0x28uLL);
        v122 = v121;
        v123 = 0;
        *v121 = v118;
        v121[1] = v117;
        v121[2] = v119;
        v121[3] = v120;
        v121[4] = v38;
        do
        {
          if (v121[v123] == 1)
            goto LABEL_151;
          ++v123;
        }
        while (v123 != 5);
        LODWORD(v123) = 0;
LABEL_151:
        v124 = (char *)operator new(8uLL);
        v125 = v123;
        *(_QWORD *)v124 = v123 | 0x400000000;
        v126 = v124 + 8;
        v504 = v124 + 8;
        v502 = v124;
        v503 = v124 + 8;
        if (v123 <= 3)
        {
          do
          {
            v127 = v125 + 1;
            if (v126 >= v504)
            {
              v128 = (v126 - (_BYTE *)v502) >> 3;
              if ((unint64_t)(v128 + 1) >> 61)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              v129 = (v504 - (_BYTE *)v502) >> 2;
              if (v129 <= v128 + 1)
                v129 = v128 + 1;
              if ((unint64_t)(v504 - (_BYTE *)v502) >= 0x7FFFFFFFFFFFFFF8)
                v130 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v130 = v129;
              if (v130)
                v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v504, v130);
              else
                v131 = 0;
              v132 = &v131[8 * v128];
              *(_QWORD *)v132 = v127 | (v125 << 32);
              v126 = v132 + 8;
              v133 = (char *)v503;
              v134 = (char *)v502;
              if (v503 != v502)
              {
                do
                {
                  v135 = *((_QWORD *)v133 - 1);
                  v133 -= 8;
                  *((_QWORD *)v132 - 1) = v135;
                  v132 -= 8;
                }
                while (v133 != v134);
                v133 = (char *)v502;
              }
              v502 = v132;
              v503 = v126;
              v504 = &v131[8 * v130];
              if (v133)
                operator delete(v133);
            }
            else
            {
              *(_QWORD *)v126 = v127 | (v125 << 32);
              v126 += 8;
            }
            v503 = v126;
            ++v125;
          }
          while (v127 != 4);
        }
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v471, (uint64_t)&v502, v444);
        DimensionOrderHint::DimensionOrderHint(&v518, 2);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)&v471, (uint64_t)&v518, 1);
        if (v518.i64[0])
        {
          v518.i64[1] = v518.i64[0];
          operator delete((void *)v518.i64[0]);
        }
        v136 = a6[1];
        if (v136 >= a6[2])
        {
          v137 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
          v137 = v136 + 192;
          a6[1] = v136 + 192;
        }
        a6[1] = v137;
        v511 = vdupq_n_s64(1uLL);
        v512 = v37;
        v513 = v511;
        ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&__p, (uint64_t)&v511);
        v461[1] = 0;
        *(_QWORD *)&v462 = 0;
        v461[0] = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v461, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
        DWORD2(v462) = *(_DWORD *)(a5 + 24);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v525, (uint64_t)&__p, (uint64_t)v461, 1);
        if (v461[0])
        {
          v461[1] = v461[0];
          operator delete(v461[0]);
        }
        v174 = a6[1];
        if (v174 >= a6[2])
        {
          v175 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v525);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v525);
          v175 = v174 + 192;
          a6[1] = v174 + 192;
        }
        a6[1] = v175;
        v176 = operator new(8uLL);
        *v176 = ((unint64_t)v447 << 32) | 3;
        v488 = v176 + 1;
        v486 = v176;
        v487 = (char *)(v176 + 1);
        v177 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v488, 2uLL);
        v177[1] = v447 | 0x300000000;
        v178 = (char *)(v177 + 1);
        v180 = (char *)&v177[v179];
        v181 = (char *)(v177 + 2);
        v182 = (char *)v486;
        v183 = v487;
        if (v487 != v486)
        {
          do
          {
            v184 = *((_QWORD *)v183 - 1);
            v183 -= 8;
            *((_QWORD *)v178 - 1) = v184;
            v178 -= 8;
          }
          while (v183 != v182);
          v182 = (char *)v486;
        }
        v486 = v178;
        v487 = v181;
        v488 = v180;
        if (v182)
          operator delete(v182);
        v487 = v181;
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v534, (uint64_t)&v486, v444);
        DimensionOrderHint::DimensionOrderHint(&v521, 2);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v506, (uint64_t)&v534, (uint64_t)&v521, 1);
        if (v521)
        {
          v522 = v521;
          operator delete(v521);
        }
        v185 = a6[1];
        if (v185 >= a6[2])
        {
          v186 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v506);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v506);
          v186 = v185 + 192;
          a6[1] = v185 + 192;
        }
        a6[1] = v186;
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v506);
        v534 = off_24C021A98;
        if (v537)
        {
          v538 = v537;
          operator delete(v537);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(&v534);
        if (v486)
        {
          v487 = (char *)v486;
          operator delete(v486);
        }
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v525);
        __p = off_24C01FAB8;
        if (v495)
        {
          v496 = v495;
          operator delete(v495);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(&__p);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
        v471.i64[0] = (uint64_t)off_24C021A98;
        if (v474)
        {
          v475 = v474;
          operator delete(v474);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v471);
        if (v502)
        {
          v503 = v502;
          operator delete(v502);
        }
        operator delete(v122);
        return 1;
      }
      v471.i64[0] = 1;
      v471.i64[1] = v37;
      v472 = vdupq_n_s64(1uLL);
      v473 = 1;
      ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v506, (uint64_t)&v471);
      v498.i64[0] = 0;
      v497 = 0uLL;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v497, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
      v498.i32[2] = *(_DWORD *)(a5 + 24);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)&v506, (uint64_t)&v497, 1);
      if (v497.i64[0])
      {
        v497.i64[1] = v497.i64[0];
        operator delete((void *)v497.i64[0]);
      }
      v40 = a6[1];
      if (v40 >= a6[2])
      {
        v41 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
        v41 = v40 + 192;
        a6[1] = v40 + 192;
      }
      a6[1] = v41;
      v163 = (char *)operator new(8uLL);
      *(_QWORD *)v163 = ((unint64_t)v36 << 32) | 2;
      v536[0] = v163 + 8;
      v534 = v163;
      v535 = v163 + 8;
      v164 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v536, 2uLL);
      v164[1] = v36 | 0x200000000;
      v165 = (char *)(v164 + 1);
      v167 = (char *)&v164[v166];
      v168 = (char *)(v164 + 2);
      v169 = (char *)v534;
      v170 = v535;
      if (v535 != v534)
      {
        do
        {
          v171 = *((_QWORD *)v170 - 1);
          v170 -= 8;
          *((_QWORD *)v165 - 1) = v171;
          v165 -= 8;
        }
        while (v170 != v169);
        v169 = (char *)v534;
      }
      v534 = v165;
      v535 = v168;
      v536[0] = v167;
      if (v169)
        operator delete(v169);
      v535 = v168;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&__p, (uint64_t)&v534, a3);
      DimensionOrderHint::DimensionOrderHint(v541, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v525, (uint64_t)&__p, (uint64_t)v541, 1);
      if (*(_QWORD *)v541)
      {
        *(_QWORD *)&v541[8] = *(_QWORD *)v541;
        operator delete(*(void **)v541);
      }
      v162 = a6[1];
      if (v162 < a6[2])
      {
LABEL_218:
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v525);
        v172 = v162 + 192;
        a6[1] = v162 + 192;
LABEL_220:
        a6[1] = v172;
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v525);
        __p = off_24C021A98;
        if (v493)
        {
          v494 = v493;
          operator delete(v493);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(&__p);
        if (v534)
        {
          v535 = (char *)v534;
          operator delete(v534);
        }
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
        v506 = off_24C01FAB8;
        if (v509)
        {
          v510 = v509;
          operator delete(v509);
        }
        v173 = &v506;
        goto LABEL_227;
      }
    }
    else
    {
      if (!v36 && v37 > v35[48])
        goto LABEL_41;
      v471 = vdupq_n_s64(1uLL);
      v472.i64[0] = 1;
      v472.i64[1] = v37;
      v473 = 1;
      ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v506, (uint64_t)&v471);
      v479 = 0;
      v480 = 0;
      v478 = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v478, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
      v481 = *(_DWORD *)(a5 + 24);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)&v506, (uint64_t)&v478, 1);
      if (v478)
      {
        v479 = v478;
        operator delete(v478);
      }
      v115 = a6[1];
      if (v115 >= a6[2])
      {
        v116 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
        v116 = v115 + 192;
        a6[1] = v115 + 192;
      }
      a6[1] = v116;
      v153 = (char *)operator new(8uLL);
      *(_QWORD *)v153 = ((unint64_t)v36 << 32) | 4;
      v536[0] = v153 + 8;
      v534 = v153;
      v535 = v153 + 8;
      v154 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v536, 2uLL);
      v154[1] = v36 | 0x400000000;
      v155 = (char *)(v154 + 1);
      v157 = (char *)&v154[v156];
      v158 = (char *)(v154 + 2);
      v159 = (char *)v534;
      v160 = v535;
      if (v535 != v534)
      {
        do
        {
          v161 = *((_QWORD *)v160 - 1);
          v160 -= 8;
          *((_QWORD *)v155 - 1) = v161;
          v155 -= 8;
        }
        while (v160 != v159);
        v159 = (char *)v534;
      }
      v534 = v155;
      v535 = v158;
      v536[0] = v157;
      if (v159)
        operator delete(v159);
      v535 = v158;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&__p, (uint64_t)&v534, a3);
      DimensionOrderHint::DimensionOrderHint(&v528, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v525, (uint64_t)&__p, (uint64_t)&v528, 1);
      if (v528.i64[0])
      {
        v528.i64[1] = v528.i64[0];
        operator delete((void *)v528.i64[0]);
      }
      v162 = a6[1];
      if (v162 < a6[2])
        goto LABEL_218;
    }
    v172 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v525);
    goto LABEL_220;
  }
LABEL_41:
  v43 = *a4;
  if (*(_QWORD *)(a2 + 24) == 1)
  {
    v44 = *(_QWORD *)(v43 + 352);
    v45 = *(_QWORD *)(v43 + 336);
    GetAllIntegerFactors(a1->i32[2], (int **)&v502);
    v46 = (int *)v502;
    if (v502 == v503)
LABEL_47:
      ZinAssertImpl("Failed in distributing the channel to depath and height dimensions");
    v47 = a1[2].i64[0];
    while (1)
    {
      v48 = *v46;
      v49 = v47 * v48;
      if (v47 * v48 <= v44)
      {
        v50 = a1->i64[1] / v48 * a1[1].i64[0];
        if (v50 <= v45)
          break;
      }
      if (++v46 == v503)
        goto LABEL_47;
    }
    v528.i64[0] = a1->i64[0];
    v528.i64[1] = 1;
    v56 = a1[1].i64[1];
    v529.i64[0] = v50;
    v529.i64[1] = v56;
    v530 = v49;
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v471, (uint64_t)&v528);
    memset(v541, 0, 24);
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v541, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
    *(_DWORD *)&v541[24] = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)&v471, (uint64_t)v541, 1);
    if (*(_QWORD *)v541)
    {
      *(_QWORD *)&v541[8] = *(_QWORD *)v541;
      operator delete(*(void **)v541);
    }
    v57 = a6[1];
    if (v57 >= a6[2])
    {
      v58 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
      v58 = v57 + 192;
      a6[1] = v57 + 192;
    }
    a6[1] = v58;
    v90 = operator new(8uLL);
    *v90 = 0x400000002;
    v488 = v90 + 1;
    v486 = v90;
    v487 = (char *)(v90 + 1);
    v91 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v488, 2uLL);
    v91[1] = 0x200000004;
    v92 = (char *)(v91 + 1);
    v94 = (char *)&v91[v93];
    v95 = (char *)(v91 + 2);
    v96 = (char *)v486;
    v97 = v487;
    if (v487 != v486)
    {
      do
      {
        v98 = *((_QWORD *)v97 - 1);
        v97 -= 8;
        *((_QWORD *)v92 - 1) = v98;
        v92 -= 8;
      }
      while (v97 != v96);
      v96 = (char *)v486;
    }
    v486 = v92;
    v487 = v95;
    v488 = v94;
    if (v96)
      operator delete(v96);
    v487 = v95;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v511, (uint64_t)&v486, a3);
    DimensionOrderHint::DimensionOrderHint(&v518, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v525, (uint64_t)&v511, (uint64_t)&v518, 1);
    if (v518.i64[0])
    {
      v518.i64[1] = v518.i64[0];
      operator delete((void *)v518.i64[0]);
    }
    v99 = a6[1];
    if (v99 >= a6[2])
    {
      v100 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v525);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v525);
      v100 = v99 + 192;
      a6[1] = v99 + 192;
    }
    a6[1] = v100;
    v101 = (char *)operator new(8uLL);
    *(_QWORD *)v101 = 0x300000002;
    v468 = v101 + 8;
    v469 = v101 + 8;
    v467 = v101;
    v102 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v469, 2uLL);
    v102[1] = 0x200000003;
    v103 = (char *)(v102 + 1);
    v105 = (char *)&v102[v104];
    v106 = (char *)(v102 + 2);
    v107 = (char *)v467;
    v108 = v468;
    if (v468 != v467)
    {
      do
      {
        v109 = *((_QWORD *)v108 - 1);
        v108 -= 8;
        *((_QWORD *)v103 - 1) = v109;
        v103 -= 8;
      }
      while (v108 != v107);
      v107 = (char *)v467;
    }
    v467 = v103;
    v468 = v106;
    v469 = v105;
    if (v107)
      operator delete(v107);
    v468 = v106;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v478, (uint64_t)&v467, a3);
    DimensionOrderHint::DimensionOrderHint(v461, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v506, (uint64_t)&v478, (uint64_t)v461, 1);
    if (v461[0])
    {
      v461[1] = v461[0];
      operator delete(v461[0]);
    }
    v110 = a6[1];
    if (v110 >= a6[2])
    {
      v111 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v506);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v506);
      v111 = v110 + 192;
      a6[1] = v110 + 192;
    }
    a6[1] = v111;
    v112 = *(int64x2_t *)(a2 + 16);
    v497 = *(int64x2_t *)a2;
    v498 = v112;
    v499 = *(_QWORD *)(a2 + 32);
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v534, (uint64_t)&v497);
    v523 = 0;
    v521 = 0;
    v522 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v521, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
    v524 = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (uint64_t)&v534, (uint64_t)&v521, 1);
    if (v521)
    {
      v522 = v521;
      operator delete(v521);
    }
    v113 = a6[1];
    if (v113 >= a6[2])
    {
      v114 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&__p);
      v114 = v113 + 192;
      a6[1] = v113 + 192;
    }
    a6[1] = v114;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
    v534 = off_24C01FAB8;
    if (v539)
    {
      v540 = v539;
      operator delete(v539);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(&v534);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v506);
    v478 = off_24C021A98;
    if (v482)
    {
      v483 = v482;
      operator delete(v482);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(&v478);
    if (v467)
    {
      v468 = (char *)v467;
      operator delete(v467);
    }
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v525);
    v511.i64[0] = (uint64_t)off_24C021A98;
    if (v514)
    {
      v515 = v514;
      operator delete(v514);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v511);
    if (v486)
    {
      v487 = (char *)v486;
      operator delete(v486);
    }
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
    v471.i64[0] = (uint64_t)off_24C01FAB8;
    if (v476)
    {
      v477 = v476;
      operator delete(v476);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v471);
    v42 = v502;
    if (!v502)
      goto LABEL_272;
    v503 = v502;
LABEL_142:
    operator delete(v42);
    goto LABEL_272;
  }
  v51 = a1[1];
  v528 = *a1;
  v529 = v51;
  v530 = a1[2].i64[0];
  v52 = *(int64x2_t *)(a2 + 16);
  v497 = *(int64x2_t *)a2;
  v498 = v52;
  v499 = *(_QWORD *)(a2 + 32);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)a5, v533);
  DimensionOrderHint::DimensionOrderHint(&v518, v533);
  if (v533[0])
  {
    v533[1] = v533[0];
    operator delete(v533[0]);
  }
  v457 = 0;
  v458 = 0;
  v459 = 0;
  v464 = 0;
  v465 = 0;
  v466 = 0;
  ZinReshapeLayerUtils::GetReshapedDimensions((ZinReshapeLayerUtils *)a1, (const ZinTensorDimensions *)a2, (const ZinTensorDimensions *)&v518, 0, (char **)&v454);
  AxisToSwapWidth = FindAxisToSwapWidth((uint64_t)&v454, a1->i64, a3, v43);
  if (AxisToSwapWidth != 5
    || (AxisToSwapWidth = FindAxisToSwapWidthUsingTranspose((ZinReshapeLayerUtils *)a1, (const ZinTensorDimensions *)a2, a3, v43, 1, (DimensionOrderHint *)a5, &v457, (uint64_t)&v528), AxisToSwapWidth != 5)|| (AxisToSwapWidth = FindAxisToSwapWidthUsingTranspose((ZinReshapeLayerUtils *)a1, (const ZinTensorDimensions *)a2, a3, v43, 0, (DimensionOrderHint *)a5, &v464, (uint64_t)&v497), AxisToSwapWidth != 5))
  {
    if (v458 != v457)
    {
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v525, (uint64_t)&v457, a3);
      DimensionOrderHint::DimensionOrderHint(v461, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)v525, (uint64_t)v461, 1);
      if (v461[0])
      {
        v461[1] = v461[0];
        operator delete(v461[0]);
      }
      v59 = a6[1];
      if (v59 >= a6[2])
      {
        v60 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
        v60 = v59 + 192;
        a6[1] = v59 + 192;
      }
      a6[1] = v60;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
      v525[0] = off_24C021A98;
      if (v526)
      {
        v527 = v526;
        operator delete(v526);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(v525);
    }
    v138 = (uint64_t *)operator new(8uLL);
    *v138 = AxisToSwapWidth | 0x400000000;
    v452 = v138 + 1;
    v453 = v138 + 1;
    v451 = v138;
    v140 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v453, 2uLL);
    v140[1] = 0x300000004;
    v141 = (char *)(v140 + 1);
    v142 = (char *)(v140 + 2);
    v143 = (uint64_t *)v451;
    v144 = v452;
    if (v452 != v451)
    {
      do
      {
        v145 = *--v144;
        *((_QWORD *)v141 - 1) = v145;
        v141 -= 8;
      }
      while (v144 != v143);
      v143 = (uint64_t *)v451;
    }
    v451 = v141;
    v452 = v140 + 2;
    v453 = &v140[v139];
    if (v143)
      operator delete(v143);
    v452 = v140 + 2;
    if (AxisToSwapWidth == 2)
    {
      if (v142 < (char *)v453)
      {
        v140[2] = 0x200000003;
        v146 = v140 + 3;
        goto LABEL_406;
      }
      v148 = (v142 - (_BYTE *)v451) >> 3;
      if ((unint64_t)(v148 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v149 = ((char *)v453 - (_BYTE *)v451) >> 2;
      if (v149 <= v148 + 1)
        v149 = v148 + 1;
      if ((unint64_t)((char *)v453 - (_BYTE *)v451) >= 0x7FFFFFFFFFFFFFF8)
        v150 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v150 = v149;
      if (v150)
        v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v453, v150);
      else
        v151 = 0;
      v225 = &v151[8 * v148];
      v226 = &v151[8 * v150];
      *(_QWORD *)v225 = 0x200000003;
      v146 = (uint64_t *)(v225 + 8);
      v228 = (char *)v451;
      v227 = (char *)v452;
      if (v452 == v451)
        goto LABEL_404;
      do
      {
        v229 = *((_QWORD *)v227 - 1);
        v227 -= 8;
        *((_QWORD *)v225 - 1) = v229;
        v225 -= 8;
      }
      while (v227 != v228);
      goto LABEL_403;
    }
    if (AxisToSwapWidth)
    {
      if (AxisToSwapWidth != 1)
        ZinAssertImpl("Invalid axis\n");
      if (v142 >= (char *)v453)
      {
        v221 = (v142 - (_BYTE *)v451) >> 3;
        if ((unint64_t)(v221 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v222 = ((char *)v453 - (_BYTE *)v451) >> 2;
        if (v222 <= v221 + 1)
          v222 = v221 + 1;
        if ((unint64_t)((char *)v453 - (_BYTE *)v451) >= 0x7FFFFFFFFFFFFFF8)
          v223 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v223 = v222;
        if (v223)
          v224 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v453, v223);
        else
          v224 = 0;
        v239 = (uint64_t *)&v224[8 * v221];
        v240 = &v224[8 * v223];
        *v239 = 0x200000003;
        v147 = v239 + 1;
        v242 = (char *)v451;
        v241 = (char *)v452;
        if (v452 != v451)
        {
          do
          {
            v243 = *((_QWORD *)v241 - 1);
            v241 -= 8;
            *--v239 = v243;
          }
          while (v241 != v242);
          v241 = (char *)v451;
        }
        v451 = v239;
        v452 = v147;
        v453 = (uint64_t *)v240;
        if (v241)
          operator delete(v241);
      }
      else
      {
        v140[2] = 0x200000003;
        v147 = v140 + 3;
      }
      v452 = v147;
      if (v147 >= v453)
      {
        v245 = ((char *)v147 - (_BYTE *)v451) >> 3;
        if ((unint64_t)(v245 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v246 = ((char *)v453 - (_BYTE *)v451) >> 2;
        if (v246 <= v245 + 1)
          v246 = v245 + 1;
        if ((unint64_t)((char *)v453 - (_BYTE *)v451) >= 0x7FFFFFFFFFFFFFF8)
          v247 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v247 = v246;
        if (v247)
          v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v453, v247);
        else
          v248 = 0;
        v225 = &v248[8 * v245];
        v226 = &v248[8 * v247];
        *(_QWORD *)v225 = 0x100000002;
        v146 = (uint64_t *)(v225 + 8);
        v258 = (char *)v451;
        v227 = (char *)v452;
        if (v452 == v451)
          goto LABEL_404;
        do
        {
          v259 = *((_QWORD *)v227 - 1);
          v227 -= 8;
          *((_QWORD *)v225 - 1) = v259;
          v225 -= 8;
        }
        while (v227 != v258);
LABEL_403:
        v227 = (char *)v451;
LABEL_404:
        v451 = v225;
        v452 = v146;
        v453 = (uint64_t *)v226;
        if (v227)
          operator delete(v227);
LABEL_406:
        v452 = v146;
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v534, (uint64_t)&v451, a3);
        DimensionOrderHint::DimensionOrderHint(&v521, 2);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)&v534, (uint64_t)&v521, 1);
        if (v521)
        {
          v522 = v521;
          operator delete(v521);
        }
        v262 = a6[1];
        if (v262 >= a6[2])
        {
          v263 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
          v263 = v262 + 192;
          a6[1] = v262 + 192;
        }
        a6[1] = v263;
        *(int64x2_t *)v541 = v497;
        *(int64x2_t *)&v541[16] = v498;
        v542 = v499;
        ValueAt = GetValueAtDimension<ZinTensorDimensions>(v497.i64, AxisToSwapWidth);
        *(_QWORD *)&v541[16] = v498.i64[1];
        *(_QWORD *)&v541[24] = ValueAt;
        if (AxisToSwapWidth == 2)
        {
          *(_QWORD *)&v541[8] = v498.i64[0];
        }
        else if (AxisToSwapWidth)
        {
          *(_QWORD *)&v541[8] = v498.i64[0];
          v542 = v497.i64[1];
        }
        else
        {
          v542 = v497.i64[1];
          *(_QWORD *)v541 = v499;
          *(_QWORD *)&v541[8] = v498.i64[0];
        }
        ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v471, (uint64_t)v541);
        v504 = 0;
        v502 = 0;
        v503 = 0;
        std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v502, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
        v505 = *(_DWORD *)(a5 + 24);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v525, (uint64_t)&v471, (uint64_t)&v502, 1);
        if (v502)
        {
          v503 = v502;
          operator delete(v502);
        }
        v265 = a6[1];
        if (v265 >= a6[2])
        {
          v266 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v525);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v525);
          v266 = v265 + 192;
          a6[1] = v265 + 192;
        }
        a6[1] = v266;
        v267 = (uint64_t *)operator new(8uLL);
        *v267 = 0x400000003;
        v449 = v267 + 1;
        v450 = v267 + 1;
        v448 = v267;
        if (AxisToSwapWidth == 2)
        {
          v269 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v450, 2uLL);
          v269[1] = 0x300000002;
          v270 = (char *)(v269 + 1);
          v271 = (char *)&v269[v268];
          v272 = (char *)(v269 + 2);
          v273 = (uint64_t *)v448;
          v274 = v449;
          if (v449 != v448)
          {
            do
            {
              v275 = *--v274;
              *((_QWORD *)v270 - 1) = v275;
              v270 -= 8;
            }
            while (v274 != v273);
            v273 = (uint64_t *)v448;
          }
          v448 = v270;
          v449 = v269 + 2;
          v450 = &v269[v268];
          if (v273)
          {
            operator delete(v273);
            v271 = (char *)v450;
          }
          v449 = v269 + 2;
          if (v272 < v271)
          {
            v269[2] = 0x200000004;
            v276 = v269 + 3;
LABEL_531:
            v449 = v276;
            ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v511, (uint64_t)&v448, a3);
            DimensionOrderHint::DimensionOrderHint(&v486, 2);
            ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v506, (uint64_t)&v511, (uint64_t)&v486, 1);
            if (v486)
            {
              v487 = (char *)v486;
              operator delete(v486);
            }
            v347 = a6[1];
            if (v347 >= a6[2])
            {
              v348 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v506);
            }
            else
            {
              std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v506);
              v348 = v347 + 192;
              a6[1] = v347 + 192;
            }
            a6[1] = v348;
            if (v465 != v464)
            {
              ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v478, (uint64_t)&v464, a3);
              DimensionOrderHint::DimensionOrderHint(&v467, 2);
              ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (uint64_t)&v478, (uint64_t)&v467, 1);
              if (v467)
              {
                v468 = (char *)v467;
                operator delete(v467);
              }
              v349 = a6[1];
              if (v349 >= a6[2])
              {
                v350 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
              }
              else
              {
                std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&__p);
                v350 = v349 + 192;
                a6[1] = v349 + 192;
              }
              a6[1] = v350;
              ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
              v478 = off_24C021A98;
              if (v482)
              {
                v483 = v482;
                operator delete(v482);
              }
              ZinIrUnitInfo::~ZinIrUnitInfo(&v478);
            }
            ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v506);
            v511.i64[0] = (uint64_t)off_24C021A98;
            if (v514)
            {
              v515 = v514;
              operator delete(v514);
            }
            ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v511);
            if (v448)
            {
              v449 = (uint64_t *)v448;
              operator delete(v448);
            }
            ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v525);
            v471.i64[0] = (uint64_t)off_24C01FAB8;
            if (v476)
            {
              v477 = v476;
              operator delete(v476);
            }
            ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v471);
            ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
            v534 = off_24C021A98;
            if (v537)
            {
              v538 = v537;
              operator delete(v537);
            }
            ZinIrUnitInfo::~ZinIrUnitInfo(&v534);
            if (v451)
            {
              v452 = (uint64_t *)v451;
              operator delete(v451);
            }
            v55 = 1;
            goto LABEL_556;
          }
          v286 = (v272 - (_BYTE *)v448) >> 3;
          if ((unint64_t)(v286 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v287 = v271 - (_BYTE *)v448;
          v288 = v287 >> 2;
          if (v287 >> 2 <= (unint64_t)(v286 + 1))
            v288 = v286 + 1;
          if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF8)
            v289 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v289 = v288;
          if (v289)
            v290 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v450, v289);
          else
            v290 = 0;
          v300 = &v290[8 * v286];
          v301 = &v290[8 * v289];
          *(_QWORD *)v300 = 0x200000004;
          v276 = (uint64_t *)(v300 + 8);
          v303 = (char *)v448;
          v302 = (char *)v449;
          if (v449 == v448)
          {
LABEL_529:
            v448 = v300;
            v449 = v276;
            v450 = (uint64_t *)v301;
            if (v302)
              operator delete(v302);
            goto LABEL_531;
          }
          do
          {
            v304 = *((_QWORD *)v302 - 1);
            v302 -= 8;
            *((_QWORD *)v300 - 1) = v304;
            v300 -= 8;
          }
          while (v302 != v303);
LABEL_528:
          v302 = (char *)v448;
          goto LABEL_529;
        }
        if (AxisToSwapWidth)
        {
          v278 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v450, 2uLL);
          v278[1] = 0x300000002;
          v279 = (char *)(v278 + 1);
          v280 = (char *)&v278[v277];
          v281 = (char *)(v278 + 2);
          v282 = (uint64_t *)v448;
          v283 = v449;
          if (v449 != v448)
          {
            do
            {
              v284 = *--v283;
              *((_QWORD *)v279 - 1) = v284;
              v279 -= 8;
            }
            while (v283 != v282);
            v282 = (uint64_t *)v448;
          }
          v448 = v279;
          v449 = v278 + 2;
          v450 = &v278[v277];
          if (v282)
          {
            operator delete(v282);
            v280 = (char *)v450;
          }
          v449 = v278 + 2;
          if (v281 >= v280)
          {
            v305 = (v281 - (_BYTE *)v448) >> 3;
            if ((unint64_t)(v305 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v306 = v280 - (_BYTE *)v448;
            v307 = v306 >> 2;
            if (v306 >> 2 <= (unint64_t)(v305 + 1))
              v307 = v305 + 1;
            if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFF8)
              v308 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v308 = v307;
            if (v308)
              v309 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v450, v308);
            else
              v309 = 0;
            v315 = (uint64_t *)&v309[8 * v305];
            v316 = &v309[8 * v308];
            *v315 = 0x200000001;
            v285 = v315 + 1;
            v318 = (char *)v448;
            v317 = (char *)v449;
            if (v449 != v448)
            {
              do
              {
                v319 = *((_QWORD *)v317 - 1);
                v317 -= 8;
                *--v315 = v319;
              }
              while (v317 != v318);
              v317 = (char *)v448;
            }
            v448 = v315;
            v449 = v285;
            v450 = (uint64_t *)v316;
            if (v317)
              operator delete(v317);
          }
          else
          {
            v278[2] = 0x200000001;
            v285 = v278 + 3;
          }
          v449 = v285;
          if (v285 >= v450)
          {
            v321 = ((char *)v285 - (_BYTE *)v448) >> 3;
            if ((unint64_t)(v321 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v322 = ((char *)v450 - (_BYTE *)v448) >> 2;
            if (v322 <= v321 + 1)
              v322 = v321 + 1;
            if ((unint64_t)((char *)v450 - (_BYTE *)v448) >= 0x7FFFFFFFFFFFFFF8)
              v323 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v323 = v322;
            if (v323)
              v324 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v450, v323);
            else
              v324 = 0;
            v300 = &v324[8 * v321];
            v301 = &v324[8 * v323];
            *(_QWORD *)v300 = 0x100000004;
            v276 = (uint64_t *)(v300 + 8);
            v334 = (char *)v448;
            v302 = (char *)v449;
            if (v449 == v448)
              goto LABEL_529;
            do
            {
              v335 = *((_QWORD *)v302 - 1);
              v302 -= 8;
              *((_QWORD *)v300 - 1) = v335;
              v300 -= 8;
            }
            while (v302 != v334);
            goto LABEL_528;
          }
          v320 = 0x100000004;
        }
        else
        {
          v292 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v450, 2uLL);
          v292[1] = 0x300000002;
          v293 = (char *)(v292 + 1);
          v294 = (char *)&v292[v291];
          v295 = (char *)(v292 + 2);
          v296 = (uint64_t *)v448;
          v297 = v449;
          if (v449 != v448)
          {
            do
            {
              v298 = *--v297;
              *((_QWORD *)v293 - 1) = v298;
              v293 -= 8;
            }
            while (v297 != v296);
            v296 = (uint64_t *)v448;
          }
          v448 = v293;
          v449 = v292 + 2;
          v450 = &v292[v291];
          if (v296)
          {
            operator delete(v296);
            v294 = (char *)v450;
          }
          v449 = v292 + 2;
          if (v295 >= v294)
          {
            v310 = (v295 - (_BYTE *)v448) >> 3;
            if ((unint64_t)(v310 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v311 = v294 - (_BYTE *)v448;
            v312 = v311 >> 2;
            if (v311 >> 2 <= (unint64_t)(v310 + 1))
              v312 = v310 + 1;
            if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF8)
              v313 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v313 = v312;
            if (v313)
              v314 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v450, v313);
            else
              v314 = 0;
            v325 = &v314[8 * v310];
            v326 = &v314[8 * v313];
            *(_QWORD *)v325 = 0x200000001;
            v299 = (uint64_t *)(v325 + 8);
            v328 = (char *)v448;
            v327 = (char *)v449;
            if (v449 != v448)
            {
              do
              {
                v329 = *((_QWORD *)v327 - 1);
                v327 -= 8;
                *((_QWORD *)v325 - 1) = v329;
                v325 -= 8;
              }
              while (v327 != v328);
              v327 = (char *)v448;
            }
            v448 = v325;
            v449 = v299;
            v450 = (uint64_t *)v326;
            if (v327)
              operator delete(v327);
          }
          else
          {
            v292[2] = 0x200000001;
            v299 = v292 + 3;
          }
          v449 = v299;
          if (v299 >= v450)
          {
            v330 = ((char *)v299 - (_BYTE *)v448) >> 3;
            if ((unint64_t)(v330 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v331 = ((char *)v450 - (_BYTE *)v448) >> 2;
            if (v331 <= v330 + 1)
              v331 = v330 + 1;
            if ((unint64_t)((char *)v450 - (_BYTE *)v448) >= 0x7FFFFFFFFFFFFFF8)
              v332 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v332 = v331;
            if (v332)
              v333 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v450, v332);
            else
              v333 = 0;
            v336 = (uint64_t *)&v333[8 * v330];
            v337 = &v333[8 * v332];
            *v336 = 0x100000000;
            v285 = v336 + 1;
            v339 = (char *)v448;
            v338 = (char *)v449;
            if (v449 != v448)
            {
              do
              {
                v340 = *((_QWORD *)v338 - 1);
                v338 -= 8;
                *--v336 = v340;
              }
              while (v338 != v339);
              v338 = (char *)v448;
            }
            v448 = v336;
            v449 = v285;
            v450 = (uint64_t *)v337;
            if (v338)
              operator delete(v338);
          }
          else
          {
            *v299 = 0x100000000;
            v285 = v299 + 1;
          }
          v449 = v285;
          if (v285 >= v450)
          {
            v341 = ((char *)v285 - (_BYTE *)v448) >> 3;
            if ((unint64_t)(v341 + 1) >> 61)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            v342 = ((char *)v450 - (_BYTE *)v448) >> 2;
            if (v342 <= v341 + 1)
              v342 = v341 + 1;
            if ((unint64_t)((char *)v450 - (_BYTE *)v448) >= 0x7FFFFFFFFFFFFFF8)
              v343 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v343 = v342;
            if (v343)
              v344 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v450, v343);
            else
              v344 = 0;
            v300 = &v344[8 * v341];
            v301 = &v344[8 * v343];
            *(_QWORD *)v300 = 4;
            v276 = (uint64_t *)(v300 + 8);
            v345 = (char *)v448;
            v302 = (char *)v449;
            if (v449 == v448)
              goto LABEL_529;
            do
            {
              v346 = *((_QWORD *)v302 - 1);
              v302 -= 8;
              *((_QWORD *)v300 - 1) = v346;
              v300 -= 8;
            }
            while (v302 != v345);
            goto LABEL_528;
          }
          v320 = 4;
        }
        *v285 = v320;
        v276 = v285 + 1;
        goto LABEL_531;
      }
      v244 = 0x100000002;
    }
    else
    {
      if (v142 >= (char *)v453)
      {
        v217 = (v142 - (_BYTE *)v451) >> 3;
        if ((unint64_t)(v217 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v218 = ((char *)v453 - (_BYTE *)v451) >> 2;
        if (v218 <= v217 + 1)
          v218 = v217 + 1;
        if ((unint64_t)((char *)v453 - (_BYTE *)v451) >= 0x7FFFFFFFFFFFFFF8)
          v219 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v219 = v218;
        if (v219)
          v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v453, v219);
        else
          v220 = 0;
        v230 = &v220[8 * v217];
        v231 = &v220[8 * v219];
        *(_QWORD *)v230 = 0x200000003;
        v152 = (uint64_t *)(v230 + 8);
        v233 = (char *)v451;
        v232 = (char *)v452;
        if (v452 != v451)
        {
          do
          {
            v234 = *((_QWORD *)v232 - 1);
            v232 -= 8;
            *((_QWORD *)v230 - 1) = v234;
            v230 -= 8;
          }
          while (v232 != v233);
          v232 = (char *)v451;
        }
        v451 = v230;
        v452 = v152;
        v453 = (uint64_t *)v231;
        if (v232)
          operator delete(v232);
      }
      else
      {
        v140[2] = 0x200000003;
        v152 = v140 + 3;
      }
      v452 = v152;
      if (v152 >= v453)
      {
        v235 = ((char *)v152 - (_BYTE *)v451) >> 3;
        if ((unint64_t)(v235 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v236 = ((char *)v453 - (_BYTE *)v451) >> 2;
        if (v236 <= v235 + 1)
          v236 = v235 + 1;
        if ((unint64_t)((char *)v453 - (_BYTE *)v451) >= 0x7FFFFFFFFFFFFFF8)
          v237 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v237 = v236;
        if (v237)
          v238 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v453, v237);
        else
          v238 = 0;
        v249 = (uint64_t *)&v238[8 * v235];
        v250 = &v238[8 * v237];
        *v249 = 0x100000002;
        v147 = v249 + 1;
        v252 = (char *)v451;
        v251 = (char *)v452;
        if (v452 != v451)
        {
          do
          {
            v253 = *((_QWORD *)v251 - 1);
            v251 -= 8;
            *--v249 = v253;
          }
          while (v251 != v252);
          v251 = (char *)v451;
        }
        v451 = v249;
        v452 = v147;
        v453 = (uint64_t *)v250;
        if (v251)
          operator delete(v251);
      }
      else
      {
        *v152 = 0x100000002;
        v147 = v152 + 1;
      }
      v452 = v147;
      if (v147 >= v453)
      {
        v254 = ((char *)v147 - (_BYTE *)v451) >> 3;
        if ((unint64_t)(v254 + 1) >> 61)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v255 = ((char *)v453 - (_BYTE *)v451) >> 2;
        if (v255 <= v254 + 1)
          v255 = v254 + 1;
        if ((unint64_t)((char *)v453 - (_BYTE *)v451) >= 0x7FFFFFFFFFFFFFF8)
          v256 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v256 = v255;
        if (v256)
          v257 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v453, v256);
        else
          v257 = 0;
        v225 = &v257[8 * v254];
        v226 = &v257[8 * v256];
        *(_QWORD *)v225 = 1;
        v146 = (uint64_t *)(v225 + 8);
        v260 = (char *)v451;
        v227 = (char *)v452;
        if (v452 == v451)
          goto LABEL_404;
        do
        {
          v261 = *((_QWORD *)v227 - 1);
          v227 -= 8;
          *((_QWORD *)v225 - 1) = v261;
          v225 -= 8;
        }
        while (v227 != v260);
        goto LABEL_403;
      }
      v244 = 1;
    }
    *v147 = v244;
    v146 = v147 + 1;
    goto LABEL_406;
  }
  v55 = 0;
LABEL_556:
  if (v454)
  {
    v455 = v454;
    operator delete(v454);
  }
  if (v464)
  {
    v465 = (char *)v464;
    operator delete(v464);
  }
  if (v457)
  {
    v458 = (char *)v457;
    operator delete(v457);
  }
  if (v518.i64[0])
  {
    v518.i64[1] = v518.i64[0];
    operator delete((void *)v518.i64[0]);
  }
  if ((v55 & 1) != 0)
    return 1;
  if (*(_QWORD *)(a2 + 16) == 1)
    goto LABEL_566;
  v355 = a1->i64[1];
  v356 = a1->i64[0] == 1;
  v357 = a1[2].i64[0] == 1;
  if (a1[2].i64[0] != 1)
    v356 = 0;
  v358 = v355 == 1;
  if (v355 != 1)
    v356 = 0;
  v359 = a1[1].i64[0];
  if (v358)
    v357 = 1;
  v360 = v359 == 1;
  v361 = v359 == 1 && v356;
  v362 = v360 || v357;
  if (v361 || !v362)
    goto LABEL_566;
  v363 = (_QWORD *)*a4;
  DimensionOrderHint::GetOrder((DimensionOrderHint *)a5, &v457);
  v364 = a1[1];
  v528 = *a1;
  v529 = v364;
  v530 = a1[2].i64[0];
  if (a1[1].i64[0] == 1)
  {
    v365 = v458 - 4;
    while (v365 != v457)
    {
      v366 = *((_DWORD *)v365 - 1);
      v365 -= 4;
      if (GetValueAtDimension<ZinTensorDimensions>(a1->i64, v366) > 1)
      {
        v367 = *(unsigned int *)v365;
        if ((_DWORD)v367 == 5)
          goto LABEL_684;
        v368 = (char *)operator new(8uLL);
        *(_QWORD *)v368 = v367 | 0x300000000;
        v508[0] = v368 + 8;
        v506 = v368;
        v507 = v368 + 8;
        v369 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v508, 2uLL);
        v369[1] = (v367 << 32) | 3;
        v370 = (char *)(v369 + 1);
        v372 = (char *)&v369[v371];
        v373 = (char *)(v369 + 2);
        v374 = (char *)v506;
        v375 = v507;
        if (v507 != v506)
        {
          do
          {
            v376 = *((_QWORD *)v375 - 1);
            v375 -= 8;
            *((_QWORD *)v370 - 1) = v376;
            v370 -= 8;
          }
          while (v375 != v374);
          v374 = (char *)v506;
        }
        v506 = v370;
        v507 = v373;
        v508[0] = v372;
        if (v374)
          operator delete(v374);
        v507 = v373;
        ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v525, (uint64_t)&v506, a3);
        DimensionOrderHint::DimensionOrderHint(&v518, 2);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)v525, (uint64_t)&v518, 1);
        if (v518.i64[0])
        {
          v518.i64[1] = v518.i64[0];
          operator delete((void *)v518.i64[0]);
        }
        v377 = a6[1];
        if (v377 >= a6[2])
        {
          v378 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
        }
        else
        {
          std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
          v378 = v377 + 192;
          a6[1] = v377 + 192;
        }
        a6[1] = v378;
        v529.i64[0] = GetValueAtDimension<ZinTensorDimensions>(a1->i64, v367);
        SetValueAtDimension<ZinTensorDimensions>(&v528, v367, a1[1].i64[0]);
        ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
        v525[0] = off_24C021A98;
        if (v526)
        {
          v527 = v526;
          operator delete(v526);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo(v525);
        if (v506)
        {
          v507 = (char *)v506;
          operator delete(v506);
        }
        goto LABEL_670;
      }
    }
    v458 = v365;
    v381 = v365;
LABEL_700:
    operator delete(v381);
    goto LABEL_566;
  }
LABEL_670:
  if (v528.i64[1] == 1)
    goto LABEL_671;
  v422 = (unsigned int *)(v458 - 4);
  do
  {
    v381 = v457;
    if (v422 == (unsigned int *)((char *)v457 + 4))
    {
      if (!v457)
        goto LABEL_566;
      v458 = (char *)v457;
      goto LABEL_700;
    }
    v423 = *--v422;
  }
  while (GetValueAtDimension<ZinTensorDimensions>(v528.i64, v423) != 1);
  v424 = *v422;
  if (*v422 == 5)
  {
LABEL_684:
    v425 = 0;
    goto LABEL_717;
  }
  v507 = 0;
  v506 = 0;
  v508[0] = 0;
  v533[0] = (void *)(v424 | 0x200000000);
  std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v506, v533);
  LODWORD(v533[0]) = 2;
  HIDWORD(v533[0]) = v424;
  std::vector<ZinIrOpLayer *>::push_back[abi:ne180100](&v506, v533);
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v525, (uint64_t)&v506, a3);
  DimensionOrderHint::DimensionOrderHint(v461, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)v525, (uint64_t)v461, 1);
  if (v461[0])
  {
    v461[1] = v461[0];
    operator delete(v461[0]);
  }
  std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](a6, (int *)v533);
  SetValueAtDimension<ZinTensorDimensions>(&v528, v424, v528.i64[1]);
  v528.i64[1] = 1;
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
  ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)v525);
  if (v506)
  {
    v507 = (char *)v506;
    operator delete(v506);
  }
LABEL_671:
  v410 = (char *)operator new(8uLL);
  *(_QWORD *)v410 = 0x400000002;
  v465 = v410 + 8;
  v466 = v410 + 8;
  v464 = v410;
  v411 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v466, 2uLL);
  v411[1] = 0x200000004;
  v412 = (char *)(v411 + 1);
  v414 = (char *)&v411[v413];
  v415 = (char *)(v411 + 2);
  v416 = (char *)v464;
  v417 = v465;
  if (v465 != v464)
  {
    do
    {
      v418 = *((_QWORD *)v417 - 1);
      v417 -= 8;
      *((_QWORD *)v412 - 1) = v418;
      v412 -= 8;
    }
    while (v417 != v416);
    v416 = (char *)v464;
  }
  v464 = v412;
  v465 = v415;
  v466 = v414;
  if (v416)
    operator delete(v416);
  v465 = v415;
  v419 = v528.i64[1];
  v528.i64[1] = v529.i64[1];
  v529.i64[1] = v419;
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v511, (uint64_t)&v464, a3);
  DimensionOrderHint::DimensionOrderHint(&v521, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)&v511, (uint64_t)&v521, 1);
  if (v521)
  {
    v522 = v521;
    operator delete(v521);
  }
  v420 = a6[1];
  if (v420 >= a6[2])
  {
    v421 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
    v421 = v420 + 192;
    a6[1] = v420 + 192;
  }
  a6[1] = v421;
  v426 = v528.i64[1];
  v427 = v529.i64[1];
  if (v528.i64[1] == 1 && v529.i64[1] == 1)
  {
    v428 = *a6;
    while (v421 != v428)
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)(v421 - 192));
    v425 = 0;
    a6[1] = v428;
  }
  else
  {
    v445 = a3;
    v499 = 1;
    v498 = vdupq_n_s64(1uLL);
    v429 = *(_QWORD *)(a2 + 24);
    v497.i64[0] = 1;
    v497.i64[1] = v429;
    v430 = v530;
    v431 = v528.i64[0];
    v443 = v529.i64[0];
    v432 = v363[46];
    *(_QWORD *)v541 = v363[48];
    *(_QWORD *)&v541[8] = v432;
    v433 = v363[40];
    *(_QWORD *)&v541[16] = v363[42];
    *(_QWORD *)&v541[24] = v433;
    v542 = 1;
    v434 = (char *)operator new(0x14uLL);
    v455 = v434 + 20;
    v456 = v434 + 20;
    *((_DWORD *)v434 + 4) = 4;
    *(_OWORD *)v434 = xmmword_207AB26BC;
    v435 = v427 * v426 * v431 * v430 * v443 / v429;
    v454 = v434;
    v436 = v434 + 12;
    while (1)
    {
      v425 = v436 == v454;
      if (v436 == v454)
        break;
      v437 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v541, *((_DWORD *)v436 - 1));
      LowestFactorGreaterThan = FindLowestFactorGreaterThan(v435, (v435 + v437 - 1) / v437);
      v439 = SetValueAtDimension<ZinTensorDimensions>(&v497, *((_DWORD *)v436 - 1), v435 / LowestFactorGreaterThan);
      v436 -= 4;
      v435 = LowestFactorGreaterThan;
      if (v439)
      {
        v441 = *a6;
        for (i = a6[1];
              i != v441;
        a6[1] = v441;
        a3 = v445;
        goto LABEL_711;
      }
    }
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v471, (uint64_t)&v497);
    DimensionOrderHint::DimensionOrderHint(&v502, &v454);
    a3 = v445;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v525, (uint64_t)&v471, (uint64_t)&v502, 1);
    if (v502)
    {
      v503 = v502;
      operator delete(v502);
    }
    std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](a6, (int *)v525);
    v528 = v497;
    v529 = v498;
    v530 = v499;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v478, (uint64_t)&v464, v445);
    DimensionOrderHint::DimensionOrderHint(&v486, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v506, (uint64_t)&v478, (uint64_t)&v486, 1);
    if (v486)
    {
      v487 = (char *)v486;
      operator delete(v486);
    }
    std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](a6, (int *)&v506);
    v442 = v528.i64[1];
    v528.i64[1] = v529.i64[1];
    v529.i64[1] = v442;
    if (!ZinTensorDimensionsEqual(&v528, (_QWORD *)a2))
    {
      ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v534, a2);
      DimensionOrderHint::DimensionOrderHint((DimensionOrderHint *)&v467, (const DimensionOrderHint *)a5);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (uint64_t)&v534, (uint64_t)&v467, 1);
      if (v467)
      {
        v468 = (char *)v467;
        operator delete(v467);
      }
      std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](a6, (int *)&__p);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
      ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&v534);
    }
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v506);
    ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&v478);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v525);
    ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&v471);
LABEL_711:
    if (v454)
    {
      v455 = v454;
      operator delete(v454);
    }
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
  v511.i64[0] = (uint64_t)off_24C021A98;
  if (v514)
  {
    v515 = v514;
    operator delete(v514);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v511);
  if (v464)
  {
    v465 = (char *)v464;
    operator delete(v464);
  }
LABEL_717:
  if (v457)
  {
    v458 = (char *)v457;
    operator delete(v457);
  }
  if (v425)
    return 1;
LABEL_566:
  v351 = 0;
  v352 = *a4;
  while (1)
  {
    v353 = *(_QWORD *)(*a4 + 1680 + v351);
    if (!(a1[1].i64[1] % v353) && !(*(_QWORD *)(a2 + 24) % v353))
      break;
    v351 -= 8;
    if (v351 == -32)
      goto LABEL_570;
  }
  v379 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0];
  v380 = *(_QWORD *)(v352 + 384);
  if (v379 <= v380)
  {
LABEL_609:
    v454 = 0;
    ZinTensorFormatGetSize(a3, &v454);
    v382 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0];
    if (*(_QWORD *)(v352 + 408) >= (unint64_t)(v382 * (_QWORD)v454))
      v383 = 1;
    else
      v383 = v353;
    v384 = v382 / v379;
    if (v382 % v379)
      ZinAssertImpl("Optimal batch should be divisible by definition of reshape");
    *(int64x2_t *)&v541[8] = vdupq_n_s64(1uLL);
    v385 = a1[1].i64[1];
    *(_QWORD *)v541 = v379;
    *(_QWORD *)&v541[24] = v385;
    v542 = v384;
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v534, (uint64_t)v541);
    v523 = 0;
    v521 = 0;
    v522 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v521, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
    v524 = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)&v534, (uint64_t)&v521, 1);
    if (v521)
    {
      v522 = v521;
      operator delete(v521);
    }
    v386 = a6[1];
    if (v386 >= a6[2])
    {
      v387 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
      v387 = v386 + 192;
      a6[1] = v386 + 192;
    }
    a6[1] = v387;
    v388 = (char *)operator new(8uLL);
    *(_QWORD *)v388 = 0x400000002;
    v465 = v388 + 8;
    v466 = v388 + 8;
    v464 = v388;
    v389 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v466, 2uLL);
    v389[1] = 0x200000004;
    v390 = (char *)(v389 + 1);
    v392 = (char *)&v389[v391];
    v393 = (char *)(v389 + 2);
    v394 = (char *)v464;
    v395 = v465;
    if (v465 != v464)
    {
      do
      {
        v396 = *((_QWORD *)v395 - 1);
        v395 -= 8;
        *((_QWORD *)v390 - 1) = v396;
        v390 -= 8;
      }
      while (v395 != v394);
      v394 = (char *)v464;
    }
    v464 = v390;
    v465 = v393;
    v466 = v392;
    if (v394)
      operator delete(v394);
    v465 = v393;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v528, (uint64_t)&v464, a3);
    DimensionOrderHint::DimensionOrderHint(&v502, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v525, (uint64_t)&v528, (uint64_t)&v502, v383);
    if (v502)
    {
      v503 = v502;
      operator delete(v502);
    }
    v397 = a6[1];
    if (v397 >= a6[2])
    {
      v398 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v525);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v525);
      v398 = v397 + 192;
      a6[1] = v397 + 192;
    }
    a6[1] = v398;
    v399 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0] * a1[1].i64[1];
    v400 = *(_QWORD *)(a2 + 24);
    v401 = *(_QWORD *)(v352 + 384);
    v402 = v399 / v400;
    if (v399 / v400 > v401)
    {
      if (!v401)
      {
LABEL_632:
        if (!(v399 % v400))
          ZinAssertImpl("Reshape lowering could not find optimal batch value", v443);
        goto LABEL_727;
      }
      while (v399 / v400 % v401)
      {
        if (--v401 == 1)
          goto LABEL_632;
      }
      v402 = v401;
    }
    if (!(v399 % v400))
    {
      if (!(v402 * v400))
        ZinAssertImpl("optimal batch cannot be zero to avoid dividing by zero", v443);
      v518.i64[0] = v402;
      v518.i64[1] = v400;
      v519 = vdupq_n_s64(1uLL);
      v520 = v399 / (v402 * v400);
      ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v511, (uint64_t)&v518);
      v488 = 0;
      v486 = 0;
      v487 = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v486, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
      v489 = *(_DWORD *)(a5 + 24);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v506, (uint64_t)&v511, (uint64_t)&v486, v383);
      if (v486)
      {
        v487 = (char *)v486;
        operator delete(v486);
      }
      v403 = a6[1];
      if (v403 >= a6[2])
      {
        v404 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v506);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v506);
        v404 = v403 + 192;
        a6[1] = v403 + 192;
      }
      a6[1] = v404;
      ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v497, (uint64_t)&v464, a3);
      DimensionOrderHint::DimensionOrderHint(&v467, 2);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (uint64_t)&v497, (uint64_t)&v467, 1);
      if (v467)
      {
        v468 = (char *)v467;
        operator delete(v467);
      }
      v405 = a6[1];
      if (v405 >= a6[2])
      {
        v406 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&__p);
        v406 = v405 + 192;
        a6[1] = v405 + 192;
      }
      a6[1] = v406;
      v407 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)v461 = *(_OWORD *)a2;
      v462 = v407;
      v463 = *(_QWORD *)(a2 + 32);
      ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v478, (uint64_t)v461);
      v458 = 0;
      v459 = 0;
      v457 = 0;
      std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v457, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
      v460 = *(_DWORD *)(a5 + 24);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v471, (uint64_t)&v478, (uint64_t)&v457, 1);
      if (v457)
      {
        v458 = (char *)v457;
        operator delete(v457);
      }
      v408 = a6[1];
      if (v408 >= a6[2])
      {
        v409 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, v471.i32);
      }
      else
      {
        std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], v471.i32);
        v409 = v408 + 192;
        a6[1] = v408 + 192;
      }
      a6[1] = v409;
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v471);
      v478 = off_24C01FAB8;
      if (v484)
      {
        v485 = v484;
        operator delete(v484);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo(&v478);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
      v497.i64[0] = (uint64_t)off_24C021A98;
      if (v500)
      {
        v501 = v500;
        operator delete(v500);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v497);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v506);
      v511.i64[0] = (uint64_t)off_24C01FAB8;
      if (v516)
      {
        v517 = v516;
        operator delete(v516);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v511);
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v525);
      v528.i64[0] = (uint64_t)off_24C021A98;
      if (v531)
      {
        v532 = v531;
        operator delete(v531);
      }
      ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v528);
      if (v464)
      {
        v465 = (char *)v464;
        operator delete(v464);
      }
      ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
      v534 = off_24C01FAB8;
      if (v539)
      {
        v540 = v539;
        operator delete(v539);
      }
      v173 = &v534;
LABEL_227:
      ZinIrUnitInfo::~ZinIrUnitInfo(v173);
      return 1;
    }
LABEL_727:
    ZinAssertImpl("should be divisible by definition of reshape", v443);
  }
  if (v380)
  {
    while (v379 % v380)
    {
      if (--v380 == 1)
        goto LABEL_570;
    }
    v379 = v380;
    goto LABEL_609;
  }
LABEL_570:
  if (ZinIrReshapeUnit::HasDimWithValueOne((ZinIrReshapeUnit *)a1, v54)
    && ZinIrReshapeUnit::HasDimWithValueOne((ZinIrReshapeUnit *)a2, v354))
  {
    DecomposeGeneralReshape((const ZinTensorDimensions *)a1, (uint64_t *)a2, a3, a5, a6);
  }
LABEL_272:
  v188 = a6[1];
  if (v188 != *a6)
  {
    if ((ZinReshapeLayerUtils::IsValidDecomposition((__int128 *)a1->i8, a3, (uint64_t)a4, a6) & 1) != 0)
      return 1;
    v188 = *a6;
    for (j = a6[1];
          j != v188;
  }
  a6[1] = v188;
  v191 = (const ZinIrHalParameters *)*a4;
  v193 = a1->i64[1];
  v192 = a1[1].i64[0];
  v194 = a1[2].i64[0];
  v195 = a1->i64[0];
  *(int64x2_t *)v541 = vdupq_n_s64(1uLL);
  *(_OWORD *)&v541[16] = *(_OWORD *)v541;
  v542 = 1;
  if (!DistributeADimToNDC(v193 * v192 * v194 * v195, v191, (int64x2_t *)v541))
    return 0;
  if (*(_QWORD *)&v541[16] != 1)
    ZinAssertImpl("H dimension must be 1, because this will be transposed with W");
  *(_QWORD *)&v541[24] = a1[1].i64[1];
  ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v534, (uint64_t)v541);
  v461[1] = 0;
  *(_QWORD *)&v462 = 0;
  v461[0] = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(v461, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  DWORD2(v462) = *(_DWORD *)(a5 + 24);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v533, (uint64_t)&v534, (uint64_t)v461, 1);
  if (v461[0])
  {
    v461[1] = v461[0];
    operator delete(v461[0]);
  }
  v196 = a6[1];
  if (v196 >= a6[2])
  {
    v197 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v533);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v533);
    v197 = v196 + 192;
    a6[1] = v196 + 192;
  }
  a6[1] = v197;
  v198 = (char *)operator new(8uLL);
  *(_QWORD *)v198 = 0x300000004;
  v458 = v198 + 8;
  v459 = v198 + 8;
  v457 = v198;
  v199 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v459, 2uLL);
  v199[1] = 0x400000003;
  v200 = (char *)(v199 + 1);
  v202 = (char *)&v199[v201];
  v203 = (char *)(v199 + 2);
  v204 = (char *)v457;
  v205 = v458;
  if (v458 != v457)
  {
    do
    {
      v206 = *((_QWORD *)v205 - 1);
      v205 -= 8;
      *((_QWORD *)v200 - 1) = v206;
      v200 -= 8;
    }
    while (v205 != v204);
    v204 = (char *)v457;
  }
  v457 = v200;
  v458 = v203;
  v459 = v202;
  if (v204)
    operator delete(v204);
  v458 = v203;
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v528, (uint64_t)&v457, a3);
  DimensionOrderHint::DimensionOrderHint(&v521, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v525, (uint64_t)&v528, (uint64_t)&v521, 1);
  if (v521)
  {
    v522 = v521;
    operator delete(v521);
  }
  v207 = a6[1];
  if (v207 >= a6[2])
  {
    v208 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)v525);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)v525);
    v208 = v207 + 192;
    a6[1] = v207 + 192;
  }
  a6[1] = v208;
  v209 = a1[2].i64[0] * a1->i64[0] * a1->i64[1] * a1[1].i64[0] * a1[1].i64[1] / *(uint64_t *)(a2 + 24);
  v518 = vdupq_n_s64(1uLL);
  v519 = v518;
  v520 = 1;
  v189 = DistributeADimToNDC(v209, v191, &v518);
  if (v189)
  {
    v519.i64[0] = *(_QWORD *)(a2 + 24);
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v511, (uint64_t)&v518);
    v504 = 0;
    v502 = 0;
    v503 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v502, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
    v505 = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v506, (uint64_t)&v511, (uint64_t)&v502, 1);
    if (v502)
    {
      v503 = v502;
      operator delete(v502);
    }
    v210 = a6[1];
    if (v210 >= a6[2])
    {
      v211 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&v506);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&v506);
      v211 = v210 + 192;
      a6[1] = v210 + 192;
    }
    a6[1] = v211;
    ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)&v497, (uint64_t)&v457, a3);
    DimensionOrderHint::DimensionOrderHint(&v486, 2);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&__p, (uint64_t)&v528, (uint64_t)&v486, 1);
    if (v486)
    {
      v487 = (char *)v486;
      operator delete(v486);
    }
    v212 = a6[1];
    if (v212 >= a6[2])
    {
      v213 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, (int *)&__p);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], (int *)&__p);
      v213 = v212 + 192;
      a6[1] = v212 + 192;
    }
    a6[1] = v213;
    ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)&v478, a2);
    v468 = 0;
    v469 = 0;
    v467 = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v467, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
    v470 = *(_DWORD *)(a5 + 24);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)&v471, (uint64_t)&v478, (uint64_t)&v467, 1);
    if (v467)
    {
      v468 = (char *)v467;
      operator delete(v467);
    }
    v214 = a6[1];
    if (v214 >= a6[2])
    {
      v215 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a6, v471.i32);
    }
    else
    {
      std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a6[1], v471.i32);
      v215 = v214 + 192;
      a6[1] = v214 + 192;
    }
    a6[1] = v215;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v471);
    v478 = off_24C01FAB8;
    if (v484)
    {
      v485 = v484;
      operator delete(v484);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo(&v478);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&__p);
    v497.i64[0] = (uint64_t)off_24C021A98;
    if (v500)
    {
      v501 = v500;
      operator delete(v500);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v497);
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&v506);
    v511.i64[0] = (uint64_t)off_24C01FAB8;
    if (v516)
    {
      v517 = v516;
      operator delete(v516);
    }
    ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v511);
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v525);
  v528.i64[0] = (uint64_t)off_24C021A98;
  if (v531)
  {
    v532 = v531;
    operator delete(v531);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v528);
  if (v457)
  {
    v458 = (char *)v457;
    operator delete(v457);
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v533);
  v534 = off_24C01FAB8;
  if (v539)
  {
    v540 = v539;
    operator delete(v539);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(&v534);
  return v189;
}

void sub_20700B284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61)
{
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&STACK[0x250]);
  ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&STACK[0x730]);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&STACK[0x3A0]);
  ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&a61);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&STACK[0x540]);
  ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo((ZinIrReshapeUnitInfo *)&a37);
  if (__p)
    operator delete(__p);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)&STACK[0x670]);
  ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo((ZinIrTransposeUnitInfo *)&STACK[0x460]);
  if (a30)
    operator delete(a30);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void DecomposeGeneralReshape(const ZinTensorDimensions *a1, uint64_t *a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t VectorDimension;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v73[4];
  void **v74[24];
  void *v75[10];
  void *v76;
  void *v77;
  uint64_t v78[3];
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  int v85;
  int v86[22];
  void *v87[15];
  void *v88;
  void *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void *__p[4];
  int v98[48];
  void *v99[10];
  void *v100;
  void *v101;
  uint64_t *v102;
  uint64_t *v103;
  _QWORD v104[2];

  v9 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  v10 = *(_QWORD *)a1;
  v11 = *((_QWORD *)a1 + 1);
  v12 = *((_QWORD *)a1 + 2);
  v13 = operator new(0x28uLL);
  *v13 = v10;
  v13[1] = v8;
  v13[2] = v11;
  v13[3] = v12;
  v13[4] = v9;
  v15 = a2[3];
  v14 = a2[4];
  v17 = *a2;
  v16 = a2[1];
  v18 = a2[2];
  v19 = operator new(0x28uLL);
  *v19 = v17;
  v19[1] = v14;
  v19[2] = v16;
  v19[3] = v18;
  v19[4] = v15;
  v102 = 0;
  v103 = 0;
  v104[0] = 0;
  if (IsVector(a1))
  {
    VectorDimension = GetVectorDimension(a1);
    v26 = v103 - v102;
    if ((unint64_t)(v26 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v27 = (uint64_t)(v104[0] - (_QWORD)v102) >> 2;
    if (v27 <= v26 + 1)
      v27 = v26 + 1;
    if (v104[0] - (_QWORD)v102 >= 0x7FFFFFFFFFFFFFF8uLL)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    if (v28)
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v104, v28);
    else
      v29 = 0;
    v46 = (uint64_t *)&v29[8 * v26];
    v47 = &v29[8 * v28];
    *v46 = VectorDimension | 0x300000000;
    v48 = v46 + 1;
    v50 = (char *)v102;
    v49 = (char *)v103;
    if (v103 != v102)
    {
      do
      {
        v51 = *((_QWORD *)v49 - 1);
        v49 -= 8;
        *--v46 = v51;
      }
      while (v49 != v50);
      v49 = (char *)v102;
    }
    v102 = v46;
    v103 = v48;
    v104[0] = v47;
    if (v49)
      operator delete(v49);
    v103 = v48;
    if ((unint64_t)v48 >= v104[0])
    {
      v53 = v48 - v102;
      if ((unint64_t)(v53 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v54 = (uint64_t)(v104[0] - (_QWORD)v102) >> 2;
      if (v54 <= v53 + 1)
        v54 = v53 + 1;
      if (v104[0] - (_QWORD)v102 >= 0x7FFFFFFFFFFFFFF8uLL)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v54;
      if (v55)
        v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v104, v55);
      else
        v56 = 0;
      v57 = (uint64_t *)&v56[8 * v53];
      v58 = &v56[8 * v55];
      *v57 = (VectorDimension << 32) | 3;
      v52 = v57 + 1;
      v60 = (char *)v102;
      v59 = (char *)v103;
      if (v103 != v102)
      {
        do
        {
          v61 = *((_QWORD *)v59 - 1);
          v59 -= 8;
          *--v57 = v61;
        }
        while (v59 != v60);
        v59 = (char *)v102;
      }
      v102 = v57;
      v103 = v52;
      v104[0] = v58;
      if (v59)
        operator delete(v59);
    }
    else
    {
      *v48 = (VectorDimension << 32) | 3;
      v52 = v48 + 1;
    }
    v103 = v52;
  }
  else
  {
    v21 = 0;
    while (v13[v21] != 1)
    {
      if (++v21 == 5)
      {
        LODWORD(v21) = 0;
        break;
      }
    }
    v22 = v103 - v102;
    if ((unint64_t)(v22 + 1) >> 61)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v23 = (uint64_t)(v104[0] - (_QWORD)v102) >> 2;
    if (v23 <= v22 + 1)
      v23 = v22 + 1;
    if (v104[0] - (_QWORD)v102 >= 0x7FFFFFFFFFFFFFF8uLL)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v104, v24);
    else
      v25 = 0;
    v30 = (uint64_t *)&v25[8 * v22];
    v31 = &v25[8 * v24];
    *v30 = v21 | 0x400000000;
    v32 = v30 + 1;
    v34 = (char *)v102;
    v33 = (char *)v103;
    if (v103 != v102)
    {
      do
      {
        v35 = *((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v30 = v35;
      }
      while (v33 != v34);
      v33 = (char *)v102;
    }
    v102 = v30;
    v103 = v32;
    v104[0] = v31;
    if (v33)
      operator delete(v33);
    v103 = v32;
    if (v21 <= 3)
    {
      v36 = v21;
      do
      {
        v37 = v36 + 1;
        if ((unint64_t)v32 >= v104[0])
        {
          v38 = v32 - v102;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v39 = (uint64_t)(v104[0] - (_QWORD)v102) >> 2;
          if (v39 <= v38 + 1)
            v39 = v38 + 1;
          if (v104[0] - (_QWORD)v102 >= 0x7FFFFFFFFFFFFFF8uLL)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v104, v40);
          else
            v41 = 0;
          v42 = &v41[8 * v38];
          *(_QWORD *)v42 = v37 | (v36 << 32);
          v32 = (uint64_t *)(v42 + 8);
          v44 = (char *)v102;
          v43 = (char *)v103;
          if (v103 != v102)
          {
            do
            {
              v45 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *((_QWORD *)v42 - 1) = v45;
              v42 -= 8;
            }
            while (v43 != v44);
            v43 = (char *)v102;
          }
          v102 = (uint64_t *)v42;
          v103 = v32;
          v104[0] = &v41[8 * v40];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *v32++ = v37 | (v36 << 32);
        }
        v103 = v32;
        ++v36;
      }
      while (v37 != 4);
    }
  }
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v99, (uint64_t)&v102, a3);
  DimensionOrderHint::DimensionOrderHint(__p, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v98, (uint64_t)v99, (uint64_t)__p, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v62 = a5[1];
  if (v62 >= a5[2])
  {
    v63 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a5, v98);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a5[1], v98);
    v63 = v62 + 192;
    a5[1] = v62 + 192;
  }
  v64 = 0;
  a5[1] = v63;
  while (v19[v64] != 1)
  {
    if (++v64 == 5)
    {
      LODWORD(v64) = 0;
      break;
    }
  }
  v95 = 0;
  v94 = 0;
  v96 = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>(&v94, v19, (uint64_t)(v19 + 5), 5uLL);
  v65 = v94;
  if (v64 <= 3)
  {
    v66 = v64;
    do
    {
      v65[v66] = v65[v66 + 1];
      ++v66;
    }
    while (v66 != 4);
  }
  v65[4] = 1;
  v90 = *v65;
  v91 = *((_OWORD *)v65 + 1);
  v92 = 1;
  v93 = v65[1];
  ZinIrReshapeUnitInfo::ZinIrReshapeUnitInfo((uint64_t)v87, (uint64_t)&v90);
  v83 = 0;
  v84 = 0;
  v82 = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>(&v82, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  v85 = *(_DWORD *)(a4 + 24);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v86, (uint64_t)v87, (uint64_t)&v82, 1);
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  v67 = a5[1];
  if (v67 >= a5[2])
  {
    v68 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a5, v86);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a5[1], v86);
    v68 = v67 + 192;
    a5[1] = v67 + 192;
  }
  a5[1] = v68;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  memset(v78, 0, sizeof(v78));
  if (!ZinReshapeLayerUtils::IsConvertibleToTranspose(&v90, a2, (DimensionOrderHint *)a4, v78))
    ZinAssertImpl("the decomposed transpose is not valid.");
  ZinReshapeLayerUtils::ConvertTransposeMappingToDims(v78, (char **)&v79);
  ZinIrTransposeUnitInfo::ZinIrTransposeUnitInfo((uint64_t)v75, (uint64_t)&v79, a3);
  DimensionOrderHint::DimensionOrderHint(v73, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc((uint64_t)v74, (uint64_t)v75, (uint64_t)v73, 1);
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  v69 = a5[1];
  if (v69 >= a5[2])
  {
    v70 = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a5, (int *)v74);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a5[1], (int *)v74);
    v70 = v69 + 192;
    a5[1] = v69 + 192;
  }
  a5[1] = v70;
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v74);
  v75[0] = off_24C021A98;
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v75);
  v74[0] = (void **)v78;
  std::vector<std::vector<ZinIrOpLayer *>>::__destroy_vector::operator()[abi:ne180100](v74);
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v86);
  v87[0] = off_24C01FAB8;
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v87);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)v98);
  v99[0] = off_24C021A98;
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  ZinIrUnitInfo::~ZinIrUnitInfo(v99);
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  operator delete(v19);
  operator delete(v13);
}

void sub_20700C66C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v5;

  v5 = *(void **)(v3 - 112);
  if (v5)
  {
    *(_QWORD *)(v3 - 104) = v5;
    operator delete(v5);
  }
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL ZinReshapeLayerUtils::CheckInterleaveCompatibility(ZinReshapeLayerUtils *this, const ZinTensorDimensions *a2, const ZinTensorDimensions *a3, unint64_t a4)
{
  _BOOL8 v4;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int *v14;
  int *v15;

  if (a4 == 1)
    return 1;
  if (*((_QWORD *)a2 + 1) % a4 || *((_QWORD *)this + 1) % a4)
    return 0;
  if (!DimensionOrderHint::IsSet(a3))
    return 1;
  DimensionOrderHint::GetOrder(a3, &v14);
  v9 = v14;
  v10 = v14;
  if (v14 != v15)
  {
    while (*v10 != 2)
    {
      if (++v10 == v15)
      {
        v10 = v15;
        break;
      }
    }
  }
  v11 = v10 + 1;
  if (v10 + 1 == v15)
  {
    v13 = 1;
    v12 = 1;
  }
  else
  {
    v12 = 1;
    v13 = 1;
    do
    {
      v12 *= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)this, *v11);
      v13 *= GetValueAtDimension<ZinTensorDimensions>((uint64_t *)a2, *v11++);
    }
    while (v11 != v15);
    v9 = v14;
  }
  v4 = v12 == v13;
  if (v9)
  {
    v15 = v9;
    operator delete(v9);
  }
  return v4;
}

void sub_20700C8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinReshapeLayerUtils::IsReshapeValidAfterStridePadding(ZinIrOpLayer *a1, int a2, uint64_t a3)
{
  ZinIrTensor *v6;
  uint64_t InputTensor;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t **v14;
  uint64_t **v15;
  int v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19[3];
  void *__p;
  char *v21;
  void *v22[4];
  int v23;
  int *v24;

  v23 = a2;
  if (!(_DWORD)a3)
    ZinAssertImpl("must provide fixed dimension order as default");
  v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0, 0);
  if (ZinIrTensor::HasFlexDimensionOrderHint(v6))
    DimensionOrderHint::DimensionOrderHint(v22, a3);
  else
    ZinIrTensor::GetDimensionOrderHint(v6, (uint64_t)v22);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)v22, &__p);
  InputTensor = ZinIrOpLayer::GetInputTensor(a1, 0);
  ZinReshapeLayerUtils::TraceReshapeDimension(InputTensor, (uint64_t)v6, &__p, (uint64_t)v19);
  v8 = ZinIrOpLayer::GetInputTensor(a1, 0);
  ZinReshapeLayerUtils::TraceReshapeDimension((uint64_t)v6, v8, &__p, (uint64_t)&v17);
  v9 = (char *)__p;
  if (__p != v21)
  {
    while (*(_DWORD *)v9 != a2)
    {
      v9 += 4;
      if (v9 == v21)
      {
        v9 = v21;
        break;
      }
    }
  }
  if (v9 - (_BYTE *)__p > 11 || (v10 = v18) == 0)
  {
LABEL_16:
    v12 = 1;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = *((_DWORD *)v10 + 8);
    if (v11 <= a2)
      break;
LABEL_15:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_16;
  }
  if (v11 < a2)
  {
    ++v10;
    goto LABEL_15;
  }
  v24 = &v23;
  v14 = std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(&v17, &v23, (uint64_t)&std::piecewise_construct, &v24);
  if (v14[5] == v14[6])
    goto LABEL_16;
  v24 = &v23;
  v16 = *(_DWORD *)std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(&v17, &v23, (uint64_t)&std::piecewise_construct, &v24)[5];
  v24 = &v16;
  v15 = std::__tree<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,std::vector<ZinIrDimension>>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension const&>,std::tuple<>>(v19, &v16, (uint64_t)&std::piecewise_construct, &v24);
  if (*(_DWORD *)v15[5] == v23)
    goto LABEL_16;
  v12 = 0;
LABEL_17:
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&v17, v18);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)v19, v19[1]);
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  return v12;
}

void sub_20700CB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy((uint64_t)&a13, a14);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t GetVectorDimension(const ZinTensorDimensions *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *((_QWORD *)a1 + 3);
  v1 = *((_QWORD *)a1 + 4);
  v3 = *(_QWORD *)a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = operator new(0x28uLL);
  v7 = 0;
  *v6 = v3;
  v6[1] = v1;
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  do
  {
    v8 = (uint64_t)v6[v7] > 1 || v7 == 4;
    ++v7;
  }
  while (!v8);
  v9 = (v7 - 1);
  operator delete(v6);
  return v9;
}

uint64_t std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::push_back[abi:ne180100](uint64_t *a1, int *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(a1, a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>((int *)a1[1], a2);
    result = v3 + 192;
    a1[1] = v3 + 192;
  }
  a1[1] = result;
  return result;
}

void sub_20700CC30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  int v8;
  __int128 v9;

  DimensionOrderHint::DimensionOrderHint(a1 + 16, 2);
  *(_DWORD *)a1 = 21;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 48) = off_24C017CA0;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 56) = v7;
  }
  v8 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 88), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  v9 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 48) = off_24C021A98;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 128), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  return a1;
}

{
  char *v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v8 = (char *)(a1 + 16);
  DimensionOrderHint::DimensionOrderHint(a1 + 16, 2);
  *(_DWORD *)a1 = 22;
  *(_QWORD *)(a1 + 8) = a4;
  if (v8 != (char *)a3)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v8, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 48) = off_24C017CA0;
  *(_DWORD *)(a1 + 40) = v9;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 56) = v10;
  }
  v11 = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 88), *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = off_24C01FAB8;
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = v14;
  *(_OWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 128) = v12;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)(a1 + 168), *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 2);
  return a1;
}

void sub_20700CD34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__push_back_slow_path<ZinReshapeLayerUtils::ReshapeDecomposedDesc const&>(uint64_t *a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  int *v14;
  int *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAALL)
    v9 = 0x155555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LayerTilingHelper>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (int *)&v10[192 * v4];
  v16 = &v10[192 * v9];
  std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>(v14, a2);
  v15 = v14 + 48;
  std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_20700CE68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

int *std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>(int *a1, int *a2)
{
  void *__p[4];

  DimensionOrderHint::DimensionOrderHint(__p, 2);
  ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc(a1, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_20700CED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *ZinReshapeLayerUtils::ReshapeDecomposedDesc::ReshapeDecomposedDesc(int *a1, int *a2)
{
  char *v4;
  int v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __int128 v13;

  v4 = (char *)(a1 + 4);
  DimensionOrderHint::DimensionOrderHint(a1 + 4, 2);
  v5 = *a2;
  *a1 = *a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  if (a1 != a2)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, *((char **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 2);
    v5 = *a1;
  }
  a1[10] = a2[10];
  if (v5 == 21)
  {
    *((_QWORD *)a1 + 6) = off_24C017CA0;
    if (*((char *)a2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 14), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 14);
      *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      *(_OWORD *)(a1 + 14) = v7;
    }
    v12 = a2[20];
    *((_QWORD *)a1 + 11) = 0;
    a1[20] = v12;
    *((_QWORD *)a1 + 12) = 0;
    *((_QWORD *)a1 + 13) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 22), *((__int128 **)a2 + 11), *((__int128 **)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3));
    v13 = *((_OWORD *)a2 + 7);
    *((_QWORD *)a1 + 16) = 0;
    *((_OWORD *)a1 + 7) = v13;
    *((_QWORD *)a1 + 6) = off_24C021A98;
    *((_QWORD *)a1 + 17) = 0;
    *((_QWORD *)a1 + 18) = 0;
    std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)a1 + 16, *((const void **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3);
  }
  else if (v5 == 22)
  {
    *((_QWORD *)a1 + 6) = off_24C017CA0;
    if (*((char *)a2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 14), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 14);
      *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      *(_OWORD *)(a1 + 14) = v6;
    }
    v8 = a2[20];
    *((_QWORD *)a1 + 11) = 0;
    a1[20] = v8;
    *((_QWORD *)a1 + 12) = 0;
    *((_QWORD *)a1 + 13) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 22), *((__int128 **)a2 + 11), *((__int128 **)a2 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3));
    *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
    *((_QWORD *)a1 + 6) = off_24C01FAB8;
    v9 = *((_OWORD *)a2 + 8);
    v10 = *((_OWORD *)a2 + 9);
    v11 = *((_QWORD *)a2 + 20);
    *((_QWORD *)a1 + 21) = 0;
    *((_QWORD *)a1 + 20) = v11;
    *((_OWORD *)a1 + 9) = v10;
    *((_OWORD *)a1 + 8) = v9;
    *((_QWORD *)a1 + 22) = 0;
    *((_QWORD *)a1 + 23) = 0;
    std::vector<ZinIrPaddingMode>::__init_with_size[abi:ne180100]<ZinIrPaddingMode*,ZinIrPaddingMode*>((_QWORD *)a1 + 21, *((const void **)a2 + 21), *((_QWORD *)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 2);
  }
  return a1;
}

void sub_20700D0E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinReshapeLayerUtils::ReshapeDecomposedDesc>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinReshapeLayerUtils::ReshapeDecomposedDesc>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>,std::reverse_iterator<ZinReshapeLayerUtils::ReshapeDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;

  v10 = 0;
  v11 = a7 - 192;
  while (a3 + v10 != a5)
  {
    v12 = (int *)(v11 + v10);
    v10 -= 192;
    std::construct_at[abi:ne180100]<ZinReshapeLayerUtils::ReshapeDecomposedDesc,ZinReshapeLayerUtils::ReshapeDecomposedDesc const&,ZinReshapeLayerUtils::ReshapeDecomposedDesc*>(v12, (int *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinReshapeLayerUtils::ReshapeDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 192;
    ZinReshapeLayerUtils::ReshapeDecomposedDesc::~ReshapeDecomposedDesc((ZinReshapeLayerUtils::ReshapeDecomposedDesc *)(i - 192));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20700D3B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  ZinIrUnitInfo::~ZinIrUnitInfo(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t FindAxisToSwapWidth(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t ValueAt;
  unint64_t v16;
  uint64_t v18;

  v8 = operator new(0x10uLL);
  *v8 = xmmword_207A8E9A0;
  v18 = 1;
  if (ZinTensorFormatGetSize(a3, &v18))
    ZinAssertImpl("Invalid format");
  v9 = 0;
  v10 = -1;
  v11 = 5;
  do
  {
    v12 = *((_DWORD *)v8 + v9);
    v14 = *(_DWORD **)a1;
    v13 = *(_DWORD **)(a1 + 8);
    if (*(_DWORD **)a1 != v13)
    {
      while (*v14 != v12)
      {
        if (++v14 == v13)
        {
          v14 = *(_DWORD **)(a1 + 8);
          break;
        }
      }
    }
    if (v14 == v13)
    {
      ValueAt = GetValueAtDimension<ZinTensorDimensions>(a2, *((_DWORD *)v8 + v9));
      v16 = ZinAlign(ValueAt, *(_QWORD *)(a4 + 528));
      if (ValueAt != 1 && v16 - ValueAt < v10)
      {
        v10 = v16 - ValueAt;
        v11 = v12;
      }
      else
      {
        v11 = v11;
      }
    }
    ++v9;
  }
  while (v9 != 4);
  operator delete(v8);
  return v11;
}

void sub_20700D51C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FindAxisToSwapWidthUsingTranspose(ZinReshapeLayerUtils *a1, const ZinTensorDimensions *a2, int a3, uint64_t a4, int a5, DimensionOrderHint *this, void **a7, uint64_t a8)
{
  ZinReshapeLayerUtils *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  uint64_t v14;
  int v15;
  int *v16;
  int *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  int *v24;
  int v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t ValueAt;
  uint64_t v30;
  int *v31;
  unsigned int *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AxisToSwapWidth;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *__format;
  void **v70;
  void *v72;
  void *v77[2];
  uint64_t v78;
  int *v79;
  int *v80;
  int *v81;
  void *__p[2];
  uint64_t v83;
  void *v84[5];

  a7[1] = *a7;
  if (a5)
    v10 = a1;
  else
    v10 = a2;
  v11 = *(_OWORD *)v10;
  v12 = *((_OWORD *)v10 + 1);
  *(_QWORD *)(a8 + 32) = *((_QWORD *)v10 + 4);
  *(_OWORD *)a8 = v11;
  *(_OWORD *)(a8 + 16) = v12;
  DimensionOrderHint::GetOrder(this, __p);
  DimensionOrderHint::DimensionOrderHint(v84, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v70 = a7;
  v13 = operator new(0x10uLL);
  v14 = 0;
  *v13 = xmmword_207A8E9A0;
  __p[0] = 0;
  __p[1] = 0;
  v83 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  do
  {
    v15 = *((_DWORD *)v13 + v14);
    if (GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v10, v15) == 1)
    {
      v16 = v80;
      if (v80 >= v81)
      {
        v18 = v79;
        v19 = v80 - v79;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        v21 = (char *)v81 - (char *)v79;
        if (((char *)v81 - (char *)v79) >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)&v81, v22);
          v18 = v79;
          v16 = v80;
        }
        else
        {
          v23 = 0;
        }
        v24 = (int *)&v23[4 * v19];
        *v24 = v15;
        v17 = v24 + 1;
        while (v16 != v18)
        {
          v25 = *--v16;
          *--v24 = v25;
        }
        v79 = v24;
        v80 = v17;
        v81 = (int *)&v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v80 = v15;
        v17 = v16 + 1;
      }
      v80 = v17;
    }
    ++v14;
  }
  while (v14 != 4);
  v26 = 0;
  do
  {
    DimensionOrderHint::GetOrder((DimensionOrderHint *)v84, v77);
    v27 = v77[0];
    v28 = v77[1];
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
    if ((v28 - v27) >> 2 <= v26)
    {
LABEL_53:
      v33 = 5;
LABEL_54:
      v31 = v79;
      goto LABEL_55;
    }
    DimensionOrderHint::GetOrder((DimensionOrderHint *)v84, v77);
    if (v26 >= ((char *)v77[1] - (char *)v77[0]) >> 2)
      std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
    ValueAt = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v10, *((_DWORD *)v77[0] + v26));
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
    ++v26;
  }
  while (ValueAt < 2);
  DimensionOrderHint::GetOrder((DimensionOrderHint *)v84, v77);
  if (v26 - 1 >= ((char *)v77[1] - (char *)v77[0]) >> 2)
    std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
  v30 = *((unsigned int *)v77[0] + v26 - 1);
  v77[1] = v77[0];
  operator delete(v77[0]);
  v31 = v79;
  v32 = (unsigned int *)v80;
  v33 = 5;
  if (v80 != v79 && (_DWORD)v30 != 5)
  {
    v34 = 0;
    __format = "Axis values are not as expected\n";
    while (1)
    {
      v35 = *v31;
      v36 = *(_OWORD *)v10;
      v37 = *((_OWORD *)v10 + 1);
      *(_QWORD *)(a8 + 32) = *((_QWORD *)v10 + 4);
      *(_OWORD *)a8 = v36;
      *(_OWORD *)(a8 + 16) = v37;
      v38 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v10, v35);
      v39 = GetValueAtDimension<ZinTensorDimensions>((uint64_t *)v10, v30);
      v40 = v39;
      if (v38 != 1 && v39 == 1)
        goto LABEL_98;
      if (SetValueAtDimension<ZinTensorDimensions>((_QWORD *)a8, v30, v38)
        || SetValueAtDimension<ZinTensorDimensions>((_QWORD *)a8, v35, v40))
      {
        __format = "Setting dim failed\n";
LABEL_98:
        ZinAssertImpl(__format);
      }
      if (a5)
      {
        ZinReshapeLayerUtils::GetReshapedDimensions((ZinReshapeLayerUtils *)a8, a2, (const ZinTensorDimensions *)v84, 0, (char **)v77);
        if (v34)
        {
          __p[1] = v34;
          operator delete(v34);
        }
        v72 = v77[0];
        *(_OWORD *)__p = *(_OWORD *)v77;
        v83 = v78;
        AxisToSwapWidth = FindAxisToSwapWidth((uint64_t)__p, (uint64_t *)a8, a3, a4);
      }
      else
      {
        ZinReshapeLayerUtils::GetReshapedDimensions(a1, (const ZinTensorDimensions *)a8, (const ZinTensorDimensions *)v84, 0, (char **)v77);
        if (v34)
        {
          __p[1] = v34;
          operator delete(v34);
        }
        v72 = v77[0];
        *(_OWORD *)__p = *(_OWORD *)v77;
        v83 = v78;
        AxisToSwapWidth = FindAxisToSwapWidth((uint64_t)__p, (uint64_t *)a1, a3, a4);
      }
      v33 = AxisToSwapWidth;
      v34 = v72;
      if ((_DWORD)AxisToSwapWidth != 5)
        break;
      if (++v31 == (int *)v32)
        goto LABEL_53;
    }
    v44 = (unint64_t)v70[2];
    v45 = (uint64_t *)v70[1];
    if ((unint64_t)v45 >= v44)
    {
      v47 = ((char *)v45 - (_BYTE *)*v70) >> 3;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v48 = v44 - (_QWORD)*v70;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v70 + 2), v50);
      else
        v51 = 0;
      v52 = &v51[8 * v47];
      v53 = &v51[8 * v50];
      *(_QWORD *)v52 = v30 | (v35 << 32);
      v46 = (uint64_t *)(v52 + 8);
      v55 = (char *)*v70;
      v54 = (char *)v70[1];
      if (v54 != *v70)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *((_QWORD *)v52 - 1) = v56;
          v52 -= 8;
        }
        while (v54 != v55);
        v54 = (char *)*v70;
      }
      *v70 = v52;
      v70[1] = v46;
      v70[2] = v53;
      if (v54)
        operator delete(v54);
    }
    else
    {
      *v45 = v30 | (v35 << 32);
      v46 = v45 + 1;
    }
    v70[1] = v46;
    v57 = (unint64_t)v70[2];
    if ((unint64_t)v46 >= v57)
    {
      v59 = ((char *)v46 - (_BYTE *)*v70) >> 3;
      if ((unint64_t)(v59 + 1) >> 61)
        std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
      v60 = v57 - (_QWORD)*v70;
      v61 = v60 >> 2;
      if (v60 >> 2 <= (unint64_t)(v59 + 1))
        v61 = v59 + 1;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      if (v62)
        v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v70 + 2), v62);
      else
        v63 = 0;
      v64 = &v63[8 * v59];
      v65 = &v63[8 * v62];
      *(_QWORD *)v64 = v35 | (v30 << 32);
      v58 = v64 + 8;
      v67 = (char *)*v70;
      v66 = (char *)v70[1];
      if (v66 != *v70)
      {
        do
        {
          v68 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *((_QWORD *)v64 - 1) = v68;
          v64 -= 8;
        }
        while (v66 != v67);
        v66 = (char *)*v70;
      }
      *v70 = v64;
      v70[1] = v58;
      v70[2] = v65;
      if (v66)
        operator delete(v66);
    }
    else
    {
      *v46 = v35 | (v30 << 32);
      v58 = v46 + 1;
    }
    v70[1] = v58;
    goto LABEL_54;
  }
LABEL_55:
  if (v31)
  {
    v80 = v31;
    operator delete(v31);
  }
  if (__p[0])
    operator delete(__p[0]);
  operator delete(v13);
  if (v84[0])
  {
    v84[1] = v84[0];
    operator delete(v84[0]);
  }
  return v33;
}

void sub_20700DAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  operator delete(v26);
  v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(_QWORD *)(v27 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

BOOL DistributeADimToNDC(unint64_t a1, const ZinIrHalParameters *a2, int64x2_t *a3)
{
  unint64_t MaxDivisor;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  MaxDivisor = ZinFindMaxDivisor(a1, *((_QWORD *)a2 + 48));
  a3->i64[0] = MaxDivisor;
  v7 = a1 / MaxDivisor;
  v8 = ZinFindMaxDivisor(v7, *((_QWORD *)a2 + 44));
  a3[2].i64[0] = v8;
  v9 = *((_QWORD *)a2 + 46);
  v10 = v7 / v8;
  v11 = ZinFindMaxDivisor(v7 / v8, v9);
  a3->i64[1] = v11;
  if (v10 / v11 == 1)
    a3[1] = vdupq_n_s64(1uLL);
  return v10 / v11 == 1;
}

__CFDictionary *ZinCreateNEMatMulUnit(void (***a1)(ZinIrUnitInfo *__hidden this))
{
  __CFDictionary *Unit;
  size_t v3;
  std::string *v4;
  void (**v5)(ZinIrUnitInfo *__hidden);
  __CFDictionary *MatrixMultUnit;
  std::string *p_p;
  CFStringRef v8;
  std::string v10;
  void (**v11)(ZinIrUnitInfo *__hidden);
  std::string __p;
  int v13;
  std::string v14;
  __int128 v15;
  int v16;
  std::string *v17;
  char v18;
  std::string v19;
  __int128 v20;

  *(_QWORD *)&v20 = *MEMORY[0x24BDAC8D0];
  Unit = ZinCreateUnit((const ZinIrUnitInfo *)a1);
  v11 = off_24C017CA0;
  if (*((char *)a1 + 399) < 0)
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a1[47], (std::string::size_type)a1[48]);
  else
    __p = *(std::string *)(a1 + 47);
  v13 = *((_DWORD *)a1 + 100);
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, (__int128 *)a1[51], (__int128 *)a1[52], 0xAAAAAAAAAAAAAAABLL * (a1[52] - a1[51]));
  v15 = *((_OWORD *)a1 + 27);
  v11 = off_24C0221F8;
  v16 = *((_DWORD *)a1 + 112);
  if (*((char *)a1 + 31) >= 0)
    v3 = *((unsigned __int8 *)a1 + 31);
  else
    v3 = (size_t)a1[2];
  v4 = &v10;
  std::string::basic_string[abi:ne180100]((uint64_t)&v10, v3 + 7);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v4 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if (v3)
  {
    if (*((char *)a1 + 31) >= 0)
      v5 = (void (**)(ZinIrUnitInfo *__hidden))(a1 + 1);
    else
      v5 = a1[1];
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, ".matmul");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v10;
  v15 = *((_OWORD *)a1 + 4);
  if (&v11 != a1)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v14, (std::string *)a1[5], (__int128 *)a1[6], 0xAAAAAAAAAAAAAAABLL * (a1[6] - a1[5]));
  MatrixMultUnit = ZinCreateMatrixMultUnit((const ZinIrMatrixMultUnitInfo *)&v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)p_p, 0x8000100u);
  CFDictionaryAddValue(Unit, v8, MatrixMultUnit);
  CFRelease(v8);
  CFRelease(MatrixMultUnit);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v19 = __p;
  memset(&v10, 0, sizeof(v10));
  v17 = &v10;
  v18 = 0;
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v10.__r_.__value_.__l.__size_ = v10.__r_.__value_.__r.__words[0];
  v10.__r_.__value_.__r.__words[2] = v10.__r_.__value_.__r.__words[0] + 24;
  v10.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v10.__r_.__value_.__r.__words[2], (__int128 *)&v19, &v20, (std::string *)v10.__r_.__value_.__l.__data_);
  ZinCreateNEUnit((uint64_t)a1, (__int128 **)&v10, Unit);
  v17 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v11);
  return Unit;
}

void sub_20700DEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  ZinIrUnitInfo::~ZinIrUnitInfo(&a12);
  _Unwind_Resume(a1);
}

uint64_t ZinMirSetZeroPad::Run(uint64_t result, uint64_t a2)
{
  ZinIrOpLayer **v2;
  ZinIrOpLayer **v3;
  uint64_t v4;
  ZinIrOpLayer *v5;
  ZinIrTensor *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  int8x8_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64x2_t v19;
  int8x8_t v20;
  char *v21;
  uint64_t v22;
  ZinRingBufferWriterLayer **v23;
  ZinRingBufferWriterLayer **v24;
  ZinRingBufferWriterLayer **v25;
  char *v26;
  void *SliceInputLayer;
  char *v28;
  char *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *i;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _OWORD v49[2];
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;

  if (*(_BYTE *)(a2 + 1331))
  {
    memset(v49, 0, sizeof(v49));
    v50 = 1065353216;
    v2 = *(ZinIrOpLayer ***)result;
    v3 = *(ZinIrOpLayer ***)(result + 8);
    if (*(ZinIrOpLayer ***)result != v3)
    {
      v4 = a2;
      do
      {
        v5 = *v2;
        if (ZinIrOpLayer::IsANELayer(*v2))
        {
          v48 = 0;
          v6 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
          v48 = *((_QWORD *)ZinIrTensor::GetRootTensor(v6) + 12);
          if (*((_QWORD *)v5 + 33))
          {
            v7 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
            if (ZinCropOffsetUtil::HasUnalignedOutputCropX(*(_DWORD *)(v7 + 88), *(_QWORD *)(*((_QWORD *)v5 + 33) + 320), v4)&& !std::__hash_table<std::__hash_value_type<ZinANELayer const*,int>,std::__unordered_map_hasher<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::hash<ZinANELayer const*>,std::equal_to<ZinANELayer const*>,true>,std::__unordered_map_equal<ZinANELayer const*,std::__hash_value_type<ZinANELayer const*,int>,std::equal_to<ZinANELayer const*>,std::hash<ZinANELayer const*>,true>,std::allocator<std::__hash_value_type<ZinANELayer const*,int>>>::find<ZinANELayer const*>(v49, &v48))
            {
              v8 = *(_DWORD *)(*(_QWORD *)(v48 + 64) + 8);
              if (v8 == 30)
              {
                v44 = v4;
                v45 = 0;
                v46 = 0;
                v47 = 0;
                v23 = *(ZinRingBufferWriterLayer ***)(v48 + 112);
                v24 = *(ZinRingBufferWriterLayer ***)(v48 + 120);
                if (v23 != v24)
                {
                  do
                  {
                    if (*(_DWORD *)(*((_QWORD *)*v23 + 8) + 8) == 75)
                    {
                      ZinRingBufferWriterLayer::GetRingBufferWriterChain(*v23, &v51);
                      v25 = (ZinRingBufferWriterLayer **)v51;
                      v26 = v52;
                      if (v51 != v52)
                      {
                        do
                        {
                          SliceInputLayer = (void *)ZinRingBufferWriterLayer::GetSliceInputLayer(*v25);
                          if (ZinIrOpLayer::IsANELayer((ZinIrOpLayer *)SliceInputLayer))
                          {
                            v28 = v46;
                            if (v46 >= v47)
                            {
                              v31 = (v46 - v45) >> 3;
                              if ((unint64_t)(v31 + 1) >> 61)
                                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                              v32 = (v47 - v45) >> 2;
                              if (v32 <= v31 + 1)
                                v32 = v31 + 1;
                              if ((unint64_t)(v47 - v45) >= 0x7FFFFFFFFFFFFFF8)
                                v33 = 0x1FFFFFFFFFFFFFFFLL;
                              else
                                v33 = v32;
                              if (v33)
                                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v47, v33);
                              else
                                v34 = 0;
                              v35 = &v34[8 * v31];
                              *(_QWORD *)v35 = SliceInputLayer;
                              v29 = v35 + 8;
                              v37 = v45;
                              v36 = v46;
                              if (v46 != v45)
                              {
                                do
                                {
                                  v38 = *((_QWORD *)v36 - 1);
                                  v36 -= 8;
                                  *((_QWORD *)v35 - 1) = v38;
                                  v35 -= 8;
                                }
                                while (v36 != v37);
                                v36 = v45;
                              }
                              v45 = v35;
                              v46 = v29;
                              v47 = &v34[8 * v33];
                              if (v36)
                                operator delete(v36);
                            }
                            else
                            {
                              *(_QWORD *)v46 = SliceInputLayer;
                              v29 = v28 + 8;
                            }
                            v46 = v29;
                          }
                          else
                          {
                            if (SliceInputLayer)
                            else
                              v30 = 0;
                            GetANELayerWriters((uint64_t)v30, (void **)&v45);
                          }
                          ++v25;
                        }
                        while (v25 != (ZinRingBufferWriterLayer **)v26);
                        v25 = (ZinRingBufferWriterLayer **)v51;
                      }
                      if (v25)
                      {
                        v52 = (char *)v25;
                        operator delete(v25);
                      }
                    }
                    ++v23;
                  }
                  while (v23 != v24);
                  v39 = v45;
                  v40 = v46;
                  for (i = v45; i != v40; *(_QWORD *)(*(_QWORD *)(v42 + 264) + 1496) = 0x100000001)
                  {
                    v42 = *(_QWORD *)i;
                    i += 8;
                  }
                  if (v39)
                  {
                    v46 = v39;
                    operator delete(v39);
                  }
                }
                v4 = v44;
              }
              else
              {
                if (v8 != 7)
                {
                  v43 = (const char *)(v48 + 24);
                  if (*(char *)(v48 + 47) < 0)
                    v43 = *(const char **)v43;
                  ZinAssertImpl("Unexpected unaligned output crop on layer: %s", v43);
                }
                v51 = 0;
                v52 = 0;
                v53 = 0;
                GetANELayerWriters(v48, (void **)&v51);
                v9 = 126 - 2 * __clz((v52 - v51) >> 3);
                if (v52 == v51)
                  v10 = 0;
                else
                  v10 = v9;
                std::__introsort<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,false>((uint64_t)v51, (uint64_t *)v52, v10, 1);
                v11 = (uint64_t *)v51;
                v12 = v52;
                v13 = (int8x8_t)0x100000001;
                if ((unint64_t)(v52 - v51) >= 9)
                {
                  v14 = 2;
                  if ((unint64_t)((v52 - v51) >> 3) > 2)
                    v14 = (v52 - v51) >> 3;
                  v15 = (uint64_t *)(v51 + 8);
                  v16 = *(_QWORD *)(*(_QWORD *)v51 + 360);
                  v17 = v14 - 1;
                  do
                  {
                    v18 = *v15++;
                    v19.i64[0] = v16;
                    v16 = *(_QWORD *)(v18 + 360);
                    v19.i64[1] = v16;
                    v13 = vand_s8(v13, (int8x8_t)vmovn_s64(vcgtq_s64(v19, (int64x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL))));
                    --v17;
                  }
                  while (v17);
                }
                if (v51 != v52)
                {
                  v20 = vbic_s8((int8x8_t)0x100000001, v13);
                  v21 = v51;
                  do
                  {
                    v22 = *(_QWORD *)v21;
                    v21 += 8;
                    *(int8x8_t *)(*(_QWORD *)(v22 + 264) + 1496) = v20;
                  }
                  while (v21 != v12);
                }
                if (v11)
                {
                  v52 = (char *)v11;
                  operator delete(v11);
                }
              }
              std::__hash_table<ZinIrTensor const*,std::hash<ZinIrTensor const*>,std::equal_to<ZinIrTensor const*>,std::allocator<ZinIrTensor const*>>::__emplace_unique_key_args<ZinIrTensor const*,ZinIrTensor const* const&>((uint64_t)v49, &v48, &v48);
            }
          }
        }
        ++v2;
      }
      while (v2 != v3);
    }
    return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v49);
  }
  return result;
}

void sub_20700E324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void GetANELayerWriters(uint64_t a1, void **a2)
{
  ZinIrOpLayer **v2;
  ZinIrOpLayer **v3;
  uint64_t v5;
  ZinIrOpLayer *v6;
  unint64_t v7;
  ZinIrOpLayer **v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  ZinIrOpLayer **v16;
  char *v17;
  char *v18;
  ZinIrOpLayer *v19;

  if (!a1)
    ZinAssertImpl("Unaligned output crops in X expects a concat.");
  v2 = *(ZinIrOpLayer ***)(a1 + 88);
  v3 = *(ZinIrOpLayer ***)(a1 + 96);
  if (v2 != v3)
  {
    v5 = (uint64_t)(a2 + 2);
    do
    {
      v6 = *v2;
      if (ZinIrOpLayer::IsANELayer(*v2))
      {
        v8 = (ZinIrOpLayer **)a2[1];
        v7 = (unint64_t)a2[2];
        if ((unint64_t)v8 >= v7)
        {
          v11 = ((char *)v8 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          v12 = v7 - (_QWORD)*a2;
          v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1))
            v13 = v11 + 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v14);
          else
            v15 = 0;
          v16 = (ZinIrOpLayer **)&v15[8 * v11];
          *v16 = v6;
          v9 = v16 + 1;
          v18 = (char *)*a2;
          v17 = (char *)a2[1];
          if (v17 != *a2)
          {
            do
            {
              v19 = (ZinIrOpLayer *)*((_QWORD *)v17 - 1);
              v17 -= 8;
              *--v16 = v19;
            }
            while (v17 != v18);
            v17 = (char *)*a2;
          }
          *a2 = v16;
          a2[1] = v9;
          a2[2] = &v15[8 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v8 = v6;
          v9 = v8 + 1;
        }
        a2[1] = v9;
      }
      else
      {
        if (v6)
        else
          v10 = 0;
        GetANELayerWriters(v10, a2);
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  BOOL v133;
  char v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t *v156;
  int64_t v157;
  int64_t v158;
  int64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  unint64_t v257;
  int64_t v258;
  uint64_t v259;
  uint64_t v260;

  v6 = (uint64_t *)result;
LABEL_2:
  v7 = a2 - 1;
  v8 = v6;
  while (2)
  {
    v6 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v128 = *v8;
        v129 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*(a2 - 1) + 32))(*(a2 - 1), 0, 0)+ 104);
        if (!v129 || (v130 = *(uint64_t **)(v129 + 40), v130 == *(uint64_t **)(v129 + 48)))
          v131 = 0;
        else
          v131 = *v130;
        if (*(_DWORD *)(v131 + 156) != 1)
          goto LABEL_357;
        v233 = *(_QWORD *)(v131 + 240);
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v128 + 32))(v128, 0, 0);
        v234 = *(_QWORD *)(result + 104);
        if (!v234 || (v235 = *(uint64_t **)(v234 + 40), v235 == *(uint64_t **)(v234 + 48)))
          v236 = 0;
        else
          v236 = *v235;
        if (*(_DWORD *)(v236 + 156) != 1)
          goto LABEL_357;
        if (v233 < *(_QWORD *)(v236 + 240))
        {
          v237 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v237;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v8, v8 + 1, v7);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v8, v8 + 1, v8 + 2, v7);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,0>(v8, v8 + 1, v8 + 2, v8 + 3, v7);
      default:
        if (v9 <= 191)
        {
          v132 = v8 + 1;
          v133 = v8 == a2 || v132 == a2;
          v134 = v133;
          if ((a4 & 1) != 0)
          {
            if ((v134 & 1) != 0)
              return result;
            v135 = 0;
            v136 = v8;
            while (1)
            {
              v138 = *v136;
              v137 = v136[1];
              v136 = v132;
              v139 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v137 + 32))(v137, 0, 0)+ 104);
              if (!v139 || (v140 = *(uint64_t **)(v139 + 40), v140 == *(uint64_t **)(v139 + 48)))
                v141 = 0;
              else
                v141 = *v140;
              if (*(_DWORD *)(v141 + 156) != 1)
                break;
              v142 = *(_QWORD *)(v141 + 240);
              result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v138 + 32))(v138, 0, 0);
              v143 = *(_QWORD *)(result + 104);
              if (!v143 || (v144 = *(uint64_t **)(v143 + 40), v144 == *(uint64_t **)(v143 + 48)))
                v145 = 0;
              else
                v145 = *v144;
              if (*(_DWORD *)(v145 + 156) != 1)
                break;
              if (v142 < *(_QWORD *)(v145 + 240))
              {
                v146 = *v136;
                v147 = v135;
                while (1)
                {
                  *(uint64_t *)((char *)v8 + v147 + 8) = *(uint64_t *)((char *)v8 + v147);
                  if (!v147)
                    break;
                  v148 = *(uint64_t *)((char *)v8 + v147 - 8);
                  v149 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v146 + 32))(v146, 0, 0)+ 104);
                  if (!v149 || (v150 = *(uint64_t **)(v149 + 40), v150 == *(uint64_t **)(v149 + 48)))
                    v151 = 0;
                  else
                    v151 = *v150;
                  if (*(_DWORD *)(v151 + 156) != 1)
                    goto LABEL_357;
                  v152 = *(_QWORD *)(v151 + 240);
                  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v148 + 32))(v148, 0, 0);
                  v153 = *(_QWORD *)(result + 104);
                  if (!v153 || (v154 = *(uint64_t **)(v153 + 40), v154 == *(uint64_t **)(v153 + 48)))
                    v155 = 0;
                  else
                    v155 = *v154;
                  if (*(_DWORD *)(v155 + 156) != 1)
                    goto LABEL_357;
                  v147 -= 8;
                  if (v152 >= *(_QWORD *)(v155 + 240))
                  {
                    v156 = (uint64_t *)((char *)v8 + v147 + 8);
                    goto LABEL_214;
                  }
                }
                v156 = v8;
LABEL_214:
                *v156 = v146;
              }
              v132 = v136 + 1;
              v135 += 8;
              if (v136 + 1 == a2)
                return result;
            }
          }
          else
          {
            if ((v134 & 1) != 0)
              return result;
            while (1)
            {
              v239 = *v6;
              v238 = v6[1];
              v6 = v132;
              v240 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v238 + 32))(v238, 0, 0)+ 104);
              if (!v240 || (v241 = *(uint64_t **)(v240 + 40), v241 == *(uint64_t **)(v240 + 48)))
                v242 = 0;
              else
                v242 = *v241;
              if (*(_DWORD *)(v242 + 156) != 1)
                break;
              v243 = *(_QWORD *)(v242 + 240);
              result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v239 + 32))(v239, 0, 0);
              v244 = *(_QWORD *)(result + 104);
              if (!v244 || (v245 = *(uint64_t **)(v244 + 40), v245 == *(uint64_t **)(v244 + 48)))
                v246 = 0;
              else
                v246 = *v245;
              if (*(_DWORD *)(v246 + 156) != 1)
                break;
              if (v243 < *(_QWORD *)(v246 + 240))
              {
                v247 = *v6;
                v248 = v6;
                do
                {
                  v249 = *(v248 - 2);
                  *v248 = *(v248 - 1);
                  v250 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v247 + 32))(v247, 0, 0)+ 104);
                  if (!v250 || (v251 = *(uint64_t **)(v250 + 40), v251 == *(uint64_t **)(v250 + 48)))
                    v252 = 0;
                  else
                    v252 = *v251;
                  if (*(_DWORD *)(v252 + 156) != 1)
                    goto LABEL_357;
                  v253 = *(_QWORD *)(v252 + 240);
                  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v249 + 32))(v249, 0, 0);
                  v254 = *(_QWORD *)(result + 104);
                  if (!v254 || (v255 = *(uint64_t **)(v254 + 40), v255 == *(uint64_t **)(v254 + 48)))
                    v256 = 0;
                  else
                    v256 = *v255;
                  if (*(_DWORD *)(v256 + 156) != 1)
                    goto LABEL_357;
                  --v248;
                }
                while (v253 < *(_QWORD *)(v256 + 240));
                *v248 = v247;
              }
              v132 = v6 + 1;
              if (v6 + 1 == a2)
                return result;
            }
          }
LABEL_357:
          ZinAssertImpl("Invalid symbol type", v257);
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          if ((unint64_t)v9 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v12, v8, v7);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v8, v12, v7);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v8 + 1, v12 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v8 + 2, &v8[v11 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v12 - 1, v12, &v8[v11 + 1]);
            v13 = *v8;
            *v8 = *v12;
            *v12 = v13;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *v8;
            v15 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*(v8 - 1) + 32))(*(v8 - 1), 0, 0)+ 104);
            if (!v15 || (v16 = *(uint64_t **)(v15 + 40), v16 == *(uint64_t **)(v15 + 48)))
              v17 = 0;
            else
              v17 = *v16;
            if (*(_DWORD *)(v17 + 156) != 1)
              goto LABEL_357;
            v18 = *(_QWORD *)(v17 + 240);
            v19 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0, 0)+ 104);
            if (!v19 || (v20 = *(uint64_t **)(v19 + 40), v20 == *(uint64_t **)(v19 + 48)))
              v21 = 0;
            else
              v21 = *v20;
            if (*(_DWORD *)(v21 + 156) != 1)
              goto LABEL_357;
            if (v18 >= *(_QWORD *)(v21 + 240))
            {
              v70 = *v8;
              v71 = *v7;
              v72 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v8 + 32))(*v8, 0, 0)+ 104);
              if (!v72 || (v73 = *(uint64_t **)(v72 + 40), v73 == *(uint64_t **)(v72 + 48)))
                v74 = 0;
              else
                v74 = *v73;
              if (*(_DWORD *)(v74 + 156) != 1)
                goto LABEL_357;
              v75 = *(_QWORD *)(v74 + 240);
              result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v71 + 32))(v71, 0, 0);
              v76 = *(_QWORD *)(result + 104);
              if (!v76 || (v77 = *(uint64_t **)(v76 + 40), v77 == *(uint64_t **)(v76 + 48)))
                v78 = 0;
              else
                v78 = *v77;
              if (*(_DWORD *)(v78 + 156) != 1)
                goto LABEL_357;
              if (v75 < *(_QWORD *)(v78 + 240))
              {
                while (1)
                {
                  v80 = v8[1];
                  ++v8;
                  v79 = v80;
                  v81 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0, 0)+ 104);
                  if (!v81 || (v82 = *(uint64_t **)(v81 + 40), v82 == *(uint64_t **)(v81 + 48)))
                    v83 = 0;
                  else
                    v83 = *v82;
                  if (*(_DWORD *)(v83 + 156) != 1)
                    goto LABEL_357;
                  v84 = *(_QWORD *)(v83 + 240);
                  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v79 + 32))(v79, 0, 0);
                  v85 = *(_QWORD *)(result + 104);
                  if (!v85 || (v86 = *(uint64_t **)(v85 + 40), v86 == *(uint64_t **)(v85 + 48)))
                    v87 = 0;
                  else
                    v87 = *v86;
                  if (*(_DWORD *)(v87 + 156) != 1)
                    goto LABEL_357;
                  if (v84 < *(_QWORD *)(v87 + 240))
                    goto LABEL_129;
                }
              }
              v88 = v8 + 1;
              do
              {
                v8 = v88;
                if (v88 >= a2)
                  break;
                v89 = *v88;
                v90 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0, 0)+ 104);
                if (!v90 || (v91 = *(uint64_t **)(v90 + 40), v91 == *(uint64_t **)(v90 + 48)))
                  v92 = 0;
                else
                  v92 = *v91;
                if (*(_DWORD *)(v92 + 156) != 1)
                  goto LABEL_357;
                v93 = *(_QWORD *)(v92 + 240);
                result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v89 + 32))(v89, 0, 0);
                v94 = *(_QWORD *)(result + 104);
                if (!v94 || (v95 = *(uint64_t **)(v94 + 40), v95 == *(uint64_t **)(v94 + 48)))
                  v96 = 0;
                else
                  v96 = *v95;
                if (*(_DWORD *)(v96 + 156) != 1)
                  goto LABEL_357;
                v97 = *(_QWORD *)(v96 + 240);
                v88 = v8 + 1;
              }
              while (v93 >= v97);
LABEL_129:
              v98 = a2;
              if (v8 < a2)
              {
                v98 = a2;
                do
                {
                  v100 = *--v98;
                  v99 = v100;
                  v101 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0, 0)+ 104);
                  if (!v101 || (v102 = *(uint64_t **)(v101 + 40), v102 == *(uint64_t **)(v101 + 48)))
                    v103 = 0;
                  else
                    v103 = *v102;
                  if (*(_DWORD *)(v103 + 156) != 1)
                    goto LABEL_357;
                  v104 = *(_QWORD *)(v103 + 240);
                  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v99 + 32))(v99, 0, 0);
                  v105 = *(_QWORD *)(result + 104);
                  if (!v105 || (v106 = *(uint64_t **)(v105 + 40), v106 == *(uint64_t **)(v105 + 48)))
                    v107 = 0;
                  else
                    v107 = *v106;
                  if (*(_DWORD *)(v107 + 156) != 1)
                    goto LABEL_357;
                }
                while (v104 < *(_QWORD *)(v107 + 240));
              }
LABEL_166:
              if (v8 < v98)
              {
                v108 = *v8;
                *v8 = *v98;
                *v98 = v108;
                do
                {
                  v110 = v8[1];
                  ++v8;
                  v109 = v110;
                  v111 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0, 0)+ 104);
                  if (!v111 || (v112 = *(uint64_t **)(v111 + 40), v112 == *(uint64_t **)(v111 + 48)))
                    v113 = 0;
                  else
                    v113 = *v112;
                  if (*(_DWORD *)(v113 + 156) == 1)
                  {
                    v114 = *(_QWORD *)(v113 + 240);
                    v115 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v109 + 32))(v109, 0, 0)+ 104);
                    if (!v115 || (v116 = *(uint64_t **)(v115 + 40), v116 == *(uint64_t **)(v115 + 48)))
                      v117 = 0;
                    else
                      v117 = *v116;
                    if (*(_DWORD *)(v117 + 156) == 1)
                      continue;
                  }
                  goto LABEL_357;
                }
                while (v114 >= *(_QWORD *)(v117 + 240));
                while (1)
                {
                  v119 = *--v98;
                  v118 = v119;
                  v120 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v70 + 32))(v70, 0, 0)+ 104);
                  if (!v120 || (v121 = *(uint64_t **)(v120 + 40), v121 == *(uint64_t **)(v120 + 48)))
                    v122 = 0;
                  else
                    v122 = *v121;
                  if (*(_DWORD *)(v122 + 156) != 1)
                    goto LABEL_357;
                  v123 = *(_QWORD *)(v122 + 240);
                  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v118 + 32))(v118, 0, 0);
                  v124 = *(_QWORD *)(result + 104);
                  if (!v124 || (v125 = *(uint64_t **)(v124 + 40), v125 == *(uint64_t **)(v124 + 48)))
                    v126 = 0;
                  else
                    v126 = *v125;
                  if (*(_DWORD *)(v126 + 156) != 1)
                    goto LABEL_357;
                  if (v123 >= *(_QWORD *)(v126 + 240))
                    goto LABEL_166;
                }
              }
              v127 = v8 - 1;
              if (v8 - 1 != v6)
                *v6 = *v127;
              a4 = 0;
              *v127 = v70;
              continue;
            }
          }
          v22 = 0;
          v23 = *v8;
          do
          {
            v24 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8[v22 + 1] + 32))(v8[v22 + 1], 0, 0)+ 104);
            if (!v24 || (v25 = *(uint64_t **)(v24 + 40), v25 == *(uint64_t **)(v24 + 48)))
              v26 = 0;
            else
              v26 = *v25;
            if (*(_DWORD *)(v26 + 156) != 1)
              goto LABEL_357;
            v27 = *(_QWORD *)(v26 + 240);
            v28 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0)+ 104);
            if (!v28 || (v29 = *(uint64_t **)(v28 + 40), v29 == *(uint64_t **)(v28 + 48)))
              v30 = 0;
            else
              v30 = *v29;
            if (*(_DWORD *)(v30 + 156) != 1)
              goto LABEL_357;
            ++v22;
          }
          while (v27 < *(_QWORD *)(v30 + 240));
          v31 = &v8[v22];
          v32 = a2;
          if (v22 != 1)
          {
            while (1)
            {
              v33 = *--v32;
              v34 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v33 + 32))(v33, 0, 0)+ 104);
              if (!v34 || (v35 = *(uint64_t **)(v34 + 40), v35 == *(uint64_t **)(v34 + 48)))
                v36 = 0;
              else
                v36 = *v35;
              if (*(_DWORD *)(v36 + 156) != 1)
                goto LABEL_357;
              v37 = *(_QWORD *)(v36 + 240);
              v38 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0)+ 104);
              if (!v38 || (v39 = *(uint64_t **)(v38 + 40), v39 == *(uint64_t **)(v38 + 48)))
                v40 = 0;
              else
                v40 = *v39;
              if (*(_DWORD *)(v40 + 156) != 1)
                goto LABEL_357;
              if (v37 < *(_QWORD *)(v40 + 240))
                goto LABEL_59;
            }
          }
          v32 = a2;
          while (v31 < v32)
          {
            v41 = *--v32;
            v42 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v41 + 32))(v41, 0, 0)+ 104);
            if (!v42 || (v43 = *(uint64_t **)(v42 + 40), v43 == *(uint64_t **)(v42 + 48)))
              v44 = 0;
            else
              v44 = *v43;
            if (*(_DWORD *)(v44 + 156) != 1)
              goto LABEL_357;
            v45 = *(_QWORD *)(v44 + 240);
            v46 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0)+ 104);
            if (!v46 || (v47 = *(uint64_t **)(v46 + 40), v47 == *(uint64_t **)(v46 + 48)))
              v48 = 0;
            else
              v48 = *v47;
            if (*(_DWORD *)(v48 + 156) != 1)
              goto LABEL_357;
            if (v45 < *(_QWORD *)(v48 + 240))
              break;
          }
LABEL_59:
          if (v31 >= v32)
          {
            v68 = v31 - 1;
          }
          else
          {
            v49 = v31;
            v50 = v32;
            do
            {
              v51 = *v49;
              *v49 = *v50;
              *v50 = v51;
              do
              {
                v52 = v49[1];
                ++v49;
                v53 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v52 + 32))(v52, 0, 0)+ 104);
                if (!v53 || (v54 = *(uint64_t **)(v53 + 40), v54 == *(uint64_t **)(v53 + 48)))
                  v55 = 0;
                else
                  v55 = *v54;
                if (*(_DWORD *)(v55 + 156) == 1)
                {
                  v56 = *(_QWORD *)(v55 + 240);
                  v57 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0)+ 104);
                  if (!v57 || (v58 = *(uint64_t **)(v57 + 40), v58 == *(uint64_t **)(v57 + 48)))
                    v59 = 0;
                  else
                    v59 = *v58;
                  if (*(_DWORD *)(v59 + 156) == 1)
                    continue;
                }
                goto LABEL_357;
              }
              while (v56 < *(_QWORD *)(v59 + 240));
              do
              {
                v60 = *--v50;
                v61 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v60 + 32))(v60, 0, 0)+ 104);
                if (!v61 || (v62 = *(uint64_t **)(v61 + 40), v62 == *(uint64_t **)(v61 + 48)))
                  v63 = 0;
                else
                  v63 = *v62;
                if (*(_DWORD *)(v63 + 156) == 1)
                {
                  v64 = *(_QWORD *)(v63 + 240);
                  v65 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 32))(v23, 0, 0)+ 104);
                  if (!v65 || (v66 = *(uint64_t **)(v65 + 40), v66 == *(uint64_t **)(v65 + 48)))
                    v67 = 0;
                  else
                    v67 = *v66;
                  if (*(_DWORD *)(v67 + 156) == 1)
                    continue;
                }
                goto LABEL_357;
              }
              while (v64 >= *(_QWORD *)(v67 + 240));
            }
            while (v49 < v50);
            v68 = v49 - 1;
          }
          if (v68 != v6)
            *v6 = *v68;
          *v68 = v23;
          if (v31 < v32)
          {
LABEL_92:
            result = std::__introsort<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,false>(v6, v68, a3, a4 & 1);
            a4 = 0;
            v8 = v68 + 1;
            continue;
          }
          v69 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v6, v68);
          v8 = v68 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(v68 + 1, a2);
          if (!(_DWORD)result)
          {
            if (!v69)
              goto LABEL_92;
            continue;
          }
          a2 = v68;
          if (v69)
            return result;
          goto LABEL_2;
        }
        if (v8 != a2)
        {
          v257 = (char *)a2 - (char *)v8;
          v157 = (unint64_t)(v10 - 2) >> 1;
          v158 = v157;
          while (1)
          {
            v159 = v158;
            if (v157 >= v158)
            {
              v258 = v158;
              v160 = (2 * v158) | 1;
              v161 = &v6[v160];
              if (2 * v158 + 2 < v10)
              {
                v162 = v161[1];
                v163 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v161 + 32))(*v161, 0, 0)+ 104);
                if (!v163 || (v164 = *(uint64_t **)(v163 + 40), v164 == *(uint64_t **)(v163 + 48)))
                  v165 = 0;
                else
                  v165 = *v164;
                if (*(_DWORD *)(v165 + 156) != 1)
                  goto LABEL_357;
                v166 = *(_QWORD *)(v165 + 240);
                v167 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v162 + 32))(v162, 0, 0)+ 104);
                if (!v167 || (v168 = *(uint64_t **)(v167 + 40), v168 == *(uint64_t **)(v167 + 48)))
                  v169 = 0;
                else
                  v169 = *v168;
                if (*(_DWORD *)(v169 + 156) != 1)
                  goto LABEL_357;
                if (v166 < *(_QWORD *)(v169 + 240))
                {
                  ++v161;
                  v160 = 2 * v159 + 2;
                }
              }
              v170 = &v6[v159];
              v171 = *v170;
              v172 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v161 + 32))(*v161, 0, 0)+ 104);
              if (!v172 || (v173 = *(uint64_t **)(v172 + 40), v173 == *(uint64_t **)(v172 + 48)))
                v174 = 0;
              else
                v174 = *v173;
              if (*(_DWORD *)(v174 + 156) != 1)
                goto LABEL_357;
              v175 = *(_QWORD *)(v174 + 240);
              result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v171 + 32))(v171, 0, 0);
              v176 = *(_QWORD *)(result + 104);
              if (!v176 || (v177 = *(uint64_t **)(v176 + 40), v177 == *(uint64_t **)(v176 + 48)))
                v178 = 0;
              else
                v178 = *v177;
              if (*(_DWORD *)(v178 + 156) != 1)
                goto LABEL_357;
              if (v175 >= *(_QWORD *)(v178 + 240))
              {
                v179 = *v170;
                do
                {
                  v180 = v161;
                  *v170 = *v161;
                  if (v157 < v160)
                    break;
                  v181 = (2 * v160) | 1;
                  v161 = &v6[v181];
                  v182 = 2 * v160 + 2;
                  if (v182 >= v10)
                  {
                    v160 = (2 * v160) | 1;
                  }
                  else
                  {
                    v183 = v161[1];
                    v184 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v161 + 32))(*v161, 0, 0)+ 104);
                    if (!v184 || (v185 = *(uint64_t **)(v184 + 40), v185 == *(uint64_t **)(v184 + 48)))
                      v186 = 0;
                    else
                      v186 = *v185;
                    if (*(_DWORD *)(v186 + 156) != 1)
                      goto LABEL_357;
                    v259 = *(_QWORD *)(v186 + 240);
                    v187 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v183 + 32))(v183, 0, 0)+ 104);
                    if (!v187 || (v188 = *(uint64_t **)(v187 + 40), v188 == *(uint64_t **)(v187 + 48)))
                      v189 = 0;
                    else
                      v189 = *v188;
                    if (*(_DWORD *)(v189 + 156) != 1)
                      goto LABEL_357;
                    if (v259 >= *(_QWORD *)(v189 + 240))
                    {
                      v160 = v181;
                    }
                    else
                    {
                      ++v161;
                      v160 = v182;
                    }
                  }
                  v190 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v161 + 32))(*v161, 0, 0)+ 104);
                  if (!v190 || (v191 = *(uint64_t **)(v190 + 40), v191 == *(uint64_t **)(v190 + 48)))
                    v192 = 0;
                  else
                    v192 = *v191;
                  if (*(_DWORD *)(v192 + 156) != 1)
                    goto LABEL_357;
                  v193 = *(_QWORD *)(v192 + 240);
                  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v179 + 32))(v179, 0, 0);
                  v194 = *(_QWORD *)(result + 104);
                  if (!v194 || (v195 = *(uint64_t **)(v194 + 40), v195 == *(uint64_t **)(v194 + 48)))
                    v196 = 0;
                  else
                    v196 = *v195;
                  if (*(_DWORD *)(v196 + 156) != 1)
                    goto LABEL_357;
                  v170 = v180;
                }
                while (v193 >= *(_QWORD *)(v196 + 240));
                *v180 = v179;
                v159 = v258;
              }
            }
            v158 = v159 - 1;
            if (!v159)
            {
              v197 = v257 >> 3;
              while (1)
              {
                v198 = 0;
                v260 = *v6;
                v199 = v6;
                do
                {
                  v200 = &v199[v198 + 1];
                  v201 = (2 * v198) | 1;
                  v202 = 2 * v198 + 2;
                  if (v202 < v197)
                  {
                    v203 = v199[v198 + 2];
                    v204 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v200 + 32))(*v200, 0, 0)+ 104);
                    if (!v204 || (v205 = *(uint64_t **)(v204 + 40), v205 == *(uint64_t **)(v204 + 48)))
                      v206 = 0;
                    else
                      v206 = *v205;
                    if (*(_DWORD *)(v206 + 156) != 1)
                      goto LABEL_357;
                    v207 = *(_QWORD *)(v206 + 240);
                    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v203 + 32))(v203, 0, 0);
                    v208 = *(_QWORD *)(result + 104);
                    if (!v208 || (v209 = *(uint64_t **)(v208 + 40), v209 == *(uint64_t **)(v208 + 48)))
                      v210 = 0;
                    else
                      v210 = *v209;
                    if (*(_DWORD *)(v210 + 156) != 1)
                      goto LABEL_357;
                    if (v207 < *(_QWORD *)(v210 + 240))
                    {
                      ++v200;
                      v201 = v202;
                    }
                  }
                  *v199 = *v200;
                  v199 = v200;
                  v198 = v201;
                }
                while (v201 <= (uint64_t)((unint64_t)(v197 - 2) >> 1));
                v211 = a2 - 1;
                v133 = v200 == --a2;
                if (v133)
                {
                  *v200 = v260;
                }
                else
                {
                  *v200 = *v211;
                  *v211 = v260;
                  v212 = (char *)v200 - (char *)v6 + 8;
                  if (v212 >= 9)
                  {
                    v213 = (((unint64_t)v212 >> 3) - 2) >> 1;
                    v214 = &v6[v213];
                    v215 = *v200;
                    v216 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v214 + 32))(*v214, 0, 0)+ 104);
                    if (!v216 || (v217 = *(uint64_t **)(v216 + 40), v217 == *(uint64_t **)(v216 + 48)))
                      v218 = 0;
                    else
                      v218 = *v217;
                    if (*(_DWORD *)(v218 + 156) != 1)
                      goto LABEL_357;
                    v219 = *(_QWORD *)(v218 + 240);
                    result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v215 + 32))(v215, 0, 0);
                    v220 = *(_QWORD *)(result + 104);
                    if (!v220 || (v221 = *(uint64_t **)(v220 + 40), v221 == *(uint64_t **)(v220 + 48)))
                      v222 = 0;
                    else
                      v222 = *v221;
                    if (*(_DWORD *)(v222 + 156) != 1)
                      goto LABEL_357;
                    if (v219 < *(_QWORD *)(v222 + 240))
                    {
                      v223 = *v200;
                      do
                      {
                        v224 = v214;
                        *v200 = *v214;
                        if (!v213)
                          break;
                        v213 = (v213 - 1) >> 1;
                        v214 = &v6[v213];
                        v225 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v214 + 32))(*v214, 0, 0)+ 104);
                        if (!v225 || (v226 = *(uint64_t **)(v225 + 40), v226 == *(uint64_t **)(v225 + 48)))
                          v227 = 0;
                        else
                          v227 = *v226;
                        if (*(_DWORD *)(v227 + 156) != 1)
                          goto LABEL_357;
                        v228 = *(_QWORD *)(v227 + 240);
                        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v223 + 32))(v223, 0, 0);
                        v229 = *(_QWORD *)(result + 104);
                        if (!v229 || (v230 = *(uint64_t **)(v229 + 40), v230 == *(uint64_t **)(v229 + 48)))
                          v231 = 0;
                        else
                          v231 = *v230;
                        if (*(_DWORD *)(v231 + 156) != 1)
                          goto LABEL_357;
                        v200 = v224;
                      }
                      while (v228 < *(_QWORD *)(v231 + 240));
                      *v224 = v223;
                    }
                  }
                }
                if (v197-- <= 2)
                  return result;
              }
            }
          }
        }
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a2, a3, a4);
  v10 = *a4;
  v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a5 + 32))(*a5, 0, 0) + 104);
  if (!v11 || (v12 = *(uint64_t **)(v11 + 40), v12 == *(uint64_t **)(v11 + 48)))
    v13 = 0;
  else
    v13 = *v12;
  if (*(_DWORD *)(v13 + 156) != 1)
    goto LABEL_47;
  v14 = *(_QWORD *)(v13 + 240);
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 32))(v10, 0, 0);
  v16 = *(_QWORD *)(result + 104);
  if (!v16 || (v17 = *(uint64_t **)(v16 + 40), v17 == *(uint64_t **)(v16 + 48)))
    v18 = 0;
  else
    v18 = *v17;
  if (*(_DWORD *)(v18 + 156) != 1)
    goto LABEL_47;
  if (v14 >= *(_QWORD *)(v18 + 240))
    return result;
  v19 = *a4;
  *a4 = *a5;
  *a5 = v19;
  v20 = *a3;
  v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a4 + 32))(*a4, 0, 0) + 104);
  if (!v21 || (v22 = *(uint64_t **)(v21 + 40), v22 == *(uint64_t **)(v21 + 48)))
    v23 = 0;
  else
    v23 = *v22;
  if (*(_DWORD *)(v23 + 156) != 1)
    goto LABEL_47;
  v24 = *(_QWORD *)(v23 + 240);
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0, 0);
  v25 = *(_QWORD *)(result + 104);
  if (!v25 || (v26 = *(uint64_t **)(v25 + 40), v26 == *(uint64_t **)(v25 + 48)))
    v27 = 0;
  else
    v27 = *v26;
  if (*(_DWORD *)(v27 + 156) != 1)
    goto LABEL_47;
  if (v24 >= *(_QWORD *)(v27 + 240))
    return result;
  v28 = *a3;
  *a3 = *a4;
  *a4 = v28;
  v29 = *a2;
  v30 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a3 + 32))(*a3, 0, 0) + 104);
  if (!v30 || (v31 = *(uint64_t **)(v30 + 40), v31 == *(uint64_t **)(v30 + 48)))
    v32 = 0;
  else
    v32 = *v31;
  if (*(_DWORD *)(v32 + 156) != 1)
    goto LABEL_47;
  v33 = *(_QWORD *)(v32 + 240);
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 32))(v29, 0, 0);
  v34 = *(_QWORD *)(result + 104);
  if (!v34 || (v35 = *(uint64_t **)(v34 + 40), v35 == *(uint64_t **)(v34 + 48)))
    v36 = 0;
  else
    v36 = *v35;
  if (*(_DWORD *)(v36 + 156) != 1)
    goto LABEL_47;
  if (v33 >= *(_QWORD *)(v36 + 240))
    return result;
  v37 = *a2;
  *a2 = *a3;
  *a3 = v37;
  v38 = *a1;
  v39 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, 0, 0) + 104);
  if (!v39 || (v40 = *(uint64_t **)(v39 + 40), v40 == *(uint64_t **)(v39 + 48)))
    v41 = 0;
  else
    v41 = *v40;
  if (*(_DWORD *)(v41 + 156) != 1
    || ((v42 = *(_QWORD *)(v41 + 240),
         result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0, 0),
         (v43 = *(_QWORD *)(result + 104)) == 0)
     || (v44 = *(uint64_t **)(v43 + 40), v44 == *(uint64_t **)(v43 + 48))
      ? (v45 = 0)
      : (v45 = *v44),
        *(_DWORD *)(v45 + 156) != 1))
  {
LABEL_47:
    ZinAssertImpl("Invalid symbol type");
  }
  if (v42 < *(_QWORD *)(v45 + 240))
  {
    v46 = *a1;
    *a1 = *a2;
    *a2 = v46;
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *a1;
  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, 0, 0) + 104);
  if (!v7 || (v8 = *(uint64_t **)(v7 + 40), v8 == *(uint64_t **)(v7 + 48)))
    v9 = 0;
  else
    v9 = *v8;
  if (*(_DWORD *)(v9 + 156) != 1)
    goto LABEL_60;
  v10 = *(_QWORD *)(v9 + 240);
  v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0) + 104);
  if (!v11 || (v12 = *(uint64_t **)(v11 + 40), v12 == *(uint64_t **)(v11 + 48)))
    v13 = 0;
  else
    v13 = *v12;
  if (*(_DWORD *)(v13 + 156) != 1)
    goto LABEL_60;
  v14 = *(_QWORD *)(v13 + 240);
  v15 = *a2;
  v16 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a3 + 32))(*a3, 0, 0) + 104);
  if (v10 < v14)
  {
    if (v16)
    {
      v17 = *(uint64_t **)(v16 + 40);
      if (v17 == *(uint64_t **)(v16 + 48))
        v16 = 0;
      else
        v16 = *v17;
    }
    if (*(_DWORD *)(v16 + 156) == 1)
    {
      v19 = *(_QWORD *)(v16 + 240);
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
      v21 = *(_QWORD *)(result + 104);
      if (!v21 || (v22 = *(uint64_t **)(v21 + 40), v22 == *(uint64_t **)(v21 + 48)))
        v23 = 0;
      else
        v23 = *v22;
      if (*(_DWORD *)(v23 + 156) == 1)
      {
        v24 = *a1;
        if (v19 < *(_QWORD *)(v23 + 240))
        {
          *a1 = *a3;
          *a3 = v24;
          return result;
        }
        *a1 = *a2;
        *a2 = v24;
        v25 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a3 + 32))(*a3, 0, 0)
                        + 104);
        if (!v25 || (v26 = *(uint64_t **)(v25 + 40), v26 == *(uint64_t **)(v25 + 48)))
          v27 = 0;
        else
          v27 = *v26;
        if (*(_DWORD *)(v27 + 156) == 1)
        {
          v28 = *(_QWORD *)(v27 + 240);
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0, 0);
          v29 = *(_QWORD *)(result + 104);
          if (!v29 || (v30 = *(uint64_t **)(v29 + 40), v30 == *(uint64_t **)(v29 + 48)))
            v31 = 0;
          else
            v31 = *v30;
          if (*(_DWORD *)(v31 + 156) == 1)
          {
            if (v28 < *(_QWORD *)(v31 + 240))
            {
              v32 = *a2;
              *a2 = *a3;
              *a3 = v32;
            }
            return result;
          }
        }
      }
    }
LABEL_60:
    ZinAssertImpl("Invalid symbol type");
  }
  if (v16)
  {
    v18 = *(uint64_t **)(v16 + 40);
    if (v18 == *(uint64_t **)(v16 + 48))
      v16 = 0;
    else
      v16 = *v18;
  }
  if (*(_DWORD *)(v16 + 156) != 1)
    goto LABEL_60;
  v33 = *(_QWORD *)(v16 + 240);
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0, 0);
  v34 = *(_QWORD *)(result + 104);
  if (!v34 || (v35 = *(uint64_t **)(v34 + 40), v35 == *(uint64_t **)(v34 + 48)))
    v36 = 0;
  else
    v36 = *v35;
  if (*(_DWORD *)(v36 + 156) != 1)
    goto LABEL_60;
  if (v33 >= *(_QWORD *)(v36 + 240))
    return result;
  v37 = *a2;
  *a2 = *a3;
  *a3 = v37;
  v38 = *a1;
  v39 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, 0, 0) + 104);
  if (!v39 || (v40 = *(uint64_t **)(v39 + 40), v40 == *(uint64_t **)(v39 + 48)))
    v41 = 0;
  else
    v41 = *v40;
  if (*(_DWORD *)(v41 + 156) != 1)
    goto LABEL_60;
  v42 = *(_QWORD *)(v41 + 240);
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v38 + 32))(v38, 0, 0);
  v43 = *(_QWORD *)(result + 104);
  if (!v43 || (v44 = *(uint64_t **)(v43 + 40), v44 == *(uint64_t **)(v43 + 48)))
    v45 = 0;
  else
    v45 = *v44;
  if (*(_DWORD *)(v45 + 156) != 1)
    goto LABEL_60;
  if (v42 < *(_QWORD *)(v45 + 240))
  {
    v46 = *a1;
    *a1 = *a2;
    *a2 = v46;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*(a2 - 1) + 32))(*(a2 - 1), 0, 0)+ 104);
      if (!v7 || (v8 = *(uint64_t **)(v7 + 40), v8 == *(uint64_t **)(v7 + 48)))
        v9 = 0;
      else
        v9 = *v8;
      if (*(_DWORD *)(v9 + 156) != 1)
        goto LABEL_50;
      v33 = *(_QWORD *)(v9 + 240);
      v34 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0, 0) + 104);
      if (!v34 || (v35 = *(uint64_t **)(v34 + 40), v35 == *(uint64_t **)(v34 + 48)))
        v36 = 0;
      else
        v36 = *v35;
      if (*(_DWORD *)(v36 + 156) != 1)
        goto LABEL_50;
      if (v33 < *(_QWORD *)(v36 + 240))
      {
        v37 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v37;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a1 + 1, a1 + 2);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *v10;
    v15 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v11 + 32))(*v11, 0, 0) + 104);
    if (!v15 || (v16 = *(uint64_t **)(v15 + 40), v16 == *(uint64_t **)(v15 + 48)))
      v17 = 0;
    else
      v17 = *v16;
    if (*(_DWORD *)(v17 + 156) != 1
      || ((v18 = *(_QWORD *)(v17 + 240),
           (v19 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 32))(v14, 0, 0)+ 104)) == 0)|| (v20 = *(uint64_t **)(v19 + 40), v20 == *(uint64_t **)(v19 + 48))? (v21 = 0): (v21 = *v20), *(_DWORD *)(v21 + 156) != 1))
    {
LABEL_50:
      ZinAssertImpl("Invalid symbol type");
    }
    if (v18 < *(_QWORD *)(v21 + 240))
    {
      v22 = *v11;
      v23 = v12;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v23 + 24) = *(uint64_t *)((char *)a1 + v23 + 16);
        if (v23 == -16)
          break;
        v24 = *(uint64_t *)((char *)a1 + v23 + 8);
        v25 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 32))(v22, 0, 0)
                        + 104);
        if (!v25 || (v26 = *(uint64_t **)(v25 + 40), v26 == *(uint64_t **)(v25 + 48)))
          v27 = 0;
        else
          v27 = *v26;
        if (*(_DWORD *)(v27 + 156) != 1)
          goto LABEL_50;
        v28 = *(_QWORD *)(v27 + 240);
        v29 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 32))(v24, 0, 0)
                        + 104);
        if (!v29 || (v30 = *(uint64_t **)(v29 + 40), v30 == *(uint64_t **)(v29 + 48)))
          v31 = 0;
        else
          v31 = *v30;
        if (*(_DWORD *)(v31 + 156) != 1)
          goto LABEL_50;
        v23 -= 8;
        if (v28 >= *(_QWORD *)(v31 + 240))
        {
          v32 = (uint64_t *)((char *)a1 + v23 + 24);
          goto LABEL_33;
        }
      }
      v32 = a1;
LABEL_33:
      *v32 = v22;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ZinMirSetZeroPad::Run(std::vector<ZinIrOpLayer *> const&,ZinIrHalParameters const&)::$_0 &,ZinANELayer const**>(a1, a2, a3);
  v8 = *a3;
  v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a4 + 32))(*a4, 0, 0) + 104);
  if (!v9 || (v10 = *(uint64_t **)(v9 + 40), v10 == *(uint64_t **)(v9 + 48)))
    v11 = 0;
  else
    v11 = *v10;
  if (*(_DWORD *)(v11 + 156) != 1)
    goto LABEL_36;
  v12 = *(_QWORD *)(v11 + 240);
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, 0, 0);
  v14 = *(_QWORD *)(result + 104);
  if (!v14 || (v15 = *(uint64_t **)(v14 + 40), v15 == *(uint64_t **)(v14 + 48)))
    v16 = 0;
  else
    v16 = *v15;
  if (*(_DWORD *)(v16 + 156) != 1)
    goto LABEL_36;
  if (v12 >= *(_QWORD *)(v16 + 240))
    return result;
  v17 = *a3;
  *a3 = *a4;
  *a4 = v17;
  v18 = *a2;
  v19 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a3 + 32))(*a3, 0, 0) + 104);
  if (!v19 || (v20 = *(uint64_t **)(v19 + 40), v20 == *(uint64_t **)(v19 + 48)))
    v21 = 0;
  else
    v21 = *v20;
  if (*(_DWORD *)(v21 + 156) != 1)
    goto LABEL_36;
  v22 = *(_QWORD *)(v21 + 240);
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 32))(v18, 0, 0);
  v23 = *(_QWORD *)(result + 104);
  if (!v23 || (v24 = *(uint64_t **)(v23 + 40), v24 == *(uint64_t **)(v23 + 48)))
    v25 = 0;
  else
    v25 = *v24;
  if (*(_DWORD *)(v25 + 156) != 1)
    goto LABEL_36;
  if (v22 >= *(_QWORD *)(v25 + 240))
    return result;
  v26 = *a2;
  *a2 = *a3;
  *a3 = v26;
  v27 = *a1;
  v28 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a2 + 32))(*a2, 0, 0) + 104);
  if (!v28 || (v29 = *(uint64_t **)(v28 + 40), v29 == *(uint64_t **)(v28 + 48)))
    v30 = 0;
  else
    v30 = *v29;
  if (*(_DWORD *)(v30 + 156) != 1
    || ((v31 = *(_QWORD *)(v30 + 240),
         result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 32))(v27, 0, 0),
         (v32 = *(_QWORD *)(result + 104)) == 0)
     || (v33 = *(uint64_t **)(v32 + 40), v33 == *(uint64_t **)(v32 + 48))
      ? (v34 = 0)
      : (v34 = *v33),
        *(_DWORD *)(v34 + 156) != 1))
  {
LABEL_36:
    ZinAssertImpl("Invalid symbol type");
  }
  if (v31 < *(_QWORD *)(v34 + 240))
  {
    v35 = *a1;
    *a1 = *a2;
    *a2 = v35;
  }
  return result;
}

BOOL ZinCodegen::SetSecondarySourceDMA<17u>(ZinIrTensor *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, char a8, char a9, char a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t BarIdFromDynamicOffsetInfoOrSection;
  int v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  _BOOL8 result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int IsCompressed;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v86;
  __int128 __p;
  uint64_t v88;
  int v89;
  uint64_t v90;

  v90 = a2;
  v11 = *(_QWORD *)(a3 + 96 * a4 + 752);
  if (*(_DWORD *)(v11 + 156) != 1)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinCodegen::SetResultDMA<7u>(result, v24, v25, v26, v27, v28, v29, v30);
    return 0;
  }
  BarIdFromDynamicOffsetInfoOrSection = ZinIrSymbol::GetBarIdFromDynamicOffsetInfoOrSection((ZinIrSymbol *)v11);
  v19 = *(_DWORD *)(v11 + 208);
  ZinAneTd<17u>::SetL2Src2DmaFormat(a2, v19);
  if (ZinIrSymbol::GetMemType((ZinIrSymbol *)v11)
    && ZinIrSymbol::GetMemType((ZinIrSymbol *)v11) != 1)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinCodegen::SetPrimarySourceDMA<7u>(result, v38, v39, v40, v41, v42, v43, v44);
    return 0;
  }
  if (*(_DWORD *)(v11 + 156) != 1)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    ZinCodegen::SetPrimarySourceDMA<7u>(result, v31, v32, v33, v34, v35, v36, v37);
    return 0;
  }
  if (ZinIrSection::HasValidBarId(*(ZinIrSection **)(v11 + 8)))
  {
    ZinAneRelocInfo::ZinAneRelocInfo(&v86, v11 + 160, 4938, BarIdFromDynamicOffsetInfoOrSection, 1, 1, 0, 0);
    v20 = *(_QWORD *)(a2 + 1392);
    if (v20 >= *(_QWORD *)(a2 + 1400))
    {
      v52 = std::vector<ZinAneRelocInfo const>::__push_back_slow_path<ZinAneRelocInfo const>((uint64_t *)(a2 + 1384), (uint64_t)&v86);
    }
    else
    {
      *(_WORD *)v20 = v86;
      v21 = (std::string *)(v20 + 8);
      if (SHIBYTE(v88) < 0)
      {
        std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v22 = __p;
        *(_QWORD *)(v20 + 24) = v88;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      *(_DWORD *)(v20 + 32) = v89;
      v52 = v20 + 40;
      *(_QWORD *)(a2 + 1392) = v20 + 40;
    }
    *(_QWORD *)(a2 + 1392) = v52;
    if (SHIBYTE(v88) < 0)
      operator delete((void *)__p);
    *(_DWORD *)(a2 + 608) = *(_DWORD *)(a2 + 608) & 0xFFFFFF0F | (16
                                                                * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 1, *(_DWORD *)(a3 + 1420)) & 0xF));
    *(_DWORD *)(a2 + 616) = *(_DWORD *)(a2 + 616) & 0xFFFFFFF0 | ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 2, *(_DWORD *)(a3 + 1424)) & 0xF;
    *(_DWORD *)(a2 + 616) = *(_DWORD *)(a2 + 616) & 0xFFFFFF0F | (16
                                                                * (ZinIrCacheHintTable::GetCacheHintRegisterValue(a5, 3, *(_DWORD *)(a3 + 1428)) & 0xF));
    switch(v19)
    {
      case 1:
        v53 = *(_DWORD *)(a2 + 712) & 0xFFFFCFFC | 0x1000;
        goto LABEL_41;
      case 2:
        v53 = *(_DWORD *)(a2 + 712) & 0xFFFFCFFC;
        goto LABEL_41;
      case 3:
        v54 = *(_DWORD *)(a2 + 712) & 0xFFFFCFCC;
        v55 = 8241;
        goto LABEL_40;
      case 4:
        v53 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC | 1;
        goto LABEL_41;
      case 5:
        v54 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC;
        v55 = 257;
        goto LABEL_40;
      case 6:
        v54 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC;
        v55 = 17;
        goto LABEL_40;
      case 7:
        v54 = *(_DWORD *)(a2 + 712) & 0xFFFFCECC;
        v55 = 273;
        goto LABEL_40;
      case 8:
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        ZinCodegen::SetSecondarySourceDMA<7u>(result, v56, v57, v58, v59, v60, v61, v62);
        return 0;
      case 9:
        v63 = *(_DWORD *)(a2 + 712) & 0xFFFFFECC | 0x131;
        *(_DWORD *)(a2 + 712) = v63;
        v64 = v63 & 0xFFFFCFFF;
        if (!a11 && !a10)
          goto LABEL_38;
        v53 = v64 | 0x1000;
        goto LABEL_41;
      case 10:
        v65 = *(_DWORD *)(a2 + 712) & 0xFFFFFECC | 0x131;
        *(_DWORD *)(a2 + 712) = v65;
        v64 = v65 & 0xFFFFCFFF;
        if (a11 || a10)
        {
          *(_DWORD *)(a2 + 712) = v64;
        }
        else
        {
LABEL_38:
          v53 = v64 | 0x2000;
LABEL_41:
          *(_DWORD *)(a2 + 712) = v53;
        }
        v66 = ZinTensorDescriptorDmaInterleave(v11 + 208);
        *(_DWORD *)(a2 + 712) = *(_DWORD *)(a2 + 712) & 0xF0FFFFFF | ((v66 & 0xF) << 24);
        result = CheckRegValueRange(v66, (unsigned int *)(*(_QWORD *)(a2 + 1416) + 632));
        if (!result)
          return result;
        v67 = *(_QWORD *)(a3 + 840);
        v68 = *(_QWORD *)(a3 + 832);
        v69 = *(_QWORD *)(a3 + 824);
        v70 = *(_QWORD *)(a3 + 816) / a6;
        *(_DWORD *)(a2 + 652) = *(_DWORD *)(a2 + 652) & 0x3F | ((_DWORD)v70 << 6);
        result = CheckRegValueRange(v70, (unsigned int *)(*(_QWORD *)(a2 + 1416) + 480));
        if (!result)
          return result;
        *(_DWORD *)(a2 + 656) = *(_DWORD *)(a2 + 656) & 0x3F | ((v69 / a6) << 6);
        result = CheckRegValueRange(v69 / a6, (unsigned int *)(*(_QWORD *)(a2 + 1416) + 488));
        if (!result)
          return result;
        *(_DWORD *)(a2 + 660) = *(_DWORD *)(a2 + 660) & 0x3F | ((v68 / a6) << 6);
        result = CheckRegValueRange(v68 / a6, (unsigned int *)(*(_QWORD *)(a2 + 1416) + 496));
        if (!result)
          return result;
        *(_DWORD *)(a2 + 664) = *(_DWORD *)(a2 + 664) & 0x3F | ((v67 / a6) << 6);
        result = CheckRegValueRange(v67 / a6, (unsigned int *)(*(_QWORD *)(a2 + 1416) + 504));
        if (!result)
          return result;
        v71 = *(_QWORD *)(a3 + 848);
        ZinCodegen::SetDmaWrap<17u>((uint64_t *)a2, v71);
        ZinIrSymbol::GetWrapInfo(v71, &v86);
        if (BYTE8(__p))
          ZinAneTd<17u>::SetTileDmaSrc2WrapCfg(a2, v86);
        if ((a8 & 1) != 0)
          goto LABEL_53;
        *(_DWORD *)(a2 + 608) |= 1u;
        if ((a9 & 1) != 0)
          goto LABEL_53;
        *(_DWORD *)(a2 + 944) = *(_DWORD *)(a2 + 944) & 0xFFFFF0FF | ((v66 & 0xF) << 8);
        result = CheckRegValueRange(v66, (unsigned int *)(*(_QWORD *)(a2 + 1416) + 632));
        if (!result)
          return result;
        ZinAneTd<17u>::SetTileDmaSrc2CropOffset(a2, *(_DWORD *)(v11 + 240), *(_DWORD *)(v11 + 232));
LABEL_53:
        if (!ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808)))
          return 1;
        v72 = (char *)ZinIrTensor::GetRootTensor(a1) + 48;
        v73 = *(_DWORD *)(a3 + 888);
        v74 = *(_DWORD *)(a3 + 892);
        v75 = *(_DWORD *)(v11 + 232);
        v76 = *(_DWORD *)(a3 + 896);
        IsCompressed = ZinMirDmaConfig::DramAccess::IsCompressed((ZinMirDmaConfig::DramAccess *)(a3 + 808));
        if (ZinCodegen::SetUniversalCompressionForSecondarySource<17u>((_QWORD *)a3, (uint64_t)v72, v73, v74, &v90, v76, IsCompressed, v75, a7))
        {
          ZinAneTd<17u>::SetL2Src2CfgForCompression(v90, v74);
          ZinAneTd<17u>::SetL2Src2OffsetYlsbsFromCropOffsetY(v90);
          return 1;
        }
        result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        ZinCodegen::SetSecondarySourceDMA<17u>(result, v78, v79, v80, v81, v82, v83, v84);
        break;
      case 11:
        v54 = *(_DWORD *)(a2 + 712) & 0xFFFFFFCF;
        v55 = 12547;
LABEL_40:
        v53 = v54 | v55;
        goto LABEL_41;
      default:
        return 0;
    }
    return 0;
  }
  result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (result)
  {
    ZinCodegen::SetUniversalCompressionForSecondarySource<7u>(result, v45, v46, v47, v48, v49, v50, v51);
    return 0;
  }
  return result;
}

void sub_207010A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v18 + 1392) = v17;
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ZinCodegen::SetSecondarySourceDMA<17u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unable to set UC registers properly\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

__CFDictionary *ZinCreateInputViewUnit(const ZinIrInputViewUnitInfo *a1)
{
  __CFDictionary *Unit;
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  const __CFString *v8;

  Unit = ZinCreateUnit(a1);
  v3 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 80);
  CFDictionaryAddValue(Mutable, CFSTR("Offset"), v5);
  CFRelease(v5);
  v6 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 84);
  CFDictionaryAddValue(Mutable, CFSTR("Size"), v6);
  CFRelease(v6);
  v7 = CFNumberCreate(v3, kCFNumberSInt32Type, (char *)a1 + 88);
  CFDictionaryAddValue(Mutable, CFSTR("Step"), v7);
  CFRelease(v7);
  v8 = ZinIrCoordinateToCFString((_DWORD *)a1 + 23);
  CFDictionaryAddValue(Mutable, CFSTR("Dimension"), v8);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

uint64_t ZinMirDilatedConv::CreateDilatedConvKernel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, int32x2_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  int v10;
  int v11;
  __int32 v12;
  __int32 v13;
  __int128 v14;
  uint64_t v15;
  size_t v16;
  std::string *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  uint64_t result;
  std::string v31;
  void *v32[2];
  int64_t v33;
  std::string v34;
  void *__p[2];
  std::string::size_type v36;
  uint64_t v37;
  int64x2_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int16 v47;
  int v48;

  v10 = *(_DWORD *)(a2 + 72);
  v11 = *(_DWORD *)(a2 + 76);
  v12 = a4->i32[0];
  v13 = a4->i32[1];
  v38 = vdupq_n_s64(1uLL);
  v39 = 1;
  *(_QWORD *)&v14 = 0x100000001;
  *((_QWORD *)&v14 + 1) = 0x100000001;
  v40 = v14;
  v41 = 0x100000001;
  v42 = 0;
  v43 = 0;
  v45 = v14;
  v44 = 0;
  v46 = 1;
  v47 = 0;
  v48 = 0;
  ZinMirDilatedConv::ConvertDilatedConvInfoStruct(a2, a4, (uint64_t)&v38);
  v15 = *(_QWORD *)(a5 + 136);
  if (*(char *)(a5 + 47) >= 0)
    v16 = *(unsigned __int8 *)(a5 + 47);
  else
    v16 = *(_QWORD *)(a5 + 32);
  v17 = &v34;
  std::string::basic_string[abi:ne180100]((uint64_t)&v34, v16 + 1);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if (v16)
  {
    v20 = *(char **)(a5 + 24);
    v19 = (char *)(a5 + 24);
    v18 = v20;
    if (v19[23] >= 0)
      v21 = v19;
    else
      v21 = v18;
    memmove(v17, v21, v16);
  }
  *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 95;
  std::string::basic_string[abi:ne180100]<0>(&v31, "dil_conv_kernel");
  v22 = std::string::append(&v31, "_xfm", 4uLL);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v33 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)v32 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v24 = v32;
  else
    v24 = (void **)v32[0];
  if (v33 >= 0)
    v25 = HIBYTE(v33);
  else
    v25 = (std::string::size_type)v32[1];
  v26 = std::string::append(&v34, (const std::string::value_type *)v24, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v36 = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  ZinIrKernel::DilateKernel(v15, (__int128 *)__p, (__int128 *)v38.i8, v10 / v12, v11 / v13, a6, &v37);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  result = v37;
  if (v37 && *(_BYTE *)(a1 + 1149))
  {
    ZinIrKernel::SetMustCompressWeight(v37, *a3);
    result = v37;
  }
  *a7 = result;
  return result;
}

void sub_207010E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,ZinIrKernel *a36)
{
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a36, 0);
  _Unwind_Resume(a1);
}

int32x2_t ZinMirDilatedConv::ConvertDilatedConvInfoStruct(uint64_t a1, int32x2_t *a2, uint64_t a3)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int v13;
  int32x2_t result;

  v3 = *(_DWORD *)(a1 + 72) / a2->i32[0];
  v4 = *(_DWORD *)(a1 + 76) / a2->i32[1];
  v5 = *(_OWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  v8 = *(_OWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 96) = v6;
  *(_OWORD *)(a3 + 80) = v5;
  *(_OWORD *)(a3 + 32) = v9;
  *(_OWORD *)(a3 + 48) = v7;
  *(_QWORD *)(a3 + 72) = 0x100000001;
  v10 = (*(_QWORD *)(a1 + 8) - 1) * v4 + 1;
  *(_QWORD *)a3 = (*(_QWORD *)a1 - 1) * v3 + 1;
  *(_QWORD *)(a3 + 8) = v10;
  v11 = *a2;
  LODWORD(v6) = *a2;
  LODWORD(v10) = ((int)v6 - 1 + *(_DWORD *)(a1 + 52)) / (int)v6;
  *(_DWORD *)(a3 + 48) = ((int)v6 - 1 + *(_DWORD *)(a1 + 48)) / (int)v6;
  *(_DWORD *)(a3 + 52) = v10;
  LODWORD(v10) = v11.i32[1] - 1 + *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a3 + 56) = (v11.i32[1] - 1 + *(_DWORD *)(a1 + 56)) / v11.i32[1];
  *(_DWORD *)(a3 + 60) = (int)v10 / v11.i32[1];
  if (*(_BYTE *)(a1 + 97))
    ZinAssertImpl("Error: dilated deconvolution is not supported!");
  v12 = (int8x8_t)vceq_s32(v11, (int32x2_t)0x100000001);
  if (a2[1].i32[0] == 1)
    v13 = *(_DWORD *)(a1 + 32);
  else
    v13 = 1;
  result = vsub_s32((int32x2_t)vand_s8(*(int8x8_t *)(a1 + 24), v12), (int32x2_t)vmvn_s8(v12));
  *(int32x2_t *)(a3 + 24) = result;
  *(_DWORD *)(a3 + 32) = v13;
  return result;
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrPadUnitInfo *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_DWORD *)this = 44;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)this + 8), a2);
  *((_QWORD *)this + 1) = &off_24C01BAC0;
  v4 = *(_OWORD *)((char *)a2 + 156);
  v5 = *(_OWORD *)((char *)a2 + 172);
  v6 = *(_QWORD *)((char *)a2 + 188);
  *((_QWORD *)this + 26) = 0;
  *(_QWORD *)((char *)this + 196) = v6;
  *(_OWORD *)((char *)this + 180) = v5;
  *(_OWORD *)((char *)this + 164) = v4;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 26, *((const void **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3);
  *((_WORD *)this + 116) = *((_WORD *)a2 + 112);
  return this;
}

void sub_207010FFC(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo *v1;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v1);
  _Unwind_Resume(a1);
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrInputViewUnitInfo *a2)
{
  __int128 v4;
  int v5;

  *(_DWORD *)this = 17;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C021970;
  *(_OWORD *)((char *)this + 88) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_2070110D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrPoolUnitInfo *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  *(_DWORD *)this = 2;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = &unk_24C01CC78;
  v6 = *((_OWORD *)a2 + 5);
  *(_OWORD *)((char *)this + 104) = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)this + 88) = v6;
  v7 = *((_OWORD *)a2 + 7);
  v8 = *((_OWORD *)a2 + 8);
  v9 = *((_OWORD *)a2 + 9);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 40);
  *(_OWORD *)((char *)this + 152) = v9;
  *(_OWORD *)((char *)this + 136) = v8;
  *(_OWORD *)((char *)this + 120) = v7;
  return this;
}

void sub_2070111D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrSpaceToBatchUnitInfo *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)this = 34;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C023830;
  v6 = *((_QWORD *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 11) = v6;
  return this;
}

void sub_2070112BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, ZinIrBatchToSpaceUnitInfo *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)this = 35;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C0233F0;
  v6 = *((_QWORD *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 11) = v6;
  return this;
}

void sub_2070113A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this)
{
  int v2;
  void *v3;
  void **v4;
  void *v5;
  void *v6;

  v2 = *(_DWORD *)this;
  if (*(int *)this <= 33)
  {
    if (v2 == 1)
    {
      *((_QWORD *)this + 1) = off_24C01ED88;
      v5 = (void *)*((_QWORD *)this + 20);
      if (v5)
      {
        *((_QWORD *)this + 21) = v5;
        operator delete(v5);
      }
      v6 = (void *)*((_QWORD *)this + 17);
      if (v6)
      {
        *((_QWORD *)this + 18) = v6;
        operator delete(v6);
      }
      v4 = (void **)((char *)this + 8);
      goto LABEL_13;
    }
    if (v2 != 2 && v2 != 17)
      return;
LABEL_12:
    v4 = (void **)((char *)this + 8);
LABEL_13:
    ZinIrUnitInfo::~ZinIrUnitInfo(v4);
    return;
  }
  if (v2 == 34 || v2 == 35)
    goto LABEL_12;
  if (v2 == 44)
  {
    *((_QWORD *)this + 1) = &off_24C01BAC0;
    v3 = (void *)*((_QWORD *)this + 26);
    if (v3)
    {
      *((_QWORD *)this + 27) = v3;
      operator delete(v3);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)this + 8));
  }
}

ZinMirDilatedConv::DilatedConvDecomposedDesc *ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(ZinMirDilatedConv::DilatedConvDecomposedDesc *this, const ZinMirDilatedConv::DilatedConvDecomposedDesc *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 <= 33)
  {
    switch(v4)
    {
      case 1:
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)this + 8), (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)a2 + 8));
        *((_QWORD *)this + 1) = off_24C01CAD8;
        v9 = *(_OWORD *)((char *)a2 + 248);
        v10[16] = *(_OWORD *)((char *)a2 + 264);
        *(_OWORD *)((char *)this + 248) = v9;
        v11 = *(_OWORD *)((char *)a2 + 280);
        v12 = *(_OWORD *)((char *)a2 + 296);
        v13 = *(_OWORD *)((char *)a2 + 312);
        *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
        v10[18] = v12;
        v10[19] = v13;
        v10[17] = v11;
        break;
      case 2:
        *((_QWORD *)this + 1) = off_24C017CA0;
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
        }
        else
        {
          v15 = *((_OWORD *)a2 + 1);
          *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
          *((_OWORD *)this + 1) = v15;
        }
        v20 = *((_DWORD *)a2 + 10);
        *((_QWORD *)this + 6) = 0;
        *((_DWORD *)this + 10) = v20;
        *((_QWORD *)this + 7) = 0;
        *((_QWORD *)this + 8) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
        *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
        *((_QWORD *)this + 1) = &unk_24C01CC78;
        v21 = *(_OWORD *)((char *)a2 + 88);
        *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
        *(_OWORD *)((char *)this + 88) = v21;
        v22 = *(_OWORD *)((char *)a2 + 120);
        v23 = *(_OWORD *)((char *)a2 + 136);
        v24 = *(_OWORD *)((char *)a2 + 152);
        *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
        *(_OWORD *)((char *)this + 152) = v24;
        *(_OWORD *)((char *)this + 136) = v23;
        *(_OWORD *)((char *)this + 120) = v22;
        break;
      case 17:
        *((_QWORD *)this + 1) = off_24C017CA0;
        if (*((char *)a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
        }
        else
        {
          v5 = *((_OWORD *)a2 + 1);
          *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
          *((_OWORD *)this + 1) = v5;
        }
        v17 = *((_DWORD *)a2 + 10);
        *((_QWORD *)this + 6) = 0;
        *((_DWORD *)this + 10) = v17;
        *((_QWORD *)this + 7) = 0;
        *((_QWORD *)this + 8) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
        *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
        *((_QWORD *)this + 1) = off_24C021970;
        *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
        break;
    }
    return this;
  }
  switch(v4)
  {
    case '"':
      *((_QWORD *)this + 1) = off_24C017CA0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v14 = *((_OWORD *)a2 + 1);
        *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
        *((_OWORD *)this + 1) = v14;
      }
      v18 = *((_DWORD *)a2 + 10);
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = v18;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
      goto LABEL_26;
    case '#':
      *((_QWORD *)this + 1) = off_24C017CA0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v16 = *((_OWORD *)a2 + 1);
        *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
        *((_OWORD *)this + 1) = v16;
      }
      v25 = *((_DWORD *)a2 + 10);
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = v25;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
LABEL_26:
      *((_QWORD *)this + 1) = v19 + 16;
      v26 = *((_QWORD *)a2 + 11);
      *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
      *((_QWORD *)this + 11) = v26;
      return this;
    case ',':
      ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)this + 8), (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)a2 + 8));
      *((_QWORD *)this + 1) = &off_24C01BAC0;
      v6 = *(_OWORD *)((char *)a2 + 164);
      v7 = *(_OWORD *)((char *)a2 + 180);
      v8 = *(_QWORD *)((char *)a2 + 196);
      *((_QWORD *)this + 26) = 0;
      *(_QWORD *)((char *)this + 196) = v8;
      *(_OWORD *)((char *)this + 180) = v7;
      *(_OWORD *)((char *)this + 164) = v6;
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 26, *((const void **)a2 + 26), *((_QWORD *)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 3);
      *((_WORD *)this + 116) = *((_WORD *)a2 + 116);
      break;
  }
  return this;
}

void sub_207011824(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirDilatedConv::DilatedConvDecomposedDesc::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (v4 <= 33)
  {
    switch(v4)
    {
      case 1:
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)(a1 + 8), (const ZinIrKernelUnitInfo *)(a2 + 8));
        *(_QWORD *)(a1 + 8) = off_24C01CAD8;
        v9 = *(_OWORD *)(a2 + 248);
        v10[16] = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 248) = v9;
        v11 = *(_OWORD *)(a2 + 280);
        v12 = *(_OWORD *)(a2 + 296);
        v13 = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
        v10[18] = v12;
        v10[19] = v13;
        v10[17] = v11;
        break;
      case 2:
        *(_QWORD *)(a1 + 8) = off_24C017CA0;
        if (*(char *)(a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
        }
        else
        {
          v15 = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = v15;
        }
        v20 = *(_DWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 40) = v20;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *(__int128 **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 8) = &unk_24C01CC78;
        v21 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = v21;
        v22 = *(_OWORD *)(a2 + 120);
        v23 = *(_OWORD *)(a2 + 136);
        v24 = *(_OWORD *)(a2 + 152);
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = v24;
        *(_OWORD *)(a1 + 136) = v23;
        *(_OWORD *)(a1 + 120) = v22;
        break;
      case 17:
        *(_QWORD *)(a1 + 8) = off_24C017CA0;
        if (*(char *)(a2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
        }
        else
        {
          v5 = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = v5;
        }
        v17 = *(_DWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 40) = v17;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *(__int128 **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 8) = off_24C021970;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        break;
    }
    return a1;
  }
  switch(v4)
  {
    case '"':
      *(_QWORD *)(a1 + 8) = off_24C017CA0;
      if (*(char *)(a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
      }
      else
      {
        v14 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = v14;
      }
      v18 = *(_DWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 40) = v18;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *(__int128 **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      goto LABEL_26;
    case '#':
      *(_QWORD *)(a1 + 8) = off_24C017CA0;
      if (*(char *)(a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
      }
      else
      {
        v16 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = v16;
      }
      v25 = *(_DWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 40) = v25;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *(__int128 **)(a2 + 48), *(__int128 **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_26:
      *(_QWORD *)(a1 + 8) = v19 + 16;
      v26 = *(_QWORD *)(a2 + 88);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v26;
      return a1;
    case ',':
      ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(a1 + 8), (const ZinIrTextureUnitInfo *)(a2 + 8));
      *(_QWORD *)(a1 + 8) = &off_24C01BAC0;
      v6 = *(_OWORD *)(a2 + 164);
      v7 = *(_OWORD *)(a2 + 180);
      v8 = *(_QWORD *)(a2 + 196);
      *(_QWORD *)(a1 + 208) = 0;
      *(_QWORD *)(a1 + 196) = v8;
      *(_OWORD *)(a1 + 180) = v7;
      *(_OWORD *)(a1 + 164) = v6;
      *(_QWORD *)(a1 + 216) = 0;
      *(_QWORD *)(a1 + 224) = 0;
      std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 208), *(const void **)(a2 + 208), *(_QWORD *)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3);
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      break;
  }
  return a1;
}

void sub_207011BEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ZinMirDilatedConv::DecomposeDilatedConv(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, int a5, uint64_t a6, uint64_t a7, char *a8, uint64_t *a9)
{
  uint64_t i;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  int32x2_t *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v48;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  int32x2_t v65;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v66;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  __int128 v85;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v86;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 v92;
  __int128 v93;
  void *v94;
  _OWORD *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  __int128 v101;
  __int128 v102;
  char *v103;
  __int128 v104;
  __int128 v105;
  char *v106;
  int32x2_t v107;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v108;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t *v122;
  char *v123;
  __int128 v124;
  __int128 v125;
  char *v126;
  uint64_t v127;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v128;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v145;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v162;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v163;
  __int128 v164;
  _OWORD *v165;
  __int128 v166;
  __int128 v167;
  void *v168;
  _OWORD *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  __int128 v176;
  __int128 v177;
  char *v178;
  uint64_t *v179;
  char *v180;
  uint64_t *v181;
  _QWORD *v182;
  int v183;
  int v184;
  uint64_t *v188;
  _DWORD *v189;
  _DWORD *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char **v206;
  unint64_t v207;
  int v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  int32x2_t *v213;
  uint64_t v215;
  int v217;
  unsigned int v218;
  _DWORD *v219;
  unint64_t v220;
  unint64_t v221;
  int v223;
  int v225;
  uint64_t *v226;
  _QWORD *v227[2];
  char **v228;
  char *v229;
  unint64_t v230;
  _BYTE v231[24];
  uint64_t v232;
  int v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  int32x2_t v237;
  int64x2_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  __int128 v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  int v246;
  int64x2_t v247;
  uint64_t v248;
  __int128 v249;
  _QWORD v250[4];
  __int128 v251;
  uint64_t v252;
  int v253;
  char v254;
  int v255;
  __int128 v256;
  uint64_t v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  _OWORD v261[2];
  uint64_t v262;
  _BYTE v263[24];
  __int128 v264;
  __int128 v265;
  __int128 v266;
  _BYTE v267[24];
  __int128 v268;
  _QWORD v269[11];
  void *v270;
  void *v271;
  __int128 v272;
  int v273;
  _BYTE v274[32];
  _BYTE v275[32];
  _BYTE v276[28];
  int64x2_t v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  __int128 v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  __int16 v285;
  int v286;
  void *v287;
  void *__p;
  unint64_t v289;
  uint64_t v290;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v291;
  unint64_t v292;
  void *v293;
  int32x2_t *v294;
  uint64_t v295;
  __int128 __src;
  __int128 v297;
  uint64_t v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  _OWORD v303[2];
  uint64_t v304;

  v304 = *MEMORY[0x24BDAC8D0];
  v14 = *a9;
  for (i = a9[1];
        i != v14;
  a9[1] = v14;
  v15 = *(char **)a8;
  *((_QWORD *)a8 + 1) = *(_QWORD *)a8;
  v16 = *((_QWORD *)a8 + 2);
  if ((unint64_t)v15 >= v16)
  {
    v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (_QWORD)v15) >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= 1)
      v21 = 1;
    if (v20 >= 0x333333333333333)
      v22 = 0x666666666666666;
    else
      v22 = v21;
    v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)(a8 + 16), v22);
    v25 = &v23[40 * v24];
    v26 = *(_OWORD *)a1;
    v27 = *(_OWORD *)(a1 + 16);
    *((_QWORD *)v23 + 4) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v23 = v26;
    *((_OWORD *)v23 + 1) = v27;
    v19 = v23 + 40;
    v29 = *(char **)a8;
    v28 = (char *)*((_QWORD *)a8 + 1);
    if (v28 != *(char **)a8)
    {
      do
      {
        v30 = *(_OWORD *)(v28 - 40);
        v31 = *(_OWORD *)(v28 - 24);
        *((_QWORD *)v23 - 1) = *((_QWORD *)v28 - 1);
        *(_OWORD *)(v23 - 24) = v31;
        *(_OWORD *)(v23 - 40) = v30;
        v23 -= 40;
        v28 -= 40;
      }
      while (v28 != v29);
      v28 = *(char **)a8;
    }
    *(_QWORD *)a8 = v23;
    *((_QWORD *)a8 + 1) = v19;
    *((_QWORD *)a8 + 2) = v25;
    if (v28)
      operator delete(v28);
  }
  else
  {
    v17 = *(_OWORD *)a1;
    v18 = *(_OWORD *)(a1 + 16);
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v15 = v17;
    *((_OWORD *)v15 + 1) = v18;
    v19 = v15 + 40;
  }
  *((_QWORD *)a8 + 1) = v19;
  if (a4[18] != 1 || a4[19] != 1)
  {
    if (ZinConvLayerUtils::IsLargeKernelStep((uint64_t)(a4 + 6), a4 + 9))
    {
      if (*(_BYTE *)(*(_QWORD *)(a6 + 8) + 492))
        return 3;
      ZinConvLayerUtils::CheckDecomposabilityForKernelWithLargeStrides((uint64_t)a4);
    }
    v212 = a8;
    v229 = 0;
    v230 = 0;
    v227[1] = 0;
    v228 = &v229;
    v226 = (uint64_t *)v227;
    v227[0] = 0;
    v294 = 0;
    v293 = 0;
    v295 = 0;
    std::vector<ANEDebugInfo::DebugInfoInMem::Layer>::__init_with_size[abi:ne180100]<ANEDebugInfo::DebugInfoInMem::Layer*,ANEDebugInfo::DebugInfoInMem::Layer*>(&v293, *(const void **)a7, *(_QWORD *)(a7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2));
    v33 = (int32x2_t *)v293;
    v213 = v294;
    v219 = a4;
    if (v293 != v294)
    {
      v211 = a6;
      v34 = a2;
      do
      {
        v35 = v33->i32[0] == 1 && v33->i32[1] == 1;
        v36 = !v35;
        v291 = 0;
        v290 = 0;
        v292 = 0;
        v37 = operator new(0x28uLL);
        v38 = *(_OWORD *)(a1 + 16);
        *v37 = *(_OWORD *)a1;
        v37[1] = v38;
        *((_QWORD *)v37 + 4) = *(_QWORD *)(a1 + 32);
        v289 = (unint64_t)v37 + 40;
        v287 = v37;
        __p = (char *)v37 + 40;
        if (v36)
        {
          v39 = *(_QWORD *)(a1 + 16);
          v40 = v33->i32[0];
          v41 = v33->i32[1];
          v42 = *(_QWORD *)(a1 + 24) % v40;
          v43 = v40 - v42;
          if (v42)
            v44 = v43;
          else
            v44 = 0;
          v45 = v39 % v41;
          v46 = v41 - v39 % v41;
          if (v45)
            v47 = v46;
          else
            v47 = 0;
          if (v44 | v47)
          {
            v272 = 0u;
            v265 = 0u;
            *(_QWORD *)&v266 = 0;
            *(_OWORD *)&v263[8] = 0u;
            v264 = 0u;
            *(_QWORD *)v267 = -1;
            *(_OWORD *)&v267[8] = 0u;
            v268 = 0u;
            memset(v269, 0, sizeof(v269));
            *(_QWORD *)v263 = &off_24C01BAC0;
            v270 = 0;
            v271 = 0;
            WORD4(v272) = 0;
            *(_QWORD *)&v272 = 0;
            DWORD2(v264) = 44;
            DWORD2(v266) = a3;
            HIDWORD(v266) = a3;
            __src = xmmword_207A8D4D0;
            std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v270, (char *)&__src, (uint64_t)&v297, 2uLL);
            HIDWORD(v269[5]) = 0;
            *(_QWORD *)((char *)&v269[7] + 4) = 0;
            v269[6] = v44;
            LODWORD(v269[7]) = v47;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrPadUnitInfo *)v263);
            v48 = v291;
            if ((unint64_t)v291 >= v292)
            {
              v49 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            }
            else
            {
              ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v291, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
              v49 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v48 + 344);
            }
            v291 = v49;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            v50 = __p;
            __src = *(_OWORD *)((char *)__p - 40);
            v51 = *((_QWORD *)__p - 1);
            v52 = *((_QWORD *)__p - 2) + v44;
            v53 = *((_QWORD *)__p - 3) + v47;
            if ((unint64_t)__p >= v289)
            {
              v55 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)__p - (_BYTE *)v287) >> 3);
              v56 = v55 + 1;
              if (v55 + 1 > 0x666666666666666)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) > v56)
                v56 = 0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) >= 0x333333333333333)
                v57 = 0x666666666666666;
              else
                v57 = v56;
              if (v57)
                v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v289, v57);
              else
                v58 = 0;
              v59 = &v58[40 * v55];
              *(_OWORD *)v59 = __src;
              *((_QWORD *)v59 + 2) = v53;
              *((_QWORD *)v59 + 3) = v52;
              *((_QWORD *)v59 + 4) = v51;
              v60 = (char *)__p;
              v61 = (char *)v287;
              v62 = v59;
              if (__p != v287)
              {
                do
                {
                  v63 = *(_OWORD *)(v60 - 40);
                  v64 = *(_OWORD *)(v60 - 24);
                  *((_QWORD *)v62 - 1) = *((_QWORD *)v60 - 1);
                  *(_OWORD *)(v62 - 24) = v64;
                  *(_OWORD *)(v62 - 40) = v63;
                  v62 -= 40;
                  v60 -= 40;
                }
                while (v60 != v61);
                v60 = v61;
              }
              v54 = v59 + 40;
              v287 = v62;
              __p = v59 + 40;
              v289 = (unint64_t)&v58[40 * v57];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)((char *)__p - 40);
              v50[2] = v53;
              v50[3] = v52;
              v50[4] = v51;
              v54 = v50 + 5;
            }
            __p = v54;
            *(_QWORD *)v263 = &off_24C01BAC0;
            if (v270)
            {
              v271 = v270;
              operator delete(v270);
            }
            ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)v263);
          }
          *(_QWORD *)&v263[8] = 0;
          *(_QWORD *)&v263[16] = 0;
          DWORD2(v264) = 0;
          *(_QWORD *)&v264 = 0;
          v265 = 0u;
          v266 = 0u;
          *(_QWORD *)v267 = -1;
          *(_QWORD *)v263 = off_24C023830;
          v65 = *v33;
          *(_DWORD *)&v267[16] = v33[1].i32[0];
          *(int32x2_t *)&v267[8] = v65;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrSpaceToBatchUnitInfo *)v263);
          v66 = v291;
          if ((unint64_t)v291 >= v292)
          {
            v67 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          }
          else
          {
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v291, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            v67 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v66 + 344);
          }
          v291 = v67;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          v68 = __p;
          v69 = *((_QWORD *)__p - 4);
          v70 = *((_QWORD *)__p - 1);
          v71 = *((_QWORD *)__p - 5) * *(int *)&v267[12] * (uint64_t)*(int *)&v267[8];
          v72 = *((_QWORD *)__p - 3) / *(int *)&v267[12];
          v73 = *((_QWORD *)__p - 2) / *(int *)&v267[8];
          if ((unint64_t)__p >= v289)
          {
            v75 = v287;
            v76 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)__p - (_BYTE *)v287) >> 3);
            v77 = v76 + 1;
            if (v76 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) > v77)
              v77 = 0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) >= 0x333333333333333)
              v78 = 0x666666666666666;
            else
              v78 = v77;
            if (v78)
            {
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v289, v78);
              v68 = __p;
              v75 = v287;
            }
            else
            {
              v79 = 0;
            }
            v80 = (uint64_t *)&v79[40 * v76];
            *v80 = v71;
            v80[1] = v69;
            v80[2] = v72;
            v80[3] = v73;
            v80[4] = v70;
            if (v68 == v75)
            {
              v84 = &v79[40 * v76];
              a4 = v219;
              v34 = a2;
            }
            else
            {
              v81 = &v79[40 * v76];
              a4 = v219;
              v34 = a2;
              do
              {
                v82 = *(_OWORD *)(v68 - 5);
                v83 = *(_OWORD *)(v68 - 3);
                v84 = v81 - 40;
                *((_QWORD *)v81 - 1) = *(v68 - 1);
                *(_OWORD *)(v81 - 24) = v83;
                *(_OWORD *)(v81 - 40) = v82;
                v68 -= 5;
                v81 -= 40;
              }
              while (v68 != v75);
            }
            v74 = v80 + 5;
            v287 = v84;
            __p = v80 + 5;
            v289 = (unint64_t)&v79[40 * v78];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *(_QWORD *)__p = v71;
            v68[1] = v69;
            v68[2] = v72;
            v68[3] = v73;
            v74 = v68 + 5;
            v68[4] = v70;
            a4 = v219;
            v34 = a2;
          }
          __p = v74;
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)v263);
        }
        v277 = vdupq_n_s64(1uLL);
        v278 = 1;
        *(_QWORD *)&v85 = 0x100000001;
        *((_QWORD *)&v85 + 1) = 0x100000001;
        v279 = v85;
        v280 = 0x100000001;
        v282 = 0;
        v281 = 0uLL;
        v283 = v85;
        v284 = 1;
        v285 = 0;
        v286 = 0;
        *(_QWORD *)&v263[8] = 0;
        *(_QWORD *)&v263[16] = 0;
        DWORD2(v264) = 0;
        *(_QWORD *)&v264 = 0;
        v265 = 0u;
        v266 = 0u;
        *(_QWORD *)&v267[8] = 0;
        *(_DWORD *)&v267[16] = -1;
        *(_QWORD *)&v268 = -1;
        DWORD2(v268) = -1;
        v269[0] = -1;
        memset(&v269[1], 0, 56);
        LODWORD(v269[8]) = 1;
        BYTE4(v269[8]) = 0;
        LOWORD(v269[9]) = 0;
        LODWORD(v269[10]) = -1;
        v270 = (void *)-1;
        LODWORD(v271) = -1;
        *(_QWORD *)&v272 = -1;
        *((_QWORD *)&v272 + 1) = 0x3F80000000000006;
        *(_QWORD *)v267 = -1;
        *(_QWORD *)v263 = off_24C01CAD8;
        v273 = 0;
        *(_DWORD *)v274 = 0;
        v274[4] = 0;
        *(int64x2_t *)&v274[8] = v277;
        *(_QWORD *)&v274[24] = 1;
        *(_QWORD *)v275 = 1;
        *(_OWORD *)&v275[8] = v85;
        *(_QWORD *)&v275[24] = 0x100000001;
        memset(v276, 0, 24);
        *(_DWORD *)&v276[24] = 1;
        ZinMirDilatedConv::ConvertDilatedConvInfoStruct((uint64_t)a4, v33, (uint64_t)&v277);
        *(_DWORD *)v274 = 1;
        *(_QWORD *)&v275[20] = v279;
        *(_DWORD *)&v275[28] = DWORD2(v279);
        *(int64x2_t *)&v274[16] = v277;
        *(_QWORD *)v275 = v278;
        *(_OWORD *)v276 = v281;
        *(_QWORD *)&v276[16] = v282;
        *(_DWORD *)&v276[24] = HIDWORD(v283);
        *(_QWORD *)v267 = *(_QWORD *)(v34 + 8);
        *(_QWORD *)&v274[8] = v284;
        DWORD2(v266) = a3;
        *(_DWORD *)&v267[12] = a5;
        *(_DWORD *)&v267[8] = 1;
        LODWORD(__src) = 1;
        ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinIrKernelUnitInfo *)((char *)&__src + 8), (const ZinIrKernelUnitInfo *)v263);
        *((_QWORD *)&__src + 1) = off_24C01CAD8;
        v301 = *(_OWORD *)v275;
        v302 = *(_OWORD *)&v275[16];
        v303[0] = *(_OWORD *)v276;
        *(_OWORD *)((char *)v303 + 12) = *(_OWORD *)&v276[12];
        v299 = *(_OWORD *)v274;
        v300 = *(_OWORD *)&v274[16];
        v86 = v291;
        if ((unint64_t)v291 >= v292)
        {
          v87 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
        }
        else
        {
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v291, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          v87 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v86 + 344);
        }
        v291 = v87;
        ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
        v88 = *((_QWORD *)__p - 1);
        v89 = *(_OWORD *)((char *)__p - 24);
        v261[0] = *(_OWORD *)((char *)__p - 40);
        v261[1] = v89;
        v262 = v88;
        v90 = *(_QWORD *)(v34 + 8);
        *(_QWORD *)&__src = 0x100000001;
        DWORD2(__src) = 1;
        ZinGetOutputTensorDimension((uint64_t)v261, &v277, (unsigned int *)&v279, (unsigned int *)&v279 + 3, (int *)&v281, v90, (int *)&__src, (uint64_t)&v258);
        v91 = __p;
        if ((unint64_t)__p >= v289)
        {
          v95 = v287;
          v96 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)__p - (_BYTE *)v287) >> 3);
          v97 = v96 + 1;
          if (v96 + 1 > 0x666666666666666)
            std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
          if (0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) > v97)
            v97 = 0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) >= 0x333333333333333)
            v98 = 0x666666666666666;
          else
            v98 = v97;
          if (v98)
          {
            v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v289, v98);
            v91 = __p;
            v95 = v287;
          }
          else
          {
            v99 = 0;
          }
          v100 = &v99[40 * v96];
          v101 = v258;
          v102 = v259;
          *((_QWORD *)v100 + 4) = v260;
          *(_OWORD *)v100 = v101;
          *((_OWORD *)v100 + 1) = v102;
          if (v91 == v95)
          {
            v106 = &v99[40 * v96];
          }
          else
          {
            v103 = &v99[40 * v96];
            do
            {
              v104 = *(_OWORD *)((char *)v91 - 40);
              v105 = *(_OWORD *)((char *)v91 - 24);
              v106 = v103 - 40;
              *((_QWORD *)v103 - 1) = *((_QWORD *)v91 - 1);
              *(_OWORD *)(v103 - 24) = v105;
              *(_OWORD *)(v103 - 40) = v104;
              v91 = (_OWORD *)((char *)v91 - 40);
              v103 -= 40;
            }
            while (v91 != v95);
          }
          v94 = v100 + 40;
          v287 = v106;
          __p = v100 + 40;
          v289 = (unint64_t)&v99[40 * v98];
          if (v95)
            operator delete(v95);
        }
        else
        {
          v92 = v258;
          v93 = v259;
          *((_QWORD *)__p + 4) = v260;
          *v91 = v92;
          v91[1] = v93;
          v94 = (char *)v91 + 40;
        }
        __p = v94;
        if (v36)
        {
          *(_OWORD *)&v231[8] = 0uLL;
          v233 = 0;
          v232 = 0;
          v234 = 0u;
          v235 = 0u;
          v236 = -1;
          *(_QWORD *)v231 = off_24C0233F0;
          v107 = *v33;
          v238.i32[0] = v33[1].i32[0];
          v237 = v107;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrBatchToSpaceUnitInfo *)v231);
          v108 = v291;
          if ((unint64_t)v291 >= v292)
          {
            v109 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          }
          else
          {
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v291, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            v109 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v108 + 344);
          }
          v291 = v109;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          v110 = __p;
          v111 = *((_QWORD *)__p - 4);
          v112 = *((_QWORD *)__p - 1);
          v113 = *((_QWORD *)__p - 3) * v237.i32[1];
          v114 = *((_QWORD *)__p - 2) * v237.i32[0];
          v115 = *((_QWORD *)__p - 5) / (v237.i32[1] * (uint64_t)v237.i32[0]);
          if ((unint64_t)__p >= v289)
          {
            v117 = v287;
            v118 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)__p - (_BYTE *)v287) >> 3);
            v119 = v118 + 1;
            if (v118 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) > v119)
              v119 = 0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) >= 0x333333333333333)
              v120 = 0x666666666666666;
            else
              v120 = v119;
            if (v120)
            {
              v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v289, v120);
              v110 = __p;
              v117 = v287;
            }
            else
            {
              v121 = 0;
            }
            v122 = (uint64_t *)&v121[40 * v118];
            *v122 = v115;
            v122[1] = v111;
            v122[2] = v113;
            v122[3] = v114;
            v122[4] = v112;
            if (v110 == v117)
            {
              v126 = &v121[40 * v118];
              a4 = v219;
              v34 = a2;
            }
            else
            {
              v123 = &v121[40 * v118];
              a4 = v219;
              v34 = a2;
              do
              {
                v124 = *(_OWORD *)(v110 - 5);
                v125 = *(_OWORD *)(v110 - 3);
                v126 = v123 - 40;
                *((_QWORD *)v123 - 1) = *(v110 - 1);
                *(_OWORD *)(v123 - 24) = v125;
                *(_OWORD *)(v123 - 40) = v124;
                v110 -= 5;
                v123 -= 40;
              }
              while (v110 != v117);
            }
            v116 = v122 + 5;
            v287 = v126;
            __p = v122 + 5;
            v289 = (unint64_t)&v121[40 * v120];
            if (v117)
              operator delete(v117);
          }
          else
          {
            *(_QWORD *)__p = v115;
            v110[1] = v111;
            v110[2] = v113;
            v110[3] = v114;
            v116 = v110 + 5;
            v110[4] = v112;
            a4 = v219;
            v34 = a2;
          }
          __p = v116;
          if (ZinMirDilatedConv::NeedsExtraPadRemoval(a1, (int *)v33, a4))
          {
            v247.i64[1] = 0;
            v248 = 0;
            DWORD2(v249) = 0;
            *(_QWORD *)&v249 = 0;
            memset(v250, 0, sizeof(v250));
            *(_QWORD *)&v251 = -1;
            v247.i64[0] = (uint64_t)off_24C021970;
            v252 = 0x400000001;
            v127 = *(_QWORD *)(v34 + 24);
            DWORD2(v251) = 0;
            HIDWORD(v251) = v127;
            HIDWORD(v250[3]) = a3;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrInputViewUnitInfo *)&v247);
            v128 = v291;
            if ((unint64_t)v291 >= v292)
            {
              v129 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            }
            else
            {
              ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v291, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
              v129 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v128 + 344);
            }
            v291 = v129;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            v130 = __p;
            v256 = *(_OWORD *)((char *)__p - 40);
            v257 = *((_QWORD *)__p - 3);
            v131 = *((_QWORD *)__p - 1);
            v132 = *(_QWORD *)(v34 + 24);
            if ((unint64_t)__p >= v289)
            {
              v134 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)__p - (_BYTE *)v287) >> 3);
              v135 = v134 + 1;
              if (v134 + 1 > 0x666666666666666)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) > v135)
                v135 = 0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) >= 0x333333333333333)
                v136 = 0x666666666666666;
              else
                v136 = v135;
              if (v136)
                v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v289, v136);
              else
                v137 = 0;
              v138 = &v137[40 * v134];
              *((_QWORD *)v138 + 2) = v257;
              *(_OWORD *)v138 = v256;
              *((_QWORD *)v138 + 3) = v132;
              *((_QWORD *)v138 + 4) = v131;
              v139 = (char *)__p;
              v140 = (char *)v287;
              v141 = v138;
              if (__p != v287)
              {
                do
                {
                  v142 = *(_OWORD *)(v139 - 40);
                  v143 = *(_OWORD *)(v139 - 24);
                  *((_QWORD *)v141 - 1) = *((_QWORD *)v139 - 1);
                  *(_OWORD *)(v141 - 24) = v143;
                  *(_OWORD *)(v141 - 40) = v142;
                  v141 -= 40;
                  v139 -= 40;
                }
                while (v139 != v140);
                v139 = v140;
              }
              v133 = v138 + 40;
              v287 = v141;
              __p = v138 + 40;
              v289 = (unint64_t)&v137[40 * v136];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)((char *)__p - 40);
              v130[2] = *(v130 - 3);
              v130[3] = v132;
              v130[4] = v131;
              v133 = v130 + 5;
            }
            __p = v133;
            v144 = *(_QWORD *)(v34 + 16);
            HIDWORD(v252) = 3;
            HIDWORD(v251) = v144;
            DWORD2(v251) = 0;
            HIDWORD(v250[3]) = a3;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrInputViewUnitInfo *)&v247);
            v145 = v291;
            if ((unint64_t)v291 >= v292)
            {
              v146 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            }
            else
            {
              ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v291, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
              v146 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v145 + 344);
            }
            v291 = v146;
            ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            v147 = __p;
            __src = *(_OWORD *)((char *)__p - 40);
            *(_QWORD *)&v297 = *((_QWORD *)__p - 3);
            v148 = *((_QWORD *)__p - 1);
            v149 = *(_QWORD *)(v34 + 16);
            if ((unint64_t)__p >= v289)
            {
              v151 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)__p - (_BYTE *)v287) >> 3);
              v152 = v151 + 1;
              if (v151 + 1 > 0x666666666666666)
                std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
              if (0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) > v152)
                v152 = 0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) >= 0x333333333333333)
                v153 = 0x666666666666666;
              else
                v153 = v152;
              if (v153)
                v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v289, v153);
              else
                v154 = 0;
              v155 = &v154[40 * v151];
              *((_QWORD *)v155 + 2) = v297;
              *(_OWORD *)v155 = __src;
              *((_QWORD *)v155 + 3) = v149;
              *((_QWORD *)v155 + 4) = v148;
              v156 = (char *)__p;
              v157 = (char *)v287;
              v158 = v155;
              if (__p != v287)
              {
                do
                {
                  v159 = *(_OWORD *)(v156 - 40);
                  v160 = *(_OWORD *)(v156 - 24);
                  *((_QWORD *)v158 - 1) = *((_QWORD *)v156 - 1);
                  *(_OWORD *)(v158 - 24) = v160;
                  *(_OWORD *)(v158 - 40) = v159;
                  v158 -= 40;
                  v156 -= 40;
                }
                while (v156 != v157);
                v156 = v157;
              }
              v150 = v155 + 40;
              v287 = v158;
              __p = v155 + 40;
              v289 = (unint64_t)&v154[40 * v153];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)((char *)__p - 40);
              v147[2] = *(v147 - 3);
              v147[3] = v149;
              v147[4] = v148;
              v150 = v147 + 5;
            }
            __p = v150;
            ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v247);
          }
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)v231);
        }
        v247 = vdupq_n_s64(1uLL);
        v248 = 1;
        *(_QWORD *)&v161 = 0x100000001;
        *((_QWORD *)&v161 + 1) = 0x100000001;
        v249 = v161;
        v250[0] = 0x100000001;
        memset(&v250[1], 0, 24);
        v251 = v161;
        LODWORD(v252) = 2;
        BYTE4(v252) = 0;
        v253 = 1065353216;
        v254 = 0;
        v255 = 0;
        if (ZinMirDilatedConv::NeedDownsample((int *)v33, a4, (uint64_t)&v247))
        {
          *(_OWORD *)&v231[8] = 0uLL;
          v232 = 0;
          v234 = 0u;
          v235 = 0u;
          v236 = -1;
          *(_QWORD *)v231 = &unk_24C01CC78;
          v237.i32[0] = 1;
          v238 = vdupq_n_s64(1uLL);
          v239 = 1;
          v240 = 0x100000001;
          v241 = 1;
          v243 = 0;
          v242 = 0uLL;
          v244 = 0;
          v245 = 0x3F80000000000001;
          v246 = 0;
          v233 = 2;
          v237.i32[0] = ZinMirPoolUtils::ToZinIrPoolingType(v252);
          v238 = v247;
          v239 = v248;
          v242 = *(_OWORD *)&v250[1];
          v243 = v250[3];
          v240 = v249;
          v241 = DWORD2(v249);
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (ZinIrPoolUnitInfo *)v231);
          v162 = v291;
          if ((unint64_t)v291 >= v292)
          {
            v163 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(&v290, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          }
          else
          {
            ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v291, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
            v163 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)((char *)v162 + 344);
          }
          v291 = v163;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          v164 = *(_OWORD *)(v34 + 16);
          __src = *(_OWORD *)v34;
          v297 = v164;
          v298 = *(_QWORD *)(v34 + 32);
          v165 = __p;
          if ((unint64_t)__p >= v289)
          {
            v169 = v287;
            v170 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)__p - (_BYTE *)v287) >> 3);
            v171 = v170 + 1;
            if (v170 + 1 > 0x666666666666666)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) > v171)
              v171 = 0x999999999999999ALL * ((uint64_t)(v289 - (_QWORD)v287) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v289 - (_QWORD)v287) >> 3) >= 0x333333333333333)
              v172 = 0x666666666666666;
            else
              v172 = v171;
            if (v172)
            {
              v173 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinMirInterchangeInfo>>((uint64_t)&v289, v172);
              v165 = __p;
              v169 = v287;
            }
            else
            {
              v173 = 0;
            }
            v174 = &v173[40 * v170];
            *(_OWORD *)v174 = __src;
            *((_OWORD *)v174 + 1) = v297;
            *((_QWORD *)v174 + 4) = v298;
            if (v165 == v169)
            {
              v178 = &v173[40 * v170];
            }
            else
            {
              v175 = &v173[40 * v170];
              do
              {
                v176 = *(_OWORD *)((char *)v165 - 40);
                v177 = *(_OWORD *)((char *)v165 - 24);
                v178 = v175 - 40;
                *((_QWORD *)v175 - 1) = *((_QWORD *)v165 - 1);
                *(_OWORD *)(v175 - 24) = v177;
                *(_OWORD *)(v175 - 40) = v176;
                v165 = (_OWORD *)((char *)v165 - 40);
                v175 -= 40;
              }
              while (v165 != v169);
            }
            v168 = v174 + 40;
            v287 = v178;
            __p = v174 + 40;
            v289 = (unint64_t)&v173[40 * v172];
            if (v169)
              operator delete(v169);
          }
          else
          {
            v166 = *(_OWORD *)v34;
            v167 = *(_OWORD *)(v34 + 16);
            *((_QWORD *)__p + 4) = *(_QWORD *)(v34 + 32);
            *v165 = v166;
            v165[1] = v167;
            v168 = (char *)v165 + 40;
          }
          __p = v168;
          ZinIrUnitInfo::~ZinIrUnitInfo((void **)v231);
        }
        *(_QWORD *)v231 = v33;
        v179 = std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__emplace_unique_key_args<ZinIrDims3D,std::piecewise_construct_t const&,std::tuple<ZinIrDims3D const&>,std::tuple<>>((uint64_t **)&v228, (int *)v33, (uint64_t)&std::piecewise_construct, (_QWORD **)v231)+ 6;
        if (v179 != &v290)
          std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>((uint64_t)v179, v290, (uint64_t)v291, 0x82FA0BE82FA0BE83 * (((uint64_t)v291 - v290) >> 3));
        *(_QWORD *)v231 = v33;
        v180 = (char *)(std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__emplace_unique_key_args<ZinIrDims3D,std::piecewise_construct_t const&,std::tuple<ZinIrDims3D const&>,std::tuple<>>(&v226, (int *)v33, (uint64_t)&std::piecewise_construct, (_QWORD **)v231)+ 6);
        if (v180 != (char *)&v287)
          std::vector<ZinTensorDimensions>::__assign_with_size[abi:ne180100]<ZinTensorDimensions const*,ZinTensorDimensions const*>(v180, (char *)v287, (uint64_t)__p, 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)__p - (_BYTE *)v287) >> 3));
        *(_QWORD *)v263 = off_24C01ED88;
        if (v269[5])
        {
          v269[6] = v269[5];
          operator delete((void *)v269[5]);
        }
        if (v269[2])
        {
          v269[3] = v269[2];
          operator delete((void *)v269[2]);
        }
        ZinIrUnitInfo::~ZinIrUnitInfo((void **)v263);
        if (v287)
        {
          __p = v287;
          operator delete(v287);
        }
        *(_QWORD *)&__src = &v290;
        std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
        v33 = (int32x2_t *)((char *)v33 + 12);
      }
      while (v33 != v213);
      v33 = (int32x2_t *)v293;
      a6 = v211;
    }
    if (v33)
    {
      v294 = v33;
      operator delete(v33);
    }
    v181 = (uint64_t *)v228;
    if (v228 == &v229)
    {
      v218 = 1;
      v215 = 1;
      v217 = 1;
LABEL_239:
      v207 = v218 | (unint64_t)(v215 << 32);
      v208 = v217;
    }
    else
    {
      v182 = *(_QWORD **)a6;
      v221 = -1;
      v220 = -1;
      v215 = 1;
      v218 = 1;
      v217 = 1;
      while (1)
      {
        v183 = *((_DWORD *)v181 + 8);
        v184 = *((_DWORD *)v181 + 9);
        if (v183 == 1 && v184 == 1)
          break;
        if (v230 < 2 || v183 != a4[18] || v184 != a4[19])
        {
          v188 = (uint64_t *)std::map<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>::at((uint64_t)&v226, (int *)v181 + 8);
          v189 = (_DWORD *)v181[6];
          v190 = (_DWORD *)v181[7];
          if (v189 == v190)
          {
            v191 = 0;
          }
          else
          {
            v191 = 0;
            do
            {
              if (*v189 == 1)
                break;
              ++v191;
              v189 += 86;
            }
            while (v189 != v190);
          }
          v192 = v191 + 1;
          v193 = *v188;
          if (0xCCCCCCCCCCCCCCCDLL * ((v188[1] - *v188) >> 3) <= v191 + 1)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          *(_QWORD *)&v261[0] = 0;
          ZinTensorFormatGetSize(a3, v261);
          *(_QWORD *)&v258 = 0;
          v194 = ZinNEPerf::EstimateMinimumNumOfWorkunits(*(_QWORD *)(v193 + 40 * v192 + 16), *(_QWORD *)(v193 + 40 * v192 + 24), *(unint64_t *)&v261[0], 0, (uint64_t)v182, (unint64_t *)&v258);
          v195 = v181[6];
          if (0x82FA0BE82FA0BE83 * ((v181[7] - v195) >> 3) <= v191)
            std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
          v196 = v194;
          ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v195 + 344 * v191));
          *(int64x2_t *)v263 = vdupq_n_s64(1uLL);
          *(_QWORD *)&v263[16] = 1;
          *(_QWORD *)&v197 = 0x100000001;
          *((_QWORD *)&v197 + 1) = 0x100000001;
          v264 = v197;
          v265 = 0x100000001uLL;
          v266 = 0uLL;
          *(_OWORD *)v267 = v197;
          *(_QWORD *)&v267[16] = 1;
          LOWORD(v268) = 0;
          DWORD1(v268) = 0;
          ZinIrConvUnit::CreateConvInfo((uint64_t)&__src + 8, (uint64_t)v263);
          v247.i64[0] = v264;
          v247.i32[2] = DWORD2(v264);
          ZinKernelComputeStrideExpansion(v182, v247.i32, (unint64_t *)v263, a3, 0, (int *)v231);
          v198 = *(int *)v231;
          v199 = *(int *)&v231[12];
          v223 = *(_DWORD *)&v231[4];
          v264 = *(_OWORD *)v231;
          v225 = *(_DWORD *)&v231[16];
          *(_QWORD *)&v265 = *(_QWORD *)&v231[16];
          v200 = details::ZinIrSubchannelKernelDimension(*(int *)v231, *(int *)&v231[12], *(uint64_t *)v263, BYTE8(v265));
          v201 = details::ZinIrSubchannelKernelDimension(SDWORD1(v264), (int)v265, *(uint64_t *)&v263[8], v266);
          v202 = *(_QWORD *)(v193 + 40 * v192);
          v203 = v196 * v198 * v223 * v199 * v225 * v200 * v201 * v202;
          v204 = (unint64_t)(v202 < v221) << 7;
          if (v202 == v221)
            v204 = 0;
          if (v203 != v220)
            v204 = (unint64_t)(v203 < v220) << 7;
          if (v204)
          {
            v218 = *((_DWORD *)v181 + 8);
            v215 = *((unsigned int *)v181 + 9);
            v220 = v196 * v198 * v223 * v199 * v225 * v200 * v201 * v202;
            v221 = *(_QWORD *)(v193 + 40 * v192);
            v217 = *((_DWORD *)v181 + 10);
          }
          ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)&__src);
          a4 = v219;
        }
        v205 = (char *)v181[1];
        if (v205)
        {
          do
          {
            v206 = (char **)v205;
            v205 = *(char **)v205;
          }
          while (v205);
        }
        else
        {
          do
          {
            v206 = (char **)v181[2];
            v35 = *v206 == (char *)v181;
            v181 = (uint64_t *)v206;
          }
          while (!v35);
        }
        v181 = (uint64_t *)v206;
        if (v206 == &v229)
          goto LABEL_239;
      }
      v207 = v181[4];
      v208 = *((_DWORD *)v181 + 10);
    }
    v277.i64[0] = v207;
    v277.i32[2] = v208;
    v209 = (uint64_t *)std::map<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>::at((uint64_t)&v228, v277.i32);
    if (v209 != a9)
      std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>((uint64_t)a9, *v209, v209[1], 0x82FA0BE82FA0BE83 * ((v209[1] - *v209) >> 3));
    v210 = std::map<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>::at((uint64_t)&v226, v277.i32);
    if ((char *)v210 != v212)
      std::vector<ZinTensorDimensions>::__assign_with_size[abi:ne180100]<ZinTensorDimensions const*,ZinTensorDimensions const*>(v212, *(char **)v210, *(_QWORD *)(v210 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v210 + 8) - *(_QWORD *)v210) >> 3));
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>>>::destroy((uint64_t)&v226, v227[0]);
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::destroy((uint64_t)&v228, v229);
  }
  return 0;
}

void sub_207013578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t a64;

  std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>>>::destroy((uint64_t)&a60, (_QWORD *)a61);
  std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::destroy((uint64_t)&a63, (char *)a64);
  _Unwind_Resume(a1);
}

uint64_t std::map<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>::at(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__find_equal<ZinIrDims3D>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 48;
}

uint64_t ZinMirDilatedConv::LowerDilatedConvolution(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  size_t v5;
  int64x2_t *p_src;
  const void *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  __n128 v15;
  int WeightFormat;
  _BOOL8 HasPerCoutScale;
  int v18;
  ZinIrHalH13g *HasZeroPoint;
  char v20;
  uint64_t v21;
  int v22;
  int64_t MaxLogicalKernelWidthForLargeKernelMode;
  int64_t MaxLogicalKernelHeightForLargeKernelMode;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int LowestFactorGreaterThan;
  uint64_t v30;
  int v31;
  __int128 v32;
  _DWORD *v33;
  unint64_t v34;
  int v35;
  int *v36;
  BOOL v37;
  std::vector<int>::pointer v38;
  int v39;
  _DWORD *v40;
  int *begin;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  unsigned int *v45;
  std::vector<int>::pointer v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  int64_t EstimatedFootprintPerCoutElement;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  char MustEnableFillLowerNEFirst;
  _DWORD *v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  _DWORD *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  void **v74;
  const void *v75;
  __n128 v76;
  uint64_t v77;
  unsigned int v78;
  int32x2_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  ZinIrKernel *v90;
  uint64_t v91;
  ZinIrConvolutionInfo *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  ZinIrKernel *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  ZinIrOpLayer *NEConvLayer;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  void *v113;
  int32x2_t *v114;
  int32x2_t v115;
  void *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int32x2_t v126;
  _DWORD *v127;
  _DWORD *v128;
  char *v129;
  uint64_t v130;
  int v131;
  char *v132;
  uint64_t v133;
  _DWORD *v134;
  _DWORD *v135;
  char *v136;
  uint64_t v137;
  int v138;
  __n128 v139;
  void *v140;
  int v141;
  int v142;
  uint64_t v143;
  __int32 v144;
  int32x2_t *v145;
  int32x2_t v146;
  __int32 v147;
  BOOL v149;
  int v150;
  ZinIrTensor *v151;
  unint64_t Interleave;
  char v153;
  BOOL v154;
  int v155;
  uint64_t v156;
  int v157;
  ZinIrOpLayer *v158;
  _QWORD *v159;
  _BOOL4 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  __int128 v167;
  _DWORD *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  ZinIrOpLayer *PadLayer;
  uint64_t v175;
  _OWORD *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _BOOL4 v180;
  ZinIrKernel *v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  uint64_t v184;
  ZinIrKernel **v185;
  ZinIrOpLayer *View;
  uint64_t v187;
  _OWORD *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  ZinIrOpLayer *BatchToSpace;
  _BOOL4 v193;
  uint64_t v194;
  int v195;
  int v196;
  __int32 v197;
  __int32 v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  int v211;
  char *v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  ZinIrOpLayer *Pool;
  _BOOL4 v217;
  int v218;
  ZinIrKernel *v219;
  ZinIrKernel *v220;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  ZinIrOpLayer *SpaceToBatch;
  uint64_t v226;
  unsigned int *v227;
  ZinConvCompositeLayer *v228;
  uint64_t *v230;
  unsigned int *v231;
  char v233;
  unint64_t v234;
  char v235;
  int v236;
  uint64_t v237;
  _DWORD *v238;
  uint64_t v239;
  std::vector<int>::pointer end;
  int v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  std::vector<int>::pointer v245;
  uint64_t v246;
  unint64_t v247;
  int v248[2];
  ZinMirConvUtils *v249;
  ZinMirConvUtils *v250;
  unsigned int v251;
  __n128 v252;
  unint64_t v253;
  unsigned int v254;
  int v255[2];
  _QWORD *v256;
  unint64_t v257;
  _OWORD v258[2];
  int v259;
  ZinIrKernel *v260;
  _QWORD *v261;
  void *v262[2];
  char *v263;
  _QWORD v264[3];
  char v265;
  void *v266[2];
  char *v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  ZinIrKernel *v270;
  __int128 v271;
  uint64_t v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  uint64_t v275;
  void *__p[2];
  _BYTE v277[80];
  __int128 v278;
  __int128 v279;
  _BYTE v280[26];
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  void *v284;
  void *v285;
  uint64_t v286;
  __int16 v287;
  int64x2_t __src;
  _OWORD __src_16[2];
  __int128 v290;
  _BYTE v291[32];
  _BYTE v292[24];
  __int128 v293;
  int v294;
  _BYTE v295[32];
  int v296;
  _BYTE v297[32];
  uint64_t v298;
  int **v299;
  uint64_t v300;
  uint64_t v301;
  std::vector<int> v302;
  uint64_t v303;

  v303 = *MEMORY[0x24BDAC8D0];
  v256 = (_QWORD *)*a2;
  v4 = a3[25];
  if (!ZinConvLayer::IsDilated((ZinConvLayer *)v4))
    ZinAssertImpl("Composite Conv does not contain dilated conv\n");
  v222 = *(_QWORD *)(v4 + 16);
  v228 = (ZinConvCompositeLayer *)a3;
  v230 = a3 + 11;
  SpaceToBatch = *(ZinIrOpLayer **)a3[11];
  v226 = v4;
  if (*(char *)(v4 + 47) >= 0)
    v5 = *(unsigned __int8 *)(v4 + 47);
  else
    v5 = *(_QWORD *)(v4 + 32);
  p_src = &__src;
  std::string::basic_string[abi:ne180100]((uint64_t)&__src, v5 + 1);
  if (SBYTE7(__src_16[0]) < 0)
    p_src = (int64x2_t *)__src.i64[0];
  if (v5)
  {
    if (*(char *)(v226 + 47) >= 0)
      v7 = (const void *)(v226 + 24);
    else
      v7 = *(const void **)(v226 + 24);
    memmove(p_src, v7, v5);
  }
  *(__int16 *)((char *)p_src->i16 + v5) = 95;
  v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v302, "lower_dilated_conv");
  v9 = std::string::append(v8, "_xfm", 4uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)&v297[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)v297 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v297[23] >= 0)
    v11 = v297;
  else
    v11 = *(const std::string::value_type **)v297;
  if (v297[23] >= 0)
    v12 = v297[23];
  else
    v12 = *(_QWORD *)&v297[8];
  v13 = std::string::append((std::string *)&__src, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(_QWORD *)v277 = *((_QWORD *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = ZinObjectNameFactory::ZinObjectNameFactory(v264, __p);
  if ((v277[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if ((v297[23] & 0x80000000) != 0)
    operator delete(*(void **)v297);
  if (SHIBYTE(v302.__end_cap_.__value_) < 0)
    operator delete(v302.__begin_);
  if (SBYTE7(__src_16[0]) < 0)
    operator delete((void *)__src.i64[0]);
  v224 = (_QWORD *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD, __n128))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0, v15);
  v223 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v226 + 32))(v226, 0, 0);
  v254 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0)+ 88);
  v237 = *(_QWORD *)(v226 + 136);
  v238 = (_DWORD *)(v237 + 456);
  v262[0] = 0;
  v262[1] = 0;
  v263 = 0;
  if (*(_BYTE *)(a2[1] + 492))
  {
    __p[0] = (void *)0x100000001;
    LODWORD(__p[1]) = 1;
    std::vector<ZinIrCoordinateInfo>::__assign_with_size[abi:ne180100]<ZinIrCoordinateInfo*,ZinIrCoordinateInfo*>((char *)v262, (char *)__p, (uint64_t)&__p[1] + 4, 1uLL);
  }
  else
  {
    WeightFormat = ZinIrKernel::GetWeightFormat((ZinIrKernel *)v237);
    HasPerCoutScale = ZinIrKernel::HasPerCoutScale(*(ZinIrKernel **)(v226 + 136));
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)HasPerCoutScale);
    v236 = v18;
    HasZeroPoint = (ZinIrHalH13g *)ZinIrKernel::HasZeroPoint(*(ZinIrKernel **)(v226 + 136));
    ZinIrHalH13g::~ZinIrHalH13g(HasZeroPoint);
    v235 = v20;
    v21 = *(_QWORD *)(v226 + 136);
    v249 = *(ZinMirConvUtils **)(v21 + 416);
    v233 = *(_BYTE *)(v21 + 173);
    v234 = v224[7];
    if (WeightFormat == 6)
      v22 = 4;
    else
      v22 = WeightFormat;
    v251 = v22;
    MaxLogicalKernelWidthForLargeKernelMode = GetMaxLogicalKernelWidthForLargeKernelMode((uint64_t)v256, v254);
    MaxLogicalKernelHeightForLargeKernelMode = GetMaxLogicalKernelHeightForLargeKernelMode((uint64_t)v256);
    v25 = *(_QWORD *)(v237 + 464);
    v26 = *(int *)(v237 + 528);
    v27 = (*(_QWORD *)(v237 + 456) - 1) * v26;
    v28 = *(int *)(v237 + 532);
    if (v27 >= MaxLogicalKernelWidthForLargeKernelMode)
      LowestFactorGreaterThan = FindLowestFactorGreaterThan(v26, (v27 + MaxLogicalKernelWidthForLargeKernelMode)/ MaxLogicalKernelWidthForLargeKernelMode);
    else
      LowestFactorGreaterThan = 1;
    v30 = (v25 - 1) * v28;
    if (v30 >= MaxLogicalKernelHeightForLargeKernelMode)
      v31 = FindLowestFactorGreaterThan(*(int *)(v237 + 532), (v30 + MaxLogicalKernelHeightForLargeKernelMode) / MaxLogicalKernelHeightForLargeKernelMode);
    else
      v31 = 1;
    v266[0] = 0;
    v266[1] = 0;
    v267 = 0;
    GetAllIntegerFactors(*(_DWORD *)(v237 + 528), (int **)v297);
    GetAllIntegerFactors(*(_DWORD *)(v237 + 532), &v302.__begin_);
    v32 = *(_OWORD *)v297;
    if (*(_QWORD *)v297 != *(_QWORD *)&v297[8])
    {
      v33 = (_DWORD *)(*(_QWORD *)&v297[8] - 4);
      if ((unint64_t)(*(_QWORD *)&v297[8] - 4) > *(_QWORD *)v297)
      {
        v34 = *(_QWORD *)v297 + 4;
        do
        {
          v35 = *(_DWORD *)(v34 - 4);
          *(_DWORD *)(v34 - 4) = *v33;
          *v33-- = v35;
          v154 = v34 >= (unint64_t)v33;
          v34 += 4;
        }
        while (!v154);
      }
    }
    v36 = v302.__end_ - 1;
    v37 = v302.__begin_ != v302.__end_ && v36 > v302.__begin_;
    if (v37)
    {
      v38 = v302.__begin_ + 1;
      do
      {
        v39 = *(v38 - 1);
        *(v38 - 1) = *v36;
        *v36-- = v39;
        v154 = v38++ >= v36;
      }
      while (!v154);
    }
    v40 = (_DWORD *)v32;
    if ((_QWORD)v32 != *((_QWORD *)&v32 + 1))
    {
      while (*v40 != LowestFactorGreaterThan)
      {
        if (++v40 == *((_DWORD **)&v32 + 1))
        {
          v40 = (_DWORD *)*((_QWORD *)&v32 + 1);
          break;
        }
      }
    }
    std::vector<unsigned int>::resize((std::vector<int> *)v297, ((uint64_t)((uint64_t)v40 - v32) >> 2) + 1);
    begin = v302.__begin_;
    if (v302.__begin_ != v302.__end_)
    {
      while (*begin != v31)
      {
        if (++begin == v302.__end_)
        {
          begin = v302.__end_;
          break;
        }
      }
    }
    std::vector<unsigned int>::resize(&v302, begin - v302.__begin_ + 1);
    memset(__src_16, 0, sizeof(__src_16));
    __src = 0u;
    ZinMirDilatedConv::DecomposeDilationFactorX((uint64_t)v256, *(_DWORD *)(v237 + 528), (uint64_t)__p);
    std::deque<int>::__move_assign(&__src, (uint64_t)__p);
    v42 = *(_DWORD *)&v277[32];
    std::deque<int>::~deque[abi:ne180100](__p);
    v271 = 0uLL;
    v272 = 0;
    v44 = *(_DWORD **)&v297[8];
    v43 = *(_DWORD **)v297;
    if (v42 == 1)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v271, *(char **)v297, *(uint64_t *)&v297[8], (uint64_t)(*(_QWORD *)&v297[8] - *(_QWORD *)v297) >> 2);
    }
    else
    {
      __p[0] = &v271;
      while (v43 != v44)
      {
        if (*v43 % v42)
          std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)__p, v43);
        ++v43;
      }
    }
    v227 = (unsigned int *)*((_QWORD *)&v271 + 1);
    v45 = (unsigned int *)v271;
    if ((_QWORD)v271 != *((_QWORD *)&v271 + 1))
    {
      do
      {
        v231 = v45;
        v46 = v302.__begin_;
        end = v302.__end_;
        if (v302.__begin_ != v302.__end_)
        {
          v239 = *v45;
          do
          {
            v245 = v46;
            v242 = v239 | ((unint64_t)*v46 << 32);
            v273 = v242;
            LODWORD(v274) = 1;
            *(int64x2_t *)__p = vdupq_n_s64(1uLL);
            *(_QWORD *)v277 = 1;
            *(_QWORD *)&v47 = 0x100000001;
            *((_QWORD *)&v47 + 1) = 0x100000001;
            *(_OWORD *)&v277[8] = v47;
            *(_QWORD *)&v277[24] = 0x100000001;
            memset(&v277[32], 0, 24);
            *(_OWORD *)&v277[56] = v47;
            *(_QWORD *)&v277[72] = 1;
            LOWORD(v278) = 0;
            DWORD1(v278) = 0;
            ZinMirDilatedConv::ConvertDilatedConvInfoStruct((uint64_t)v238, (int32x2_t *)&v273, (uint64_t)__p);
            v49 = *(_QWORD *)(v237 + 456);
            v48 = *(_QWORD *)(v237 + 464);
            v50 = __p[0];
            v51 = __p[1];
            v300 = 0x100000001;
            LODWORD(v301) = 1;
            EstimatedFootprintPerCoutElement = ZinKernelGetEstimatedFootprintPerCoutElement(v234 / *(_QWORD *)&v277[72], 0, (int *)&v300, (int8x16_t *)__p, v254, v251, v256, v236, v235, (uint64_t)v249);
            v53 = *(_DWORD *)&v277[20];
            v54 = *(_DWORD *)&v277[24];
            v55 = *(_DWORD *)&v277[28];
            if (ZinKernelFormatIsPalette(v251))
              v56 = (unint64_t)v249;
            else
              v56 = 1;
            v57 = ZinCalculateMaxCompressionOverhead((uint64_t)v256, EstimatedFootprintPerCoutElement, (ZinIrCodegenKernelUtil *)v56, v251, 0, v233, (int *)&v277[20], v254, v249);
            MustEnableFillLowerNEFirst = ZinMirConvUtils::MustEnableFillLowerNEFirst(v249);
            if (v57
               + vcvtps_s32_f32((float)((float)((float)(v48 * v49) / (float)(uint64_t)((_QWORD)v51 * (_QWORD)v50))* (float)EstimatedFootprintPerCoutElement)* (float)(v54 * v53 * v55))+ ZinIrCodegenKernelUtil::ZinCalculateMaxScaleBiasZeroPointDuplicationAndRoundUpSize((ZinIrCodegenKernelUtil *)v56, (int *)&v277[20], (uint64_t)v256, 0, v254, v56, MustEnableFillLowerNEFirst) <= v256[60])
            {
              v59 = v266[1];
              if (v266[1] >= v267)
              {
                v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v266[1] - (char *)v266[0]) >> 2);
                v62 = v61 + 1;
                if (v61 + 1 > 0x1555555555555555)
                  std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((v267 - (char *)v266[0]) >> 2) > v62)
                  v62 = 0x5555555555555556 * ((v267 - (char *)v266[0]) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((v267 - (char *)v266[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v63 = 0x1555555555555555;
                else
                  v63 = v62;
                if (v63)
                  v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)&v267, v63);
                else
                  v64 = 0;
                v65 = &v64[12 * v61];
                *(_QWORD *)v65 = v242;
                *((_DWORD *)v65 + 2) = 1;
                v67 = v266[0];
                v66 = v266[1];
                v68 = v65;
                if (v266[1] != v266[0])
                {
                  do
                  {
                    v69 = *(_QWORD *)(v66 - 3);
                    v66 -= 3;
                    v70 = v66[2];
                    *(_QWORD *)(v68 - 12) = v69;
                    v68 -= 12;
                    *((_DWORD *)v68 + 2) = v70;
                  }
                  while (v66 != v67);
                  v66 = v266[0];
                }
                v60 = v65 + 12;
                v266[0] = v68;
                v266[1] = v65 + 12;
                v267 = &v64[12 * v63];
                if (v66)
                  operator delete(v66);
              }
              else
              {
                *(_QWORD *)v266[1] = v242;
                v59[2] = 1;
                v60 = v59 + 3;
              }
              v266[1] = v60;
            }
            v46 = v245 + 1;
          }
          while (v245 + 1 != end);
        }
        v45 = v231 + 1;
      }
      while (v231 + 1 != v227);
      v45 = (unsigned int *)v271;
    }
    if (v45)
    {
      *((_QWORD *)&v271 + 1) = v45;
      operator delete(v45);
    }
    std::deque<int>::~deque[abi:ne180100](&__src);
    if (v302.__begin_)
    {
      v302.__end_ = v302.__begin_;
      operator delete(v302.__begin_);
    }
    if (*(_QWORD *)v297)
    {
      *(_QWORD *)&v297[8] = *(_QWORD *)v297;
      operator delete(*(void **)v297);
    }
    if (v262[0])
    {
      v262[1] = v262[0];
      operator delete(v262[0]);
    }
    *(_OWORD *)v262 = *(_OWORD *)v266;
    v263 = v267;
  }
  v71 = *((_QWORD *)v228 + 2);
  v243 = *(_QWORD *)(v71 + 992);
  v246 = *((_QWORD *)v228 + 12);
  v72 = *((_QWORD *)v228 + 25);
  if (*(char *)(v72 + 47) >= 0)
    v73 = *(unsigned __int8 *)(v72 + 47);
  else
    v73 = *(_QWORD *)(v72 + 32);
  v74 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v73 + 16);
  if (v277[7] < 0)
    v74 = (void **)__p[0];
  if (v73)
  {
    if (*(char *)(v72 + 47) >= 0)
      v75 = (const void *)(v72 + 24);
    else
      v75 = *(const void **)(v72 + 24);
    memmove(v74, v75, v73);
  }
  strcpy((char *)v74 + v73, "_legalizer_test_");
  v76 = ZinObjectNameFactory::ZinObjectNameFactory(v297, __p);
  if ((v277[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (v262[0] == v262[1]
    || (v266[0] = 0, v266[1] = 0, v267 = 0, (int)(-1431655765 * (((char *)v262[1] - (char *)v262[0]) >> 2)) < 1))
  {
    v141 = 3;
    goto LABEL_196;
  }
  v76.n128_u64[0] = (unint64_t)vadd_s32(*(int32x2_t *)(*(_QWORD *)(v72 + 136) + 384), (int32x2_t)0x100000001);
  v252 = v76;
  v77 = -1431655765 * (((char *)v262[1] - (char *)v262[0]) >> 2);
  do
  {
    v78 = v77 - 1;
    v79 = (int32x2_t *)((char *)v262[0] + 12 * (v77 - 1));
    if (v79->i32[0] >= v252.n128_i32[0] && *((_DWORD *)v262[0] + 3 * v78 + 1) >= v252.n128_i32[1])
    {
      v114 = (int32x2_t *)v266[1];
      if (v266[1] >= v267)
      {
        v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v266[1] - (char *)v266[0]) >> 2);
        v118 = v117 + 1;
        if (v117 + 1 > 0x1555555555555555)
          std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v267 - (char *)v266[0]) >> 2) > v118)
          v118 = 0x5555555555555556 * ((v267 - (char *)v266[0]) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v267 - (char *)v266[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v119 = 0x1555555555555555;
        else
          v119 = v118;
        if (v119)
          v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)&v267, v119);
        else
          v120 = 0;
        v125 = &v120[12 * v117];
        v126 = *v79;
        *((_DWORD *)v125 + 2) = v79[1].i32[0];
        *(int32x2_t *)v125 = v126;
        v128 = v266[0];
        v127 = v266[1];
        v129 = v125;
        if (v266[1] != v266[0])
        {
          do
          {
            v130 = *(_QWORD *)(v127 - 3);
            v127 -= 3;
            v131 = v127[2];
            *(_QWORD *)(v129 - 12) = v130;
            v129 -= 12;
            *((_DWORD *)v129 + 2) = v131;
          }
          while (v127 != v128);
          v127 = v266[0];
        }
        v116 = v125 + 12;
        v266[0] = v129;
        v266[1] = v125 + 12;
        v267 = &v120[12 * v119];
        if (v127)
          operator delete(v127);
      }
      else
      {
        v115 = *v79;
        *((_DWORD *)v266[1] + 2) = v79[1].i32[0];
        *v114 = v115;
        v116 = (char *)&v114[1] + 4;
      }
      v266[1] = v116;
    }
    else
    {
      v80 = *(_QWORD *)(v246 - 8);
      v81 = *a2;
      v82 = *(_QWORD *)(v72 + 136);
      LODWORD(v260) = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0, 0)+ 88);
      ZinMirDilatedConv::CreateDilatedConvKernel(v81, v82 + 456, (unsigned int *)&v260, v79, v72, 0, (uint64_t *)&v299);
      v83 = (uint64_t)v299;
      if (v299)
      {
        v84 = v299[33];
        v302.__begin_ = v299[34];
        v302.__end_ = v84;
        v302.__end_cap_.__value_ = v299[35];
        v85 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v80 + 32))(v80, 0, 0);
        v86 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0, 0)
                        + 56);
        __src.i64[0] = 0x100000001;
        __src.i32[2] = 1;
        ZinGetOutputTensorDimension(v85 + 48, &v302, (unsigned int *)(v83 + 328), (unsigned int *)(v83 + 340), (int *)(v83 + 352), v86, __src.i32, (uint64_t)__p);
        LODWORD(v85) = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0, 0)+ 88);
        (*(void (**)(__int128 *__return_ptr, _BYTE *, _QWORD))(*(_QWORD *)v297 + 16))(&v271, v297, 0);
        v270 = 0;
        v300 = 0;
        v301 = 0;
        __src.i32[0] = 0;
        memset(__src_16, 0, 20);
        __src.i64[1] = 0;
        ZinIrTensor::CreateTensor(v71, v85, (__int128 *)__p, &v271, &v270, &v300, (unsigned int *)&__src, (uint64_t *)&v273);
        v87 = (std::__shared_weak_count *)v301;
        if (v301)
        {
          v88 = (unint64_t *)(v301 + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        v90 = v270;
        v270 = 0;
        if (v90)
          std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v270, v90);
        if (SHIBYTE(v272) < 0)
          operator delete((void *)v271);
        v91 = operator new();
        v92 = (ZinIrConvolutionInfo *)operator new();
        ZinIrConvolutionInfo::ZinIrConvolutionInfo(v92);
        *(_QWORD *)&v271 = v92;
        v268 = v273;
        v269 = v274;
        if (v274)
        {
          p_shared_owners = (unint64_t *)&v274->__shared_owners_;
          do
            v94 = __ldxr(p_shared_owners);
          while (__stxr(v94 + 1, p_shared_owners));
        }
        (*(void (**)(int64x2_t *__return_ptr, _BYTE *, uint64_t))(*(_QWORD *)v297 + 16))(&__src, v297, 1);
        ZinConvLayer::ZinConvLayer(v91, &v271, &v268, &__src, &v299);
        if (SBYTE7(__src_16[0]) < 0)
          operator delete((void *)__src.i64[0]);
        v95 = v269;
        if (v269)
        {
          v96 = (unint64_t *)&v269->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v98 = v271;
        *(_QWORD *)&v271 = 0;
        if (v98)
          (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
        v99 = v274;
        if (v274)
        {
          v100 = (unint64_t *)&v274->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v102 = (ZinIrKernel *)v299;
        v299 = 0;
        if (v102)
        {
          ZinIrKernel::~ZinIrKernel(v102);
          MEMORY[0x20BD002F8]();
        }
        v103 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)*v230 + 32))(*(_QWORD *)*v230, 0, 0);
        v104 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0, 0);
        v105 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)*v230 + 32))(*(_QWORD *)*v230, 0, 0)+ 88);
        v106 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v72 + 32))(v72, 0, 0);
        NEConvLayer = (ZinIrOpLayer *)ZinBuilder::CreateNEConvLayer(v71, (uint64_t)v297, v103 + 48, (__int128 *)(v104 + 48), v105, *(_DWORD *)(v106 + 88), 0, 0, 0, v91, 0, 0, 0, 0, 0);
        v302.__begin_ = (std::vector<int>::pointer)*((_QWORD *)v228 + 25);
        __src.i64[0] = (uint64_t)&v302;
        __src.i64[1] = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(__p, &__src);
        ZinIrOpLayerGraph::AddNode(a1, NEConvLayer, (ZinIrOpLayer ***)__p);
        __p[0] = &unk_24C02BB18;
        if (__p[1])
        {
          *(void **)v277 = __p[1];
          operator delete(__p[1]);
        }
        ZinIrOpLayerGraph::AddEdgesImplSrc<std::vector<ZinIrOpLayer *>>((uint64_t)a1, v230, (uint64_t)NEConvLayer);
        ZinIrNetworkStatus::ZinIrNetworkStatus((ZinIrNetworkStatus *)__p);
        ZinMirSetActiveNE(NEConvLayer, (CFArrayRef *)__p);
        v108 = *(_QWORD *)(v71 + 472);
        ZinMirLayerSplitterBase::ZinMirLayerSplitterBase((uint64_t)&__src, v243, (uint64_t)a2, 1);
        v109 = v108 << 10;
        *(_OWORD *)&v292[8] = 0u;
        v293 = 0u;
        memset(v295, 0, sizeof(v295));
        v294 = 1065353216;
        v296 = 1065353216;
        if ((unint64_t)((v108 << 10) - 1) >= *(_QWORD *)(*a2 + 408))
          v109 = *(_QWORD *)(*a2 + 408);
        __src.i64[0] = (uint64_t)&unk_24C01D278;
        *(_QWORD *)v292 = v109;
        ZinMirL2Legalizer::GetInOutL2Footprint((ZinMirL2Legalizer *)&__src, NEConvLayer, (unint64_t *)&v302);
        if (v302.__begin_ <= (std::vector<int>::pointer)*(_QWORD *)(*a2 + 408))
        {
          v110 = (char *)v262[0] + 12 * v78;
          v111 = v266[1];
          if (v266[1] >= v267)
          {
            v121 = 0xAAAAAAAAAAAAAAABLL * (((char *)v266[1] - (char *)v266[0]) >> 2);
            v122 = v121 + 1;
            if (v121 + 1 > 0x1555555555555555)
              std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v267 - (char *)v266[0]) >> 2) > v122)
              v122 = 0x5555555555555556 * ((v267 - (char *)v266[0]) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v267 - (char *)v266[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v123 = 0x1555555555555555;
            else
              v123 = v122;
            if (v123)
              v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ANEDebugInfo::DebugInfoInMem::Layer>>((uint64_t)&v267, v123);
            else
              v124 = 0;
            v132 = &v124[12 * v121];
            v133 = *(_QWORD *)v110;
            *((_DWORD *)v132 + 2) = *((_DWORD *)v110 + 2);
            *(_QWORD *)v132 = v133;
            v135 = v266[0];
            v134 = v266[1];
            v136 = v132;
            if (v266[1] != v266[0])
            {
              do
              {
                v137 = *(_QWORD *)(v134 - 3);
                v134 -= 3;
                v138 = v134[2];
                *(_QWORD *)(v136 - 12) = v137;
                v136 -= 12;
                *((_DWORD *)v136 + 2) = v138;
              }
              while (v134 != v135);
              v134 = v266[0];
            }
            v113 = v132 + 12;
            v266[0] = v136;
            v266[1] = v132 + 12;
            v267 = &v124[12 * v123];
            if (v134)
              operator delete(v134);
          }
          else
          {
            v112 = *(_QWORD *)v110;
            *((_DWORD *)v266[1] + 2) = *((_DWORD *)v110 + 2);
            *v111 = v112;
            v113 = (char *)v111 + 12;
          }
          v266[1] = v113;
          v139.n128_u64[1] = v252.n128_u64[1];
          v139.n128_u64[0] = (unint64_t)vmin_s32(*(int32x2_t *)((char *)v262[0] + 12 * v78), (int32x2_t)v252.n128_u64[0]);
          v252 = v139;
        }
        ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, NEConvLayer, 1);
        __src.i64[0] = (uint64_t)&unk_24C01D278;
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v295);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&v292[8]);
        ZinMirLayerSplitterBase::~ZinMirLayerSplitterBase((ZinMirLayerSplitterBase *)&__src);
        ZinIrNetworkStatus::~ZinIrNetworkStatus((ZinIrNetworkStatus *)__p);
      }
    }
    v37 = v77-- <= 1;
  }
  while (!v37);
  v140 = v266[0];
  if (v266[0] == v266[1])
  {
    v141 = 3;
    if (!v266[0])
      goto LABEL_196;
    goto LABEL_195;
  }
  std::vector<ZinIrCoordinateInfo>::__assign_with_size[abi:ne180100]<ZinIrCoordinateInfo*,ZinIrCoordinateInfo*>((char *)v262, (char *)v266[0], (uint64_t)v266[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v266[1] - (char *)v266[0]) >> 2));
  v141 = 0;
  v140 = v266[0];
  if (v266[0])
  {
LABEL_195:
    v266[1] = v140;
    operator delete(v140);
  }
LABEL_196:
  *(_QWORD *)v297 = off_24C01FBB0;
  if ((v297[31] & 0x80000000) != 0)
    operator delete(*(void **)&v297[8]);
  if (v141)
    ZinAssertImpl("Error: Dilated convolution cannot be lowered since all possible space-to-batch implementations exceeded the L2 DMA buffer size");
  v271 = 0uLL;
  v272 = 0;
  v266[0] = 0;
  v266[1] = 0;
  v267 = 0;
  v142 = ZinIrKernel::GetWeightFormat(*(ZinIrKernel **)(v226 + 136));
  if (ZinMirDilatedConv::DecomposeDilatedConv((uint64_t)(v224 + 6), v223 + 48, v254, v238, v142, (uint64_t)a2, (uint64_t)v262, (char *)&v271, (uint64_t *)v266))goto LABEL_200;
  v268 = 0x100000001;
  v144 = 1;
  LODWORD(v269) = 1;
  v145 = (int32x2_t *)v266[0];
  if (v266[0] == v266[1])
  {
    v147 = 1;
  }
  else
  {
    do
    {
      if (v145->i32[0] == 34)
      {
        v146 = v145[11];
        LODWORD(v269) = v145[12].i32[0];
        v268 = (uint64_t)v146;
      }
      v145 += 43;
    }
    while (v145 != v266[1]);
    v147 = v268;
    v144 = HIDWORD(v268);
  }
  v149 = v147 == 1 && v144 == 1;
  if (*(_BYTE *)(v222 + 668) && !v149)
    ZinAssertImpl("Dynamic shape dilated conv cannot use SpaceToBatch approach");
  if (v149)
  {
    v150 = 1;
  }
  else
  {
    v151 = (ZinIrTensor *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0);
    Interleave = ZinIrTensor::GetInterleave(v151);
    v154 = v153 && Interleave >= 2;
    if (v154)
    {
      v156 = *((_QWORD *)SpaceToBatch + 2);
      v157 = *(_DWORD *)((*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0)+ 88);
      v261 = 0;
      v158 = (ZinIrOpLayer *)ZinBuilder::CreateCopyLayer(v156, (uint64_t)SpaceToBatch, (uint64_t)v264, v157, &v261);
      v159 = v261;
      v261 = 0;
      if (v159)
        std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v261, v159);
      *(_QWORD *)v297 = *((_QWORD *)v228 + 25);
      __src.i64[0] = (uint64_t)v297;
      __src.i64[1] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &__src);
      v160 = ZinIrOpLayerGraph::AddNode(a1, v158, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        *(void **)v277 = __p[1];
        operator delete(__p[1]);
      }
      v155 = v160 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)SpaceToBatch, (uint64_t)v158, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      SpaceToBatch = v158;
    }
    else
    {
      v155 = 1;
    }
    v161 = v224[9] % (int)v268;
    v162 = v161 ? (int)v268 - v161 : 0;
    v163 = v224[8] % SHIDWORD(v268);
    v164 = v163 ? SHIDWORD(v268) - v163 : 0;
    if (v162 | v164)
    {
      *(int64x2_t *)v297 = vdupq_n_s64(1uLL);
      *(_OWORD *)&v297[16] = *(_OWORD *)v297;
      v298 = 1;
      memset(v277, 0, 20);
      memset(&v277[24], 0, 32);
      *(_QWORD *)&v277[56] = -1;
      *(_OWORD *)&v277[64] = 0u;
      v278 = 0u;
      v279 = 0u;
      memset(v280, 0, sizeof(v280));
      __p[1] = 0;
      __p[0] = &off_24C01BAC0;
      v281 = 0u;
      v282 = 0u;
      v283 = 0;
      v285 = 0;
      v284 = 0;
      v287 = 0;
      v286 = 0;
      v165 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0);
      v166 = *(_DWORD *)(v165 + 88);
      v167 = *(_OWORD *)(v165 + 64);
      *(_OWORD *)v297 = *(_OWORD *)(v165 + 48);
      *(_OWORD *)&v297[16] = v167;
      v298 = *(_QWORD *)(v165 + 80);
      *(_QWORD *)&v297[16] = v167 + v164;
      *(_QWORD *)&v297[24] = *((_QWORD *)&v167 + 1) + v162;
      *(_DWORD *)&v277[16] = 44;
      *(_DWORD *)&v277[48] = v166;
      *(_DWORD *)&v277[52] = v166;
      __src = (int64x2_t)xmmword_207A8D4D0;
      std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)&v284, __src.i8, (uint64_t)__src_16, 2uLL);
      v281 = 0u;
      v282 = 0u;
      DWORD1(v281) = v162;
      HIDWORD(v281) = v164;
      ZinConvCompositeLayer::GetDequantizedPadInfo(v228, (ZinIrPadUnitInfo *)__p);
      (*(void (**)(int64x2_t *__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 80))(&__src, SpaceToBatch, 0, 0);
      v168 = operator new(0x78uLL);
      v302.__end_ = v168 + 30;
      v302.__end_cap_.__value_ = v168 + 30;
      v168[28] = *(_DWORD *)&v292[16];
      v169 = *(_OWORD *)v292;
      v170 = *(_OWORD *)v291;
      *((_OWORD *)v168 + 5) = *(_OWORD *)&v291[16];
      *((_OWORD *)v168 + 6) = v169;
      v171 = __src_16[0];
      *(int64x2_t *)v168 = __src;
      *((_OWORD *)v168 + 1) = v171;
      v172 = v290;
      *((_OWORD *)v168 + 2) = __src_16[1];
      *((_OWORD *)v168 + 3) = v172;
      *((_OWORD *)v168 + 4) = v170;
      v302.__begin_ = v168;
      v173 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0);
      PadLayer = (ZinIrOpLayer *)ZinBuilder::CreatePadLayer(v222, (uint64_t)v264, (uint64_t)&v302, (__int128 *)v297, *(_DWORD *)(v173 + 88), (const ZinIrPadUnitInfo *)__p);
      if (v302.__begin_)
      {
        v302.__end_ = v302.__begin_;
        operator delete(v302.__begin_);
      }
      v273 = *((_QWORD *)v228 + 25);
      v302.__begin_ = (std::vector<int>::pointer)&v273;
      v302.__end_ = (std::vector<int>::pointer)1;
      Layer2TDMapper::SourceLayer::SourceLayer(&__src, &v302);
      ZinIrOpLayerGraph::AddNode(a1, PadLayer, (ZinIrOpLayer ***)&__src);
      __src.i64[0] = (uint64_t)&unk_24C02BB18;
      if (__src.i64[1])
      {
        *(_QWORD *)&__src_16[0] = __src.i64[1];
        operator delete((void *)__src.i64[1]);
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)SpaceToBatch, (uint64_t)PadLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      __p[0] = &off_24C01BAC0;
      if (v284)
      {
        v285 = v284;
        operator delete(v284);
      }
      ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)__p);
    }
    else
    {
      PadLayer = SpaceToBatch;
    }
    v175 = *((_QWORD *)PadLayer + 2);
    (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)PadLayer + 80))(__p, PadLayer, 0, 0);
    v176 = operator new(0x78uLL);
    *(_QWORD *)&__src_16[0] = (char *)v176 + 120;
    v177 = *(_OWORD *)&v277[64];
    v176[4] = *(_OWORD *)&v277[48];
    v176[5] = v177;
    v176[6] = v278;
    *((_DWORD *)v176 + 28) = v279;
    v178 = *(_OWORD *)v277;
    *v176 = *(_OWORD *)__p;
    v176[1] = v178;
    v179 = *(_OWORD *)&v277[32];
    v176[2] = *(_OWORD *)&v277[16];
    v176[3] = v179;
    __src.i64[0] = (uint64_t)v176;
    __src.i64[1] = (uint64_t)v176 + 120;
    ZinIrSpaceToBatchInfo::ZinIrSpaceToBatchInfo((uint64_t)v297, &v268);
    SpaceToBatch = (ZinIrOpLayer *)ZinBuilder::CreateSpaceToBatch(v175, (uint64_t)v264, __src.i64, (uint64_t)v297);
    ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v297);
    if (__src.i64[0])
    {
      __src.i64[1] = __src.i64[0];
      operator delete((void *)__src.i64[0]);
    }
    *(_QWORD *)v297 = *((_QWORD *)v228 + 25);
    __src.i64[0] = (uint64_t)v297;
    __src.i64[1] = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(__p, &__src);
    v180 = ZinIrOpLayerGraph::AddNode(a1, SpaceToBatch, (ZinIrOpLayer ***)__p);
    __p[0] = &unk_24C02BB18;
    if (__p[1])
    {
      *(void **)v277 = __p[1];
      operator delete(__p[1]);
    }
    v150 = v155 & v180 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)PadLayer, (uint64_t)SpaceToBatch, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  LODWORD(__p[0]) = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)*v230 + 32))(*(_QWORD *)*v230, 0, 0)+ 88);
  ZinMirDilatedConv::CreateDilatedConvKernel((uint64_t)v256, (uint64_t)v238, (unsigned int *)__p, (int32x2_t *)&v268, v226, 1, (uint64_t *)&v270);
  v181 = v270;
  if (!v270)
  {
LABEL_200:
    v143 = 3;
  }
  else
  {
    v182 = (std::__shared_weak_count *)*((_QWORD *)v270 + 33);
    v273 = *((_QWORD *)v270 + 34);
    v274 = v182;
    v275 = *((_QWORD *)v270 + 35);
    v260 = 0;
    v183 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)SpaceToBatch + 32))(SpaceToBatch, 0, 0);
    v184 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v226 + 32))(v226, 0, 0) + 56);
    __p[0] = (void *)0x100000001;
    LODWORD(__p[1]) = 1;
    ZinGetOutputTensorDimension(v183 + 48, &v273, (unsigned int *)v181 + 82, (unsigned int *)v181 + 85, (int *)v181 + 88, v184, (int *)__p, (uint64_t)v297);
    v185 = ZinConvCompositeLayer::CreateDecomposedPartition((uint64_t)v228, &v270, &v260, 0, 0, (__int128 *)v297, v222, a1, (const ZinConvLayer *)v264, (uint64_t)SpaceToBatch);
    View = (ZinIrOpLayer *)v185;
    if (!v185)
      ZinAssertImpl("Failed to create Composite partition");
    if (!v149)
    {
      v187 = (uint64_t)v185[2];
      (*((void (**)(void **__return_ptr, ZinIrKernel **, _QWORD, _QWORD))*v185 + 10))(__p, v185, 0, 0);
      v188 = operator new(0x78uLL);
      *(_QWORD *)&__src_16[0] = (char *)v188 + 120;
      v189 = *(_OWORD *)&v277[64];
      v188[4] = *(_OWORD *)&v277[48];
      v188[5] = v189;
      v188[6] = v278;
      *((_DWORD *)v188 + 28) = v279;
      v190 = *(_OWORD *)v277;
      *v188 = *(_OWORD *)__p;
      v188[1] = v190;
      v191 = *(_OWORD *)&v277[32];
      v188[2] = *(_OWORD *)&v277[16];
      v188[3] = v191;
      __src.i64[0] = (uint64_t)v188;
      __src.i64[1] = (uint64_t)v188 + 120;
      ZinIrBatchToSpaceInfo::ZinIrBatchToSpaceInfo((uint64_t)&v302, &v268);
      BatchToSpace = (ZinIrOpLayer *)ZinBuilder::CreateBatchToSpace(v187, (uint64_t)v264, __src.i64, (uint64_t)&v302);
      ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&v302);
      if (__src.i64[0])
      {
        __src.i64[1] = __src.i64[0];
        operator delete((void *)__src.i64[0]);
      }
      v302.__begin_ = (std::vector<int>::pointer)*((_QWORD *)v228 + 25);
      __src.i64[0] = (uint64_t)&v302;
      __src.i64[1] = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &__src);
      v193 = ZinIrOpLayerGraph::AddNode(a1, BatchToSpace, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        *(void **)v277 = __p[1];
        operator delete(__p[1]);
      }
      v150 &= v193 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)View, (uint64_t)BatchToSpace, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      if (ZinMirDilatedConv::NeedsExtraPadRemoval((uint64_t)(v224 + 6), (int *)&v268, v238))
      {
        v241 = v150;
        v194 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v226 + 32))(v226, 0, 0);
        v195 = *(_DWORD *)(v237 + 504);
        v196 = *(_DWORD *)(v237 + 512);
        v197 = v268;
        v198 = HIDWORD(v268);
        v257 = ZinDivRoundUp(*(int *)(v237 + 508), (int)v268);
        v199 = (int)v268;
        *(_QWORD *)v255 = *(int *)(v237 + 508);
        v253 = ZinDivRoundUp(*(_QWORD *)(v194 + 72), (int)v268);
        *(_QWORD *)v248 = (int)v268;
        v250 = *(ZinMirConvUtils **)(v194 + 72);
        v247 = ZinDivRoundUp(*(int *)(v237 + 516), SHIDWORD(v268));
        v200 = SHIDWORD(v268);
        v244 = *(int *)(v237 + 516);
        v201 = ZinDivRoundUp(*(_QWORD *)(v194 + 64), SHIDWORD(v268));
        v202 = SHIDWORD(v268);
        v203 = *(_QWORD *)(v194 + 64);
        v204 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)BatchToSpace + 32))(BatchToSpace, 0, 0);
        v205 = v196 % v198;
        v206 = v195 % v197;
        *(_QWORD *)&__src_16[1] = *(_QWORD *)(v204 + 80);
        v207 = *(_OWORD *)(v204 + 64);
        __src = *(int64x2_t *)(v204 + 48);
        *(_QWORD *)&__src_16[0] = v203 + v244 - (v247 * v200 + v201 * v202 + v205) + v207;
        *((_QWORD *)&__src_16[0] + 1) = (char *)v250
                                      + *(_QWORD *)v255
                                      - v257 * v199
                                      - v253 * *(_QWORD *)v248
                                      - v206
                                      + *((_QWORD *)&v207 + 1);
        v208 = *((_QWORD *)BatchToSpace + 2);
        (*(void (**)(std::vector<int> *__return_ptr, _QWORD *, _QWORD))(v264[0] + 16))(&v302, v264, 0);
        v209 = (*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)BatchToSpace + 32))(BatchToSpace, 0, 0);
        __p[1] = 0;
        __p[0] = 0;
        *(_QWORD *)v277 = v205;
        *(_QWORD *)&v277[8] = v206;
        *(_OWORD *)&v277[16] = xmmword_207A80930;
        *(int64x2_t *)&v277[32] = vdupq_n_s64(1uLL);
        *(_OWORD *)&v277[48] = *(_OWORD *)&v277[32];
        View = (ZinIrOpLayer *)ZinBuilder::CreateView(v208, (uint64_t)&v302, v209, (__int128 *)__src.i8, (uint64_t)__p);
        if (SHIBYTE(v302.__end_cap_.__value_) < 0)
          operator delete(v302.__begin_);
        v299 = (int **)BatchToSpace;
        v300 = (uint64_t)&v299;
        v301 = 1;
        Layer2TDMapper::SourceLayer::SourceLayer(&v302, &v300);
        ZinIrOpLayerGraph::AddNode(a1, View, (ZinIrOpLayer ***)&v302);
        v302.__begin_ = (std::vector<int>::pointer)&unk_24C02BB18;
        if (v302.__end_)
        {
          v302.__end_cap_.__value_ = v302.__end_;
          operator delete(v302.__end_);
        }
        ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)BatchToSpace, (uint64_t)View, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
        v150 = v241;
      }
      else
      {
        View = BatchToSpace;
      }
    }
    __src = vdupq_n_s64(1uLL);
    *(_QWORD *)&__src_16[0] = 1;
    *(_QWORD *)&v210 = 0x100000001;
    *((_QWORD *)&v210 + 1) = 0x100000001;
    *(_OWORD *)((char *)__src_16 + 8) = v210;
    *((_QWORD *)&__src_16[1] + 1) = 0x100000001;
    *(_QWORD *)v291 = 0;
    v290 = 0uLL;
    *(_OWORD *)&v291[8] = v210;
    *(_DWORD *)&v291[24] = 2;
    v291[28] = 0;
    *(_DWORD *)v292 = 1065353216;
    v292[4] = 0;
    *(_DWORD *)&v292[8] = 0;
    if (ZinMirDilatedConv::NeedDownsample((int *)&v268, v238, (uint64_t)&__src))
    {
      v211 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v226 + 32))(v226, 0, 0)
                       + 88);
      (*(void (**)(void **__return_ptr, ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)View + 80))(__p, View, 0, 0);
      v212 = (char *)operator new(0x78uLL);
      v302.__end_ = (std::vector<int>::pointer)(v212 + 120);
      v302.__end_cap_.__value_ = (int *)(v212 + 120);
      v213 = *(_OWORD *)&v277[64];
      *((_OWORD *)v212 + 4) = *(_OWORD *)&v277[48];
      *((_OWORD *)v212 + 5) = v213;
      *((_OWORD *)v212 + 6) = v278;
      *((_DWORD *)v212 + 28) = v279;
      v214 = *(_OWORD *)v277;
      *(_OWORD *)v212 = *(_OWORD *)__p;
      *((_OWORD *)v212 + 1) = v214;
      v215 = *(_OWORD *)&v277[32];
      *((_OWORD *)v212 + 2) = *(_OWORD *)&v277[16];
      *((_OWORD *)v212 + 3) = v215;
      v302.__begin_ = (std::vector<int>::pointer)v212;
      Pool = (ZinIrOpLayer *)ZinBuilder::CreatePool(v222, (uint64_t)v264, (uint64_t *)&v302, (uint64_t)&__src, v211);
      if (v302.__begin_)
      {
        v302.__end_ = v302.__begin_;
        operator delete(v302.__begin_);
      }
      v300 = *((_QWORD *)v228 + 25);
      v302.__begin_ = (std::vector<int>::pointer)&v300;
      v302.__end_ = (std::vector<int>::pointer)1;
      Layer2TDMapper::SourceLayer::SourceLayer(__p, &v302);
      v217 = ZinIrOpLayerGraph::AddNode(a1, Pool, (ZinIrOpLayer ***)__p);
      __p[0] = &unk_24C02BB18;
      if (__p[1])
      {
        *(void **)v277 = __p[1];
        operator delete(__p[1]);
      }
      v150 &= v217 & ZinIrOpLayerGraph::AddEdge((uint64_t)a1, (uint64_t)View, (uint64_t)Pool, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    }
    else
    {
      Pool = View;
    }
    memset(v258, 0, sizeof(v258));
    v259 = 1065353216;
    v218 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)a1, (uint64_t **)v228, Pool, v258);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v258);
    if ((v150 & v218 & ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)a1, v228, 0) & 1) == 0)
      ZinAssertImpl("ANE internal failure: dilated conv graph manipulation error");
    v219 = v260;
    v260 = 0;
    if (v219)
    {
      ZinIrKernel::~ZinIrKernel(v219);
      MEMORY[0x20BD002F8]();
    }
    v220 = v270;
    v270 = 0;
    if (v220)
    {
      ZinIrKernel::~ZinIrKernel(v220);
      MEMORY[0x20BD002F8]();
    }
    v143 = 0;
  }
  __p[0] = v266;
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((_QWORD)v271)
  {
    *((_QWORD *)&v271 + 1) = v271;
    operator delete((void *)v271);
  }
  if (v262[0])
  {
    v262[1] = v262[0];
    operator delete(v262[0]);
  }
  v264[0] = off_24C01FBB0;
  if (v265 < 0)
    operator delete((void *)v264[1]);
  return v143;
}

void sub_2070155B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,ZinIrKernel *a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  void *__p;
  uint64_t a71;
  uint64_t v71;
  void *v73;

  *(_QWORD *)(v71 - 152) = &unk_24C02BB18;
  v73 = *(void **)(v71 - 144);
  if (v73)
  {
    *(_QWORD *)(v71 - 136) = v73;
    operator delete(v73);
  }
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)&a69, 0);
  *(_QWORD *)(v71 - 224) = &a64;
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)(v71 - 224));
  if (__p)
  {
    a71 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  a56 = (uint64_t)off_24C01FBB0;
  if (a62 < 0)
    operator delete(a57);
  _Unwind_Resume(a1);
}

uint64_t ZinMirDilatedConv::NeedsExtraPadRemoval(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = *a2;
  v5 = a3[12] % (int)v3 || a3[13] % (int)v3 || (v4 = a2[1], a3[14] % v4) || a3[15] % v4 != 0;
  if (*(_QWORD *)(a1 + 24) % v3)
    v6 = 1;
  else
    v6 = *(_QWORD *)(a1 + 16) % a2[1] != 0;
  return v5 | v6;
}

uint64_t ZinMirDilatedConv::NeedDownsample(int *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  int v7;
  int v9;

  result = 0;
  *(_QWORD *)(a3 + 84) = 2;
  *(_BYTE *)(a3 + 92) = 0;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_BYTE *)(a3 + 100) = 0;
  if (*a1 >= 2)
  {
    v5 = a2[6];
    if (v5 >= 2 && a2[9] == 1)
    {
      *(_DWORD *)(a3 + 24) = v5;
      result = 1;
    }
    else
    {
      result = 0;
    }
  }
  if (a1[1] >= 2)
  {
    v7 = a2[7];
    if (v7 >= 2 && a2[10] == 1)
    {
      *(_DWORD *)(a3 + 28) = v7;
      result = 1;
    }
  }
  if (a1[2] >= 2)
  {
    v9 = a2[8];
    if (v9 >= 2 && a2[11] == 1)
    {
      *(_DWORD *)(a3 + 32) = v9;
      return 1;
    }
  }
  return result;
}

uint64_t ZinMirDilatedConv::DecomposeDilationFactorX@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  void *__p;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)&__p, (uint64_t *)(a1 + 1656), (uint64_t *)(a1 + 1688), 4uLL);
  if (!a2)
    ZinAssertImpl("Error: Dilation factor cannot be 0.");
  if (Factorize(a2, (int **)&__p, &v18))
  {
    v5 = 1;
  }
  else
  {
    if ((_QWORD)v19 == *((_QWORD *)&v18 + 1)
      || (v6 = (char **)(*((_QWORD *)&v18 + 1) + 8 * ((unint64_t)v20 >> 10)),
          v7 = *v6,
          v8 = &(*v6)[4 * (v20 & 0x3FF)],
          v9 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + (((*((_QWORD *)&v20 + 1) + (_QWORD)v20) >> 7) & 0x1FFFFFFFFFFFFF8))
             + 4 * ((*((_QWORD *)&v20 + 1) + v20) & 0x3FF),
          v8 == (char *)v9))
    {
      v10 = 1;
    }
    else
    {
      v10 = 1;
      do
      {
        v12 = *(_DWORD *)v8;
        v8 += 4;
        v11 = v12;
        if (v8 - v7 == 4096)
        {
          v13 = v6[1];
          ++v6;
          v7 = v13;
          v8 = v13;
        }
        v10 *= v11;
      }
      while (v8 != (char *)v9);
    }
    v5 = a2 / v10;
  }
  std::deque<int>::deque(a3, &v18);
  *(_DWORD *)(a3 + 48) = v5;
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return std::deque<int>::~deque[abi:ne180100](&v18);
}

void sub_207015CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::deque<int>::~deque[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__push_back_slow_path<ZinMirDilatedConv::DilatedConvDecomposedDesc>(uint64_t *a1, const ZinMirDilatedConv::DilatedConvDecomposedDesc *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xBE82FA0BE82FA0)
    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x82FA0BE82FA0BE83 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x5F417D05F417D0)
    v9 = 0xBE82FA0BE82FA0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinPoolValidator<ZinIrPoolUnitInfo,ZinIrTensorInfo>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)&v10[344 * v4];
  v16 = &v10[344 * v9];
  ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v14, a2);
  v15 = (char *)v14 + 344;
  std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<ZinMirDilatedConv::DilatedConvDecomposedDesc>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_207015E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ZinMirDilatedConv::DilatedConvDecomposedDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>,std::reverse_iterator<ZinMirDilatedConv::DilatedConvDecomposedDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  ZinMirDilatedConv::DilatedConvDecomposedDesc *v12;

  v10 = 0;
  v11 = a7 - 344;
  while (a3 + v10 != a5)
  {
    v12 = (ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v11 + v10);
    v10 -= 344;
    ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc(v12, (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<ZinMirDilatedConv::DilatedConvDecomposedDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 344;
    ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(i - 344));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__emplace_unique_key_args<ZinIrDims3D,std::piecewise_construct_t const&,std::tuple<ZinIrDims3D const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _QWORD **a4)
{
  void **v6;
  _QWORD *v7;
  uint64_t **v8;
  int v9;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__find_equal<ZinIrDims3D>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *((_DWORD *)*a4 + 2);
    v7[4] = **a4;
    *((_DWORD *)v7 + 10) = v9;
    v7[7] = 0;
    v7[8] = 0;
    v7[6] = 0;
    std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::__find_equal<ZinIrDims3D>(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int *v7;
  int *v8;
  _QWORD *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a3 + 1;
    v8 = a3 + 2;
    do
    {
      while (1)
      {
        v9 = (_QWORD *)v4;
        v10 = (int *)(v4 + 32);
        v17 = a3;
        v18 = v7;
        v19 = v8;
        v11 = (int *)(v4 + 36);
        v12 = (int *)(v4 + 40);
        v14 = (int *)(v4 + 32);
        v15 = (int *)(v4 + 36);
        v16 = (int *)(v4 + 40);
        if ((std::__tuple_compare_three_way[abi:ne180100]<int const&,int const&,int const&,int const&,int const&,int const&,0ul,1ul,2ul>(&v17, &v14) & 0x80) == 0)break;
        v4 = *v9;
        v5 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      v17 = v10;
      v18 = v11;
      v19 = v12;
      v14 = a3;
      v15 = v7;
      v16 = v8;
      if ((std::__tuple_compare_three_way[abi:ne180100]<int const&,int const&,int const&,int const&,int const&,int const&,0ul,1ul,2ul>(&v17, &v14) & 0x80) == 0)break;
      v5 = v9 + 1;
      v4 = v9[1];
    }
    while (v4);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v9;
  return v5;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<int const&,int const&,int const&,int const&,int const&,int const&,0ul,1ul,2ul>(int **a1, int **a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;

  v2 = **a1;
  v3 = **a2;
  v4 = v2 == v3;
  if (v2 < v3)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = 1;
  if (v4)
  {
    v6 = *a1[1];
    v7 = *a2[1];
    v8 = v6 == v7;
    v5 = v6 < v7 ? 0xFFFFFFFFLL : 1;
    if (v8)
    {
      v9 = *a1[2];
      v10 = *a2[2];
      v11 = v9 == v10;
      if (v9 < v10)
        LODWORD(v5) = -1;
      else
        LODWORD(v5) = 1;
      if (v11)
        return 0;
      else
        return v5;
    }
  }
  return v5;
}

void std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__assign_with_size[abi:ne180100]<ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__vdeallocate((void **)a1);
    if (a4 > 0xBE82FA0BE82FA0)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5F417D05F417D06 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x5F417D05F417D0)
      v11 = 0xBE82FA0BE82FA0;
    else
      v11 = v10;
    std::vector<LargeStrideConvPoolDecomposedDesc>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x82FA0BE82FA0BE83 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v16 - 344));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_2070162B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2070162C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v3 - 344));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ZinMirDilatedConv::DilatedConvDecomposedDesc>,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*,ZinMirDilatedConv::DilatedConvDecomposedDesc*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      ZinMirDilatedConv::DilatedConvDecomposedDesc::DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(a4 + v7), (const ZinMirDilatedConv::DilatedConvDecomposedDesc *)(a2 + v7));
      v7 += 344;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_207016380(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 344;
    do
    {
      ZinMirDilatedConv::DilatedConvDecomposedDesc::~DilatedConvDecomposedDesc((ZinMirDilatedConv::DilatedConvDecomposedDesc *)(v4 + v2));
      v2 -= 344;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,ZinMirDilatedConv::DilatedConvDecomposedDesc *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      ZinMirDilatedConv::DilatedConvDecomposedDesc::operator=(a3, v4);
      v4 += 344;
      a3 += 344;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::deque<int>::__move_assign(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 512;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 1024;
LABEL_7:
    a1[4] = v8;
  }
  std::deque<int>::shrink_to_fit(a1);
  result = std::__split_buffer<int *>::operator=((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void std::deque<int>::shrink_to_fit(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<int>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  std::__split_buffer<int *>::shrink_to_fit((uint64_t)a1);
}

uint64_t std::deque<int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<int>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__split_buffer<int *>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t std::__split_buffer<int *>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<int *>::shrink_to_fit(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ZinIrPaddingMode>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::deque<int>::deque(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 10));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 10));
  }
  else
  {
    v8 = &(*v7)[4 * (v4 & 0x3FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 10));
    v11 = (char *)(*(_QWORD *)v10 + 4 * (v9 & 0x3FF));
  }
  std::deque<int>::__append<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_207016884(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<unsigned long *>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<int>::__append<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>,0>(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 2) + ((a4 - (char *)a2) << 7) - ((a3 - *a2) >> 2);
  return std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(a1, a2, a3, v5);
}

_QWORD *std::deque<int>::__append_with_size[abi:ne180100]<std::__deque_iterator<int,int const*,int const&,int const* const*,long,1024l>>(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;
  int v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 7) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    std::deque<int>::__add_back_capacity(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 10));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 4 * (v11 & 0x3FF);
  v24[0] = v8 + 8 * (v11 >> 10);
  v24[1] = v14;
  result = std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100]((uint64_t)v24, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = *a2;
        v20 = (_DWORD *)v14;
        do
        {
          v21 = *(_DWORD *)a3;
          a3 += 4;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            v22 = a2[1];
            ++a2;
            v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_DWORD *)v18);
      }
      v17 += (v18 - v14) >> 2;
      if (v13 == result)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void std::deque<int>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x3FF) != 0)
    v6 = (v5 >> 10) + 1;
  else
    v6 = v5 >> 10;
  v7 = a1[4];
  if (v6 >= v7 >> 10)
    v8 = v7 >> 10;
  else
    v8 = v6;
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 1023;
          else
            v64 = 1024;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 10);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 10;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<unsigned long *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_207016F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<int,int *,int &,int **,long,1024l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 2);
    if (v4 < 1)
      result -= (unint64_t)(1023 - v4) >> 10;
    else
      result += (unint64_t)v4 >> 10;
  }
  return result;
}

void std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 48);
    std::vector<ZinMirDilatedConv::DilatedConvDecomposedDesc>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::__map_value_compare<ZinIrDims3D,std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>,std::less<ZinIrDims3D>,true>,std::allocator<std::__value_type<ZinIrDims3D,std::vector<ZinTensorDimensions>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t ZinParseRadiusSearchUnit(CFDictionaryRef *a1, uint64_t a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  CFTypeID v10;
  uint64_t result;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int valuePtr;

  Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, CFSTR("Params"));
  if (Value && (v6 = Value, v7 = CFGetTypeID(Value), v7 == CFDictionaryGetTypeID()))
  {
    v8 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("Radius"));
    if (v8)
    {
      v9 = v8;
      v10 = CFGetTypeID(v8);
      if (v10 == CFNumberGetTypeID())
      {
        valuePtr = 0;
        CFNumberGetValue(v9, kCFNumberFloatType, &valuePtr);
        result = 0;
        *(_DWORD *)(a2 + 80) = valuePtr;
        return result;
      }
    }
    v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v20)
      ZinParseRadiusSearchUnit(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  else
  {
    v12 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v12)
      ZinParseRadiusSearchUnit(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  ZinIrUnitStatus::SetError(a3, CFSTR("InvalidParamSyntax"));
  return 3;
}

void ZinParseRadiusSearchUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing RadiusSearch parameter dictionary\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing RadiusSearch radius value\n", a5, a6, a7, a8, 0);
}

uint64_t ZinParseScaledEWUnit(const __CFDictionary *a1, uint64_t a2, CFArrayRef *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  int v11;
  const __CFString *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("Params"));
  if (!Value || (v6 = Value, v7 = CFGetTypeID(Value), v7 != CFDictionaryGetTypeID()))
  {
    v12 = CFSTR("InvalidParamSyntax");
LABEL_11:
    ZinIrUnitStatus::SetError(a3, v12);
    return 3;
  }
  v8 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("Type"));
  if (!v8 || (v9 = v8, v10 = CFGetTypeID(v8), v10 != CFStringGetTypeID()))
  {
    v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v13)
      ZinParseScaledEWUnit(v13, v14, v15, v16, v17, v18, v19, v20);
LABEL_10:
    v12 = CFSTR("InvalidUnitScaledElementWiseType");
    goto LABEL_11;
  }
  if (!ZinCFStringEquals(v9, CFSTR("Add")))
  {
    if (ZinCFStringEquals(v9, CFSTR("Mult")))
    {
      v11 = 2;
      goto LABEL_21;
    }
    if (ZinCFStringEquals(v9, CFSTR("Max")))
    {
      v11 = 4;
      goto LABEL_21;
    }
    if (ZinCFStringEquals(v9, CFSTR("Min")))
    {
      v11 = 5;
      goto LABEL_21;
    }
    if (ZinCFStringEquals(v9, CFSTR("SumSquare")))
    {
      v11 = 3;
      goto LABEL_21;
    }
    v22 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v22)
      ZinParseScaledEWUnit(v22, v23, v24, v25, v26, v27, v28, v29);
    goto LABEL_10;
  }
  v11 = 1;
LABEL_21:
  *(_DWORD *)(a2 + 80) = v11;
  v31 = 0;
  v30 = 0;
  result = ZinGetFloatFormat(v6, CFSTR("PreScaleType"), (int *)&v31 + 1, a3);
  if ((_DWORD)result != 3)
  {
    result = ZinGetFloatFormat(v6, CFSTR("ScaleType"), (int *)&v31, a3);
    if ((_DWORD)result != 3)
    {
      if (!CFDictionaryGetValue(v6, CFSTR("BiasType")))
      {
LABEL_26:
        ZinParseFloatingPoint(v6, CFSTR("PreScale"), (_DWORD *)&v31 + 1, (float *)(a2 + 88), 1.0);
        ZinParseFloatingPoint(v6, CFSTR("Scale"), &v31, (float *)(a2 + 84), 1.0);
        ZinParseBoolean(v6, CFSTR("NegateSrc1"), (BOOL *)(a2 + 96));
        ZinParseBoolean(v6, CFSTR("NegateSrc2"), (BOOL *)(a2 + 97));
        return 0;
      }
      result = ZinGetFloatFormat(v6, CFSTR("BiasType"), &v30, a3);
      if ((_DWORD)result != 3)
      {
        ZinParseFloatingPoint(v6, CFSTR("Bias"), &v30, (float *)(a2 + 92), 0.0);
        goto LABEL_26;
      }
    }
  }
  return result;
}

void ZinParseScaledEWUnit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Missing required type in Scaled Element-Wise parameter dictionary.\n", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "Unknown scaled element wise type!\n", a5, a6, a7, a8, 0);
}

__CFDictionary *ZinCreatePixelShuffleUnit(const ZinIrPixelShuffleUnitInfo *a1)
{
  __CFDictionary *Unit;
  __CFDictionary *Mutable;
  int v5;

  Unit = ZinCreateUnit(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v5 = 31;
  ZinAddSpaceTransformFactorToParamsDict(Mutable, &v5, (uint64_t)a1 + 80);
  CFDictionaryAddValue(Unit, CFSTR("Params"), Mutable);
  CFRelease(Mutable);
  return Unit;
}

__int128 *ZinIrHalH14c::GetParams(ZinIrHalH14c *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  void *v11;
  _BYTE *v12;
  void *v13;
  _BYTE *v14;
  void *v15;
  _BYTE *v16;
  void *v17;
  _BYTE *v18;
  void *v19;
  _BYTE *v20;
  void *v21;
  _BYTE *v22;
  void *v23;
  _BYTE *v24;
  void *v25;
  _BYTE *v26;
  void *v27;
  _BYTE *v28;
  void *v29;
  _BYTE *v30;
  _OWORD v31[3];
  int v32;
  _OWORD v33[7];
  _OWORD v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[3];
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  int v56;
  int64x2_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int64x2_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int64x2_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int64x2_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int64x2_t v73;
  uint64_t v74;
  int v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  int v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  int64x2_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  _QWORD v97[3];
  int v98;
  _QWORD v99[3];
  int v100;
  _QWORD v101[3];
  int v102;
  _QWORD v103[3];
  int v104;
  _QWORD v105[3];
  int v106;
  _QWORD v107[3];
  int v108;
  _QWORD v109[3];
  int v110;
  _QWORD v111[3];
  int v112;
  _QWORD v113[3];
  int v114;
  _QWORD v115[3];
  int v116;
  _QWORD v117[3];
  _OWORD v118[10];
  uint64_t v119;
  _OWORD v120[7];
  int v121;
  _OWORD v122[2];
  _OWORD v123[2];
  __int128 v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  {
    ZinIrHalH14c::GetParams(void)const::ZinIrHalH14cParameters = xmmword_207A988B0;
    dword_254527EB0 = 8;
    unk_254527EB8 = xmmword_207A7D320;
    unk_254527EC8 = xmmword_207A7E070;
    unk_254527ED8 = xmmword_207A7E080;
    unk_254527EE8 = xmmword_207A7D4C0;
    unk_254527EF8 = xmmword_207A7E090;
    unk_254527F08 = xmmword_207A7E080;
    unk_254527F18 = xmmword_207A7D370;
    unk_254527F28 = xmmword_207A7E0A0;
    unk_254527F38 = xmmword_207A7E0B0;
    unk_254527F48 = xmmword_207A7D3A0;
    unk_254527F58 = vdupq_n_s64(4uLL);
    qword_254527F68 = 4;
    xmmword_254527F70 = xmmword_207AB26F8;
    unk_254527F80 = unk_207AB2708;
    xmmword_254527F90 = xmmword_207AB26F8;
    unk_254527FA0 = unk_207AB2708;
    qword_254527FC0 = 4;
    xmmword_254527FB0 = xmmword_207AB2718;
    xmmword_254527FC8 = xmmword_207A7D3B0;
    xmmword_254527FD8 = xmmword_207A7D3C0;
    xmmword_254527FE8 = xmmword_207A7D3C0;
    xmmword_254527FF8 = xmmword_207A7D3C0;
    xmmword_254528008 = xmmword_207A7D3D0;
    xmmword_254528018 = xmmword_207A7D3E0;
    xmmword_254528028 = xmmword_207A7D3F0;
    xmmword_254528038 = xmmword_207A7D400;
    xmmword_254528048 = xmmword_207A7D410;
    xmmword_254528058 = xmmword_207A7D4E0;
    xmmword_254528068 = xmmword_207A7D430;
    xmmword_254528078 = xmmword_207A7D440;
    xmmword_254528088 = xmmword_207A7D450;
    xmmword_254528098 = xmmword_207A7E0D0;
    xmmword_2545280A8 = (__int128)vdupq_n_s64(0x40uLL);
    xmmword_2545280B8 = xmmword_207A7E120;
    xmmword_2545280C8 = xmmword_207A7D480;
    xmmword_2545280D8 = xmmword_207A7D490;
    xmmword_2545280E8 = xmmword_207A7D4A0;
    xmmword_2545280F8 = xmmword_207A7E0E0;
    xmmword_254528108 = xmmword_207A8AA20;
    qword_254528118 = 0;
    word_254528120 = 256;
    xmmword_254528128 = xmmword_207A7D4C0;
    xmmword_254528138 = xmmword_207A7D4D0;
    xmmword_254528148 = xmmword_207A7D4E0;
    qword_254528158 = 0x10000;
    byte_254528160 = 122;
    xmmword_254528168 = xmmword_207A7E100;
    dword_254528178 = 520097776;
    qword_25452817C = 0xFFFFFFEB0000000BLL;
    xmmword_254528188 = xmmword_207A7D500;
    xmmword_254528198 = xmmword_207A7D510;
    xmmword_2545281A8 = xmmword_207A7D520;
    v92 = vdupq_n_s64(8uLL);
    v93 = xmmword_207A7E110;
    v94 = xmmword_207A7E120;
    v95 = xmmword_207A7D490;
    std::vector<std::pair<unsigned long,unsigned long>>::vector[abi:ne180100](&qword_2545281B8, (uint64_t)&v92, 4uLL);
    xmmword_2545281D0 = xmmword_207A7E130;
    unk_2545281E0 = xmmword_207A7D540;
    xmmword_2545281F0 = (__int128)vdupq_n_s64(0x20uLL);
    unk_254528200 = xmmword_207A7D370;
    unk_254528210 = vdupq_n_s64(8uLL);
    unk_254528220 = xmmword_207A7D550;
    unk_254528230 = xmmword_207A7D560;
    unk_254528240 = vdupq_n_s64(0x100uLL);
    unk_254528250 = vdupq_n_s64(0x80uLL);
    unk_254528260 = xmmword_207A7D570;
    unk_254528270 = xmmword_207A7D580;
    unk_254528280 = xmmword_207A7D590;
    unk_254528290 = xmmword_207A7D5A0;
    unk_2545282A0 = xmmword_207A7D5B0;
    unk_2545282B0 = vdupq_n_s64(2uLL);
    unk_2545282C0 = xmmword_207A7D3C0;
    unk_2545282D0 = vdupq_n_s64(0x4000uLL);
    unk_2545282E0 = xmmword_207A7D5C0;
    unk_2545282F0 = 257;
    byte_2545282F6 = 0;
    unk_2545282F2 = 0;
    unk_2545282F7 = 1;
    unk_2545282F9 = 16843009;
    byte_2545282FD = 1;
    dword_2545282FE = 16842752;
    byte_254528302 = 1;
    *(_QWORD *)&algn_254528303[5] = 0;
    *(_QWORD *)algn_254528303 = 0;
    byte_254528310 = 1;
    byte_254528315 = 0;
    unk_254528311 = 0;
    qword_254528316 = 0x101010101010101;
    word_25452831E = 0;
    unk_254528320 = xmmword_207A7D4C0;
    unk_254528330 = xmmword_207A7D5E0;
    unk_254528340 = 40;
    unk_254528350 = 0;
    unk_254528348 = 0;
    word_254528358 = 1;
    dword_25452835A = 16843009;
    word_25452835E = 257;
    byte_254528360 = 0;
    *(_QWORD *)&algn_254528361[7] = 0;
    byte_254528370 = 0;
    unk_254528371 = 16843009;
    unk_254528379 = 0;
    unk_25452837B = 16842753;
    unk_25452837F = 0;
    byte_25452838B = 1;
    unk_254528387 = 16843009;
    unk_25452838C = 0x100000100010000;
    word_254528394 = 256;
    dword_254528396 = 0;
    unk_2545283A0 = 128;
    unk_2545283A8 = -1;
    unk_2545283B0 = -1;
    word_2545283B8 = 0;
    unk_2545283BC = 1;
    unk_2545283C0 = 0x10000;
    byte_2545283C4 = 1;
    unk_2545283CD = 0;
    unk_2545283C5 = 0;
    unk_2545283D1 = 1542;
    byte_2545283D5 = 1;
    dword_2545283D6 = 0;
    std::string::basic_string[abi:ne180100]<0>(&qword_2545283E0, "Simple");
    qword_2545283F8 = 50331648;
    dword_254528400 = 1071225242;
    *(_QWORD *)algn_254528404 = 14;
    *(_OWORD *)&algn_254528404[12] = xmmword_207A7D5F0;
    *(int64x2_t *)&algn_254528404[28] = vdupq_n_s64(0x40uLL);
    *(_OWORD *)&algn_254528404[44] = xmmword_207A7D530;
    qword_254528440 = 8;
    byte_254528448 = 0;
    unk_25452844C = 0xF3E800000;
    byte_254528454 = 1;
    v124 = xmmword_207A7D610;
    std::vector<ZinIrPaddingMode>::vector[abi:ne180100](&qword_254528458, &v124, 4uLL);
    v122[0] = xmmword_207AB2730;
    v122[1] = unk_207AB2740;
    v123[0] = xmmword_207AB2750;
    *(_OWORD *)((char *)v123 + 12) = *(__int128 *)((char *)&xmmword_207AB2750 + 12);
    std::vector<ZinIrPoolingMode>::vector[abi:ne180100](&qword_254528470, v122, 0xFuLL);
    v121 = 25;
    v120[4] = xmmword_207AB27AC;
    v120[5] = unk_207AB27BC;
    v120[6] = xmmword_207AB27CC;
    v120[0] = xmmword_207AB276C;
    v120[1] = unk_207AB277C;
    v120[2] = xmmword_207AB278C;
    v120[3] = unk_207AB279C;
    std::vector<ZinIrNeuronType>::vector[abi:ne180100](&qword_254528488, v120, 0x1DuLL);
    v119 = 0x2A00000029;
    v118[6] = xmmword_207AB2840;
    v118[7] = unk_207AB2850;
    v118[8] = xmmword_207AB2860;
    v118[9] = unk_207AB2870;
    v118[2] = xmmword_207AB2800;
    v118[3] = unk_207AB2810;
    v118[4] = xmmword_207AB2820;
    v118[5] = unk_207AB2830;
    v118[0] = xmmword_207AB27E0;
    v118[1] = unk_207AB27F0;
    std::vector<ZinIrNonLinearMode>::vector[abi:ne180100](&qword_2545284A0, v118, 0x2AuLL);
    v88 = 2;
    v89 = xmmword_207A7D620;
    v90 = 0x1100000002;
    v91 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v29, &v88, 1uLL);
    v92.i32[0] = 641877825;
    v93 = 0uLL;
    v92.i64[1] = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(&v92.i64[1], v29, (uint64_t)v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (_BYTE *)v29) >> 3));
    v84 = 2;
    v85 = xmmword_207A7D620;
    v86 = 0x1100000002;
    v87 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v27, &v84, 1uLL);
    LODWORD(v94) = 759318337;
    v95 = 0uLL;
    *((_QWORD *)&v94 + 1) = 0;
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>((_QWORD *)&v94 + 1, v27, (uint64_t)v28, 0xCCCCCCCCCCCCCCCDLL * ((v28 - (_BYTE *)v27) >> 3));
    v80 = 2;
    v81 = xmmword_207A7D620;
    v82 = 0x1100000002;
    v83 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v25, &v80, 1uLL);
    v96 = 792872769;
    memset(v97, 0, sizeof(v97));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v97, v25, (uint64_t)v26, 0xCCCCCCCCCCCCCCCDLL * ((v26 - (_BYTE *)v25) >> 3));
    v76 = 2;
    v77 = xmmword_207A7D620;
    v78 = 0x1100000002;
    v79 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v23, &v76, 1uLL);
    v98 = 2084718401;
    memset(v99, 0, sizeof(v99));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v99, v23, (uint64_t)v24, 0xCCCCCCCCCCCCCCCDLL * ((v24 - (_BYTE *)v23) >> 3));
    v72 = 10;
    v73 = vdupq_n_s64(1uLL);
    v74 = 0x800000001;
    v75 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v21, &v72, 1uLL);
    v100 = 642527542;
    memset(v101, 0, sizeof(v101));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v101, v21, (uint64_t)v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (_BYTE *)v21) >> 3));
    v68 = 3;
    v69 = vdupq_n_s64(1uLL);
    v70 = 0x700000002;
    v71 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v19, &v68, 1uLL);
    v102 = 642527336;
    memset(v103, 0, sizeof(v103));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v103, v19, (uint64_t)v20, 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)v19) >> 3));
    v64 = 3;
    v65 = vdupq_n_s64(1uLL);
    v66 = 0x700000002;
    v67 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v17, &v64, 1uLL);
    v104 = 759967848;
    memset(v105, 0, sizeof(v105));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v105, v17, (uint64_t)v18, 0xCCCCCCCCCCCCCCCDLL * ((v18 - (_BYTE *)v17) >> 3));
    v60 = 3;
    v61 = vdupq_n_s64(1uLL);
    v62 = 0x700000002;
    v63 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v15, &v60, 1uLL);
    v106 = 793522280;
    memset(v107, 0, sizeof(v107));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v107, v15, (uint64_t)v16, 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)v15) >> 3));
    v56 = 3;
    v57 = vdupq_n_s64(1uLL);
    v58 = 0x700000002;
    v59 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v13, &v56, 1uLL);
    v108 = 2085367912;
    memset(v109, 0, sizeof(v109));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v109, v13, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - (_BYTE *)v13) >> 3));
    v52 = 3;
    v53 = xmmword_207A7D620;
    v54 = 0x1300000002;
    v55 = 0;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v11, &v52, 1uLL);
    v110 = 642934849;
    memset(v111, 0, sizeof(v111));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v111, v11, (uint64_t)v12, 0xCCCCCCCCCCCCCCCDLL * ((v12 - (_BYTE *)v11) >> 3));
    v48 = 3;
    v49 = xmmword_207A7D620;
    v50 = 0x1300000002;
    v51 = 1;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v9, &v48, 1uLL);
    v112 = 760375361;
    memset(v113, 0, sizeof(v113));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v113, v9, (uint64_t)v10, 0xCCCCCCCCCCCCCCCDLL * ((v10 - (_BYTE *)v9) >> 3));
    v44 = 3;
    v45 = xmmword_207A7D620;
    v46 = 0x1300000002;
    v47 = 2;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&v7, &v44, 1uLL);
    v114 = 793929793;
    memset(v115, 0, sizeof(v115));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v115, v7, (uint64_t)v8, 0xCCCCCCCCCCCCCCCDLL * ((v8 - (_BYTE *)v7) >> 3));
    v40 = 3;
    v41 = xmmword_207A7D620;
    v42 = 0x1300000002;
    v43 = 3;
    std::vector<ZinMirInterchangeInfo>::vector[abi:ne180100](&__p, &v40, 1uLL);
    v116 = 2085775425;
    memset(v117, 0, sizeof(v117));
    std::vector<ZinMirInterchangeInfo>::__init_with_size[abi:ne180100]<ZinMirInterchangeInfo*,ZinMirInterchangeInfo*>(v117, __p, (uint64_t)v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)__p) >> 3));
    std::map<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>::map[abi:ne180100]((uint64_t)&unk_2545284B8, (unsigned int *)&v92, 13);
    word_2545284D0 = 0;
    byte_2545284D2 = 1;
    *(_DWORD *)algn_2545284D3 = 0;
    qword_2545284D8 = 0;
    dword_2545284E0 = 0;
    unk_2545284E8 = 0u;
    word_254528508 = 257;
    qword_254528530 = 8;
    unk_2545284F8 = 0u;
    xmmword_254528510 = xmmword_207AB2888;
    unk_254528520 = unk_207AB2898;
    unk_254528538 = xmmword_207A988C0;
    v38[0] = xmmword_207AB28B0;
    v38[1] = unk_207AB28C0;
    v38[2] = xmmword_207AB28D0;
    v39 = 0x41DF4ADD40000000;
    std::vector<double>::vector[abi:ne180100](&qword_254528548, v38, 7uLL);
    v36 = xmmword_207AB28E8;
    v37 = 0x41CE0A6E00000000;
    std::vector<double>::vector[abi:ne180100](&qword_254528560, &v36, 3uLL);
    v34[0] = xmmword_207AB2900;
    v34[1] = unk_207AB2910;
    v35 = 0x41E7D78400000000;
    std::vector<double>::vector[abi:ne180100](&qword_254528578, v34, 5uLL);
    v33[4] = xmmword_207AB2968;
    v33[5] = unk_207AB2978;
    v33[6] = xmmword_207AB2988;
    v33[0] = xmmword_207AB2928;
    v33[1] = unk_207AB2938;
    v33[2] = xmmword_207AB2948;
    v33[3] = unk_207AB2958;
    std::map<double,double>::map[abi:ne180100]((uint64_t)&unk_254528590, (double *)v33, 7);
    xmmword_2545285A8 = xmmword_207A7D640;
    v31[0] = xmmword_207AB2998;
    v31[1] = unk_207AB29A8;
    v31[2] = xmmword_207AB29B8;
    v32 = 27;
    std::vector<ZinKernelFormat>::vector[abi:ne180100](qword_2545285B8, v31, 0xDuLL);
    xmmword_2545285D0 = (__int128)vdupq_n_s64(6uLL);
    unk_2545285E0 = xmmword_207A7D650;
    qword_2545285F0 = 64;
    unk_2545285F8 = 0x101010101010101;
    unk_2545285FE = 0x101010101010101;
    dword_254528608 = 16777473;
    xmmword_254528610 = xmmword_207AB29D0;
    unk_254528620 = unk_207AB29E0;
    xmmword_254528630 = xmmword_207AB29F0;
    unk_254528640 = unk_207AB2A00;
    xmmword_254528670 = xmmword_207AB2A30;
    unk_254528680 = unk_207AB2A40;
    xmmword_254528650 = xmmword_207AB2A10;
    unk_254528660 = unk_207AB2A20;
    word_254528690 = 1;
    byte_254528692 = 0;
    byte_254528698 = 0;
    byte_2545286A0 = 0;
    dword_2545286A8 = 65792;
    dword_2545286B0 = 1056899072;
    word_2545286B4 = 1;
    unk_2545286B8 = xmmword_207A7F3E0;
    byte_2545286C8 = 1;
    qword_2545286D0 = 0xFFFFLL;
    byte_2545286D8 = 0;
    word_2545286E8 = 257;
    byte_2545286EA = 1;
    v3 = 416;
    qword_2545286E0 = 0;
    do
    {
      v4 = *(void **)((char *)&v89 + v3 + 8);
      if (v4)
      {
        *(uint64_t *)((char *)&v90 + v3) = (uint64_t)v4;
        operator delete(v4);
      }
      v3 -= 32;
    }
    while (v3);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
    if (v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v29)
    {
      v30 = v29;
      operator delete(v29);
    }
    __cxa_atexit((void (*)(void *))ZinIrHalParameters::~ZinIrHalParameters, &ZinIrHalH14c::GetParams(void)const::ZinIrHalH14cParameters, &dword_2069AB000);
  }
  return &ZinIrHalH14c::GetParams(void)const::ZinIrHalH14cParameters;
}

void sub_2070184DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  std::__tree<std::__value_type<double,double>,std::__map_value_compare<double,std::__value_type<double,double>,std::less<double>,true>,std::allocator<std::__value_type<double,double>>>::destroy(v32, *(_QWORD **)(v32 + 8));
  if (qword_254528578)
  {
    qword_254528580 = qword_254528578;
    operator delete((void *)qword_254528578);
  }
  if (qword_254528560)
  {
    qword_254528568 = qword_254528560;
    operator delete((void *)qword_254528560);
  }
  if (qword_254528548)
  {
    qword_254528550 = qword_254528548;
    operator delete((void *)qword_254528548);
  }
  std::__tree<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::__map_value_compare<ZinIr4CCFormat,std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>,std::less<ZinIr4CCFormat>,true>,std::allocator<std::__value_type<ZinIr4CCFormat,std::vector<ZinMirInterchangeInfo>>>>::destroy(v31, *(_QWORD **)(v31 + 8));
  v35 = 416;
  while (1)
  {
    v36 = *(void **)((char *)&STACK[0x4B0] + v35 - 24);
    if (v36)
    {
      *(unint64_t *)((char *)&STACK[0x4B0] + v35 - 16) = (unint64_t)v36;
      operator delete(v36);
    }
    v35 -= 32;
    if (!v35)
    {
      if (__p)
        operator delete(__p);
      if (a19)
        operator delete(a19);
      if (a22)
        operator delete(a22);
      if (a25)
        operator delete(a25);
      if (a28)
        operator delete(a28);
      if (a31)
      {
        v33[1] = a31;
        operator delete(a31);
      }
      v37 = (void *)v33[3];
      if (v37)
      {
        v33[4] = v37;
        operator delete(v37);
      }
      v38 = (void *)v33[6];
      if (v38)
      {
        v33[7] = v38;
        operator delete(v38);
      }
      v39 = (void *)v33[9];
      if (v39)
      {
        v33[10] = v39;
        operator delete(v39);
      }
      v40 = (void *)v33[12];
      if (v40)
      {
        v33[13] = v40;
        operator delete(v40);
      }
      v41 = (void *)v33[15];
      if (v41)
      {
        v33[16] = v41;
        operator delete(v41);
      }
      v42 = (void *)v33[18];
      if (v42)
      {
        v33[19] = v42;
        operator delete(v42);
      }
      v43 = (void *)v33[21];
      if (v43)
      {
        v33[22] = v43;
        operator delete(v43);
      }
      if (qword_2545284A0)
      {
        qword_2545284A8 = qword_2545284A0;
        operator delete((void *)qword_2545284A0);
      }
      if (qword_254528488)
      {
        qword_254528490 = qword_254528488;
        operator delete((void *)qword_254528488);
      }
      if (qword_254528470)
      {
        qword_254528478 = qword_254528470;
        operator delete((void *)qword_254528470);
      }
      if (qword_254528458)
      {
        qword_254528460 = qword_254528458;
        operator delete((void *)qword_254528458);
      }
      if (byte_2545283F7 < 0)
        operator delete((void *)qword_2545283E0);
      if (qword_2545281B8)
      {
        qword_2545281C0 = qword_2545281B8;
        operator delete((void *)qword_2545281B8);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20701879C()
{
  JUMPOUT(0x207018658);
}

void sub_2070187AC()
{
  JUMPOUT(0x207018668);
}

void sub_2070187BC()
{
  JUMPOUT(0x207018678);
}

void sub_2070187CC()
{
  JUMPOUT(0x207018688);
}

void sub_2070187DC()
{
  JUMPOUT(0x207018698);
}

void sub_2070187EC()
{
  JUMPOUT(0x2070186A8);
}

void sub_2070187FC()
{
  JUMPOUT(0x2070186B8);
}

void sub_207018814()
{
  JUMPOUT(0x2070186F8);
}

void sub_20701881C()
{
  JUMPOUT(0x207018710);
}

void sub_207018824()
{
  JUMPOUT(0x207018728);
}

void sub_20701882C()
{
  JUMPOUT(0x207018740);
}

void sub_207018834()
{
  JUMPOUT(0x207018758);
}

void sub_20701883C()
{
  JUMPOUT(0x207018770);
}

void sub_207018844()
{
  JUMPOUT(0x207018788);
}

__n128 ZinNEPerf::CalculatePerf(ZinNEPerf *this, ZinPerfDescriptor *a2)
{
  _BYTE *v4;
  unint64_t PostCycles;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 result;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v4 = (_BYTE *)*((_QWORD *)this + 42);
  if (v4[41])
  {
    *((_BYTE *)this + 320) = ZinNEPerf::IsQualifiedForSimulcast(this);
    *((_QWORD *)this + 18) = ZinNEPerf::GetL2BcastCycle(this);
    *((_QWORD *)this + 20) = ZinNEPerf::GetL2WbackCycle(this);
    v4 = (_BYTE *)*((_QWORD *)this + 42);
  }
  if (v4[40])
  {
    *((_QWORD *)this + 21) = ZinNEPerfInfo::GetNumWorkunits((ZinNEPerfInfo *)(v4 + 672));
    ZinNEPerf::GetMACCyclesPerWU(this, (unint64_t *)this + 22);
    PostCycles = ZinNEPerf::GetPostCycles(this);
    *((_QWORD *)this + 23) = PostCycles;
    v6 = *((_QWORD *)this + 22);
    v7 = v6 * *((_QWORD *)this + 21);
    if (v7 <= PostCycles)
      v8 = PostCycles;
    else
      v8 = v6 * *((_QWORD *)this + 21);
    *((_QWORD *)this + 11) = v8;
    *((_QWORD *)this + 12) = v7 + PostCycles;
    v9 = *((_QWORD *)this + 42);
    if (*(_BYTE *)(v9 + 43) && *(_BYTE *)(v9 + 45))
    {
      ZinNEPerf::GetNonZeroCoefficientBlockCount(this, (uint64_t)&v67);
      v10 = (void *)*((_QWORD *)this + 26);
      if (v10)
      {
        *((_QWORD *)this + 27) = v10;
        operator delete(v10);
      }
      *((_OWORD *)this + 13) = v67;
      *((_QWORD *)this + 28) = v68;
    }
    if ((*(unsigned int (**)(ZinNEPerf *))(*(_QWORD *)this + 24))(this))
    {
      v11 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v11)
        ZinNEPerf::CalculatePerf(v11, v12, v13, v14, v15, v16, v17, v18);
      return result;
    }
    if (ZinEnginePerf::ComputeDependencyStalls(this))
    {
      v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v20)
        ZinNEPerf::CalculatePerf(v20, v21, v22, v23, v24, v25, v26, v27);
      return result;
    }
    v4 = (_BYTE *)*((_QWORD *)this + 42);
  }
  if (v4[42])
  {
    *((_QWORD *)this + 14) = ZinEnginePerf::GetRdmaReadAmount(this);
    *((_QWORD *)this + 15) = v28;
    *((_QWORD *)this + 16) = ZinEnginePerf::GetWdmaWriteAmount(this);
    *((_QWORD *)this + 17) = (*(uint64_t (**)(ZinNEPerf *))(*(_QWORD *)this + 48))(this);
    *((_QWORD *)this + 41) = ZinEnginePerf::GetDRAMTraffic(this);
    v4 = (_BYTE *)*((_QWORD *)this + 42);
  }
  if (v4[48]
    && ZinDMAPerf::GetStallsByTextureOperation((ZinTexturePerf **)this + 43, (unint64_t *)this + 25))
  {
    v29 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v29)
      ZinNEPerf::CalculatePerf(v29, v30, v31, v32, v33, v34, v35, v36);
    return result;
  }
  (*(void (**)(ZinNEPerf *))(*(_QWORD *)this + 80))(this);
  (*(void (**)(ZinNEPerf *))(*(_QWORD *)this + 88))(this);
  if ((*(unsigned int (**)(ZinNEPerf *))(*(_QWORD *)this + 32))(this))
  {
    v37 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v37)
      ZinNEPerf::CalculatePerf(v37, v38, v39, v40, v41, v42, v43, v44);
    return result;
  }
  v45 = (_BYTE *)*((_QWORD *)this + 42);
  if (v45[51])
  {
    ZinEnginePerf::ComputePowerMetric(this);
    v45 = (_BYTE *)*((_QWORD *)this + 42);
  }
  if (v45[53])
  {
    if ((*(unsigned int (**)(ZinNEPerf *))(*(_QWORD *)this + 96))(this))
    {
      v46 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v46)
        ZinNEPerf::CalculatePerf(v46, v47, v48, v49, v50, v51, v52, v53);
      return result;
    }
    v45 = (_BYTE *)*((_QWORD *)this + 42);
  }
  if (v45[54])
    *((_QWORD *)this + 39) = ZinEnginePerf::ComputeApproximateTileSrcDMAFetchCount(this);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  v54 = *(_OWORD *)((char *)this + 24);
  v55 = *(_OWORD *)((char *)this + 40);
  v56 = *(_OWORD *)((char *)this + 72);
  *((_OWORD *)a2 + 3) = *(_OWORD *)((char *)this + 56);
  *((_OWORD *)a2 + 4) = v56;
  *((_OWORD *)a2 + 1) = v54;
  *((_OWORD *)a2 + 2) = v55;
  v57 = *(_OWORD *)((char *)this + 88);
  v58 = *(_OWORD *)((char *)this + 104);
  v59 = *(_OWORD *)((char *)this + 136);
  *((_OWORD *)a2 + 7) = *(_OWORD *)((char *)this + 120);
  *((_OWORD *)a2 + 8) = v59;
  *((_OWORD *)a2 + 5) = v57;
  *((_OWORD *)a2 + 6) = v58;
  v60 = *(_OWORD *)((char *)this + 152);
  v61 = *(_OWORD *)((char *)this + 168);
  v62 = *(_OWORD *)((char *)this + 184);
  *((_QWORD *)a2 + 24) = *((_QWORD *)this + 25);
  *((_OWORD *)a2 + 10) = v61;
  *((_OWORD *)a2 + 11) = v62;
  *((_OWORD *)a2 + 9) = v60;
  if ((ZinNEPerf *)((char *)this + 8) != a2)
    std::vector<DimensionMapping>::__assign_with_size[abi:ne180100]<DimensionMapping const*,DimensionMapping const*>((char *)a2 + 200, *((char **)this + 26), *((_QWORD *)this + 27), (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 3);
  v63 = *(_OWORD *)((char *)this + 232);
  v64 = *(_OWORD *)((char *)this + 264);
  *((_OWORD *)a2 + 15) = *(_OWORD *)((char *)this + 248);
  *((_OWORD *)a2 + 16) = v64;
  *((_OWORD *)a2 + 14) = v63;
  result = *(__n128 *)((char *)this + 280);
  v65 = *(_OWORD *)((char *)this + 296);
  v66 = *(_OWORD *)((char *)this + 312);
  *((_QWORD *)a2 + 40) = *((_QWORD *)this + 41);
  *((_OWORD *)a2 + 18) = v65;
  *((_OWORD *)a2 + 19) = v66;
  *((__n128 *)a2 + 17) = result;
  return result;
}

BOOL ZinNEPerf::IsQualifiedForSimulcast(ZinNEPerf *this)
{
  uint64_t v1;
  BOOL v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  _BOOL8 result;
  int64x2_t v10;
  int64x2_t v11;

  v1 = *((_QWORD *)this + 42);
  if (*(_BYTE *)(v1 + 832))
    v2 = *(_DWORD *)(v1 + 736) == 0;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v3 = **(_DWORD **)(v1 + 256);
  v4 = *(_QWORD **)(v1 + 24);
  v5 = v4[33];
  if (v5)
    v6 = *(_QWORD *)(ZinMirL2Config::GetTileSrc(v5 + 120, 0) + 48);
  else
    v6 = 0;
  v7 = IsFp16(v3);
  v8 = 15;
  if (v7)
    v8 = 7;
  if ((v8 & v6) != 0)
    return 0;
  result = 0;
  v10.i64[0] = *(_QWORD *)(v1 + 200);
  v10.i64[1] = *(_QWORD *)(v1 + 424);
  v11 = vdupq_n_s64(1uLL);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v1 + 184), *(int8x16_t *)(v1 + 184), 8uLL), v11), (int32x4_t)vceqq_s64(v10, v11))))) & 1) == 0&& *(_QWORD *)(v1 + 416) == 1&& *(_QWORD *)(v1 + 432) == 1)
  {
    return *(_DWORD *)(v4[8] + 8) != 90
        || *(_DWORD *)(*(_QWORD *)(v4[57] + 64) + 12) != 2
        || *(_QWORD *)(v1 + 800) != 0;
  }
  return result;
}

uint64_t ZinNEPerf::GetL2BcastCycle(ZinNEPerf *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t TotalNumberOfActiveNEs;
  uint64_t v7;
  unint64_t NumClusters;
  uint64_t L2BcastCyclePerOcg;
  unint64_t v10;
  unint64_t i;
  _BOOL8 NumOfGroupsProducedByNE;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  int v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  uint64_t *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  char *v29;
  char *v30;
  uint64_t v31;
  _BYTE v32[64];

  v2 = *((_QWORD *)this + 42);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 408))(*(_QWORD *)(v2 + 24));
  v4 = 336;
  if (v3)
    v4 = 352;
  v5 = *(_QWORD *)(v2 + v4);
  if (!*(_BYTE *)(v2 + 752))
    v5 = (v5 + *(_QWORD *)(v2 + 160) - 1) / *(_QWORD *)(v2 + 160);
  TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v2 + 672));
  v7 = *(_QWORD *)(v2 + 768);
  NumClusters = ZinNEPerfInfo::GetNumClusters((ZinNEPerfInfo *)(v2 + 672));
  ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v32, TotalNumberOfActiveNEs, v7, v5, NumClusters);
  L2BcastCyclePerOcg = ZinNEPerf::GetL2BcastCyclePerOcg(this);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v10 = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v2 + 672));
  std::vector<long>::resize((uint64_t)&v29, v10);
  for (i = 0; ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v2 + 672)) > i; ++i)
  {
    if (!(i % ZinNEPerfInfo::GetNumClusters((ZinNEPerfInfo *)(v2 + 672))))
    {
      NumOfGroupsProducedByNE = ZinChannelAssignment::GetNumOfGroupsProducedByNE((ZinChannelAssignment *)v32, i);
      v13 = v29;
      if (i >= (v30 - v29) >> 3)
        std::vector<ZinMirPerfTracerConfig::ConfigInfo>::__throw_out_of_range[abi:ne180100]();
      v15 = *(_QWORD *)(v2 + 160);
      v14 = *(_QWORD *)(v2 + 168);
      *(_QWORD *)&v13[8 * i] = NumOfGroupsProducedByNE
                             * L2BcastCyclePerOcg
                             * v14
                             * v15
                             * ZinNEPerf::GetEffectiveInputDepth(this)
                             * *(_QWORD *)(v2 + 200)
                             * *(_QWORD *)(v2 + 192)
                             * *(_QWORD *)(v2 + 184);
    }
  }
  if (*(_BYTE *)(v2 + 752))
  {
    if (v29 == v30)
    {
      v19 = 0;
      if (!v29)
        return v19;
    }
    else
    {
      v16 = 0;
      v17 = v29;
      do
      {
        v18 = *(_DWORD *)v17;
        v17 += 8;
        v16 += v18;
      }
      while (v17 != v30);
      v19 = v16;
      if (!v29)
        return v19;
    }
LABEL_28:
    v30 = v29;
    operator delete(v29);
    return v19;
  }
  v20 = v29 + 8;
  v21 = v29 == v30 || v20 == v30;
  v22 = (uint64_t *)v29;
  if (!v21)
  {
    v23 = *(_QWORD *)v29;
    v22 = (uint64_t *)v29;
    v24 = v29 + 8;
    do
    {
      v26 = *(_QWORD *)v24;
      v24 += 8;
      v25 = v26;
      v27 = v23 >= v26;
      if (v23 <= v26)
        v23 = v25;
      if (!v27)
        v22 = (uint64_t *)v20;
      v20 = v24;
    }
    while (v24 != v30);
  }
  v19 = *v22;
  if (v29)
    goto LABEL_28;
  return v19;
}

void sub_207018E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t ZinNEPerf::GetL2WbackCycle(ZinNEPerf *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t TotalNumberOfActiveNEs;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t NumClusters;
  unint64_t NumOfChannels;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  _BYTE v34[64];
  uint64_t v35;

  v35 = 0;
  v2 = *((_QWORD *)this + 42);
  v3 = *(_QWORD *)(v2 + 360);
  v4 = *(_QWORD *)(v2 + 328);
  ZinTensorFormatGetSize(*(_DWORD *)(v2 + 368), &v35);
  v5 = *((_QWORD *)this + 42);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 440);
  TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v5 + 672));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 42) + 24) + 408))(*(_QWORD *)(*((_QWORD *)this + 42) + 24));
  v9 = 336;
  if (v8)
    v9 = 352;
  v10 = *(_QWORD *)(*((_QWORD *)this + 42) + v9);
  v11 = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v5 + 672));
  v12 = *(_QWORD *)(v5 + 768);
  NumClusters = ZinNEPerfInfo::GetNumClusters((ZinNEPerfInfo *)(v5 + 672));
  ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v34, v11, v12, v10, NumClusters);
  NumOfChannels = ZinChannelAssignment::GetNumOfChannels((ZinChannelAssignment *)v34, 0);
  v15 = *((_QWORD *)this + 42);
  v16 = *(_QWORD **)(v15 + 672);
  v17 = (_QWORD *)(v15 + 680);
  if (v16 == (_QWORD *)(v15 + 680))
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    v19 = *(_DWORD *)(v5 + 824);
    do
    {
      v20 = v16[4];
      v21 = (v20 >> 24) & 0xFFFFFF;
      v22 = BYTE2(v20);
      v23 = (int)v21 / (BYTE2(v20) << v19);
      v24 = HIWORD(v20);
      if ((unsigned __int16)v20 < HIWORD(v20))
        LODWORD(v24) = (unsigned __int16)v16[4];
      v25 = BYTE2(v20);
      v26 = BYTE2(v20) << v19;
      if (v25 >= (int)v21 - ((v25 * v23) << v19))
        v25 = v21 - ((v25 * v23) << v19);
      v27 = (int)v24 * (uint64_t)v25;
      if ((int)v21 % v26)
        v28 = v27;
      else
        v28 = 0;
      v29 = (_QWORD *)v16[1];
      v30 = v16;
      if (v29)
      {
        do
        {
          v31 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v30[2];
          v32 = *v31 == (_QWORD)v30;
          v30 = v31;
        }
        while (!v32);
      }
      v18 += v16[5] / ((v21 + v26 - 1) / (unint64_t)v26) * (v28 + v22 * (int)v24 * (uint64_t)v23) * v35;
      v16 = v31;
    }
    while (v31 != v17);
  }
  return (v6 / TotalNumberOfActiveNEs + v4 * v3 * NumOfChannels * v18 - 1) / (v6 / TotalNumberOfActiveNEs);
}

uint64_t ZinNEPerf::GetMACCyclesPerWU(ZinNEPerf *this, unint64_t *a2)
{
  unint64_t v3;
  float v5;

  if (*(_DWORD *)(*((_QWORD *)this + 42) + 176) == 8)
  {
    v3 = 0;
  }
  else
  {
    ZinNEPerf::GetKernelSparsity(this);
    v3 = (unint64_t)(float)((float)(1.0 - v5)
                                 * (float)(unint64_t)(*(uint64_t (**)(ZinNEPerf *))(*(_QWORD *)this + 112))(this));
  }
  *a2 = v3;
  return 0;
}

uint64_t ZinNEPerf::GetPostCycles(ZinNEPerf *this)
{
  uint64_t v1;
  unint64_t v3;
  int v5;
  uint64_t v6;
  unint64_t TotalNumberOfActiveNEs;
  uint64_t v8;
  unint64_t NumClusters;
  unint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t NumOfGroupsProducedByNE;
  ZinNEPerfInfo *v31;
  unint64_t v32;
  _QWORD *v33;
  _BYTE v34[64];

  v1 = *((_QWORD *)this + 42);
  if (!*(_BYTE *)(v1 + 50))
    return 0;
  v31 = (ZinNEPerfInfo *)(v1 + 672);
  if (*(_BYTE *)(v1 + 752))
  {
    v3 = 1;
  }
  else
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 408))(*(_QWORD *)(v1 + 24));
    v6 = 336;
    if (v5)
      v6 = 352;
    v3 = *(_QWORD *)(v1 + v6) / *(_QWORD *)(v1 + 160);
  }
  TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs(v31);
  v8 = *(_QWORD *)(v1 + 768);
  NumClusters = ZinNEPerfInfo::GetNumClusters(v31);
  ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v34, TotalNumberOfActiveNEs, v8, v3, NumClusters);
  v29 = v1;
  NumOfGroupsProducedByNE = ZinChannelAssignment::GetNumOfGroupsProducedByNE((ZinChannelAssignment *)v34, 0);
  if (NumOfGroupsProducedByNE)
  {
    v10 = 0;
    v11 = 0;
    v33 = (_QWORD *)(v1 + 680);
    do
    {
      ZinChannelAssignment::GetOutputChannelGroup((ZinChannelAssignment *)v34, 0, v10);
      v13 = *(_QWORD **)v31;
      v32 = v10;
      if (*(_QWORD **)v31 != v33)
      {
        v14 = *(_DWORD *)(v29 + 824);
        v15 = *(_QWORD *)(v29 + 216) * v12 * *(_QWORD *)(v29 + 208) * *(_QWORD *)(v29 + 224);
        do
        {
          v16 = v13[4];
          v17 = (v16 >> 24) & 0xFFFFFF;
          v18 = (int)v17 / (BYTE2(v16) << v14);
          v19 = HIWORD(v16);
          if ((unsigned __int16)v16 < HIWORD(v16))
            v19 = (unsigned __int16)v13[4];
          v20 = v19 * v15;
          v21 = ZinNEPerf::EstimatePostProcessCyclesPerWorkUnit(this, v19 * v15 * BYTE2(v16));
          v22 = BYTE2(v16);
          v23 = BYTE2(v16) << v14;
          if ((int)v17 % v23)
          {
            if (v22 >= (int)v17 - ((v22 * v18) << v14))
              v22 = v17 - ((v22 * v18) << v14);
            v24 = ZinNEPerf::EstimatePostProcessCyclesPerWorkUnit(this, v20 * v22);
          }
          else
          {
            v24 = 0;
          }
          v25 = v13[5];
          v26 = (_QWORD *)v13[1];
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v13[2];
              v28 = *v27 == (_QWORD)v13;
              v13 = v27;
            }
            while (!v28);
          }
          v11 += v25 / ((v17 + v23 - 1) / (unint64_t)v23) * (v24 + v21 * v18);
          v13 = v27;
        }
        while (v27 != v33);
      }
      v10 = v32 + 1;
    }
    while (v32 + 1 != NumOfGroupsProducedByNE);
  }
  else
  {
    v11 = 0;
  }
  return *(_QWORD *)(v29 + 360) * v11 * *(_QWORD *)(v29 + 160) * *(_QWORD *)(v29 + 168);
}

void ZinNEPerf::GetNonZeroCoefficientBlockCount(ZinNEPerf *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t TotalNumberOfActiveNEs;
  uint64_t v5;
  ZinNEConvLayer *v6;
  uint64_t v7;
  uint64_t v8;
  int *KernelDescriptor;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(*((_QWORD *)this + 42) + 672));
  std::vector<unsigned long>::reserve((void **)a2, TotalNumberOfActiveNEs);
  v5 = *((_QWORD *)this + 42);
  if (*(_BYTE *)(v5 + 396))
  {
    v6 = *(ZinNEConvLayer **)(v5 + 24);
    if (*(_DWORD *)(*((_QWORD *)v6 + 8) + 8) == 85)
    {
      if (*((_QWORD *)v6 + 54))
      {
        v7 = *((_QWORD *)v6 + 17);
        if (*(_QWORD *)(v7 + 584))
        {
          v8 = *(_QWORD *)(v7 + 784);
          if (*(_QWORD *)(v8 + 40))
          {
            v25 = 0;
            KernelDescriptor = (int *)ZinNEConvLayer::GetKernelDescriptor(v6);
            ZinKernelFormatGetBitDepth(*KernelDescriptor, &v25);
            v10 = *(_QWORD *)(v8 + 40);
            v11 = *(_QWORD *)(v10 + 32);
            v12 = *(_QWORD *)(v10 + 40);
            if (v11 != v12)
            {
              v13 = (_QWORD *)(a2 + 16);
              v14 = *(unint64_t **)(a2 + 8);
              do
              {
                v15 = 8 * *(_QWORD *)(v11 + 40) / v25;
                if ((unint64_t)v14 >= *v13)
                {
                  v17 = *(unint64_t **)a2;
                  v18 = ((uint64_t)v14 - *(_QWORD *)a2) >> 3;
                  v19 = v18 + 1;
                  if ((unint64_t)(v18 + 1) >> 61)
                    std::vector<std::pair<unsigned long,unsigned long>>::__throw_length_error[abi:ne180100]();
                  v20 = *v13 - (_QWORD)v17;
                  if (v20 >> 2 > v19)
                    v19 = v20 >> 2;
                  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
                    v21 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v21 = v19;
                  if (v21)
                  {
                    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a2 + 16, v21);
                    v17 = *(unint64_t **)a2;
                    v14 = *(unint64_t **)(a2 + 8);
                  }
                  else
                  {
                    v22 = 0;
                  }
                  v23 = (unint64_t *)&v22[8 * v18];
                  *v23 = v15;
                  v16 = v23 + 1;
                  while (v14 != v17)
                  {
                    v24 = *--v14;
                    *--v23 = v24;
                  }
                  *(_QWORD *)a2 = v23;
                  *(_QWORD *)(a2 + 8) = v16;
                  *(_QWORD *)(a2 + 16) = &v22[8 * v21];
                  if (v17)
                    operator delete(v17);
                }
                else
                {
                  *v14 = v15;
                  v16 = v14 + 1;
                }
                *(_QWORD *)(a2 + 8) = v16;
                v11 += 56;
                v14 = v16;
              }
              while (v11 != v12);
            }
          }
        }
      }
    }
  }
}

void sub_2070194E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEPerf::ComputeRunCycle(ZinNEPerf *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)this + 11);
  v2 = *((_QWORD *)this + 18);
  if (v2 <= *((_QWORD *)this + 20))
    v2 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = v1;
  return 0;
}

uint64_t ZinNEPerf::ComputeRunTime(ZinNEPerf *this)
{
  double v2;
  double v3;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  ZinEnginePerf::ComputeRdmaAccessMetrics(this, 0, (uint64_t)v13);
  *((_QWORD *)this + 7) = v13[0];
  ZinEnginePerf::ComputeRdmaAccessMetrics(this, 1, (uint64_t)v13);
  *((_QWORD *)this + 8) = v13[0];
  ZinEnginePerf::ComputeKdmaAccessMetrics(this, (uint64_t)v13);
  *((_QWORD *)this + 10) = v13[0];
  ZinEnginePerf::ComputeWdmaAccessMetrics(this, (uint64_t)v13);
  *((_QWORD *)this + 9) = v13[0];
  ZinEnginePerf::ComputeDramAccessMetrics(this, (uint64_t)v13);
  *((_QWORD *)this + 5) = v13[0];
  *((double *)this + 3) = (double)*((unint64_t *)this + 2) / *(double *)(*((_QWORD *)this + 42) + 56) * 1000.0;
  v2 = ZinEnginePerf::ComputeL2Time(this);
  *((double *)this + 4) = v2;
  v3 = *((double *)this + 5);
  if (v3 < *((double *)this + 3))
    v3 = *((double *)this + 3);
  if (v3 >= v2)
    v2 = v3;
  *((double *)this + 6) = v2;
  if (v2 > 0.0)
    return ZinEnginePerf::RetrieveTaskCharacteristic(this);
  v5 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  if (v5)
    ZinNEPerf::ComputeRunTime(v5, v6, v7, v8, v9, v10, v11, v12);
  return 3;
}

double ZinNEPerf::ComputeCoreTime(ZinNEPerf *this)
{
  return (double)*((unint64_t *)this + 2) / *(double *)(*((_QWORD *)this + 42) + 56) * 1000.0;
}

void ZinNEPerf::GetKernelSparsity(ZinNEPerf *this)
{
  uint64_t v2;
  uint64_t v3;
  ZinIrKernel *v4;
  ZinKernelSparsityCache *KernelSparsityCache;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  ZinIrKernel *v10;
  ZinKernelSparsityCache *v11;
  unint64_t v12;
  ZinIrKernel *v13;

  v2 = *((_QWORD *)this + 42);
  if (*(float *)(v2 + 732) <= 0.0)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (*(_BYTE *)(v2 + 44))
    {
      ZinIrPerf::GetEngineLayerFusedKernel(*(const ZinANELayer **)(v2 + 24), &v13);
      v4 = v13;
      if (v13)
      {
        if (*((_BYTE *)v13 + 160))
        {
          KernelSparsityCache = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v3 + 16));
          ZinIrKernel::GetSparsityRatio(v4, 4, KernelSparsityCache);
          v4 = v13;
          v13 = 0;
          if (!v4)
            return;
        }
        else
        {
          v13 = 0;
        }
        ZinIrKernel::~ZinIrKernel(v4);
        MEMORY[0x20BD002F8]();
      }
    }
    else
    {
      v6 = *(_QWORD *)(v3 + 136);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 784);
        if (v7)
        {
          if (**(_BYTE **)(v7 + 40))
          {
            v8 = *(_QWORD *)(v6 + 584);
            if (v8
              && (v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 136) + 184))(*(_QWORD *)(v8 + 136)),
                  v2 = *((_QWORD *)this + 42),
                  v9)
              && *(_BYTE *)(v2 + 43))
            {
              v10 = *(ZinIrKernel **)(v3 + 136);
              v11 = (ZinKernelSparsityCache *)ZinIrContext::GetKernelSparsityCache(*(ZinIrContext **)(v3 + 16));
              ZinIrKernel::GetSparsityRatio(v10, 4, v11);
            }
            else
            {
              ZinNEPerf::GetSparsityFromStrides(*(_QWORD *)(v2 + 424), *(_QWORD *)(v2 + 416), *(_QWORD *)(v2 + 432), *(_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 192), *(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 208), *(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 224), *(int *)(v2 + 372), *(int *)(v2 + 380), *(int *)(v2 + 388), v12);
            }
          }
        }
      }
    }
  }
}

void sub_2070197C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::unique_ptr<ZinIrKernel>::reset[abi:ne180100]((ZinIrKernel **)va, 0);
  _Unwind_Resume(a1);
}

unint64_t ZinNEPerf::EstimatePostProcessCyclesPerWorkUnit(ZinNEPerf *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v7;
  signed int v8;
  uint64_t v9;
  double v10;
  float v11;
  int v12;
  double v13;
  double v14;

  v2 = *((_QWORD *)this + 42);
  v3 = *(unint64_t **)(v2 + 32);
  v4 = v3[230];
  v5 = (float)v3[106];
  v6 = v3[231];
  v7 = (float)a2 / v5;
  v8 = vcvtps_s32_f32(v7);
  v9 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 392);
  v10 = 0.0;
  if (v9 && *(_DWORD *)(v9 + 192) >= 2u)
  {
    v11 = (float)v3[105];
    v12 = vcvtps_s32_f32((float)((float)(v7 + -7.0) * v5) / v11);
    v8 += v12 & ~(v12 >> 31);
    v10 = (double)(int)(float)((float)a2 / v11);
  }
  v13 = *(double *)(v2 + 56) / *(double *)(v2 + 64);
  v14 = v10 * v13;
  if ((double)v6 + (double)(v4 + v8) * v13 >= v14)
    v14 = (double)v6 + (double)(v4 + v8) * v13;
  return vcvtpd_u64_f64(v14);
}

unint64_t ZinNEPerf::GetKdmaReadAmount(ZinNEPerf *this)
{
  uint64_t v1;
  uint64_t v2;
  ZinNEPerfInfo *v4;
  uint64_t v5;
  uint64_t v6;
  float WeightElementSizeInBytes;
  float v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t NumClusters;
  uint64_t v13;
  uint64_t v14;

  v1 = *((_QWORD *)this + 42);
  v2 = *(_QWORD *)(v1 + 840);
  if (!*(_BYTE *)(v2 + 340) || *(_BYTE *)(v1 + 728) || *(double *)(v2 + 384) == 0.0)
    return 0;
  v4 = (ZinNEPerfInfo *)(v1 + 672);
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 136);
  if (*(_BYTE *)(v2 + 341))
  {
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 784);
      if (v6)
      {
        WeightElementSizeInBytes = ZinIrKernel::GetWeightElementSizeInBytes(*(ZinIrKernel **)(*(_QWORD *)(v1 + 24)
                                                                                            + 136));
        v8 = *(double *)(v2 + 384);
        v9 = v8 / WeightElementSizeInBytes;
        v10 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 16);
        return (unint64_t)(float)(v9 * (float)v10);
      }
    }
  }
  else if (v5)
  {
    v11 = *(_QWORD *)(v5 + 784);
    if (v11)
    {
      NumClusters = ZinNEPerfInfo::GetNumClusters(v4);
      v10 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 16);
      v9 = (float)NumClusters / (float)*(unint64_t *)(*(_QWORD *)(v11 + 40) + 24);
      return (unint64_t)(float)(v9 * (float)v10);
    }
  }
  v13 = ZinNEPerfInfo::GetNumClusters(v4);
  v14 = *(_QWORD *)(v1 + 840);
  return v13
       * (unint64_t)(*(double *)(v14 + 384)
                          * (double)GetSerializedWeightElementCount(*(_DWORD *)(v1 + 808), (unint64_t *)(v14 + 344), *(_QWORD *)(v1 + 816)));
}

uint64_t ZinNEPerf::GetL2BcastCyclePerOcg(ZinNEPerf *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  ZinNEPerf *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t L2BcastCyclesPerWorkunitPerOcg;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;

  v1 = *((_QWORD *)this + 42);
  v35 = 0;
  ZinTensorFormatGetSize(**(_DWORD **)(v1 + 256), &v35);
  v32 = details::ZinIrSubchannelKernelDimension(*(_QWORD *)(v1 + 184), *(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 424), *(_DWORD *)(v1 + 372));
  v2 = details::ZinIrSubchannelKernelDimension(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 416), *(_DWORD *)(v1 + 380));
  v3 = *(_QWORD **)(v1 + 672);
  v30 = (_QWORD *)(v1 + 680);
  v31 = v2;
  if (v3 == (_QWORD *)(v1 + 680))
    return 0;
  v4 = 0;
  v29 = v1;
  do
  {
    v5 = v3[4];
    v6 = BYTE2(v5);
    v7 = *(_DWORD *)(v1 + 736) == 1 && BYTE2(v5) == 8;
    if (v7)
    {
      v9 = this;
      v8 = (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 42) + 32) + 592) >> 4) / (unint64_t)v35;
    }
    else
    {
      v8 = (unsigned __int16)v3[4];
      v9 = this;
    }
    v10 = 0;
    v11 = HIWORD(v5);
    if (HIWORD(v5) > v8 && *(_BYTE *)(v1 + 832))
      v10 = *((_BYTE *)v9 + 320) ^ 1;
    v34 = v10;
    v12 = (v5 >> 24) & 0xFFFFFF;
    v13 = *(_DWORD *)(v1 + 824);
    v14 = BYTE2(v5) * (uint64_t)(1 << v13);
    v15 = v12 / v14;
    v16 = v12 % v14;
    if (v8 >= v11)
      v17 = v11;
    else
      v17 = v8;
    L2BcastCyclesPerWorkunitPerOcg = ZinNEPerf::GetL2BcastCyclesPerWorkunitPerOcg(v9, v35, v31, v32, v6, v17, v6, v8);
    if (v16)
    {
      v19 = v12 % v6;
      if ((_DWORD)v19)
      {
        v20 = L2BcastCyclesPerWorkunitPerOcg;
        v21 = ZinNEPerf::GetL2BcastCyclesPerWorkunitPerOcg(this, v35, v31, v32, v19, v17, v6, v8);
        L2BcastCyclesPerWorkunitPerOcg = v20;
      }
      else
      {
        v21 = 0;
      }
      v1 = v29;
      v23 = v34;
      v22 = (v21 << v34)
          + ((unint64_t)(v16 / v6) << v34) * L2BcastCyclesPerWorkunitPerOcg;
    }
    else
    {
      v22 = 0;
      v1 = v29;
      v23 = v34;
    }
    v25 = v3[4];
    v24 = v3[5];
    v26 = (_QWORD *)v3[1];
    if (v26)
    {
      do
      {
        v27 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        v27 = (_QWORD *)v3[2];
        v7 = *v27 == (_QWORD)v3;
        v3 = v27;
      }
      while (!v7);
    }
    v4 += v24
        / ((((v25 >> 24) & 0xFFFFFF) + (BYTE2(v25) << v13) - 1)
         / (BYTE2(v25) << v13))
        * (v22 + (((int)v15 * (uint64_t)(1 << v13)) << v23) * L2BcastCyclesPerWorkunitPerOcg);
    v3 = v27;
  }
  while (v27 != v30);
  return v4;
}

unint64_t ZinNEPerf::GetL2BcastCyclesPerWorkunitPerOcg(ZinNEPerf *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t Pow2;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v40;
  uint64_t v43;
  unint64_t v44;

  v11 = *((_QWORD *)this + 42);
  if (*(_BYTE *)(v11 + 752))
    v12 = *(_QWORD *)(v11 + 760);
  else
    v12 = (unint64_t)(*(_QWORD *)(*(_QWORD *)(v11 + 232) + 8) + *(_QWORD *)(v11 + 160) - 1)
        / *(_QWORD *)(v11 + 160);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 432);
  v14 = a6 - 1 + a4;
  v15 = a3 + a5 - 1;
  v16 = *(_DWORD *)(v11 + 736);
  v17 = v16 - 5;
  v44 = v12;
  if ((v16 - 5) >= 0xFFFFFFFE)
  {
    v19 = 0;
    v20 = 1;
    if (!*(_BYTE *)(v11 + 740))
      v20 = 2;
    v43 = v20;
    v21 = (unsigned __int8 *)(v11 + 833);
  }
  else
  {
    v18 = 1;
    if (v15 > a7 >> 1 && v16 != 1)
    {
      if (*(_BYTE *)(v11 + 740))
      {
        v18 = 1;
      }
      else
      {
        v40 = v14 <= a8 >> 1 && a7 == 1;
        v18 = 1;
        if (!v40)
          v18 = 2;
      }
    }
    v43 = v18;
    v19 = 0;
    v21 = (unsigned __int8 *)(v11 + 833);
    if (v14 > a8 && !*(_BYTE *)(v11 + 833))
    {
      v19 = 1;
      if (a7 >= 9 && v16 != 1)
      {
        if ((v14 * a7 - a8) * a2 <= v13)
          v19 = 1;
        else
          v19 = 2;
      }
    }
  }
  v22 = ((_DWORD)v15 - (_DWORD)a7) & ~(((int)v15 - (int)a7) >> 31);
  if (v14 <= a8)
    v23 = a8;
  else
    v23 = a6 - 1 + a4;
  Pow2 = ZinRoundUpToNextPow2(v23);
  v25 = v13 / a2;
  if (v25 >= Pow2)
    v26 = Pow2;
  else
    v26 = v25;
  v27 = *v21;
  v28 = (v22 + v25 / v26 - 1) / (v25 / v26);
  if (v27)
  {
    if (a6 <= a8)
      v29 = a8;
    else
      v29 = a6;
    v30 = ZinRoundUpToNextPow2(v29);
    if (v25 >= v30)
      v31 = v30;
    else
      v31 = v25;
    v32 = (a6 - 1 + v31) / v31;
    if (v26 >= 2 * v31)
      v33 = (v28 + 1) >> 1;
    else
      v33 = (v22 + v25 / v26 - 1) / (v25 / v26);
    v34 = v33 * v32;
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 42) + 32) + 1601))
    {
      v36 = v43;
      v35 = v44;
      if (a3 <= 5 && a8 == 8 || (v37 = 2 * v34, a3 <= 3) && a8 == 16)
        v37 = v34;
    }
    else
    {
      v37 = 2 * v34;
      v36 = v43;
      v35 = v44;
    }
    v38 = v37 + 2 * v36;
  }
  else
  {
    if (v17 <= 0xFFFFFFFD)
      v22 = (v14 + v26 - 1) / v26 * v28;
    v35 = v44;
    v38 = v19 + v43 + v22;
  }
  return v38 * v35;
}

unint64_t ZinNEPerf::GetEffectiveInputDepth(ZinNEPerf *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 42);
  v2 = *(int *)(v1 + 388) + (uint64_t)*(int *)(v1 + 392);
  if ((_DWORD)v2)
  {
    if (*(_BYTE *)(v1 + 396) && *(_DWORD *)(v1 + 456) == 1)
      v2 = 0;
  }
  else
  {
    v2 = 0;
  }
  return (unint64_t)(v2 + *(_QWORD *)(v1 + 200) + *(_QWORD *)(*(_QWORD *)(v1 + 232) + 32) - 1)
       / *(_QWORD *)(v1 + 200);
}

float ZinNEPerf::GetSparsityFromStrides(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  char v26;
  char v28;

  v20 = details::ZinIrSubchannelKernelDimension(a4, a7, this, a10);
  v21 = details::ZinIrSubchannelKernelDimension(a5, a8, a2, a11);
  v22 = details::ZinIrSubchannelKernelDimension(a6, a9, a3, a12);
  v24 = a4 == 2 && a7 == 2;
  v26 = a5 == 2 && a8 == 2;
  v28 = a6 == 2 && a9 == 2;
  return 1.0
       - (float)((float)(unint64_t)((a2 * this * a3) << v24 << v26 << v28)
               / (float)(a5 * a4 * a6 * a7 * a8 * a9 * v20 * v21 * v22));
}

uint64_t ZinNEPerf::GetNonZeroElementsInSubKernel(ZinNEPerf *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10)
{
  char v11;
  char v13;
  char v15;

  v11 = a4 == 2 && a7 == 2;
  v13 = a5 == 2 && a8 == 2;
  v15 = a6 == 2 && a9 == 2;
  return (a2 * (_QWORD)this * a3) << v11 << v13 << v15;
}

uint64_t ZinNEPerf::GetSubChannelCycleCount@<X0>(ZinNEPerf *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v6 = (_QWORD *)*((_QWORD *)this + 42);
  v7 = (*(uint64_t (**)(ZinNEPerf *))(*(_QWORD *)this + 104))(this);
  v8 = v6[26];
  if (v7 >= v8)
    v9 = v6[26];
  else
    v9 = v7;
  v10 = v6[27];
  v11 = v6[28];
  if (v7 / v9 >= v10)
    v12 = v6[27];
  else
    v12 = v7 / v9;
  v13 = v7 / v9 / v12;
  if (v13 >= v11)
    v14 = v6[28];
  else
    v14 = v7 / v9 / v12;
  v15 = v13 / v14;
  v16 = vcvtmd_s64_f64((double)(v8 - 1) / (double)v9);
  v17 = v6[23];
  v18 = ((v6[25] + v6[25] * v16) * v6[24]
       + (v6[25] + v6[25] * v16) * v6[24] * vcvtmd_s64_f64((double)(v10 - 1) / (double)v12))
      * v17;
  v19 = v18 + v18 * vcvtmd_s64_f64((double)(v11 - 1) / (double)v14);
  v20 = details::ZinIrSubchannelKernelDimension(v17, v8, *(_QWORD *)(*((_QWORD *)this + 42) + 424), *(_DWORD *)(*((_QWORD *)this + 42) + 372));
  v21 = details::ZinIrSubchannelKernelDimension(v6[24], v6[27], *(_QWORD *)(*((_QWORD *)this + 42) + 416), *(_DWORD *)(*((_QWORD *)this + 42) + 380));
  result = details::ZinIrSubchannelKernelDimension(v6[25], v6[28], *(_QWORD *)(*((_QWORD *)this + 42) + 432), *(_DWORD *)(*((_QWORD *)this + 42) + 388));
  v23 = *((_QWORD *)this + 42);
  if (*(_BYTE *)(v23 + 741) && (v15 < 2 || *(_QWORD *)(v23 + 768) <= 1uLL) && v19 <= 1)
    result = (unint64_t)(result + 1) >> 1;
  v24 = v21 * v20 * result;
  v25 = vcvtmd_s64_f64((double)(a2 - 1) / (double)v15) + 1;
  if (v24 <= 1)
    v24 = 1;
  *a3 = v19;
  a3[1] = v24;
  a3[2] = v25;
  return result;
}

uint64_t ZinNEPerf::GetCyclesBeforeSparsity(ZinNEPerf *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int EffectiveInputDepth;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t TotalNumberOfActiveNEs;
  uint64_t v13;
  unint64_t NumClusters;
  uint64_t FullPassCount;
  int v16;
  uint64_t v17;
  _BOOL8 NumOfGroupsProducedByNE;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[64];

  v2 = *((_QWORD *)this + 42);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 232) + 8);
  EffectiveInputDepth = ZinNEPerf::GetEffectiveInputDepth(this);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 408))(v3);
  v7 = 336;
  if (v6)
    v7 = 352;
  v8 = *(_QWORD *)(v2 + v7);
  v9 = *(_QWORD *)(v2 + 160);
  if (*(_BYTE *)(v2 + 752))
    v10 = *(_QWORD *)(v2 + 760);
  else
    v10 = (v9 - 1 + v4) / v9;
  v11 = (v9 - 1 + v8) / v9;
  TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs((ZinNEPerfInfo *)(v2 + 672));
  v13 = *(_QWORD *)(v2 + 768);
  NumClusters = ZinNEPerfInfo::GetNumClusters((ZinNEPerfInfo *)(v2 + 672));
  ZinChannelAssignment::ZinChannelAssignment((ZinChannelAssignment *)v24, TotalNumberOfActiveNEs, v13, v11, NumClusters);
  FullPassCount = ZinChannelAssignment::GetFullPassCount((ZinChannelAssignment *)v24);
  v16 = FullPassCount;
  if (FullPassCount)
  {
    ZinChannelAssignment::GetOutputChannelGroup((ZinChannelAssignment *)v24, 0, 0);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    ZinNEPerf::GetSubChannelCycleCount(this, v17, &v21);
    v16 *= (_DWORD)v10 * EffectiveInputDepth * (_DWORD)v22 * (_DWORD)v21 * (_DWORD)v23;
  }
  if (ZinChannelAssignment::HasPartialPass((ZinChannelAssignment *)v24, 0))
  {
    NumOfGroupsProducedByNE = ZinChannelAssignment::GetNumOfGroupsProducedByNE((ZinChannelAssignment *)v24, 0);
    ZinChannelAssignment::GetOutputChannelGroup((ZinChannelAssignment *)v24, 0, NumOfGroupsProducedByNE - 1);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    ZinNEPerf::GetSubChannelCycleCount(this, v19, &v21);
    v16 += v10 * EffectiveInputDepth * v22 * v21 * v23;
  }
  return (*(_QWORD *)(v2 + 160) + *(_QWORD *)(v2 + 160) * v16) * *(_QWORD *)(v2 + 168);
}

uint64_t ZinNEPerf::GetHinEffective(ZinNEPerf *this, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  uint64_t v11;

  v3 = (_QWORD *)*((_QWORD *)this + 42);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  GetSlices(v3[19], v3[62], v3[71], v3[70], v3[72], &v9);
  v4 = v9;
  v5 = v10;
  v6 = v3[52];
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  v7 = (((v5 - v4) >> 3) - 1) * (v6 - 1);
  if (v6 <= 1)
    v7 = 0;
  return v7 + a2;
}

void sub_20701A314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinNEPerf::GetPerfOcgSize(ZinNEPerf *this, const ZinCommonPerfInfo *a2, const ZinNEPerfInfo *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t TotalNumberOfActiveNEs;
  unint64_t v8;
  unint64_t NumClusters;
  ZinChannelAssignment *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = 8;
  if ((_DWORD)a3)
    v5 = 24;
  v6 = *(_QWORD *)((char *)this + v5 + 272);
  TotalNumberOfActiveNEs = ZinNEPerfInfo::GetTotalNumberOfActiveNEs(a2);
  v8 = v6 / *((_QWORD *)this + 13);
  NumClusters = ZinNEPerfInfo::GetNumClusters(a2);
  v10 = (ZinChannelAssignment *)operator new();
  ZinChannelAssignment::ZinChannelAssignment(v10, TotalNumberOfActiveNEs, *((_QWORD *)a2 + 12), v8, NumClusters);
  ZinChannelAssignment::GetOutputChannelGroup(v10, 0, 0);
  v12 = v11;
  MEMORY[0x20BD002F8](v10, 0x1000C40FA0F61DDLL);
  return v12;
}

void sub_20701A3F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD002F8](v1, 0x1000C40FA0F61DDLL);
  _Unwind_Resume(a1);
}

uint64_t ZinNEPerf::GetChainedDependencyStall(ZinNEPerf *this, double *a2)
{
  uint64_t v4;
  ZinANELayer *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v13;
  int v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[66];
  _BYTE v26[25];
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  void *__p;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _BYTE v51[872];
  _BYTE v52[40];
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  _OWORD *v62;
  char v63;

  ZinCommonPerfInfo::ZinCommonPerfInfo((ZinCommonPerfInfo *)v52, (const ZinCommonPerfInfo *)(*((_QWORD *)this + 42) + 56));
  if (!v63)
    goto LABEL_12;
  v4 = *((_QWORD *)this + 42);
  v5 = *(ZinANELayer **)(v4 + 512);
  v6 = *(_QWORD *)(v4 + 32);
  LOWORD(v25[0]) = 257;
  BYTE2(v25[0]) = 1;
  *(_DWORD *)((char *)v25 + 3) = 0;
  *(_DWORD *)((char *)v25 + 6) = 0;
  BYTE2(v25[1]) = 1;
  *(_DWORD *)((char *)&v25[1] + 3) = 0;
  ZinIrPerf::ZinIrPerf((uint64_t)v51, v6, (__int128 *)(v4 + 56), v25);
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  memset(v27, 0, sizeof(v27));
  v7 = operator new(8uLL);
  __p = v7;
  *v7 = 0;
  v41 = v7 + 1;
  v40 = v7 + 1;
  v43 = 0;
  v42 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v44 = _Q0;
  v45 = _Q0;
  v46 = _Q0;
  v47 = _Q0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  LOBYTE(v25[1]) = 0;
  LOBYTE(v25[14]) = 0;
  LOBYTE(v25[15]) = 0;
  LOBYTE(v25[28]) = 0;
  LOBYTE(v25[29]) = 0;
  LOBYTE(v25[42]) = 0;
  LOBYTE(v25[43]) = 0;
  LOBYTE(v25[44]) = 0;
  LOBYTE(v25[45]) = 0;
  LOBYTE(v25[46]) = 0;
  LOBYTE(v25[47]) = 0;
  LOBYTE(v25[50]) = 0;
  LOBYTE(v25[51]) = 0;
  BYTE4(v25[51]) = 0;
  LOBYTE(v25[52]) = 0;
  LOBYTE(v25[53]) = 0;
  LOBYTE(v25[54]) = 0;
  LOBYTE(v25[55]) = 0;
  LOBYTE(v25[56]) = 0;
  LOBYTE(v25[57]) = 0;
  LOBYTE(v25[58]) = 0;
  LOBYTE(v25[61]) = 0;
  LOBYTE(v25[62]) = 0;
  LOBYTE(v25[63]) = 0;
  LOBYTE(v25[64]) = 0;
  LOBYTE(v25[65]) = 0;
  v25[0] = &unk_24C01F1F0;
  v26[0] = 0;
  v26[8] = 0;
  v26[16] = 0;
  v26[24] = 0;
  if (v62)
  {
    memcpy(&v25[1], (char *)v62 + 8, 0x201uLL);
    v13 = *(_OWORD *)((char *)v62 + 537);
    *(_OWORD *)v26 = v62[33];
    *(_OWORD *)&v26[9] = v13;
  }
  v14 = ZinANELayer::CalculatePerf(v5, (ZinIrPerf *)v51, (const ZinCustomPerfInfo *)v25, (ZinPerfDescriptor *)v27);
  if (v14)
  {
    v15 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v15)
      ZinNEPerf::GetChainedDependencyStall(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    *a2 = *((double *)&v28 + 1);
  }
  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)v25);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v51);
  if (v14)
    v23 = 3;
  else
LABEL_12:
    v23 = 0;
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v53)
    operator delete(v53);
  return v23;
}

void sub_20701A680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;

  ZinIrHalH13g::~ZinIrHalH13g((ZinIrHalH13g *)&a9);
  v10 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v10;
    operator delete(v10);
  }
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&STACK[0x380]);
  ZinCommonPerfInfo::~ZinCommonPerfInfo((ZinCommonPerfInfo *)&STACK[0x6E8]);
  _Unwind_Resume(a1);
}

BOOL ZinNEPerf::HasL2DependencyStall(ZinNEPerf *this)
{
  uint64_t v1;
  ZinIrOpLayer *v2;
  _BOOL8 result;
  _BYTE *v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 42) + 24);
  if (*(_QWORD *)(v1 + 264))
  {
    v2 = **(ZinIrOpLayer ***)(v1 + 88);
    result = ZinIrOpLayer::IsANELayer(v2);
    if (!result)
      return result;
    if (*((_QWORD *)v2 + 33))
    {
      result = ZinIrOpLayer::IsPELayer(**(ZinIrOpLayer ***)(v1 + 88));
      if (!result)
        return result;
      v4 = *(_BYTE **)(v1 + 264);
      if (*(_DWORD *)ZinMirL2Config::GetL2SrcDep((uint64_t)(v4 + 120), 0) == 2
        && !v4[342]
        && !v4[343]
        && !v4[336]
        && !v4[337])
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t ZinNEPerf::GetL2DependencyStall(ZinNEPerf *this, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  ZinANELayer *v6;
  _QWORD *v7;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD v24[12];
  uint64_t v25;
  void *__p;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _BYTE v38[872];

  if (*(_BYTE *)(*((_QWORD *)this + 42) + 47) && ZinNEPerf::HasL2DependencyStall(this))
  {
    v4 = *((_QWORD *)this + 42);
    v5 = *(_QWORD *)(v4 + 32);
    v6 = **(ZinANELayer ***)(*(_QWORD *)(v4 + 24) + 88);
    LOWORD(v24[0]) = 257;
    BYTE2(v24[0]) = 1;
    *(_DWORD *)((char *)v24 + 3) = 0;
    *(_DWORD *)((char *)v24 + 6) = 0;
    BYTE10(v24[0]) = 1;
    *(_DWORD *)((char *)v24 + 11) = 0;
    ZinIrPerf::ZinIrPerf((uint64_t)v38, v5, (__int128 *)(v4 + 56), (uint64_t *)v24);
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    v7 = operator new(8uLL);
    __p = v7;
    *v7 = 0;
    v27 = v7 + 1;
    v28 = v7 + 1;
    v29 = 0;
    v30 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v31 = _Q0;
    v32 = _Q0;
    v33 = _Q0;
    v34 = _Q0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    if (ZinANELayer::CalculatePerf(v6, (ZinIrPerf *)v38, (ZinPerfDescriptor *)v24))
    {
      v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v13)
        ZinNEPerf::GetL2DependencyStall(v13, v14, v15, v16, v17, v18, v19, v20);
      v21 = 3;
    }
    else
    {
      v21 = 0;
      v22 = *(_QWORD *)&v24[0];
      if (*(_QWORD *)&v24[0] <= *((_QWORD *)&v24[0] + 1))
        v22 = *((_QWORD *)&v24[0] + 1);
      *a2 = v22;
    }
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
    ZinIrPerf::~ZinIrPerf((ZinIrPerf *)v38);
  }
  else
  {
    v21 = 0;
    *a2 = 0;
  }
  return v21;
}

void sub_20701A8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (__p)
    operator delete(__p);
  ZinIrPerf::~ZinIrPerf((ZinIrPerf *)&a50);
  _Unwind_Resume(a1);
}

void ZinNEPerf::AdjustTotalCycleForChainedTask(ZinNEPerf *this)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7[4];

  v1 = *((_QWORD *)this + 42);
  if (*(_BYTE *)(v1 + 46) && *((double *)this + 24) > 0.0)
  {
    v3 = (double)*((unint64_t *)this + 2) / *(double *)(v1 + 56) * 1000.0;
    v4 = ZinEnginePerf::ComputeL2Time(this);
    ZinEnginePerf::ComputeDramAccessMetrics(this, (uint64_t)v7);
    v5 = v7[0];
    if (v3 >= v4)
      v6 = v3;
    else
      v6 = v4;
    if (v6 >= v7[0])
      v5 = v6;
    if (v5 < *((double *)this + 24))
      v5 = *((double *)this + 24);
    *((_QWORD *)this + 2) = (unint64_t)(v5 * *(double *)(*((_QWORD *)this + 42) + 56) / 1000.0);
  }
}

_QWORD *ZinNEPerf::AdjustTotalCycleWithL2DependencyStall(_QWORD *this)
{
  uint64_t v1;
  unint64_t v2;

  if (*(_BYTE *)(this[42] + 47))
  {
    v1 = this[19];
    if (v1)
    {
      v2 = this[1];
      if (v2 <= this[2])
        v2 = this[2];
      this[2] = v2 + v1;
    }
  }
  return this;
}

unint64_t ZinNEPerf::GetNumAccRegs(ZinNEPerf *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = (_QWORD *)*((_QWORD *)this + 42);
  v4 = (*(uint64_t (**)(ZinNEPerf *))(*(_QWORD *)this + 104))(this);
  return v3[27] * v3[26] * v3[28] * (unint64_t)(float)((float)(a2 + v4 - 1) / (float)v4);
}

unint64_t ZinNEPerf::GetNonConvMACCyclesPerWorkunitPerOCG(ZinNEPerf *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const ZinNEPerfInfo *v7;
  uint64_t PerfOcgSize;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *((_QWORD *)this + 42);
  v5 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v4 + 752))
    v6 = *(_QWORD *)(v4 + 760);
  else
    v6 = (unint64_t)(*(_QWORD *)(*(_QWORD *)(v4 + 232) + 8) + *(_QWORD *)(v4 + 160) - 1)
       / *(_QWORD *)(v4 + 160);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v7 = (const ZinNEPerfInfo *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 408))(v5);
  PerfOcgSize = ZinNEPerf::GetPerfOcgSize((ZinNEPerf *)(v4 + 56), (const ZinCommonPerfInfo *)(v4 + 672), v7);
  ZinNEPerf::GetSubChannelCycleCount(this, PerfOcgSize, &v23);
  v9 = *(_QWORD *)(v4 + 200);
  v10 = v9 == 2 && *(_QWORD *)(v4 + 432) == 1;
  v11 = !v10;
  v12 = *(_QWORD *)(v4 + 184);
  v14 = v12 != 2 || *(_QWORD *)(v4 + 424) != 1;
  if (v11 != 1 || (v15 = 0, !v14))
  {
    v10 = (v11 | v14) == 0;
    v16 = 3;
    if (!v10)
      v16 = *(_QWORD *)(v4 + 184);
    if (v11)
      v17 = *(_QWORD *)(v4 + 200);
    else
      v17 = v16;
    v15 = *(_QWORD *)(v4 + 416) * v17;
  }
  if (*(_QWORD *)(v4 + 192) == 2)
  {
    v18 = v15 + v12 * v9;
    if ((*(_BYTE *)(v4 + 416) & 1) != 0)
      v15 = v18;
  }
  v19 = v24;
  v20 = (_QWORD *)*((_QWORD *)this + 42);
  v21 = (*(uint64_t (**)(ZinNEPerf *))(*(_QWORD *)this + 104))(this);
  return (v15 + v20[26] * v19 * v20[27] * v20[28] * (unint64_t)(float)((float)(a2 + v21 - 1) / (float)v21)) * v6;
}

double ZinNEPerf::GetOutputChannelUtilization(ZinNEPerf *this, const ZinIrHalParameters *a2, const ZinCommonPerfInfo *a3, const ZinNEPerfInfo *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t PerfOcgSize;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v7 = 8;
  if ((_DWORD)a4)
    v7 = 24;
  v8 = *(_QWORD *)((char *)a2 + v7 + 272);
  PerfOcgSize = ZinNEPerf::GetPerfOcgSize(a2, a3, a4);
  v10 = *((_QWORD *)a3 + 9);
  v11 = *((int *)this + 2);
  v12 = (unint64_t)(v8 + *((_QWORD *)a2 + 13) - 1) / *((_QWORD *)a2 + 13);
  v13 = v11 / ZinNEPerfInfo::GetNumClusters(a3);
  return ZinNEPerfUtils::GetOutputChannelNEUtilization((ZinNEPerfUtils *)v12, PerfOcgSize, v10, v13);
}

uint64_t ZinNEPerf::AnalyzeUtilization(ZinNEPerf *this)
{
  double v2;
  uint64_t v3;
  ZinNEPerf *v4;
  const ZinIrHalParameters *v5;
  const ZinCommonPerfInfo *v6;
  const ZinNEPerfInfo *v7;
  double OutputChannelUtilization;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v2 = ComputeSpatialUtilization((_QWORD *)(*((_QWORD *)this + 42) + 696));
  v3 = *((_QWORD *)this + 42);
  v4 = *(ZinNEPerf **)(v3 + 32);
  v5 = (const ZinIrHalParameters *)(v3 + 56);
  v6 = (const ZinCommonPerfInfo *)(v3 + 672);
  v7 = (const ZinNEPerfInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 408))(*(_QWORD *)(v3 + 24));
  OutputChannelUtilization = ZinNEPerf::GetOutputChannelUtilization(v4, v5, v6, v7);
  *((double *)this + 31) = OutputChannelUtilization;
  *((double *)this + 32) = v2;
  v9 = (double *)*((_QWORD *)this + 42);
  v10 = fmin((double)*((unint64_t *)this + 11) / v9[7] * 1000.0 / *((double *)this + 6), 1.0);
  v11 = v2 * (OutputChannelUtilization * v10);
  if (v11 > 1.0)
    v11 = 1.0;
  *((double *)this + 33) = v10;
  *((double *)this + 34) = v11;
  v12 = v9[10];
  v13 = v9[11];
  ZinEnginePerf::ComputeKernelReadBandwidth(this);
  v15 = 0;
  if (v13 >= v12)
    v16 = v12;
  else
    v16 = v13;
  *((double *)this + 35) = v14 / v16;
  v21 = *((_OWORD *)this + 16);
  v17 = *((_QWORD *)this + 31);
  v22 = *((_QWORD *)this + 34);
  v23 = v17;
  while (1)
  {
    v18 = *(double *)((char *)&v21 + v15);
    if (v18 <= 0.0 || v18 > 1.0)
      break;
    v15 += 8;
    if (v15 == 32)
      return 0;
  }
  return 3;
}

unint64_t ZinNEPerf::EstimateMinimumNumOfWorkunits(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  int i;

  v6 = *(_QWORD *)(a5 + 656);
  if (!v6)
    return -1;
  v7 = (*(_QWORD *)(a5 + 592) / a3) >> a4;
  v8 = a1 - 1;
  result = -1;
  v10 = 1;
  for (i = 1; i <= v6; v10 = i)
  {
    if ((a2 - 1 + v7 / v10) / (v7 / v10) * ((v8 + i) / i) < result)
    {
      *a6 = v10;
      v6 = *(_QWORD *)(a5 + 656);
      result = (a2 - 1 + v7 / v10) / (v7 / v10) * ((v8 + i) / i);
    }
    i *= 2;
  }
  return result;
}

void ZinNEPerf::CalculatePerf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Invalid NE utilization.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] NEPerf::ComputeRunTime has invalid results.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Texture operation analysis failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Dependency stall analysis is failed.\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] ZinNEPerf::ComputeRunCycle is not successful\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinNEPerf::ComputeRunTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "[ZinPerfModel] Total run time should not be less than or equal to zero\n", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1();
}

void ZinNEPerf::GetChainedDependencyStall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ERROR: Performance model call isn't successful, line: %d, file: %s", a5, a6, a7, a8, 2u);
}

void ZinNEPerf::GetL2DependencyStall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_2(&dword_2069AB000, MEMORY[0x24BDACB70], a3, "ERROR: Performance model call isn't successful, line: %d, file: %s", a5, a6, a7, a8, 2u);
}

uint64_t ZinIrOpt::ZinIrOptTwiceSameBottom(uint64_t **this, ZinIrOpLayerGraph *a2, ZinIrOpLayer *a3)
{
  _QWORD *v3;
  uint64_t v5;
  int v7;
  size_t v8;
  void *p_p;
  char *v10;
  __n128 v11;
  uint64_t v12;
  ZinIrTensor *v13;
  uint64_t v14;
  ZinIrOpLayer *ConstScaleAndBiasGOC;
  char v16;
  uint64_t Hal;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ZinIrOpLayer *ElementWiseLayer;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  ZinIrTensor *v33;
  uint64_t v34;
  ZinIrOpLayer *v35;
  _BOOL8 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD v54[2];
  int v55;
  _OWORD v56[2];
  int v57;
  void *v58;
  uint64_t v59;
  void *__p;
  void *v61;
  void *v62;
  char v63;
  _OWORD v64[2];
  int v65;
  void (**v66)(ZinObjectNameFactory *__hidden);
  void *v67;
  void *v68;
  char v69;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)*((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) - (_QWORD)v3 != 16)
    return 0;
  if (*v3 != v3[1])
    return 0;
  v5 = *((_QWORD *)a2 + 8);
  if (*(_DWORD *)(v5 + 8) != 5)
    return 0;
  v7 = *(_DWORD *)(v5 + 12);
  if (v7 != 2)
  {
    if (v7 == 1)
    {
      if (*((char *)a2 + 47) >= 0)
        v8 = *((unsigned __int8 *)a2 + 47);
      else
        v8 = *((_QWORD *)a2 + 4);
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v8 + 14);
      if (SHIBYTE(v62) < 0)
        p_p = __p;
      if (v8)
      {
        if (*((char *)a2 + 47) >= 0)
          v10 = (char *)a2 + 24;
        else
          v10 = (char *)*((_QWORD *)a2 + 3);
        memmove(p_p, v10, v8);
      }
      strcpy((char *)p_p + v8, "_samebottomopt");
      v11 = ZinObjectNameFactory::ZinObjectNameFactory(&v66, &__p);
      if (SHIBYTE(v62) < 0)
        operator delete(__p);
      v12 = *((_QWORD *)a2 + 2);
      v13 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0, v11);
      v14 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
      ConstScaleAndBiasGOC = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v12, (uint64_t)&v66, v13, *(_DWORD *)(v14 + 88), 0, 0, 1, 2.0, 0.0);
      v70[0] = a2;
      v58 = v70;
      v59 = 1;
      Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v58);
      ZinIrOpLayerGraph::AddNode(this, ConstScaleAndBiasGOC, (ZinIrOpLayer ***)&__p);
      __p = &unk_24C02BB18;
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      ZinIrOpLayerGraph::AddEdge((uint64_t)this, **((_QWORD **)a2 + 11), (uint64_t)ConstScaleAndBiasGOC, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
      memset(v64, 0, sizeof(v64));
      v65 = 1065353216;
      v16 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)this, (uint64_t **)a2, ConstScaleAndBiasGOC, v64);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v64);
      if ((v16 & 1) != 0)
      {
        ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, a2, 0);
      }
      else
      {
        v23 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        if (v23)
          std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v23, v24, v25, v26, v27, v28, v29, v30);
      }
LABEL_43:
      v66 = off_24C01FBB0;
      if ((v69 & 0x80000000) == 0)
        goto LABEL_50;
      v44 = v67;
      goto LABEL_49;
    }
LABEL_34:
    if (v7 != 4)
      return 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_samebottomopt", (const void **)a2 + 3, &__p);
    v31 = ZinObjectNameFactory::ZinObjectNameFactory(&v66, &__p);
    if (SHIBYTE(v62) < 0)
      operator delete(__p);
    v32 = *((_QWORD *)a2 + 2);
    v33 = (ZinIrTensor *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, __n128))(***((_QWORD ***)a2 + 11) + 32))(**((_QWORD **)a2 + 11), 0, 0, v31);
    v34 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v35 = (ZinIrOpLayer *)ZinBuilder::CreateConstScaleAndBiasGOC(v32, (uint64_t)&v66, v33, *(_DWORD *)(v34 + 88), 0, 0, 1, 0.0, 0.0);
    v70[0] = a2;
    v58 = v70;
    v59 = 1;
    Layer2TDMapper::SourceLayer::SourceLayer(&__p, &v58);
    ZinIrOpLayerGraph::AddNode(this, v35, (ZinIrOpLayer ***)&__p);
    __p = &unk_24C02BB18;
    if (v61)
    {
      v62 = v61;
      operator delete(v61);
    }
    ZinIrOpLayerGraph::AddEdge((uint64_t)this, **((_QWORD **)a2 + 11), (uint64_t)v35, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    memset(v54, 0, sizeof(v54));
    v55 = 1065353216;
    v16 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)this, (uint64_t **)a2, v35, v54);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v54);
    if ((v16 & 1) != 0)
    {
      ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, a2, 0);
    }
    else
    {
      v36 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if (v36)
        std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    goto LABEL_43;
  }
  Hal = ZinIrTarget::GetHal(*(ZinIrTarget **)(*((_QWORD *)a2 + 2) + 160));
  if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)Hal + 16))(Hal) + 1213))
  {
    v7 = *(_DWORD *)(*((_QWORD *)a2 + 8) + 12);
    goto LABEL_34;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_samebottomopt", (const void **)a2 + 3, (void **)&v66);
  v18 = ZinObjectNameFactory::ZinObjectNameFactory(&__p, &v66);
  if (SHIBYTE(v68) < 0)
    operator delete(v66);
  v19 = *((_QWORD *)a2 + 2);
  (*(void (**)(void (***__return_ptr)(ZinObjectNameFactory *__hidden), _QWORD, _QWORD, _QWORD, __n128))(***((_QWORD ***)a2 + 11) + 80))(&v66, **((_QWORD **)a2 + 11), 0, 0, v18);
  std::vector<ZinIrTensorInfo>::vector[abi:ne180100](&v58, &v66, 1uLL);
  v20 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  v21 = (*(uint64_t (**)(ZinIrOpLayerGraph *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ElementWiseLayer = (ZinIrOpLayer *)ZinBuilder::CreateElementWiseLayer(v19, (uint64_t)&__p, 3, (uint64_t)&v58, (__int128 *)(v20 + 48), *(_DWORD *)(v21 + 88));
  if (v58)
  {
    v59 = (uint64_t)v58;
    operator delete(v58);
  }
  v70[0] = a2;
  v58 = v70;
  v59 = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(&v66, &v58);
  ZinIrOpLayerGraph::AddNode(this, ElementWiseLayer, (ZinIrOpLayer ***)&v66);
  v66 = (void (**)(ZinObjectNameFactory *__hidden))&unk_24C02BB18;
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  ZinIrOpLayerGraph::AddEdge((uint64_t)this, **((_QWORD **)a2 + 11), (uint64_t)ElementWiseLayer, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  memset(v56, 0, sizeof(v56));
  v57 = 1065353216;
  v16 = ZinIrOpLayerGraph::MoveOutgoingEdges((ZinIrOpLayerGraph *)this, (uint64_t **)a2, ElementWiseLayer, v56);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v56);
  if ((v16 & 1) != 0)
  {
    ZinIrOpLayerGraph::RemoveNode((ZinIrOpLayerGraph *)this, a2, 0);
  }
  else
  {
    v45 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    if (v45)
      std::__function::__func<ZinMirLayerFusion::Commit(void)::$_0,std::allocator<ZinMirLayerFusion::Commit(void)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  __p = off_24C01FBB0;
  if (v63 < 0)
  {
    v44 = v61;
LABEL_49:
    operator delete(v44);
  }
LABEL_50:
  if ((v16 & 1) == 0)
    return 3;
  return 0;
}

void sub_20701B5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void (**a24)(ZinObjectNameFactory *__hidden this),void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a15);
  a24 = off_24C01FBB0;
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ZinIrCostVolumeUnit::ZinIrCostVolumeUnit(ZinIrCostVolumeUnit *this, const ZinIrCostVolumeUnitInfo *a2)
{
  __int128 v4;
  int v5;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  ZinIrUnit::ZinIrUnit(this, (uint64_t)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  *(_QWORD *)this = &off_24C01EAF0;
  *((_QWORD *)this + 7) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 4) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 22) = v5;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 4, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 120) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 7) = &unk_24C022190;
  *(_OWORD *)((char *)this + 136) = *((_OWORD *)a2 + 5);
}

void sub_20701B7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ZinIrUnit *v11;

  ZinIrUnit::~ZinIrUnit(v11);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCostVolumeUnit::TensorDimensions(ZinIrCostVolumeUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)this + 1);
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *((_QWORD *)a3 + 4) = *(_QWORD *)(v4 + 40);
  *(_OWORD *)a3 = v5;
  *((_OWORD *)a3 + 1) = v6;
  *((_QWORD *)a3 + 1) = *((int *)this + 35) + 1;
  return 0;
}

void std::make_unique[abi:ne180100]<ZinIrCostVolumeInfo,ZinIrCostVolumeUnitInfo &>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  void (**v6)(ZinIrUnitInfo *__hidden);
  std::string v7;
  int v8;
  std::string v9;
  __int128 v10;
  __int128 v11;

  v4 = operator new();
  v6 = off_24C017CA0;
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    v7 = *(std::string *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 32);
  memset(&v9, 0, sizeof(v9));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, *(__int128 **)(a1 + 40), *(__int128 **)(a1 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3));
  v6 = (void (**)(ZinIrUnitInfo *__hidden))&unk_24C022190;
  v5 = *(_OWORD *)(a1 + 80);
  v10 = *(_OWORD *)(a1 + 64);
  v11 = v5;
  ZinIrCostVolumeInfo::ZinIrCostVolumeInfo(v4, (uint64_t)&v6);
  *a2 = v4;
  ZinIrUnitInfo::~ZinIrUnitInfo((void **)&v6);
}

void sub_20701B94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x20BD002F8](v15, 0x1081C40DCAC275BLL);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCostVolumeUnit::CreateLayer(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  int v17;
  uint64_t v18;

  std::make_unique[abi:ne180100]<ZinIrCostVolumeInfo,ZinIrCostVolumeUnitInfo &>(a1 + 56, &v18);
  v17 = 0;
  v5 = operator new();
  v6 = v5;
  v7 = (std::__shared_weak_count *)(*a3)[1];
  v15 = **a3;
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  ZinCostVolumeLayer::ZinCostVolumeLayer(v5, &v18, &v15, a1 + 64);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  ZinIrOpLayer::ValidateSemantics(v6);
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v6;
}

void sub_20701BAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C409D855DA1);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void ZinIrCostVolumeUnit::~ZinIrCostVolumeUnit(void **this)
{
  *this = &off_24C01EAF0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
}

{
  *this = &off_24C01EAF0;
  ZinIrUnitInfo::~ZinIrUnitInfo(this + 7);
  ZinIrUnit::~ZinIrUnit((ZinIrUnit *)this);
  JUMPOUT(0x20BD002F8);
}

uint64_t ZinMirPETransposeFusion::Execute(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_24C0017C0;
  v7[1] = a1;
  v7[2] = a3;
  v8 = v7;
  v3 = ZinIrControlFlowGraph::TraverseForward(a2, (uint64_t)v7, 1);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void sub_20701BC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void ZinMirPETransposeFusion::FuseCWTransposeToPE(int a1, ZinTransposeLayer *this, ZinIrOpLayerGraph *a3, uint64_t a4)
{
  _BOOL8 IsCWTranspose;
  _BOOL8 v7;
  _BOOL8 v8;

  if (*(_BYTE *)(**(_QWORD **)a4 + 1880))
  {
    IsCWTranspose = ZinTransposeLayer::IsCWTranspose(this);
    if (IsCWTranspose)
    {
      v7 = ZinMirPETransposeFusion::FuseCWTransposeToPEAsOutput(IsCWTranspose, this, a3);
      if (!v7)
      {
        v8 = ZinMirPETransposeFusion::FuseCWTransposeToPEAsInput(v7, this, a3);
        if (!v8)
          ZinMirPETransposeFusion::ConvertToNEBypass(v8, (char *)this, a3);
      }
    }
  }
}

BOOL ZinMirPETransposeFusion::FuseCWTransposeToPEAsOutput(uint64_t a1, ZinIrOpLayer *a2, ZinIrOpLayerGraph *a3)
{
  ZinIrOpLayer *v5;
  _BOOL8 result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ZinIrOpLayer *v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  _OWORD v22[2];
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v5 = (ZinIrOpLayer *)**((_QWORD **)a2 + 11);
  result = ZinIrOpLayer::IsPELayer(v5);
  if (result)
  {
    if (*((_QWORD *)v5 + 15) - *((_QWORD *)v5 + 14) > 8uLL)
      return 0;
    v7 = (_QWORD *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0, 0);
    v8 = v7[7];
    v9 = v7[8];
    v10 = v7[9];
    v11 = (*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 408))(v5) ? v8 : v10;
    if (v9 != 1 || v11 != 1)
      return 0;
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v5 + 408))(v5))
      v13 = 0;
    else
      v13 = a2;
    (*(void (**)(ZinIrOpLayer *, ZinIrOpLayer *))(*(_QWORD *)v5 + 728))(v5, v13);
    v14 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 40))(a2, 0, 0);
    v15 = (std::__shared_weak_count *)v14[1];
    v24 = *v14;
    v25 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    (*(void (**)(ZinIrOpLayer *, uint64_t *))(*(_QWORD *)v5 + 24))(v5, &v24);
    v18 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    memset(v22, 0, sizeof(v22));
    v23 = 1065353216;
    if (ZinIrOpLayerGraph::MoveOutgoingEdges(a3, (uint64_t **)a2, v5, v22))
    {
      v21 = ZinIrOpLayerGraph::RemoveNode(a3, a2, 0);
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
      if (v21)
        return 1;
    }
    else
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v22);
    }
    ZinAssertImpl("graph modification failed while fusing cw transpose into pe layer");
  }
  return result;
}

void sub_20701BE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL ZinMirPETransposeFusion::FuseCWTransposeToPEAsInput(uint64_t a1, ZinIrOpLayer *a2, ZinIrOpLayerGraph *a3)
{
  ZinIrOpLayer **v3;
  uint64_t v5;
  ZinIrOpLayer *v7;
  _BOOL8 result;
  ZinIrOpLayer **v9;
  ZinIrOpLayer *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  ZinIrOpLayer *v27;

  v3 = (ZinIrOpLayer **)*((_QWORD *)a2 + 14);
  if (*((_QWORD *)a2 + 15) - (_QWORD)v3 > 8uLL)
    return 0;
  v5 = **((_QWORD **)a2 + 11);
  if (*(_DWORD *)(*(_QWORD *)(v5 + 64) + 8) == 35)
    return 0;
  v7 = *v3;
  result = ZinIrOpLayer::IsPELayer(*v3);
  if (!result)
    return result;
  if (*((_QWORD *)v7 + 25))
    return 0;
  v9 = (ZinIrOpLayer **)*((_QWORD *)v7 + 11);
  v10 = *v9;
  if (*v9 == a2)
  {
    v21 = (_QWORD *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v22 = v21[7];
    v23 = v21[8];
    v24 = v21[9];
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v7 + 640))(v7))
      v25 = v22;
    else
      v25 = v24;
    if (v23 != 1 || v25 != 1)
      return 0;
    v19 = 92;
    v20 = 80;
  }
  else
  {
    if (v9[1] != a2)
      return 0;
    v11 = *(_DWORD *)(*((_QWORD *)v7 + 8) + 8);
    v12 = (_QWORD *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
    v13 = v12[7];
    v14 = v12[8];
    v15 = v12[9];
    if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v7 + 640))(v7))
      v16 = v13;
    else
      v16 = v15;
    v17 = 1;
    if (v11 == 84)
      v17 = 2;
    if (v14 != v17 || v16 != 1)
      return 0;
    v19 = 93;
    v20 = 81;
  }
  if ((*(unsigned int (**)(ZinIrOpLayer *))(*(_QWORD *)v7 + 8 * v20))(v7))
    v27 = 0;
  else
    v27 = a2;
  (*(void (**)(ZinIrOpLayer *, ZinIrOpLayer *))(*(_QWORD *)v7 + 8 * v19))(v7, v27);
  if (!ZinIrOpLayerGraph::SwapEdgeDestination((uint64_t)a3, v5, (uint64_t)a2, (uint64_t)v7, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0)|| !ZinIrOpLayerGraph::RemoveNode(a3, a2, 0))
  {
    ZinAssertImpl("Failed to update graph to fuse CW transpose into PE layer input");
  }
  if (v10 == a2
    && (ZinIrOpLayerGraph::SwapEdgeSource((uint64_t)a3, **((ZinIrOpLayerGraph ***)v7 + 11), **((ZinIrOpLayer ***)v7 + 11), (uint64_t)v7, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0) & 1) == 0)
  {
    ZinAssertImpl("Failed to swap inputs to the PE layer after fusing CW transpose input");
  }
  return 1;
}

void ZinMirPETransposeFusion::ConvertToNEBypass(uint64_t a1, char *a2, ZinIrOpLayerGraph *a3)
{
  size_t v5;
  std::string *v6;
  const char *v7;
  const void *v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  ZinIrOpLayer *v20;
  _QWORD *v21;
  uint64_t *v22;
  ZinIrTensor *v23;
  int v24;
  ZinIrTensor::MirInfo *v25;
  BOOL v26;
  _OWORD v27[2];
  int v28;
  void *__p[2];
  void *v30;
  ZinIrTensor::MirInfo *v31;
  _BYTE v32[172];
  _QWORD *v33;
  void *v34;
  char v35;
  std::string v36;
  _QWORD v37[3];
  char v38;
  __int128 v39;
  int64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a2[47] >= 0)
    v5 = a2[47];
  else
    v5 = *((_QWORD *)a2 + 4);
  v6 = &v36;
  std::string::basic_string[abi:ne180100]((uint64_t)&v36, v5 + 1);
  v7 = a2 + 24;
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (a2[47] >= 0)
      v8 = a2 + 24;
    else
      v8 = (const void *)*((_QWORD *)a2 + 3);
    memmove(v6, v8, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 95;
  v9 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v34, "pe_trans");
  v10 = std::string::append(v9, "_xfm", 4uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v40 = v10->__r_.__value_.__r.__words[2];
  v39 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v12 = (const std::string::value_type *)&v39;
  else
    v12 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v13 = HIBYTE(v40);
  else
    v13 = *((_QWORD *)&v39 + 1);
  v14 = std::string::append(&v36, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30 = (void *)v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = ZinObjectNameFactory::ZinObjectNameFactory(v37, __p);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v35 < 0)
    operator delete(v34);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v17 = **((_QWORD **)a2 + 11);
  v18 = *((_QWORD *)a2 + 2);
  v19 = *(_DWORD *)((*(uint64_t (**)(char *, _QWORD, _QWORD, __n128))(*(_QWORD *)a2 + 32))(a2, 0, 0, v16)+ 88);
  v33 = 0;
  v32[0] = 0;
  v32[168] = 0;
  v20 = (ZinIrOpLayer *)ZinBuilder::CreateNEBypass(v18, (uint64_t)v37, v17, v19, &v33, 1, (uint64_t)v32, 1.0);
  v21 = v33;
  v33 = 0;
  if (v21)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v33, v21);
  v22 = (uint64_t *)(*(uint64_t (**)(ZinIrOpLayer *, _QWORD, _QWORD))(*(_QWORD *)v20 + 32))(v20, 0, 0);
  v23 = (ZinIrTensor *)(*(uint64_t (**)(char *, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0, 0);
  ZinIrTensor::CopyTensorMirInfo(v23, &v31);
  v24 = ZinIrTensor::SetTensorMirInfo(v22, &v31);
  v25 = v31;
  v31 = 0;
  if (v25)
    std::default_delete<ZinIrTensor::MirInfo>::operator()[abi:ne180100]((uint64_t)&v31, v25);
  if (v24)
  {
    if (a2[47] < 0)
      v7 = *(const char **)v7;
    ZinAssertImpl("Failed to set interleave on NEBypass for CW Transpose %s", v7);
  }
  *(_QWORD *)&v39 = a2;
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  v36.__r_.__value_.__l.__size_ = 1;
  Layer2TDMapper::SourceLayer::SourceLayer(__p, &v36);
  if (ZinIrOpLayerGraph::AddNode((uint64_t **)a3, v20, (ZinIrOpLayer ***)__p))
  {
    memset(v27, 0, sizeof(v27));
    v28 = 1065353216;
    v26 = ZinIrOpLayerGraph::MoveOutgoingEdges(a3, (uint64_t **)a2, v20, v27)
       && ZinIrOpLayerGraph::AddEdge((uint64_t)a3, v17, (uint64_t)v20, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0)&& ZinIrOpLayerGraph::RemoveNode(a3, (ZinIrOpLayer *)a2, 0);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)v27);
  }
  else
  {
    v26 = 0;
  }
  __p[0] = &unk_24C02BB18;
  if (__p[1])
  {
    v30 = __p[1];
    operator delete(__p[1]);
  }
  if (!v26)
    ZinAssertImpl("Graph modification failed while creating engine layer for CW transpose");
  v37[0] = off_24C01FBB0;
  if (v38 < 0)
    operator delete((void *)v37[1]);
}

void sub_20701C41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)&a11);
  a17 = &unk_24C02BB18;
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  *(_QWORD *)(v22 - 136) = off_24C01FBB0;
  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(a1);
}

void std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::~__func()
{
  JUMPOUT(0x20BD002F8);
}

__n128 std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C0017C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0017C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::operator()(uint64_t a1, ZinIrOpLayerGraph **a2, ZinTransposeLayer **a3)
{
  if (*(_DWORD *)(*((_QWORD *)*a3 + 8) + 8) == 37)
    ZinMirPETransposeFusion::FuseCWTransposeToPE(*(_QWORD *)(a1 + 8), *a3, *a2, *(_QWORD *)(a1 + 16));
  return 0;
}

uint64_t std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0,std::allocator<ZinMirPETransposeFusion::Execute(ZinIrControlFlowGraph *,ZinTransformInfo *)::$_0>,ZinIrStatus ()(ZinIrOpLayerGraph *,ZinIrOpLayer *)>::target_type()
{
}

uint64_t ZinF16ToE5M2(float a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (LODWORD(a1) >> 8) & 0x80;
  v2 = v1 | ((((unsigned __int16)(LOWORD(a1) & 0x7FFF) >> 7) + 1) >> 1);
  v3 = v1 | 0x7E;
  if ((LOWORD(a1) & 0x7FFFu) >= 0x7C01)
    return v3;
  else
    return v2;
}

float ZinE5M2ToF16(int a1)
{
  float result;

  LODWORD(result) = a1 << 8;
  return result;
}

float ZinE5M2ToF32(__int16 a1)
{
  float result;

  _H0 = a1 << 8;
  __asm { FCVT            S0, H0 }
  return result;
}

uint64_t ZinF32ToE5M2(float _S0)
{
  int v5;
  unsigned int v6;
  unsigned int v7;

  __asm { FCVT            H0, S0 }
  v5 = (LODWORD(_S0) >> 8) & 0x80;
  v6 = v5 | ((((unsigned __int16)(LOWORD(_S0) & 0x7FFF) >> 7) + 1) >> 1);
  v7 = v5 | 0x7E;
  if ((LOWORD(_S0) & 0x7FFFu) >= 0x7C01)
    return v7;
  else
    return v6;
}

uint64_t ZinIrCropResizeUnit::ZinIrCropResizeUnit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;

  v5 = ZinIrUnit::ZinIrUnit((_QWORD *)a1, a3);
  *v5 = &off_24C01EBC0;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinIrTextureUnitInfo *)(v5 + 7), (const ZinIrTextureUnitInfo *)a2);
  v6 = *(_DWORD *)(a2 + 156);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 56) = &off_24C0221B0;
  *(_DWORD *)(a1 + 212) = v6;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)(a1 + 216), *(const void **)(a2 + 160), *(_QWORD *)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 3);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 184);
  return a1;
}

void sub_20701C71C(_Unwind_Exception *a1)
{
  ZinIrUnit *v1;
  ZinIrTextureUnitInfo *v2;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v2);
  ZinIrUnit::~ZinIrUnit(v1);
  _Unwind_Resume(a1);
}

uint64_t ZinIrCropResizeUnit::TensorDimensions(ZinIrCropResizeUnit *this, const ZinIrHalParameters *a2, ZinTensorDimensions *a3, ZinIrUnitStatus *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) - (_QWORD)v4 != 240)
    ZinAssertImpl("CropResize layer should have two bottoms, (1) input tensor and (2) index tensor.", a2, a3, a4);
  v5 = v4[2];
  *(_QWORD *)a3 = v4[16];
  *((_QWORD *)a3 + 1) = v5;
  *((_QWORD *)a3 + 4) = v4[5];
  v6 = *((int *)this + 60);
  *((_QWORD *)a3 + 2) = *((int *)this + 61);
  *((_QWORD *)a3 + 3) = v6;
  return 0;
}

int8x16_t ZinIrCropResizeUnit::CreateOpcode@<Q0>(unsigned int **this@<X0>, const ZinIrHalParameters *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int8x16_t result;
  const char *v10;
  _QWORD v11[2];
  char v12;

  v5 = *(_DWORD *)((*((uint64_t (**)(unsigned int **, const ZinIrHalParameters *))*this + 14))(this, a2) + 64);
  v6 = *this[1];
  if (v5)
  {
    if (v5 == v6)
      v7 = v5;
    else
      v7 = 3;
  }
  else
  {
    if (v6 == 8)
      ZinAssertImpl("Invalid input layer format:%s for the crop_resize layer", "packed10");
    if ((IsFormatDMAConvertibleToFP16(v6) & 1) != 0)
    {
      v7 = 3;
    }
    else
    {
      if (CheckValidFormat(*this[1]))
      {
        ZinTensorFormatToString(*this[1], v11);
        if (v12 >= 0)
          v10 = (const char *)v11;
        else
          v10 = (const char *)v11[0];
        ZinAssertImpl("Invalid input layer format:%s for the crop_resize layer", v10);
      }
      v7 = *this[1];
    }
  }
  v8 = operator new();
  ZinIrCropResizeInfo::ZinIrCropResizeInfo((ZinIrCropResizeInfo *)v8, (const ZinIrCropResizeUnitInfo *)(this + 7));
  *(_DWORD *)(v8 + 80) = v7;
  result = vextq_s8(*(int8x16_t *)(this[1] + 6), *(int8x16_t *)(this[1] + 6), 8uLL);
  *(int8x16_t *)(v8 + 216) = result;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v8;
  return result;
}

void sub_20701C8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ZinIrCropResizeUnit::CreateLayer(unsigned int **a1, const ZinIrHalParameters *a2, uint64_t **a3)
{
  int8x16_t Opcode;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  int v18;
  uint64_t v19;

  Opcode = ZinIrCropResizeUnit::CreateOpcode(a1, a2, (uint64_t)&v18);
  if (v18)
  {
    v6 = 0;
  }
  else
  {
    v7 = operator new();
    v6 = v7;
    v8 = (std::__shared_weak_count *)(*a3)[1];
    v16 = **a3;
    v17 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    ZinCropResizeLayer::ZinCropResizeLayer(v7, &v19, &v16, a1 + 8);
    v11 = v17;
    if (v17)
    {
      v12 = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    ZinIrOpLayer::ValidateSemantics(v6);
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t, int8x16_t))(*(_QWORD *)v14 + 8))(v14, Opcode);
  return v6;
}

void sub_20701CA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  std::shared_ptr<ZinIrConstData>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x20BD002F8](v12, 0x10B3C4024B96488);
  v14 = a12;
  a12 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, ZinIrPadUnitInfo *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_DWORD *)this = 44;
  ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)this + 8), a2);
  *((_QWORD *)this + 1) = &off_24C01BAC0;
  v4 = *(_OWORD *)((char *)a2 + 156);
  v5 = *(_OWORD *)((char *)a2 + 172);
  v6 = *(_QWORD *)((char *)a2 + 188);
  *((_QWORD *)this + 26) = 0;
  *(_QWORD *)((char *)this + 196) = v6;
  *(_OWORD *)((char *)this + 180) = v5;
  *(_OWORD *)((char *)this + 164) = v4;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 26, *((const void **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3);
  *((_WORD *)this + 116) = *((_WORD *)a2 + 112);
  return this;
}

void sub_20701CB04(_Unwind_Exception *a1)
{
  ZinIrTextureUnitInfo *v1;

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(v1);
  _Unwind_Resume(a1);
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, ZinIrInputViewUnitInfo *a2)
{
  __int128 v4;
  int v5;

  *(_DWORD *)this = 17;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C021970;
  *(_OWORD *)((char *)this + 88) = *((_OWORD *)a2 + 5);
  return this;
}

void sub_20701CBDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, ZinIrPixelShuffleUnitInfo *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)this = 31;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C023650;
  v6 = *((_QWORD *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 11) = v6;
  return this;
}

void sub_20701CCC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, ZinIrPixelUnshuffleUnitInfo *a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)this = 32;
  *((_QWORD *)this + 1) = off_24C017CA0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 3);
    *((_OWORD *)this + 1) = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = v5;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 1) = off_24C024450;
  v6 = *((_QWORD *)a2 + 10);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 22);
  *((_QWORD *)this + 11) = v6;
  return this;
}

void sub_20701CDAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::~ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this)
{
  int v2;
  void *v3;
  void **v4;
  void *v5;
  void *v6;

  v2 = *(_DWORD *)this;
  if (*(int *)this <= 30)
  {
    if (v2 == 1)
    {
      *((_QWORD *)this + 1) = off_24C01ED88;
      v5 = (void *)*((_QWORD *)this + 20);
      if (v5)
      {
        *((_QWORD *)this + 21) = v5;
        operator delete(v5);
      }
      v6 = (void *)*((_QWORD *)this + 17);
      if (v6)
      {
        *((_QWORD *)this + 18) = v6;
        operator delete(v6);
      }
      v4 = (void **)((char *)this + 8);
      goto LABEL_16;
    }
    if (v2 != 17)
      return;
LABEL_10:
    v4 = (void **)((char *)this + 8);
LABEL_16:
    ZinIrUnitInfo::~ZinIrUnitInfo(v4);
    return;
  }
  if (v2 == 31 || v2 == 32)
    goto LABEL_10;
  if (v2 == 44)
  {
    *((_QWORD *)this + 1) = &off_24C01BAC0;
    v3 = (void *)*((_QWORD *)this + 26);
    if (v3)
    {
      *((_QWORD *)this + 27) = v3;
      operator delete(v3);
    }
    ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)this + 8));
  }
}

ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc::ConvLargeKernelDecomposedDesc(ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *this, const ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  char *v17;
  int v18;
  uint64_t v19;
  int v20;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 > 30)
  {
    if (v4 == 31)
    {
      *((_QWORD *)this + 1) = off_24C017CA0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v9 = *((_OWORD *)a2 + 1);
        *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
        *((_OWORD *)this + 1) = v9;
      }
      v16 = *((_DWORD *)a2 + 10);
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = v16;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
    }
    else
    {
      if (v4 != 32)
      {
        if (v4 == 44)
        {
          ZinIrTextureUnitInfo::ZinIrTextureUnitInfo((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)this + 8), (const ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)a2 + 8));
          *((_QWORD *)this + 1) = &off_24C01BAC0;
          v5 = *(_OWORD *)((char *)a2 + 164);
          v6 = *(_OWORD *)((char *)a2 + 180);
          v7 = *(_QWORD *)((char *)a2 + 196);
          *((_QWORD *)this + 26) = 0;
          *(_QWORD *)((char *)this + 196) = v7;
          *(_OWORD *)((char *)this + 180) = v6;
          *(_OWORD *)((char *)this + 164) = v5;
          *((_QWORD *)this + 27) = 0;
          *((_QWORD *)this + 28) = 0;
          std::vector<ZinIrOpLayer *>::__init_with_size[abi:ne180100]<ZinIrOpLayer **,ZinIrOpLayer **>((_QWORD *)this + 26, *((const void **)a2 + 26), *((_QWORD *)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 3);
          *((_WORD *)this + 116) = *((_WORD *)a2 + 116);
        }
        return this;
      }
      *((_QWORD *)this + 1) = off_24C017CA0;
      if (*((char *)a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
      }
      else
      {
        v10 = *((_OWORD *)a2 + 1);
        *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
        *((_OWORD *)this + 1) = v10;
      }
      v18 = *((_DWORD *)a2 + 10);
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 10) = v18;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
      *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
    }
    *((_QWORD *)this + 1) = v17 + 16;
    v19 = *((_QWORD *)a2 + 11);
    *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
    *((_QWORD *)this + 11) = v19;
    return this;
  }
  if (v4 == 1)
  {
    ZinIrKernelUnitInfo::ZinIrKernelUnitInfo((ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)this + 8), (const ZinLargeKernelSizeUtils::ConvLargeKernelDecomposedDesc *)((char *)a2 + 8));
    *((_QWORD *)this + 1) = off_24C01CAD8;
    v11 = *(_OWORD *)((char *)a2 + 248);
    v12[16] = *(_OWORD *)((char *)a2 + 264);
    *(_OWORD *)((char *)this + 248) = v11;
    v13 = *(_OWORD *)((char *)a2 + 280);
    v14 = *(_OWORD *)((char *)a2 + 296);
    v15 = *(_OWORD *)((char *)a2 + 312);
    *(_OWORD *)((char *)this + 324) = *(_OWORD *)((char *)a2 + 324);
    v12[18] = v14;
    v12[19] = v15;
    v12[17] = v13;
  }
  else if (v4 == 17)
  {
    *((_QWORD *)this + 1) = off_24C017CA0;
    if (*((char *)a2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
    }
    else
    {
      v8 = *((_OWORD *)a2 + 1);
      *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
      *((_OWORD *)this + 1) = v8;
    }
    v20 = *((_DWORD *)a2 + 10);
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 10) = v20;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
    *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 1) = off_24C021970;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
  }
  return this;
}

void sub_20701D15C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

